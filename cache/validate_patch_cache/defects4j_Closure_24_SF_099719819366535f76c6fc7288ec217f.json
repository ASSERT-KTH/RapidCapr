{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n.getParent();\n    if (parent != null && parent.isVar() && parent.getChildCount() == 1) {\n      Node varChild = parent.getFirstChild();\n      if (n.hasChildren() && varChild.isQualifiedName()) {\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n        // Check if the variable is an alias and has a qualified name (i.e., not a local variable).\n        if (aliasVar != null && aliasVar.getInitialValue() != null\n            && aliasVar.getInitialValue().isQualifiedName()) {\n          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n          if (!aliasVar.isLocal()) {\n            aliases.put(name, aliasVar);\n            transformation.addAlias(name, qualifiedName);\n          } else if (qualifiedName.equals(name) && !qualifiedName.contains(\".\")) {\n            // Special case for aliases that refer to themselves (e.g., 'var x = x;').\n            aliases.put(name, aliasVar);\n            transformation.addAlias(name, qualifiedName);\n          } else if (isPrivateAlias(name) && isPrivateAlias(qualifiedName)) {\n            // Private variables cannot be used as aliases.\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n          }\n        } else if (isPrivateAlias(name)) {\n          // Private variables cannot be used as aliases.\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n        }\n      } else if (isPrivateAlias(n.getString())) {\n        // Local private variables cannot be used as aliases.\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      }\n    }\n  }\n}\n\nprivate boolean isPrivateAlias(String str) {\n  return str.startsWith(PRIVATE_PREFIX) && !str.contains(\".\");\n}\n\nprivate static final String PRIVATE_PREFIX = \"___\";",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..2743b498 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,48 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+    if (parent != null && parent.isVar() && parent.getChildCount() == 1) {\n+      Node varChild = parent.getFirstChild();\n+      if (n.hasChildren() && varChild.isQualifiedName()) {\n+        String name = n.getString();\n+        Var aliasVar = scope.getVar(name);\n+        // Check if the variable is an alias and has a qualified name (i.e., not a local variable).\n+        if (aliasVar != null && aliasVar.getInitialValue() != null\n+            && aliasVar.getInitialValue().isQualifiedName()) {\n+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+          if (!aliasVar.isLocal()) {\n+            aliases.put(name, aliasVar);\n+            transformation.addAlias(name, qualifiedName);\n+          } else if (qualifiedName.equals(name) && !qualifiedName.contains(\".\")) {\n+            // Special case for aliases that refer to themselves (e.g., 'var x = x;').\n+            aliases.put(name, aliasVar);\n+            transformation.addAlias(name, qualifiedName);\n+          } else if (isPrivateAlias(name) && isPrivateAlias(qualifiedName)) {\n+            // Private variables cannot be used as aliases.\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+          }\n+        } else if (isPrivateAlias(name)) {\n+          // Private variables cannot be used as aliases.\n+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n         }\n+      } else if (isPrivateAlias(n.getString())) {\n+        // Local private variables cannot be used as aliases.\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n       }\n     }\n+  }\n+}\n+\n+private boolean isPrivateAlias(String str) {\n+  return str.startsWith(PRIVATE_PREFIX) && !str.contains(\".\");\n+}\n+\n+private static final String PRIVATE_PREFIX = \"___\";\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}