{
    "patch": "public ReturnValue execute (Invocation invocation) throws Throwable {\n    Method method = invocation.getMethod();\n    Class<?> returnType = method.getReturnType();\n    if (returnType.isPrimitive()) {\n        if (returnType == boolean.class) {\n            return new ReturnValue(false);\n        } else if (returnType == char.class) {\n            return new ReturnValue('\\u0000');\n        } else if (returnType == byte.class || returnType == short.class || returnType == int.class) {\n            return new ReturnValue(0);\n        } else if (returnType == long.class) {\n            return new ReturnValue(0L);\n        } else if (returnType == float.class) {\n            return new ReturnValue(0f);\n        } else if (returnType == double.class) {\n            return new ReturnValue(0d);\n        }\n    } else if (returnType == String.class) {\n        return new ReturnValue(\"\");\n    } else if (returnType == Iterable.class) {\n        return new ReturnValue(Collections.emptyList());\n    } else if (returnType == Map.class) {\n        return new ReturnValue(Collections.emptyMap());\n    }\n    //throw new UnsupportedOperationException(\"Cannot create default value for type \" + returnType.getName());\n    return null; // Added hunk to fix the unreachable statement error\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}