{
    "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n    // Hexadecimal:\n    final int offset = (str.charAt(0) == '-' ? 1 : 0) + (str.charAt(1) == '0' && (str.charAt(2) == 'x' || str.charAt(2) == 'X') ? 2 : 0);\n    try {\n        return Integer.decode(str.substring(offset));\n    } catch (NumberFormatException e) {\n        throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 882358f2..f4b96487 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -455,7 +455,15 @@ public class NumberUtils {\n             // a wrong value.\n             return null;\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n+    // Hexadecimal:\n+    final int offset = (str.charAt(0) == '-' ? 1 : 0) + (str.charAt(1) == '0' && (str.charAt(2) == 'x' || str.charAt(2) == 'X') ? 2 : 0);\n+    try {\n+        return Integer.decode(str.substring(offset));\n+    } catch (NumberFormatException e) {\n+        throw new NumberFormatException(str + \" is not a valid number.\");\n+    }\n+}\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}