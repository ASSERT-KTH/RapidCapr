{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int initialOffset = getOffset(instantLocal);\n\n    long nextTransitionLocal = nextTransition(instantLocal - initialOffset);\n    long nextTransitionAdjusted = nextTransition(instantLocal - initialOffset - initialOffset);\n\n    while (true) {\n        if (nextTransitionLocal != nextTransitionAdjusted && Math.abs(nextTransitionLocal - nextTransitionAdjusted) < 86400000L) {\n            int offsetBeforeTransitionLocal = getOffset(nextTransitionLocal - 1);\n            int offsetBeforeTransitionAdjusted = getOffset(nextTransitionAdjusted - 1);\n            int offsetAfterTransitionLocal = getOffset(nextTransitionLocal);\n            int offsetAfterTransitionAdjusted = getOffset(nextTransitionAdjusted);\n\n            if (offsetBeforeTransitionLocal == offsetAfterTransitionLocal && offsetBeforeTransitionAdjusted == offsetAfterTransitionAdjusted) {\n                // There's no gap or overlap, return the initial offset.\n                return initialOffset;\n            } else if (offsetBeforeTransitionLocal > offsetAfterTransitionLocal) {\n                // The local time is in a gap.\n                return offsetBeforeTransitionLocal;\n            } else if (offsetBeforeTransitionAdjusted > offsetAfterTransitionAdjusted) {\n                // The adjusted time is in a gap.\n                return offsetBeforeTransitionAdjusted;\n            } else if (offsetAfterTransitionLocal > offsetBeforeTransitionLocal) {\n                // The local time is in an overlap.\n                return initialOffset > 0 ? offsetAfterTransitionLocal : offsetBeforeTransitionLocal;\n            } else if (offsetAfterTransitionAdjusted > offsetBeforeTransitionAdjusted) {\n                // The adjusted time is in an overlap.\n                return initialOffset < 0 ? offsetAfterTransitionAdjusted : offsetBeforeTransitionAdjusted;\n            }\n        }\n\n        // Advance to the next transition.\n        initialOffset = getOffset(nextTransitionLocal);\n        nextTransitionLocal = nextTransition(nextTransitionLocal);\n\n        if (Math.abs(nextTransitionLocal - instantLocal) > 15768000000L) {\n            // The next transition is more than six months away, so we assume that the local time is not ambiguous.\n            return initialOffset;\n        }\n\n        nextTransitionAdjusted = nextTransition(nextTransitionAdjusted);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..cb5d10be 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,49 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int initialOffset = getOffset(instantLocal);\n+\n+    long nextTransitionLocal = nextTransition(instantLocal - initialOffset);\n+    long nextTransitionAdjusted = nextTransition(instantLocal - initialOffset - initialOffset);\n+\n+    while (true) {\n+        if (nextTransitionLocal != nextTransitionAdjusted && Math.abs(nextTransitionLocal - nextTransitionAdjusted) < 86400000L) {\n+            int offsetBeforeTransitionLocal = getOffset(nextTransitionLocal - 1);\n+            int offsetBeforeTransitionAdjusted = getOffset(nextTransitionAdjusted - 1);\n+            int offsetAfterTransitionLocal = getOffset(nextTransitionLocal);\n+            int offsetAfterTransitionAdjusted = getOffset(nextTransitionAdjusted);\n+\n+            if (offsetBeforeTransitionLocal == offsetAfterTransitionLocal && offsetBeforeTransitionAdjusted == offsetAfterTransitionAdjusted) {\n+                // There's no gap or overlap, return the initial offset.\n+                return initialOffset;\n+            } else if (offsetBeforeTransitionLocal > offsetAfterTransitionLocal) {\n+                // The local time is in a gap.\n+                return offsetBeforeTransitionLocal;\n+            } else if (offsetBeforeTransitionAdjusted > offsetAfterTransitionAdjusted) {\n+                // The adjusted time is in a gap.\n+                return offsetBeforeTransitionAdjusted;\n+            } else if (offsetAfterTransitionLocal > offsetBeforeTransitionLocal) {\n+                // The local time is in an overlap.\n+                return initialOffset > 0 ? offsetAfterTransitionLocal : offsetBeforeTransitionLocal;\n+            } else if (offsetAfterTransitionAdjusted > offsetBeforeTransitionAdjusted) {\n+                // The adjusted time is in an overlap.\n+                return initialOffset < 0 ? offsetAfterTransitionAdjusted : offsetBeforeTransitionAdjusted;\n             }\n         }\n-        return offsetAdjusted;\n+\n+        // Advance to the next transition.\n+        initialOffset = getOffset(nextTransitionLocal);\n+        nextTransitionLocal = nextTransition(nextTransitionLocal);\n+\n+        if (Math.abs(nextTransitionLocal - instantLocal) > 15768000000L) {\n+            // The next transition is more than six months away, so we assume that the local time is not ambiguous.\n+            return initialOffset;\n+        }\n+\n+        nextTransitionAdjusted = nextTransition(nextTransitionAdjusted);\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}