{
    "patch": "public static double getTypedPercent(JSONObject jsonObject)\n{\n    int totalTyped = 0;\n    int total = 0;\n\n    // loop through all the keys in the JSON object\n    for (String key : jsonObject.keySet()) {\n        // get the value for the key\n        Object value = jsonObject.get(key);\n\n        // if the value is a JSON object, recursively calculate the percentage\n        if (value instanceof JSONObject) {\n            totalTyped += getTypedPercent((JSONObject) value);\n            total++;\n        }\n        // if the value is a string, increment the total if it is not empty\n        else if (value instanceof String) {\n            if (!((String) value).isEmpty()) {\n                totalTyped++;\n            }\n            total++;\n        }\n    }\n\n    // return the percentage of typed strings\n    return ((double) totalTyped / total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..09634268 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject jsonObject)\n+{\n+    int totalTyped = 0;\n+    int total = 0;\n+\n+    // loop through all the keys in the JSON object\n+    for (String key : jsonObject.keySet()) {\n+        // get the value for the key\n+        Object value = jsonObject.get(key);\n+\n+        // if the value is a JSON object, recursively calculate the percentage\n+        if (value instanceof JSONObject) {\n+            totalTyped += getTypedPercent((JSONObject) value);\n+            total++;\n+        }\n+        // if the value is a string, increment the total if it is not empty\n+        else if (value instanceof String) {\n+            if (!((String) value).isEmpty()) {\n+                totalTyped++;\n+            }\n+            total++;\n+        }\n+    }\n+\n+    // return the percentage of typed strings\n+    return ((double) totalTyped / total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}