{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    Chronology chrono = instant.getChronology();\n    chrono = selectChronology(chrono);\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            chrono, iLocale, iPivotYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    // calculate the parsed local millis value\n    long parsedLocalMillis = bucket.computeMillis(false, text);\n    \n    DateTimeZone parsedZone = bucket.getZone();\n    if (parsedZone == null) {\n        parsedZone = chrono.getZone();\n    }\n    \n    // adjust for parsed timezone or offset if present\n    if (bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        long instantLocal = parsedLocalMillis - parsedOffset;\n        parsedLocalMillis = parsedZone.getMillisKeepLocal(DateTimeZone.UTC, instantLocal);\n    } else if (parsedZone != null) {\n        parsedLocalMillis = parsedZone.getMillisKeepLocal(DateTimeZone.UTC, parsedLocalMillis);\n    } else {\n        parsedLocalMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, parsedLocalMillis);\n    }\n    \n    // set the parsed local millis value on the instant\n    instant.setMillis(parsedLocalMillis);\n    if (iZone != null) {\n        instant.setZone(iZone);\n        chrono = chrono.withZone(iZone);\n    } else {\n        instant.setZone(parsedZone);\n        chrono = chrono.withZone(parsedZone);\n    }\n    instant.setChronology(chrono);\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..7f29efbb 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,52 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n-    }\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    \n+    Chronology chrono = instant.getChronology();\n+    chrono = selectChronology(chrono);\n+    \n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            chrono, iLocale, iPivotYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    \n+    // calculate the parsed local millis value\n+    long parsedLocalMillis = bucket.computeMillis(false, text);\n+    \n+    DateTimeZone parsedZone = bucket.getZone();\n+    if (parsedZone == null) {\n+        parsedZone = chrono.getZone();\n+    }\n+    \n+    // adjust for parsed timezone or offset if present\n+    if (bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        long instantLocal = parsedLocalMillis - parsedOffset;\n+        parsedLocalMillis = parsedZone.getMillisKeepLocal(DateTimeZone.UTC, instantLocal);\n+    } else if (parsedZone != null) {\n+        parsedLocalMillis = parsedZone.getMillisKeepLocal(DateTimeZone.UTC, parsedLocalMillis);\n+    } else {\n+        parsedLocalMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, parsedLocalMillis);\n+    }\n+    \n+    // set the parsed local millis value on the instant\n+    instant.setMillis(parsedLocalMillis);\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+        chrono = chrono.withZone(iZone);\n+    } else {\n+        instant.setZone(parsedZone);\n+        chrono = chrono.withZone(parsedZone);\n+    }\n+    instant.setChronology(chrono);\n+\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: incompatible types: Chronology cannot be converted to long",
    "test_result": "ERROR"
}