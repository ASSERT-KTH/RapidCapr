{
    "patch": "public String fixCode(String code) {\n    int index = code.indexOf(\"in\");\n    while (index != -1) {\n        int start = index - 1;\n        while (start >= 0 && Character.isJavaIdentifierPart(code.charAt(start))) {\n            start--;\n        }\n        start++;\n        int end = index + 2;\n        while (end < code.length() && Character.isJavaIdentifierPart(code.charAt(end))) {\n            end++;\n        }\n        String variable = code.substring(start, index);\n        String container = code.substring(index + 2, end);\n        String replacement;\n        if (container.startsWith(\"(\") && container.endsWith(\")\")) {\n            replacement = variable + \" in \" + container;\n        } else {\n            replacement = variable + \" in (\" + container + \")\";\n        }\n        code = code.substring(0, start) + replacement + code.substring(end);\n        index = code.indexOf(\"in\", index + replacement.length());\n    }\n    return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..11af34e9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,31 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    int index = code.indexOf(\"in\");\n+    while (index != -1) {\n+        int start = index - 1;\n+        while (start >= 0 && Character.isJavaIdentifierPart(code.charAt(start))) {\n+            start--;\n+        }\n+        start++;\n+        int end = index + 2;\n+        while (end < code.length() && Character.isJavaIdentifierPart(code.charAt(end))) {\n+            end++;\n+        }\n+        String variable = code.substring(start, index);\n+        String container = code.substring(index + 2, end);\n+        String replacement;\n+        if (container.startsWith(\"(\") && container.endsWith(\")\")) {\n+            replacement = variable + \" in \" + container;\n+        } else {\n+            replacement = variable + \" in (\" + container + \")\";\n+        }\n+        code = code.substring(0, start) + replacement + code.substring(end);\n+        index = code.indexOf(\"in\", index + replacement.length());\n+    }\n+    return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}