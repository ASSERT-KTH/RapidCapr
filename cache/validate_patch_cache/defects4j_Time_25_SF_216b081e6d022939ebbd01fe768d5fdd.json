{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    // adjust the instant to be on or after the next transition\n                    long nextTransition = nextTransition(instantAdjusted);\n                    long nextAdjustment = getOffset(nextTransition);\n                    while (nextAdjustment != offsetLocal && nextAdjustment < offsetAdjusted) {\n                        // we need to keep iterating until we get the correct offset\n                        instantAdjusted = nextTransition + (offsetLocal - nextAdjustment);\n                        nextTransition = nextTransition(instantAdjusted);\n                        nextAdjustment = getOffset(nextTransition);\n                    }\n                    if (nextAdjustment != offsetLocal) {\n                        // we couldn't find a valid offset\n                        return offsetLocal;\n                    }\n                }\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..2a1d76ad 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -893,7 +893,19 @@ public abstract class DateTimeZone implements Serializable {\n                 long nextLocal = nextTransition(instantAdjusted);\n                 long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                 if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+                    // adjust the instant to be on or after the next transition\n+                    long nextTransition = nextTransition(instantAdjusted);\n+                    long nextAdjustment = getOffset(nextTransition);\n+                    while (nextAdjustment != offsetLocal && nextAdjustment < offsetAdjusted) {\n+                        // we need to keep iterating until we get the correct offset\n+                        instantAdjusted = nextTransition + (offsetLocal - nextAdjustment);\n+                        nextTransition = nextTransition(instantAdjusted);\n+                        nextAdjustment = getOffset(nextTransition);\n+                    }\n+                    if (nextAdjustment != offsetLocal) {\n+                        // we couldn't find a valid offset\n+                        return offsetLocal;\n+                    }\n                 }\n             }\n         }",
    "result_reason": "error: cannot assign a value to final variable instantAdjusted",
    "test_result": "ERROR"
}