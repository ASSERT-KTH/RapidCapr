{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    // Collect a list of argument nodes to remove.\n    LinkedList<Node> argsToRemove = new LinkedList<>();\n    for (Node arg : argList.children()) {\n      if (arg.isName()) {\n        String argName = arg.getString();\n        Var var = fnScope.getVar(argName);\n        if (var == null || !referenced.contains(var)) {\n          argsToRemove.add(arg);\n        }\n      }\n    }\n\n    // Remove the unused argument nodes in reverse order.\n    Node lastArg;\n    while (!argsToRemove.isEmpty()) {\n      lastArg = argsToRemove.removeLast();\n      argList.removeChild(lastArg);\n      compiler.reportCodeChange();\n    }\n\n    // Optimize the call sites, if necessary.\n    if (modifyCallSites && callSiteOptimizer.canModifyCallers(function)) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..481e4b2e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,7 +366,7 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     // Notice that removing unreferenced function args breaks\n     // Function.prototype.length. In advanced mode, we don't really care\n     // about this: we consider \"length\" the equivalent of reflecting on\n@@ -378,7 +378,6 @@ class RemoveUnusedVars\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n \n     Node function = fnScope.getRootNode();\n-\n     Preconditions.checkState(function.isFunction());\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n       // The parameters object literal setters can not be removed.\n@@ -386,21 +385,29 @@ class RemoveUnusedVars\n     }\n \n     Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+\n+    // Collect a list of argument nodes to remove.\n+    LinkedList<Node> argsToRemove = new LinkedList<>();\n+    for (Node arg : argList.children()) {\n+      if (arg.isName()) {\n+        String argName = arg.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (var == null || !referenced.contains(var)) {\n+          argsToRemove.add(arg);\n         }\n       }\n-    } else {\n+    }\n+\n+    // Remove the unused argument nodes in reverse order.\n+    Node lastArg;\n+    while (!argsToRemove.isEmpty()) {\n+      lastArg = argsToRemove.removeLast();\n+      argList.removeChild(lastArg);\n+      compiler.reportCodeChange();\n+    }\n+\n+    // Optimize the call sites, if necessary.\n+    if (modifyCallSites && callSiteOptimizer.canModifyCallers(function)) {\n       callSiteOptimizer.optimize(fnScope, referenced);\n     }\n   }",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}