{
    "patch": "Chronology newChronology = iChronology == null ? ISOChronology.getInstanceUTC() : iChronology.withUTC();\nDateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\nint[] newValues = new int[newTypes.length];\nint index = indexOf(fieldType);\nif (index < 0) {\n    index = -(index + 1);\n}\nnewTypes[index] = fieldType;\nnewValues[index] = value;\nfor (int i = 0, j = 0; i < iTypes.length; i++) {\n    if (i == index) {\n        j++;\n    }\n    if (j < newTypes.length && iTypes[i] != fieldType) {\n        newTypes[j] = iTypes[i];\n        newValues[j] = iValues[i];\n        j++;\n    }\n}\nPartial newPartial = new Partial(newChronology, newTypes, newValues);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..3e2b2ce2 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,26 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+Chronology newChronology = iChronology == null ? ISOChronology.getInstanceUTC() : iChronology.withUTC();\n+DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n+int[] newValues = new int[newTypes.length];\n+int index = indexOf(fieldType);\n+if (index < 0) {\n+    index = -(index + 1);\n+}\n+newTypes[index] = fieldType;\n+newValues[index] = value;\n+for (int i = 0, j = 0; i < iTypes.length; i++) {\n+    if (i == index) {\n+        j++;\n+    }\n+    if (j < newTypes.length && iTypes[i] != fieldType) {\n+        newTypes[j] = iTypes[i];\n+        newValues[j] = iValues[i];\n+        j++;\n+    }\n+}\n+Partial newPartial = new Partial(newChronology, newTypes, newValues);\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}