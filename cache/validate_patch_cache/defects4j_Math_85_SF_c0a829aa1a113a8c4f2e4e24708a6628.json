{
    "patch": "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound,\n            double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException {\n\n        double a = initial;\n        double b = initial;\n\n        double fa = function.value(a);\n        double fb = function.value(b);\n\n        if (Double.isNaN(fa) || Double.isNaN(fb)) {\n            throw new ConvergenceException(\"Got NaN as function value at initial point \" + initial);\n        }\n\n        checkBracketing(function, lowerBound, upperBound);\n\n        if (fa * fb > 0.0d) {\n            throw new ConvergenceException(lowerBound, upperBound, initial, fa, fb);\n        }\n\n        if (Precision.equals(0.0d, fa, fb)) {\n            return new double[] { a, a };\n        }\n\n        double[] bracket = growBracket(function, a, b, fa, fb, lowerBound, upperBound, maximumIterations);\n        if (bracket == null) {\n            throw new ConvergenceException(lowerBound, upperBound, maximumIterations);\n        }\n        return bracket;\n    }\n\nprivate static void checkBracketing(UnivariateRealFunction function, double lower, double upper)\n            throws IllegalArgumentException {\n        double fLo = function.value(lower);\n        double fHi = function.value(upper);\n        if ((fLo > 0 && fHi > 0) || (fLo < 0 && fHi < 0)) {\n            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + lower + \",\" + upper + \"]\" +\n                    \"  Values: [\" + fLo + \",\" + fHi + \"]\");\n        }\n    }\n\nprivate static double[] growBracket(UnivariateRealFunction function, double lo, double hi, double fLo, double fHi,\n        double lower, double upper, int maximumIterations) throws FunctionEvaluationException {\n\n        int numIterations = 0;\n\n        double[] bracket = null;\n\n        double mid = 0;\n        double fMid = 0;\n\n        double dec = 1.5d;\n        double inc = 1.5d;\n\n        while (numIterations++ < maximumIterations) {\n            double width = hi - lo;\n\n            if (width <= TOO_SMALL_EPSILON * 2) {\n                return null;\n            }\n\n            if (Double.isNaN(fLo) || Double.isNaN(fHi)) {\n                return null;\n            }\n\n            if (fLo * fHi < 0) {\n                bracket = new double[] { lo, hi };\n                break;\n            }\n\n            if (Math.abs(fLo) < Math.abs(fHi)) {\n                lo = Math.max(lower, lo - width * inc);\n                fLo = function.value(lo);\n\n                hi = Math.min(upper, hi + width * dec);\n\n            } else {\n                hi = Math.min(upper, hi + width * dec);\n                fHi = function.value(hi);\n\n                lo = Math.max(lower, lo - width * inc);\n            }\n\n            if (Double.isNaN(fLo) || Double.isNaN(fHi)) {\n                return null;\n            }\n\n            if (fLo * fHi < 0) {\n                bracket = new double[] { lo, hi };\n                break;\n            }\n\n            if (Math.abs(fHi) < Math.abs(fLo)) {\n                mid = lo + inc * (hi - lo) / 3;\n                fMid = function.value(mid);\n\n                if (Double.isNaN(fMid) || Double.isInfinite(fMid)) {\n                    mid = hi - inc * (hi - lo) / 3;\n                    fMid = function.value(mid);\n                }\n            } else {\n                mid = hi - dec * (hi - lo) / 3;\n                fMid = function.value(mid);\n\n                if (Double.isNaN(fMid) || Double.isInfinite(fMid)) {\n                    mid = lo + inc * (hi - lo) / 3;\n                    fMid = function.value(mid);\n                }\n            }\n\n            if (Double.isNaN(fMid) || Double.isInfinite(fMid)) {\n                return null;\n            }\n\n            if (fLo * fMid < 0) {\n                fHi = fMid;\n                hi = mid;\n            } else if (fHi * fMid < 0) {\n                fLo = fMid;\n                lo = mid;\n            } else {\n                return bracket;\n            }\n        }\n\n        return bracket;\n    }\n\nprivate static final double TOO_SMALL_EPSILON = 1e-21;",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..7ae813072 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,51 +162,136 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound,\n+            double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException {\n+\n+        double a = initial;\n+        double b = initial;\n+\n+        double fa = function.value(a);\n+        double fb = function.value(b);\n+\n+        if (Double.isNaN(fa) || Double.isNaN(fb)) {\n+            throw new ConvergenceException(\"Got NaN as function value at initial point \" + initial);\n         }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n+\n+        checkBracketing(function, lowerBound, upperBound);\n+\n+        if (fa * fb > 0.0d) {\n+            throw new ConvergenceException(lowerBound, upperBound, initial, fa, fb);\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+\n+        if (Precision.equals(0.0d, fa, fb)) {\n+            return new double[] { a, a };\n         }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+\n+        double[] bracket = growBracket(function, a, b, fa, fb, lowerBound, upperBound, maximumIterations);\n+        if (bracket == null) {\n+            throw new ConvergenceException(lowerBound, upperBound, maximumIterations);\n+        }\n+        return bracket;\n+    }\n+\n+private static void checkBracketing(UnivariateRealFunction function, double lower, double upper)\n+            throws IllegalArgumentException {\n+        double fLo = function.value(lower);\n+        double fHi = function.value(upper);\n+        if ((fLo > 0 && fHi > 0) || (fLo < 0 && fHi < 0)) {\n+            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.\" +\n+                    \"  Endpoints: [\" + lower + \",\" + upper + \"]\" +\n+                    \"  Values: [\" + fLo + \",\" + fHi + \"]\");\n+        }\n+    }\n+\n+private static double[] growBracket(UnivariateRealFunction function, double lo, double hi, double fLo, double fHi,\n+        double lower, double upper, int maximumIterations) throws FunctionEvaluationException {\n+\n+        int numIterations = 0;\n+\n+        double[] bracket = null;\n+\n+        double mid = 0;\n+        double fMid = 0;\n+\n+        double dec = 1.5d;\n+        double inc = 1.5d;\n+\n+        while (numIterations++ < maximumIterations) {\n+            double width = hi - lo;\n+\n+            if (width <= TOO_SMALL_EPSILON * 2) {\n+                return null;\n+            }\n+\n+            if (Double.isNaN(fLo) || Double.isNaN(fHi)) {\n+                return null;\n+            }\n+\n+            if (fLo * fHi < 0) {\n+                bracket = new double[] { lo, hi };\n+                break;\n+            }\n+\n+            if (Math.abs(fLo) < Math.abs(fHi)) {\n+                lo = Math.max(lower, lo - width * inc);\n+                fLo = function.value(lo);\n+\n+                hi = Math.min(upper, hi + width * dec);\n+\n+            } else {\n+                hi = Math.min(upper, hi + width * dec);\n+                fHi = function.value(hi);\n+\n+                lo = Math.max(lower, lo - width * inc);\n+            }\n+\n+            if (Double.isNaN(fLo) || Double.isNaN(fHi)) {\n+                return null;\n+            }\n+\n+            if (fLo * fHi < 0) {\n+                bracket = new double[] { lo, hi };\n+                break;\n+            }\n+\n+            if (Math.abs(fHi) < Math.abs(fLo)) {\n+                mid = lo + inc * (hi - lo) / 3;\n+                fMid = function.value(mid);\n+\n+                if (Double.isNaN(fMid) || Double.isInfinite(fMid)) {\n+                    mid = hi - inc * (hi - lo) / 3;\n+                    fMid = function.value(mid);\n+                }\n+            } else {\n+                mid = hi - dec * (hi - lo) / 3;\n+                fMid = function.value(mid);\n+\n+                if (Double.isNaN(fMid) || Double.isInfinite(fMid)) {\n+                    mid = lo + inc * (hi - lo) / 3;\n+                    fMid = function.value(mid);\n+                }\n+            }\n+\n+            if (Double.isNaN(fMid) || Double.isInfinite(fMid)) {\n+                return null;\n+            }\n+\n+            if (fLo * fMid < 0) {\n+                fHi = fMid;\n+                hi = mid;\n+            } else if (fHi * fMid < 0) {\n+                fLo = fMid;\n+                lo = mid;\n+            } else {\n+                return bracket;\n+            }\n         }\n-        \n-        return new double[]{a, b};\n+\n+        return bracket;\n     }\n \n+private static final double TOO_SMALL_EPSILON = 1e-21;\n+\n     /**\n      * Compute the midpoint of two values.\n      * ",
    "result_reason": "error: no suitable constructor found for ConvergenceException(double,double,double,double,double)",
    "test_result": "ERROR"
}