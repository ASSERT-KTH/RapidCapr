{
    "patch": " public int getOffsetFromLocal(long instantLocal) {\n        // the original time might be within a DST gap or overlap, or not\n        int initialOffset = getOffset(instantLocal);\n        long nextTransition;\n        try {\n            nextTransition = nextTransition(instantLocal - initialOffset);\n        } catch (IllegalArgumentException iae) {\n            // The local time can not be resolved to a single offset due to a transition\n            // occurring at the specified time or the time is out of the valid time-range.\n            // We assume that the local time is in the overlap of the two adjacent offsets.\n            // Since we need the newer offset, we return the offset after the current one.\n            return initialOffset + 1;\n        }\n\n        // There's a gap or overlap in effect at the instantLocal\n        int offsetBeforeTransition = getOffset(nextTransition - 1L);\n        long nextLocalTransition = nextTransition(instantLocal - initialOffset);\n        if (nextLocalTransition == instantLocal) {\n            // The instantLocal is exactly on a transition\n            return initialOffset < offsetBeforeTransition ? getOffset(nextTransition - 1L) : offsetBeforeTransition;\n        } else if (offsetBeforeTransition > initialOffset && nextLocalTransition < nextTransition) {\n            // The local gap overlaps with the global gap, so we are within a gap\n            return offsetBeforeTransition - 1;\n        }\n        // It's either an overlap or a gap that the local time is after or before it, respectively.\n        return initialOffset;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..7788c1dc 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,32 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+ public int getOffsetFromLocal(long instantLocal) {\n+        // the original time might be within a DST gap or overlap, or not\n+        int initialOffset = getOffset(instantLocal);\n+        long nextTransition;\n+        try {\n+            nextTransition = nextTransition(instantLocal - initialOffset);\n+        } catch (IllegalArgumentException iae) {\n+            // The local time can not be resolved to a single offset due to a transition\n+            // occurring at the specified time or the time is out of the valid time-range.\n+            // We assume that the local time is in the overlap of the two adjacent offsets.\n+            // Since we need the newer offset, we return the offset after the current one.\n+            return initialOffset + 1;\n         }\n-        return offsetAdjusted;\n-    }\n+\n+        // There's a gap or overlap in effect at the instantLocal\n+        int offsetBeforeTransition = getOffset(nextTransition - 1L);\n+        long nextLocalTransition = nextTransition(instantLocal - initialOffset);\n+        if (nextLocalTransition == instantLocal) {\n+            // The instantLocal is exactly on a transition\n+            return initialOffset < offsetBeforeTransition ? getOffset(nextTransition - 1L) : offsetBeforeTransition;\n+        } else if (offsetBeforeTransition > initialOffset && nextLocalTransition < nextTransition) {\n+            // The local gap overlaps with the global gap, so we are within a gap\n+            return offsetBeforeTransition - 1;\n+        }\n+        // It's either an overlap or a gap that the local time is after or before it, respectively.\n+        return initialOffset;\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}