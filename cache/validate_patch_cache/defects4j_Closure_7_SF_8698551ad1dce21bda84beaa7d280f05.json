{
    "patch": "public JSType caseObjectType(ObjectType type) {\n    boolean isFunction = \"function\".equals(value);\n    if (isFunction && resultEqualsValue) {\n        // if value equals \"function\" and resultEqualsValue is true\n        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n        return ctorType != null && ctorType.isSubtype(type) ? ctorType : null;\n    } else if (!isFunction && matchesExpectation(\"object\")) {\n        // if value is anything other than \"function\" and expectation is \"object\"\n        return type;\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0afabc8a..daed369e 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -607,15 +607,18 @@ public abstract class ChainableReverseAbstractInterpreter\n     }\n \n     @Override\n-    public JSType caseObjectType(ObjectType type) {\n-      if (value.equals(\"function\")) {\n+public JSType caseObjectType(ObjectType type) {\n+    boolean isFunction = \"function\".equals(value);\n+    if (isFunction && resultEqualsValue) {\n+        // if value equals \"function\" and resultEqualsValue is true\n         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n-          // Objects are restricted to \"Function\", subtypes are left\n-          // Only filter out subtypes of \"function\"\n-      }\n-      return matchesExpectation(\"object\") ? type : null;\n+        return ctorType != null && ctorType.isSubtype(type) ? ctorType : null;\n+    } else if (!isFunction && matchesExpectation(\"object\")) {\n+        // if value is anything other than \"function\" and expectation is \"object\"\n+        return type;\n     }\n+    return null;\n+}\n \n     @Override\n     public JSType caseStringType() {",
    "result_reason": "junit.framework.AssertionFailedError: Expected: (Object|boolean|number|string)",
    "test_result": "FAIL"
}