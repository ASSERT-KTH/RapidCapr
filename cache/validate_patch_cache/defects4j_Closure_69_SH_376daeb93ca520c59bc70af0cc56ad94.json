{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      if (functionType.isConstructor() && functionType.getTypeOfThis() != null) {\n        boolean calledOnThis = false;\n        Node parent = n.getParent();\n        if (parent.isGetProp() || parent.isGetElem()) {\n          calledOnThis = parent.getFirstChild().matchesQualifiedName(\"this\");\n          if (calledOnThis && !functionType.getTypeOfThis().isEquivalentTo(getJSType(parent.getLastChild()))) {\n             report(t, n, INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());\n          }\n        }\n        if (!calledOnThis) {\n          report(t, n, FUNCTION_CALLED_WITH_WRONG_THIS_TYPE, functionType.getTypeOfThis().toString());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..8afc00d7 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      if (functionType.isConstructor() && functionType.getTypeOfThis() != null) {\n+        boolean calledOnThis = false;\n+        Node parent = n.getParent();\n+        if (parent.isGetProp() || parent.isGetElem()) {\n+          calledOnThis = parent.getFirstChild().matchesQualifiedName(\"this\");\n+          if (calledOnThis && !functionType.getTypeOfThis().isEquivalentTo(getJSType(parent.getLastChild()))) {\n+             report(t, n, INVALID_THIS_TYPE, functionType.getTypeOfThis().toString());\n+          }\n+        }\n+        if (!calledOnThis) {\n+          report(t, n, FUNCTION_CALLED_WITH_WRONG_THIS_TYPE, functionType.getTypeOfThis().toString());\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}