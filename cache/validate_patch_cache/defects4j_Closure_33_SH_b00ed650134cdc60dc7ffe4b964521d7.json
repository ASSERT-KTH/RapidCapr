{
    "patch": "    if (constraintObj.isNominalConstructor()) {\n      NominalType nt = getNominalType(constraintObj);\n      if (!nt.isClass()) {\n        // If it is an interface type, match its properties against the properties in this object.\n        for (String prop : nt.getAllPropsOfClass()) {\n          JSType propType = nt.getPropType(prop);\n          if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n              typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      } else {\n        // If the constraint object is a class type, do nothing.\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..03cc1574 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,24 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    if (constraintObj.isNominalConstructor()) {\n+      NominalType nt = getNominalType(constraintObj);\n+      if (!nt.isClass()) {\n+        // If it is an interface type, match its properties against the properties in this object.\n+        for (String prop : nt.getAllPropsOfClass()) {\n+          JSType propType = nt.getPropType(prop);\n+          if (!isPropertyTypeDeclared(prop)) {\n+            JSType typeToInfer = propType;\n+            if (!hasProperty(prop)) {\n+              typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n+            }\n+            defineInferredProperty(prop, typeToInfer, null);\n+          }\n+        }\n+      } else {\n+        // If the constraint object is a class type, do nothing.\n+      }\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}