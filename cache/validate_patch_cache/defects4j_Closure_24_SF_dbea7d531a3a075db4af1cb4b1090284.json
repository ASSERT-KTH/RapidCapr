{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    Node scriptNode = t.getScopeRoot();\n    Node googScopeCall = null;\n\n    for (Node child = scriptNode.getFirstChild(); child != null; child = child.getNext()) {\n        if (child.isCall() && child.getFirstChild().matchesQualifiedName(\"goog.scope\")) {\n            googScopeCall = child;\n            break;\n        }\n    }\n\n    if (googScopeCall == null) {\n        return;\n    }\n\n    Node googScopeFunction = googScopeCall.getLastChild();\n\n    // Check that `goog.scope` takes only a single parameter, an anonymous function.\n    if (!googScopeFunction.isFunction() || googScopeFunction.getNext() != null) {\n        report(t, googScopeCall, GOOG_SCOPE_NON_FUNCTION, null);\n        return;\n    }\n\n    Node anonymousFn = googScopeFunction.getFirstChild();\n    if (!anonymousFn.isParamList() || anonymousFn.getNext() != googScopeFunction.getLastChild()) {\n        report(t, googScopeCall, GOOG_SCOPE_NON_FUNCTION, null);\n        return;\n    }\n\n    for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        if (n == null || !n.isName()) {\n            // Skip variables that are not named values.\n            continue;\n        }\n\n        Node parent = n.getParent();\n\n        if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n            String name = n.getString();\n            Var aliasVar = scope.getVar(name);\n            if (aliasVar == null || aliasVar.getInitialValue() == null) {\n                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n                continue;\n            }\n            aliases.put(name, aliasVar);\n\n            String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n            transformation.addAlias(name, qualifiedName);\n        } else if (!isAncestorFunction(parent, anonymousFn)) {\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n    }\n}\n\n/**\n * Check if a given node is an ancestor (including itself) of a function node.\n */\nprivate boolean isAncestorFunction(Node ancestor, Node functionNode) {\n    if (ancestor == null) {\n        return false;\n    }\n    if (ancestor == functionNode) {\n        return true;\n    }\n    return isAncestorFunction(ancestor.getParent(), functionNode);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..879e5de9 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,74 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    Node scriptNode = t.getScopeRoot();\n+    Node googScopeCall = null;\n+\n+    for (Node child = scriptNode.getFirstChild(); child != null; child = child.getNext()) {\n+        if (child.isCall() && child.getFirstChild().matchesQualifiedName(\"goog.scope\")) {\n+            googScopeCall = child;\n+            break;\n+        }\n+    }\n+\n+    if (googScopeCall == null) {\n+        return;\n+    }\n+\n+    Node googScopeFunction = googScopeCall.getLastChild();\n+\n+    // Check that `goog.scope` takes only a single parameter, an anonymous function.\n+    if (!googScopeFunction.isFunction() || googScopeFunction.getNext() != null) {\n+        report(t, googScopeCall, GOOG_SCOPE_NON_FUNCTION, null);\n+        return;\n+    }\n+\n+    Node anonymousFn = googScopeFunction.getFirstChild();\n+    if (!anonymousFn.isParamList() || anonymousFn.getNext() != googScopeFunction.getLastChild()) {\n+        report(t, googScopeCall, GOOG_SCOPE_NON_FUNCTION, null);\n+        return;\n+    }\n+\n+    for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        if (n == null || !n.isName()) {\n+            // Skip variables that are not named values.\n+            continue;\n         }\n+\n+        Node parent = n.getParent();\n+\n+        if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+            String name = n.getString();\n+            Var aliasVar = scope.getVar(name);\n+            if (aliasVar == null || aliasVar.getInitialValue() == null) {\n+                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+                continue;\n+            }\n+            aliases.put(name, aliasVar);\n+\n+            String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+            transformation.addAlias(name, qualifiedName);\n+        } else if (!isAncestorFunction(parent, anonymousFn)) {\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n-      }\n     }\n+}\n+\n+/**\n+ * Check if a given node is an ancestor (including itself) of a function node.\n+ */\n+private boolean isAncestorFunction(Node ancestor, Node functionNode) {\n+    if (ancestor == null) {\n+        return false;\n+    }\n+    if (ancestor == functionNode) {\n+        return true;\n+    }\n+    return isAncestorFunction(ancestor.getParent(), functionNode);\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}