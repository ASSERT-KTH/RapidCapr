{
    "patch": ">>> [ INFILL ] <<<\n        name.setLineno(functionNode.getLineno());\n        name.setCharno(functionNode.getAstRoot().getIndexMapper().getStartOffset(functionNode));\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        newName.setCharno(functionNode.getAstRoot().getIndexMapper().getStartOffset(functionNode));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..b1a99b67 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,18 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+>>> [ INFILL ] <<<\n+        name.setLineno(functionNode.getLineno());\n+        name.setCharno(functionNode.getAstRoot().getIndexMapper().getStartOffset(functionNode));\n+        isUnnamedFunction = true;\n+      }\n+      Node node = newNode(Token.FUNCTION);\n+      Node newName = transform(name);\n+      if (isUnnamedFunction) {\n+        // Old Rhino tagged the empty name node with the line number of the\n+        // declaration.\n+        newName.setLineno(functionNode.getLineno());\n+        newName.setCharno(functionNode.getAstRoot().getIndexMapper().getStartOffset(functionNode));\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}