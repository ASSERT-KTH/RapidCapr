{
    "patch": "attachLiteralTypes(n);\nswitch(n.getType()) {\n  case Token.FUNCTION:\n      if ((!parent.isAssign() && !NodeUtil.isFunctionExpression(parent)) || parent.isName() && NodeUtil.nameReferences(parent, n)) {\n          defineDeclaredFunction(n, parent);\n      }\n      break;\n  case Token.LP:\n      if (NodeUtil.isFunctionExpression(parent) || parent.isCall() || parent.isNew() || parent.isTaggedTemplateLit()) {\n          handleFunctionInputs(parent);\n          return;\n      }\n      break;\n  case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n  case Token.VAR:\n  case Token.NAME:\n      defineVar(n, parent);\n      break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..941aeb5b 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,27 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n+attachLiteralTypes(n);\n+switch(n.getType()) {\n+  case Token.FUNCTION:\n+      if ((!parent.isAssign() && !NodeUtil.isFunctionExpression(parent)) || parent.isName() && NodeUtil.nameReferences(parent, n)) {\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n       }\n+      break;\n+  case Token.LP:\n+      if (NodeUtil.isFunctionExpression(parent) || parent.isCall() || parent.isNew() || parent.isTaggedTemplateLit()) {\n+          handleFunctionInputs(parent);\n+          return;\n+      }\n+      break;\n+  case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+  case Token.VAR:\n+  case Token.NAME:\n+      defineVar(n, parent);\n+      break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}