{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int blockSize = 64;\n    final int n = m.getRowDimension();\n    RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n\n    for (int i = 0; i < n; i += blockSize) {\n        int blockSizeActual = Math.min(blockSize, n - i);\n        RealMatrix block = m.getSubMatrix(i, i + blockSizeActual - 1, i, i + blockSizeActual - 1);\n        RealMatrix sqrtBlock = computeSqrtBlock(block);\n        sqrtM.setSubMatrix(sqrtBlock.getData(), i, i);\n    }\n\n    return sqrtM;\n}\n\nprivate RealMatrix computeSqrtBlock(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix V = dec.getV();\n    RealMatrix D = dec.getD();\n\n    /* Handle negative or zero eigenvalues */\n    final double EPS = 1e-6;\n    for (int i = 0; i < D.getColumnDimension(); i++) {\n        if (D.getEntry(i, i) < EPS) {\n            D.setEntry(i, i, EPS);\n        }\n    }\n\n    RealMatrix sqrtD = new DiagonalMatrix(\n            Arrays.stream(D.getRow(0)).map(FastMath::sqrt).toArray());\n    RealMatrix sqrtM = V.multiply(sqrtD).multiply(V.transpose());\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2e6794eb7 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,38 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int blockSize = 64;\n+    final int n = m.getRowDimension();\n+    RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n+\n+    for (int i = 0; i < n; i += blockSize) {\n+        int blockSizeActual = Math.min(blockSize, n - i);\n+        RealMatrix block = m.getSubMatrix(i, i + blockSizeActual - 1, i, i + blockSizeActual - 1);\n+        RealMatrix sqrtBlock = computeSqrtBlock(block);\n+        sqrtM.setSubMatrix(sqrtBlock.getData(), i, i);\n     }\n+\n+    return sqrtM;\n+}\n+\n+private RealMatrix computeSqrtBlock(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix V = dec.getV();\n+    RealMatrix D = dec.getD();\n+\n+    /* Handle negative or zero eigenvalues */\n+    final double EPS = 1e-6;\n+    for (int i = 0; i < D.getColumnDimension(); i++) {\n+        if (D.getEntry(i, i) < EPS) {\n+            D.setEntry(i, i, EPS);\n+        }\n+    }\n+\n+    RealMatrix sqrtD = new DiagonalMatrix(\n+            Arrays.stream(D.getRow(0)).map(FastMath::sqrt).toArray());\n+    RealMatrix sqrtM = V.multiply(sqrtD).multiply(V.transpose());\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}