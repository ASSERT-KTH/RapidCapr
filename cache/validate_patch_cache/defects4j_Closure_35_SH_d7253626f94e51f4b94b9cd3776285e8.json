{
    "patch": "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (constraintObj != null && constraintObj.isRecordType() && objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeInferred(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.isPropertyTypeDeclared(prop)) {\n              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            } else {\n              JSType currentType = objType.getPropertyType(prop);\n              JSType narrowedType = currentType.getGreatestSubtype(propType).restrictByNotNullOrUndefined();\n              if (!currentType.equals(narrowedType)) {\n                typeToInfer = narrowedType;\n              }\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..6013b982 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,21 +1118,24 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n+      if (constraintObj != null && constraintObj.isRecordType() && objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n+          if (!objType.isPropertyTypeInferred(prop)) {\n             JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            if (!objType.isPropertyTypeDeclared(prop)) {\n+              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            } else {\n+              JSType currentType = objType.getPropertyType(prop);\n+              JSType narrowedType = currentType.getGreatestSubtype(propType).restrictByNotNullOrUndefined();\n+              if (!currentType.equals(narrowedType)) {\n+                typeToInfer = narrowedType;\n+              }\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...er",
    "test_result": "FAIL"
}