{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean isLeap = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == DateTimeFieldType.monthOfYear().getIndexedField()) {\n                int monthOfYear = values[i] + valueToAdd;\n                int year = values[DateTimeFieldType.year().getIndexedField()];\n                int dayOfMonth = values[DateTimeFieldType.dayOfMonth().getIndexedField()];\n                try {\n                    LocalDate date = new LocalDate(year, monthOfYear, dayOfMonth);\n                    instant = date.toDateTimeAtStartOfDay().getMillis();\n                } catch (IllegalFieldValueException e) {\n                    // Failed to create a local date, so must be an invalid date\n                    if (monthOfYear < 1) {\n                        int years = MathUtils.safeSubtract(year, (monthOfYear - 1) / 12);\n                        instant = iChronology.year().set(0, years);\n                        isLeap = iChronology.year().isLeap(instant);\n                        instant = iChronology.monthOfYear().set(instant, ((monthOfYear - 1) % 12) + 1);\n                        instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n                    } else if (monthOfYear > 12) {\n                        int years = MathUtils.safeAdd(year, monthOfYear / 12);\n                        instant = iChronology.year().set(0, years);\n                        isLeap = iChronology.year().isLeap(instant);\n                        instant = iChronology.monthOfYear().set(instant, ((monthOfYear - 1) % 12) + 1);\n                        instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n                    } else {\n                        // Invalid date such as February 30\n                        int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n                        if (dayOfMonth > maxDay) {\n                            dayOfMonth = maxDay;\n                        }\n                        instant = iChronology.monthOfYear().set(instant, monthOfYear);\n                        instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n                    }\n                }\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        instant = add(instant, valueToAdd);\n        if (isLeap) {\n            // Fix for leap year not being correctly calculated\n            LocalDate date = new LocalDate(instant);\n            int dayOfMonth = date.getDayOfMonth();\n            if (dayOfMonth != values[DateTimeFieldType.dayOfMonth().getIndexedField()]) {\n                instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n            }\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..97495a71 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,66 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean isLeap = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == DateTimeFieldType.monthOfYear().getIndexedField()) {\n+                int monthOfYear = values[i] + valueToAdd;\n+                int year = values[DateTimeFieldType.year().getIndexedField()];\n+                int dayOfMonth = values[DateTimeFieldType.dayOfMonth().getIndexedField()];\n+                try {\n+                    LocalDate date = new LocalDate(year, monthOfYear, dayOfMonth);\n+                    instant = date.toDateTimeAtStartOfDay().getMillis();\n+                } catch (IllegalFieldValueException e) {\n+                    // Failed to create a local date, so must be an invalid date\n+                    if (monthOfYear < 1) {\n+                        int years = MathUtils.safeSubtract(year, (monthOfYear - 1) / 12);\n+                        instant = iChronology.year().set(0, years);\n+                        isLeap = iChronology.year().isLeap(instant);\n+                        instant = iChronology.monthOfYear().set(instant, ((monthOfYear - 1) % 12) + 1);\n+                        instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n+                    } else if (monthOfYear > 12) {\n+                        int years = MathUtils.safeAdd(year, monthOfYear / 12);\n+                        instant = iChronology.year().set(0, years);\n+                        isLeap = iChronology.year().isLeap(instant);\n+                        instant = iChronology.monthOfYear().set(instant, ((monthOfYear - 1) % 12) + 1);\n+                        instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n+                    } else {\n+                        // Invalid date such as February 30\n+                        int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n+                        if (dayOfMonth > maxDay) {\n+                            dayOfMonth = maxDay;\n+                        }\n+                        instant = iChronology.monthOfYear().set(instant, monthOfYear);\n+                        instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n+                    }\n+                }\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        instant = add(instant, valueToAdd);\n+        if (isLeap) {\n+            // Fix for leap year not being correctly calculated\n+            LocalDate date = new LocalDate(instant);\n+            int dayOfMonth = date.getDayOfMonth();\n+            if (dayOfMonth != values[DateTimeFieldType.dayOfMonth().getIndexedField()]) {\n+                instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n+            }\n+        }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}