{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final LUDecomposition lu = new LUDecomposition(m);\n    final RealMatrix u = lu.getU();\n\n    // Replace zeros and negative values with very small positive values\n    final double epsilon = Math.ulp(1d);\n    for (int i = 0; i < n; i++) {\n        if (u.getEntry(i, i) <= 0d) {\n            u.setEntry(i, i, epsilon);\n        }\n    }\n\n    // Compute the square root of the upper triangular matrix\n    final RealMatrix r = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        for (int j = i; j < n; j++) {\n            double s = 0d;\n            for (int k = i; k < j; k++) {\n                s += r.getEntry(k, j) * r.getEntry(i, k);\n            }\n            r.setEntry(i, j, (i == j) ?\n                    Math.sqrt(u.getEntry(i, i)) :\n                    (1d / r.getEntry(i, i) * (u.getEntry(i, j) - s)));\n        }\n    }\n\n    // Return the resulting square root matrix\n    return r.multiply(r.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..07081a22b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,34 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final LUDecomposition lu = new LUDecomposition(m);\n+    final RealMatrix u = lu.getU();\n+\n+    // Replace zeros and negative values with very small positive values\n+    final double epsilon = Math.ulp(1d);\n+    for (int i = 0; i < n; i++) {\n+        if (u.getEntry(i, i) <= 0d) {\n+            u.setEntry(i, i, epsilon);\n+        }\n     }\n+\n+    // Compute the square root of the upper triangular matrix\n+    final RealMatrix r = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        for (int j = i; j < n; j++) {\n+            double s = 0d;\n+            for (int k = i; k < j; k++) {\n+                s += r.getEntry(k, j) * r.getEntry(i, k);\n+            }\n+            r.setEntry(i, j, (i == j) ?\n+                    Math.sqrt(u.getEntry(i, i)) :\n+                    (1d / r.getEntry(i, i) * (u.getEntry(i, j) - s)));\n+        }\n+    }\n+\n+    // Return the resulting square root matrix\n+    return r.multiply(r.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}