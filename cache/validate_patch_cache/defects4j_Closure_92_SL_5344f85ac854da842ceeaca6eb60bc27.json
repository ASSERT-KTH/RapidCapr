{
    "patch": "if (indexOfDot == -1) {\n    // Any old place is fine.\n    compiler.getNodeForCodeInsertion(minimumModule)\n        .addChildToBack(replacementNode);\n} else {\n    // Add it after the parent namespace.\n    ProvidedName parentName =\n        providedNames.get(namespace.substring(0, indexOfDot));\n    Preconditions.checkNotNull(parentName);\n    Preconditions.checkNotNull(parentName.replacementNode);\n    if (parentName.replacementNode.getNext() == null) {\n        parentName.replacementNode.getParent().addChildToBack(\n            replacementNode);\n    } else {\n        parentName.replacementNode.getParent().addChildAfter(\n            replacementNode, parentName.replacementNode);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex c929a363..121cb03a 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -786,7 +786,24 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.indexOf('.');\n+if (indexOfDot == -1) {\n+    // Any old place is fine.\n+    compiler.getNodeForCodeInsertion(minimumModule)\n+        .addChildToBack(replacementNode);\n+} else {\n+    // Add it after the parent namespace.\n+    ProvidedName parentName =\n+        providedNames.get(namespace.substring(0, indexOfDot));\n+    Preconditions.checkNotNull(parentName);\n+    Preconditions.checkNotNull(parentName.replacementNode);\n+    if (parentName.replacementNode.getNext() == null) {\n+        parentName.replacementNode.getParent().addChildToBack(\n+            replacementNode);\n+    } else {\n+        parentName.replacementNode.getParent().addChildAfter(\n+            replacementNode, parentName.replacementNode);\n+    }\n+}\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}