{
    "patch": "        // check if min and max are endpoints that bracket the root\n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        if (yMin * yMax >= 0) {\n            throw new IllegalArgumentException(\"Interval does not bracket a root.\");\n        }\n\n        double xMin;\n        double xMax;\n        double yMid;\n\n        // set xMin and xMax based on initial and direction\n        if (initial < max) {\n            xMin = initial;\n            xMax = max;\n        } else {\n            xMin = min;\n            xMax = initial;\n        }\n\n        // set yMid to initial function value if initial is not an endpoint\n        if (initial == min || initial == max) {\n            yMid = yInitial;\n        } else {\n            yMid = f.value(initial);\n            if (Math.abs(yMid) <= functionValueAccuracy) {\n                setResult(initial, 0);\n                return result;\n            }\n        }\n\n        // full Brent algorithm starting with provided initial guess and updated endpoints\n        return solve(f, xMin, yMin, xMax, yMax, initial, yInitial, yMid);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..ca2c18a73 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,39 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // check if min and max are endpoints that bracket the root\n+        double yMin = f.value(min);\n+        double yMax = f.value(max);\n+        if (yMin * yMax >= 0) {\n+            throw new IllegalArgumentException(\"Interval does not bracket a root.\");\n+        }\n+\n+        double xMin;\n+        double xMax;\n+        double yMid;\n+\n+        // set xMin and xMax based on initial and direction\n+        if (initial < max) {\n+            xMin = initial;\n+            xMax = max;\n+        } else {\n+            xMin = min;\n+            xMax = initial;\n+        }\n+\n+        // set yMid to initial function value if initial is not an endpoint\n+        if (initial == min || initial == max) {\n+            yMid = yInitial;\n+        } else {\n+            yMid = f.value(initial);\n+            if (Math.abs(yMid) <= functionValueAccuracy) {\n+                setResult(initial, 0);\n+                return result;\n+            }\n+        }\n+\n+        // full Brent algorithm starting with provided initial guess and updated endpoints\n+        return solve(f, xMin, yMin, xMax, yMax, initial, yInitial, yMid);\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: variable yMin is already defined in method solve(UnivariateRealFunction,double,double,double)",
    "test_result": "ERROR"
}