{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    double count = 0.0;\n    double typedCount = 0.0;\n    try {\n        JSONObject json = new JSONObject(jsonStr);\n        JSONArray arr = json.getJSONArray(\"data\");\n        for(int i = 0; i < arr.length(); i++) {\n            JSONObject obj = arr.getJSONObject(i);\n            count++;\n            if(obj.getString(\"type\").equals(\"typed\")) {\n                typedCount++;\n            }\n        }\n    } catch(JSONException e) {\n        e.printStackTrace();\n    }\n    return (typedCount / count) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..37d0b933 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    double count = 0.0;\n+    double typedCount = 0.0;\n+    try {\n+        JSONObject json = new JSONObject(jsonStr);\n+        JSONArray arr = json.getJSONArray(\"data\");\n+        for(int i = 0; i < arr.length(); i++) {\n+            JSONObject obj = arr.getJSONObject(i);\n+            count++;\n+            if(obj.getString(\"type\").equals(\"typed\")) {\n+                typedCount++;\n+            }\n+        }\n+    } catch(JSONException e) {\n+        e.printStackTrace();\n+    }\n+    return (typedCount / count) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}