{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    JSType constructorType = constructor.getJSType().restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType() || !constructorType.isFunctionType()) {\n        // If the constructor type is unknown or not a function type,\n        // conservatively set the type of the new expression to the unknown type.\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n    } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct.isConstructor()) {\n            // If the constructor type is a constructor function type,\n            // set the type of the new expression to the instance type of the constructor.\n            n.setJSType(ct.getInstanceType());\n        } else {\n            // If the constructor type is a function type but not a constructor function type,\n            // conservatively set the type of the new expression to the unknown type.\n            n.setJSType(getNativeType(UNKNOWN_TYPE));\n        }\n    }\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    scope = traverse(constructor, scope);\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..d41e5a46 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,31 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n+    JSType constructorType = constructor.getJSType().restrictByNotNullOrUndefined();\n+    if (constructorType.isUnknownType() || !constructorType.isFunctionType()) {\n+        // If the constructor type is unknown or not a function type,\n+        // conservatively set the type of the new expression to the unknown type.\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n+    } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+        if (ct.isConstructor()) {\n+            // If the constructor type is a constructor function type,\n+            // set the type of the new expression to the instance type of the constructor.\n+            n.setJSType(ct.getInstanceType());\n+        } else {\n+            // If the constructor type is a function type but not a constructor function type,\n+            // conservatively set the type of the new expression to the unknown type.\n+            n.setJSType(getNativeType(UNKNOWN_TYPE));\n         }\n-      }\n     }\n-    n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+        scope = traverse(arg, scope);\n     }\n+    scope = traverse(constructor, scope);\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}