{
    "patch": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n\tClass<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(settings.getTypeToMock(), settings.getExtraInterfaces());\n\tT mockInstance;\n\ttry {\n\t\tmockInstance = classInstantiator.instantiate(mockedProxyType);\n\t} catch (org.mockito.internal.creation.instance.InstantiationException e) {\n\n\t\ttry {\n\t\t\tmockedProxyType = (Class<? extends T>) MockAccess.getClassLoader().loadClass(\n\t\t\t\t\tClassNamingStrategy.SUFFIX + StringUtils.capitalize(settings.getTypeToMock().getSimpleName()));\n\t\t\tmockInstance = classInstantiator.instantiate(mockedProxyType);\n\t\t} catch (Exception e2) {\n\t\t\tthrow new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getName() + \"'\", e2);\n\t\t}\n\t}\n\n\tMockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n\tmockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n\treturn ensureMockIsAssignableToMockedType(settings, mockInstance);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..191e88e04 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,36 +21,27 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n-        }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n-            mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+\tClass<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(settings.getTypeToMock(), settings.getExtraInterfaces());\n+\tT mockInstance;\n+\ttry {\n+\t\tmockInstance = classInstantiator.instantiate(mockedProxyType);\n+\t} catch (org.mockito.internal.creation.instance.InstantiationException e) {\n \n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n-            throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n-        }\n-    }\n+\t\ttry {\n+\t\t\tmockedProxyType = (Class<? extends T>) MockAccess.getClassLoader().loadClass(\n+\t\t\t\t\tClassNamingStrategy.SUFFIX + StringUtils.capitalize(settings.getTypeToMock().getSimpleName()));\n+\t\t\tmockInstance = classInstantiator.instantiate(mockedProxyType);\n+\t\t} catch (Exception e2) {\n+\t\t\tthrow new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getName() + \"'\", e2);\n+\t\t}\n+\t}\n+\n+\tMockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n+\tmockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+\n+\treturn ensureMockIsAssignableToMockedType(settings, mockInstance);\n+}\n \n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}