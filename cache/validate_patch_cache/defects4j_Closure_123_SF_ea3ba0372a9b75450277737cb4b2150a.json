{
    "patch": "public static String fixCode(String code) {\n    String pattern = \"for\\\\s*\\\\(.*;.*;.*\\\\)\\\\s*\\\\{\";\n    Pattern r = Pattern.compile(pattern);\n    Matcher matcher = r.matcher(code);\n    while (matcher.find()) {\n        String forLoop = matcher.group(0);\n        String[] forLoopParts = forLoop.split(\";\");\n        if(forLoopParts[0].contains(\"in\")) {\n            String newForLoop = \"for(\" + forLoopParts[0] + \";\" + forLoopParts[1] + \";\" + forLoopParts[2] + \")\";\n            code = code.replace(forLoop, newForLoop);\n        }\n    }\n    return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..7ad6097d 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,20 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    String pattern = \"for\\\\s*\\\\(.*;.*;.*\\\\)\\\\s*\\\\{\";\n+    Pattern r = Pattern.compile(pattern);\n+    Matcher matcher = r.matcher(code);\n+    while (matcher.find()) {\n+        String forLoop = matcher.group(0);\n+        String[] forLoopParts = forLoop.split(\";\");\n+        if(forLoopParts[0].contains(\"in\")) {\n+            String newForLoop = \"for(\" + forLoopParts[0] + \";\" + forLoopParts[1] + \";\" + forLoopParts[2] + \")\";\n+            code = code.replace(forLoop, newForLoop);\n+        }\n+    }\n+    return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}