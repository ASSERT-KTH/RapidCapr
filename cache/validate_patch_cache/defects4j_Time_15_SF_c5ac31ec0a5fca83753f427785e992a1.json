{
    "patch": "    public static long safeMultiply(long val1, int val2) {\n        final long posVal1 = Math.abs(val1); // Take the absolute value of val1\n        final int posVal2 = Math.abs(val2); // Take the absolute value of val2\n        if ((posVal1 | posVal2) >>> 31 != 0) { // Check for possible overflow\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return val1 * val2;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java\nindex a0fe7e2d..b3583ea6 100644\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n@@ -133,19 +133,12 @@ public class FieldUtils {\n      * @since 1.2\n      */\n     public static long safeMultiply(long val1, int val2) {\n-        switch (val2) {\n-            case -1:\n-                return -val1;\n-            case 0:\n-                return 0L;\n-            case 1:\n-                return val1;\n-        }\n-        long total = val1 * val2;\n-        if (total / val2 != val1) {\n-          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+        final long posVal1 = Math.abs(val1); // Take the absolute value of val1\n+        final int posVal2 = Math.abs(val2); // Take the absolute value of val2\n+        if ((posVal1 | posVal2) >>> 31 != 0) { // Check for possible overflow\n+            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n         }\n-        return total;\n+        return val1 * val2;\n     }\n \n     /**",
    "result_reason": "java.lang.ArithmeticException: Multiplication overflows a long: 28650480000 LICENSE.txt NOTICE.txt README.txt RELEASE-NOTES.txt ToDo.txt all_tests build build.xml checkstyle.xml defects4j.build.properties failing_tests pom.xml src 1",
    "test_result": "FAIL"
}