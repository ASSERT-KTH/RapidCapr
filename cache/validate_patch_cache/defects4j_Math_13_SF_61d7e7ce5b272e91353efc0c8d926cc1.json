{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n        final int numRows = m.getRowDimension();\n        final int numCols = m.getColumnDimension();\n        final RealMatrix x = MatrixUtils.createRealMatrix(numRows, numCols);\n        final RealMatrix xOld = MatrixUtils.createRealMatrix(numRows, numCols);\n        final RealMatrix i = MatrixUtils.createRealIdentityMatrix(numRows);\n        double eps;\n        do {\n            xOld.setSubMatrix(x.getData(), 0, 0);\n            final RealMatrix y = xOld.multiply(xOld);\n            final double trace = y.getTrace();\n            final double norm = y.getNorm();\n            eps = FastMath.sqrt(Math.max(trace, norm)) / m.getNorm();\n            x.setSubMatrix(xOld.add(y.subtract(m).multiply(i).multiply(xOld)\n                            .scalarMultiply(0.5 / FastMath.sqrt(trace)))\n                            .getData(), 0, 0);\n        } while (eps > 1e-9);\n\n        return x;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2dd055fa6 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+        final int numRows = m.getRowDimension();\n+        final int numCols = m.getColumnDimension();\n+        final RealMatrix x = MatrixUtils.createRealMatrix(numRows, numCols);\n+        final RealMatrix xOld = MatrixUtils.createRealMatrix(numRows, numCols);\n+        final RealMatrix i = MatrixUtils.createRealIdentityMatrix(numRows);\n+        double eps;\n+        do {\n+            xOld.setSubMatrix(x.getData(), 0, 0);\n+            final RealMatrix y = xOld.multiply(xOld);\n+            final double trace = y.getTrace();\n+            final double norm = y.getNorm();\n+            eps = FastMath.sqrt(Math.max(trace, norm)) / m.getNorm();\n+            x.setSubMatrix(xOld.add(y.subtract(m).multiply(i).multiply(xOld)\n+                            .scalarMultiply(0.5 / FastMath.sqrt(trace)))\n+                            .getData(), 0, 0);\n+        } while (eps > 1e-9);\n+\n+        return x;\n     }\n }",
    "result_reason": "org.apache.commons.math3.exception.MathUnsupportedOperationException: unsupported operation",
    "test_result": "FAIL"
}