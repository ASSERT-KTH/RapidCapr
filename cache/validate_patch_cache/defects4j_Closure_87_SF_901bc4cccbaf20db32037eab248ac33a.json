{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n    Node parent = maybeExpr.getParent();\n    // We only have to worry about methods with an implicit 'this'\n    // param, or this doesn't happen.\n    if (maybeExpr.isFunction() && !NodeUtil.thisNodeUsesArguments(maybeExpr)) {\n        return false;\n    }\n    // Not foldable if the child node is a function expression, a conditional expression, an assignment expression, or a return statement\n    if (NodeUtil.isFunctionExpression(maybeExpr) || maybeExpr.getType() == Token.HOOK || maybeExpr.getType() == Token.ASSIGN || maybeExpr.getType() == Token.RETURN) {\n      return false;\n    }\n    // Not foldable if the parent node is an assignment\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      return false;\n    }\n    // Traverse through the child expression if it's a ternary expression, comma expression,\n    // or not operator until we reach the final expression\n    while (maybeExpr.getType() == Token.HOOK || maybeExpr.getType() == Token.COMMA ||\n           (maybeExpr.getType() == Token.NOT && maybeExpr.getFirstChild().getType() != Token.NOT)) {\n      Node firstChild = maybeExpr.getFirstChild();\n      if (firstChild == null) {\n        break;\n      }\n      maybeExpr = (maybeExpr.getType() == Token.NOT) ? firstChild : firstChild.getNext();\n    }\n    // Foldable only if the child expression is an expression statement and it does not have any side effects\n    return maybeExpr.getType() == Token.EXPR_RESULT && !NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild());\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..248b0b10 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,38 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+    Node parent = maybeExpr.getParent();\n+    // We only have to worry about methods with an implicit 'this'\n+    // param, or this doesn't happen.\n+    if (maybeExpr.isFunction() && !NodeUtil.thisNodeUsesArguments(maybeExpr)) {\n+        return false;\n+    }\n+    // Not foldable if the child node is a function expression, a conditional expression, an assignment expression, or a return statement\n+    if (NodeUtil.isFunctionExpression(maybeExpr) || maybeExpr.getType() == Token.HOOK || maybeExpr.getType() == Token.ASSIGN || maybeExpr.getType() == Token.RETURN) {\n+      return false;\n+    }\n+    // Not foldable if the parent node is an assignment\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      return false;\n+    }\n+    // Traverse through the child expression if it's a ternary expression, comma expression,\n+    // or not operator until we reach the final expression\n+    while (maybeExpr.getType() == Token.HOOK || maybeExpr.getType() == Token.COMMA ||\n+           (maybeExpr.getType() == Token.NOT && maybeExpr.getFirstChild().getType() != Token.NOT)) {\n+      Node firstChild = maybeExpr.getFirstChild();\n+      if (firstChild == null) {\n+        break;\n       }\n+      maybeExpr = (maybeExpr.getType() == Token.NOT) ? firstChild : firstChild.getNext();\n     }\n-\n-    return false;\n+    // Foldable only if the child expression is an expression statement and it does not have any side effects\n+    return maybeExpr.getType() == Token.EXPR_RESULT && !NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild());\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}