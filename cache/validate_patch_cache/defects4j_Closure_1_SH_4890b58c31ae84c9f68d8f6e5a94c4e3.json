{
    "patch": "      int argSize = argList.getChildCount();\n      for (int i = argSize - 1; i >= 0; i--) {\n        Node curArg = argList.getChildAtIndex(i);\n        if (referenced.contains(fnScope.getVar(curArg.getString()))) {\n          break;\n        }\n        if (curArg.hasChildren() && curArg.getFirstChild().isDefaultValue()) {\n          // skip default parameter value\n          continue;\n        }\n        argList.removeChild(curArg);\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f847fdbe 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,18 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      int argSize = argList.getChildCount();\n+      for (int i = argSize - 1; i >= 0; i--) {\n+        Node curArg = argList.getChildAtIndex(i);\n+        if (referenced.contains(fnScope.getVar(curArg.getString()))) {\n+          break;\n+        }\n+        if (curArg.hasChildren() && curArg.getFirstChild().isDefaultValue()) {\n+          // skip default parameter value\n+          continue;\n+        }\n+        argList.removeChild(curArg);\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}