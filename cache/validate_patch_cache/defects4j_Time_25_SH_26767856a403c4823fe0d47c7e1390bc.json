{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - (offsetLocal < offsetAdjusted ? offsetLocal : offsetAdjusted));\n    if (nextLocal == nextAdjusted && offsetLocal < offsetAdjusted) { // handle DST gap\n        int offsetBefore = getOffset(nextAdjusted - 1);\n        int offsetAfter = getOffset(nextAdjusted);\n        if (offsetBefore <= offsetAfter) {\n            return offsetLocal;\n        }\n    } else if (nextLocal != nextAdjusted) {\n        return offsetLocal;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ee263dce 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - (offsetLocal < offsetAdjusted ? offsetLocal : offsetAdjusted));\n+    if (nextLocal == nextAdjusted && offsetLocal < offsetAdjusted) { // handle DST gap\n+        int offsetBefore = getOffset(nextAdjusted - 1);\n+        int offsetAfter = getOffset(nextAdjusted);\n+        if (offsetBefore <= offsetAfter) {\n+            return offsetLocal;\n+        }\n+    } else if (nextLocal != nextAdjusted) {\n+        return offsetLocal;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}