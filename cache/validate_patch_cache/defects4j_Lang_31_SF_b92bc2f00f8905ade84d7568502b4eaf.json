{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    int len = str.length();\n    final int searchLen = searchChars.length;\n    final int strSegCount = (len + CHUNK_SIZE - 1) / CHUNK_SIZE;\n\n    char[] chs = str.toCharArray();\n    for (int i = 0; i < strSegCount; i++) {\n        int j = i * CHUNK_SIZE;\n        int k = Math.min(CHUNK_SIZE + j, len);\n        for (int x = 0; x < searchLen; x++) {\n            for (int y = j; y < k; y++) {\n                if (chs[y] == searchChars[x]) {\n                    if (Character.isHighSurrogate(chs[y]) && y + 1 < k && Character.isLowSurrogate(chs[y + 1])) {\n                        // Supplemental character\n                        return true;\n                    } else if (!Character.isHighSurrogate(chs[y])) {\n                        // Found\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..6643cf2b 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,31 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    int len = str.length();\n+    final int searchLen = searchChars.length;\n+    final int strSegCount = (len + CHUNK_SIZE - 1) / CHUNK_SIZE;\n+\n+    char[] chs = str.toCharArray();\n+    for (int i = 0; i < strSegCount; i++) {\n+        int j = i * CHUNK_SIZE;\n+        int k = Math.min(CHUNK_SIZE + j, len);\n+        for (int x = 0; x < searchLen; x++) {\n+            for (int y = j; y < k; y++) {\n+                if (chs[y] == searchChars[x]) {\n+                    if (Character.isHighSurrogate(chs[y]) && y + 1 < k && Character.isLowSurrogate(chs[y + 1])) {\n+                        // Supplemental character\n+                        return true;\n+                    } else if (!Character.isHighSurrogate(chs[y])) {\n+                        // Found\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}