{
    "patch": "        final int maximalOrder = 2;\n        final int[] sequence = getBrentOrder(min, initial, max, f, maximalOrder);\n        if (sequence[1] != sequence[2] && sequence[sequence[4]] * f.value(sequence[sequence[4] - 1]) < 0) {\n            double res = brent(f, sequence[sequence[4]], sequence[sequence[4] - 1], sequence[sequence[0]]);\n            setResult(res, iterationCount);\n            return result;\n        } else {\n            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.\");\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..f732ec688 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,15 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        final int maximalOrder = 2;\n+        final int[] sequence = getBrentOrder(min, initial, max, f, maximalOrder);\n+        if (sequence[1] != sequence[2] && sequence[sequence[4]] * f.value(sequence[sequence[4] - 1]) < 0) {\n+            double res = brent(f, sequence[sequence[4]], sequence[sequence[4] - 1], sequence[sequence[0]]);\n+            setResult(res, iterationCount);\n+            return result;\n+        } else {\n+            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.\");\n+        }\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}