{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      JSType thisType = functionType.getTypeOfThis();\n      Node parent = n.getParent();\n      if (!thisType.isUnknownType() &&\n          parent != null &&\n          parent.isGetProp() &&\n          parent.getLastChild() == n) {\n        // Allow the method to be called on the correct type\n        JSType receiverType = getJSType(parent.getFirstChild()).restrictByNotNullOrUndefined();\n        if (!receiverType.isSubtypeOf(thisType)) {\n          report(t, parent, INVALID_THIS_TYPE, thisType.toString(), receiverType.toString());\n          return;\n        }\n      } else if (!thisType.isUnknownType() &&\n                 parent != null &&\n                 parent.isGetElem()) {\n        // CALL nodes inside computed properties like obj[foo()] are OK even\n        // if the receiver does not have the expected 'this' type. Given this\n        // obj[foo()] example, the receiver type could not reasonably be\n        // determined without evaluating foo().\n        // However, [foo()]: 42 and obj[foo()] = 42 should not be allowed.\n        findInvalidUseOfThis(t, parent, thisType, n);\n        return;\n      } else if (!thisType.isUnknownType()) {\n        report(t, n, CONSTRUCTOR_MISSING_CALL_ERROR, thisType.toString());\n        return;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..3443466d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      JSType thisType = functionType.getTypeOfThis();\n+      Node parent = n.getParent();\n+      if (!thisType.isUnknownType() &&\n+          parent != null &&\n+          parent.isGetProp() &&\n+          parent.getLastChild() == n) {\n+        // Allow the method to be called on the correct type\n+        JSType receiverType = getJSType(parent.getFirstChild()).restrictByNotNullOrUndefined();\n+        if (!receiverType.isSubtypeOf(thisType)) {\n+          report(t, parent, INVALID_THIS_TYPE, thisType.toString(), receiverType.toString());\n+          return;\n+        }\n+      } else if (!thisType.isUnknownType() &&\n+                 parent != null &&\n+                 parent.isGetElem()) {\n+        // CALL nodes inside computed properties like obj[foo()] are OK even\n+        // if the receiver does not have the expected 'this' type. Given this\n+        // obj[foo()] example, the receiver type could not reasonably be\n+        // determined without evaluating foo().\n+        // However, [foo()]: 42 and obj[foo()] = 42 should not be allowed.\n+        findInvalidUseOfThis(t, parent, thisType, n);\n+        return;\n+      } else if (!thisType.isUnknownType()) {\n+        report(t, n, CONSTRUCTOR_MISSING_CALL_ERROR, thisType.toString());\n+        return;\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}