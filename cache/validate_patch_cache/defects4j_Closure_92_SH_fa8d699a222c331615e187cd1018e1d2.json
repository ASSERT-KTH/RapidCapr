{
    "patch": " int indexOfDot = namespace != null ? namespace.lastIndexOf('.') : -1;\nif (firstNode != null && indexOfDot == -1) {\n  // Handle the case where an existing definition has no namespace.\n  indexOfDot = indexOfLastQualifier(firstNode.getQualifiedName());\n}\n\n// Handle the case where the name was implicitly provided by two independent modules.\nif (indexOfDot == -1) {\n  // Any old place is fine.\n  compiler.getNodeForCodeInsertion(minimumModule)\n      .addChildToBack(replacementNode);\n} else {\n  // Add it after the parent namespace.\n  ProvidedName parentName =\n      providedNames.get(namespace.substring(0, indexOfDot));\n  Preconditions.checkNotNull(parentName);\n  Preconditions.checkNotNull(parentName.replacementNode);\n  parentName.replacementNode.getParent().addChildAfter(\n      replacementNode, parentName.replacementNode);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex c929a363..084f28b1 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -786,7 +786,26 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.indexOf('.');\n+ int indexOfDot = namespace != null ? namespace.lastIndexOf('.') : -1;\n+if (firstNode != null && indexOfDot == -1) {\n+  // Handle the case where an existing definition has no namespace.\n+  indexOfDot = indexOfLastQualifier(firstNode.getQualifiedName());\n+}\n+\n+// Handle the case where the name was implicitly provided by two independent modules.\n+if (indexOfDot == -1) {\n+  // Any old place is fine.\n+  compiler.getNodeForCodeInsertion(minimumModule)\n+      .addChildToBack(replacementNode);\n+} else {\n+  // Add it after the parent namespace.\n+  ProvidedName parentName =\n+      providedNames.get(namespace.substring(0, indexOfDot));\n+  Preconditions.checkNotNull(parentName);\n+  Preconditions.checkNotNull(parentName.replacementNode);\n+  parentName.replacementNode.getParent().addChildAfter(\n+      replacementNode, parentName.replacementNode);\n+}\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}