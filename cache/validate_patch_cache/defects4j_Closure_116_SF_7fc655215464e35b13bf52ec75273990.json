{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    // Get the function block and the arguments\n    Node fnBlock = NodeUtil.getFunctionBody(fnNode);\n    Node args = NodeUtil.getArgumentsAsNode(callNode.getLastChild());\n\n    // Check that each argument does not have side-effects and map them to named parameters\n    Map<String, Node> argMap = new LinkedHashMap<>();\n    for (Node arg = args.getFirstChild(); arg != null; arg = arg.getNext()) {\n        if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n            return CanInlineResult.NO;\n        }\n        Node param = NodeUtil.getFunctionParameterForArg(fnNode, arg);\n        if (param == null) {\n            // Too many arguments for parameters\n            return CanInlineResult.NO;\n        }\n        String paramName = param.getString();\n        if (argMap.containsKey(paramName)) {\n            // Duplicate argument for parameter\n            return CanInlineResult.NO;\n        }\n        argMap.put(paramName, arg);\n    }\n\n    // Check that each named parameter has a corresponding argument\n    Node paramList = NodeUtil.getFunctionParameters(fnNode);\n    for (Node param = paramList.getFirstChild(); param != null; param = param.getNext()) {\n        if (!param.isName()) {\n            // Only named parameters supported\n            return CanInlineResult.NO;\n        }\n        if (!argMap.containsKey(param.getString())) {\n            // Missing argument for parameter\n            return CanInlineResult.NO;\n        }\n    }\n\n    // Check that each named parameter is used at most once\n    for (Node child = fnBlock.getFirstChild(); child != null; child = child.getNext()) {\n        if (child.isExprResult()) {\n            Node expr = child.getFirstChild();\n            if (expr.isAssign() && expr.getFirstChild().isName()) {\n                String paramName = expr.getFirstChild().getString();\n                if (argMap.containsKey(paramName) &&\n                        NodeUtil.getNameReferenceCount(expr.getLastChild(), paramName) > 1) {\n                    // Named parameter used more than once\n                    return CanInlineResult.NO;\n                }\n            }\n        }\n    }\n\n    // All checks passed\n    return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..a1be60ab 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,65 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+        return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n-\n-\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+    // Get the function block and the arguments\n+    Node fnBlock = NodeUtil.getFunctionBody(fnNode);\n+    Node args = NodeUtil.getArgumentsAsNode(callNode.getLastChild());\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n+    // Check that each argument does not have side-effects and map them to named parameters\n+    Map<String, Node> argMap = new LinkedHashMap<>();\n+    for (Node arg = args.getFirstChild(); arg != null; arg = arg.getNext()) {\n+        if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n+            return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+        Node param = NodeUtil.getFunctionParameterForArg(fnNode, arg);\n+        if (param == null) {\n+            // Too many arguments for parameters\n+            return CanInlineResult.NO;\n+        }\n+        String paramName = param.getString();\n+        if (argMap.containsKey(paramName)) {\n+            // Duplicate argument for parameter\n+            return CanInlineResult.NO;\n+        }\n+        argMap.put(paramName, arg);\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+    // Check that each named parameter has a corresponding argument\n+    Node paramList = NodeUtil.getFunctionParameters(fnNode);\n+    for (Node param = paramList.getFirstChild(); param != null; param = param.getNext()) {\n+        if (!param.isName()) {\n+            // Only named parameters supported\n             return CanInlineResult.NO;\n-          }\n         }\n+        if (!argMap.containsKey(param.getString())) {\n+            // Missing argument for parameter\n+            return CanInlineResult.NO;\n+        }\n+    }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+    // Check that each named parameter is used at most once\n+    for (Node child = fnBlock.getFirstChild(); child != null; child = child.getNext()) {\n+        if (child.isExprResult()) {\n+            Node expr = child.getFirstChild();\n+            if (expr.isAssign() && expr.getFirstChild().isName()) {\n+                String paramName = expr.getFirstChild().getString();\n+                if (argMap.containsKey(paramName) &&\n+                        NodeUtil.getNameReferenceCount(expr.getLastChild(), paramName) > 1) {\n+                    // Named parameter used more than once\n+                    return CanInlineResult.NO;\n+                }\n+            }\n         }\n-        cArg = cArg.getNext();\n-      }\n     }\n \n+    // All checks passed\n     return CanInlineResult.YES;\n-  }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}