{
    "patch": "            for (int i = 0; i < count; i++) {\n                try {\n                    millis = savedFields[i].set(millis, resetFields);\n                } catch (IllegalFieldValueException ex) {\n                    if (text != null) {\n                        ex.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                    }\n                    throw ex;\n                }\n                if (i == 0 && savedFields[i].getFieldType().equals(DateTimeFieldType.weekyear()) &&\n                        savedFields[i].getDifference() < savedFields[i].getDurationFieldType().getField(iChrono).getRangeDurationField().getType().getField(iChrono).getMinimumValue()) {\n                    LocalDate changedDate = new LocalDate(millis, DateTimeZone.UTC.withChronology(iChrono));\n                    String message = \"Parsed date does not match configured weekyear\";\n                    if (text != null) {\n                        message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                    }\n                    throw new IllegalArgumentException(message);\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..7df2b8c4 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,25 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            for (int i = 0; i < count; i++) {\n+                try {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                } catch (IllegalFieldValueException ex) {\n+                    if (text != null) {\n+                        ex.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                    }\n+                    throw ex;\n+                }\n+                if (i == 0 && savedFields[i].getFieldType().equals(DateTimeFieldType.weekyear()) &&\n+                        savedFields[i].getDifference() < savedFields[i].getDurationFieldType().getField(iChrono).getRangeDurationField().getType().getField(iChrono).getMinimumValue()) {\n+                    LocalDate changedDate = new LocalDate(millis, DateTimeZone.UTC.withChronology(iChrono));\n+                    String message = \"Parsed date does not match configured weekyear\";\n+                    if (text != null) {\n+                        message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                    }\n+                    throw new IllegalArgumentException(message);\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}