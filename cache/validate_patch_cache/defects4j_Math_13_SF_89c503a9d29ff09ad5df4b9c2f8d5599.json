{
    "patch": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.DecompositionSolver;\nimport org.apache.commons.math3.linear.LUDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    // compute the eigenvalue decomposition of the input matrix\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix eigenvalues = dec.getRealEigenvalues();\n    final int n = eigenvalues.getColumnDimension();\n\n    // replace negative eigenvalues with zeros\n    for (int i = 0; i < n; i++) {\n        if (eigenvalues.getEntry(i, i) < 0) {\n            eigenvalues.setEntry(i, i, 0);\n        }\n    }\n\n    // compute the square root of the diagonal matrix of eigenvalues\n    final RealMatrix sqrt = new Array2DRowRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        sqrt.setEntry(i, i, Math.sqrt(eigenvalues.getEntry(i, i)));\n    }\n\n    // compute the square root of the original matrix\n    final RealMatrix eigenvectors = dec.getV();\n    final DecompositionSolver solver = new LUDecomposition(eigenvectors.multiply(sqrt))\n            .getSolver();\n    final RealMatrix inverse = solver.getInverse();\n    return eigenvectors.multiply(sqrt).multiply(inverse);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ed6f41cda 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,35 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math3.linear.DecompositionSolver;\n+import org.apache.commons.math3.linear.LUDecomposition;\n+import org.apache.commons.math3.linear.RealMatrix;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    // compute the eigenvalue decomposition of the input matrix\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix eigenvalues = dec.getRealEigenvalues();\n+    final int n = eigenvalues.getColumnDimension();\n+\n+    // replace negative eigenvalues with zeros\n+    for (int i = 0; i < n; i++) {\n+        if (eigenvalues.getEntry(i, i) < 0) {\n+            eigenvalues.setEntry(i, i, 0);\n+        }\n     }\n+\n+    // compute the square root of the diagonal matrix of eigenvalues\n+    final RealMatrix sqrt = new Array2DRowRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        sqrt.setEntry(i, i, Math.sqrt(eigenvalues.getEntry(i, i)));\n+    }\n+\n+    // compute the square root of the original matrix\n+    final RealMatrix eigenvectors = dec.getV();\n+    final DecompositionSolver solver = new LUDecomposition(eigenvectors.multiply(sqrt))\n+            .getSolver();\n+    final RealMatrix inverse = solver.getInverse();\n+    return eigenvectors.multiply(sqrt).multiply(inverse);\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}