{
    "patch": "        boolean weekyearSet = false;\n        for (int i = 0; i < count; i++) {\n            SavedField svfd = savedFields[i];\n            try {\n                int value = svfd.getDifference(millis);\n                if (svfd.iField.getType() == DateTimeFieldType.weekyear()) {\n                    weekyearSet = true;\n                    if (value >= 0) {\n                        // Use addWrapField to change the year maintaining weekyear\n                        millis = svfd.addWrapField(millis, -1);\n                        millis = svfd.set(millis, value);\n                    } else {\n                        millis = svfd.set(millis, value);\n                    }\n                } else {\n                    millis = svfd.set(millis, resetFields);\n                }\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    StringBuilder buf = new StringBuilder();\n                    buf.append(\"Cannot parse \\\"\" + text + \"\\\": \");\n                    buf.append(e.getMessage());\n                    throw new IllegalArgumentException(buf.toString(), e);\n                }\n                throw e;\n            } catch (RuntimeException e) {\n                if (!resetFields || !(e instanceof IllegalArgumentException)) {\n                    throw e;\n                }\n                // ignore IllegalArgumentException during reset\n            }\n        }\n\n        if (weekyearSet) {\n            throw new IllegalArgumentException(\"Weekyears can not be set\");\n        }\n\n        boolean parseFailure = false;\n        for (int i = 0; i < count; i++) {\n            try {\n                millis = savedFields[i].set(millis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                parseFailure = true;\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n                }\n                throw e;\n            } catch (RuntimeException e) {\n                parseFailure = true;\n                if (text != null) {\n                    throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": Invalid format\", e);\n                } else {\n                    throw new IllegalArgumentException(\"Invalid format\", e);\n                }\n            }\n        }\n\n        if (parseFailure && resetFields) {\n            // reset fields and try again\n            iSavedFields = null;\n            iSavedFieldsShared = false;\n            iSavedFieldsCount = 0;\n            return computeMillis(true, text);\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..bd010989 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,70 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        boolean weekyearSet = false;\n+        for (int i = 0; i < count; i++) {\n+            SavedField svfd = savedFields[i];\n+            try {\n+                int value = svfd.getDifference(millis);\n+                if (svfd.iField.getType() == DateTimeFieldType.weekyear()) {\n+                    weekyearSet = true;\n+                    if (value >= 0) {\n+                        // Use addWrapField to change the year maintaining weekyear\n+                        millis = svfd.addWrapField(millis, -1);\n+                        millis = svfd.set(millis, value);\n+                    } else {\n+                        millis = svfd.set(millis, value);\n+                    }\n+                } else {\n+                    millis = svfd.set(millis, resetFields);\n+                }\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    StringBuilder buf = new StringBuilder();\n+                    buf.append(\"Cannot parse \\\"\" + text + \"\\\": \");\n+                    buf.append(e.getMessage());\n+                    throw new IllegalArgumentException(buf.toString(), e);\n+                }\n+                throw e;\n+            } catch (RuntimeException e) {\n+                if (!resetFields || !(e instanceof IllegalArgumentException)) {\n+                    throw e;\n+                }\n+                // ignore IllegalArgumentException during reset\n+            }\n+        }\n+\n+        if (weekyearSet) {\n+            throw new IllegalArgumentException(\"Weekyears can not be set\");\n+        }\n+\n+        boolean parseFailure = false;\n+        for (int i = 0; i < count; i++) {\n+            try {\n+                millis = savedFields[i].set(millis, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                parseFailure = true;\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+                }\n+                throw e;\n+            } catch (RuntimeException e) {\n+                parseFailure = true;\n+                if (text != null) {\n+                    throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": Invalid format\", e);\n+                } else {\n+                    throw new IllegalArgumentException(\"Invalid format\", e);\n+                }\n+            }\n+        }\n+\n+        if (parseFailure && resetFields) {\n+            // reset fields and try again\n+            iSavedFields = null;\n+            iSavedFieldsShared = false;\n+            iSavedFieldsCount = 0;\n+            return computeMillis(true, text);\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}