{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction(), \"Expected function node.\");\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Set<String> referencedArgs = new HashSet<String>();\n    Node argList = getFunctionArgList(function);\n    for (Node arg : argList.children()) {\n      referencedArgs.add(arg.getString());\n    }\n\n    // If all arguments are used in calls to the function, we can't prune them.\n    if (referencedArgs.size() == argList.getChildCount()) {\n      // In Advanced mode, length doesn't depend on the function signature, so pruning\n      // parameters doesn't effect it.\n      if (!compiler.getOptions().getLanguageOut().isEs6OrHigher()) {\n        return;\n      }\n    }\n\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n       for (Node curr = argList.getFirstChild(); curr != null; curr = curr.getNext()) {\n        String argName = curr.getString();\n        Var var = fnScope.getVar(argName);\n        if (!referenced.contains(var)) {\n          argList.removeChild(curr);\n          compiler.reportCodeChange();\n        }\n       }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..7cebef9e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,42 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction(), \"Expected function node.\");\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Set<String> referencedArgs = new HashSet<String>();\n+    Node argList = getFunctionArgList(function);\n+    for (Node arg : argList.children()) {\n+      referencedArgs.add(arg.getString());\n+    }\n+\n+    // If all arguments are used in calls to the function, we can't prune them.\n+    if (referencedArgs.size() == argList.getChildCount()) {\n+      // In Advanced mode, length doesn't depend on the function signature, so pruning\n+      // parameters doesn't effect it.\n+      if (!compiler.getOptions().getLanguageOut().isEs6OrHigher()) {\n+        return;\n+      }\n+    }\n+\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+       for (Node curr = argList.getFirstChild(); curr != null; curr = curr.getNext()) {\n+        String argName = curr.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(curr);\n+          compiler.reportCodeChange();\n+        }\n+       }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}