{
    "patch": "      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n          // Always traverse the right side of a simple assignment.\n          if (rhs != null && rhs.getType() == Token.FUNCTION) {\n            return shouldTraverseFnc(rhs, n);\n          }\n        } else {\n          // If we are on rhs and lhs is a prototype property, do not traverse,\n          // unless we observe the addition (and not overwriting) of the property.\n          if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            Node grandparent = parent.getParent();\n            boolean isAddition = NodeUtil.isObjectLitKey(grandparent);\n            if (!isAddition) {\n              isAddition = grandparent.getParent().getType() == Token.NEW;\n            }\n            if (!isAddition) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..2e0f4cbe 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,34 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+          // Always traverse the right side of a simple assignment.\n+          if (rhs != null && rhs.getType() == Token.FUNCTION) {\n+            return shouldTraverseFnc(rhs, n);\n+          }\n+        } else {\n+          // If we are on rhs and lhs is a prototype property, do not traverse,\n+          // unless we observe the addition (and not overwriting) of the property.\n+          if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            Node grandparent = parent.getParent();\n+            boolean isAddition = NodeUtil.isObjectLitKey(grandparent);\n+            if (!isAddition) {\n+              isAddition = grandparent.getParent().getType() == Token.NEW;\n+            }\n+            if (!isAddition) {\n+              return false;\n+            }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}