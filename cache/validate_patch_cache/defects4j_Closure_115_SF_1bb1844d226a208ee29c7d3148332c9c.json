{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  // Check if function is a direct call replacement candidate.\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  // Get the function parameter nodes.\n  NodeList<Node> fnParams = NodeUtil.getFunctionParameters(fnNode).children();\n\n  // Check for \"arguments\" nodes in the parameters.\n  for (Node fnParam : fnParams) {\n    if (fnParam.getString().equals(\"arguments\")) {\n      return CanInlineResult.NO;\n    }\n  }\n\n  // Get the function block node.\n  Node fnBlock = NodeUtil.getFunctionBody(fnNode);\n\n  // Check if the function block contains side effects.\n  if (NodeUtil.mayHaveSideEffects(fnBlock, compiler)) {\n    return CanInlineResult.NO;\n  }\n\n  // Get the arguments being passed to the function.\n  NodeList<Node> args = callNode.children().subList(1);\n\n  // Check if the argument nodes contain side effects.\n  for (Node arg : args) {\n    if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n      return CanInlineResult.NO;\n    }\n  }\n\n  // Check if the number of arguments matches the number of parameters.\n  if (args.size() != fnParams.size()) {\n    return CanInlineResult.NO;\n  }\n\n  // Check if each argument can be used to replace the corresponding parameter node.\n  for (int i = 0; i < args.size(); i++) {\n    Node arg = args.get(i);\n    Node param = fnParams.get(i);\n    if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n      return CanInlineResult.NO;\n    }\n    if (!param.isName()) {\n      return CanInlineResult.NO;\n    }\n    String paramName = param.getString();\n    Node parent = param.getParent();\n    if (!NodeUtil.referencesName(parent.getLastChild(), paramName)) {\n      return CanInlineResult.NO;\n    }\n    if (NodeUtil.isLValue(parent.getLastChild())) {\n      return CanInlineResult.NO;\n    }\n  }\n\n  // Made it through all the other checks, so we can inline.\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..9bb6715e 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,77 +686,70 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(\n+    Node callNode, Node fnNode) {\n+  // Check if function is a direct call replacement candidate.\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  // Get the function parameter nodes.\n+  NodeList<Node> fnParams = NodeUtil.getFunctionParameters(fnNode).children();\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n+  // Check for \"arguments\" nodes in the parameters.\n+  for (Node fnParam : fnParams) {\n+    if (fnParam.getString().equals(\"arguments\")) {\n+      return CanInlineResult.NO;\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n+  // Get the function block node.\n+  Node fnBlock = NodeUtil.getFunctionBody(fnNode);\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+  // Check if the function block contains side effects.\n+  if (NodeUtil.mayHaveSideEffects(fnBlock, compiler)) {\n+    return CanInlineResult.NO;\n+  }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+  // Get the arguments being passed to the function.\n+  NodeList<Node> args = callNode.children().subList(1);\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+  // Check if the argument nodes contain side effects.\n+  for (Node arg : args) {\n+    if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n+      return CanInlineResult.NO;\n     }\n+  }\n \n-    return CanInlineResult.YES;\n+  // Check if the number of arguments matches the number of parameters.\n+  if (args.size() != fnParams.size()) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  // Check if each argument can be used to replace the corresponding parameter node.\n+  for (int i = 0; i < args.size(); i++) {\n+    Node arg = args.get(i);\n+    Node param = fnParams.get(i);\n+    if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n+      return CanInlineResult.NO;\n+    }\n+    if (!param.isName()) {\n+      return CanInlineResult.NO;\n+    }\n+    String paramName = param.getString();\n+    Node parent = param.getParent();\n+    if (!NodeUtil.referencesName(parent.getLastChild(), paramName)) {\n+      return CanInlineResult.NO;\n+    }\n+    if (NodeUtil.isLValue(parent.getLastChild())) {\n+      return CanInlineResult.NO;\n+    }\n   }\n \n+  // Made it through all the other checks, so we can inline.\n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}