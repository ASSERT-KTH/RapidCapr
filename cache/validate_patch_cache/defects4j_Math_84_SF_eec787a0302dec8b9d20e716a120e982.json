{
    "patch": "private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\n                                               final double coeff,\n                                               final Comparator<RealPointValuePair> comparator,\n                                               final RealPointValuePair[] simplex)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    final int dim = original[0].getPointRef().length;\n    final double[] xSmallest = original[0].getPoint();\n    final double[] xBiggest = original[dim].getPoint();\n\n    // compute the centroid\n    final double[] centroid = new double[dim];\n    for (int i = 0; i < dim; ++i) {\n        double xSum = 0;\n        for (int j = 0; j < dim; ++j) {\n            xSum += original[j].getPoint()[i];\n        }\n        centroid[i] = (xSum - xBiggest[i]) / dim;\n    }\n\n    // compute the new simplex\n    for (int i = 0; i <= dim; ++i) {\n        final double[] newRow = new double[dim];\n        if (i == 0) { // the first row is just a copy\n            for (int j = 0; j < dim; ++j) {\n                newRow[j] = xSmallest[j];\n            }\n        } else { // other rows are computed through the centroid\n            for (int j = 0; j < dim; ++j) {\n                newRow[j] = centroid[j] + coeff * (simplex[i - 1].getPoint()[j] - centroid[j]);\n            }\n        }\n        simplex[i] = new RealPointValuePair(newRow, Double.NaN, false);\n        ++evaluations;\n        simplex[i] = new RealPointValuePair(newRow, computeObjectiveValue(newRow), true);\n    }\n\n    // sort the simplex\n    Arrays.sort(simplex, comparator);\n\n    return simplex[0];\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..e11fd48ed 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,50 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\n+                                               final double coeff,\n+                                               final Comparator<RealPointValuePair> comparator,\n+                                               final RealPointValuePair[] simplex)\n+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+\n+    final int dim = original[0].getPointRef().length;\n+    final double[] xSmallest = original[0].getPoint();\n+    final double[] xBiggest = original[dim].getPoint();\n+\n+    // compute the centroid\n+    final double[] centroid = new double[dim];\n+    for (int i = 0; i < dim; ++i) {\n+        double xSum = 0;\n+        for (int j = 0; j < dim; ++j) {\n+            xSum += original[j].getPoint()[i];\n+        }\n+        centroid[i] = (xSum - xBiggest[i]) / dim;\n+    }\n \n+    // compute the new simplex\n+    for (int i = 0; i <= dim; ++i) {\n+        final double[] newRow = new double[dim];\n+        if (i == 0) { // the first row is just a copy\n+            for (int j = 0; j < dim; ++j) {\n+                newRow[j] = xSmallest[j];\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+        } else { // other rows are computed through the centroid\n+            for (int j = 0; j < dim; ++j) {\n+                newRow[j] = centroid[j] + coeff * (simplex[i - 1].getPoint()[j] - centroid[j]);\n             }\n-\n         }\n-\n+        simplex[i] = new RealPointValuePair(newRow, Double.NaN, false);\n+        ++evaluations;\n+        simplex[i] = new RealPointValuePair(newRow, computeObjectiveValue(newRow), true);\n     }\n \n+    // sort the simplex\n+    Arrays.sort(simplex, comparator);\n+\n+    return simplex[0];\n+\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: MultiDirectional is not abstract and does not override abstract method iterateSimplex(Comparator<RealPointValuePair>) in DirectSearchOptimizer",
    "test_result": "ERROR"
}