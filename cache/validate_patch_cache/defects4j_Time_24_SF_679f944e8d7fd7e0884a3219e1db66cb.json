{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    Integer offset = iOffset;\n    boolean adjusted = false;\n    for (int i = 0; i < count && !adjusted; i++) {\n        try {\n            long newMillis = savedFields[i].set(millis, resetFields);\n            if (newMillis != millis) {\n                adjusted = true;\n                if (millis > 0 && newMillis < 0) {\n                    throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n                } else if (millis < 0 && newMillis > 0) {\n                    throw new IllegalArgumentException(\"The datetime is too small to be represented\");\n                }\n                millis = newMillis;\n                if (i == 0) {\n                    DurationField months = DurationFieldType.months().getField(iChrono);\n                    DurationField days = DurationFieldType.days().getField(iChrono);\n                    DurationField firstField = savedFields[i].iField.getDurationField();\n                    if (compareReverse(firstField, months) >= 0 && compareReverse(firstField, days) <= 0) {\n                        saveField(DateTimeFieldType.year(), iDefaultYear);\n                        return computeMillis(resetFields, text);\n                    }\n                }\n            }\n        } catch (IllegalArgumentException ex) {\n            if (text != null) {\n                ex = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + ex.getMessage(), ex);\n            }\n            throw ex;\n        } catch (IllegalFieldValueException ex) {\n            if (text != null) {\n                ex = new IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\": \" + ex.getMessage());\n                ex.initCause(ex);\n            }\n            throw ex;\n        }\n    }\n\n    if (adjusted) {\n        if (iZone != null) {\n            int newOffset = iZone.getOffset(millis);\n            millis -= newOffset;\n            if (offset != null && offset != newOffset) {\n                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        } else if (offset != null) {\n            millis -= offset * DateTimeConstants.MILLIS_PER_HOUR;\n        }\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..7176e259 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,81 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DurationField months = DurationFieldType.months().getField(iChrono);\n+        DurationField days = DurationFieldType.days().getField(iChrono);\n+        DurationField first = savedFields[0].iField.getDurationField();\n+        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            saveField(DateTimeFieldType.year(), iDefaultYear);\n+            return computeMillis(resetFields, text);\n         }\n+    }\n \n-        long millis = iMillis;\n+    long millis = iMillis;\n+    Integer offset = iOffset;\n+    boolean adjusted = false;\n+    for (int i = 0; i < count && !adjusted; i++) {\n         try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n+            long newMillis = savedFields[i].set(millis, resetFields);\n+            if (newMillis != millis) {\n+                adjusted = true;\n+                if (millis > 0 && newMillis < 0) {\n+                    throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n+                } else if (millis < 0 && newMillis > 0) {\n+                    throw new IllegalArgumentException(\"The datetime is too small to be represented\");\n+                }\n+                millis = newMillis;\n+                if (i == 0) {\n+                    DurationField months = DurationFieldType.months().getField(iChrono);\n+                    DurationField days = DurationFieldType.days().getField(iChrono);\n+                    DurationField firstField = savedFields[i].iField.getDurationField();\n+                    if (compareReverse(firstField, months) >= 0 && compareReverse(firstField, days) <= 0) {\n+                        saveField(DateTimeFieldType.year(), iDefaultYear);\n+                        return computeMillis(resetFields, text);\n+                    }\n+                }\n             }\n-        } catch (IllegalFieldValueException e) {\n+        } catch (IllegalArgumentException ex) {\n             if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                ex = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + ex.getMessage(), ex);\n             }\n-            throw e;\n+            throw ex;\n+        } catch (IllegalFieldValueException ex) {\n+            if (text != null) {\n+                ex = new IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\": \" + ex.getMessage());\n+                ex.initCause(ex);\n+            }\n+            throw ex;\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+    }\n+\n+    if (adjusted) {\n+        if (iZone != null) {\n+            int newOffset = iZone.getOffset(millis);\n+            millis -= newOffset;\n+            if (offset != null && offset != newOffset) {\n+                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                 if (text != null) {\n                     message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                 }\n                 throw new IllegalArgumentException(message);\n             }\n+        } else if (offset != null) {\n+            millis -= offset * DateTimeConstants.MILLIS_PER_HOUR;\n         }\n-        \n-        return millis;\n     }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: no suitable constructor found for IllegalFieldValueException(String)",
    "test_result": "ERROR"
}