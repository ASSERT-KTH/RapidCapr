{
    "patch": "if (value.isFunction() && reference.getParent().isCall()) {\n  CodingConvention convention = compiler.getCodingConvention();\n\n  // Don't inline subclass definitions into class defining calls as this confused\n  // class removing logic.\n  SubclassRelationship relationship = convention.getClassesDefinedByCall(reference.getParent());\n  if (relationship != null) {\n    return false;\n  }\n\n  // Issue 668: Don't inline singleton getter methods calls\n  // as this confused class removing logic.\n  Node valueFirstChild = value.getFirstChild();\n  if (valueFirstChild != null && valueFirstChild.getNext() == null && valueFirstChild.isName()) {\n    Name valueName = valueFirstChild.getNameNode();\n    String valueFunctionName = valueName != null ? valueName.getString() : null;\n    if (valueFunctionName != null && convention.isSingletonGetter(valueFunctionName)) {\n      return false;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..cf25487a 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,27 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+if (value.isFunction() && reference.getParent().isCall()) {\n+  CodingConvention convention = compiler.getCodingConvention();\n+\n+  // Don't inline subclass definitions into class defining calls as this confused\n+  // class removing logic.\n+  SubclassRelationship relationship = convention.getClassesDefinedByCall(reference.getParent());\n+  if (relationship != null) {\n+    return false;\n+  }\n+\n+  // Issue 668: Don't inline singleton getter methods calls\n+  // as this confused class removing logic.\n+  Node valueFirstChild = value.getFirstChild();\n+  if (valueFirstChild != null && valueFirstChild.getNext() == null && valueFirstChild.isName()) {\n+    Name valueName = valueFirstChild.getNameNode();\n+    String valueFunctionName = valueName != null ? valueName.getString() : null;\n+    if (valueFunctionName != null && convention.isSingletonGetter(valueFunctionName)) {\n+      return false;\n+    }\n+  }\n+}\n         }\n       }\n ",
    "result_reason": "error: variable convention is already defined in method canInline(Reference,Reference,Reference)",
    "test_result": "ERROR"
}