{
    "patch": "        final EigenDecomposition dec = new EigenDecomposition(m);\n        double maxEigenValue = Double.MIN_VALUE;\n        for (int i = 0; i < m.getColumnDimension(); i++) {\n            maxEigenValue = Math.max(maxEigenValue, dec.getRealEigenvalue(i));\n        }\n        final double minNonzeroEV = maxEigenValue * Math.ulp(maxEigenValue);\n        final RealMatrix sqrtDiag = dec.getSquareRoot(minNonzeroEV);\n        return dec.getV().multiply(sqrtDiag).multiply(dec.getV().transpose());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c4a06b3eb 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,12 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        double maxEigenValue = Double.MIN_VALUE;\n+        for (int i = 0; i < m.getColumnDimension(); i++) {\n+            maxEigenValue = Math.max(maxEigenValue, dec.getRealEigenvalue(i));\n+        }\n+        final double minNonzeroEV = maxEigenValue * Math.ulp(maxEigenValue);\n+        final RealMatrix sqrtDiag = dec.getSquareRoot(minNonzeroEV);\n+        return dec.getV().multiply(sqrtDiag).multiply(dec.getV().transpose());\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}