{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    StringBuilder eraRegex = null;\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n        wasWhite = false;\n        switch (c) {\n            case '\\'':\n                if (unquote) {\n                    if (++i == value.length()) {\n                        return regex;\n                    }\n                    c = value.charAt(i);\n                }\n                break;\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '\\\\':\n            case '|':\n            case '?':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                regex.append('\\\\');\n            default:\n                regex.append(c); // added to handle non-special characters\n                break;\n            case 'G': // handle era indicator\n                if (i == value.length() - 1 || Character.toUpperCase(value.charAt(i + 1)) != 'G') {\n                    eraRegex = handleEraIndicator(value, i, eraRegex);\n                } else {\n                    eraRegex = handleEraIndicator(value, i + 1, eraRegex);\n                    i = i + 1;\n                }\n                break;\n\n        }\n    }\n    // Append pattern for the last character\n    if (wasWhite) {\n        regex.append(\"\\\\s*\");\n    }\n    if (eraRegex != null) {\n        regex.insert(0, eraRegex.toString());\n    }\n    return regex;\n}\n\nprivate static StringBuilder handleEraIndicator(String value, int i, StringBuilder eraRegex) {\n    if (eraRegex == null) {\n        eraRegex = new StringBuilder();\n    }\n    if (i + 3 < value.length() && value.substring(i, i + 4).equals(\"GGGG\")) {\n        eraRegex.append(\"(AD|BC)\");\n        i = i + 3;\n    } else if (i + 1 < value.length() && value.substring(i, i + 2).equals(\"G\")) {\n        eraRegex.append(\"(AD|BC|\u043f\u0440\\\\.? \u043d\\\\.? ?\u0435\\\\.|\u043d\\\\.\u0435\\\\.)\"); // added strings for Ukrainian locales\n        i = i + 1;\n    }\n    return eraRegex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..72396885 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,28 +300,28 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    StringBuilder eraRegex = null;\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                regex.append(\"\\\\s*+\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n+            continue;\n+        }\n+        wasWhite = false;\n+        switch (c) {\n             case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n+                if (unquote) {\n+                    if (++i == value.length()) {\n                         return regex;\n                     }\n-                    c= value.charAt(i);\n+                    c = value.charAt(i);\n                 }\n                 break;\n-            case '?':\n             case '[':\n             case ']':\n             case '(':\n@@ -330,17 +330,50 @@ public class FastDateParser implements DateParser, Serializable {\n             case '}':\n             case '\\\\':\n             case '|':\n+            case '?':\n             case '*':\n             case '+':\n             case '^':\n             case '$':\n             case '.':\n                 regex.append('\\\\');\n-            }\n-            regex.append(c);\n+            default:\n+                regex.append(c); // added to handle non-special characters\n+                break;\n+            case 'G': // handle era indicator\n+                if (i == value.length() - 1 || Character.toUpperCase(value.charAt(i + 1)) != 'G') {\n+                    eraRegex = handleEraIndicator(value, i, eraRegex);\n+                } else {\n+                    eraRegex = handleEraIndicator(value, i + 1, eraRegex);\n+                    i = i + 1;\n+                }\n+                break;\n+\n         }\n-        return regex;\n     }\n+    // Append pattern for the last character\n+    if (wasWhite) {\n+        regex.append(\"\\\\s*\");\n+    }\n+    if (eraRegex != null) {\n+        regex.insert(0, eraRegex.toString());\n+    }\n+    return regex;\n+}\n+\n+private static StringBuilder handleEraIndicator(String value, int i, StringBuilder eraRegex) {\n+    if (eraRegex == null) {\n+        eraRegex = new StringBuilder();\n+    }\n+    if (i + 3 < value.length() && value.substring(i, i + 4).equals(\"GGGG\")) {\n+        eraRegex.append(\"(AD|BC)\");\n+        i = i + 3;\n+    } else if (i + 1 < value.length() && value.substring(i, i + 2).equals(\"G\")) {\n+        eraRegex.append(\"(AD|BC|\u043f\u0440\\\\.? \u043d\\\\.? ?\u0435\\\\.|\u043d\\\\.\u0435\\\\.)\"); // added strings for Ukrainian locales\n+        i = i + 1;\n+    }\n+    return eraRegex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: Locale uk failed with GGGG/yyyy/MMMM/dddd/hhhh/aaaa/EEEE/ZZZZ era BC",
    "test_result": "FAIL"
}