{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child != null;\n      child = child.getNext()) {\n    if (!NodeUtil.isGetOrSetKey(child)\n        || NodeUtil.isEs6GetterOrSetter(child)) {\n      continue;\n    }\n    String name = null;\n    if (child.isStringKey() || child.isString()) {\n      name = child.getString();\n    } else if (child.isGetProp()) {\n      Node firstChild = child.getFirstChild();\n      Node secondChild = firstChild.getNext();\n      if (firstChild.isString() && secondChild.isString()) {\n        name = firstChild.getString() + \".\" + secondChild.getString();\n      }\n    } else if (child.isGetElem()) {\n      Node firstChild = child.getFirstChild();\n      Node secondChild = firstChild.getNext();\n      // Check if the first child is actually a property\n      if (firstChild.isString() || firstChild.isNumber()) {\n        name = firstChild.getString();\n      }\n      // Handle GETELEM case\n      if (firstChild != null && secondChild != null &&\n          (firstChild.isString() || firstChild.isNumber()) &&\n          secondChild.isString()) {\n        // If isNumber and the parent is not an ARRAYLIT then this is a key that happens\n        // to be numeric, so we should skip it.\n        if (!n.isArrayLit() && firstChild.isNumber()) {\n          continue;\n        }\n        // Treat NUMBER nodes as array indices\n        if (firstChild.isNumber()) {\n          name += \"[\" + firstChild.getString() + \"]\";\n        } else {\n          name += \"[\" + secondChild.getString() + \"]\";\n        }\n      }\n    }\n    if (name == null || child.isCall() || child.isNew()) {\n      continue;\n    }\n    T type = typeSystem.getType(getScope(), n, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child,\n                                processProperty(t, prop, type, null))) {\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..a48d69b8 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,30 +487,63 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  for (Node child = n.getFirstChild();\n+      child != null;\n+      child = child.getNext()) {\n+    if (!NodeUtil.isGetOrSetKey(child)\n+        || NodeUtil.isEs6GetterOrSetter(child)) {\n+      continue;\n+    }\n+    String name = null;\n+    if (child.isStringKey() || child.isString()) {\n+      name = child.getString();\n+    } else if (child.isGetProp()) {\n+      Node firstChild = child.getFirstChild();\n+      Node secondChild = firstChild.getNext();\n+      if (firstChild.isString() && secondChild.isString()) {\n+        name = firstChild.getString() + \".\" + secondChild.getString();\n+      }\n+    } else if (child.isGetElem()) {\n+      Node firstChild = child.getFirstChild();\n+      Node secondChild = firstChild.getNext();\n+      // Check if the first child is actually a property\n+      if (firstChild.isString() || firstChild.isNumber()) {\n+        name = firstChild.getString();\n+      }\n+      // Handle GETELEM case\n+      if (firstChild != null && secondChild != null &&\n+          (firstChild.isString() || firstChild.isNumber()) &&\n+          secondChild.isString()) {\n+        // If isNumber and the parent is not an ARRAYLIT then this is a key that happens\n+        // to be numeric, so we should skip it.\n+        if (!n.isArrayLit() && firstChild.isNumber()) {\n+          continue;\n+        }\n+        // Treat NUMBER nodes as array indices\n+        if (firstChild.isNumber()) {\n+          name += \"[\" + firstChild.getString() + \"]\";\n+        } else {\n+          name += \"[\" + secondChild.getString() + \"]\";\n         }\n       }\n     }\n+    if (name == null || child.isCall() || child.isNew()) {\n+      continue;\n+    }\n+    T type = typeSystem.getType(getScope(), n, name);\n+    Property prop = getProperty(name);\n+    if (!prop.scheduleRenaming(child,\n+                                processProperty(t, prop, type, null))) {\n+      if (propertiesToErrorFor.containsKey(name)) {\n+        compiler.report(JSError.make(\n+            t.getSourceName(), child, propertiesToErrorFor.get(name),\n+            Warnings.INVALIDATION, name,\n+            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+      }\n+    }\n+  }\n+}\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}