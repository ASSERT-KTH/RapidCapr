{
    "patch": "            final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n            final RealMatrix s = dec.getS();\n            final RealMatrix v = dec.getV();\n            final RealMatrix sRoot = MatrixUtils.createRealMatrix(s.getRowDimension(), s.getColumnDimension());\n            for (int i = 0; i < s.getRowDimension(); i++) {\n                sRoot.setEntry(i, i, FastMath.sqrt(s.getEntry(i, i)));\n            }\n            return v.multiply(sRoot).multiply(v.transpose());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..0f706e270 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,12 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+            final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n+            final RealMatrix s = dec.getS();\n+            final RealMatrix v = dec.getV();\n+            final RealMatrix sRoot = MatrixUtils.createRealMatrix(s.getRowDimension(), s.getColumnDimension());\n+            for (int i = 0; i < s.getRowDimension(); i++) {\n+                sRoot.setEntry(i, i, FastMath.sqrt(s.getEntry(i, i)));\n+            }\n+            return v.multiply(sRoot).multiply(v.transpose());\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}