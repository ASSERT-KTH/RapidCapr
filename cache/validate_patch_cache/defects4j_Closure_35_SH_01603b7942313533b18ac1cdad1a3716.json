{
    "patch": "if (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n        boolean hasWarnings = false;\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.hasProperty(prop)) {\n                objType.defineInferredProperty(prop, propType, null);\n                hasWarnings = true;\n            } else {\n                JSType inferredType = objType.getPropertyType(prop).getLeastSupertype(propType);\n                if (!inferredType.equals(objType.getPropertyType(prop))) {\n                    objType.defineInferredProperty(prop, inferredType, null);\n                    hasWarnings = true;\n                }\n            }\n        }\n\n        if (hasWarnings) {\n            JSError warning = JSError.make(infractions.getTypeMismatch());\n            compiler.report(warning);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..c65a4e60 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,21 +1118,30 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n+if (constraintObj != null && constraintObj.isRecordType()) {\n+    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+    if (objType != null) {\n+        boolean hasWarnings = false;\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n+            JSType propType = constraintObj.getPropertyType(prop);\n             if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+                objType.defineInferredProperty(prop, propType, null);\n+                hasWarnings = true;\n+            } else {\n+                JSType inferredType = objType.getPropertyType(prop).getLeastSupertype(propType);\n+                if (!inferredType.equals(objType.getPropertyType(prop))) {\n+                    objType.defineInferredProperty(prop, inferredType, null);\n+                    hasWarnings = true;\n+                }\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n         }\n-      }\n+\n+        if (hasWarnings) {\n+            JSError warning = JSError.make(infractions.getTypeMismatch());\n+            compiler.report(warning);\n+        }\n+    }\n+}\n     }\n   }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}