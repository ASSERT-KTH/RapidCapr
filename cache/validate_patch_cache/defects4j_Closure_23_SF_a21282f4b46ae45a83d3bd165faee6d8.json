{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    if (n.getParent().isAssign()) {\n        return n;\n    }\n\n    if (left.isEmpty() || !right.isNumber()) {\n        return n;\n    }\n\n    int index = (int) right.getDouble();\n    if (index != right.getDouble() || index < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    Node current = left.getFirstChild();\n    int i = 0;\n    while (current != null) {\n        if (i == index) {\n            if (current.isArrayLit()) {\n                Node elem = current.removeFirstChild();\n                if (elem != null) {\n                    n.getParent().replaceChild(n, elem);\n                    reportCodeChange();\n                    return elem;\n                }\n            } else if (current.isObjectLit()) {\n                Node obj = new Node(Token.OBJECTLIT);\n                obj.addChildToFront(new Node(Token.STRING, String.valueOf(index)));\n                n.getParent().replaceChild(n, obj);\n                reportCodeChange();\n                return obj;\n            } else {\n                current.removeChild(current.getFirstChild());\n                n.getParent().replaceChild(n, new Node(Token.UNDEFINED));\n                reportCodeChange();\n                return n.getParent();\n            }\n\n            break;\n        }\n\n        current = current.getNext();\n        i++;\n    }\n\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..f3cfe7a2 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,55 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n-\n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+    if (n.getParent().isAssign()) {\n+        return n;\n     }\n \n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n+    if (left.isEmpty() || !right.isNumber()) {\n+        return n;\n     }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    int index = (int) right.getDouble();\n+    if (index != right.getDouble() || index < 0) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n     Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n-    }\n+    int i = 0;\n+    while (current != null) {\n+        if (i == index) {\n+            if (current.isArrayLit()) {\n+                Node elem = current.removeFirstChild();\n+                if (elem != null) {\n+                    n.getParent().replaceChild(n, elem);\n+                    reportCodeChange();\n+                    return elem;\n+                }\n+            } else if (current.isObjectLit()) {\n+                Node obj = new Node(Token.OBJECTLIT);\n+                obj.addChildToFront(new Node(Token.STRING, String.valueOf(index)));\n+                n.getParent().replaceChild(n, obj);\n+                reportCodeChange();\n+                return obj;\n+            } else {\n+                current.removeChild(current.getFirstChild());\n+                n.getParent().replaceChild(n, new Node(Token.UNDEFINED));\n+                reportCodeChange();\n+                return n.getParent();\n+            }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+            break;\n+        }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+        current = current.getNext();\n+        i++;\n     }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n-  }\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: no suitable constructor found for Node(int,String)",
    "test_result": "ERROR"
}