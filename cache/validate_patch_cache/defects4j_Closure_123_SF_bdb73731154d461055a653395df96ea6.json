{
    "patch": "public static String fixCode(String code) {\n    String fixedCode = \"\";\n    boolean insideString = false;\n    boolean insideChar = false;\n    int inOperatorIndex = 0;\n    for (int i = 0; i < code.length(); i++) {\n        char current = code.charAt(i);\n        if (current == '\"') {\n            insideString = !insideString;\n        } else if (current == '\\'') {\n            insideChar = !insideChar;\n        } else if (!insideString && !insideChar && code.indexOf(\" in \", inOperatorIndex) == i - 2) {\n            // Fix the \"in\" operator by adding parentheses around the expression on the right-hand side\n            String expression = code.substring(i + 3).trim();\n            expression = expression.substring(0, expression.indexOf(' '));\n            fixedCode += \"(\" + expression + \".indexOf(\" + code.substring(inOperatorIndex - 2, i - 2) + \")>=0)\";\n            inOperatorIndex = i + 3 + expression.length() + 1;\n            continue;\n        }\n        fixedCode += current;\n    }\n    return fixedCode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..3406d205 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,29 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    String fixedCode = \"\";\n+    boolean insideString = false;\n+    boolean insideChar = false;\n+    int inOperatorIndex = 0;\n+    for (int i = 0; i < code.length(); i++) {\n+        char current = code.charAt(i);\n+        if (current == '\"') {\n+            insideString = !insideString;\n+        } else if (current == '\\'') {\n+            insideChar = !insideChar;\n+        } else if (!insideString && !insideChar && code.indexOf(\" in \", inOperatorIndex) == i - 2) {\n+            // Fix the \"in\" operator by adding parentheses around the expression on the right-hand side\n+            String expression = code.substring(i + 3).trim();\n+            expression = expression.substring(0, expression.indexOf(' '));\n+            fixedCode += \"(\" + expression + \".indexOf(\" + code.substring(inOperatorIndex - 2, i - 2) + \")>=0)\";\n+            inOperatorIndex = i + 3 + expression.length() + 1;\n+            continue;\n+        }\n+        fixedCode += current;\n+    }\n+    return fixedCode;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}