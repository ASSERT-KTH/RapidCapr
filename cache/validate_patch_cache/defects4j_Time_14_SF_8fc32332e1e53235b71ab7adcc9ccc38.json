{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        int year = iChronology.year().get(instant);\n        int month = iChronology.monthOfYear().get(instant);\n        int day = iChronology.dayOfMonth().get(instant);\n        int hours = iChronology.hourOfDay().get(instant);\n        int minutes = iChronology.minuteOfHour().get(instant);\n        int seconds = iChronology.secondOfMinute().get(instant);\n        int millis = iChronology.millisOfSecond().get(instant);\n\n        int monthsToAdd = valueToAdd % 12;\n        int yearsToAdd = valueToAdd / 12;\n\n        while (yearsToAdd > 0) { // add years first\n            year = iChronology.year().add(year, 1);\n            if (iChronology.year().isLeap(year)) {\n                // adjust day if needed for leap year\n                int daysInMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.getDateTimeMillis(year, month, 1, hours, minutes, seconds, millis));\n                if (day > daysInMonth) {\n                    day = daysInMonth;\n                }\n            }\n            yearsToAdd--;\n        }\n        if (monthsToAdd != 0) { // then add months\n            int totalMonths = year * 12 + month - 1 + monthsToAdd; // Calculate total months to avoid wrapping issues\n            year = totalMonths / 12;\n            month = totalMonths % 12 + 1;\n            if (iChronology.year().isLeap(year) && month == 2) {\n                // adjust day if needed for leap year\n                int daysInMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.getDateTimeMillis(year, month, 1, hours, minutes, seconds, millis));\n                if (day > daysInMonth) {\n                    day = daysInMonth;\n                }\n            }\n        }\n\n        return new int[]{year, month, day, hours, minutes, seconds, millis};\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..2fe8ecb4 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,55 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        int year = iChronology.year().get(instant);\n+        int month = iChronology.monthOfYear().get(instant);\n+        int day = iChronology.dayOfMonth().get(instant);\n+        int hours = iChronology.hourOfDay().get(instant);\n+        int minutes = iChronology.minuteOfHour().get(instant);\n+        int seconds = iChronology.secondOfMinute().get(instant);\n+        int millis = iChronology.millisOfSecond().get(instant);\n+\n+        int monthsToAdd = valueToAdd % 12;\n+        int yearsToAdd = valueToAdd / 12;\n+\n+        while (yearsToAdd > 0) { // add years first\n+            year = iChronology.year().add(year, 1);\n+            if (iChronology.year().isLeap(year)) {\n+                // adjust day if needed for leap year\n+                int daysInMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.getDateTimeMillis(year, month, 1, hours, minutes, seconds, millis));\n+                if (day > daysInMonth) {\n+                    day = daysInMonth;\n+                }\n+            }\n+            yearsToAdd--;\n+        }\n+        if (monthsToAdd != 0) { // then add months\n+            int totalMonths = year * 12 + month - 1 + monthsToAdd; // Calculate total months to avoid wrapping issues\n+            year = totalMonths / 12;\n+            month = totalMonths % 12 + 1;\n+            if (iChronology.year().isLeap(year) && month == 2) {\n+                // adjust day if needed for leap year\n+                int daysInMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.getDateTimeMillis(year, month, 1, hours, minutes, seconds, millis));\n+                if (day > daysInMonth) {\n+                    day = daysInMonth;\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+\n+        return new int[]{year, month, day, hours, minutes, seconds, millis};\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}