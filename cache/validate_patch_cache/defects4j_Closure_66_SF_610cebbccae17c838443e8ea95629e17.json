{
    "patch": "public static double getTypedPercent(JsonNode node) {\n    int count = 0;\n    int countTyped = 0;\n\n    Iterator<String> fieldNames = node.fieldNames();\n    while (fieldNames.hasNext()) {\n        String field = fieldNames.next();\n        JsonNode fieldNode = node.get(field);\n        if (!fieldNode.isNull()) {\n            count++;\n            if (fieldNode.isIntegralNumber() || fieldNode.isFloatingPointNumber()) {\n                countTyped++;\n            }\n        }\n    }\n\n    if (count == 0) {\n        return 100.0;\n    }\n\n    return ((double) countTyped / count) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..6840d81d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonNode node) {\n+    int count = 0;\n+    int countTyped = 0;\n+\n+    Iterator<String> fieldNames = node.fieldNames();\n+    while (fieldNames.hasNext()) {\n+        String field = fieldNames.next();\n+        JsonNode fieldNode = node.get(field);\n+        if (!fieldNode.isNull()) {\n+            count++;\n+            if (fieldNode.isIntegralNumber() || fieldNode.isFloatingPointNumber()) {\n+                countTyped++;\n+            }\n+        }\n+    }\n+\n+    if (count == 0) {\n+        return 100.0;\n+    }\n+\n+    return ((double) countTyped / count) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}