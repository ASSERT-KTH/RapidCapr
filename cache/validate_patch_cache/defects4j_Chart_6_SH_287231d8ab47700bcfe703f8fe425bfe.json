{
    "patch": "if (obj == null || !(obj instanceof ShapeList)) {\n    return false;\n}\n\nShapeList other = (ShapeList) obj;\nif (size() != other.size()) {\n    return false;\n}\n\nIterator iterator = iterator();\nIterator otherIterator = other.iterator();\nwhile (iterator.hasNext() && otherIterator.hasNext()) {\n    Shape shape1 = (Shape) iterator.next();\n    Shape shape2 = (Shape) otherIterator.next();\n    if (!ShapeUtilities.equal(shape1, shape2)) {\n        return false;\n    }\n}\n\nreturn !iterator.hasNext() && !otherIterator.hasNext();",
    "patch_diff": "diff --git a/source/org/jfree/chart/util/ShapeList.java b/source/org/jfree/chart/util/ShapeList.java\nindex 85f1c81..e4b4ae9 100644\n--- a/source/org/jfree/chart/util/ShapeList.java\n+++ b/source/org/jfree/chart/util/ShapeList.java\n@@ -108,7 +108,26 @@ public class ShapeList extends AbstractObjectList {\n         if (!(obj instanceof ShapeList)) {\n             return false;\n         }\n-        return super.equals(obj);\n+if (obj == null || !(obj instanceof ShapeList)) {\n+    return false;\n+}\n+\n+ShapeList other = (ShapeList) obj;\n+if (size() != other.size()) {\n+    return false;\n+}\n+\n+Iterator iterator = iterator();\n+Iterator otherIterator = other.iterator();\n+while (iterator.hasNext() && otherIterator.hasNext()) {\n+    Shape shape1 = (Shape) iterator.next();\n+    Shape shape2 = (Shape) otherIterator.next();\n+    if (!ShapeUtilities.equal(shape1, shape2)) {\n+        return false;\n+    }\n+}\n+\n+return !iterator.hasNext() && !otherIterator.hasNext();\n \n     }\n \n@@ -169,4 +188,3 @@ public class ShapeList extends AbstractObjectList {\n     }\n \n }\n-",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}