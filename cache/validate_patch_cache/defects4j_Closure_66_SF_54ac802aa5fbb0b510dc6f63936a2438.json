{
    "patch": "public static double getTypedPercent(JSONArray jsonArray) {\n    int total = 0, typed = 0;\n    for (int i = 0; i < jsonArray.length(); i++) {\n        if (jsonArray.optJSONObject(i) != null) {\n            total++;\n            JSONObject obj = jsonArray.getJSONObject(i);\n            if (obj.has(\"type\") && !obj.getString(\"type\").isEmpty()) {\n                typed++;\n            }\n        }\n    }\n    return total == 0 ? 0 : ((double) typed / total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..54a8d620 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONArray jsonArray) {\n+    int total = 0, typed = 0;\n+    for (int i = 0; i < jsonArray.length(); i++) {\n+        if (jsonArray.optJSONObject(i) != null) {\n+            total++;\n+            JSONObject obj = jsonArray.getJSONObject(i);\n+            if (obj.has(\"type\") && !obj.getString(\"type\").isEmpty()) {\n+                typed++;\n+            }\n+        }\n+    }\n+    return total == 0 ? 0 : ((double) typed / total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}