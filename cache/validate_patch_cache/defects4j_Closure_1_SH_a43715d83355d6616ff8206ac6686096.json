{
    "patch": "        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n    // strip unreferenced args off the end of the function declaration\n    Node lastArg = argList.getLastChild();\n    while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n\n        // also remove the argument from the parameter list\n        function.removeChild(lastArg);\n        lastArg = argList.getLastChild();\n    }\n\n    if (modifyCallers) {\n        callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..fcf22c89 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,27 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        // The parameters object literal setters can not be removed.\n+        return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+    // strip unreferenced args off the end of the function declaration\n+    Node lastArg = argList.getLastChild();\n+    while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+\n+        // also remove the argument from the parameter list\n+        function.removeChild(lastArg);\n+        lastArg = argList.getLastChild();\n+    }\n+\n+    if (modifyCallers) {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}