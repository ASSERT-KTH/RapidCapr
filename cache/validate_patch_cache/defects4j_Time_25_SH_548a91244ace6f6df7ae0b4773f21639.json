{
    "patch": "            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                \n                // check for the case where nextAdjusted = Long.MIN_VALUE\n                // and nextLocal != Long.MIN_VALUE\n                if (nextLocal != nextAdjusted) {\n                    if (nextAdjusted == Long.MIN_VALUE) {\n                        return offsetAdjusted;\n                    }\n                    if (getOffset(nextLocal) != offsetLocal) {\n                        // pick the closest offset\n                        long prevLocal = previousTransition(nextLocal);\n                        long prevAdjusted = previousTransition(nextAdjusted);\n                        if (prevLocal == prevAdjusted) {\n                            return offsetLocal;\n                        } else if (offsetLocal < offsetAdjusted) {\n                            return getOffset(prevAdjusted);\n                        } else {\n                            return offsetLocal;\n                        }\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..817402aa 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,35 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // we need to ensure that time is always after the DST gap\n+            // this happens naturally for positive offsets, but not for negative\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                \n+                // check for the case where nextAdjusted = Long.MIN_VALUE\n+                // and nextLocal != Long.MIN_VALUE\n+                if (nextLocal != nextAdjusted) {\n+                    if (nextAdjusted == Long.MIN_VALUE) {\n+                        return offsetAdjusted;\n+                    }\n+                    if (getOffset(nextLocal) != offsetLocal) {\n+                        // pick the closest offset\n+                        long prevLocal = previousTransition(nextLocal);\n+                        long prevAdjusted = previousTransition(nextAdjusted);\n+                        if (prevLocal == prevAdjusted) {\n+                            return offsetLocal;\n+                        } else if (offsetLocal < offsetAdjusted) {\n+                            return getOffset(prevAdjusted);\n+                        } else {\n+                            return offsetLocal;\n+                        }\n+                    }\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}