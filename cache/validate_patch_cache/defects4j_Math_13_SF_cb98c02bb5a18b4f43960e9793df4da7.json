{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final long MAX_ELEMENTS = 100000000L; // approximate maximum number of elements allowed in the matrix\n    final double ELEMENT_SIZE = 8.0; // size of double in bytes\n\n    int rows = m.getRowDimension();\n    int cols = m.getColumnDimension();\n    long numElements = (long) rows * cols;\n\n    if (numElements > MAX_ELEMENTS) {\n        double factor = Math.sqrt((double) MAX_ELEMENTS / numElements);\n        int newRows = (int) Math.ceil(rows * factor);\n        int newCols = (int) Math.ceil(cols * factor);\n        double[][] data = new double[newRows][newCols];\n        for (int i = 0; i < rows; i++) {\n            double[] row = m.getRow(i);\n            for (int j = 0; j < cols; j++) {\n                data[i][j] = row[j] * factor;\n            }\n        }\n        m = new Array2DRowRealMatrix(data);\n    }\n\n    EigenDecomposition dec = new EigenDecomposition(m);\n    double[] eigenvalues = getSqrtArray(getPositiveEigenvalues(dec));\n    RealMatrix sqrtDiag = MatrixUtils.createRealDiagonalMatrix(eigenvalues);\n\n    return dec.getV().multiply(sqrtDiag).multiply(dec.getVT());\n}\n\nprivate double[] getPositiveEigenvalues(EigenDecomposition dec) {\n    final int dim = dec.getRealEigenvalues().length;\n    final double[] eigenvalues = new double[dim];\n    for (int i = 0; i < dim; i++) {\n        eigenvalues[i] = Math.max(dec.getRealEigenvalue(i), 0); // Force non-negative eigenvalues\n    }\n    return eigenvalues;\n}\n\nprivate double[] getSqrtArray(double[] ar) {\n    double[] result = new double[ar.length];\n    for (int i = 0; i < ar.length; i++) {\n        result[i] = Math.sqrt(Math.abs(ar[i])); // Take the absolute value to avoid NaN results from negative eigenvalues\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..8d5ed4d81 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,49 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final long MAX_ELEMENTS = 100000000L; // approximate maximum number of elements allowed in the matrix\n+    final double ELEMENT_SIZE = 8.0; // size of double in bytes\n+\n+    int rows = m.getRowDimension();\n+    int cols = m.getColumnDimension();\n+    long numElements = (long) rows * cols;\n+\n+    if (numElements > MAX_ELEMENTS) {\n+        double factor = Math.sqrt((double) MAX_ELEMENTS / numElements);\n+        int newRows = (int) Math.ceil(rows * factor);\n+        int newCols = (int) Math.ceil(cols * factor);\n+        double[][] data = new double[newRows][newCols];\n+        for (int i = 0; i < rows; i++) {\n+            double[] row = m.getRow(i);\n+            for (int j = 0; j < cols; j++) {\n+                data[i][j] = row[j] * factor;\n+            }\n+        }\n+        m = new Array2DRowRealMatrix(data);\n     }\n+\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    double[] eigenvalues = getSqrtArray(getPositiveEigenvalues(dec));\n+    RealMatrix sqrtDiag = MatrixUtils.createRealDiagonalMatrix(eigenvalues);\n+\n+    return dec.getV().multiply(sqrtDiag).multiply(dec.getVT());\n+}\n+\n+private double[] getPositiveEigenvalues(EigenDecomposition dec) {\n+    final int dim = dec.getRealEigenvalues().length;\n+    final double[] eigenvalues = new double[dim];\n+    for (int i = 0; i < dim; i++) {\n+        eigenvalues[i] = Math.max(dec.getRealEigenvalue(i), 0); // Force non-negative eigenvalues\n+    }\n+    return eigenvalues;\n+}\n+\n+private double[] getSqrtArray(double[] ar) {\n+    double[] result = new double[ar.length];\n+    for (int i = 0; i < ar.length; i++) {\n+        result[i] = Math.sqrt(Math.abs(ar[i])); // Take the absolute value to avoid NaN results from negative eigenvalues\n+    }\n+    return result;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}