{
    "patch": "    List<Node> params = NodeUtil.getFunctionParameters(function);\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    boolean modifyCallers = modifyCallSites &&\n        callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // removing function arguments that are not referenced\n      for (int i = params.size() - 1; i >= 0; i--) {\n        String paramName = params.get(i).getString();\n        Var var = fnScope.getVar(paramName);\n        if (!referenced.contains(var)) {\n          Node paramNode = params.get(i);\n          Node defaultValue = paramNode.getFirstChild();\n          if (defaultValue != null &&\n              defaultValue.isDefaultValue()) {\n            paramNode.removeChild(defaultValue);\n            defaultValue.detach();\n          }\n          paramNode.detach();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f81b5853 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    List<Node> params = NodeUtil.getFunctionParameters(function);\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    boolean modifyCallers = modifyCallSites &&\n+        callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // removing function arguments that are not referenced\n+      for (int i = params.size() - 1; i >= 0; i--) {\n+        String paramName = params.get(i).getString();\n+        Var var = fnScope.getVar(paramName);\n+        if (!referenced.contains(var)) {\n+          Node paramNode = params.get(i);\n+          Node defaultValue = paramNode.getFirstChild();\n+          if (defaultValue != null &&\n+              defaultValue.isDefaultValue()) {\n+            paramNode.removeChild(defaultValue);\n+            defaultValue.detach();\n+          }\n+          paramNode.detach();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}