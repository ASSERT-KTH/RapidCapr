{
    "patch": "      if (!getFunctionType().getParameterNames().isEmpty()) {\n        JSType formalType =\n            checkNotNull(constraintObj.getProp(getFunctionType().getParameterNames().get(0)));\n        JSType actualType =\n            getFormalType(getFunctionType().getTypeOfThis());\n        getSummary().addBound(formalType, actualType, this);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..7260f7ab 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,13 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+      if (!getFunctionType().getParameterNames().isEmpty()) {\n+        JSType formalType =\n+            checkNotNull(constraintObj.getProp(getFunctionType().getParameterNames().get(0)));\n+        JSType actualType =\n+            getFormalType(getFunctionType().getTypeOfThis());\n+        getSummary().addBound(formalType, actualType, this);\n+      }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}