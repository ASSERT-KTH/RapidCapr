{
    "patch": "    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n\n      if (constructorType.isUnknownType() || !constructorType.isFunctionType()) {\n        // getDeclaredType has a side effect of marking the type of the constructor node\n        // with the result. We need to reset the type here to prevent strange\n        // type behavior in the cases where the constructor is not a function.\n        constructor.setTypeI(null);\n\n        // If constructorType is not a function type, we need to return an appropriate instance type\n        ObjectType unknownObjType = ObjectType.cast(getNativeType(UNKNOWN_TYPE));\n        ObjectType objType = ObjectType.cast(constructorType.getDeclaredType());\n        if (objType.isNominalConstructor() && objType.isGeneric()) {\n          // In the case of a generic nominal constructor, return the unknown object type\n          type = unknownObjType;\n        } else {\n          type = objType.getInstanceType();\n          if (type == null) {\n            type = unknownObjType;\n          }\n        }\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..ac4e7975 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,42 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n+\n     if (constructorType != null) {\n       constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n+\n+      if (constructorType.isUnknownType() || !constructorType.isFunctionType()) {\n+        // getDeclaredType has a side effect of marking the type of the constructor node\n+        // with the result. We need to reset the type here to prevent strange\n+        // type behavior in the cases where the constructor is not a function.\n+        constructor.setTypeI(null);\n+\n+        // If constructorType is not a function type, we need to return an appropriate instance type\n+        ObjectType unknownObjType = ObjectType.cast(getNativeType(UNKNOWN_TYPE));\n+        ObjectType objType = ObjectType.cast(constructorType.getDeclaredType());\n+        if (objType.isNominalConstructor() && objType.isGeneric()) {\n+          // In the case of a generic nominal constructor, return the unknown object type\n+          type = unknownObjType;\n+        } else {\n+          type = objType.getInstanceType();\n+          if (type == null) {\n+            type = unknownObjType;\n+          }\n+        }\n       } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n         }\n       }\n     }\n+\n     n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n-    }\n-    return scope;\n-  }\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}