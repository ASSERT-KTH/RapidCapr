{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            if (valueToAdd < 0) {\n                // check if subtraction will change year or month\n                DateTimeField field = partial.getField(fieldIndex);\n                int oldValue = values[fieldIndex];\n                int months = valueToAdd % 12;\n                int years = valueToAdd / 12;\n                int newYear = partial.withField(field, oldValue).plusYears(years).getYear();\n                int newMonth = partial.withField(field, oldValue).plusMonths(months).getMonthOfYear();\n                // adjust day of month if necessary\n                int newDay = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n                while (!DateUtils.isValidDayOfMonth(newYear, newMonth, newDay)) {\n                    newDay--;\n                }\n                values[fieldIndex] = partial.withField(field, oldValue).plusYears(years).plusMonths(months).withField(DateTimeFieldType.dayOfMonth(), newDay).get(field);\n            } else {\n                long instant = 0L;\n                for (int i = 0, isize = partial.size(); i < isize; i++) {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }\n                instant = add(instant, valueToAdd);\n                return iChronology.get(partial, instant);\n            }\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n        return values;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..a3a798e4 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,17 +206,34 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            if (valueToAdd < 0) {\n+                // check if subtraction will change year or month\n+                DateTimeField field = partial.getField(fieldIndex);\n+                int oldValue = values[fieldIndex];\n+                int months = valueToAdd % 12;\n+                int years = valueToAdd / 12;\n+                int newYear = partial.withField(field, oldValue).plusYears(years).getYear();\n+                int newMonth = partial.withField(field, oldValue).plusMonths(months).getMonthOfYear();\n+                // adjust day of month if necessary\n+                int newDay = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n+                while (!DateUtils.isValidDayOfMonth(newYear, newMonth, newDay)) {\n+                    newDay--;\n+                }\n+                values[fieldIndex] = partial.withField(field, oldValue).plusYears(years).plusMonths(months).withField(DateTimeFieldType.dayOfMonth(), newDay).get(field);\n+            } else {\n+                long instant = 0L;\n+                for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                }\n+                instant = add(instant, valueToAdd);\n+                return iChronology.get(partial, instant);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return values;\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}