{
    "patch": "        if (value.getParent().isAssign()) {\n          Node parent = value.getParent().getParent();\n          if (parent.isExprResult()) {\n            for (Node n : NodeUtil.preOrderIterable(parent)) {\n              if (n.isReturn()) {\n                return false;\n              }\n            }\n          } else if (value.getParent().isVar()) {\n            Node replacement = value.getNext();\n            if (replacement == null\n                || !replacement.isFunction()\n                || (replacement.getNext() != null && replacement.getNext().isAssign())) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..1e6f13e6 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,21 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+        if (value.getParent().isAssign()) {\n+          Node parent = value.getParent().getParent();\n+          if (parent.isExprResult()) {\n+            for (Node n : NodeUtil.preOrderIterable(parent)) {\n+              if (n.isReturn()) {\n+                return false;\n+              }\n+            }\n+          } else if (value.getParent().isVar()) {\n+            Node replacement = value.getNext();\n+            if (replacement == null\n+                || !replacement.isFunction()\n+                || (replacement.getNext() != null && replacement.getNext().isAssign())) {\n+              return false;\n+            }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}