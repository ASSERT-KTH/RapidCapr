{
    "patch": "import org.mockito.cglib.proxy.Factory;\nimport org.mockito.cglib.proxy.MethodInterceptor;\nimport org.mockito.cglib.proxy.MethodProxy;\n\nimport java.lang.reflect.Method;\n\npublic <T> void resetMock(T mock) {\n    MethodInterceptorFilter<T> newFilter = new MethodInterceptorFilter<>(mock);\n    ((Factory) mock).setCallback(0, newFilter);\n}\n\nprivate class MethodInterceptorFilter<T> implements MethodInterceptor {\n    private MockHandler<T> mockHandler;\n\n    public MethodInterceptorFilter(T mock) {\n        mockHandler = new MockHandler<>((MockHandlerInterface<T>) getMockHandler(mock));\n    }\n\n    @Override\n    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n        Object result = mockHandler.handle(obj, method, args);\n        if (result != MockHandler.RETURN_DEFAULT) {\n            return result;\n        } else {\n            return proxy.invokeSuper(obj, args);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..7f7cb6241 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,35 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.cglib.proxy.Factory;\n+import org.mockito.cglib.proxy.MethodInterceptor;\n+import org.mockito.cglib.proxy.MethodProxy;\n+\n+import java.lang.reflect.Method;\n+\n+public <T> void resetMock(T mock) {\n+    MethodInterceptorFilter<T> newFilter = new MethodInterceptorFilter<>(mock);\n+    ((Factory) mock).setCallback(0, newFilter);\n+}\n+\n+private class MethodInterceptorFilter<T> implements MethodInterceptor {\n+    private MockHandler<T> mockHandler;\n+\n+    public MethodInterceptorFilter(T mock) {\n+        mockHandler = new MockHandler<>((MockHandlerInterface<T>) getMockHandler(mock));\n+    }\n+\n+    @Override\n+    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n+        Object result = mockHandler.handle(obj, method, args);\n+        if (result != MockHandler.RETURN_DEFAULT) {\n+            return result;\n+        } else {\n+            return proxy.invokeSuper(obj, args);\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}