{
    "patch": "attachLiteralTypes(n);\nswitch (n.getType()) {\n    case Token.FUNCTION:\n        if (parent.getType() == Token.NAME) {\n            return;\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n    case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n    case Token.VAR:\n        defineVar(n, parent);\n        break;\n    case Token.LP:\n        if (parent.getParent() != null) {\n            Node grandParent = parent.getParent();\n            if (grandParent.getType() != Token.EXPR_RESULT && grandParent.getType() != Token.ARRAYLIT) {\n                if (NodeUtil.isFunctionExpression(grandParent) &&\n                        grandParent != n.getFirstChild()) {\n                    return;\n                } else if (grandParent.getType() == Token.VAR ||\n                        grandParent.getType() == Token.EXPR_RESULT ||\n                        grandParent.getType() == Token.ASSIGN) {\n                    handleFunctionInputs(parent);\n                } else if (grandParent.getType() == Token.CALL &&\n                        !isPrototypeFunctionCall(grandParent)) {\n                    handleFunctionInputs(parent);\n                }\n            }\n        }\n        break;\n    case Token.NAME:\n        if (NodeUtil.isExpressionResult(parent)) {\n            Node grandParent = parent.getParent();\n            if (grandParent.getType() == Token.ASSIGN ||\n                    grandParent.getType() == Token.VAR) {\n                defineVar(n, grandParent);\n            }\n        } else if (parent.getType() == Token.PRIMARY &&\n                parent.getParent() != null &&\n                parent.getParent().getType() == Token.ASSIGN) {\n            defineVar(n, parent.getParent());\n        } else if (parent.getType() == Token.VAR) {\n            Node grandParent = parent.getParent();\n            if (grandParent.getType() != Token.EXPR_RESULT) {\n                defineVar(n, grandParent);\n            }\n        } else if (parent.getType() == Token.CATCH) {\n            defineCatch(n, parent);\n        }\n        break;\n    default:\n        break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..d9eb4a27 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,61 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+attachLiteralTypes(n);\n+switch (n.getType()) {\n+    case Token.FUNCTION:\n+        if (parent.getType() == Token.NAME) {\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+    case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+    case Token.LP:\n+        if (parent.getParent() != null) {\n+            Node grandParent = parent.getParent();\n+            if (grandParent.getType() != Token.EXPR_RESULT && grandParent.getType() != Token.ARRAYLIT) {\n+                if (NodeUtil.isFunctionExpression(grandParent) &&\n+                        grandParent != n.getFirstChild()) {\n+                    return;\n+                } else if (grandParent.getType() == Token.VAR ||\n+                        grandParent.getType() == Token.EXPR_RESULT ||\n+                        grandParent.getType() == Token.ASSIGN) {\n+                    handleFunctionInputs(parent);\n+                } else if (grandParent.getType() == Token.CALL &&\n+                        !isPrototypeFunctionCall(grandParent)) {\n+                    handleFunctionInputs(parent);\n+                }\n+            }\n+        }\n+        break;\n+    case Token.NAME:\n+        if (NodeUtil.isExpressionResult(parent)) {\n+            Node grandParent = parent.getParent();\n+            if (grandParent.getType() == Token.ASSIGN ||\n+                    grandParent.getType() == Token.VAR) {\n+                defineVar(n, grandParent);\n+            }\n+        } else if (parent.getType() == Token.PRIMARY &&\n+                parent.getParent() != null &&\n+                parent.getParent().getType() == Token.ASSIGN) {\n+            defineVar(n, parent.getParent());\n+        } else if (parent.getType() == Token.VAR) {\n+            Node grandParent = parent.getParent();\n+            if (grandParent.getType() != Token.EXPR_RESULT) {\n+                defineVar(n, grandParent);\n+            }\n+        } else if (parent.getType() == Token.CATCH) {\n+            defineCatch(n, parent);\n+        }\n+        break;\n+    default:\n+        break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}