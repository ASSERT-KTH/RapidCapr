{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m, 0.0);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final int size = d.getRowDimension();\n    \n    for (int i = 0; i < size; i++) {\n        if (d.getEntry(i, i) < 0.0) {\n            throw new IllegalArgumentException(\"Matrix has negative eigenvalues\");\n        }\n        else {\n            d.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n        }\n    }\n    \n    final RealMatrix sqrtD = d.scalarMatrixMultiply(1 / Math.sqrt(2)).add(MatrixUtils.createRealIdentityMatrix(size)).scalarMultiply(Math.sqrt(0.5));\n    final RealMatrix vt = v.transpose();\n\n    return v.multiply(sqrtD).multiply(vt);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c74d96673 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m, 0.0);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final int size = d.getRowDimension();\n+    \n+    for (int i = 0; i < size; i++) {\n+        if (d.getEntry(i, i) < 0.0) {\n+            throw new IllegalArgumentException(\"Matrix has negative eigenvalues\");\n+        }\n+        else {\n+            d.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n+        }\n     }\n+    \n+    final RealMatrix sqrtD = d.scalarMatrixMultiply(1 / Math.sqrt(2)).add(MatrixUtils.createRealIdentityMatrix(size)).scalarMultiply(Math.sqrt(0.5));\n+    final RealMatrix vt = v.transpose();\n+\n+    return v.multiply(sqrtD).multiply(vt);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}