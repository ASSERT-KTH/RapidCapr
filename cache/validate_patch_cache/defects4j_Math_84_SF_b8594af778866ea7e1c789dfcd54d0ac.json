{
    "patch": "                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    simplex = expanded;\n                } else {\n                    simplex = reflectedSimplex;\n                }\n                continue;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n\n                simplex = contracted;\n                continue;\n            }\n\n            // perform a shrink step\n            final RealPointValuePair[] shrinkedSimplex = simplex;\n            for (int i = 1; i < simplex.length; ++i) {\n                shrinkedSimplex[i] = new RealPointValuePair(\n                        original[i].getPoint(), original[i].getValue() + delta * (simplex[i].getValue() - original[i].getValue())\n                );\n            }\n            simplex = shrinkedSimplex;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..ff39ce916 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,33 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    simplex = expanded;\n+                } else {\n                     simplex = reflectedSimplex;\n                 }\n-\n-                return;\n+                continue;\n \n             }\n \n             // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n \n-            // check convergence\n-                return;\n+                simplex = contracted;\n+                continue;\n             }\n \n-        }\n-\n-    }\n+            // perform a shrink step\n+            final RealPointValuePair[] shrinkedSimplex = simplex;\n+            for (int i = 1; i < simplex.length; ++i) {\n+                shrinkedSimplex[i] = new RealPointValuePair(\n+                        original[i].getPoint(), original[i].getValue() + delta * (simplex[i].getValue() - original[i].getValue())\n+                );\n+            }\n+            simplex = shrinkedSimplex;\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}