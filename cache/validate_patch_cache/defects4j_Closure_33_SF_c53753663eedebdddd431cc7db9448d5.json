{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n  // Check whether constraintObj is a FunctionType or a record type.\n  if (!constraintObj.isFunctionType() && !constraintObj.isRecordType()) {\n    return;\n  }\n  // Handle the case where the constraint object is a record type.\n  //\n  // param constraintObj {{prop: (number|undefined)}}\n  // function f(constraintObj) {}\n  // f({});\n  //\n  // We want to modify the object literal to match the constraint, by\n  // taking each property on the record and trying to match properties on this object.\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  } else if (constraintObj.isFunctionType()) {\n    FunctionType functionType = constraintObj.toMaybeFunctionType();\n    int minimumArity = functionType.getMinArity();\n    int maximumArity = functionType.getMaxArity();\n    JSType typeOfRestParam = functionType.getTypeOfRestParameter();\n    if (minimumArity == 0 && maximumArity == 0) {\n      // Handle the case where the constraint object is a function with zero arity.\n      FunctionType.Builder builder = FunctionType.builder(getCommonTypes());\n      defineInferredProperty(\"\", builder.buildVoidType(), null);\n    } else {\n      // Handle the case where the constraint object is a function with non-zero arity.\n      FunctionType.Builder builder = FunctionType.builder(getCommonTypes());\n      for (int i = 0; i < minimumArity; i++) {\n        builder.addRequiredFormalParam(getNativeType(JSTypeNative.NO_TYPE));\n      }\n      if (maxArity > minimumArity) {\n        builder.addOptionalFormalParam(getNativeType(JSTypeNative.NO_TYPE));\n      }\n      if (typeOfRestParam != null) {\n        builder.addRestFormalParam(typeOfRestParam);\n      }\n      if (functionType.getReturnType() != null) {\n        builder.setReturnType(functionType.getReturnType());\n      }\n      defineInferredProperty(\"\", builder.buildAndResolve(), null);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..bfd092e2 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,57 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n+public void matchConstraint(ObjectType constraintObj) {\n+  // Check whether constraintObj is a FunctionType or a record type.\n+  if (!constraintObj.isFunctionType() && !constraintObj.isRecordType()) {\n+    return;\n+  }\n+  // Handle the case where the constraint object is a record type.\n+  //\n+  // param constraintObj {{prop: (number|undefined)}}\n+  // function f(constraintObj) {}\n+  // f({});\n+  //\n+  // We want to modify the object literal to match the constraint, by\n+  // taking each property on the record and trying to match properties on this object.\n+  if (constraintObj.isRecordType()) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!isPropertyTypeDeclared(prop)) {\n+        JSType typeToInfer = propType;\n+        if (!hasProperty(prop)) {\n+          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+              .getLeastSupertype(propType);\n         }\n+        defineInferredProperty(prop, typeToInfer, null);\n       }\n     }\n+  } else if (constraintObj.isFunctionType()) {\n+    FunctionType functionType = constraintObj.toMaybeFunctionType();\n+    int minimumArity = functionType.getMinArity();\n+    int maximumArity = functionType.getMaxArity();\n+    JSType typeOfRestParam = functionType.getTypeOfRestParameter();\n+    if (minimumArity == 0 && maximumArity == 0) {\n+      // Handle the case where the constraint object is a function with zero arity.\n+      FunctionType.Builder builder = FunctionType.builder(getCommonTypes());\n+      defineInferredProperty(\"\", builder.buildVoidType(), null);\n+    } else {\n+      // Handle the case where the constraint object is a function with non-zero arity.\n+      FunctionType.Builder builder = FunctionType.builder(getCommonTypes());\n+      for (int i = 0; i < minimumArity; i++) {\n+        builder.addRequiredFormalParam(getNativeType(JSTypeNative.NO_TYPE));\n+      }\n+      if (maxArity > minimumArity) {\n+        builder.addOptionalFormalParam(getNativeType(JSTypeNative.NO_TYPE));\n+      }\n+      if (typeOfRestParam != null) {\n+        builder.addRestFormalParam(typeOfRestParam);\n+      }\n+      if (functionType.getReturnType() != null) {\n+        builder.setReturnType(functionType.getReturnType());\n+      }\n+      defineInferredProperty(\"\", builder.buildAndResolve(), null);\n+    }\n   }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}