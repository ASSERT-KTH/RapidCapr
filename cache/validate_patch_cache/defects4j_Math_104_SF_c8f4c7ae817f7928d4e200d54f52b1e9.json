{
    "patch": "import org.apache.commons.math3.special.Gamma;\n\npublic class MathUtils {\n    \n    public static double regularizedGamma(double a, double x) {\n        if (Double.isNaN(a) || Double.isNaN(x)) {\n            return Double.NaN;\n        }\n        if (a <= 0 || x < 0) {\n            return Double.NaN;\n        }\n        if (x == 0) {\n            return 0.0;\n        }\n        if (x > 1 && x > a) {\n            return 1.0 - regularizedGammaComplement(a, x);\n        }\n        double sum = 1.0 / a;\n        double term = sum;\n        while (Math.abs(term / sum) > 1e-15) {\n            term *= x / (a + sum);\n            sum += term;\n        }\n        return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n    }\n    \n    public static double regularizedGammaComplement(double a, double x) {\n        if (Double.isNaN(a) || Double.isNaN(x)) {\n            return Double.NaN;\n        }\n        if (a <= 0 || x < 0) {\n            return Double.NaN;\n        }\n        if (x == 0) {\n            return 1.0;\n        }\n        if (x < 1 && x < a) {\n            return 1.0 - regularizedGamma(a, x);\n        }\n        double gln = Gamma.logGamma(a);\n        double ax = a * Math.log(x) - x - gln;\n        if (ax < -709.78271289338399) {\n            return x < a ? 1.0 : 0.0;\n        }\n        double res = Math.exp(ax);\n        double y = 1.0 - a;\n        double z = x + y + 1.0;\n        double c = 0.0;\n        double pkm2 = 1.0;\n        double qkm2 = x;\n        double pkm1 = x + 1.0;\n        double qkm1 = z * x;\n        double ans = pkm1 / qkm1;\n        double error;\n        do {\n            c += 1.0;\n            y += 1.0;\n            z += 2.0;\n            double yc = y * c;\n            double pk = pkm1 * z - pkm2 * yc;\n            double qk = qkm1 * z - qkm2 * yc;\n            if (qk != 0) {\n                double r = pk / qk;\n                error = Math.abs((ans - r) / r);\n                ans = r;\n            } else {\n                error = 1.0;\n            }\n            pkm2 = pkm1;\n            pkm1 = pk;\n            qkm2 = qkm1;\n            qkm1 = qk;\n            if (Math.abs(pk) > 1e306) {\n                pkm2 *= 1e-306;\n                pkm1 *= 1e-306;\n                qkm2 *= 1e-306;\n                qkm1 *= 1e-306;\n            }\n        } while (error > 1e-15);\n        return 1.0 - (res * ans);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..525900bf1 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,88 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class MathUtils {\n+    \n+    public static double regularizedGamma(double a, double x) {\n+        if (Double.isNaN(a) || Double.isNaN(x)) {\n+            return Double.NaN;\n+        }\n+        if (a <= 0 || x < 0) {\n+            return Double.NaN;\n+        }\n+        if (x == 0) {\n+            return 0.0;\n+        }\n+        if (x > 1 && x > a) {\n+            return 1.0 - regularizedGammaComplement(a, x);\n+        }\n+        double sum = 1.0 / a;\n+        double term = sum;\n+        while (Math.abs(term / sum) > 1e-15) {\n+            term *= x / (a + sum);\n+            sum += term;\n+        }\n+        return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n+    }\n+    \n+    public static double regularizedGammaComplement(double a, double x) {\n+        if (Double.isNaN(a) || Double.isNaN(x)) {\n+            return Double.NaN;\n+        }\n+        if (a <= 0 || x < 0) {\n+            return Double.NaN;\n+        }\n+        if (x == 0) {\n+            return 1.0;\n+        }\n+        if (x < 1 && x < a) {\n+            return 1.0 - regularizedGamma(a, x);\n+        }\n+        double gln = Gamma.logGamma(a);\n+        double ax = a * Math.log(x) - x - gln;\n+        if (ax < -709.78271289338399) {\n+            return x < a ? 1.0 : 0.0;\n+        }\n+        double res = Math.exp(ax);\n+        double y = 1.0 - a;\n+        double z = x + y + 1.0;\n+        double c = 0.0;\n+        double pkm2 = 1.0;\n+        double qkm2 = x;\n+        double pkm1 = x + 1.0;\n+        double qkm1 = z * x;\n+        double ans = pkm1 / qkm1;\n+        double error;\n+        do {\n+            c += 1.0;\n+            y += 1.0;\n+            z += 2.0;\n+            double yc = y * c;\n+            double pk = pkm1 * z - pkm2 * yc;\n+            double qk = qkm1 * z - qkm2 * yc;\n+            if (qk != 0) {\n+                double r = pk / qk;\n+                error = Math.abs((ans - r) / r);\n+                ans = r;\n+            } else {\n+                error = 1.0;\n+            }\n+            pkm2 = pkm1;\n+            pkm1 = pk;\n+            qkm2 = qkm1;\n+            qkm1 = qk;\n+            if (Math.abs(pk) > 1e306) {\n+                pkm2 *= 1e-306;\n+                pkm1 *= 1e-306;\n+                qkm2 *= 1e-306;\n+                qkm1 *= 1e-306;\n+            }\n+        } while (error > 1e-15);\n+        return 1.0 - (res * ans);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}