{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n\n    boolean yearSet = false;\n    int year = iDefaultYear;\n    DurationField months = DurationFieldType.months().getField(iChrono);\n    DurationField days = DurationFieldType.days().getField(iChrono);\n\n    for (int i = 0; i < count; i++) {\n        DateTimeField field = savedFields[i].iField;\n        DurationField durationField = field.getDurationField();\n        if (!yearSet) {\n            if (durationField.getType() == DurationFieldType.years()) {\n                year = savedFields[i].iValue;\n                yearSet = true;\n            } else if (compareReverse(durationField, months) >= 0 && compareReverse(durationField, days) <= 0) {\n                yearSet = true;\n            }\n        }\n        long newMillis = savedFields[i].set(iMillis, resetFields);\n        if (newMillis != iMillis) {\n            iMillis = newMillis;\n            if (durationField.getType() == DurationFieldType.years()) {\n                year = savedFields[i].iValue;\n            } else if (!yearSet && (compareReverse(durationField, months) >= 0 && compareReverse(durationField, days) <= 0)) {\n                yearSet = true;\n            }\n        }\n    }\n    if (yearSet) {\n        saveField(DateTimeFieldType.year(), year);\n    }\n\n    if (iZone == null) {\n        iMillis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(iMillis);\n        iMillis -= offset;\n        if (offset != iZone.getOffset(iMillis)) {\n            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    return iMillis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..bfb837eb 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,60 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+\n+    boolean yearSet = false;\n+    int year = iDefaultYear;\n+    DurationField months = DurationFieldType.months().getField(iChrono);\n+    DurationField days = DurationFieldType.days().getField(iChrono);\n+\n+    for (int i = 0; i < count; i++) {\n+        DateTimeField field = savedFields[i].iField;\n+        DurationField durationField = field.getDurationField();\n+        if (!yearSet) {\n+            if (durationField.getType() == DurationFieldType.years()) {\n+                year = savedFields[i].iValue;\n+                yearSet = true;\n+            } else if (compareReverse(durationField, months) >= 0 && compareReverse(durationField, days) <= 0) {\n+                yearSet = true;\n+            }\n         }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+        long newMillis = savedFields[i].set(iMillis, resetFields);\n+        if (newMillis != iMillis) {\n+            iMillis = newMillis;\n+            if (durationField.getType() == DurationFieldType.years()) {\n+                year = savedFields[i].iValue;\n+            } else if (!yearSet && (compareReverse(durationField, months) >= 0 && compareReverse(durationField, days) <= 0)) {\n+                yearSet = true;\n             }\n         }\n+    }\n+    if (yearSet) {\n+        saveField(DateTimeFieldType.year(), year);\n+    }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n+    if (iZone == null) {\n+        iMillis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(iMillis);\n+        iMillis -= offset;\n+        if (offset != iZone.getOffset(iMillis)) {\n+            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n             if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n-            }\n-            throw e;\n-        }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+    return iMillis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot assign a value to final variable iMillis",
    "test_result": "ERROR"
}