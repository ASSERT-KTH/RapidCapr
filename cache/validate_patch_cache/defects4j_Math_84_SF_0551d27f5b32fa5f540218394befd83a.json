{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) { // changed this line\n                    // accept the expanded simplex\n                    simplex = expand(original, comparator, gamma);\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n            } else {\n                // Perform a contraction\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted;\n                } else {\n                    // Perform a shrink\n                    simplex = shrink(original, comparator, sigma);\n                }\n            }\n\n            if (checker != null) {\n                if (checker.converged(getIterations(), original, simplex)) {\n                    return;\n                }\n            }\n        }\n\n    }\n\n    private RealPointValuePair[] expand(final RealPointValuePair[] original,\n                                         final Comparator<RealPointValuePair> comparator,\n                                         final double gamma) throws FunctionEvaluationException {\n\n        final RealPointValuePair best = original[0];\n        final int n = original.length;\n        final double[] xSmallest = original[n - 1].getPointRef();\n        final double[] xR = best.getPointRef();\n        final double[] xNew = new double[n];\n\n        for (int j = 0; j < n - 1; j++) {\n            xNew[j] = xR[j] + gamma * (xR[j] - xSmallest[j]);\n        }\n        xNew[n - 1] = Double.NaN; // mark the expanded point as not evaluated yet\n        final RealPointValuePair reflected = new RealPointValuePair(xNew, Double.NaN);\n        return insert0(reflected, original, comparator);\n    }\n\n    private RealPointValuePair[] shrink(final RealPointValuePair[] original,\n                                          final Comparator<RealPointValuePair> comparator,\n                                          final double sigma) throws FunctionEvaluationException {\n\n        final RealPointValuePair best = original[0];\n        final int n = original.length;\n        final double[] xBest = best.getPoint();\n        final RealPointValuePair[] out = new RealPointValuePair[n];\n        out[0] = best;\n        for (int i = 1; i < n; i++) {\n            final RealPointValuePair p = original[i];\n            final double[] x = p.getPointRef();\n            final double[] xNew = new double[n];\n            for (int j = 0; j < n - 1; j++) {\n                xNew[j] = xBest[j] + sigma * (x[j] - xBest[j]);\n            }\n            xNew[n - 1] = Double.NaN; // mark the shrunk point as not evaluated yet\n            out[i] = new RealPointValuePair(xNew, Double.NaN);\n        }\n        return out;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..f08dd8a0d 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -59,7 +59,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     /** {@inheritDoc} */\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n@@ -76,26 +76,73 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                if (comparator.compare(expanded, reflected) < 0) { // changed this line\n+                    // accept the expanded simplex\n+                    simplex = expand(original, comparator, gamma);\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n+            } else {\n+                // Perform a contraction\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contracted;\n+                } else {\n+                    // Perform a shrink\n+                    simplex = shrink(original, comparator, sigma);\n+                }\n+            }\n \n+            if (checker != null) {\n+                if (checker.converged(getIterations(), original, simplex)) {\n+                    return;\n+                }\n             }\n+        }\n+\n+    }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+    private RealPointValuePair[] expand(final RealPointValuePair[] original,\n+                                         final Comparator<RealPointValuePair> comparator,\n+                                         final double gamma) throws FunctionEvaluationException {\n \n-            // check convergence\n-                return;\n-            }\n+        final RealPointValuePair best = original[0];\n+        final int n = original.length;\n+        final double[] xSmallest = original[n - 1].getPointRef();\n+        final double[] xR = best.getPointRef();\n+        final double[] xNew = new double[n];\n \n+        for (int j = 0; j < n - 1; j++) {\n+            xNew[j] = xR[j] + gamma * (xR[j] - xSmallest[j]);\n         }\n+        xNew[n - 1] = Double.NaN; // mark the expanded point as not evaluated yet\n+        final RealPointValuePair reflected = new RealPointValuePair(xNew, Double.NaN);\n+        return insert0(reflected, original, comparator);\n+    }\n \n+    private RealPointValuePair[] shrink(final RealPointValuePair[] original,\n+                                          final Comparator<RealPointValuePair> comparator,\n+                                          final double sigma) throws FunctionEvaluationException {\n+\n+        final RealPointValuePair best = original[0];\n+        final int n = original.length;\n+        final double[] xBest = best.getPoint();\n+        final RealPointValuePair[] out = new RealPointValuePair[n];\n+        out[0] = best;\n+        for (int i = 1; i < n; i++) {\n+            final RealPointValuePair p = original[i];\n+            final double[] x = p.getPointRef();\n+            final double[] xNew = new double[n];\n+            for (int j = 0; j < n - 1; j++) {\n+                xNew[j] = xBest[j] + sigma * (x[j] - xBest[j]);\n+            }\n+            xNew[n - 1] = Double.NaN; // mark the shrunk point as not evaluated yet\n+            out[i] = new RealPointValuePair(xNew, Double.NaN);\n+        }\n+        return out;\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}