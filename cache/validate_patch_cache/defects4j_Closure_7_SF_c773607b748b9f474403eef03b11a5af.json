{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n  List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n  for (DiGraphEdge<Node, Branch> edge : outEdges) {\n    if (edge.getValue() == Branch.ON_EX) {\n      return true;\n    } else if (edge.getValue() == Branch.UNCOND) {\n      return hasExceptionHandler(edge.getDestination());\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0afabc8a..4ba34f3c 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -607,15 +607,17 @@ public abstract class ChainableReverseAbstractInterpreter\n     }\n \n     @Override\n-    public JSType caseObjectType(ObjectType type) {\n-      if (value.equals(\"function\")) {\n-        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n-          // Objects are restricted to \"Function\", subtypes are left\n-          // Only filter out subtypes of \"function\"\n-      }\n-      return matchesExpectation(\"object\") ? type : null;\n+private boolean hasExceptionHandler(Node cfgNode) {\n+  List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n+  for (DiGraphEdge<Node, Branch> edge : outEdges) {\n+    if (edge.getValue() == Branch.ON_EX) {\n+      return true;\n+    } else if (edge.getValue() == Branch.UNCOND) {\n+      return hasExceptionHandler(edge.getDestination());\n     }\n+  }\n+  return false;\n+}\n \n     @Override\n     public JSType caseStringType() {",
    "result_reason": "error: ChainableReverseAbstractInterpreter.RestrictByOneTypeOfResultVisitor is not abstract and does not override abstract method caseObjectType(ObjectType) in Visitor",
    "test_result": "ERROR"
}