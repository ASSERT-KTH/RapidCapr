{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n\n    // Compute the initial instant local millis and the initial zone offset\n    long inputMillis = instant.getMillis();\n    long initialMillis = inputMillis + chrono.getZone().getOffset(inputMillis);\n\n    // Create a parser bucket with the initial state\n    int initialYear = chrono.year().get(initialMillis);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(initialMillis, chrono, iLocale,\n            iPivotYear, initialYear);\n\n    // Parse the input text\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // If parsing succeeded, use the bucket to update the instant\n    if (newPos >= 0) {\n        long instantMillis = bucket.computeMillis(false, text);\n        validateParsedInstant(inputMillis, instantMillis);\n\n        DateTimeZone parsedZone = null;\n        if (bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        } else if (bucket.getZone() != null) {\n            parsedZone = bucket.getZone();\n        }\n\n        if (parsedZone != null) {\n            if (instantMillis != initialMillis) {\n                throw new IllegalArgumentException(\"Parsed input cannot be resolved to a consistent time: \" + text);\n            }\n            chrono = chrono.withZone(parsedZone);\n        } else if (chrono != bucket.getChronology()) {\n            chrono = bucket.getChronology();\n            long newMillis = chrono.getDateTimeMillis(\n                    bucket.getDateTime(), bucket.getZone(), inputMillis);\n            instantMillis = newMillis + chrono.getZone().getOffset(newMillis);\n            validateParsedInstant(inputMillis, instantMillis);\n        }\n\n        instant.setMillis(instantMillis);\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n    }\n\n    return newPos;\n}\n\nprivate void validateParsedInstant(long inputMillis, long parsedMillis) {\n    // Check that parsed instant can be aligned with the input instant\n    long diffMillis = inputMillis - parsedMillis;\n    if (Math.abs(diffMillis) > 86400000L) {\n        throw new IllegalArgumentException(\"Parsed input cannot be resolved to a consistent time\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..7d0e3c5d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,70 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+\n+    // Compute the initial instant local millis and the initial zone offset\n+    long inputMillis = instant.getMillis();\n+    long initialMillis = inputMillis + chrono.getZone().getOffset(inputMillis);\n+\n+    // Create a parser bucket with the initial state\n+    int initialYear = chrono.year().get(initialMillis);\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(initialMillis, chrono, iLocale,\n+            iPivotYear, initialYear);\n+\n+    // Parse the input text\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    // If parsing succeeded, use the bucket to update the instant\n+    if (newPos >= 0) {\n+        long instantMillis = bucket.computeMillis(false, text);\n+        validateParsedInstant(inputMillis, instantMillis);\n+\n+        DateTimeZone parsedZone = null;\n+        if (bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+            parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+            parsedZone = bucket.getZone();\n+        }\n+\n+        if (parsedZone != null) {\n+            if (instantMillis != initialMillis) {\n+                throw new IllegalArgumentException(\"Parsed input cannot be resolved to a consistent time: \" + text);\n+            }\n+            chrono = chrono.withZone(parsedZone);\n+        } else if (chrono != bucket.getChronology()) {\n+            chrono = bucket.getChronology();\n+            long newMillis = chrono.getDateTimeMillis(\n+                    bucket.getDateTime(), bucket.getZone(), inputMillis);\n+            instantMillis = newMillis + chrono.getZone().getOffset(newMillis);\n+            validateParsedInstant(inputMillis, instantMillis);\n         }\n+\n+        instant.setMillis(instantMillis);\n         instant.setChronology(chrono);\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n-        return newPos;\n     }\n \n+    return newPos;\n+}\n+\n+private void validateParsedInstant(long inputMillis, long parsedMillis) {\n+    // Check that parsed instant can be aligned with the input instant\n+    long diffMillis = inputMillis - parsedMillis;\n+    if (Math.abs(diffMillis) > 86400000L) {\n+        throw new IllegalArgumentException(\"Parsed input cannot be resolved to a consistent time\");\n+    }\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}