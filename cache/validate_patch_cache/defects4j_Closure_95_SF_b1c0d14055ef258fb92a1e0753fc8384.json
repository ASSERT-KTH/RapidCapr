{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n    String variableName;\n    Node slotDeclNode;\n    if (NodeUtil.isNameDeclaration(parent)) {\n      variableName = n.getString();\n      slotDeclNode = n;\n    } else if (n.isFunction()) {\n      variableName = n.getFirstChild().getString();\n      slotDeclNode = n.getFirstChild();\n    } else {\n      return;\n    }\n\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(slotDeclNode);\n    boolean isConstant = info != null && info.isConstant();\n    boolean isGlobalVar =\n        !NodeUtil.isLocalName(slotDeclNode) && !scope.isDeclared(variableName, true);\n\n    if (isGlobalVar) {\n      ObjectType globalThis =\n          typeRegistry.getOrCreateObjectType(JSTypeNative.GLOBAL_THIS, scope);\n      if (globalThis.hasProperty(variableName)) {\n        validator.expectRedeclaration(\n            sourceName, slotDeclNode, globalThis.getOwnPropertyDefinition(variableName));\n        return;\n      }\n      Var globalVar = scope.getGlobalScope().getVar(variableName);\n      if (globalVar != null) {\n        validator.expectRedeclaration(\n            sourceName, slotDeclNode, globalVar.getNameNode());\n        return;\n      }\n      if (!inferred) {\n        setDeferredType(slotDeclNode, type);\n        return;\n      }\n      scope.declare(variableName, slotDeclNode,\n          inferred ? unknownType : type, compiler.getInput(sourceName), inferred);\n      Preconditions.checkNotNull(globalThis);\n      globalThis.defineDeclaredProperty(\n          variableName, inferred ? unknownType : type, false);\n      return;\n    }\n\n    Var var = scope.getVar(variableName);\n    if (var == null) {\n      Var newVar = scope.declare(\n          variableName, slotDeclNode, inferred ? unknownType : type,\n          compiler.getInput(sourceName), inferred || isConstant);\n      if (previousBuilder != null && !inferred\n          && !compiler.getInput(sourceName).isExtern()) {\n        previousBuilder.add(newVar);\n      }\n      if (isConstant && type != null && !type.isPrimitive()) {\n        validator.expectValidEnums(slotDeclNode, type.getDisplayName());\n      }\n    } else if (parent.isFunction()) {\n      if (var.isFormalParam()) {\n        validator.expectUndeclaredFormals(\n            sourceName, slotDeclNode, parent, var, variableName, type);\n        return;\n      }\n      if (var.getParentScope() != scope) {\n        validator.expectGlobalShadow(\n            sourceName, slotDeclNode, var, var.getNameNode().getSourceFileName());\n      }\n    } else if (isGlobalVar) {\n      validator.expectGlobalShadow(\n          sourceName, slotDeclNode, var, var.getNameNode().getSourceFileName());\n    } //\n    else if (var.getNode() == slotDeclNode) {\n      if (!inferred) { // don't overwrite the inferred type\n        if (var.isTypeInferred()) {\n          var.setType(inferred ? unknownType : type);\n        }\n      }\n    } else { // function expression and var declaration with the same name\n      validator.expectRedeclaration(\n          sourceName, slotDeclNode, var.getNameNode());\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..d7f1f2bc 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,87 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+    String variableName;\n+    Node slotDeclNode;\n+    if (NodeUtil.isNameDeclaration(parent)) {\n+      variableName = n.getString();\n+      slotDeclNode = n;\n+    } else if (n.isFunction()) {\n+      variableName = n.getFirstChild().getString();\n+      slotDeclNode = n.getFirstChild();\n+    } else {\n+      return;\n+    }\n+\n+    JSDocInfo info = NodeUtil.getBestJSDocInfo(slotDeclNode);\n+    boolean isConstant = info != null && info.isConstant();\n+    boolean isGlobalVar =\n+        !NodeUtil.isLocalName(slotDeclNode) && !scope.isDeclared(variableName, true);\n+\n+    if (isGlobalVar) {\n+      ObjectType globalThis =\n+          typeRegistry.getOrCreateObjectType(JSTypeNative.GLOBAL_THIS, scope);\n+      if (globalThis.hasProperty(variableName)) {\n+        validator.expectRedeclaration(\n+            sourceName, slotDeclNode, globalThis.getOwnPropertyDefinition(variableName));\n+        return;\n       }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n+      Var globalVar = scope.getGlobalScope().getVar(variableName);\n+      if (globalVar != null) {\n+        validator.expectRedeclaration(\n+            sourceName, slotDeclNode, globalVar.getNameNode());\n+        return;\n+      }\n+      if (!inferred) {\n+        setDeferredType(slotDeclNode, type);\n+        return;\n+      }\n+      scope.declare(variableName, slotDeclNode,\n+          inferred ? unknownType : type, compiler.getInput(sourceName), inferred);\n+      Preconditions.checkNotNull(globalThis);\n+      globalThis.defineDeclaredProperty(\n+          variableName, inferred ? unknownType : type, false);\n+      return;\n+    }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n+    Var var = scope.getVar(variableName);\n+    if (var == null) {\n+      Var newVar = scope.declare(\n+          variableName, slotDeclNode, inferred ? unknownType : type,\n+          compiler.getInput(sourceName), inferred || isConstant);\n+      if (previousBuilder != null && !inferred\n+          && !compiler.getInput(sourceName).isExtern()) {\n+        previousBuilder.add(newVar);\n+      }\n+      if (isConstant && type != null && !type.isPrimitive()) {\n+        validator.expectValidEnums(slotDeclNode, type.getDisplayName());\n+      }\n+    } else if (parent.isFunction()) {\n+      if (var.isFormalParam()) {\n+        validator.expectUndeclaredFormals(\n+            sourceName, slotDeclNode, parent, var, variableName, type);\n+        return;\n+      }\n+      if (var.getParentScope() != scope) {\n+        validator.expectGlobalShadow(\n+            sourceName, slotDeclNode, var, var.getNameNode().getSourceFileName());\n+      }\n+    } else if (isGlobalVar) {\n+      validator.expectGlobalShadow(\n+          sourceName, slotDeclNode, var, var.getNameNode().getSourceFileName());\n+    } //\n+    else if (var.getNode() == slotDeclNode) {\n+      if (!inferred) { // don't overwrite the inferred type\n+        if (var.isTypeInferred()) {\n+          var.setType(inferred ? unknownType : type);\n         }\n       }\n+    } else { // function expression and var declaration with the same name\n+      validator.expectRedeclaration(\n+          sourceName, slotDeclNode, var.getNameNode());\n     }\n+  }\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}