{
    "patch": "              Node lhsTarget = lhs.getFirstChild();\n              while (lhsTarget.isGetProp()) {\n                lhsTarget = lhsTarget.getFirstChild();\n              }\n              if (!mayEffectMutableState(lhsTarget)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..89c9075a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,11 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              Node lhsTarget = lhs.getFirstChild();\n+              while (lhsTarget.isGetProp()) {\n+                lhsTarget = lhsTarget.getFirstChild();\n+              }\n+              if (!mayEffectMutableState(lhsTarget)) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}