{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      Node parent = n.getParent();\n      Token parentType = parent.getToken();\n      boolean isGetProp = parentType == Token.GETPROP;\n      boolean isGetElem = parentType == Token.GETELEM;\n      Node target = isGetProp ? parent.getFirstChild() : parent.getLastChild();\n      boolean allowed = isGetProp || isGetElem;\n\n      if (NodeUtil.isFunctionExpression(target)) {\n        Node grandParent = parent.getParent();\n        if (grandParent != null && grandParent.isCall()) {\n          int paramIndex = NodeUtil.indexOfChild(parent, n);\n          Node thisParam = grandParent.getChildAtIndex(paramIndex - 1);\n          if (!allowed && !isQualifiedName(thisParam)) {\n            report(t, n, INVALID_THIS_TYPE, childType.toString());\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..7f907b26 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      Node parent = n.getParent();\n+      Token parentType = parent.getToken();\n+      boolean isGetProp = parentType == Token.GETPROP;\n+      boolean isGetElem = parentType == Token.GETELEM;\n+      Node target = isGetProp ? parent.getFirstChild() : parent.getLastChild();\n+      boolean allowed = isGetProp || isGetElem;\n+\n+      if (NodeUtil.isFunctionExpression(target)) {\n+        Node grandParent = parent.getParent();\n+        if (grandParent != null && grandParent.isCall()) {\n+          int paramIndex = NodeUtil.indexOfChild(parent, n);\n+          Node thisParam = grandParent.getChildAtIndex(paramIndex - 1);\n+          if (!allowed && !isQualifiedName(thisParam)) {\n+            report(t, n, INVALID_THIS_TYPE, childType.toString());\n+          }\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}