{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) < 0) { \n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the original reflection\n                simplex = new RealPointValuePair[] {reflected};\n            }\n        } else {\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = new RealPointValuePair[] {contracted};\n            } else {\n                // perform a shrink step\n                final RealPointValuePair[] shrinkedSimplex = shrink(original, comparator);\n                simplex = shrinkedSimplex;\n            }\n        }\n\n        // check convergence\n        if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                original[0], simplex[0])) { \n            return;\n        }\n    }\n}\n\nprivate RealPointValuePair[] shrink(final RealPointValuePair[] original,\n                                     final Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair best = original[0];\n\n    final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];\n    shrinkedSimplex[0] = best;\n\n    for (int i = 1; i < shrinkedSimplex.length; i++) {\n        final RealPointValuePair vertex = original[i];\n        final RealPointValuePair newVertex = new RealPointValuePair(\n                average(best.getPointRef(), vertex.getPointRef()),\n                Double.NaN);\n        try {\n            final double newValue = computeObjectiveValue(newVertex.getPoint());\n            shrinkedSimplex[i] = new RealPointValuePair(newVertex.getPoint(), newValue);\n        } catch (final FunctionEvaluationException fee) {\n            shrinkedSimplex[i] = vertex;\n        }\n    }\n\n    Arrays.sort(shrinkedSimplex, comparator);\n    return shrinkedSimplex;\n}\n\nprivate double[] average(final double[] point1, final double[] point2) {\n    final double[] result = new double[point1.length];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = (point1[i] + point2[i]) / 2.0;\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..10ba0968a 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,84 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+\n+    while (true) {\n+\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) < 0) { \n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // accept the original reflection\n+                simplex = new RealPointValuePair[] {reflected};\n             }\n-\n+        } else {\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex = new RealPointValuePair[] {contracted};\n+            } else {\n+                // perform a shrink step\n+                final RealPointValuePair[] shrinkedSimplex = shrink(original, comparator);\n+                simplex = shrinkedSimplex;\n             }\n+        }\n \n+        // check convergence\n+        if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                original[0], simplex[0])) { \n+            return;\n         }\n+    }\n+}\n \n+private RealPointValuePair[] shrink(final RealPointValuePair[] original,\n+                                     final Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair best = original[0];\n+\n+    final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];\n+    shrinkedSimplex[0] = best;\n+\n+    for (int i = 1; i < shrinkedSimplex.length; i++) {\n+        final RealPointValuePair vertex = original[i];\n+        final RealPointValuePair newVertex = new RealPointValuePair(\n+                average(best.getPointRef(), vertex.getPointRef()),\n+                Double.NaN);\n+        try {\n+            final double newValue = computeObjectiveValue(newVertex.getPoint());\n+            shrinkedSimplex[i] = new RealPointValuePair(newVertex.getPoint(), newValue);\n+        } catch (final FunctionEvaluationException fee) {\n+            shrinkedSimplex[i] = vertex;\n+        }\n     }\n \n+    Arrays.sort(shrinkedSimplex, comparator);\n+    return shrinkedSimplex;\n+}\n+\n+private double[] average(final double[] point1, final double[] point2) {\n+    final double[] result = new double[point1.length];\n+    for (int i = 0; i < result.length; i++) {\n+        result[i] = (point1[i] + point2[i]) / 2.0;\n+    }\n+    return result;\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}