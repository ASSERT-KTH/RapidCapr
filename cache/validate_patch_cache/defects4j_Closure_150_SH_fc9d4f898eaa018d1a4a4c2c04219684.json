{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.LP:\n          if (parent.getType() == Token.EXPR_RESULT) {\n            Node maybeCallTarget = parent.getFirstChild();\n            maybeCallTarget = maybeCallTarget.getFirstChild();\n            if (maybeCallTarget.getType() == Token.NAME) {\n              String name = maybeCallTarget.getString();\n              if (currentScope.isLocalVar(name)) {\n                Node objectLiteral = maybeCallTarget.getNext();\n                if (objectLiteral.getType() == Token.OBJECTLIT) {\n                  defineObjectLiteral(objectLiteral, currentScope.getVar(name));\n                }\n              }\n            }\n          }\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..f3454844 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1462,6 +1462,21 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        case Token.LP:\n+          if (parent.getType() == Token.EXPR_RESULT) {\n+            Node maybeCallTarget = parent.getFirstChild();\n+            maybeCallTarget = maybeCallTarget.getFirstChild();\n+            if (maybeCallTarget.getType() == Token.NAME) {\n+              String name = maybeCallTarget.getString();\n+              if (currentScope.isLocalVar(name)) {\n+                Node objectLiteral = maybeCallTarget.getNext();\n+                if (objectLiteral.getType() == Token.OBJECTLIT) {\n+                  defineObjectLiteral(objectLiteral, currentScope.getVar(name));\n+                }\n+              }\n+            }\n+          }\n+          break;\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}