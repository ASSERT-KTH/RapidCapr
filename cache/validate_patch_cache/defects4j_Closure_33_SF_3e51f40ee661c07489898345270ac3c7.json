{
    "patch": "    // We only want to match constraints on anonymous types.\n    if (!constraintObj.isNominalType() && !constraintObj.isFunctionType()) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a non-empty record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({prop: 1});\n    // If the record is empty we don't infer anything since there is no content\n    if (constraintObj.isRecordType() && !constraintObj.getOwnPropertyNames().isEmpty()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    } else if (!constraintObj.isRecordType() && !constraintObj.getOwnPropertyNames().isEmpty()) {\n      // Handle the case where the constraint is not a record, but has properties,\n      // like a function type with properties on the 'this' object.\n      ObjectType protoObj = constraintObj.getImplicitPrototype();\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (protoObj == null || protoObj.getOwnPropertyNames().contains(prop)) {\n          declareProperty(prop, propType.substituteGenerics(getCurrentSubstitution()));",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..5f32c91d 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,19 +552,18 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n+    // We only want to match constraints on anonymous types.\n+    if (!constraintObj.isNominalType() && !constraintObj.isFunctionType()) {\n+      return;\n+    }\n \n-    // Handle the case where the constraint object is a record type.\n+    // Handle the case where the constraint object is a non-empty record type.\n     //\n     // param constraintObj {{prop: (number|undefined)}}\n     // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n+    // f({prop: 1});\n+    // If the record is empty we don't infer anything since there is no content\n+    if (constraintObj.isRecordType() && !constraintObj.getOwnPropertyNames().isEmpty()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n         if (!isPropertyTypeDeclared(prop)) {\n@@ -576,6 +575,12 @@ class PrototypeObjectType extends ObjectType {\n           defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n-    }\n-  }\n+    } else if (!constraintObj.isRecordType() && !constraintObj.getOwnPropertyNames().isEmpty()) {\n+      // Handle the case where the constraint is not a record, but has properties,\n+      // like a function type with properties on the 'this' object.\n+      ObjectType protoObj = constraintObj.getImplicitPrototype();\n+      for (String prop : constraintObj.getOwnPropertyNames()) {\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        if (protoObj == null || protoObj.getOwnPropertyNames().contains(prop)) {\n+          declareProperty(prop, propType.substituteGenerics(getCurrentSubstitution()));\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}