{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n\n    if (type != null) {\n      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        JSType argType = arg.getJSType();\n        if (argType.isUnknownType()) {\n          argType = getNativeType(UNKNOWN_TYPE);\n        }\n        JSDocInfo info = arg.getJSDocInfo();\n        String propName = null;\n        if (info != null && info.hasType()) {\n          propName = info.getType().toString();\n        }\n        JSType declaredType = null;\n        if (propName != null && type.hasProperty(propName)) {\n          declaredType = type.getPropertyType(propName);\n        }\n        if (declaredType == null) {\n          declaredType = getNativeType(UNKNOWN_TYPE);\n        }\n        JSType inferredType = declaredType.getGreatestClosure(argType);\n        type = type.withProperty(propName, inferredType);\n      }\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..f7d16407 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,11 +1032,11 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n+\n     JSType type = null;\n     if (constructorType != null) {\n       constructorType = constructorType.restrictByNotNullOrUndefined();\n@@ -1056,8 +1056,28 @@ class TypeInference\n       }\n     }\n     n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+\n+    if (type != null) {\n+      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+        JSType argType = arg.getJSType();\n+        if (argType.isUnknownType()) {\n+          argType = getNativeType(UNKNOWN_TYPE);\n+        }\n+        JSDocInfo info = arg.getJSDocInfo();\n+        String propName = null;\n+        if (info != null && info.hasType()) {\n+          propName = info.getType().toString();\n+        }\n+        JSType declaredType = null;\n+        if (propName != null && type.hasProperty(propName)) {\n+          declaredType = type.getPropertyType(propName);\n+        }\n+        if (declaredType == null) {\n+          declaredType = getNativeType(UNKNOWN_TYPE);\n+        }\n+        JSType inferredType = declaredType.getGreatestClosure(argType);\n+        type = type.withProperty(propName, inferredType);\n+      }\n     }\n     return scope;\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}