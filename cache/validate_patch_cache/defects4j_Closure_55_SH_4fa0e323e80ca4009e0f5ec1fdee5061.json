{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    if (n.getType() != Token.FUNCTION) {\n      return false;\n    }\n    Node parent = n.getParent();\n    if (parent.getType() == Token.CALL || parent.getType() == Token.TAGGED_TEMPLATELIT) {\n      return false;\n    }\n    if (parent.getType() == Token.NEW && parent.getFirstChild() == n) {\n      return false;\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..f8b86389 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,19 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    if (n.getType() != Token.FUNCTION) {\n+      return false;\n+    }\n+    Node parent = n.getParent();\n+    if (parent.getType() == Token.CALL || parent.getType() == Token.TAGGED_TEMPLATELIT) {\n+      return false;\n+    }\n+    if (parent.getType() == Token.NEW && parent.getFirstChild() == n) {\n+      return false;\n+    }\n+    return true;\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}