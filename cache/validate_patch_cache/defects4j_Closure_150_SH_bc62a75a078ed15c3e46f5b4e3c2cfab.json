{
    "patch": "if (NodeUtil.isStatement(n) || parent == null) {\n    attachLiteralTypes(n);\n    switch (n.getType()) {\n        case Token.FUNCTION:\n            Node firstChild = n.getFirstChild();\n            boolean isAnonymousFunction = NodeUtil.isFunctionExpression(n);\n            if (isAnonymousFunction) {\n                boolean isDeclaration = parent != null && (parent.getType() == Token.VAR || parent.getType() == Token.EXPR_RESULT);\n                boolean isNested = parent != null && parent.getParent() != null && parent.getParent().getType() == Token.FUNCTION;\n\n                if (isDeclaration || isNested) {\n                    defineDeclaredFunction(n, parent);\n                    break;\n                }\n            } else {\n                if (parent != null && parent.getType() == Token.NAME) {\n                    return;\n                }\n            }\n            defineDeclaredFunction(n, parent);\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n        default:\n            break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..26d205af 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,37 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+if (NodeUtil.isStatement(n) || parent == null) {\n+    attachLiteralTypes(n);\n+    switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+            Node firstChild = n.getFirstChild();\n+            boolean isAnonymousFunction = NodeUtil.isFunctionExpression(n);\n+            if (isAnonymousFunction) {\n+                boolean isDeclaration = parent != null && (parent.getType() == Token.VAR || parent.getType() == Token.EXPR_RESULT);\n+                boolean isNested = parent != null && parent.getParent() != null && parent.getParent().getType() == Token.FUNCTION;\n+\n+                if (isDeclaration || isNested) {\n+                    defineDeclaredFunction(n, parent);\n+                    break;\n+                }\n+            } else {\n+                if (parent != null && parent.getType() == Token.NAME) {\n+                    return;\n+                }\n+            }\n+            defineDeclaredFunction(n, parent);\n+            break;\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            defineCatch(n, parent);\n+            break;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineVar(n, parent);\n+            break;\n+        default:\n+            break;\n+    }\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}