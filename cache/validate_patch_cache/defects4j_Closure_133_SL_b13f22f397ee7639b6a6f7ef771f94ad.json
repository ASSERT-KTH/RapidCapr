{
    "patch": "private String getRemainingJSDocLine() {\n    this.compilerOptions.setLanguageOut(ECMASCRIPT5);\n    String result;\n    try {\n        result = stream.getRemainingJSDocLine().trim();\n    } catch (IllegalStateException e) {\n        // If there is an exception, return an empty string\n        result = \"\";\n    }\n    if (result == null || result.isEmpty()) {\n        return null;\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..95cdaf0e 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,20 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    this.compilerOptions.setLanguageOut(ECMASCRIPT5);\n+    String result;\n+    try {\n+        result = stream.getRemainingJSDocLine().trim();\n+    } catch (IllegalStateException e) {\n+        // If there is an exception, return an empty string\n+        result = \"\";\n+    }\n+    if (result == null || result.isEmpty()) {\n+        return null;\n+    }\n+    return result;\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}