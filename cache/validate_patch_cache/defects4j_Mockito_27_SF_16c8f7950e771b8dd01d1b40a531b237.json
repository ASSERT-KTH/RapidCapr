{
    "patch": "public <T> void resetMock(T mock) {\n    if (mock == null) {\n        return;\n    }\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    if (!(oldMockHandler instanceof MockHandler)) {\n        return;\n    }\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    if (mock instanceof Factory) {\n        int callbackCount = ((Factory) mock).getCallbacks().length;\n        for (int i = 0; i < callbackCount; i++) {\n            Object callback = ((Factory) mock).getCallback(i);\n            if (callback instanceof MethodInterceptorFilter) {\n                ((Factory) mock).setCallback(i, newFilter);\n                return;\n            }\n        }   \n        ((Factory) mock).setCallback(0, newFilter);\n    } else {\n        Mockito.mockingDetails(mock).getInvocationListeners().clear();\n        Mockito.mockingDetails(mock).getStubbingLookupListeners().clear();\n        Mockito.mockingDetails(mock).getMockCreationListeners().clear();\n        Mockito.mockingDetails(mock).getVerificationStartedListeners().clear();\n        Mockito.mockingDetails(mock).getInvocations(mockito.mock.MockVerificationModeImpl.any()).clear();\n        Mockito.mockingDetails(mock).getConfiguredAnswer().clear();\n        Mockito.mockingDetails(mock).getAnswersForStubbing().clear();\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..1d54c9f28 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,37 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (mock == null) {\n+        return;\n+    }\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    if (!(oldMockHandler instanceof MockHandler)) {\n+        return;\n+    }\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    if (mock instanceof Factory) {\n+        int callbackCount = ((Factory) mock).getCallbacks().length;\n+        for (int i = 0; i < callbackCount; i++) {\n+            Object callback = ((Factory) mock).getCallback(i);\n+            if (callback instanceof MethodInterceptorFilter) {\n+                ((Factory) mock).setCallback(i, newFilter);\n+                return;\n+            }\n+        }   \n+        ((Factory) mock).setCallback(0, newFilter);\n+    } else {\n+        Mockito.mockingDetails(mock).getInvocationListeners().clear();\n+        Mockito.mockingDetails(mock).getStubbingLookupListeners().clear();\n+        Mockito.mockingDetails(mock).getMockCreationListeners().clear();\n+        Mockito.mockingDetails(mock).getVerificationStartedListeners().clear();\n+        Mockito.mockingDetails(mock).getInvocations(mockito.mock.MockVerificationModeImpl.any()).clear();\n+        Mockito.mockingDetails(mock).getConfiguredAnswer().clear();\n+        Mockito.mockingDetails(mock).getAnswersForStubbing().clear();\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}