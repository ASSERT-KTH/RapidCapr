{
    "patch": "        if (ref.isVarDeclaration()) {\n          return true;\n        }\n        for (int i = ref.getIndex() - 1; i >= 0; i--) {\n          if (references.get(i).isVarDeclaration()) {\n            return false;\n          }\n        }\n        return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..dee5087a 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (ref.isVarDeclaration()) {\n+          return true;\n+        }\n+        for (int i = ref.getIndex() - 1; i >= 0; i--) {\n+          if (references.get(i).isVarDeclaration()) {\n+            return false;\n+          }\n+        }\n+        return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}