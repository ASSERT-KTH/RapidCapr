{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null) {\n        return null;\n    }\n    final int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final char ch0 = str.charAt(0);\n    final char ch1 = str.charAt(1);\n    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 2) {\n        return new Locale(str);\n    }\n\n    String language = \"\";\n    String country = \"\";\n    String variant = \"\";\n    int idx = 0;\n    if (str.charAt(2) == '_') {\n        language = str.substring(0, 2);\n        idx = 3;\n    } else {\n        if (len >= 5 && str.charAt(2) == '-' && str.charAt(3) == '-') {\n            language = str.substring(0, 2);\n            idx = 4;\n        }\n        if (idx == 0) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    }\n\n    int underIdx = 0;\n    for (int i = idx; i < len; i++) {\n        char ch = str.charAt(i);\n        if (ch == '_') {\n            underIdx = i;\n            break;\n        }\n        if (ch == '-') {\n            if (variant.isEmpty() && country.isEmpty()) {\n                country = str.substring(idx, i);\n            } else {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            idx = i + 1;\n        }\n    }\n\n    if (underIdx == 0) {\n        if (variant.isEmpty()) {\n            if (country.isEmpty()) {\n                country = str.substring(idx);\n            } else {\n                variant = str.substring(idx);\n            }\n        } else {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    } else {\n        if (country.isEmpty()) {\n            country = str.substring(idx, underIdx);\n        }\n        variant = str.substring(underIdx + 1);\n    }\n\n    return new Locale(language, country, variant);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..ea738fec 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,77 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(final String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    final int len = str.length();\n+    if (len < 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    final char ch0 = str.charAt(0);\n+    final char ch1 = str.charAt(1);\n+    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (len == 2) {\n+        return new Locale(str);\n+    }\n+\n+    String language = \"\";\n+    String country = \"\";\n+    String variant = \"\";\n+    int idx = 0;\n+    if (str.charAt(2) == '_') {\n+        language = str.substring(0, 2);\n+        idx = 3;\n+    } else {\n+        if (len >= 5 && str.charAt(2) == '-' && str.charAt(3) == '-') {\n+            language = str.substring(0, 2);\n+            idx = 4;\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n+        if (idx == 0) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n+    }\n+\n+    int underIdx = 0;\n+    for (int i = idx; i < len; i++) {\n+        char ch = str.charAt(i);\n+        if (ch == '_') {\n+            underIdx = i;\n+            break;\n+        }\n+        if (ch == '-') {\n+            if (variant.isEmpty() && country.isEmpty()) {\n+                country = str.substring(idx, i);\n+            } else {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            idx = i + 1;\n+        }\n+    }\n+\n+    if (underIdx == 0) {\n+        if (variant.isEmpty()) {\n+            if (country.isEmpty()) {\n+                country = str.substring(idx);\n+            } else {\n+                variant = str.substring(idx);\n             }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+    } else {\n+        if (country.isEmpty()) {\n+            country = str.substring(idx, underIdx);\n+        }\n+        variant = str.substring(underIdx + 1);\n     }\n \n+    return new Locale(language, country, variant);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: _GB",
    "test_result": "FAIL"
}