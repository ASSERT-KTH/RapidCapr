{
    "patch": "private void replaceAssignmentExpression(Var v, Reference ref,\n                                         Map<String, String> varmap) {\n  Node parent = ref.getParent();\n  Node assignedValue = ref.getAssignedValue();\n  int parentType = parent.getType();\n  if (parentType == Token.VAR) {\n    parentType = parent.getParent().getType();\n  }\n  if (assignedValue == null) {\n    if (parentType == Token.ASSIGN || parentType == Token.EXPR_RESULT) {\n      parent.replaceChild(ref.getNode(), NodeUtil.newUndefinedNode(parent));\n    }\n    return;\n  }\n  blacklistVarReferencesInTree(assignedValue, v.scope);\n  Preconditions.checkState(assignedValue.getType() == Token.OBJECTLIT);\n  List<Node> nodes = Lists.newArrayList();\n  for (Node key = assignedValue.getFirstChild(); key != null;\n       key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(\n        new Node(Token.ASSIGN,\n                 Node.newString(Token.NAME, varmap.get(var)), value));\n  }\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node node : nodes) {\n    all.remove(node.getFirstChild().getString());\n  }\n  for (String var : all) {\n    nodes.add(\n        new Node(Token.ASSIGN,\n                 Node.newString(Token.NAME, varmap.get(var)),\n                 NodeUtil.newUndefinedNode(null)));\n  }\n  // All assignments evaluate to true, so make sure that the\n  // expr statement evaluates to true in case it matters.\n  nodes.add(new Node(Token.TRUE));\n  nodes = Lists.reverse(nodes);\n  Node commaList = new Node(Token.COMMA, null);\n  Node current = commaList;\n  for (Node node : nodes) {\n    Node commaNode = new Node(Token.COMMA, null);\n    commaNode.addChildToFront(node);\n    current.addChildToFront(commaNode);\n    current = commaNode;\n  }\n  Node resultingReplacement = commaList.getFirstChild().getNext();\n  resultingReplacement.srcrefTree(ref.getNode());\n  if (parentType != Token.VAR) {\n    Node grandParent = parent.getParent();\n    grandParent.replaceChild(parent, resultingReplacement);\n  } else {\n    parent.getParent().replaceChild(parent,\n        NodeUtil.newExpr(resultingReplacement));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9061925d..1c65e78a 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -300,64 +300,64 @@ class InlineObjectLiterals implements CompilerPass {\n      * Note that the resulting expression will always evaluate to\n      * true, as would the x = {...} expression.\n      */\n-    private void replaceAssignmentExpression(Var v, Reference ref,\n-                                             Map<String, String> varmap) {\n-      // Compute all of the assignments necessary\n-      List<Node> nodes = Lists.newArrayList();\n-      Node val = ref.getAssignedValue();\n-      blacklistVarReferencesInTree(val, v.scope);\n-      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n-      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n-      for (Node key = val.getFirstChild(); key != null;\n-           key = key.getNext()) {\n-        String var = key.getString();\n-        Node value = key.removeFirstChild();\n-        // TODO(user): Copy type information.\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)), value));\n-        all.remove(var);\n-      }\n-\n-      // TODO(user): Better source information.\n-      for (String var : all) {\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)),\n-                   NodeUtil.newUndefinedNode(null)));\n-      }\n-\n-      Node replacement;\n-        // All assignments evaluate to true, so make sure that the\n-        // expr statement evaluates to true in case it matters.\n-        nodes.add(new Node(Token.TRUE));\n-\n-        // Join these using COMMA.  A COMMA node must have 2 children, so we\n-        // create a tree. In the tree the first child be the COMMA to match\n-        // the parser, otherwise tree equality tests fail.\n-        nodes = Lists.reverse(nodes);\n-        replacement = new Node(Token.COMMA);\n-        Node cur = replacement;\n-        int i;\n-        for (i = 0; i < nodes.size() - 2; i++) {\n-          cur.addChildToFront(nodes.get(i));\n-          Node t = new Node(Token.COMMA);\n-          cur.addChildToFront(t);\n-          cur = t;\n-        }\n-        cur.addChildToFront(nodes.get(i));\n-        cur.addChildToFront(nodes.get(i + 1));\n-\n-      Node replace = ref.getParent();\n-      replacement.copyInformationFromForTree(replace);\n-\n-      if (replace.getType() == Token.VAR) {\n-        replace.getParent().replaceChild(\n-            replace, NodeUtil.newExpr(replacement));\n-      } else {\n-        replace.getParent().replaceChild(replace, replacement);\n-      }\n+private void replaceAssignmentExpression(Var v, Reference ref,\n+                                         Map<String, String> varmap) {\n+  Node parent = ref.getParent();\n+  Node assignedValue = ref.getAssignedValue();\n+  int parentType = parent.getType();\n+  if (parentType == Token.VAR) {\n+    parentType = parent.getParent().getType();\n+  }\n+  if (assignedValue == null) {\n+    if (parentType == Token.ASSIGN || parentType == Token.EXPR_RESULT) {\n+      parent.replaceChild(ref.getNode(), NodeUtil.newUndefinedNode(parent));\n     }\n+    return;\n+  }\n+  blacklistVarReferencesInTree(assignedValue, v.scope);\n+  Preconditions.checkState(assignedValue.getType() == Token.OBJECTLIT);\n+  List<Node> nodes = Lists.newArrayList();\n+  for (Node key = assignedValue.getFirstChild(); key != null;\n+       key = key.getNext()) {\n+    String var = key.getString();\n+    Node value = key.removeFirstChild();\n+    // TODO(user): Copy type information.\n+    nodes.add(\n+        new Node(Token.ASSIGN,\n+                 Node.newString(Token.NAME, varmap.get(var)), value));\n+  }\n+  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n+  for (Node node : nodes) {\n+    all.remove(node.getFirstChild().getString());\n+  }\n+  for (String var : all) {\n+    nodes.add(\n+        new Node(Token.ASSIGN,\n+                 Node.newString(Token.NAME, varmap.get(var)),\n+                 NodeUtil.newUndefinedNode(null)));\n+  }\n+  // All assignments evaluate to true, so make sure that the\n+  // expr statement evaluates to true in case it matters.\n+  nodes.add(new Node(Token.TRUE));\n+  nodes = Lists.reverse(nodes);\n+  Node commaList = new Node(Token.COMMA, null);\n+  Node current = commaList;\n+  for (Node node : nodes) {\n+    Node commaNode = new Node(Token.COMMA, null);\n+    commaNode.addChildToFront(node);\n+    current.addChildToFront(commaNode);\n+    current = commaNode;\n+  }\n+  Node resultingReplacement = commaList.getFirstChild().getNext();\n+  resultingReplacement.srcrefTree(ref.getNode());\n+  if (parentType != Token.VAR) {\n+    Node grandParent = parent.getParent();\n+    grandParent.replaceChild(parent, resultingReplacement);\n+  } else {\n+    parent.getParent().replaceChild(parent,\n+        NodeUtil.newExpr(resultingReplacement));\n+  }\n+}\n \n     /**\n      * Splits up the object literal into individual variables, and",
    "result_reason": "error: reference to Node is ambiguous, both constructor Node(int,Node) in Node and constructor Node(int,Node[]) in Node match",
    "test_result": "ERROR"
}