{
    "patch": "        for (int i = 0; i < count; i++) {\n            try {\n                millis = savedFields[i].set(millis, resetFields);\n            } catch (IllegalArgumentException ex) {\n                if (text != null) {\n                    ex = new IllegalFieldValueException(\n                        savedFields[i].iField.getType(),\n                        savedFields[i].getValue(),\n                        savedFields[i].iField.getRangeDurationField().getMinimumValue(),\n                        savedFields[i].iField.getRangeDurationField().getMaximumValue(),\n                        ex);\n                    ex.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                }\n                throw ex;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..7ed80d72 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,20 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            try {\n+                millis = savedFields[i].set(millis, resetFields);\n+            } catch (IllegalArgumentException ex) {\n+                if (text != null) {\n+                    ex = new IllegalFieldValueException(\n+                        savedFields[i].iField.getType(),\n+                        savedFields[i].getValue(),\n+                        savedFields[i].iField.getRangeDurationField().getMinimumValue(),\n+                        savedFields[i].iField.getRangeDurationField().getMaximumValue(),\n+                        ex);\n+                    ex.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                }\n+                throw ex;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}