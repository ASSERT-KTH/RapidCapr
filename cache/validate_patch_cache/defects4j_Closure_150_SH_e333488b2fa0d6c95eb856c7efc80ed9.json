{
    "patch": "      attachLiteralTypes(n);\n      if (n.getType() == Token.FUNCTION &&\n          !(n.getParent().getType() == Token.ASSIGN &&\n            n.getGrandparent().getType() == Token.EXPR_RESULT)) {\n        defineDeclaredFunction(n, parent);\n        return;\n      }\n      if (n.getType() == Token.WHILE &&\n          n.getParent().getType() == Token.BLOCK &&\n          n.getFirstChild().getType() == Token.TRUE) {\n        controlFlowGraph.mayHaveSideEffects = true;\n      }\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n      switch (n.getType()) {\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.LET:\n        case Token.CONST:\n        case Token.VAR:\n          if (n.getFirstChild() != null) {\n            defineVars(n.getFirstChild(), parent);\n          }\n          break;\n        case Token.OBJECTLIT:\n          traverseObjectLiteral(n);\n          break;\n        case Token.ARRAYLIT:\n          traverseArrayLiteral(n);\n          break;\n        case Token.TRY:\n          traverseTry(n);\n          break;\n        default:\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..52e883b5 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1449,18 +1449,42 @@ final class TypedScopeCreator implements ScopeCreator {\n       }\n \n       attachLiteralTypes(n);\n+      if (n.getType() == Token.FUNCTION &&\n+          !(n.getParent().getType() == Token.ASSIGN &&\n+            n.getGrandparent().getType() == Token.EXPR_RESULT)) {\n+        defineDeclaredFunction(n, parent);\n+        return;\n+      }\n+      if (n.getType() == Token.WHILE &&\n+          n.getParent().getType() == Token.BLOCK &&\n+          n.getFirstChild().getType() == Token.TRUE) {\n+        controlFlowGraph.mayHaveSideEffects = true;\n+      }\n+      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+        handleFunctionInputs(parent);\n+        return;\n+      }\n       switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n+        case Token.LET:\n+        case Token.CONST:\n         case Token.VAR:\n-          defineVar(n, parent);\n+          if (n.getFirstChild() != null) {\n+            defineVars(n.getFirstChild(), parent);\n+          }\n+          break;\n+        case Token.OBJECTLIT:\n+          traverseObjectLiteral(n);\n+          break;\n+        case Token.ARRAYLIT:\n+          traverseArrayLiteral(n);\n+          break;\n+        case Token.TRY:\n+          traverseTry(n);\n+          break;\n+        default:\n           break;\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}