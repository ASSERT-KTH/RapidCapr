{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    boolean supportsYears = type.isSupported(DurationFieldType.years());\n    boolean supportsMonths = type.isSupported(DurationFieldType.months());\n\n    int totalMonths = 0;\n    if (supportsYears) {\n        totalMonths += getYears() * 12;\n    }\n    if (supportsMonths) {\n        totalMonths += getMonths();\n        totalMonths += getWeeks() * 4;\n        totalMonths += getDays() / 30;\n    }\n\n    long millis = (((long)totalMonths) * ((long) DateTimeConstants.MILLIS_PER_MONTH)) + getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    if (supportsYears) {\n        result = result.withYears(getYears());\n    }\n    if (supportsMonths) {\n        result = result.withMonths(getMonths());\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..4d211930 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,36 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    boolean supportsYears = type.isSupported(DurationFieldType.years());\n+    boolean supportsMonths = type.isSupported(DurationFieldType.months());\n+\n+    int totalMonths = 0;\n+    if (supportsYears) {\n+        totalMonths += getYears() * 12;\n+    }\n+    if (supportsMonths) {\n+        totalMonths += getMonths();\n+        totalMonths += getWeeks() * 4;\n+        totalMonths += getDays() / 30;\n     }\n \n+    long millis = (((long)totalMonths) * ((long) DateTimeConstants.MILLIS_PER_MONTH)) + getMillis();\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+\n+    if (supportsYears) {\n+        result = result.withYears(getYears());\n+    }\n+    if (supportsMonths) {\n+        result = result.withMonths(getMonths());\n+    }\n+\n+    return result;\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}