{
    "patch": "                final int minOffsetAdjusted = getOffset(instantLocal - 1L);\n                final int maxOffsetAdjusted = offsetAdjusted;\n                if (minOffsetAdjusted != maxOffsetAdjusted) {\n                    final long prevTransition = previousTransition(instantAdjusted);\n                    final long nextTransition = nextTransition(instantAdjusted);\n                    if (prevTransition == instantAdjusted - 1L) {\n                        // ambiguous local time preceeding a gap\n                        final int prevOffset = getOffset(prevTransition);\n                        if (prevOffset == maxOffsetAdjusted &&\n                                nextTransition - instantLocal < maxOffsetAdjusted - prevOffset) {\n                            // choose the lowest offset from the ambiguous time\n                            return prevOffset;\n                        }\n                    } else if (nextTransition == instantAdjusted) {\n                        // ambiguous local time following an overlap\n                        final int nextOffset = getOffset(nextTransition);\n                        if (nextOffset == maxOffsetAdjusted &&\n                                instantLocal - prevTransition <= maxOffsetAdjusted - offsetLocal) {\n                            // choose the lowest offset from the ambiguous time\n                            return maxOffsetAdjusted;\n                        }\n                    }\n                    return minOffsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ff98c0c9 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,29 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                final int minOffsetAdjusted = getOffset(instantLocal - 1L);\n+                final int maxOffsetAdjusted = offsetAdjusted;\n+                if (minOffsetAdjusted != maxOffsetAdjusted) {\n+                    final long prevTransition = previousTransition(instantAdjusted);\n+                    final long nextTransition = nextTransition(instantAdjusted);\n+                    if (prevTransition == instantAdjusted - 1L) {\n+                        // ambiguous local time preceeding a gap\n+                        final int prevOffset = getOffset(prevTransition);\n+                        if (prevOffset == maxOffsetAdjusted &&\n+                                nextTransition - instantLocal < maxOffsetAdjusted - prevOffset) {\n+                            // choose the lowest offset from the ambiguous time\n+                            return prevOffset;\n+                        }\n+                    } else if (nextTransition == instantAdjusted) {\n+                        // ambiguous local time following an overlap\n+                        final int nextOffset = getOffset(nextTransition);\n+                        if (nextOffset == maxOffsetAdjusted &&\n+                                instantLocal - prevTransition <= maxOffsetAdjusted - offsetLocal) {\n+                            // choose the lowest offset from the ambiguous time\n+                            return maxOffsetAdjusted;\n+                        }\n+                    }\n+                    return minOffsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}