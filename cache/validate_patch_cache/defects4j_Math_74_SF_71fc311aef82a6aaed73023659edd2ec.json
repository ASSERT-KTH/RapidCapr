{
    "patch": "public double integrate(final FirstOrderDifferentialEquations equations,\n                        final double t0, final double[] y0,\n                        final double t, final double[] y)\n        throws DerivativeException, IntegratorException {\n\n    sanityChecks(equations, t0, y0, t, y);\n    setEquations(equations);\n    resetEvaluations();\n    final boolean forward = t > t0;\n\n    // create some internal working arrays\n    final int stages = c.length + 1;\n    if (y != y0) {\n        System.arraycopy(y0, 0, y, 0, y0.length);\n    }\n    final double[][] yDotK = new double[stages][y0.length];\n    final double[] yTmp = new double[y0.length];\n\n    // set up an interpolator sharing the integrator arrays\n    AbstractStepInterpolator interpolator;\n    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n        rki.reinitialize(this, yTmp, yDotK, forward);\n        interpolator = rki;\n    } else {\n        interpolator = new DummyStepInterpolator(yTmp, forward);\n    }\n    interpolator.storeTime(t0);\n\n    // set up integration control objects\n    stepStart         = t0;\n    double hNew       = 0;\n    boolean firstTime = true;\n    for (StepHandler handler : stepHandlers) {\n        handler.reset();\n    }\n    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n    boolean lastStep = false;\n\n    // main integration loop\n    while (!lastStep) {\n\n        interpolator.shift();\n\n        double error = 0;\n        boolean loop  = true;\n        boolean reject = false;\n        double n = 1;\n        while (loop) {\n\n            // First stage\n            if (firstTime || !fsal) {\n                computeDerivatives(stepStart, y, yDotK[0]);\n                n = 1;\n            }\n\n            // Try to advance one step\n            if (firstTime) {\n                final double[] scale;\n                if (vecAbsoluteTolerance == null) {\n                    scale = new double[y0.length];\n                    java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n                } else {\n                    scale = vecAbsoluteTolerance;\n                }\n                hNew = initializeStep(equations, forward, getOrder(), scale,\n                                               stepStart, y, yDotK[0], yTmp, yDotK[1]);\n            } else {\n                hNew = interpolator.getCurrentSignedStepsize();\n            }\n\n            stepSize = Math.abs(hNew);\n            if (! forward) {\n                stepSize = -stepSize;\n            }\n\n            final double nextStep = stepStart + stepSize;\n\n            if ((forward && nextStep >= t) || (!forward && nextStep <= t)) {\n                lastStep = true;\n                stepSize = t - stepStart;\n            }\n\n            // Advance one step\n            computeStep(yDotK, forward, yTmp, y);\n\n            // Check error\n            if (filterStep(error, forward, reject) == 0.0) {\n                // This means that we cannot decrease the step anymore\n                throw new DerivativeException(LocalizedFormats.TOO_SMALL_INTEGRATION_INTERVAL,\n                        stepSize);\n            }\n\n            error = errorHandler.getTotalError();\n\n            if (error > 1.0) {\n                // Reject\n                reject = true;\n\n                // Take a new step\n                double minStep = Math.abs(minStep(stepStart));\n                double maxStep = Math.abs(maxStep(stepStart));\n\n                if (minStep >= maxStep) {\n                   throw new DerivativeException(LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION,\n                           minStep, maxStep);\n                }\n\n                double scaleFactor = computeSafetyFactor(error);\n                if (scaleFactor > maxGrowth) {\n                    scaleFactor = maxGrowth;\n                }\n                double newStep = scaleFactor * stepSize;\n\n                if (rejectControl && !firstTime) {\n                    double safety = computeSafetyFactor(error);\n\n                    // Try to estimate the optimal step using extrapolation\n                    if (n > 1) {\n                        double q = Math.pow(safety, 1 / (n - 1));\n                        newStep = stepSize / q;\n                    }\n\n                    if (newStep > maxStep) {\n                        newStep = maxStep;\n                    }\n\n                    if (newStep < minStep) {\n                        newStep = minStep;\n                    }\n                }\n\n                stepSize = newStep;\n\n                if ((forward && (stepStart + stepSize) > t) ||\n                        (!forward && (stepStart + stepSize) < t)) {\n                    stepSize = t - stepStart;\n                }\n\n            } else {\n                // Accept\n                loop = false;\n                firstTime = false;\n\n                if (eventsHandlersManager.evaluateStep(interpolator)) {\n                    stepSize = eventsHandlersManager.getEventTime() - stepStart;\n                    reject = true;\n                } else {\n                    // Update state\n                    System.arraycopy(yTmp, 0, y, 0, y0.length);\n                    eventsHandlersManager.stepAccepted(stepStart, y);\n                    interpolator.storeTime(stepStart + stepSize);\n                }\n            }\n\n        }\n\n        // Update remaining variables\n        stepStart += stepSize;\n\n        if (fsal) {\n            // Save reference derivative for next step\n            System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n        }\n\n        if (eventsHandlersManager.reset(stepStart, y) && ! lastStep) {\n            // if we have rejected the last step, we need to recompute the\n            // derivatives, because their evaluations were computed for the\n            // past (rejected) step, but should have been for the current\n            // accepted step\n            computeDerivatives(stepStart, y, yDotK[0]);\n        }\n\n        if (! lastStep) {\n            // Compute new step size for next step\n            final double scaleFactor = Math.min(maxGrowth,\n                                                Math.max(minReduction,\n                                                        computeSafetyFactor(error)));\n\n            if (error == 0 || error <= 1.0) {\n                stepSize = filterStep(stepSize * scaleFactor, forward, false);\n            } else {\n                if (!rejectControl) {\n                    stepSize = filterStep(stepSize * scaleFactor, forward, true);\n                }\n            }\n\n            // Check last step\n            if ((forward && (stepStart + stepSize) > t) ||\n                    (!forward && (stepStart + stepSize) < t)) {\n                lastStep = true;\n                stepSize = t - stepStart;\n            }\n        }\n\n        // Notify handlers\n        interpolator.storeTime(stepStart);\n        for (StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, lastStep);\n        }\n\n    }\n\n    final double stopTime = stepStart;\n    resetInternalState();\n\n    return stopTime;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 6f3e88358..0dd731c74 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -189,10 +189,10 @@ public abstract class EmbeddedRungeKuttaIntegrator\n \n   /** {@inheritDoc} */\n   @Override\n-  public double integrate(final FirstOrderDifferentialEquations equations,\n-                          final double t0, final double[] y0,\n-                          final double t, final double[] y)\n-  throws DerivativeException, IntegratorException {\n+public double integrate(final FirstOrderDifferentialEquations equations,\n+                        final double t0, final double[] y0,\n+                        final double t, final double[] y)\n+        throws DerivativeException, IntegratorException {\n \n     sanityChecks(equations, t0, y0, t, y);\n     setEquations(equations);\n@@ -202,7 +202,7 @@ public abstract class EmbeddedRungeKuttaIntegrator\n     // create some internal working arrays\n     final int stages = c.length + 1;\n     if (y != y0) {\n-      System.arraycopy(y0, 0, y, 0, y0.length);\n+        System.arraycopy(y0, 0, y, 0, y0.length);\n     }\n     final double[][] yDotK = new double[stages][y0.length];\n     final double[] yTmp = new double[y0.length];\n@@ -210,17 +210,17 @@ public abstract class EmbeddedRungeKuttaIntegrator\n     // set up an interpolator sharing the integrator arrays\n     AbstractStepInterpolator interpolator;\n     if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n-      rki.reinitialize(this, yTmp, yDotK, forward);\n-      interpolator = rki;\n+        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n+        rki.reinitialize(this, yTmp, yDotK, forward);\n+        interpolator = rki;\n     } else {\n-      interpolator = new DummyStepInterpolator(yTmp, forward);\n+        interpolator = new DummyStepInterpolator(yTmp, forward);\n     }\n     interpolator.storeTime(t0);\n \n     // set up integration control objects\n     stepStart         = t0;\n-    double  hNew      = 0;\n+    double hNew       = 0;\n     boolean firstTime = true;\n     for (StepHandler handler : stepHandlers) {\n         handler.reset();\n@@ -231,132 +231,172 @@ public abstract class EmbeddedRungeKuttaIntegrator\n     // main integration loop\n     while (!lastStep) {\n \n-      interpolator.shift();\n+        interpolator.shift();\n \n-      double error = 0;\n-      for (boolean loop = true; loop;) {\n+        double error = 0;\n+        boolean loop  = true;\n+        boolean reject = false;\n+        double n = 1;\n+        while (loop) {\n \n-        if (firstTime || !fsal) {\n-          // first stage\n-          computeDerivatives(stepStart, y, yDotK[0]);\n-        }\n+            // First stage\n+            if (firstTime || !fsal) {\n+                computeDerivatives(stepStart, y, yDotK[0]);\n+                n = 1;\n+            }\n \n-        if (firstTime) {\n-          final double[] scale;\n-          if (vecAbsoluteTolerance == null) {\n-              scale = new double[y0.length];\n-              java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n+            // Try to advance one step\n+            if (firstTime) {\n+                final double[] scale;\n+                if (vecAbsoluteTolerance == null) {\n+                    scale = new double[y0.length];\n+                    java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n+                } else {\n+                    scale = vecAbsoluteTolerance;\n+                }\n+                hNew = initializeStep(equations, forward, getOrder(), scale,\n+                                               stepStart, y, yDotK[0], yTmp, yDotK[1]);\n             } else {\n-              scale = vecAbsoluteTolerance;\n+                hNew = interpolator.getCurrentSignedStepsize();\n             }\n-          hNew = initializeStep(equations, forward, getOrder(), scale,\n-                                stepStart, y, yDotK[0], yTmp, yDotK[1]);\n-          firstTime = false;\n-        }\n \n-        stepSize = hNew;\n+            stepSize = Math.abs(hNew);\n+            if (! forward) {\n+                stepSize = -stepSize;\n+            }\n \n-        // next stages\n-        for (int k = 1; k < stages; ++k) {\n+            final double nextStep = stepStart + stepSize;\n \n-          for (int j = 0; j < y0.length; ++j) {\n-            double sum = a[k-1][0] * yDotK[0][j];\n-            for (int l = 1; l < k; ++l) {\n-              sum += a[k-1][l] * yDotK[l][j];\n+            if ((forward && nextStep >= t) || (!forward && nextStep <= t)) {\n+                lastStep = true;\n+                stepSize = t - stepStart;\n             }\n-            yTmp[j] = y[j] + stepSize * sum;\n-          }\n \n-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n+            // Advance one step\n+            computeStep(yDotK, forward, yTmp, y);\n+\n+            // Check error\n+            if (filterStep(error, forward, reject) == 0.0) {\n+                // This means that we cannot decrease the step anymore\n+                throw new DerivativeException(LocalizedFormats.TOO_SMALL_INTEGRATION_INTERVAL,\n+                        stepSize);\n+            }\n+\n+            error = errorHandler.getTotalError();\n+\n+            if (error > 1.0) {\n+                // Reject\n+                reject = true;\n+\n+                // Take a new step\n+                double minStep = Math.abs(minStep(stepStart));\n+                double maxStep = Math.abs(maxStep(stepStart));\n+\n+                if (minStep >= maxStep) {\n+                   throw new DerivativeException(LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION,\n+                           minStep, maxStep);\n+                }\n+\n+                double scaleFactor = computeSafetyFactor(error);\n+                if (scaleFactor > maxGrowth) {\n+                    scaleFactor = maxGrowth;\n+                }\n+                double newStep = scaleFactor * stepSize;\n+\n+                if (rejectControl && !firstTime) {\n+                    double safety = computeSafetyFactor(error);\n+\n+                    // Try to estimate the optimal step using extrapolation\n+                    if (n > 1) {\n+                        double q = Math.pow(safety, 1 / (n - 1));\n+                        newStep = stepSize / q;\n+                    }\n+\n+                    if (newStep > maxStep) {\n+                        newStep = maxStep;\n+                    }\n+\n+                    if (newStep < minStep) {\n+                        newStep = minStep;\n+                    }\n+                }\n+\n+                stepSize = newStep;\n+\n+                if ((forward && (stepStart + stepSize) > t) ||\n+                        (!forward && (stepStart + stepSize) < t)) {\n+                    stepSize = t - stepStart;\n+                }\n \n+            } else {\n+                // Accept\n+                loop = false;\n+                firstTime = false;\n+\n+                if (eventsHandlersManager.evaluateStep(interpolator)) {\n+                    stepSize = eventsHandlersManager.getEventTime() - stepStart;\n+                    reject = true;\n+                } else {\n+                    // Update state\n+                    System.arraycopy(yTmp, 0, y, 0, y0.length);\n+                    eventsHandlersManager.stepAccepted(stepStart, y);\n+                    interpolator.storeTime(stepStart + stepSize);\n+                }\n+            }\n+\n+        }\n+\n+        // Update remaining variables\n+        stepStart += stepSize;\n+\n+        if (fsal) {\n+            // Save reference derivative for next step\n+            System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n         }\n \n-        // estimate the state at the end of the step\n-        for (int j = 0; j < y0.length; ++j) {\n-          double sum    = b[0] * yDotK[0][j];\n-          for (int l = 1; l < stages; ++l) {\n-            sum    += b[l] * yDotK[l][j];\n-          }\n-          yTmp[j] = y[j] + stepSize * sum;\n+        if (eventsHandlersManager.reset(stepStart, y) && ! lastStep) {\n+            // if we have rejected the last step, we need to recompute the\n+            // derivatives, because their evaluations were computed for the\n+            // past (rejected) step, but should have been for the current\n+            // accepted step\n+            computeDerivatives(stepStart, y, yDotK[0]);\n         }\n \n-        // estimate the error at the end of the step\n-        error = estimateError(yDotK, y, yTmp, stepSize);\n-        if (error <= 1.0) {\n-\n-          // discrete events handling\n-          interpolator.storeTime(stepStart + stepSize);\n-          if (manager.evaluateStep(interpolator)) {\n-              final double dt = manager.getEventTime() - stepStart;\n-              if (Math.abs(dt) <= Math.ulp(stepStart)) {\n-                  // rejecting the step would lead to a too small next step, we accept it\n-                  loop = false;\n-              } else {\n-                  // reject the step to match exactly the next switch time\n-                  hNew = dt;\n-              }\n-          } else {\n-            // accept the step\n-            loop = false;\n-          }\n-\n-        } else {\n-          // reject the step and attempt to reduce error by stepsize control\n-          final double factor =\n-              Math.min(maxGrowth,\n-                       Math.max(minReduction, safety * Math.pow(error, exp)));\n-          hNew = filterStep(stepSize * factor, forward, false);\n+        if (! lastStep) {\n+            // Compute new step size for next step\n+            final double scaleFactor = Math.min(maxGrowth,\n+                                                Math.max(minReduction,\n+                                                        computeSafetyFactor(error)));\n+\n+            if (error == 0 || error <= 1.0) {\n+                stepSize = filterStep(stepSize * scaleFactor, forward, false);\n+            } else {\n+                if (!rejectControl) {\n+                    stepSize = filterStep(stepSize * scaleFactor, forward, true);\n+                }\n+            }\n+\n+            // Check last step\n+            if ((forward && (stepStart + stepSize) > t) ||\n+                    (!forward && (stepStart + stepSize) < t)) {\n+                lastStep = true;\n+                stepSize = t - stepStart;\n+            }\n         }\n \n-      }\n-\n-      // the step has been accepted\n-      final double nextStep = stepStart + stepSize;\n-      System.arraycopy(yTmp, 0, y, 0, y0.length);\n-      manager.stepAccepted(nextStep, y);\n-      lastStep = manager.stop();\n-\n-      // provide the step data to the step handler\n-      interpolator.storeTime(nextStep);\n-      for (StepHandler handler : stepHandlers) {\n-          handler.handleStep(interpolator, lastStep);\n-      }\n-      stepStart = nextStep;\n-\n-      if (fsal) {\n-        // save the last evaluation for the next step\n-        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n-      }\n-\n-      if (manager.reset(stepStart, y) && ! lastStep) {\n-        // some event handler has triggered changes that\n-        // invalidate the derivatives, we need to recompute them\n-        computeDerivatives(stepStart, y, yDotK[0]);\n-      }\n-\n-      if (! lastStep) {\n-        // in some rare cases we may get here with stepSize = 0, for example\n-        // when an event occurs at integration start, reducing the first step\n-        // to zero; we have to reset the step to some safe non zero value\n-          stepSize = filterStep(stepSize, forward, true);\n-\n-        // stepsize control for next step\n-        final double factor = Math.min(maxGrowth,\n-                                       Math.max(minReduction,\n-                                                safety * Math.pow(error, exp)));\n-        final double  scaledH    = stepSize * factor;\n-        final double  nextT      = stepStart + scaledH;\n-        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n-        hNew = filterStep(scaledH, forward, nextIsLast);\n-      }\n+        // Notify handlers\n+        interpolator.storeTime(stepStart);\n+        for (StepHandler handler : stepHandlers) {\n+            handler.handleStep(interpolator, lastStep);\n+        }\n \n     }\n \n     final double stopTime = stepStart;\n     resetInternalState();\n-    return stopTime;\n \n-  }\n+    return stopTime;\n+}\n \n   /** Get the minimal reduction factor for stepsize control.\n    * @return minimal reduction factor",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}