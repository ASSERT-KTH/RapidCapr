{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n    RealMatrix u = dec.getU();\n    RealMatrix s = dec.getS();\n    RealMatrix v = dec.getVT();\n    for (int i = 0; i < s.getRowDimension(); i++) {\n        double root = FastMath.sqrt(s.getEntry(i, i));\n        for (int j = 0; j < u.getColumnDimension(); j++) {\n            u.setEntry(j, i, u.getEntry(j, i) / root);\n        }\n        for (int j = 0; j < v.getRowDimension(); j++) {\n            v.setEntry(i, j, v.getEntry(i, j) * root);\n        }\n    }\n    return u.multiply(v);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c89bc8205 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n+    RealMatrix u = dec.getU();\n+    RealMatrix s = dec.getS();\n+    RealMatrix v = dec.getVT();\n+    for (int i = 0; i < s.getRowDimension(); i++) {\n+        double root = FastMath.sqrt(s.getEntry(i, i));\n+        for (int j = 0; j < u.getColumnDimension(); j++) {\n+            u.setEntry(j, i, u.getEntry(j, i) / root);\n+        }\n+        for (int j = 0; j < v.getRowDimension(); j++) {\n+            v.setEntry(i, j, v.getEntry(i, j) * root);\n+        }\n     }\n+    return u.multiply(v);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}