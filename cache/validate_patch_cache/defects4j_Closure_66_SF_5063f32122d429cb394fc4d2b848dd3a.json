{
    "patch": "public static double getTypedPercent(JsonObject obj) {\n    int total = 0;\n    int typed = 0;\n    for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n        total++;\n        if (entry.getValue().isJsonPrimitive()) {\n            JsonPrimitive primitive = entry.getValue().getAsJsonPrimitive();\n            if (primitive.isNumber() || primitive.isBoolean()) {\n                typed++;\n            }\n        }\n    }\n    return ((double)typed / (double)total) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..ffc4d29d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonObject obj) {\n+    int total = 0;\n+    int typed = 0;\n+    for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n+        total++;\n+        if (entry.getValue().isJsonPrimitive()) {\n+            JsonPrimitive primitive = entry.getValue().getAsJsonPrimitive();\n+            if (primitive.isNumber() || primitive.isBoolean()) {\n+                typed++;\n+            }\n+        }\n+    }\n+    return ((double)typed / (double)total) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}