{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<List<Quiz>>() {}.getType();\n    List<Quiz> quizList = gson.fromJson(jsonStr, type);\n\n    if (quizList == null || quizList.isEmpty()) {\n        return 0.0;\n    }\n\n    int total = 0;\n    int correct = 0;\n    for (Quiz quiz : quizList) {\n        total++;\n        if (quiz.isCorrect()) {\n            correct++;\n        }\n    }\n\n    return ((double) correct / total) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..7d4952bc 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<List<Quiz>>() {}.getType();\n+    List<Quiz> quizList = gson.fromJson(jsonStr, type);\n+\n+    if (quizList == null || quizList.isEmpty()) {\n+        return 0.0;\n+    }\n+\n+    int total = 0;\n+    int correct = 0;\n+    for (Quiz quiz : quizList) {\n+        total++;\n+        if (quiz.isCorrect()) {\n+            correct++;\n+        }\n+    }\n+\n+    return ((double) correct / total) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}