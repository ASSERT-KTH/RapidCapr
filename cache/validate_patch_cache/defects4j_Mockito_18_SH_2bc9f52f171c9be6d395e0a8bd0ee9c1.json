{
    "patch": "public ReturnValues execute(Object... params) {\n    try {\n        String input = (String) params[0];\n        String[] array = input.split(\",\");\n        if (array.length == 0) {\n            throw new IllegalArgumentException(\"Input cannot be empty\");\n        }\n        List<Integer> numbers = new ArrayList<>();\n        for (String s : array) {\n            numbers.add(Integer.parseInt(s));\n        }\n        int result = numbers.stream().reduce(0, Integer::sum);\n        return new ReturnValues(result);\n    } catch (Exception e) {\n        return new ReturnValues(e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}