{
    "patch": "        switch (child.getToken()) {\n          case GETTER_DEF:\n          case SETTER_DEF:\n          case STRING_KEY:\n            break;\n          default:\n            // Unexpected child of an object literal.\n            throw new IllegalStateException(\"Unexpected child of an object literal\");\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..953a00ec 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,15 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        switch (child.getToken()) {\n+          case GETTER_DEF:\n+          case SETTER_DEF:\n+          case STRING_KEY:\n+            break;\n+          default:\n+            // Unexpected child of an object literal.\n+            throw new IllegalStateException(\"Unexpected child of an object literal\");\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}