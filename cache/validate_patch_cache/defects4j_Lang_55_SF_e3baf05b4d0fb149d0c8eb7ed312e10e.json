{
    "patch": "        long currentTime = System.currentTimeMillis();\n        boolean isRunning = this.runningState == STATE_RUNNING;\n        boolean isSuspended = this.runningState == STATE_SUSPENDED;\n        if(!isRunning && !isSuspended) {\n            throw new IllegalStateException(\"Stopwatch is not running. \");\n        }\n        if(isRunning) {\n            stopTime = currentTime;\n        }\n        this.totalTime = this.totalTime + (currentTime - this.startTime);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/time/StopWatch.java b/src/java/org/apache/commons/lang/time/StopWatch.java\nindex 8f394217..bbee3d90 100644\n--- a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n@@ -111,13 +111,16 @@ public class StopWatch {\n      *\n      * @throws IllegalStateException if the StopWatch is not running.\n      */\n-    public void stop() {\n-        if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n+        long currentTime = System.currentTimeMillis();\n+        boolean isRunning = this.runningState == STATE_RUNNING;\n+        boolean isSuspended = this.runningState == STATE_SUSPENDED;\n+        if(!isRunning && !isSuspended) {\n             throw new IllegalStateException(\"Stopwatch is not running. \");\n         }\n-            stopTime = System.currentTimeMillis();\n-        this.runningState = STATE_STOPPED;\n-    }\n+        if(isRunning) {\n+            stopTime = currentTime;\n+        }\n+        this.totalTime = this.totalTime + (currentTime - this.startTime);\n \n     /**\n      * <p>Resets the stopwatch. Stops it if need be. </p>",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}