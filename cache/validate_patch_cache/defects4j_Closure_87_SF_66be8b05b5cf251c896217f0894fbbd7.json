{
    "patch": "    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // IE has a bug where event handlers behave differently when\n      // their return value is used vs. when their return value is in\n      // an EXPR_RESULT. It's pretty freaking weird. See:\n      // http://code.google.com/p/closure-compiler/issues/detail?id=291\n      // We try to detect this case, and not fold EXPR_RESULTs\n      // into other expressions.\n      if (NodeUtil.isFunctionExpression(maybeExpr)) {\n        return false;\n      }\n\n      if (!NodeUtil.mayHaveSideEffects(maybeExpr) && NodeUtil.isExpressionNode(maybeExpr)) {\n        if (NodeUtil.isExprAssign(maybeExpr) || (NodeUtil.isGetProp(maybeExpr) && NodeUtil.isThis(maybeExpr.getFirstChild()))) {\n          return true;\n        }\n        Node parent = maybeExpr.getParent();\n        if (parent != null && parent.getType() == Token.IF) {\n          Node grandparent = parent.getParent();\n          if (grandparent != null && grandparent.getType() == Token.BLOCK && grandparent.hasOneChild()) {\n            if (grandparent.getFirstChild().getType() == Token.EXPR_RESULT &&\n                grandparent.getFirstChild().getFirstChild().getType() == Token.CALL &&\n                grandparent.getFirstChild().getFirstChild().getFirstChild() == null &&\n                n.getParent().getType() == Token.BLOCK) {\n              // This is a special case where we should consider this a folded expresion.\n              // If the node we're checking is in a block, and the block only has one child,\n              // and that child is an if statement,\n              // and the then branch of that if statement is a return statement with a simple\n              // call expression with no parameters and no children except the name of the function\n              // the then branch is a single expression statement, and this is the only statement\n              // in the block, then we can rewrite this as an expression.\n              // See http://code.google.com/p/closure-compiler/issues/detail?id=545 for more info.\n              return true;\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..69b7fe2a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,43 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // IE has a bug where event handlers behave differently when\n+      // their return value is used vs. when their return value is in\n+      // an EXPR_RESULT. It's pretty freaking weird. See:\n+      // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+      // We try to detect this case, and not fold EXPR_RESULTs\n+      // into other expressions.\n+      if (NodeUtil.isFunctionExpression(maybeExpr)) {\n+        return false;\n       }\n-    }\n \n-    return false;\n-  }\n+      if (!NodeUtil.mayHaveSideEffects(maybeExpr) && NodeUtil.isExpressionNode(maybeExpr)) {\n+        if (NodeUtil.isExprAssign(maybeExpr) || (NodeUtil.isGetProp(maybeExpr) && NodeUtil.isThis(maybeExpr.getFirstChild()))) {\n+          return true;\n+        }\n+        Node parent = maybeExpr.getParent();\n+        if (parent != null && parent.getType() == Token.IF) {\n+          Node grandparent = parent.getParent();\n+          if (grandparent != null && grandparent.getType() == Token.BLOCK && grandparent.hasOneChild()) {\n+            if (grandparent.getFirstChild().getType() == Token.EXPR_RESULT &&\n+                grandparent.getFirstChild().getFirstChild().getType() == Token.CALL &&\n+                grandparent.getFirstChild().getFirstChild().getFirstChild() == null &&\n+                n.getParent().getType() == Token.BLOCK) {\n+              // This is a special case where we should consider this a folded expresion.\n+              // If the node we're checking is in a block, and the block only has one child,\n+              // and that child is an if statement,\n+              // and the then branch of that if statement is a return statement with a simple\n+              // call expression with no parameters and no children except the name of the function\n+              // the then branch is a single expression statement, and this is the only statement\n+              // in the block, then we can rewrite this as an expression.\n+              // See http://code.google.com/p/closure-compiler/issues/detail?id=545 for more info.\n+              return true;\n+            }\n+          }\n+        }\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}