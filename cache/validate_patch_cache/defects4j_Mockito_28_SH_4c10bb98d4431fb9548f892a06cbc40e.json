{
    "patch": "        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        if (candidate != null) {\n            if (field.getType().isAssignableFrom(candidate.getClass())) {\n                field.setAccessible(true);\n                try {\n                    Object oldValue = field.get(fieldInstance);\n                    if (oldValue != null) {\n                        for (Field innerField : oldValue.getClass().getDeclaredFields()) {\n                            innerField.setAccessible(true);\n                            if (innerField.get(oldValue) == fieldInstance) {\n                                innerField.set(oldValue, null);\n                            }\n                        }\n                    }\n                    field.set(fieldInstance, candidate);\n                    for (Field innerField : candidate.getClass().getDeclaredFields()) {\n                        innerField.setAccessible(true);\n                        Object innerCandidate = mockCandidateFilter.filterCandidate(mocks, innerField, candidate).thenInject();\n                        if (innerCandidate != null && innerField.get(candidate) == null) {\n                            innerField.set(candidate, innerCandidate);\n                        }\n                    }\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            } else {\n                throw new IllegalArgumentException(String.format(\"Cannot inject a mock instance of type '%s' into field '%s' of type '%s'\",\n                        candidate.getClass(), field.getName(), field.getType()));\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..72c0fe171 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,39 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        if (candidate != null) {\n+            if (field.getType().isAssignableFrom(candidate.getClass())) {\n+                field.setAccessible(true);\n+                try {\n+                    Object oldValue = field.get(fieldInstance);\n+                    if (oldValue != null) {\n+                        for (Field innerField : oldValue.getClass().getDeclaredFields()) {\n+                            innerField.setAccessible(true);\n+                            if (innerField.get(oldValue) == fieldInstance) {\n+                                innerField.set(oldValue, null);\n+                            }\n+                        }\n+                    }\n+                    field.set(fieldInstance, candidate);\n+                    for (Field innerField : candidate.getClass().getDeclaredFields()) {\n+                        innerField.setAccessible(true);\n+                        Object innerCandidate = mockCandidateFilter.filterCandidate(mocks, innerField, candidate).thenInject();\n+                        if (innerCandidate != null && innerField.get(candidate) == null) {\n+                            innerField.set(candidate, innerCandidate);\n+                        }\n+                    }\n+                } catch (IllegalAccessException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            } else {\n+                throw new IllegalArgumentException(String.format(\"Cannot inject a mock instance of type '%s' into field '%s' of type '%s'\",\n+                        candidate.getClass(), field.getName(), field.getType()));\n+            }\n+        }\n         }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<java.lang.Object@20a46430> was not:<mockedBean>",
    "test_result": "FAIL"
}