{
    "patch": "private void visitParameterList(\n    NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  boolean varArgs = functionType.hasRestFormals();\n  while (arguments.hasNext() &&\n         parameters.hasNext()) {\n    // If there are no parameters left in the list, then the while loop\n    // above implies that this must be a var_args function.\n    parameter = parameters.next();\n    argument = arguments.next();\n    ordinal++;\n\n    validator.expectArgumentMatchesParameter(\n        t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  int numFormals = functionType.getFormalCount();\n\n  if (numArgs < minArgs) {\n    // Check if there are missing optional or mandatory parameters.\n    int missingArgs = varArgs ? 0 : numArgs;\n    while (parameters.hasNext()) {\n      parameter = parameters.next();\n      ordinal++;\n      if (parameter.getBooleanProp(Node.ORIGINAL_HAS_DEFAULT)) {\n        missingArgs--;\n      } else {\n        report(t, call, MISSING_PARAMETER,\n            validator.getReadableJSTypeName(\n                call.getFirstChild(), false),\n            ordinal,\n            validator.getReadableJSTypeName(parameter, false));\n      }\n    }\n    if (missingArgs > 0) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs), String.valueOf(minArgs),\n          missingArgs == 1 ? \" argument.\" :\n              \" and at least \" + missingArgs + \" more argument(s).\");\n    } else {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              \" and no more than \" + (numFormals - numArgs) + \" argument(s).\");\n    }\n  } else if (!varArgs && numArgs > numFormals) {\n    // Check if there are too many arguments for non-var_args function.\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n      report(t, argument, TOO_MANY_ARGUMENTS);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..657d357f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,70 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+private void visitParameterList(\n+    NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  Node parameter = null;\n+  Node argument = null;\n+  boolean varArgs = functionType.hasRestFormals();\n+  while (arguments.hasNext() &&\n+         parameters.hasNext()) {\n+    // If there are no parameters left in the list, then the while loop\n+    // above implies that this must be a var_args function.\n+    parameter = parameters.next();\n+    argument = arguments.next();\n+    ordinal++;\n+\n+    validator.expectArgumentMatchesParameter(\n+        t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+  }\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  int numFormals = functionType.getFormalCount();\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+  if (numArgs < minArgs) {\n+    // Check if there are missing optional or mandatory parameters.\n+    int missingArgs = varArgs ? 0 : numArgs;\n+    while (parameters.hasNext()) {\n+      parameter = parameters.next();\n+      ordinal++;\n+      if (parameter.getBooleanProp(Node.ORIGINAL_HAS_DEFAULT)) {\n+        missingArgs--;\n+      } else {\n+        report(t, call, MISSING_PARAMETER,\n+            validator.getReadableJSTypeName(\n+                call.getFirstChild(), false),\n+            ordinal,\n+            validator.getReadableJSTypeName(parameter, false));\n+      }\n+    }\n+    if (missingArgs > 0) {\n+      report(t, call, WRONG_ARGUMENT_COUNT,\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArgs), String.valueOf(minArgs),\n+          missingArgs == 1 ? \" argument.\" :\n+              \" and at least \" + missingArgs + \" more argument(s).\");\n+    } else {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n               String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+              \" and no more than \" + (numFormals - numArgs) + \" argument(s).\");\n+    }\n+  } else if (!varArgs && numArgs > numFormals) {\n+    // Check if there are too many arguments for non-var_args function.\n+    while (arguments.hasNext()) {\n+      argument = arguments.next();\n+      ordinal++;\n+      report(t, argument, TOO_MANY_ARGUMENTS);\n     }\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}