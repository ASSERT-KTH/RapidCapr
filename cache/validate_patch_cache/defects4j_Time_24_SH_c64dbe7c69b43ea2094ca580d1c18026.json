{
    "patch": " try {\n    for (int i = 0; i < count; i++) {\n        try {\n            millis = savedFields[i].set(millis, resetFields);\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            if (resetFields) {\n                int shift = Integer.MAX_VALUE;\n                for (int j = 0; j < count; j++) {\n                    if (i == j) {\n                        continue;\n                    }\n                    int result = savedFields[i].compare(savedFields[j]);\n                    if (result == 0) {\n                        // two values competing for the same slot. Guess which one is right.\n                        // We know this because of the exception thrown above.\n                        int defaultYear = iDefaultYear;\n                        DurationField months = DurationFieldType.months().getField(iChrono);\n                        DurationField days = DurationFieldType.days().getField(iChrono);\n                        DurationField first = savedFields[i].iField.getDurationField();\n                        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                            // we are in the situation where we don't know which saved field is right, but can guess the year\n                            saveField(DateTimeFieldType.year(), defaultYear);\n                        } else {\n                            // can't guess the right year, so we need to clean up the saved fields and start over\n                            resetMillis(defaultYear);\n                        }\n                        break;\n                    } else {\n                        if (result < 0 && result < shift) {\n                            shift = result;\n                        }\n                    }\n                }\n                if (shift != Integer.MAX_VALUE) {\n                    i += shift;\n                    continue;\n                }\n            }\n            if (count == 1 && i == 0) {\n                throw new IllegalFieldValueException(\n                        savedFields[i].iField.getType(), savedFields[i].getDifference(), null, null);\n            }\n            throw e;\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    if (resetFields && count > 0) {\n        // some reset suggested a good guess to fix the bad field values,\n        // so reset and try again, but don't guess again.\n        resetMillis(iDefaultYear);\n        try {\n            millis = savedFields[0].set(millis, false);\n        } catch (IllegalFieldValueException e1) {\n            // ignore this exception, and let the original exception bubble up\n        }\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..0414f91a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,70 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+ try {\n+    for (int i = 0; i < count; i++) {\n+        try {\n+            millis = savedFields[i].set(millis, resetFields);\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            if (resetFields) {\n+                int shift = Integer.MAX_VALUE;\n+                for (int j = 0; j < count; j++) {\n+                    if (i == j) {\n+                        continue;\n+                    }\n+                    int result = savedFields[i].compare(savedFields[j]);\n+                    if (result == 0) {\n+                        // two values competing for the same slot. Guess which one is right.\n+                        // We know this because of the exception thrown above.\n+                        int defaultYear = iDefaultYear;\n+                        DurationField months = DurationFieldType.months().getField(iChrono);\n+                        DurationField days = DurationFieldType.days().getField(iChrono);\n+                        DurationField first = savedFields[i].iField.getDurationField();\n+                        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+                            // we are in the situation where we don't know which saved field is right, but can guess the year\n+                            saveField(DateTimeFieldType.year(), defaultYear);\n+                        } else {\n+                            // can't guess the right year, so we need to clean up the saved fields and start over\n+                            resetMillis(defaultYear);\n+                        }\n+                        break;\n+                    } else {\n+                        if (result < 0 && result < shift) {\n+                            shift = result;\n+                        }\n+                    }\n+                }\n+                if (shift != Integer.MAX_VALUE) {\n+                    i += shift;\n+                    continue;\n+                }\n+            }\n+            if (count == 1 && i == 0) {\n+                throw new IllegalFieldValueException(\n+                        savedFields[i].iField.getType(), savedFields[i].getDifference(), null, null);\n+            }\n+            throw e;\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    if (resetFields && count > 0) {\n+        // some reset suggested a good guess to fix the bad field values,\n+        // so reset and try again, but don't guess again.\n+        resetMillis(iDefaultYear);\n+        try {\n+            millis = savedFields[0].set(millis, false);\n+        } catch (IllegalFieldValueException e1) {\n+            // ignore this exception, and let the original exception bubble up\n+        }\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}