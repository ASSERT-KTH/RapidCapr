{
    "patch": "\npublic static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // rescale vectors without losing precision to ensure their norms are the same order of magnitude\n    final double norm1 = v1.getNorm();\n    final double norm2 = v2.getNorm();\n    final double normProduct = norm1 * norm2;\n\n    final double scaledX1 = v1.getX() * norm2 / normProduct;\n    final double scaledY1 = v1.getY() * norm2 / normProduct;\n    final double scaledZ1 = v1.getZ() * norm2 / normProduct;\n\n    final double scaledX2 = v2.getX() * norm1 / normProduct;\n    final double scaledY2 = v2.getY() * norm1 / normProduct;\n    final double scaledZ2 = v2.getZ() * norm1 / normProduct;\n\n    final double crossX = (scaledY1 * scaledZ2) - (scaledZ1 * scaledY2);\n    final double crossY = (scaledZ1 * scaledX2) - (scaledX1 * scaledZ2);\n    final double crossZ = (scaledX1 * scaledY2) - (scaledY1 * scaledX2);\n\n    return new Vector3D(crossX, crossY, crossZ);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..05bf8187e 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,28 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n+    // rescale vectors without losing precision to ensure their norms are the same order of magnitude\n+    final double norm1 = v1.getNorm();\n+    final double norm2 = v2.getNorm();\n+    final double normProduct = norm1 * norm2;\n \n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+    final double scaledX1 = v1.getX() * norm2 / normProduct;\n+    final double scaledY1 = v1.getY() * norm2 / normProduct;\n+    final double scaledZ1 = v1.getZ() * norm2 / normProduct;\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    final double scaledX2 = v2.getX() * norm1 / normProduct;\n+    final double scaledY2 = v2.getY() * norm1 / normProduct;\n+    final double scaledZ2 = v2.getZ() * norm1 / normProduct;\n \n+    final double crossX = (scaledY1 * scaledZ2) - (scaledZ1 * scaledY2);\n+    final double crossY = (scaledZ1 * scaledX2) - (scaledX1 * scaledZ2);\n+    final double crossZ = (scaledX1 * scaledY2) - (scaledY1 * scaledX2);\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+    return new Vector3D(crossX, crossY, crossZ);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.19738550848793068>",
    "test_result": "FAIL"
}