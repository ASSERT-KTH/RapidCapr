{
    "patch": "// We only want to analyze first-order functions for escaping variables,\n// i.e., functions defined at the immediate nested level or at the global scope.\nif (NodeUtil.isFunctionExpression(n) && (t.getScopeDepth() == 2 || t.inGlobalScope())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex cf87eaaf..46209889 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1993,7 +1993,9 @@ final class TypedScopeCreator implements ScopeCreator {\n         data.get(t.getScopeRoot()).recordNonEmptyReturn();\n       }\n \n-      if (t.getScopeDepth() <= 2) {\n+// We only want to analyze first-order functions for escaping variables,\n+// i.e., functions defined at the immediate nested level or at the global scope.\n+if (NodeUtil.isFunctionExpression(n) && (t.getScopeDepth() == 2 || t.inGlobalScope())) {\n         // The first-order function analyzer looks at two types of variables:\n         //\n         // 1) Local variables that are assigned in inner scopes (\"escaped vars\")",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}