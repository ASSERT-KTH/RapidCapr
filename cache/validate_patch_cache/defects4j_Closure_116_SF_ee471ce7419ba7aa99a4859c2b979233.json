{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(\n            !NodeUtil.isFunctionObjectApply(callNode),\n            \"CanInlineReferenceDirectly: \" + Token.FUNCTION + \" object \" + Token.NAME\n                + \" parameter not supported\");\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    Map<String, Integer> namedParamCount = new HashMap<>();\n    while (fnParam != null) {\n      if (fnParam.isName()) {\n        namedParamCount.put(fnParam.getString(), 0);\n      }\n\n      fnParam = fnParam.getNext();\n    }\n\n    fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      if (fnParam != null && namedParamCount.containsKey(fnParam.getString())\n          && namedParamCount.get(fnParam.getString()) > 0\n          && NodeUtil.mayEffectMutableState(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n\n      if (fnParam != null && namedParamCount.containsKey(fnParam.getString())) {\n        namedParamCount.put(fnParam.getString(), namedParamCount.get(fnParam.getString()) + 1);\n        fnParam = fnParam.getNext();\n        continue;\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null && NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n\n      cArg = cArg != null ? cArg.getNext() : null;\n      fnParam = fnParam != null ? fnParam.getNext() : null;\n    }\n\n    return cArg == null && fnParam == null ? CanInlineResult.YES : CanInlineResult.NO;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..50aafb9d 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,15 +686,13 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n     Node block = fnNode.getLastChild();\n \n-\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n@@ -710,42 +708,49 @@ class FunctionInjector {\n         cArg = cArg.getNext();\n       } else {\n         // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        Preconditions.checkState(\n+            !NodeUtil.isFunctionObjectApply(callNode),\n+            \"CanInlineReferenceDirectly: \" + Token.FUNCTION + \" object \" + Token.NAME\n+                + \" parameter not supported\");\n       }\n     }\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+    Map<String, Integer> namedParamCount = new HashMap<>();\n+    while (fnParam != null) {\n+      if (fnParam.isName()) {\n+        namedParamCount.put(fnParam.getString(), 0);\n+      }\n+\n+      fnParam = fnParam.getNext();\n+    }\n+\n+    fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+      if (fnParam != null && namedParamCount.containsKey(fnParam.getString())\n+          && namedParamCount.get(fnParam.getString()) > 0\n+          && NodeUtil.mayEffectMutableState(cArg, compiler)) {\n+        return CanInlineResult.NO;\n+      }\n \n-        // Move to the next name.\n+      if (fnParam != null && namedParamCount.containsKey(fnParam.getString())) {\n+        namedParamCount.put(fnParam.getString(), namedParamCount.get(fnParam.getString()) + 1);\n         fnParam = fnParam.getNext();\n+        continue;\n       }\n \n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+      if (cArg != null && NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        return CanInlineResult.NO;\n       }\n+\n+      cArg = cArg != null ? cArg.getNext() : null;\n+      fnParam = fnParam != null ? fnParam.getNext() : null;\n     }\n \n-    return CanInlineResult.YES;\n+    return cArg == null && fnParam == null ? CanInlineResult.YES : CanInlineResult.NO;\n   }\n \n   /**",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}