{
    "patch": "      if (NodeUtil.isGet(parent)) {\n        Node target = parent.getLastChild();\n        if (target.getType() == Token.STRING && \"prototype\".equals(target.getString())) {\n          return false;\n        }\n      }\n\n      if (NodeUtil.isExpressionNode(parent) &&\n          NodeUtil.isAssignmentOp(parent.getParent()) &&\n          NodeUtil.isGet(parent.getParent().getFirstChild()) &&\n          parent.getParent().getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n\n      if (parent != null && parent.getType() == Token.GETPROP &&\n          parent.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n\n      if (n.getParent() != null && n.getParent().getType() == Token.EXPR_RESULT) {\n        return false;\n      }\n\n      // Don't traverse functions that have the @this or @override annotation\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..686d3293 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,58 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Node target = parent.getLastChild();\n+        if (target.getType() == Token.STRING && \"prototype\".equals(target.getString())) {\n+          return false;\n+        }\n+      }\n+\n+      if (NodeUtil.isExpressionNode(parent) &&\n+          NodeUtil.isAssignmentOp(parent.getParent()) &&\n+          NodeUtil.isGet(parent.getParent().getFirstChild()) &&\n+          parent.getParent().getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+\n+      if (parent != null && parent.getType() == Token.GETPROP &&\n+          parent.getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+\n+      if (n.getParent() != null && n.getParent().getType() == Token.EXPR_RESULT) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that have the @this or @override annotation\n+      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      if (jsDoc != null &&\n+          (jsDoc.isConstructor() ||\n+           jsDoc.isInterface() ||\n+           jsDoc.hasThisType() ||\n+           jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+\n+            // object literal keys\n+            pType == Token.STRING ||\n+            pType == Token.NUMBER)) {\n+        return false;\n+      }\n+\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: variable jsDoc is already defined in method shouldTraverse(NodeTraversal,Node,Node)",
    "test_result": "ERROR"
}