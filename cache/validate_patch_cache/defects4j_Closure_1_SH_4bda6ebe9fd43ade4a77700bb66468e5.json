{
    "patch": "          // Check if the unused args are the last arguments of the function\n          // and if they have default values.\n          boolean shouldRemoveDefault = lastArg.getBooleanProp(Node.FUNCTION_PARAM_HAS_DEFAULT);\n          if (argList.getLastChild() == lastArg.getNext()) {\n            Node sibling = lastArg.getPrevious();\n            while (sibling != null) {\n              if (sibling.isDefaultValue()) {\n                sibling = sibling.getPrevious();\n              } else {\n                shouldRemoveDefault = false;\n                break;\n              }\n            }\n          }\n\n          argList.removeChild(lastArg);\n          if (shouldRemoveDefault) {\n            Node param = lastArg;\n            while (param.isDefaultValue()) {\n              argList.removeChild(param);\n              param = param.getPrevious();\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..200cb17a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+          // Check if the unused args are the last arguments of the function\n+          // and if they have default values.\n+          boolean shouldRemoveDefault = lastArg.getBooleanProp(Node.FUNCTION_PARAM_HAS_DEFAULT);\n+          if (argList.getLastChild() == lastArg.getNext()) {\n+            Node sibling = lastArg.getPrevious();\n+            while (sibling != null) {\n+              if (sibling.isDefaultValue()) {\n+                sibling = sibling.getPrevious();\n+              } else {\n+                shouldRemoveDefault = false;\n+                break;\n+              }\n+            }\n+          }\n+\n+          argList.removeChild(lastArg);\n+          if (shouldRemoveDefault) {\n+            Node param = lastArg;\n+            while (param.isDefaultValue()) {\n+              argList.removeChild(param);\n+              param = param.getPrevious();\n+            }\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}