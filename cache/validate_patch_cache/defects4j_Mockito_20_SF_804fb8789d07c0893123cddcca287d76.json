{
    "patch": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    T mockInstance = null;\n    Class<? extends T> mockedProxyType;\n    Class<T> typeToMock = settings.getTypeToMock();\n\n    try {\n        if (typeToMock == null) {\n            throw new IllegalArgumentException(\"MockCreationSettings's Type to mock cannot be null\");\n        }\n\n        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n        }\n\n        if ((typeToMock.getModifiers() & Modifier.FINAL) == 0) {\n            mockedProxyType = cachingMockBytecodeGenerator.get(typeToMock, settings.getExtraInterfaces());\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n        } else {\n            Class<?> superClass = typeToMock;\n            while ((superClass.getModifiers() & Modifier.FINAL) != 0) {\n                superClass = superClass.getSuperclass();\n                if (superClass == null) {\n                    throw new MockitoException(\"Failed to extend the final class \" + typeToMock.getName());\n                }\n            }\n\n            mockedProxyType = cachingMockBytecodeGenerator.get(\n                    (Class<? extends T>) superClass,\n                    settings.getExtraInterfaces()\n            );\n            T spyInstance = Mockito.spy(typeToMock.getConstructor().newInstance());\n            T mockExtension = mockedProxyType.getConstructor(superClass).newInstance(spyInstance);\n            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockExtension;\n            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n            return ensureMockIsAssignableToMockedType(settings, mockExtension);\n        }\n    } catch (ClassNotFoundException | InvocationTargetException | InstantiationException | IllegalAccessException | NoSuchMethodException e) {\n        throw new MockitoException(\"Unable to create a mock instance of \" + typeToMock, e);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(typeToMock),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\"\n        ), cce);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..d0183650e 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,36 +21,59 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+    T mockInstance = null;\n+    Class<? extends T> mockedProxyType;\n+    Class<T> typeToMock = settings.getTypeToMock();\n+\n+    try {\n+        if (typeToMock == null) {\n+            throw new IllegalArgumentException(\"MockCreationSettings's Type to mock cannot be null\");\n+        }\n+\n         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n             throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n         }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n+\n+        if ((typeToMock.getModifiers() & Modifier.FINAL) == 0) {\n+            mockedProxyType = cachingMockBytecodeGenerator.get(typeToMock, settings.getExtraInterfaces());\n             mockInstance = classInstantiator.instantiate(mockedProxyType);\n             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n-\n             return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n-            throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+        } else {\n+            Class<?> superClass = typeToMock;\n+            while ((superClass.getModifiers() & Modifier.FINAL) != 0) {\n+                superClass = superClass.getSuperclass();\n+                if (superClass == null) {\n+                    throw new MockitoException(\"Failed to extend the final class \" + typeToMock.getName());\n+                }\n+            }\n+\n+            mockedProxyType = cachingMockBytecodeGenerator.get(\n+                    (Class<? extends T>) superClass,\n+                    settings.getExtraInterfaces()\n+            );\n+            T spyInstance = Mockito.spy(typeToMock.getConstructor().newInstance());\n+            T mockExtension = mockedProxyType.getConstructor(superClass).newInstance(spyInstance);\n+            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockExtension;\n+            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+            return ensureMockIsAssignableToMockedType(settings, mockExtension);\n         }\n+    } catch (ClassNotFoundException | InvocationTargetException | InstantiationException | IllegalAccessException | NoSuchMethodException e) {\n+        throw new MockitoException(\"Unable to create a mock instance of \" + typeToMock, e);\n+    } catch (ClassCastException cce) {\n+        throw new MockitoException(join(\n+                \"ClassCastException occurred while creating the mockito mock :\",\n+                \"  class to mock : \" + describeClass(mockedProxyType),\n+                \"  created class : \" + describeClass(typeToMock),\n+                \"  proxy instance class : \" + describeClass(mockInstance),\n+                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n+                \"\",\n+                \"You might experience classloading issues, please ask the mockito mailing-list.\"\n+        ), cce);\n     }\n+}\n \n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}