{
    "patch": "Node function = fnScope.getRootNode();\n\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\n\nNode argList = getFunctionArgList(function);\nif (!modifyCallers) {\n  // Strip unreferenced args off the end of the function declaration.\n  Node lastArg;\n  while ((lastArg = argList.getLastChild()) != null) {\n    Var var = fnScope.getVar(lastArg.getString());\n    if (!referenced.contains(var)) {\n      argList.removeChild(lastArg);\n      compiler.reportCodeChange();\n    } else {\n      break;\n    }\n  }\n\n  // In original mode, we also remove any unreferenced parameters found in\n  // the function body.\n  Node body = function.getLastChild();\n  Node currentNode = body.getFirstChild();\n  while (currentNode != null) {\n    if (NodeUtil.isName(currentNode)) {\n      String name = currentNode.getString();\n      Var var = fnScope.getVar(name);\n      if (!referenced.contains(var)) {\n        Node nextNode = currentNode.getNext();\n        currentNode.detach();\n        compiler.reportCodeChange();\n        currentNode = nextNode;\n        continue;\n      }\n    }\n    currentNode = currentNode.getNext();\n  }\n} else {\n  // Don't strip unreferenced args if we are optimizing calls.\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8cde9ce4 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,50 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+if (!modifyCallers) {\n+  // Strip unreferenced args off the end of the function declaration.\n+  Node lastArg;\n+  while ((lastArg = argList.getLastChild()) != null) {\n+    Var var = fnScope.getVar(lastArg.getString());\n+    if (!referenced.contains(var)) {\n+      argList.removeChild(lastArg);\n+      compiler.reportCodeChange();\n+    } else {\n+      break;\n+    }\n+  }\n+\n+  // In original mode, we also remove any unreferenced parameters found in\n+  // the function body.\n+  Node body = function.getLastChild();\n+  Node currentNode = body.getFirstChild();\n+  while (currentNode != null) {\n+    if (NodeUtil.isName(currentNode)) {\n+      String name = currentNode.getString();\n+      Var var = fnScope.getVar(name);\n+      if (!referenced.contains(var)) {\n+        Node nextNode = currentNode.getNext();\n+        currentNode.detach();\n+        compiler.reportCodeChange();\n+        currentNode = nextNode;\n+        continue;\n+      }\n+    }\n+    currentNode = currentNode.getNext();\n+  }\n+} else {\n+  // Don't strip unreferenced args if we are optimizing calls.\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}