{
    "patch": "      if (functionType.hasThisType() && n.getParent().isGetProp()) {\n        // Get the type of the object the function is called on.\n        JSType objectLitType = getJSType(n.getParent().getFirstChild());\n\n        // If we can't determine the type of the object, we can't do any checking.\n        if (objectLitType.isUnknownType()) {\n          return;\n        }\n\n        // If the object type is null or undefined, allow the call.\n        if (objectLitType.isNullType() || objectLitType.isVoidType()) {\n          return;\n        }\n\n        // If the object type is anything other than a record type,\n        // report that it's invalid and return.\n        if (!(objectLitType instanceof RecordType)) {\n          report(t, n, INVALID_THIS_TYPE, objectLitType.toString());\n          return;\n        }\n\n        // If the function has an explicit 'this' type, check if the object\n        // being called upon is a subtype of it.\n        JSType thisType = functionType.getTypeOfThis();\n        if (!objectLitType.isSubtypeOf(thisType)) {\n          report(t, n, INVALID_THIS_TYPE, \"expected \" + thisType.toString() +\n              \" but found \" + objectLitType.toString());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..433f7bb1 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,35 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.hasThisType() && n.getParent().isGetProp()) {\n+        // Get the type of the object the function is called on.\n+        JSType objectLitType = getJSType(n.getParent().getFirstChild());\n+\n+        // If we can't determine the type of the object, we can't do any checking.\n+        if (objectLitType.isUnknownType()) {\n+          return;\n+        }\n+\n+        // If the object type is null or undefined, allow the call.\n+        if (objectLitType.isNullType() || objectLitType.isVoidType()) {\n+          return;\n+        }\n+\n+        // If the object type is anything other than a record type,\n+        // report that it's invalid and return.\n+        if (!(objectLitType instanceof RecordType)) {\n+          report(t, n, INVALID_THIS_TYPE, objectLitType.toString());\n+          return;\n+        }\n+\n+        // If the function has an explicit 'this' type, check if the object\n+        // being called upon is a subtype of it.\n+        JSType thisType = functionType.getTypeOfThis();\n+        if (!objectLitType.isSubtypeOf(thisType)) {\n+          report(t, n, INVALID_THIS_TYPE, \"expected \" + thisType.toString() +\n+              \" but found \" + objectLitType.toString());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}