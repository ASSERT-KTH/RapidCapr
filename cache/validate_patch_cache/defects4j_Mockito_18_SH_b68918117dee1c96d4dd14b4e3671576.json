{
    "patch": "public class Values {\n\n    private final Map<Class<?>, Object> returnValues;\n\n    public Values() {\n        this.returnValues = new HashMap<>();\n    }\n\n    public void setReturnValue(Class<?> clazz, Object returnValue) {\n        returnValues.put(clazz, returnValue);\n    }\n\n    public <T> T returnValueFor(Class<T> clazz) {\n        if (!returnValues.containsKey(clazz))\n            return null; // Returns null if there is no value for the specified class type.\n        return clazz.cast(returnValues.get(clazz));\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}