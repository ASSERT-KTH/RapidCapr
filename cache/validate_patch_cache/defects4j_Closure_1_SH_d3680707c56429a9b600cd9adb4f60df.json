{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    // Store unreferenced arguments for later removal.\n    Deque<Node> unreferenced = new ArrayDeque<>();\n    for (Node arg : argList.children()) {\n      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n        unreferenced.addLast(arg);\n      }\n    }\n\n    // Work backwards through the argument list, so that no references\n    // are clobbered.\n    while (!unreferenced.isEmpty()) {\n      Node unusedArg = unreferenced.removeLast();\n      argList.removeChild(unusedArg);\n      compiler.reportCodeChange();\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..599c1ba2 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,31 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    // Store unreferenced arguments for later removal.\n+    Deque<Node> unreferenced = new ArrayDeque<>();\n+    for (Node arg : argList.children()) {\n+      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+        unreferenced.addLast(arg);\n+      }\n+    }\n+\n+    // Work backwards through the argument list, so that no references\n+    // are clobbered.\n+    while (!unreferenced.isEmpty()) {\n+      Node unusedArg = unreferenced.removeLast();\n+      argList.removeChild(unusedArg);\n+      compiler.reportCodeChange();\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}