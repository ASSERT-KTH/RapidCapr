{
    "patch": "Name name = functionNode.getFunctionName();\nBoolean isUnnamedFunction = false;\n\nif (name == null) {\n  name = new Name();\n  name.setIdentifier(\"\");\n  isUnnamedFunction = true;\n} else if (name.getIdentifier() != null \n  && !(name.getIdentifier().isEmpty())\n  && '$' == name.getIdentifier().charAt(0)) {\n  isUnnamedFunction = true;\n}\n\nNode node = newNode(Token.FUNCTION);\nNode newName = transform(name);\n\nif (isUnnamedFunction) {\n  // Old Rhino tagged the empty name node with the line number of the\n  // declaration.\n  newName.setLineno(functionNode.getLineno());\n  // TODO(bowdidge) Mark line number of paren correctly.\n  // Same problem as below - the left paren might not be on the\n  // same line as the function keyword.\n  int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n\n  newName.setCharno(position2charno(lpColumn));\n}\n\nnode.addChildToBack(newName);\nNode lp = newNode(Token.LP);\n\n// The left paren's complicated because it's not represented\n// by an AstNode, so there's nothing that has the actual line number that it\n// appeared on. If there's no function name, assume the paren was on the same\n// line as the function.\n// Also, if there were zero arguments, it means we should skip the creation\n// of the ARGUMENTS node.\nif (functionNode.getParams() != null \n  && !functionNode.getParams().isEmpty()) {\n  lp.setLineno(functionNode.getSourceStart());\n\n  int lparenCharno = functionNode.getLp() \n    + functionNode.getAbsolutePosition();\n  lp.setCharno(position2charno(lparenCharno));\n\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n}\nnode.addChildToBack(lp);\n\nNode bodyNode = transform(functionNode.getBody());\nparseDirectives(bodyNode);\nnode.addChildToBack(bodyNode);\n\nreturn node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..1172e436 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,62 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+Name name = functionNode.getFunctionName();\n+Boolean isUnnamedFunction = false;\n+\n+if (name == null) {\n+  name = new Name();\n+  name.setIdentifier(\"\");\n+  isUnnamedFunction = true;\n+} else if (name.getIdentifier() != null \n+  && !(name.getIdentifier().isEmpty())\n+  && '$' == name.getIdentifier().charAt(0)) {\n+  isUnnamedFunction = true;\n+}\n+\n+Node node = newNode(Token.FUNCTION);\n+Node newName = transform(name);\n+\n+if (isUnnamedFunction) {\n+  // Old Rhino tagged the empty name node with the line number of the\n+  // declaration.\n+  newName.setLineno(functionNode.getLineno());\n+  // TODO(bowdidge) Mark line number of paren correctly.\n+  // Same problem as below - the left paren might not be on the\n+  // same line as the function keyword.\n+  int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n+\n+  newName.setCharno(position2charno(lpColumn));\n+}\n+\n+node.addChildToBack(newName);\n+Node lp = newNode(Token.LP);\n+\n+// The left paren's complicated because it's not represented\n+// by an AstNode, so there's nothing that has the actual line number that it\n+// appeared on. If there's no function name, assume the paren was on the same\n+// line as the function.\n+// Also, if there were zero arguments, it means we should skip the creation\n+// of the ARGUMENTS node.\n+if (functionNode.getParams() != null \n+  && !functionNode.getParams().isEmpty()) {\n+  lp.setLineno(functionNode.getSourceStart());\n+\n+  int lparenCharno = functionNode.getLp() \n+    + functionNode.getAbsolutePosition();\n+  lp.setCharno(position2charno(lparenCharno));\n+\n+  for (AstNode param : functionNode.getParams()) {\n+    lp.addChildToBack(transform(param));\n+  }\n+}\n+node.addChildToBack(lp);\n+\n+Node bodyNode = transform(functionNode.getBody());\n+parseDirectives(bodyNode);\n+node.addChildToBack(bodyNode);\n+\n+return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable name is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}