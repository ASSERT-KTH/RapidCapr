{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            final RealPointValuePair[] next;\n            if (comparator.compare(reflected, original[original.length - 1]) <= 0) {\n                // compute the expanded simplex\n                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    next = expandedSimplex(original, expanded, comparator);\n                } else {\n                    next = reflectedSimplex(original, reflected, comparator);\n                }\n            } else {\n                next = reflectedSimplex(original, reflected, comparator);\n            }\n\n            if (next[0].getValue() < best.getValue()) {\n                // save the new best point in the simplex\n                simplex[0] = next[0];\n            } else {\n                // try to improve the new vertices\n                final RealPointValuePair[] current = currentSimplex(original, comparator);\n                if (comparator.compare(current[0], best) < 0) {\n                    simplex[0] = current[0];\n                } else {\n                    simplex = current;\n                }\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n            final RealPointValuePair[] next = contractedSimplex(original, contracted, comparator);\n\n            if (next[0].getValue() < best.getValue()) {\n                // save the new best point in the simplex\n                simplex[0] = next[0];\n            } else {\n                simplex = next;\n            }\n\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..739de36da 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,61 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+    while (true) {\n+        incrementIterationsCounter();\n \n-        while (true) {\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex.clone();\n+        final RealPointValuePair best = original[0];\n \n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            final RealPointValuePair[] next;\n+            if (comparator.compare(reflected, original[original.length - 1]) <= 0) {\n                 // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    next = expandedSimplex(original, expanded, comparator);\n+                } else {\n+                    next = reflectedSimplex(original, reflected, comparator);\n                 }\n+            } else {\n+                next = reflectedSimplex(original, reflected, comparator);\n+            }\n \n-                return;\n-\n+            if (next[0].getValue() < best.getValue()) {\n+                // save the new best point in the simplex\n+                simplex[0] = next[0];\n+            } else {\n+                // try to improve the new vertices\n+                final RealPointValuePair[] current = currentSimplex(original, comparator);\n+                if (comparator.compare(current[0], best) < 0) {\n+                    simplex[0] = current[0];\n+                } else {\n+                    simplex = current;\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        } else {\n \n-            // check convergence\n-                return;\n+            // compute the contracted simplex\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+            final RealPointValuePair[] next = contractedSimplex(original, contracted, comparator);\n+\n+            if (next[0].getValue() < best.getValue()) {\n+                // save the new best point in the simplex\n+                simplex[0] = next[0];\n+            } else {\n+                simplex = next;\n             }\n \n         }\n-\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}