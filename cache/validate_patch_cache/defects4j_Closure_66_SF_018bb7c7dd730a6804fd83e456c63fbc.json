{
    "patch": "public static double getTypedPercent(JSONObject jsonObject) {\n    int correct = 0;\n    int total = 0;\n    JSONArray questions = jsonObject.getJSONArray(\"questions\");\n    for (int i = 0; i < questions.length(); i++) {\n        JSONObject question = questions.getJSONObject(i);\n        JSONArray options = question.getJSONArray(\"options\");\n        String correctOption = \"\";\n        for (int j = 0; j < options.length(); j++) {\n            JSONObject option = options.getJSONObject(j);\n            if (option.getBoolean(\"isCorrect\")) {\n                correctOption = option.getString(\"value\");\n                break;\n            }\n        }\n        JSONArray userOptions = question.getJSONArray(\"userOptions\");\n        if (userOptions.length() == 1) {\n            String userOption = userOptions.getString(0);\n            if (userOption.equals(correctOption)) {\n                correct++;\n            }\n            total++;\n        }\n    }\n    return ((double) correct / total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..900cde68 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,32 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject jsonObject) {\n+    int correct = 0;\n+    int total = 0;\n+    JSONArray questions = jsonObject.getJSONArray(\"questions\");\n+    for (int i = 0; i < questions.length(); i++) {\n+        JSONObject question = questions.getJSONObject(i);\n+        JSONArray options = question.getJSONArray(\"options\");\n+        String correctOption = \"\";\n+        for (int j = 0; j < options.length(); j++) {\n+            JSONObject option = options.getJSONObject(j);\n+            if (option.getBoolean(\"isCorrect\")) {\n+                correctOption = option.getString(\"value\");\n+                break;\n+            }\n+        }\n+        JSONArray userOptions = question.getJSONArray(\"userOptions\");\n+        if (userOptions.length() == 1) {\n+            String userOption = userOptions.getString(0);\n+            if (userOption.equals(correctOption)) {\n+                correct++;\n+            }\n+            total++;\n+        }\n+    }\n+    return ((double) correct / total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}