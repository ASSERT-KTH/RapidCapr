{
    "patch": "ObjectType thisType = functionType.getTypeOfThis();\nif (thisType != null) {\n  Node callerNode = n.getParent();\n  if (callerNode.isGetProp() || callerNode.isGetElem()) {\n    ensureTyped(t, callerNode.getFirstChild(), thisType);\n  } else {\n    report(t, n, INVALID_THIS_TYPE);\n    ensureTyped(t, n);\n    return;\n  }\n}\n\nvisitParameterList(t, n, functionType);\n\n// Fix for null/void return types\nJSType returnType = functionType.getReturnType();\nif (returnType == null) {\n  returnType = JSType.UNKNOWN;\n} else if (returnType.isVoidType()) {\n  returnType = JSType.UNDEFINED;\n}\nensureTyped(t, n, returnType);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..a241a9e1 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+ObjectType thisType = functionType.getTypeOfThis();\n+if (thisType != null) {\n+  Node callerNode = n.getParent();\n+  if (callerNode.isGetProp() || callerNode.isGetElem()) {\n+    ensureTyped(t, callerNode.getFirstChild(), thisType);\n+  } else {\n+    report(t, n, INVALID_THIS_TYPE);\n+    ensureTyped(t, n);\n+    return;\n+  }\n+}\n+\n+visitParameterList(t, n, functionType);\n+\n+// Fix for null/void return types\n+JSType returnType = functionType.getReturnType();\n+if (returnType == null) {\n+  returnType = JSType.UNKNOWN;\n+} else if (returnType.isVoidType()) {\n+  returnType = JSType.UNDEFINED;\n+}\n+ensureTyped(t, n, returnType);\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}