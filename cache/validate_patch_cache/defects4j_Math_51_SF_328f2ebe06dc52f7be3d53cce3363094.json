{
    "patch": "import org.apache.commons.math.analysis.*;\nimport org.apache.commons.math.analysis.solvers.*;\nimport org.apache.commons.math.exception.*;\nimport org.apache.commons.math.util.*;\n\n/**\n * Implements the <a href=\"http://mathworld.wolfram.com/SecantMethod.html\">\n * Secant Method</a> for root-finding (approximating a zero of a univariate\n * real function).\n * <p>\n * The algorithm is based on successive approximations of the function by\n * secant lines.\n * </p>\n * <p>\n * The function should be continuous but not necessarily smooth.\n * </p>\n *\n * @version $Revision: 795133 $ $Date: 2009-07-15 19:59:57 -0300 (Wed, 15 Jul 2009) $\n */\npublic class SecantSolver extends AbstractUnivariateRealSolver {\n\n    /**\n     * Construct a solver with default accuracy (1e-6).\n     */\n    public SecantSolver() {\n        super(DEFAULT_ABSOLUTE_ACCURACY);\n    }\n\n    /**\n     * Construct a solver.\n     *\n     * @param absoluteAccuracy Absolute accuracy.\n     */\n    public SecantSolver(double absoluteAccuracy) {\n        super(absoluteAccuracy);\n    }\n\n    /**\n     * Construct a solver with given accuracies.\n     *\n     * @param relativeAccuracy Desired relative accuracy.\n     * @param absoluteAccuracy Desired absolute accuracy.\n     */\n    public SecantSolver(double relativeAccuracy, double absoluteAccuracy) {\n        super(relativeAccuracy, absoluteAccuracy);\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    protected final double doSolve()\n        throws TooManyEvaluationsException, NoBracketingException {\n        final double min = getMin();\n        final double max = getMax();\n\n        double a = min;\n        double b = max;\n        double fa = computeObjectiveValue(a);\n        double fb = computeObjectiveValue(b);\n\n        double next, previous, fnext;\n        if (FastMath.abs(fa) < FastMath.abs(fb)) {\n            previous = a;\n            next = b;\n            fnext = fb;\n        } else {\n            previous = b;\n            next = a;\n            fnext = fa;\n        }\n\n        double fprevious = fnext;\n        int i = 0;\n\n        while (i < maximalIterationCount) {\n            final double tmp1 = next - ((next - previous) * fnext) /\n                (fnext - fprevious);\n            double delta = FastMath.abs(tmp1 - next);\n            final double tolerance =\n                FastMath.max(getAbsoluteAccuracy(),\n                              getRelativeAccuracy() * FastMath.max(FastMath.abs(next),\n                                                                   FastMath.abs(tmp1)));\n            if (delta <= tolerance) {\n                setResult(tmp1, i);\n                return result;\n            }\n\n            // Prepare next iteration\n            double tmp2 = computeObjectiveValue(tmp1);\n            previous = next;\n            next = tmp1;\n            fprevious = fnext;\n            fnext = tmp2;\n            if (fnext == 0.0) {\n                setResult(next, i);\n                return result;\n            }\n\n            ++i;\n        }\n        throw new TooManyEvaluationsException(maximalIterationCount);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..c64a2c907 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,126 +125,108 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+import org.apache.commons.math.analysis.*;\n+import org.apache.commons.math.analysis.solvers.*;\n+import org.apache.commons.math.exception.*;\n+import org.apache.commons.math.util.*;\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n-\n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n+/**\n+ * Implements the <a href=\"http://mathworld.wolfram.com/SecantMethod.html\">\n+ * Secant Method</a> for root-finding (approximating a zero of a univariate\n+ * real function).\n+ * <p>\n+ * The algorithm is based on successive approximations of the function by\n+ * secant lines.\n+ * </p>\n+ * <p>\n+ * The function should be continuous but not necessarily smooth.\n+ * </p>\n+ *\n+ * @version $Revision: 795133 $ $Date: 2009-07-15 19:59:57 -0300 (Wed, 15 Jul 2009) $\n+ */\n+public class SecantSolver extends AbstractUnivariateRealSolver {\n \n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+    /**\n+     * Construct a solver with default accuracy (1e-6).\n+     */\n+    public SecantSolver() {\n+        super(DEFAULT_ABSOLUTE_ACCURACY);\n+    }\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param absoluteAccuracy Absolute accuracy.\n+     */\n+    public SecantSolver(double absoluteAccuracy) {\n+        super(absoluteAccuracy);\n+    }\n \n-        // Keep finding better approximations.\n-        while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+    /**\n+     * Construct a solver with given accuracies.\n+     *\n+     * @param relativeAccuracy Desired relative accuracy.\n+     * @param absoluteAccuracy Desired absolute accuracy.\n+     */\n+    public SecantSolver(double relativeAccuracy, double absoluteAccuracy) {\n+        super(relativeAccuracy, absoluteAccuracy);\n+    }\n \n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n-            }\n+    /** {@inheritDoc} */\n+    @Override\n+    protected final double doSolve()\n+        throws TooManyEvaluationsException, NoBracketingException {\n+        final double min = getMin();\n+        final double max = getMax();\n+\n+        double a = min;\n+        double b = max;\n+        double fa = computeObjectiveValue(a);\n+        double fb = computeObjectiveValue(b);\n+\n+        double next, previous, fnext;\n+        if (FastMath.abs(fa) < FastMath.abs(fb)) {\n+            previous = a;\n+            next = b;\n+            fnext = fb;\n+        } else {\n+            previous = b;\n+            next = a;\n+            fnext = fa;\n+        }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n-            } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n-                }\n+        double fprevious = fnext;\n+        int i = 0;\n+\n+        while (i < maximalIterationCount) {\n+            final double tmp1 = next - ((next - previous) * fnext) /\n+                (fnext - fprevious);\n+            double delta = FastMath.abs(tmp1 - next);\n+            final double tolerance =\n+                FastMath.max(getAbsoluteAccuracy(),\n+                              getRelativeAccuracy() * FastMath.max(FastMath.abs(next),\n+                                                                   FastMath.abs(tmp1)));\n+            if (delta <= tolerance) {\n+                setResult(tmp1, i);\n+                return result;\n             }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n \n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+            // Prepare next iteration\n+            double tmp2 = computeObjectiveValue(tmp1);\n+            previous = next;\n+            next = tmp1;\n+            fprevious = fnext;\n+            fnext = tmp2;\n+            if (fnext == 0.0) {\n+                setResult(next, i);\n+                return result;\n             }\n \n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n-                }\n-            }\n+            ++i;\n         }\n+        throw new TooManyEvaluationsException(maximalIterationCount);\n     }\n+}\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}