{
    "patch": "        iDuration = duration;\n        if (duration == 0) {\n            iYears = iMonths = iWeeks = iDays = iHours = iMinutes = iSeconds = iMillis = 0;\n        } else {\n            long remainder = duration;\n            remainder = setField(DurationFieldType.years(), remainder);\n            remainder = setField(DurationFieldType.months(), remainder);\n            remainder = setField(DurationFieldType.weeks(), remainder);\n            remainder = setField(DurationFieldType.days(), remainder);\n            remainder = setField(DurationFieldType.hours(), remainder);\n            remainder = setField(DurationFieldType.minutes(), remainder);\n            remainder = setField(DurationFieldType.seconds(), remainder);\n            setField(DurationFieldType.millis(), remainder);\n        }\n    }\n    \n    // helper method to set a single field and return the remaining duration\n    private long setField(DurationFieldType fieldType, long duration) {\n        if (duration == 0) {\n            return 0;\n        }\n        PeriodField field = fieldType.getField(iPeriodType);\n        int value = field.getDurationField().getDifference(duration, iDurationField);\n        if (value > 0) {\n            iDuration = fieldType.getFieldType().getField(iPeriodType).getField(iDurationField).add(iDuration, value);\n            field.set(this, value);\n            duration -= field.getFieldType().getField(iPeriodType).getField(iDurationField).multiplyByValue(value);\n        }\n        return duration;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..506300cb 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,35 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+        iDuration = duration;\n+        if (duration == 0) {\n+            iYears = iMonths = iWeeks = iDays = iHours = iMinutes = iSeconds = iMillis = 0;\n+        } else {\n+            long remainder = duration;\n+            remainder = setField(DurationFieldType.years(), remainder);\n+            remainder = setField(DurationFieldType.months(), remainder);\n+            remainder = setField(DurationFieldType.weeks(), remainder);\n+            remainder = setField(DurationFieldType.days(), remainder);\n+            remainder = setField(DurationFieldType.hours(), remainder);\n+            remainder = setField(DurationFieldType.minutes(), remainder);\n+            remainder = setField(DurationFieldType.seconds(), remainder);\n+            setField(DurationFieldType.millis(), remainder);\n+        }\n     }\n+    \n+    // helper method to set a single field and return the remaining duration\n+    private long setField(DurationFieldType fieldType, long duration) {\n+        if (duration == 0) {\n+            return 0;\n+        }\n+        PeriodField field = fieldType.getField(iPeriodType);\n+        int value = field.getDurationField().getDifference(duration, iDurationField);\n+        if (value > 0) {\n+            iDuration = fieldType.getFieldType().getField(iPeriodType).getField(iDurationField).add(iDuration, value);\n+            field.set(this, value);\n+            duration -= field.getFieldType().getField(iPeriodType).getField(iDurationField).multiplyByValue(value);\n+        }\n+        return duration;\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}