{
    "patch": "      // Functions with explcit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      JSType thisType = functionType.getTypeOfThis();\n      String thisTypeName = thisType == null ? \"\" : thisType.toString();\n      if (!thisTypeName.isEmpty() && n.getParent().getToken() != Token.GETPROP\n          && n.getParent().getToken() != Token.GETELEM) {\n        report(t, n, INVALID_THIS_TYPE, thisTypeName);\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..7cecc25c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explcit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      JSType thisType = functionType.getTypeOfThis();\n+      String thisTypeName = thisType == null ? \"\" : thisType.toString();\n+      if (!thisTypeName.isEmpty() && n.getParent().getToken() != Token.GETPROP\n+          && n.getParent().getToken() != Token.GETELEM) {\n+        report(t, n, INVALID_THIS_TYPE, thisTypeName);\n+      }\n+\n+      visitParameterList(t, n, functionType);\n+      ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}