{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition eig = new EigenDecomposition(m, 0); // Add 0 as second param to ask for all eigenvalues\n    final double[] eigenValues = eig.getRealEigenvalues();\n    for (int i = 0; i < n; i++) { // set negative eigenvalues to 0\n        if (eigenValues[i] < 0) {\n            eigenValues[i] = 0;\n        }\n    }\n    final RealMatrix sqrtM = eig.getV().multiply(MatrixUtils.createRealDiagonalMatrix(sqrt(eigenValues))).multiply(eig.getV().transpose()); // Compute the square root of the diagonal matrix D by performing a square root on the non-zero diagonal elements, and then computing V * sqrt(D) * V^T\n    return sqrtM;\n}\n\nprivate double[] sqrt(double[] arr) {\n    int len = arr.length;\n    double[] result = new double[len];\n    for (int i = 0; i < len; i++) {\n        result[i] = Math.sqrt(arr[i]);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..889c7b4f5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition eig = new EigenDecomposition(m, 0); // Add 0 as second param to ask for all eigenvalues\n+    final double[] eigenValues = eig.getRealEigenvalues();\n+    for (int i = 0; i < n; i++) { // set negative eigenvalues to 0\n+        if (eigenValues[i] < 0) {\n+            eigenValues[i] = 0;\n+        }\n     }\n+    final RealMatrix sqrtM = eig.getV().multiply(MatrixUtils.createRealDiagonalMatrix(sqrt(eigenValues))).multiply(eig.getV().transpose()); // Compute the square root of the diagonal matrix D by performing a square root on the non-zero diagonal elements, and then computing V * sqrt(D) * V^T\n+    return sqrtM;\n+}\n+\n+private double[] sqrt(double[] arr) {\n+    int len = arr.length;\n+    double[] result = new double[len];\n+    for (int i = 0; i < len; i++) {\n+        result[i] = Math.sqrt(arr[i]);\n+    }\n+    return result;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}