{
    "patch": "        // Traverse each block from reference's block upwards.\n        for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n          if (block.isFunction) {\n            // If the block is a function, we don't know if the variable is modified elsewhere.\n            return false;\n          } else if (block.isLoop) {\n            // If this assignment is inside a loop, the variable may be assigned multiple times.\n            return false;\n          }\n        }\n        \n        // The variable is assigned only once in its lifetime.\n        return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..abd0fe99 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        // Traverse each block from reference's block upwards.\n+        for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n+          if (block.isFunction) {\n+            // If the block is a function, we don't know if the variable is modified elsewhere.\n+            return false;\n+          } else if (block.isLoop) {\n+            // If this assignment is inside a loop, the variable may be assigned multiple times.\n+            return false;\n+          }\n+        }\n+        \n+        // The variable is assigned only once in its lifetime.\n+        return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}