{
    "patch": "public double[] fit() throws NotStrictlyPositiveException {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n    final double[] weights = new double[getObservations().getSize()];\n    Arrays.fill(weights, 1);\n    final WeightedObservedPoints points = new WeightedObservedPoints();\n    for (WeightedObservedPoint obs : getObservations()) {\n        points.add(obs.getX(), obs.getY());\n    }\n    return fit(new Gaussian.Parametric(), guess, points.toList(), Arrays.asList(weights));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..183001c10 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -116,10 +116,16 @@ public class GaussianFitter extends CurveFitter {\n      * @return the parameters of the Gaussian function that best fits the\n      * observed points (in the same order as above).\n      */\n-    public double[] fit() {\n-        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+public double[] fit() throws NotStrictlyPositiveException {\n+    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n+    final double[] weights = new double[getObservations().getSize()];\n+    Arrays.fill(weights, 1);\n+    final WeightedObservedPoints points = new WeightedObservedPoints();\n+    for (WeightedObservedPoint obs : getObservations()) {\n+        points.add(obs.getX(), obs.getY());\n     }\n+    return fit(new Gaussian.Parametric(), guess, points.toList(), Arrays.asList(weights));\n+}\n \n     /**\n      * Guesses the parameters {@code norm}, {@code mean}, and {@code sigma}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}