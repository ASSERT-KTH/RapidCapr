{
    "patch": "```\n// catch cases where min, initial, and max do not bracket the root, or if initial guess is not finite, otherwise proceed with full Brent algorithm\nif(!Double.isFinite(initial) || !(f.value(min) * f.value(initial) <= 0 && f.value(max) * f.value(initial) <= 0)) {\n    throw new IllegalArgumentException(\"Function values at endpoints do not have different signs or the initial guess is infinite or NaN. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + f.value(min) + \",\" + f.value(max) + \"], Initial guess value: \" + f.value(initial));\n}\n\n// full Brent algorithm starting with provided initial guess\nreturn solve(f, min, f.value(min), max, f.value(max), initial, f.value(initial));\n```\nThis hunk first checks if the initial guess is finite and if min, initial, and max bracket the root. If not, it throws an IllegalArgumentException. Otherwise, it proceeds with the full Brent algorithm by calling the `solve` function with the corresponding arguments.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..d4bfbd7c2 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,16 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+```\n+// catch cases where min, initial, and max do not bracket the root, or if initial guess is not finite, otherwise proceed with full Brent algorithm\n+if(!Double.isFinite(initial) || !(f.value(min) * f.value(initial) <= 0 && f.value(max) * f.value(initial) <= 0)) {\n+    throw new IllegalArgumentException(\"Function values at endpoints do not have different signs or the initial guess is infinite or NaN. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + f.value(min) + \",\" + f.value(max) + \"], Initial guess value: \" + f.value(initial));\n+}\n+\n+// full Brent algorithm starting with provided initial guess\n+return solve(f, min, f.value(min), max, f.value(max), initial, f.value(initial));\n+```\n+This hunk first checks if the initial guess is finite and if min, initial, and max bracket the root. If not, it throws an IllegalArgumentException. Otherwise, it proceeds with the full Brent algorithm by calling the `solve` function with the corresponding arguments.\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}