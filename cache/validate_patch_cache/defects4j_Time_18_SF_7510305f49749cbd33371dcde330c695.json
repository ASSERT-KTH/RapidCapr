{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException {\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n    if (isDateInJulianEra(year, monthOfYear, dayOfMonth)) {\n        return iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } else if (isDateInGregorianEra(year, monthOfYear, dayOfMonth)) {\n        return iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } else {\n        throw new IllegalArgumentException(\"Specified date does not exist\");\n    }\n}\n\n/**\n * Determines if the specified date is in the Julian calendar era.\n *\n * @param year the year\n * @param monthOfYear the month of the year\n * @param dayOfMonth the day of the month\n * @return true if the date is in the Julian calendar era\n */\nprivate boolean isDateInJulianEra(int year, int monthOfYear, int dayOfMonth) {\n    if (year < 1582) {\n        return true; // Date before Gregorian reform is in Julian era.\n    } else if (year > 1582) {\n        return false; // Date after Gregorian reform is in Gregorian era.\n    } else {\n        // Date is in the year of the Gregorian reform. Check if before or after the cutover date.\n        if (monthOfYear < 10) {\n            return true; // Date before cutover is in Julian era.\n        } else if (monthOfYear > 10) {\n            return false; // Date after cutover is in Gregorian era.\n        } else {\n            return dayOfMonth <= 4; // Date on or before cutover is in Julian era.\n        }\n    }\n}\n\n/**\n * Determines if the specified date is in the Gregorian calendar era.\n *\n * @param year the year\n * @param monthOfYear the month of the year\n * @param dayOfMonth the day of the month\n * @return true if the date is in the Gregorian calendar era\n */\nprivate boolean isDateInGregorianEra(int year, int monthOfYear, int dayOfMonth) {\n    if (year < 1582) {\n        return false; // Date before Gregorian reform is in Julian era.\n    } else if (year > 1582) {\n        return true; // Date after Gregorian reform is in Gregorian era.\n    } else {\n        // Date is in the year of the Gregorian reform. Check if before or after the cutover date.\n        if (monthOfYear < 10) {\n            return false; // Date before cutover is in Julian era.\n        } else if (monthOfYear > 10) {\n            return true; // Date after cutover is in Gregorian era.\n        } else {\n            return dayOfMonth >= 15; // Date on or after cutover is in Gregorian era.\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..c789c3a3 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,35 +347,71 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+                              int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond)\n+        throws IllegalArgumentException {\n+    Chronology base;\n+    if ((base = getBase()) != null) {\n+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    }\n+    if (isDateInJulianEra(year, monthOfYear, dayOfMonth)) {\n+        return iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    } else if (isDateInGregorianEra(year, monthOfYear, dayOfMonth)) {\n+        return iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    } else {\n+        throw new IllegalArgumentException(\"Specified date does not exist\");\n+    }\n+}\n+\n+/**\n+ * Determines if the specified date is in the Julian calendar era.\n+ *\n+ * @param year the year\n+ * @param monthOfYear the month of the year\n+ * @param dayOfMonth the day of the month\n+ * @return true if the date is in the Julian calendar era\n+ */\n+private boolean isDateInJulianEra(int year, int monthOfYear, int dayOfMonth) {\n+    if (year < 1582) {\n+        return true; // Date before Gregorian reform is in Julian era.\n+    } else if (year > 1582) {\n+        return false; // Date after Gregorian reform is in Gregorian era.\n+    } else {\n+        // Date is in the year of the Gregorian reform. Check if before or after the cutover date.\n+        if (monthOfYear < 10) {\n+            return true; // Date before cutover is in Julian era.\n+        } else if (monthOfYear > 10) {\n+            return false; // Date after cutover is in Gregorian era.\n+        } else {\n+            return dayOfMonth <= 4; // Date on or before cutover is in Julian era.\n         }\n+    }\n+}\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n-            }\n+/**\n+ * Determines if the specified date is in the Gregorian calendar era.\n+ *\n+ * @param year the year\n+ * @param monthOfYear the month of the year\n+ * @param dayOfMonth the day of the month\n+ * @return true if the date is in the Gregorian calendar era\n+ */\n+private boolean isDateInGregorianEra(int year, int monthOfYear, int dayOfMonth) {\n+    if (year < 1582) {\n+        return false; // Date before Gregorian reform is in Julian era.\n+    } else if (year > 1582) {\n+        return true; // Date after Gregorian reform is in Gregorian era.\n+    } else {\n+        // Date is in the year of the Gregorian reform. Check if before or after the cutover date.\n+        if (monthOfYear < 10) {\n+            return false; // Date before cutover is in Julian era.\n+        } else if (monthOfYear > 10) {\n+            return true; // Date after cutover is in Gregorian era.\n+        } else {\n+            return dayOfMonth >= 15; // Date on or after cutover is in Gregorian era.\n         }\n-        return instant;\n     }\n+}\n \n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}