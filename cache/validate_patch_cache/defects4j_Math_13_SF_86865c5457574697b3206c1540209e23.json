{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final double eps = 1e-12;\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealVector eigenvalues = dec.getRealEigenvalues();\n    final RealMatrix eigenvectors = dec.getV();\n    final int nEig = eigenvalues.getDimension();\n    final RealVector sqrtEigenvalues = new ArrayRealVector(nEig);\n    for (int i = 0; i < nEig; i++) {\n        final double e = eigenvalues.getEntry(i);\n        sqrtEigenvalues.setEntry(i, e > eps ? FastMath.sqrt(e) : 0);\n    }\n    final RealMatrix sqrt = eigenvectors.multiply(\n            MatrixUtils.createRealDiagonalMatrix(sqrtEigenvalues))\n            .multiply(eigenvectors.transpose());\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5356743f5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final double eps = 1e-12;\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealVector eigenvalues = dec.getRealEigenvalues();\n+    final RealMatrix eigenvectors = dec.getV();\n+    final int nEig = eigenvalues.getDimension();\n+    final RealVector sqrtEigenvalues = new ArrayRealVector(nEig);\n+    for (int i = 0; i < nEig; i++) {\n+        final double e = eigenvalues.getEntry(i);\n+        sqrtEigenvalues.setEntry(i, e > eps ? FastMath.sqrt(e) : 0);\n     }\n+    final RealMatrix sqrt = eigenvectors.multiply(\n+            MatrixUtils.createRealDiagonalMatrix(sqrtEigenvalues))\n+            .multiply(eigenvectors.transpose());\n+    return sqrt;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}