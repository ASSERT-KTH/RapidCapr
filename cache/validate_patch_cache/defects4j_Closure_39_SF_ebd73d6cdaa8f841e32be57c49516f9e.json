{
    "patch": "public boolean canBeCalled() {\n    return !isUnknownType() && (!isFunctionType() || isInterface() || isConstructor() || this.isStructuralInterface());\n}\n\n@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName() && !isFunctionType()) {\n        return getReferenceName();\n    } else if (prettyPrint) {\n        // Don't pretty print recursively.\n        prettyPrint = false;\n        // Use a tree set so that the properties are sorted.\n        Set<String> propertyNames = Sets.newTreeSet();\n        for (ObjectType current = this;\n             current != null && !current.isNativeObjectType()\n                     && propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n             current = current.getImplicitPrototype()) {\n            propertyNames.addAll(current.getOwnPropertyNames());\n        }\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n\n        int i = 0;\n        for (String property : propertyNames) {\n\n            JSType propertyType = getPropertyType(property);\n            if (propertyType == null) continue;\n\n            // if the property is the prototype object and its value is an to a function,\n            // we don't want to render it.\n            if (property.equals(\"prototype\") && propertyType.isFunctionType()) {\n                continue;\n            }\n\n            if (i > 0) {\n                sb.append(\", \");\n            }\n\n            sb.append(property);\n            sb.append(\": \");\n            sb.append(propertyType.toString());\n\n            ++i;\n            if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n                sb.append(\", ...\");\n                break;\n            }\n        }\n\n        sb.append(\"}\");\n\n        prettyPrint = true;\n        return sb.toString();\n    } else {\n        return \"{...}\";\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..dce5dbe3 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,64 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+public boolean canBeCalled() {\n+    return !isUnknownType() && (!isFunctionType() || isInterface() || isConstructor() || this.isStructuralInterface());\n+}\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n-      return getReferenceName();\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n+    if (hasReferenceName() && !isFunctionType()) {\n+        return getReferenceName();\n     } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n+        // Don't pretty print recursively.\n+        prettyPrint = false;\n+        // Use a tree set so that the properties are sorted.\n+        Set<String> propertyNames = Sets.newTreeSet();\n+        for (ObjectType current = this;\n+             current != null && !current.isNativeObjectType()\n+                     && propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+             current = current.getImplicitPrototype()) {\n+            propertyNames.addAll(current.getOwnPropertyNames());\n+        }\n \n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"{\");\n \n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n+        int i = 0;\n+        for (String property : propertyNames) {\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+            JSType propertyType = getPropertyType(property);\n+            if (propertyType == null) continue;\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+            // if the property is the prototype object and its value is an to a function,\n+            // we don't want to render it.\n+            if (property.equals(\"prototype\") && propertyType.isFunctionType()) {\n+                continue;\n+            }\n+\n+            if (i > 0) {\n+                sb.append(\", \");\n+            }\n+\n+            sb.append(property);\n+            sb.append(\": \");\n+            sb.append(propertyType.toString());\n+\n+            ++i;\n+            if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+                sb.append(\", ...\");\n+                break;\n+            }\n         }\n-      }\n \n-      sb.append(\"}\");\n+        sb.append(\"}\");\n \n-      prettyPrint = true;\n-      return sb.toString();\n+        prettyPrint = true;\n+        return sb.toString();\n     } else {\n-      return \"{...}\";\n+        return \"{...}\";\n     }\n-  }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}