{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    int year = iDefaultYear;\n    for (int i = 0; i < count; i++) {\n        SavedField savedField = savedFields[i];\n        DateTimeField field = savedField.iField;\n        if (field.getType() == DateTimeFieldType.year()) {\n            year = savedField.iValue;\n            break;\n        }\n    }\n    if (year != iDefaultYear) {\n        // set the base year and parse remaining fields\n        try {\n            millis = iChrono.year().set(millis, year);\n        } catch (IllegalFieldValueException e2) {\n            String message = e2.getMessage().replace(Integer.toString(year), Integer.toString(iDefaultYear));\n            throw new IllegalArgumentException(message, e2);\n        }\n        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            DateTimeField field = savedField.iField;\n            if (field.getType() != DateTimeFieldType.year()) {\n                millis = savedField.set(millis, resetFields);\n            }\n        }\n    } else {\n        // reset context state back to original\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        StringBuilder buf = new StringBuilder(64);\n        buf.append(\"Cannot parse \\\"\").append(text).append(\"\\\": \");\n        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            DateTimeField field = savedField.iField;\n            int value = savedField.iValue;\n            buf.append(field.getName()).append('=').append(value);\n            if (i < count - 1) {\n                buf.append(\", \");\n            }\n        }\n        throw new IllegalArgumentException(buf.toString(), e);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..90b89a1f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,59 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    int year = iDefaultYear;\n+    for (int i = 0; i < count; i++) {\n+        SavedField savedField = savedFields[i];\n+        DateTimeField field = savedField.iField;\n+        if (field.getType() == DateTimeFieldType.year()) {\n+            year = savedField.iValue;\n+            break;\n+        }\n+    }\n+    if (year != iDefaultYear) {\n+        // set the base year and parse remaining fields\n+        try {\n+            millis = iChrono.year().set(millis, year);\n+        } catch (IllegalFieldValueException e2) {\n+            String message = e2.getMessage().replace(Integer.toString(year), Integer.toString(iDefaultYear));\n+            throw new IllegalArgumentException(message, e2);\n+        }\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            DateTimeField field = savedField.iField;\n+            if (field.getType() != DateTimeFieldType.year()) {\n+                millis = savedField.set(millis, resetFields);\n+            }\n+        }\n+    } else {\n+        // reset context state back to original\n+        if (iSavedFieldsShared) {\n+            iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n+            iSavedFieldsShared = false;\n+        }\n+        sort(savedFields, count);\n+        StringBuilder buf = new StringBuilder(64);\n+        buf.append(\"Cannot parse \\\"\").append(text).append(\"\\\": \");\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            DateTimeField field = savedField.iField;\n+            int value = savedField.iValue;\n+            buf.append(field.getName()).append('=').append(value);\n+            if (i < count - 1) {\n+                buf.append(\", \");\n+            }\n+        }\n+        throw new IllegalArgumentException(buf.toString(), e);\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}