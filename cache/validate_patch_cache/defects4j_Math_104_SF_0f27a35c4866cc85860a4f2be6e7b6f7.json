{
    "patch": "public static double regularizedGammaP(double a, double x)\n        throws MaxIterationsExceededException, NotStrictlyPositiveException {\n    double ret;\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0 || x < 0) {\n        ret = Double.NaN;\n    } else if (x == 0) {\n        ret = 0;\n    } else {\n        // Computes the incomplete Gamma integral\n        ret = Gamma.regularizedGammaP(a, x);\n\n        // Checks if the result is actually 1\n        if (Double.isNaN(ret) || Double.isInfinite(ret)) {\n            ret = 1;\n        }\n    }\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..ffcb758bd 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,24 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x)\n+        throws MaxIterationsExceededException, NotStrictlyPositiveException {\n+    double ret;\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0 || x < 0) {\n+        ret = Double.NaN;\n+    } else if (x == 0) {\n+        ret = 0;\n+    } else {\n+        // Computes the incomplete Gamma integral\n+        ret = Gamma.regularizedGammaP(a, x);\n+\n+        // Checks if the result is actually 1\n+        if (Double.isNaN(ret) || Double.isInfinite(ret)) {\n+            ret = 1;\n+        }\n+    }\n+    return ret;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}