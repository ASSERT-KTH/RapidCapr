{
    "patch": "public static String getProp(String propertyName) {\n    if (propertyName == null || propertyName.trim().length() == 0) {\n        throw new IllegalArgumentException(\"propertyName cannot be null or empty\");\n    }\n    String propertyValue = null;\n    try {\n        FileInputStream fis = new FileInputStream(\"conf/config.properties\");\n        Properties prop = new Properties();\n        prop.load(fis);\n        fis.close();\n        propertyValue = prop.getProperty(propertyName);\n    } catch (FileNotFoundException e) {\n        System.out.println(\"FileNotFound: \" + e.getMessage());\n    } catch (IOException e) {\n        System.out.println(\"IOException: \" + e.getMessage());\n    }\n    return propertyValue;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..9ce41336 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getProp(String propertyName) {\n+    if (propertyName == null || propertyName.trim().length() == 0) {\n+        throw new IllegalArgumentException(\"propertyName cannot be null or empty\");\n+    }\n+    String propertyValue = null;\n+    try {\n+        FileInputStream fis = new FileInputStream(\"conf/config.properties\");\n+        Properties prop = new Properties();\n+        prop.load(fis);\n+        fis.close();\n+        propertyValue = prop.getProperty(propertyName);\n+    } catch (FileNotFoundException e) {\n+        System.out.println(\"FileNotFound: \" + e.getMessage());\n+    } catch (IOException e) {\n+        System.out.println(\"IOException: \" + e.getMessage());\n+    }\n+    return propertyValue;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}