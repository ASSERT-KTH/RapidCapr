{
    "patch": "      if (n.getJSDocInfo() != null && n.getJSDocInfo().isConstructor()) {\n        // Don't traverse constructors.\n        return false;\n      }\n\n      Node nameNode = n.getFirstChild();\n      if (nameNode == null) {\n        // anonymous function expression\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      boolean isObjectLiteral = parent.getType() == Token.OBJECTLIT;\n      if (!(nameNode.getType() == Token.NAME && !isObjectLiteral ||\n            nameNode.getType() == Token.ASSIGN &&\n                nameNode.getFirstChild().getType() == Token.GETPROP &&\n                nameNode.getFirstChild().getLastChild().getString().equals(\"prototype\") ||\n            nameNode.getType() == Token.GETPROP &&\n                nameNode.getLastChild().getString().equals(\"prototype\") ||\n            isObjectLiteral && NodeUtil.isObjectLitProperty(parent, n))) {\n        return false;\n      }\n\n      // don't traverse functions with a `@this` annotation\n      if (n.getJSDocInfo() != null && n.getJSDocInfo().hasThisType()) {\n        return false;\n      }\n\n      // only traverse functions at top level or with a name and a assign node\n      return parent.getType() == Token.SCRIPT ||\n             nameNode.getNext().getType() == Token.SCRIPT ||\n             nameNode.getNext().getType() == Token.ASSIGN;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..16353df7 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,43 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getJSDocInfo() != null && n.getJSDocInfo().isConstructor()) {\n+        // Don't traverse constructors.\n+        return false;\n+      }\n+\n+      Node nameNode = n.getFirstChild();\n+      if (nameNode == null) {\n+        // anonymous function expression\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      boolean isObjectLiteral = parent.getType() == Token.OBJECTLIT;\n+      if (!(nameNode.getType() == Token.NAME && !isObjectLiteral ||\n+            nameNode.getType() == Token.ASSIGN &&\n+                nameNode.getFirstChild().getType() == Token.GETPROP &&\n+                nameNode.getFirstChild().getLastChild().getString().equals(\"prototype\") ||\n+            nameNode.getType() == Token.GETPROP &&\n+                nameNode.getLastChild().getString().equals(\"prototype\") ||\n+            isObjectLiteral && NodeUtil.isObjectLitProperty(parent, n))) {\n+        return false;\n+      }\n+\n+      // don't traverse functions with a `@this` annotation\n+      if (n.getJSDocInfo() != null && n.getJSDocInfo().hasThisType()) {\n+        return false;\n+      }\n+\n+      // only traverse functions at top level or with a name and a assign node\n+      return parent.getType() == Token.SCRIPT ||\n+             nameNode.getNext().getType() == Token.SCRIPT ||\n+             nameNode.getNext().getType() == Token.ASSIGN;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}