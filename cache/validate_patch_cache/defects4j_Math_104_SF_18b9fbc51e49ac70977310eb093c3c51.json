{
    "patch": "import static org.junit.Assert.assertEquals;\n\npublic class RegularizedGammaFunction {\n\n    public static double regularizedGamma(double a, double x) {\n\n        if (x < 0.0) {\n            throw new IllegalArgumentException(\"x must be positive\");\n        }\n\n        if (a <= 0.0) {\n            throw new IllegalArgumentException(\"a must be positive\");\n        }\n\n        if (x == 0.0) {\n            return 0.0;\n        }\n\n        double convergedSum = convergeSum(a, x);\n        double gammavalue = Math.exp(logGamma(a));\n        double result = (convergedSum * Math.exp(-x + a * Math.log(x)))/ gammavalue;\n        return result;\n    }\n\n    public static double convergeSum(double a, double x) {\n        double tolerence = 1e-16;\n        double maxIterations = 1000;\n        int i = 1;\n        double term = 1.0 / a;\n        double sum = term;\n\n        while (i <= maxIterations && Math.abs(term) > tolerence && sum < Double.POSITIVE_INFINITY) {\n            term *= x / (a + i);\n            sum += term;\n            i++;\n        }\n        if (i >= maxIterations) {\n            throw new IllegalArgumentException(\"Max iterations reached\");\n        }\n        return sum;\n    }\n\n    public static double logGamma(double x) {\n\n        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n\n        double sum = 1.0/ 30.0;\n        sum = sum * tmp + 1.0/105.0 ;\n        sum = sum * tmp - 1.0/280.0 ;\n        sum = sum * tmp + 1.0/504.0 ;\n        sum = sum * tmp - 1.0/720.0 ;\n        sum = sum * tmp + 1.0/990.0 ;\n        sum = sum * tmp - 1.0/1320.0;\n        sum = sum * tmp + 1.0/1680.0;\n\n        double result = sum + Math.log(2.5066282746310005 / x);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        double a = 0.5;\n        double x = 1.0;\n        double gamma = regularizedGamma(a, x);\n        System.out.println(gamma);\n    }\n\n    @org.junit.Test\n    public void testRegularizedGammaPositivePositive() {\n        double expected = 0.632120558828558;\n        double a = 0.5;\n        double x = 1.0;\n        double actualP = RegularizedGammaFunction.regularizedGamma(a, x);\n        assertEquals(expected, actualP, 10e-15);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..1923a615a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,81 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import static org.junit.Assert.assertEquals;\n+\n+public class RegularizedGammaFunction {\n+\n+    public static double regularizedGamma(double a, double x) {\n+\n+        if (x < 0.0) {\n+            throw new IllegalArgumentException(\"x must be positive\");\n+        }\n+\n+        if (a <= 0.0) {\n+            throw new IllegalArgumentException(\"a must be positive\");\n+        }\n+\n+        if (x == 0.0) {\n+            return 0.0;\n+        }\n+\n+        double convergedSum = convergeSum(a, x);\n+        double gammavalue = Math.exp(logGamma(a));\n+        double result = (convergedSum * Math.exp(-x + a * Math.log(x)))/ gammavalue;\n+        return result;\n+    }\n+\n+    public static double convergeSum(double a, double x) {\n+        double tolerence = 1e-16;\n+        double maxIterations = 1000;\n+        int i = 1;\n+        double term = 1.0 / a;\n+        double sum = term;\n+\n+        while (i <= maxIterations && Math.abs(term) > tolerence && sum < Double.POSITIVE_INFINITY) {\n+            term *= x / (a + i);\n+            sum += term;\n+            i++;\n+        }\n+        if (i >= maxIterations) {\n+            throw new IllegalArgumentException(\"Max iterations reached\");\n+        }\n+        return sum;\n+    }\n+\n+    public static double logGamma(double x) {\n+\n+        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+\n+        double sum = 1.0/ 30.0;\n+        sum = sum * tmp + 1.0/105.0 ;\n+        sum = sum * tmp - 1.0/280.0 ;\n+        sum = sum * tmp + 1.0/504.0 ;\n+        sum = sum * tmp - 1.0/720.0 ;\n+        sum = sum * tmp + 1.0/990.0 ;\n+        sum = sum * tmp - 1.0/1320.0;\n+        sum = sum * tmp + 1.0/1680.0;\n+\n+        double result = sum + Math.log(2.5066282746310005 / x);\n+        return result;\n+    }\n+\n+    public static void main(String[] args) {\n+        double a = 0.5;\n+        double x = 1.0;\n+        double gamma = regularizedGamma(a, x);\n+        System.out.println(gamma);\n+    }\n+\n+    @org.junit.Test\n+    public void testRegularizedGammaPositivePositive() {\n+        double expected = 0.632120558828558;\n+        double a = 0.5;\n+        double x = 1.0;\n+        double actualP = RegularizedGammaFunction.regularizedGamma(a, x);\n+        assertEquals(expected, actualP, 10e-15);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}