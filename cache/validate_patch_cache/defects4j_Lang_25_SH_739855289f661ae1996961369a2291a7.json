{
    "patch": "    public static String unescape(String s) {\n        StringBuffer sbuf = new StringBuffer ();\n        int l  = s.length();\n        int ch = -1;\n        int b, sumb = 0;\n        for (int i = 0, more = -1; i < l;) {\n            /* Get next byte b from URL segment s */\n            switch (ch = s.charAt(i++)) {\n                case '%':\n                    ch = s.charAt(i++);\n                    int hb = (Character.isDigit ((char) ch) \n                          ? ch - '0'\n                          : 10+Character.toLowerCase((char) ch) - 'a') & 0xF;\n                    ch = s.charAt(i++);\n                    int lb = (Character.isDigit ((char) ch)\n                          ? ch - '0'\n                          : 10+Character.toLowerCase((char) ch) - 'a') & 0xF;\n                    b = (hb << 4) | lb;\n                    break;\n                case '+':\n                    b = ' ';\n                    break;\n                default:\n                    b = ch;\n            }\n            /* Decode byte b as UTF-8, sumb collects incomplete utf-8 bytes */\n            if ((b & 0xc0) == 0x80) {\t\t\t// (1)\n                sumb = (sumb << 6) | (b & 0x3f);\t// (2)\n                if (--more == 0) \n                \tsbuf.append((char)sumb); // (3)\n            } else if ((b & 0x80) == 0x00) {\t\t//  (4) (5)\n                sbuf.append((char)b);\t\t\t// (4)\n            } else if ((b & 0xe0) == 0xc0) {\t\t// (6)\n                sumb = b & 0x1f;\n                more = 1;\t\t\t\t// (2)\n            } else if ((b & 0xf0) == 0xe0) {\t\t// (6)\n                sumb = b & 0x0f;\n                more = 2;\t\t\t\t// (2)\n            } else if ((b & 0xf8) == 0xf0) {\t\t// (6)\n                sumb = b & 0x07;\n                more = 3;\t\t\t\t// (2)\n            } else if ((b & 0xfc) == 0xf8) {\t\t// (6)\n                sumb = b & 0x03;\n                more = 4;\t\t\t\t// (2)\n            } else /*if ((b & 0xfe) == 0xfc)*/ {\t// (6)\n                sumb = b & 0x01;\n                more = 5;\t\t\t\t// (2)\n            }\n        }\n        return sbuf.toString();\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}