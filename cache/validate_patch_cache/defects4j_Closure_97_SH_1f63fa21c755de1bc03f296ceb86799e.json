{
    "patch": "case Token.URSH:\n  // JavaScript handles zero shifts on signed numbers differently than\n  // Java as an Java int can not represent the unsigned 32-bit number\n  // where JavaScript can so use a long here.\n  result = lval < 0 ? ((long)(\"\" + (int)lvalInt).hashCode() << -rvalInt)\n              >>> (32 + rvalInt) :\n            lvalInt >>> rvalInt;\n  break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..02e50678 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,14 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+case Token.URSH:\n+  // JavaScript handles zero shifts on signed numbers differently than\n+  // Java as an Java int can not represent the unsigned 32-bit number\n+  // where JavaScript can so use a long here.\n+  result = lval < 0 ? ((long)(\"\" + (int)lvalInt).hashCode() << -rvalInt)\n+              >>> (32 + rvalInt) :\n+            lvalInt >>> rvalInt;\n+  break;\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}