{
    "patch": "MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\nMockHandler<T> oldMockHandlerImpl = (MockHandler<T>) oldMockHandler;\nMockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandlerImpl);\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\nFactory factory = (Factory) mock;\nCallback[] callbacks = factory.getCallbacks();\nfor (int i = 0; i < callbacks.length; i++) {\n    if (callbacks[i] instanceof MockHandler) {\n        callbacks[i] = newFilter;\n        break;\n    }\n}\nfactory.setCallbacks(callbacks);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..f540f6cb9 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,20 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+MockHandler<T> oldMockHandlerImpl = (MockHandler<T>) oldMockHandler;\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandlerImpl);\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+Factory factory = (Factory) mock;\n+Callback[] callbacks = factory.getCallbacks();\n+for (int i = 0; i < callbacks.length; i++) {\n+    if (callbacks[i] instanceof MockHandler) {\n+        callbacks[i] = newFilter;\n+        break;\n+    }\n+}\n+factory.setCallbacks(callbacks);\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}