{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    Field[] fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n    for (Field field : fields) {\n        Object mock = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n        if (mock != null && isCompatibleType(mock, field.getType())) {\n            try {\n                field.setAccessible(true);\n                field.set(fieldInstance, mock);\n                mocks.remove(mock);\n                return;\n            } catch (IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n}\n\nprivate boolean isCompatibleType(Object mock, Class<?> fieldType) {\n    Class<?> mockType = mock.getClass();\n    if (fieldType.isAssignableFrom(mockType)) {\n        return true;\n    }\n    if (Object[].class.isAssignableFrom(fieldType) && mock instanceof Object[]) {\n        return true;\n    }\n    if (int[].class.isAssignableFrom(fieldType) && mock instanceof int[]) {\n        return true;\n    }\n    if (short[].class.isAssignableFrom(fieldType) && mock instanceof short[]) {\n        return true;\n    }\n    if (long[].class.isAssignableFrom(fieldType) && mock instanceof long[]) {\n        return true;\n    }\n    if (byte[].class.isAssignableFrom(fieldType) && mock instanceof byte[]) {\n        return true;\n    }\n    if (char[].class.isAssignableFrom(fieldType) && mock instanceof char[]) {\n        return true;\n    }\n    if (boolean[].class.isAssignableFrom(fieldType) && mock instanceof boolean[]) {\n        return true;\n    }\n    if (float[].class.isAssignableFrom(fieldType) && mock instanceof float[]) {\n        return true;\n    }\n    if (double[].class.isAssignableFrom(fieldType) && mock instanceof double[]) {\n        return true;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..8738aef59 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,58 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    Field[] fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n+    for (Field field : fields) {\n+        Object mock = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+        if (mock != null && isCompatibleType(mock, field.getType())) {\n+            try {\n+                field.setAccessible(true);\n+                field.set(fieldInstance, mock);\n+                mocks.remove(mock);\n+                return;\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+}\n+\n+private boolean isCompatibleType(Object mock, Class<?> fieldType) {\n+    Class<?> mockType = mock.getClass();\n+    if (fieldType.isAssignableFrom(mockType)) {\n+        return true;\n+    }\n+    if (Object[].class.isAssignableFrom(fieldType) && mock instanceof Object[]) {\n+        return true;\n+    }\n+    if (int[].class.isAssignableFrom(fieldType) && mock instanceof int[]) {\n+        return true;\n+    }\n+    if (short[].class.isAssignableFrom(fieldType) && mock instanceof short[]) {\n+        return true;\n+    }\n+    if (long[].class.isAssignableFrom(fieldType) && mock instanceof long[]) {\n+        return true;\n+    }\n+    if (byte[].class.isAssignableFrom(fieldType) && mock instanceof byte[]) {\n+        return true;\n+    }\n+    if (char[].class.isAssignableFrom(fieldType) && mock instanceof char[]) {\n+        return true;\n+    }\n+    if (boolean[].class.isAssignableFrom(fieldType) && mock instanceof boolean[]) {\n+        return true;\n+    }\n+    if (float[].class.isAssignableFrom(fieldType) && mock instanceof float[]) {\n+        return true;\n+    }\n+    if (double[].class.isAssignableFrom(fieldType) && mock instanceof double[]) {\n+        return true;\n+    }\n+    return false;\n+}\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}