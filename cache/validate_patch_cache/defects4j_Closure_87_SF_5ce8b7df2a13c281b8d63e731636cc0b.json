{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        if (NodeUtil.isExpressionNode(maybeExpr)) {\n          return isFoldableExpression(maybeExpr, false);\n        } else if (maybeExpr.getType() == Token.EXPR_RESULT) {\n          return isFoldableExpression(maybeExpr.getFirstChild(), true);\n        }\n      }\n    }\n    return false;\n  }\n  \n  private boolean isFoldableExpression(Node expr, boolean isExprResult) {\n    // This will check if the expression is a function\n    if (expr.getType() == Token.FUNCTION) {\n      // Check if the function has a return statement\n      Node functionBody = expr.getLastChild();\n      boolean hasReturnStatement =\n          functionBody != null &&\n              functionBody.getLastChild() != null &&\n              functionBody.getLastChild().getType() == Token.RETURN;\n      return !hasReturnStatement;\n    }\n    \n    // Traverse the expression if it has a HOOK node\n    while (expr.getType() == Token.HOOK) {\n      Node condition = expr.getFirstChild();\n      Node trueExpression = condition.getNext();\n      Node falseExpression = trueExpression.getNext();\n      expr = isFoldableExpression(condition, false) ?\n          trueExpression : falseExpression;\n    }\n    \n    // Handle negation of expression if it is a prefix NOT node\n    if (expr.getType() == Token.NOT &&\n        expr.getFirstChild().getType() == Token.NAME) {\n      String name = expr.getFirstChild().getString();\n      return !isExprResult || !name.startsWith(\"event\");\n    }\n    \n    // Check if the expression is a NAME node\n    if (expr.getType() == Token.NAME) {\n      boolean isEventHandler = expr.getString().startsWith(\"on\");\n      return !isExprResult || !isEventHandler;\n    }\n    \n    // Handle GETPROP nodes\n    if (expr.getType() == Token.GETPROP) {\n      Node left = expr.getFirstChild();\n      Node right = left.getNext();\n      if (left.getType() == Token.NAME && right.getType() == Token.STRING) {\n        String propertyName = right.getString();\n        if (propertyName.equals(\"returnValue\")) {\n          Node grandParent = expr.getParent().getParent();\n          if (grandParent.getType() == Token.CALL) {\n            Node grandParentChild0 = grandParent.getFirstChild();\n            if (grandParentChild0.getType() == Token.GETPROP) {\n              Node eventHandlerObject = grandParentChild0.getFirstChild();\n              if (eventHandlerObject.getLastChild().getString().equals(\"handler\")) {\n                boolean isEventHandler = eventHandlerObject.getFirstChild().getString()\n                    .startsWith(\"on\");\n                return !isExprResult || !isEventHandler;\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    // Handle logical AND and OR nodes\n    if (expr.getType() == Token.AND || expr.getType() == Token.OR) {\n      Node left = expr.getFirstChild();\n      Node right = left.getNext();\n      return isFoldableExpression(left, false) &&\n          isFoldableExpression(right, false);\n    }\n    \n    // Handle equality operators\n    if (expr.getType() == Token.EQ || expr.getType() == Token.NE) {\n      Node left = expr.getFirstChild();\n      Node right = left.getNext();\n      return isFoldableExpression(left, false) &&\n          isFoldableExpression(right, false);\n    }\n    \n    // Check if the expression is a literal node\n    int type = expr.getType();\n    return type == Token.NUMBER ||\n        type == Token.STRING ||\n        type == Token.TRUE ||\n        type == Token.FALSE ||\n        type == Token.NULL;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..2c9bb818 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -520,22 +520,97 @@ public class PeepholeSubstituteAlternateSyntax\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+        if (NodeUtil.isExpressionNode(maybeExpr)) {\n+          return isFoldableExpression(maybeExpr, false);\n+        } else if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+          return isFoldableExpression(maybeExpr.getFirstChild(), true);\n+        }\n       }\n     }\n-\n     return false;\n   }\n+  \n+  private boolean isFoldableExpression(Node expr, boolean isExprResult) {\n+    // This will check if the expression is a function\n+    if (expr.getType() == Token.FUNCTION) {\n+      // Check if the function has a return statement\n+      Node functionBody = expr.getLastChild();\n+      boolean hasReturnStatement =\n+          functionBody != null &&\n+              functionBody.getLastChild() != null &&\n+              functionBody.getLastChild().getType() == Token.RETURN;\n+      return !hasReturnStatement;\n+    }\n+    \n+    // Traverse the expression if it has a HOOK node\n+    while (expr.getType() == Token.HOOK) {\n+      Node condition = expr.getFirstChild();\n+      Node trueExpression = condition.getNext();\n+      Node falseExpression = trueExpression.getNext();\n+      expr = isFoldableExpression(condition, false) ?\n+          trueExpression : falseExpression;\n+    }\n+    \n+    // Handle negation of expression if it is a prefix NOT node\n+    if (expr.getType() == Token.NOT &&\n+        expr.getFirstChild().getType() == Token.NAME) {\n+      String name = expr.getFirstChild().getString();\n+      return !isExprResult || !name.startsWith(\"event\");\n+    }\n+    \n+    // Check if the expression is a NAME node\n+    if (expr.getType() == Token.NAME) {\n+      boolean isEventHandler = expr.getString().startsWith(\"on\");\n+      return !isExprResult || !isEventHandler;\n+    }\n+    \n+    // Handle GETPROP nodes\n+    if (expr.getType() == Token.GETPROP) {\n+      Node left = expr.getFirstChild();\n+      Node right = left.getNext();\n+      if (left.getType() == Token.NAME && right.getType() == Token.STRING) {\n+        String propertyName = right.getString();\n+        if (propertyName.equals(\"returnValue\")) {\n+          Node grandParent = expr.getParent().getParent();\n+          if (grandParent.getType() == Token.CALL) {\n+            Node grandParentChild0 = grandParent.getFirstChild();\n+            if (grandParentChild0.getType() == Token.GETPROP) {\n+              Node eventHandlerObject = grandParentChild0.getFirstChild();\n+              if (eventHandlerObject.getLastChild().getString().equals(\"handler\")) {\n+                boolean isEventHandler = eventHandlerObject.getFirstChild().getString()\n+                    .startsWith(\"on\");\n+                return !isExprResult || !isEventHandler;\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    \n+    // Handle logical AND and OR nodes\n+    if (expr.getType() == Token.AND || expr.getType() == Token.OR) {\n+      Node left = expr.getFirstChild();\n+      Node right = left.getNext();\n+      return isFoldableExpression(left, false) &&\n+          isFoldableExpression(right, false);\n+    }\n+    \n+    // Handle equality operators\n+    if (expr.getType() == Token.EQ || expr.getType() == Token.NE) {\n+      Node left = expr.getFirstChild();\n+      Node right = left.getNext();\n+      return isFoldableExpression(left, false) &&\n+          isFoldableExpression(right, false);\n+    }\n+    \n+    // Check if the expression is a literal node\n+    int type = expr.getType();\n+    return type == Token.NUMBER ||\n+        type == Token.STRING ||\n+        type == Token.TRUE ||\n+        type == Token.FALSE ||\n+        type == Token.NULL;\n+  }\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}