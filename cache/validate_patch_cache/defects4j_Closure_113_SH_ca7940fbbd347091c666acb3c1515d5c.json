{
    "patch": "          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));\n          parent.removeChild(n);\n          compiler.reportCodeChange();\n          return;\n        }\n      }\n\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Requires should be removed before further processing.\n      // Some clients run closure pass multiple times, first with\n      // the checks for broken requires turned off. In these cases, we\n      // allow broken requires to be preserved by the first run to\n      // let them be caught in the subsequent run.\n      parent.removeChild(n);\n      compiler.reportCodeChange();\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..4cda6401 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,28 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+          compiler.report(\n+              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                  providedModule.getName(),\n+                  module.getName()));\n+          parent.removeChild(n);\n+          compiler.reportCodeChange();\n+          return;\n+        }\n+      }\n+\n+      maybeAddToSymbolTable(left);\n+      maybeAddStringNodeToSymbolTable(arg);\n+\n+      // Requires should be removed before further processing.\n+      // Some clients run closure pass multiple times, first with\n+      // the checks for broken requires turned off. In these cases, we\n+      // allow broken requires to be preserved by the first run to\n+      // let them be caught in the subsequent run.\n+      parent.removeChild(n);\n+      compiler.reportCodeChange();\n+    }\n+  }\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}