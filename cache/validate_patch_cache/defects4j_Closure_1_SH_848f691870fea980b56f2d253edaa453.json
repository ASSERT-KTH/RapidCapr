{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    int numUnusedArgs = 0;\n    for (Node arg : argList.children()) {\n      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n        numUnusedArgs++;\n      }\n    }\n\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (numUnusedArgs > 0 || modifyCallers) {\n      // Only create a new function declaration if necessary.\n      Node replacementFunction = function;\n      if (numUnusedArgs > 0) {\n        // Strip unreferenced args off the end of the function declaration.\n        for (Node child : Lists.reverse(argList.children())) {\n          if (referenced.contains(fnScope.getVar(child.getString()))) {\n            break;\n          }\n          argList.removeChild(child);\n          compiler.reportCodeChange();\n          numUnusedArgs--;\n        }\n\n        // Create a new function declaration, if necessary.\n        if (numUnusedArgs > 0) {\n          // Because we modify call sites, we may end up creating a new call site\n          // that retains the original function signature.  Shrink the function\n          // signature so the new call site doesn't pick it up.\n          shrinkFunctionArgs(function, numUnusedArgs);\n          replacementFunction = NodeUtil.getFunctionBody(function)\n              .replaceWith(IR.function(function.getSrcset()));\n          replacementFunction.setOriginalName(function.getOriginalName());\n          function.getParent().replaceChild(function, replacementFunction);\n          function = replacementFunction;\n          argList = getFunctionArgList(function);\n          compiler.reportCodeChange();\n        }\n      }\n\n      if (modifyCallers) {\n        callSiteOptimizer.optimize(fnScope, referenced);\n      }\n\n      // Once all modifications are complete, check for and remove empty\n      // parameter lists.\n      if (argList.getChildCount() == 0) {\n        argList.getParent().removeChild(argList);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..16cced4c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,64 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    int numUnusedArgs = 0;\n+    for (Node arg : argList.children()) {\n+      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+        numUnusedArgs++;\n+      }\n+    }\n+\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (numUnusedArgs > 0 || modifyCallers) {\n+      // Only create a new function declaration if necessary.\n+      Node replacementFunction = function;\n+      if (numUnusedArgs > 0) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        for (Node child : Lists.reverse(argList.children())) {\n+          if (referenced.contains(fnScope.getVar(child.getString()))) {\n+            break;\n+          }\n+          argList.removeChild(child);\n+          compiler.reportCodeChange();\n+          numUnusedArgs--;\n+        }\n+\n+        // Create a new function declaration, if necessary.\n+        if (numUnusedArgs > 0) {\n+          // Because we modify call sites, we may end up creating a new call site\n+          // that retains the original function signature.  Shrink the function\n+          // signature so the new call site doesn't pick it up.\n+          shrinkFunctionArgs(function, numUnusedArgs);\n+          replacementFunction = NodeUtil.getFunctionBody(function)\n+              .replaceWith(IR.function(function.getSrcset()));\n+          replacementFunction.setOriginalName(function.getOriginalName());\n+          function.getParent().replaceChild(function, replacementFunction);\n+          function = replacementFunction;\n+          argList = getFunctionArgList(function);\n+          compiler.reportCodeChange();\n+        }\n+      }\n+\n+      if (modifyCallers) {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+      }\n+\n+      // Once all modifications are complete, check for and remove empty\n+      // parameter lists.\n+      if (argList.getChildCount() == 0) {\n+        argList.getParent().removeChild(argList);\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: method reverse in class Lists cannot be applied to given types;",
    "test_result": "ERROR"
}