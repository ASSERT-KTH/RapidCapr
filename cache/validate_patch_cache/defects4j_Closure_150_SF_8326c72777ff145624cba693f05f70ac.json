{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (NodeUtil.createsBlockScopeForNode(n)) {\n        scope = scopeCreator.createScope(n, scope);\n    }\n\n    if (NodeUtil.isFunctionExpression(n)) {\n        defineDeclaredFunction(n, parent);\n        return;\n    }\n\n    if (NodeUtil.isNameDeclaration(n)) {\n        defineVar(n, parent);\n        return;\n    }\n\n    if (NodeUtil.isCatchDeclaration(n)) {\n        defineCatch(n, parent);\n        return;\n    }\n\n    if (n.isFunction()) {\n        visitFunction(n, parent);\n        return;\n    }\n\n    attachLiteralTypes(n);\n}\n\nprivate void visitFunction(Node function, Node parent) {\n    if (function.isArrowFunction()) {\n        function = function.getLastChild();\n    }\n    if (NodeUtil.isExpressionResult(parent) && !parent.isLabel()) {\n        Scope fnScope = scope.getClosestHoistScope(function);\n        if ((fnScope.getRootNode() == function)) {\n            handleFunctionInputs(function);\n        }\n    } else if (NodeUtil.isFunctionDeclaration(parent)) {\n        defineDeclaredFunction(function, parent);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..7f834dca 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,49 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (NodeUtil.createsBlockScopeForNode(n)) {\n+        scope = scopeCreator.createScope(n, scope);\n+    }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+    if (NodeUtil.isFunctionExpression(n)) {\n+        defineDeclaredFunction(n, parent);\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    if (NodeUtil.isNameDeclaration(n)) {\n+        defineVar(n, parent);\n+        return;\n+    }\n+\n+    if (NodeUtil.isCatchDeclaration(n)) {\n+        defineCatch(n, parent);\n+        return;\n+    }\n+\n+    if (n.isFunction()) {\n+        visitFunction(n, parent);\n+        return;\n     }\n \n+    attachLiteralTypes(n);\n+}\n+\n+private void visitFunction(Node function, Node parent) {\n+    if (function.isArrowFunction()) {\n+        function = function.getLastChild();\n+    }\n+    if (NodeUtil.isExpressionResult(parent) && !parent.isLabel()) {\n+        Scope fnScope = scope.getClosestHoistScope(function);\n+        if ((fnScope.getRootNode() == function)) {\n+            handleFunctionInputs(function);\n+        }\n+    } else if (NodeUtil.isFunctionDeclaration(parent)) {\n+        defineDeclaredFunction(function, parent);\n+    }\n+}\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}