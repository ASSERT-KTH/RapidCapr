{
    "patch": "      if (n.getParent().getType() == Token.ASSIGN &&\n          NodeUtil.isGet(n.getParent().getFirstChild())) {\n        Node lhs = n.getParent().getFirstChild();\n        Node assignParent = lhs.getParent(); \n\n        if (lhs.getLastChild().getString().equals(\"prototype\") &&\n            assignParent != null &&\n            NodeUtil.isGet(assignParent.getParent())) {\n          Node nGrandParent = assignParent.getParent().getParent();\n          if (nGrandParent != null &&\n              nGrandParent.getType() == Token.FUNCTION &&\n              nGrandParent.getFirstChild() != null &&\n              NodeUtil.isGet(nGrandParent.getFirstChild().getNext())) {\n            // Mark function as being lent to a prototype.\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..906440d9 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,22 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getParent().getType() == Token.ASSIGN &&\n+          NodeUtil.isGet(n.getParent().getFirstChild())) {\n+        Node lhs = n.getParent().getFirstChild();\n+        Node assignParent = lhs.getParent(); \n+\n+        if (lhs.getLastChild().getString().equals(\"prototype\") &&\n+            assignParent != null &&\n+            NodeUtil.isGet(assignParent.getParent())) {\n+          Node nGrandParent = assignParent.getParent().getParent();\n+          if (nGrandParent != null &&\n+              nGrandParent.getType() == Token.FUNCTION &&\n+              nGrandParent.getFirstChild() != null &&\n+              NodeUtil.isGet(nGrandParent.getFirstChild().getNext())) {\n+            // Mark function as being lent to a prototype.\n+            return false;\n+          }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}