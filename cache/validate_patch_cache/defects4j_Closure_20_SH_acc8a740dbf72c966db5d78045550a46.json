{
    "patch": "        callTarget.getString().equals(\"String\")) {\n      // get the argument\n      Node value = callTarget.getNext();\n      if (value != null && !NodeUtil.mayHaveSideEffects(value)) {\n        // ensure that the argument is a string literal or number\n        if (value.isString() || value.isNumber()) {\n          // create a new string literal\n          String str = value.isString() ? value.getString() : String.valueOf(value.getDouble());\n          Node stringNode = IR.string(str).srcref(value);\n\n          // replace the call to String with the new string literal\n          n.getParent().replaceChild(n, stringNode);\n          reportCodeChange();\n\n          return stringNode;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..132ac7a7 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,22 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+        callTarget.getString().equals(\"String\")) {\n+      // get the argument\n+      Node value = callTarget.getNext();\n+      if (value != null && !NodeUtil.mayHaveSideEffects(value)) {\n+        // ensure that the argument is a string literal or number\n+        if (value.isString() || value.isNumber()) {\n+          // create a new string literal\n+          String str = value.isString() ? value.getString() : String.valueOf(value.getDouble());\n+          Node stringNode = IR.string(str).srcref(value);\n+\n+          // replace the call to String with the new string literal\n+          n.getParent().replaceChild(n, stringNode);\n+          reportCodeChange();\n+\n+          return stringNode;\n+        }\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}