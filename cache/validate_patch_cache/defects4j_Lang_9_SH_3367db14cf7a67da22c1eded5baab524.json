{
    "patch": "        if(currentStrategy == null) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n        \n        collector.add(currentStrategy);\n        \n        while (nextStrategy != null) {\n            if (currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            currentStrategy = nextStrategy;\n            nextStrategy = null;\n\n            if (patternMatcher.regionEnd() - patternMatcher.end() > 0) {\n                patternMatcher.region(patternMatcher.end() + 1, patternMatcher.regionEnd());\n                if (patternMatcher.find()) {\n                    nextStrategy = getStrategy(patternMatcher.group());\n                }\n            }\n        }\n\n        if (currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n\n        strategies = collector.toArray(new Strategy[0]);\n        parsePattern = Pattern.compile(regex.toString());\n        currentFormatField = null;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..d4ee8516 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,34 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+        if(currentStrategy == null) {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n+        \n+        collector.add(currentStrategy);\n+        \n+        while (nextStrategy != null) {\n+            if (currentStrategy.addRegex(this, regex)) {\n+                collector.add(currentStrategy);\n+            }\n+            currentStrategy = nextStrategy;\n+            nextStrategy = null;\n+\n+            if (patternMatcher.regionEnd() - patternMatcher.end() > 0) {\n+                patternMatcher.region(patternMatcher.end() + 1, patternMatcher.regionEnd());\n+                if (patternMatcher.find()) {\n+                    nextStrategy = getStrategy(patternMatcher.group());\n+                }\n+            }\n+        }\n+\n+        if (currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        }\n+\n+        strategies = collector.toArray(new Strategy[0]);\n+        parsePattern = Pattern.compile(regex.toString());\n+        currentFormatField = null;\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}