{
    "patch": "  Node call = function.getParent();\n  if (call.isCall()) {\n    // For calls, if some arg is removed all arguments must be provided.\n    // Replacing unreferenced args to undefined, so that signatures of call\n    // sites will not change.\n    Node arg = call.getFirstChild().getNext();\n    for (Scope childScope : fnScope.children()) {\n      NodeTraversal.traverse(compiler, childScope.getRootNode(),\n          new ReplaceUnreferencedArguments(arg, fnScope));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f5516c45 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,18 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  Node call = function.getParent();\n+  if (call.isCall()) {\n+    // For calls, if some arg is removed all arguments must be provided.\n+    // Replacing unreferenced args to undefined, so that signatures of call\n+    // sites will not change.\n+    Node arg = call.getFirstChild().getNext();\n+    for (Scope childScope : fnScope.children()) {\n+      NodeTraversal.traverse(compiler, childScope.getRootNode(),\n+          new ReplaceUnreferencedArguments(arg, fnScope));\n+    }\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}