{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int expectedArgumentsCount = functionType.getParametersCount();\n    int varargsCount = functionType.hasRestFormals() ? 1 : 0;\n\n    int remainingVarargs = Math.max(expectedArgumentsCount - call.getChildCount(), 0) + varargsCount;\n    int ordinal = 0;\n    while(arguments.hasNext() && (remainingVarargs > 0 || parameters.hasNext())) {\n        if (parameters.hasNext()) {\n            Node parameter = parameters.next();\n            Node argument = arguments.next();\n            ordinal++;\n            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n        }\n        else {\n            Node argument = arguments.next();\n            validator.expectNonNullExpression(t, argument, call);\n            remainingVarargs--;\n        }\n    }\n\n    int numArgs = call.getNumberOfChildren() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (numArgs < minArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(expectedArgumentsCount), String.valueOf(numArgs), \" and at least \" + (minArgs - numArgs) + \" more argument(s).\");\n    }\n    else if (maxArgs != -1 && numArgs > maxArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(expectedArgumentsCount), String.valueOf(numArgs), \" and no more than \" + (numArgs - maxArgs) + \" argument(s).\");\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..e2eb3744 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,42 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n+    int expectedArgumentsCount = functionType.getParametersCount();\n+    int varargsCount = functionType.hasRestFormals() ? 1 : 0;\n+\n+    int remainingVarargs = Math.max(expectedArgumentsCount - call.getChildCount(), 0) + varargsCount;\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+    while(arguments.hasNext() && (remainingVarargs > 0 || parameters.hasNext())) {\n+        if (parameters.hasNext()) {\n+            Node parameter = parameters.next();\n+            Node argument = arguments.next();\n+            ordinal++;\n+            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+        }\n+        else {\n+            Node argument = arguments.next();\n+            validator.expectNonNullExpression(t, argument, call);\n+            remainingVarargs--;\n+        }\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n+    int numArgs = call.getNumberOfChildren() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (numArgs < minArgs) {\n+        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(expectedArgumentsCount), String.valueOf(numArgs), \" and at least \" + (minArgs - numArgs) + \" more argument(s).\");\n     }\n-  }\n+    else if (maxArgs != -1 && numArgs > maxArgs) {\n+        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(expectedArgumentsCount), String.valueOf(numArgs), \" and no more than \" + (numArgs - maxArgs) + \" argument(s).\");\n+    }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}