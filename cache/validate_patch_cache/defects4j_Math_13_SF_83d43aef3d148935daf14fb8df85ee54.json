{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int dim = m.getRowDimension();\n    if (dim > 1000) {\n        // Matrix is too large for eigen decomposition algorithm\n        throw new IllegalArgumentException(\"Matrix is too large for eigen decomposition algorithm\");\n    } else {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..1e0641a7c 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int dim = m.getRowDimension();\n+    if (dim > 1000) {\n+        // Matrix is too large for eigen decomposition algorithm\n+        throw new IllegalArgumentException(\"Matrix is too large for eigen decomposition algorithm\");\n+    } else {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n     }\n }\n+}",
    "result_reason": "java.lang.IllegalArgumentException: Matrix is too large for eigen decomposition algorithm",
    "test_result": "FAIL"
}