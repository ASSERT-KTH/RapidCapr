{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    int offset = zone.getOffset(instant.getMillis());\n    \n    // adjust input position according to the original zone offset\n    // this is to avoid inaccuracies when parsing with a different offset\n    position += text.isEmpty() ? 0 : text.charAt(0) == '-' || text.charAt(0) == '+' ? 1 : 0;\n    position += offsetToParsePosition(offset);\n    \n    int length = text.length();\n\n    // determine datetimezone if present in input text\n    if (length > position) {\n        char c = text.charAt(position);\n        if (c == 'Z') {\n            zone = DateTimeZone.UTC;\n            position++;\n        } else if (c == '+' || c == '-') {\n            int pos = text.indexOf('/', position);\n            if (pos < 0) {\n                pos = length;\n            }\n            String str = text.substring(position, pos);\n            if (str.length() == 1) {\n                throw new IllegalArgumentException(\"Invalid time zone offset format: \" + text);\n            }\n            char sign = str.charAt(0);\n            if (sign != '+' && sign != '-') {\n                throw new IllegalArgumentException(\"Invalid time zone offset sign: \" + text);\n            }\n            String hoursStr = str.substring(1);\n            if (hoursStr.length() < 2) {\n                throw new IllegalArgumentException(\"Invalid time zone offset hours: \" + text);\n            }\n            int hours = Integer.parseInt(hoursStr);\n            int minutes = 0;\n            if (hoursStr.length() > 2 || pos - position > hoursStr.length()) {\n                if (str.charAt(hoursStr.length()) != ':') {\n                    throw new IllegalArgumentException(\"Invalid time zone offset minutes: \" + text);\n                }\n                String minutesStr = str.substring(hoursStr.length() + 1);\n                if (minutesStr.length() != 2) {\n                    throw new IllegalArgumentException(\"Invalid time zone offset minutes: \" + text);\n                }\n                minutes = Integer.parseInt(minutesStr);\n            }\n            int milli = (offset < 0 ? -1 : 1) * ((hours * 3600000) + (minutes * 60000));\n            zone = DateTimeZone.forOffsetMillis(milli);\n            position = pos;\n        }\n    }\n\n    long instantMillis = instant.getMillis();\n    offset = zone.getOffset(instantMillis);\n    long instantLocal = instantMillis + offset;\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    \n    // set pivot year before parsing\n    int pivotYear = iPivotYear != null ? iPivotYear.intValue() : defaultYear;\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, pivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    Long parsedMillis = bucket.computeMillis(true, text);\n    if (parsedMillis != null) {  \n        instant.setMillis(parsedMillis - offset);\n        if (bucket.getChronology() != null) {\n            chrono = bucket.getChronology();\n        }\n        instant.setChronology(chrono);\n        instant.setZone(zone);\n    }\n    return newPos;\n}\n\nprivate int offsetToParsePosition(int offset) {\n    if (offset == 0) {\n        return 0;\n    }\n\n    int minutes = offset / 60000;\n    int hours = Math.abs(minutes / 60);\n    int mins = Math.abs(minutes % 60);\n\n    // e.g. \"+03:00\"\n    if (mins == 0) {\n        return hours == 9 ? 4 : 3;\n    }\n    // e.g. \"+03:30\", \"-02:45\"\n    if (mins % 15 == 0) {\n        return hours == 9 ? 6 : 5;\n    }\n    // fallback to the number of digits\n    return hours >= 10 ? 4 : 3;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..0df52755 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,107 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+    int offset = zone.getOffset(instant.getMillis());\n+    \n+    // adjust input position according to the original zone offset\n+    // this is to avoid inaccuracies when parsing with a different offset\n+    position += text.isEmpty() ? 0 : text.charAt(0) == '-' || text.charAt(0) == '+' ? 1 : 0;\n+    position += offsetToParsePosition(offset);\n+    \n+    int length = text.length();\n+\n+    // determine datetimezone if present in input text\n+    if (length > position) {\n+        char c = text.charAt(position);\n+        if (c == 'Z') {\n+            zone = DateTimeZone.UTC;\n+            position++;\n+        } else if (c == '+' || c == '-') {\n+            int pos = text.indexOf('/', position);\n+            if (pos < 0) {\n+                pos = length;\n+            }\n+            String str = text.substring(position, pos);\n+            if (str.length() == 1) {\n+                throw new IllegalArgumentException(\"Invalid time zone offset format: \" + text);\n+            }\n+            char sign = str.charAt(0);\n+            if (sign != '+' && sign != '-') {\n+                throw new IllegalArgumentException(\"Invalid time zone offset sign: \" + text);\n+            }\n+            String hoursStr = str.substring(1);\n+            if (hoursStr.length() < 2) {\n+                throw new IllegalArgumentException(\"Invalid time zone offset hours: \" + text);\n+            }\n+            int hours = Integer.parseInt(hoursStr);\n+            int minutes = 0;\n+            if (hoursStr.length() > 2 || pos - position > hoursStr.length()) {\n+                if (str.charAt(hoursStr.length()) != ':') {\n+                    throw new IllegalArgumentException(\"Invalid time zone offset minutes: \" + text);\n+                }\n+                String minutesStr = str.substring(hoursStr.length() + 1);\n+                if (minutesStr.length() != 2) {\n+                    throw new IllegalArgumentException(\"Invalid time zone offset minutes: \" + text);\n+                }\n+                minutes = Integer.parseInt(minutesStr);\n+            }\n+            int milli = (offset < 0 ? -1 : 1) * ((hours * 3600000) + (minutes * 60000));\n+            zone = DateTimeZone.forOffsetMillis(milli);\n+            position = pos;\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+    }\n+\n+    long instantMillis = instant.getMillis();\n+    offset = zone.getOffset(instantMillis);\n+    long instantLocal = instantMillis + offset;\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+    \n+    // set pivot year before parsing\n+    int pivotYear = iPivotYear != null ? iPivotYear.intValue() : defaultYear;\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantLocal, chrono, iLocale, pivotYear, defaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    Long parsedMillis = bucket.computeMillis(true, text);\n+    if (parsedMillis != null) {  \n+        instant.setMillis(parsedMillis - offset);\n+        if (bucket.getChronology() != null) {\n+            chrono = bucket.getChronology();\n         }\n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+        instant.setZone(zone);\n     }\n+    return newPos;\n+}\n+\n+private int offsetToParsePosition(int offset) {\n+    if (offset == 0) {\n+        return 0;\n+    }\n+\n+    int minutes = offset / 60000;\n+    int hours = Math.abs(minutes / 60);\n+    int mins = Math.abs(minutes % 60);\n+\n+    // e.g. \"+03:00\"\n+    if (mins == 0) {\n+        return hours == 9 ? 4 : 3;\n+    }\n+    // e.g. \"+03:30\", \"-02:45\"\n+    if (mins % 15 == 0) {\n+        return hours == 9 ? 6 : 5;\n+    }\n+    // fallback to the number of digits\n+    return hours >= 10 ? 4 : 3;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "junit.framework.ComparisonFailure: expected:<2002-06-0[8T00:00:00.000-04]:00> but was:<2002-06-0[9T00:00:00.000+01]:00>",
    "test_result": "FAIL"
}