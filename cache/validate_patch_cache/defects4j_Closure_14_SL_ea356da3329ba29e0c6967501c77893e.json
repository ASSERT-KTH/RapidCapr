{
    "patch": "              Block catchBlock = NodeUtil.getCatchBlock(parent);\n              if (catchBlock != null) {\n                // pass control to catch block if there is one\n                return catchBlock.getFirstChild();\n              } else {\n                // else pass control to the next statement after the try-catch\n                return NodeUtil.getSuccessor(parent);\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..a34addb6 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,14 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              Block catchBlock = NodeUtil.getCatchBlock(parent);\n+              if (catchBlock != null) {\n+                // pass control to catch block if there is one\n+                return catchBlock.getFirstChild();\n+              } else {\n+                // else pass control to the next statement after the try-catch\n+                return NodeUtil.getSuccessor(parent);\n+              }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}