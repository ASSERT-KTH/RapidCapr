{
    "patch": "// Ignore variables declared in functions and loops as their lifetime is not easily analyzed.\nif (block.isFunction || (block.isLoop && ref != block.getLastCrossedStatement().getControlFlowGraph().getImplicitExceptionBlocks().get(0))) {\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..b74e9a24 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,10 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+// Ignore variables declared in functions and loops as their lifetime is not easily analyzed.\n+if (block.isFunction || (block.isLoop && ref != block.getLastCrossedStatement().getControlFlowGraph().getImplicitExceptionBlocks().get(0))) {\n+  return false;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}