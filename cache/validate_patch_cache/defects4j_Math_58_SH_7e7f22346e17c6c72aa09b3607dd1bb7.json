{
    "patch": "final double[] target = getObservations();\nfinal double[] weights = getWeights();\nfinal ParametricUnivariateFunction f = new Gaussian.Parametric();\nfinal double[] initialGuess = (new ParameterGuesser(getObservations())).guess();\nfinal double[] fittedParams = new LevenbergMarquardtOptimizer().optimize(\n        new ObjectiveFunction(new MultivariateVectorFunction() {\n            @Override\n            public double[] value(double[] point) throws IllegalArgumentException {\n                final double[] model = new double[target.length];\n                for (int i = 0; i < target.length; i++) {\n                    model[i] = f.value(i, point);\n                }\n                final double[] residuals = new double[target.length];\n                for (int i = 0; i < target.length; i++) {\n                    residuals[i] = weights[i] * (target[i] - model[i]);\n                }\n                return residuals;\n            }\n        }),\n        new MaxEval(Integer.MAX_VALUE),\n        new MaxIter(Integer.MAX_VALUE),\n        new InitialGuess(initialGuess),\n        new Weight(weights),\n        new Target(target),\n        new AbsoluteTolerance(1.0e-10), \n        new RelativeTolerance(1.0e-10), \n        new ChiSquare(new ContinuedFractionMomentMatching())\n).getPoint().toArray();\n\nreturn fit(new Gaussian.Parametric(), fittedParams); ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..15e125578 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,36 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+final double[] target = getObservations();\n+final double[] weights = getWeights();\n+final ParametricUnivariateFunction f = new Gaussian.Parametric();\n+final double[] initialGuess = (new ParameterGuesser(getObservations())).guess();\n+final double[] fittedParams = new LevenbergMarquardtOptimizer().optimize(\n+        new ObjectiveFunction(new MultivariateVectorFunction() {\n+            @Override\n+            public double[] value(double[] point) throws IllegalArgumentException {\n+                final double[] model = new double[target.length];\n+                for (int i = 0; i < target.length; i++) {\n+                    model[i] = f.value(i, point);\n+                }\n+                final double[] residuals = new double[target.length];\n+                for (int i = 0; i < target.length; i++) {\n+                    residuals[i] = weights[i] * (target[i] - model[i]);\n+                }\n+                return residuals;\n+            }\n+        }),\n+        new MaxEval(Integer.MAX_VALUE),\n+        new MaxIter(Integer.MAX_VALUE),\n+        new InitialGuess(initialGuess),\n+        new Weight(weights),\n+        new Target(target),\n+        new AbsoluteTolerance(1.0e-10), \n+        new RelativeTolerance(1.0e-10), \n+        new ChiSquare(new ContinuedFractionMomentMatching())\n+).getPoint().toArray();\n+\n+return fit(new Gaussian.Parametric(), fittedParams); \n     }\n \n     /**",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}