{
    "patch": "  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    //\n    // In theory, the \"required-ness\" should work in the other direction as\n    // well. In other words, if we have\n    //\n    // function f(number, number) {}\n    // function g(number) {}\n    //\n    // Then f *should* not be a subtype of g, and g *should* not be\n    // a subtype of f. But in practice, we do not implement it this way.\n    // We want to support the use case where you can pass g where f is\n    // expected, and pretend that g ignores the second argument.\n    // That way, you can have a single \"no-op\" function, and you don't have\n    // to create a new no-op function for every possible type signature.\n    //\n    // So, in this case, g < f, but f !< g\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n      if (thatParamType == null) {\n        // \"that\" can't be a supertype if it's missing a required arguement.\n        return false;\n      } else if (thisParamType != null && thisParamType.isTemplateType()) {\n        // Ignore the comparison if this type is a template type. If we called isSubtype on a\n        // template type, we could end up in an infinite recursion loop.\n        thatParam = thatParam.getNext();\n        continue;\n      } else if (thatParam.isOptionalArg() && !thisParam.isOptionalArg()) {\n        // If the argument is optional in \"that\" but required in \"this\",\n        // \"that\" can't be a supertype.\n        return false;\n      } else if (!thatParam.isVarArgs() && thisParam.isVarArgs()) {\n        // If this has *args but that doesn't, *args gets ignored, but we need\n        // to advance thatParam to the last parameter or vararg. See below.\n        while (thisParam.getNext() != null) {\n          thisParam = thisParam.getNext();\n        }\n      } else if (!thatParamType.isSubtype(thisParamType)) {\n        // If it's neither a template type nor if the argument types are\n        // not compatible, \"that\" can't be a supertype.\n        return false;\n      }\n      thisParam = thisParam.getNext();\n      thatParam = thatParam.getNext();\n    }\n\n    // \"that\" can't be a supertype, because it's missing a non-optional argument.\n    if (thatParam != null && !thatParam.isVarArgs() && !thatParam.isOptionalArg()) {\n      return false;\n    }\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..c1bf5765 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -116,40 +116,37 @@ final class ArrowType extends JSType {\n     while (thisParam != null && thatParam != null) {\n       JSType thisParamType = thisParam.getJSType();\n       JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n-      }\n-\n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n-\n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n-\n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n+      if (thatParamType == null) {\n+        // \"that\" can't be a supertype if it's missing a required arguement.\n+        return false;\n+      } else if (thisParamType != null && thisParamType.isTemplateType()) {\n+        // Ignore the comparison if this type is a template type. If we called isSubtype on a\n+        // template type, we could end up in an infinite recursion loop.\n         thatParam = thatParam.getNext();\n+        continue;\n+      } else if (thatParam.isOptionalArg() && !thisParam.isOptionalArg()) {\n+        // If the argument is optional in \"that\" but required in \"this\",\n+        // \"that\" can't be a supertype.\n+        return false;\n+      } else if (!thatParam.isVarArgs() && thisParam.isVarArgs()) {\n+        // If this has *args but that doesn't, *args gets ignored, but we need\n+        // to advance thatParam to the last parameter or vararg. See below.\n+        while (thisParam.getNext() != null) {\n+          thisParam = thisParam.getNext();\n+        }\n+      } else if (!thatParamType.isSubtype(thisParamType)) {\n+        // If it's neither a template type nor if the argument types are\n+        // not compatible, \"that\" can't be a supertype.\n+        return false;\n       }\n-\n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n+      thisParam = thisParam.getNext();\n+      thatParam = thatParam.getNext();\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n-\n+    // \"that\" can't be a supertype, because it's missing a non-optional argument.\n+    if (thatParam != null && !thatParam.isVarArgs() && !thatParam.isOptionalArg()) {\n+      return false;\n+    }\n     return true;\n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected a warning",
    "test_result": "FAIL"
}