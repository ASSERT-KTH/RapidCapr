{
    "patch": "public int getProperty(String key) {\n\ttry {\n\t\tString value = props.getProperty(key);\n\t\tif (value == null) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid property key\");\n\t\t} else {\n\t\t\treturn Integer.parseInt(value);\n\t\t}\n\t} catch (NumberFormatException e) {\n\t\tthrow new IllegalArgumentException(\"Invalid property value\");\n\t}\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..56714644 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public int getProperty(String key) {\n+\ttry {\n+\t\tString value = props.getProperty(key);\n+\t\tif (value == null) {\n+\t\t\tthrow new IllegalArgumentException(\"Invalid property key\");\n+\t\t} else {\n+\t\t\treturn Integer.parseInt(value);\n+\t\t}\n+\t} catch (NumberFormatException e) {\n+\t\tthrow new IllegalArgumentException(\"Invalid property value\");\n+\t}\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}