{
    "patch": "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n    return allChildNodesMatchPredicate(n, MAY_BE_STRING_PREDICATE);\n  } else {\n    return mayBeStringHelper(n);\n  }\n}\n\nprivate static boolean allChildNodesMatchPredicate(Node n, Predicate<Node> predicate) {\n  for (Node child : n.children()) {\n    if (!predicate.apply(child) || !allChildNodesMatchPredicate(child, predicate)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nprivate static boolean mayBeStringHelper(Node n) {\n  return !NodeUtil.isLiteralValue(n) || NodeUtil.isImmutableValue(n);\n}\n\nprivate static final Predicate<Node> MAY_BE_STRING_PREDICATE =\n    new Predicate<Node>() {\n      @Override\n      public boolean apply(Node n) {\n        return mayBeStringHelper(n) && NodeUtil.isStringValueType(n);\n      }\n    };",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..88b9e8f3 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1412,13 +1412,34 @@ public final class NodeUtil {\n     return mayBeString(n, true);\n   }\n \n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n-      return mayBeStringHelper(n);\n+static boolean mayBeString(Node n, boolean recurse) {\n+  if (recurse) {\n+    return allChildNodesMatchPredicate(n, MAY_BE_STRING_PREDICATE);\n+  } else {\n+    return mayBeStringHelper(n);\n+  }\n+}\n+\n+private static boolean allChildNodesMatchPredicate(Node n, Predicate<Node> predicate) {\n+  for (Node child : n.children()) {\n+    if (!predicate.apply(child) || !allChildNodesMatchPredicate(child, predicate)) {\n+      return false;\n     }\n   }\n+  return true;\n+}\n+\n+private static boolean mayBeStringHelper(Node n) {\n+  return !NodeUtil.isLiteralValue(n) || NodeUtil.isImmutableValue(n);\n+}\n+\n+private static final Predicate<Node> MAY_BE_STRING_PREDICATE =\n+    new Predicate<Node>() {\n+      @Override\n+      public boolean apply(Node n) {\n+        return mayBeStringHelper(n) && NodeUtil.isStringValueType(n);\n+      }\n+    };\n \n   static boolean mayBeStringHelper(Node n) {\n     return !isNumericResult(n) && !isBooleanResult(n)",
    "result_reason": "error: variable MAY_BE_STRING_PREDICATE is already defined in class NodeUtil",
    "test_result": "ERROR"
}