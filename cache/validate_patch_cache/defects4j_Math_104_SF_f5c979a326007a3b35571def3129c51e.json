{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (x < 0.0 || a <= 0.0) {\n        throw new IllegalArgumentException();\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n\n    double result = 1.0;\n    double term = 1.0 / a;\n    while (Math.abs(term / result) > 1e-15) {\n        result += term;\n        a += 1.0;\n        term *= x / a;\n    }\n    return result * Math.exp(-x + a * Math.log(x) - logGamma(a));\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (x < 0.0 || a <= 0.0) {\n        throw new IllegalArgumentException();\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n\n    double result = 1.0;\n    double fracl = 1.0 / (1.0 - a);\n    double term = fracl * x;\n    while (Math.abs(term / result) > 1e-15) {\n        result -= term;\n        a -= 1.0;\n        fracl *= a / x;\n        term = fracl * term;\n    }\n    return result * Math.exp(-x + a * Math.log(x) - logGamma(a));\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..922dabc89 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,55 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (x < 0.0 || a <= 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+\n+    double result = 1.0;\n+    double term = 1.0 / a;\n+    while (Math.abs(term / result) > 1e-15) {\n+        result += term;\n+        a += 1.0;\n+        term *= x / a;\n+    }\n+    return result * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (x < 0.0 || a <= 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+\n+    double result = 1.0;\n+    double fracl = 1.0 / (1.0 - a);\n+    double term = fracl * x;\n+    while (Math.abs(term / result) > 1e-15) {\n+        result -= term;\n+        a -= 1.0;\n+        fracl *= a / x;\n+        term = fracl * term;\n+    }\n+    return result * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}