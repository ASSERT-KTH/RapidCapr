{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n\n    // See if we can get any information about the function that's being invoked.\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n\n        // If the constructor type is a function, use its prototype as the type of the new object.\n        // If we don't know anything, call the constructor with unknown arguments.\n        FunctionType ft = constructorType.toMaybeFunctionType();\n        if (ft != null && ft.isConstructor()) {\n            type = ft.getPrototype();\n\n            // Propagate the type to arguments.\n            for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n                JSType argType = null;\n                if (arg.getJSType() != null && arg.getJSType().isVoidType()) {\n                    // If constructor parameter is of type \"undefined\", mark arg as unknown.\n                    argType = getNativeType(UNKNOWN_TYPE);\n                } else if (arg.getJSType() != null) {\n                    // If we know the argument type, propagate it to the arguments.\n                    argType = arg.getJSType();\n                } else {\n                    // If we don't know the argument type, assume it is any.\n                    argType = getNativeType(UNKNOWN_TYPE);\n                }\n                arg.setJSType(argType);\n                scope = traverse(arg, scope);\n            }\n        } else {\n            // If we don't have a constructor function, assume type is unknown.\n            type = getNativeType(UNKNOWN_TYPE);\n        }\n    } else {\n        // If we don't have a constructor type, assume type is unknown.\n        type = getNativeType(UNKNOWN_TYPE);\n    }\n    n.setJSType(type);\n\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..a4f3bfb1 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,49 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n+\n+    // See if we can get any information about the function that's being invoked.\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n     if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+        constructorType = constructorType.restrictByNotNullOrUndefined();\n+\n+        // If the constructor type is a function, use its prototype as the type of the new object.\n+        // If we don't know anything, call the constructor with unknown arguments.\n+        FunctionType ft = constructorType.toMaybeFunctionType();\n+        if (ft != null && ft.isConstructor()) {\n+            type = ft.getPrototype();\n+\n+            // Propagate the type to arguments.\n+            for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+                JSType argType = null;\n+                if (arg.getJSType() != null && arg.getJSType().isVoidType()) {\n+                    // If constructor parameter is of type \"undefined\", mark arg as unknown.\n+                    argType = getNativeType(UNKNOWN_TYPE);\n+                } else if (arg.getJSType() != null) {\n+                    // If we know the argument type, propagate it to the arguments.\n+                    argType = arg.getJSType();\n+                } else {\n+                    // If we don't know the argument type, assume it is any.\n+                    argType = getNativeType(UNKNOWN_TYPE);\n+                }\n+                arg.setJSType(argType);\n+                scope = traverse(arg, scope);\n+            }\n+        } else {\n+            // If we don't have a constructor function, assume type is unknown.\n+            type = getNativeType(UNKNOWN_TYPE);\n         }\n-      }\n+    } else {\n+        // If we don't have a constructor type, assume type is unknown.\n+        type = getNativeType(UNKNOWN_TYPE);\n     }\n     n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n+\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}