{
    "patch": "if (f == null || Double.isNaN(min) || Double.isNaN(max) || f.value(min) * f.value(max) > 0 || min >= max) {\n    return Double.NaN;\n}\ndouble fInitial = f.value(initial);\nif(Double.isNaN(fInitial) || Double.isInfinite(fInitial)){\n    fInitial = (f.value(max)+f.value(min))/2.0; // Choose midpoint as initial value\n}\nif (fInitial == 0) {\n    return initial;\n}\nif (f.value(min) * fInitial < 0) {\n    return solve(f, min, initial);\n}\nif (f.value(max) * fInitial < 0) {\n    return solve(f, initial, max);\n}\nreturn Double.NaN;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..dd038ab01 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,23 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+if (f == null || Double.isNaN(min) || Double.isNaN(max) || f.value(min) * f.value(max) > 0 || min >= max) {\n+    return Double.NaN;\n+}\n+double fInitial = f.value(initial);\n+if(Double.isNaN(fInitial) || Double.isInfinite(fInitial)){\n+    fInitial = (f.value(max)+f.value(min))/2.0; // Choose midpoint as initial value\n+}\n+if (fInitial == 0) {\n+    return initial;\n+}\n+if (f.value(min) * fInitial < 0) {\n+    return solve(f, min, initial);\n+}\n+if (f.value(max) * fInitial < 0) {\n+    return solve(f, initial, max);\n+}\n+return Double.NaN;\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}