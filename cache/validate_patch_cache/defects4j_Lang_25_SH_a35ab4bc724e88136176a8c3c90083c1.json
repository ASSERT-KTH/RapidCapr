{
    "patch": "public static String iso8859_1_ESCAPE(final String input) {\n    // ISO-8859-1 (aka Latin-1) contains all the characters we want (in the same order), so we'll just use that\n    final BitSet charsToEscape = new BitSet();\n    charsToEscape.set('&'); // &\n    charsToEscape.set('<'); // <\n    charsToEscape.set('>'); // >\n    charsToEscape.set('\\r'); // carriage return\n    charsToEscape.set('\\n'); // new line\n    charsToEscape.set('\"'); // \"\n    final int len = input.length();\n    boolean sawNonAscii = false;\n    for(int i=0;i<len;i++) {\n        final char ch = input.charAt(i);\n        if (ch>0xff) {\n            sawNonAscii = true;\n            break;\n        }\n        else if (charsToEscape.get(ch)) {\n            sawNonAscii = true;\n            break;\n        }\n    }\n    if (!sawNonAscii) {\n        return input;\n    }\n\n    // create a char array to hold our output\n    final char[] output = new char[len*2];\n    int outputPos = 0;\n    for(int i=0;i<len;i++) {\n        final char ch = input.charAt(i);\n        if (charsToEscape.get(ch)) {\n            outputPos = escapeChar(ch, output, outputPos);\n        }\n        // ASCII or not\n        else if (ch<=0xff) {\n            output[outputPos++] = ch;\n        }\n        // beyond ASCII\n        else {\n            outputPos = escapeUnicode(ch, output, outputPos);\n        }\n    }\n    return new String(output, 0, outputPos);\n}\n\nprivate static int escapeChar(final char ch, final char[] output, final int outputPos) {\n    output[outputPos] = '&';\n    switch(ch) {\n        case '<':\n            output[++outputPos] = 'l';\n            output[++outputPos] = 't';\n            break;\n        case '>':\n            output[++outputPos] = 'g';\n            output[++outputPos] = 't';\n            break;\n        case '\"':\n            output[++outputPos] = 'q';\n            output[++outputPos] = 'u';\n            output[++outputPos] = 'o';\n            output[++outputPos] = 't';\n            break;\n        case '&':\n            output[++outputPos] = 'a';\n            output[++outputPos] = 'm';\n            output[++outputPos] = 'p';\n            break;\n        case '\\r':\n            output[++outputPos] = '#';\n            output[++outputPos] = '1';\n            output[++outputPos] = '3';\n            output[++outputPos] = ';';\n            break;\n        case '\\n':\n            output[++outputPos] = '#';\n            output[++outputPos] = '1';\n            output[++outputPos] = '0';\n            output[++outputPos] = ';';\n            break;\n        default:\n            throw new IllegalStateException(\"something went wrong: illegal char \" + ch + \" passed to escapeChar()\");\n    }\n    return ++outputPos;\n}\n\nprivate static int toHex(final int nibble) {\n    return (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble);\n}\n\nprivate static int escapeUnicode(final char ch, final char[] output, final int outputPos) {\n    output[outputPos] = '&';\n    output[++outputPos] = '#';\n    output[++outputPos] = 'x';\n    output[++outputPos] = toHex((ch >> 12) & 0xF);\n    output[++outputPos] = toHex((ch >>  8) & 0xF);\n    output[++outputPos] = toHex((ch >>  4) & 0xF);\n    output[++outputPos] = toHex( ch        & 0xF);\n    output[++outputPos] = ';';\n    return ++outputPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}