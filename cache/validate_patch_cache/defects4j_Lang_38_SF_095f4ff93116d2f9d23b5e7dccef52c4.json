{
    "patch": "    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        if (mTimeZoneForced) {\n            calendar = (Calendar) calendar.clone();\n            calendar.setTimeZone(mTimeZone);\n        }\n        long oldTime = calendar.getTimeInMillis();\n        long newTime = oldTime - calendar.getTimeZone().getOffset(oldTime);\n        if ((oldTime - newTime) != 0) {\n            calendar.setTimeInMillis(newTime);\n            calendar.set(Calendar.MILLISECOND, 0);\n        }\n        return applyRules(calendar, buf);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..8c22ec0c 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -872,6 +872,12 @@ public class FastDateFormat extends Format {\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }\n+        long oldTime = calendar.getTimeInMillis();\n+        long newTime = oldTime - calendar.getTimeZone().getOffset(oldTime);\n+        if ((oldTime - newTime) != 0) {\n+            calendar.setTimeInMillis(newTime);\n+            calendar.set(Calendar.MILLISECOND, 0);\n+        }\n         return applyRules(calendar, buf);\n     }\n ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<T1[0]:11:12> but was:<T1[3]:11:12>",
    "test_result": "FAIL"
}