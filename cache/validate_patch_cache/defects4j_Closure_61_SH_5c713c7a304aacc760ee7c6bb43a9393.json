{
    "patch": "      if (nameNode.getFirstChild().matchesQualifiedName(\"Math.random\")\n          || nameNode.getFirstChild().matchesQualifiedName(\"Math.floor\")\n          || nameNode.getFirstChild().matchesQualifiedName(\"Math.ceil\")\n          || nameNode.getFirstChild().matchesQualifiedName(\"Math.round\")\n          || nameNode.getFirstChild().matchesQualifiedName(\"Math.abs\")\n          || nameNode.getFirstChild().matchesQualifiedName(\"Math.sqrt\")\n          || nameNode.getFirstChild().matchesQualifiedName(\"Math.exp\")\n          || nameNode.getFirstChild().matchesQualifiedName(\"Math.log\")\n          || nameNode.getFirstChild().matchesQualifiedName(\"Math.sin\")\n          || nameNode.getFirstChild().matchesQualifiedName(\"Math.cos\")\n          || nameNode.getFirstChild().matchesQualifiedName(\"Math.tan\")\n          || nameNode.getFirstChild().matchesQualifiedName(\"Math.asin\")\n          || nameNode.getFirstChild().matchesQualifiedName(\"Math.acos\")\n          || nameNode.getFirstChild().matchesQualifiedName(\"Math.atan\")\n          || nameNode.getFirstChild().matchesQualifiedName(\"Math.atan2\")\n          || nameNode.getFirstChild().matchesQualifiedName(\"Math.pow\")\n          || nameNode.getFirstChild().matchesQualifiedName(\"Math.max\")\n          || nameNode.getFirstChild().matchesQualifiedName(\"Math.min\")) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..5e47208b 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -955,6 +955,24 @@ public final class NodeUtil {\n       }\n \n       // Functions in the \"Math\" namespace have no side effects.\n+      if (nameNode.getFirstChild().matchesQualifiedName(\"Math.random\")\n+          || nameNode.getFirstChild().matchesQualifiedName(\"Math.floor\")\n+          || nameNode.getFirstChild().matchesQualifiedName(\"Math.ceil\")\n+          || nameNode.getFirstChild().matchesQualifiedName(\"Math.round\")\n+          || nameNode.getFirstChild().matchesQualifiedName(\"Math.abs\")\n+          || nameNode.getFirstChild().matchesQualifiedName(\"Math.sqrt\")\n+          || nameNode.getFirstChild().matchesQualifiedName(\"Math.exp\")\n+          || nameNode.getFirstChild().matchesQualifiedName(\"Math.log\")\n+          || nameNode.getFirstChild().matchesQualifiedName(\"Math.sin\")\n+          || nameNode.getFirstChild().matchesQualifiedName(\"Math.cos\")\n+          || nameNode.getFirstChild().matchesQualifiedName(\"Math.tan\")\n+          || nameNode.getFirstChild().matchesQualifiedName(\"Math.asin\")\n+          || nameNode.getFirstChild().matchesQualifiedName(\"Math.acos\")\n+          || nameNode.getFirstChild().matchesQualifiedName(\"Math.atan\")\n+          || nameNode.getFirstChild().matchesQualifiedName(\"Math.atan2\")\n+          || nameNode.getFirstChild().matchesQualifiedName(\"Math.pow\")\n+          || nameNode.getFirstChild().matchesQualifiedName(\"Math.max\")\n+          || nameNode.getFirstChild().matchesQualifiedName(\"Math.min\")) {\n \n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n         if (nameNode.getFirstChild().getType() == Token.REGEXP",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}