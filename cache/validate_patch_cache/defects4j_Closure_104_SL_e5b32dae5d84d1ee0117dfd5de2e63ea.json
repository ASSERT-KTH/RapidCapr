{
    "patch": "      if (alternates.isEmpty()) {\n        builder.addAlternate(getNativeType(JSTypeNative.NO_OBJECT_TYPE));\n      }\n    } else if (that.isSubtype(this)) {\n      builder.addAlternate(that);\n    }\n\n    JSType result = builder.build();\n\n    if (!alternates.isEmpty() && result.isSubtype(getNativeType(JSTypeNative.NO_OBJECT_TYPE))) {\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else if (result.isBottom()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..ca5e4444 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -288,7 +288,18 @@ public class UnionType extends JSType {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    if (result != null) {\n+      if (alternates.isEmpty()) {\n+        builder.addAlternate(getNativeType(JSTypeNative.NO_OBJECT_TYPE));\n+      }\n+    } else if (that.isSubtype(this)) {\n+      builder.addAlternate(that);\n+    }\n+\n+    JSType result = builder.build();\n+\n+    if (!alternates.isEmpty() && result.isSubtype(getNativeType(JSTypeNative.NO_OBJECT_TYPE))) {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    } else if (result.isBottom()) {\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}