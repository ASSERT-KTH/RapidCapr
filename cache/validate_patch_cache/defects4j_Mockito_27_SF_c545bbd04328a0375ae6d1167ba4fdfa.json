{
    "patch": "public <T> void resetMock(T mock) {\n        try {\n            Field field = mock.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n            field.setAccessible(true);\n            Object proxy = field.get(mock);\n            Field field2 = proxy.getClass().getDeclaredField(\"filters\");\n            field2.setAccessible(true);\n            CallbackFilter filters = (CallbackFilter) field2.get(proxy);\n            Field field3 = field.get(mock).getClass().getDeclaredField(\"advised\");\n            field3.setAccessible(true);\n            Object advised = field3.get(field.get(mock));\n            Field field4 = advised.getClass().getDeclaredField(\"callbacks\");\n            field4.setAccessible(true);\n            Object[] callbacks = (Object[]) field4.get(advised);\n            for (int i = 0; i < callbacks.length; i++) {\n                if (filters.accept(i)) {\n                    ((MethodInterceptorFilter)callbacks[i]).setMockHandler(new MockHandler<T>(getMockHandler(mock)));\n                }\n            }\n        } catch (NoSuchFieldException|IllegalAccessException ex) {\n            throw new RuntimeException(\"Failed to reset the mock: \" + ex.getMessage(), ex);\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..f11e30625 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,29 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+        try {\n+            Field field = mock.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n+            field.setAccessible(true);\n+            Object proxy = field.get(mock);\n+            Field field2 = proxy.getClass().getDeclaredField(\"filters\");\n+            field2.setAccessible(true);\n+            CallbackFilter filters = (CallbackFilter) field2.get(proxy);\n+            Field field3 = field.get(mock).getClass().getDeclaredField(\"advised\");\n+            field3.setAccessible(true);\n+            Object advised = field3.get(field.get(mock));\n+            Field field4 = advised.getClass().getDeclaredField(\"callbacks\");\n+            field4.setAccessible(true);\n+            Object[] callbacks = (Object[]) field4.get(advised);\n+            for (int i = 0; i < callbacks.length; i++) {\n+                if (filters.accept(i)) {\n+                    ((MethodInterceptorFilter)callbacks[i]).setMockHandler(new MockHandler<T>(getMockHandler(mock)));\n+                }\n+            }\n+        } catch (NoSuchFieldException|IllegalAccessException ex) {\n+            throw new RuntimeException(\"Failed to reset the mock: \" + ex.getMessage(), ex);\n+        }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}