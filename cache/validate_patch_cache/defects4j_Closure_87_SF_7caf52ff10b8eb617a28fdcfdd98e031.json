{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node maybeExpression = n.getFirstChild();\n\n        if (NodeUtil.isExpressionNode(maybeExpression) &&\n            !NodeUtil.isFunctionExpression(maybeExpression) &&\n            maybeExpression.getType() != Token.OBJECTLIT &&\n            maybeExpression.getType() != Token.FUNCTION &&\n            maybeExpression.getType() != Token.REGEXP) {\n\n            if (n.getParent().getType() == Token.EXPR_RESULT) {\n                Node maybeExpressionParent = n.getParent();\n\n                if (n != maybeExpressionParent.getFirstChild()) {\n                    return false;\n                }\n\n                Node parent = maybeExpressionParent.getParent();\n\n                if (parent.getType() == Token.IF) {\n                    Node grandParent = parent.getParent();\n\n                    if (grandParent == null) {\n                        return true;\n                    }\n\n                    Node elseBlock = parent.getNext();\n\n                    if (elseBlock == null) {\n                        return true;\n                    }\n\n                    if (elseBlock.getType() == Token.BLOCK) {\n                        Node child = elseBlock.getFirstChild();\n\n                        if (child == null) {\n                            return true;\n                        }\n\n                        if (child.getType() == Token.RETURN) {\n                            Node grandchild = child.getFirstChild();\n\n                            if (grandchild.getType() == Token.FALSE) {\n                                return true;\n                            }\n                        }\n                    }\n                    return false;\n                }\n\n                if (parent.getType() == Token.VAR || parent.getType() == Token.EXPR_RESULT) {\n                    return true;\n                }\n\n                if (parent.getType() == Token.FOR) {\n                    Node grandParent = parent.getParent();\n\n                    if (grandParent.getType() == Token.FOR) {\n                        Node greatGrandParent = grandParent.getParent();\n\n                        if (greatGrandParent != null) {\n                            if (greatGrandParent.getType() == Token.IF) {\n                                Node elseBlock = greatGrandParent.getNext();\n\n                                if (elseBlock == null) {\n                                    return true;\n                                }\n\n                                if (elseBlock.getType() == Token.BLOCK) {\n                                    Node child = elseBlock.getFirstChild();\n\n                                    if (child == null) {\n                                        return true;\n                                    }\n\n                                    if (child.getType() == Token.RETURN) {\n                                        Node grandchild = child.getFirstChild();\n\n                                        if (grandchild.getType() == Token.FALSE) {\n                                            return true;\n                                        }\n                                    }\n                                }\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..ff39a080 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,100 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+        Node maybeExpression = n.getFirstChild();\n+\n+        if (NodeUtil.isExpressionNode(maybeExpression) &&\n+            !NodeUtil.isFunctionExpression(maybeExpression) &&\n+            maybeExpression.getType() != Token.OBJECTLIT &&\n+            maybeExpression.getType() != Token.FUNCTION &&\n+            maybeExpression.getType() != Token.REGEXP) {\n+\n+            if (n.getParent().getType() == Token.EXPR_RESULT) {\n+                Node maybeExpressionParent = n.getParent();\n+\n+                if (n != maybeExpressionParent.getFirstChild()) {\n+                    return false;\n+                }\n+\n+                Node parent = maybeExpressionParent.getParent();\n+\n+                if (parent.getType() == Token.IF) {\n+                    Node grandParent = parent.getParent();\n+\n+                    if (grandParent == null) {\n+                        return true;\n+                    }\n+\n+                    Node elseBlock = parent.getNext();\n+\n+                    if (elseBlock == null) {\n+                        return true;\n+                    }\n+\n+                    if (elseBlock.getType() == Token.BLOCK) {\n+                        Node child = elseBlock.getFirstChild();\n+\n+                        if (child == null) {\n+                            return true;\n+                        }\n+\n+                        if (child.getType() == Token.RETURN) {\n+                            Node grandchild = child.getFirstChild();\n+\n+                            if (grandchild.getType() == Token.FALSE) {\n+                                return true;\n+                            }\n+                        }\n+                    }\n+                    return false;\n+                }\n+\n+                if (parent.getType() == Token.VAR || parent.getType() == Token.EXPR_RESULT) {\n+                    return true;\n+                }\n+\n+                if (parent.getType() == Token.FOR) {\n+                    Node grandParent = parent.getParent();\n+\n+                    if (grandParent.getType() == Token.FOR) {\n+                        Node greatGrandParent = grandParent.getParent();\n+\n+                        if (greatGrandParent != null) {\n+                            if (greatGrandParent.getType() == Token.IF) {\n+                                Node elseBlock = greatGrandParent.getNext();\n+\n+                                if (elseBlock == null) {\n+                                    return true;\n+                                }\n+\n+                                if (elseBlock.getType() == Token.BLOCK) {\n+                                    Node child = elseBlock.getFirstChild();\n+\n+                                    if (child == null) {\n+                                        return true;\n+                                    }\n+\n+                                    if (child.getType() == Token.RETURN) {\n+                                        Node grandchild = child.getFirstChild();\n+\n+                                        if (grandchild.getType() == Token.FALSE) {\n+                                            return true;\n+                                        }\n+                                    }\n+                                }\n+                                return false;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            return true;\n+        }\n     }\n-\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}