{
    "patch": "// Don't traverse functions that are getting lent to a prototype.\nif (parent != null && parent.getType() == Token.ASSIGN) {\n  Node lhs = parent.getFirstChild();\n  Node llhs = lhs;\n  while (NodeUtil.isGet(llhs)) {\n    llhs = llhs.getFirstChild();\n    if (llhs.getType() == Token.THIS ||\n        (llhs.getType() == Token.NAME && llhs.getString().equals(\"Object\"))) {\n      return true;\n    }\n  }\n  if (llhs.getType() == Token.NAME ||\n      llhs.getType() == Token.FUNCTION ||\n      llhs.getType() == Token.STRING ||\n      llhs.getType() == Token.NUMBER ||\n      (NodeUtil.isObjectCall(n) && n.getFirstChild().getType() == Token.GETPROP)) {\n    return true;\n  }\n  if (llhs.getType() == Token.GETPROP && llhs.getNext().getType() == Token.STRING &&\n      llhs.getNext().getString().equals(\"prototype\")) {\n    return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..74a132a0 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,29 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+// Don't traverse functions that are getting lent to a prototype.\n+if (parent != null && parent.getType() == Token.ASSIGN) {\n+  Node lhs = parent.getFirstChild();\n+  Node llhs = lhs;\n+  while (NodeUtil.isGet(llhs)) {\n+    llhs = llhs.getFirstChild();\n+    if (llhs.getType() == Token.THIS ||\n+        (llhs.getType() == Token.NAME && llhs.getString().equals(\"Object\"))) {\n+      return true;\n+    }\n+  }\n+  if (llhs.getType() == Token.NAME ||\n+      llhs.getType() == Token.FUNCTION ||\n+      llhs.getType() == Token.STRING ||\n+      llhs.getType() == Token.NUMBER ||\n+      (NodeUtil.isObjectCall(n) && n.getFirstChild().getType() == Token.GETPROP)) {\n+    return true;\n+  }\n+  if (llhs.getType() == Token.GETPROP && llhs.getNext().getType() == Token.STRING &&\n+      llhs.getNext().getString().equals(\"prototype\")) {\n+    return false;\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}