{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    // Add weeks to days and normalize to positive\n    int totalDays = days + weeks * 7;\n    while (totalDays < 0) {\n        totalDays += 7;\n        weeks--;\n    }\n\n    // Normalize time fields\n    if (millis < 0) {\n        seconds--;\n        millis += DateTimeConstants.MILLIS_PER_SECOND;\n    }\n    if (seconds < 0) {\n        minutes--;\n        seconds += DateTimeConstants.SECONDS_PER_MINUTE;\n    }\n    if (minutes < 0) {\n        hours--;\n        minutes += DateTimeConstants.MINUTES_PER_HOUR;\n    }\n    if (hours < 0) {\n        totalDays--;\n        hours += DateTimeConstants.HOURS_PER_DAY;\n    }\n\n    // Normalize days and carry over to months\n    int monthCarry = 0;\n    while (totalDays < 0) {\n        monthCarry--;\n        totalDays += ISOChronology.getInstanceUTC().daysInMonth(years, months + monthCarry);\n    }\n    while (totalDays >= ISOChronology.getInstanceUTC().daysInMonth(years, months + monthCarry)) {\n        totalDays -= ISOChronology.getInstanceUTC().daysInMonth(years, months + monthCarry);\n        monthCarry++;\n    }\n\n    // Add the calculated values to a new period and return\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC())\n            .withSeconds(seconds)\n            .withMinutes(minutes)\n            .withHours(hours)\n            .withDays(totalDays)\n            .withMonths(months + monthCarry)\n            .withYears(years);\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..359d20c6 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,64 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+    int hours = getHours();\n+    int minutes = getMinutes();\n+    int seconds = getSeconds();\n+    int millis = getMillis();\n+\n+    // Add weeks to days and normalize to positive\n+    int totalDays = days + weeks * 7;\n+    while (totalDays < 0) {\n+        totalDays += 7;\n+        weeks--;\n+    }\n+\n+    // Normalize time fields\n+    if (millis < 0) {\n+        seconds--;\n+        millis += DateTimeConstants.MILLIS_PER_SECOND;\n+    }\n+    if (seconds < 0) {\n+        minutes--;\n+        seconds += DateTimeConstants.SECONDS_PER_MINUTE;\n+    }\n+    if (minutes < 0) {\n+        hours--;\n+        minutes += DateTimeConstants.MINUTES_PER_HOUR;\n+    }\n+    if (hours < 0) {\n+        totalDays--;\n+        hours += DateTimeConstants.HOURS_PER_DAY;\n+    }\n+\n+    // Normalize days and carry over to months\n+    int monthCarry = 0;\n+    while (totalDays < 0) {\n+        monthCarry--;\n+        totalDays += ISOChronology.getInstanceUTC().daysInMonth(years, months + monthCarry);\n+    }\n+    while (totalDays >= ISOChronology.getInstanceUTC().daysInMonth(years, months + monthCarry)) {\n+        totalDays -= ISOChronology.getInstanceUTC().daysInMonth(years, months + monthCarry);\n+        monthCarry++;\n+    }\n+\n+    // Add the calculated values to a new period and return\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC())\n+            .withSeconds(seconds)\n+            .withMinutes(minutes)\n+            .withHours(hours)\n+            .withDays(totalDays)\n+            .withMonths(months + monthCarry)\n+            .withYears(years);\n+\n+    return result;\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}