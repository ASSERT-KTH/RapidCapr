{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n        // We can't inline apply with unknown arity.\n        return CanInlineResult.NO;\n      } else {\n        throw new IllegalStateException(\n            \"Invalid function call node type \" + callNode);\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (cArg != null) {\n\n          // Check for arguments that are evaluated more than once.\n          // Note: Unlike block inlining, there it is not possible that a\n          // parameter reference will be in a loop.\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n          cArg = cArg.getNext();\n        } else if (fnParam.getString().equals(NodeUtil.JSC_PROPERTY_NAME_THIS)) {\n          // functions with a this parameter require that a this is actually provided.\n          return CanInlineResult.NO;\n        } else {\n          // There are no arguments for this named parameter.\n          return CanInlineResult.NO;\n        }\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      } else {\n        if (cArg != null) {\n          // There are too many arguments.\n          return CanInlineResult.NO;\n        }\n      }\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..973fca09 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -708,9 +708,12 @@ class FunctionInjector {\n           return CanInlineResult.NO;\n         }\n         cArg = cArg.getNext();\n+      } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n+        // We can't inline apply with unknown arity.\n+        return CanInlineResult.NO;\n       } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        throw new IllegalStateException(\n+            \"Invalid function call node type \" + callNode);\n       }\n     }\n \n@@ -729,19 +732,28 @@ class FunctionInjector {\n                   block, fnParam.getString()) > 1) {\n             return CanInlineResult.NO;\n           }\n+          cArg = cArg.getNext();\n+        } else if (fnParam.getString().equals(NodeUtil.JSC_PROPERTY_NAME_THIS)) {\n+          // functions with a this parameter require that a this is actually provided.\n+          return CanInlineResult.NO;\n+        } else {\n+          // There are no arguments for this named parameter.\n+          return CanInlineResult.NO;\n         }\n-\n         // Move to the next name.\n         fnParam = fnParam.getNext();\n+      } else {\n+        if (cArg != null) {\n+          // There are too many arguments.\n+          return CanInlineResult.NO;\n+        }\n       }\n-\n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n       if (cArg != null) {\n         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}