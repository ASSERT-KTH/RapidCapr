{
    "patch": "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget != null && callTarget.isName() &&\n      callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n    boolean isImmutableValue = NodeUtil.isImmutableValue(value);\n    boolean hasOneImmutableArg = isImmutableValue && value.getNext() == null;\n    boolean hasTwoImmutableArgs = isImmutableValue && NodeUtil.isImmutableValue(value.getNext());\n    if (hasOneImmutableArg || hasTwoImmutableArgs) {\n      Node addition = IR.add(\n          IR.string(\"\").srcref(callTarget),\n          value.detachFromParent());\n      if (hasTwoImmutableArgs) {\n        addition = IR.add(\n            addition,\n            value.getNext().detachFromParent());\n      }\n      n.getParent().replaceChild(n, addition);\n      reportCodeChange();\n      return addition;\n    }\n  }\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..751f5a9e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,31 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+private Node tryFoldSimpleFunctionCall(Node n) {\n+  Preconditions.checkState(n.isCall());\n+  Node callTarget = n.getFirstChild();\n+  if (callTarget != null && callTarget.isName() &&\n+      callTarget.getString().equals(\"String\")) {\n+    Node value = callTarget.getNext();\n+    boolean isImmutableValue = NodeUtil.isImmutableValue(value);\n+    boolean hasOneImmutableArg = isImmutableValue && value.getNext() == null;\n+    boolean hasTwoImmutableArgs = isImmutableValue && NodeUtil.isImmutableValue(value.getNext());\n+    if (hasOneImmutableArg || hasTwoImmutableArgs) {\n+      Node addition = IR.add(\n+          IR.string(\"\").srcref(callTarget),\n+          value.detachFromParent());\n+      if (hasTwoImmutableArgs) {\n+        addition = IR.add(\n+            addition,\n+            value.getNext().detachFromParent());\n+      }\n+      n.getParent().replaceChild(n, addition);\n+      reportCodeChange();\n+      return addition;\n+    }\n+  }\n+  return n;\n+}\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}