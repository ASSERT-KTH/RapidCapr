{
    "patch": "    List<Node> parametersToRemove = Lists.newArrayList();\n\n    for (Node currentNode = argList.getFirstChild(); currentNode != null; currentNode = currentNode.getNext()) {\n      if (!referenced.contains(fnScope.getVar(currentNode.getString()))) {\n        parametersToRemove.add(currentNode);\n      } else if (!parametersToRemove.isEmpty()) {\n        parametersToRemove.clear();\n      }\n    }\n    for (Node param : parametersToRemove) {\n      argList.removeChild(param);\n      compiler.reportCodeChange();\n    }\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..baa07dd8 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    List<Node> parametersToRemove = Lists.newArrayList();\n+\n+    for (Node currentNode = argList.getFirstChild(); currentNode != null; currentNode = currentNode.getNext()) {\n+      if (!referenced.contains(fnScope.getVar(currentNode.getString()))) {\n+        parametersToRemove.add(currentNode);\n+      } else if (!parametersToRemove.isEmpty()) {\n+        parametersToRemove.clear();\n+      }\n+    }\n+    for (Node param : parametersToRemove) {\n+      argList.removeChild(param);\n+      compiler.reportCodeChange();\n+    }\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}