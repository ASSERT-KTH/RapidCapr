{
    "patch": "        if (mock instanceof TypeSafeMatcher) {\n            TypeSafeMatcher<?> tsm = (TypeSafeMatcher<?>) mock;\n            Field field = tsm.getClass().getDeclaredField(\"matcher\");\n            field.setAccessible(true);\n            Object matcher = field.get(tsm);\n            ((Factory) matcher).setCallbacks(new Callback[] {newFilter});\n        } else if (mock instanceof Factory) {\n            ((Factory) mock).setCallbacks(new Callback[] {newFilter});\n        } else {\n            MockUtil.setMockitoNamingPolicy(mock.getClass());\n            MockHandler<T> handler = new MockHandler<T>(Mockito.mockingDetails(mock).getMockCreationSettings().getMockitoFeatures().toArray(new MockitoPlugin[0]));\n            handler.setInterceptorChain(new InterceptorChain(new LinkedList<MockitoInvocation>(), Mockito.mockingDetails(mock).getMockCreationSettings().getDefaultAnswer()));\n            ProxyFactory proxyFactory = new ProxyFactory(handler);\n            proxyFactory.setSuperclass(mock.getClass());\n            Class<?>[] interfaces = getAllInterfaces(mock);\n            proxyFactory.setInterfaces(interfaces);\n            Object proxiedMock = proxyFactory.createMock(mock.getClass(), mock.getClass().getInterfaces(), handler, isJavaProxy(mock));\n            MockUtil.copyInvocationListeners(mock, proxiedMock);\n            resetMock(mock);\n            MockUtil.copyState(proxiedMock, mock);\n            ((Factory) proxiedMock).setCallbacks(new Callback[] {newFilter});\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..6d5b81758 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,31 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        if (mock instanceof TypeSafeMatcher) {\n+            TypeSafeMatcher<?> tsm = (TypeSafeMatcher<?>) mock;\n+            Field field = tsm.getClass().getDeclaredField(\"matcher\");\n+            field.setAccessible(true);\n+            Object matcher = field.get(tsm);\n+            ((Factory) matcher).setCallbacks(new Callback[] {newFilter});\n+        } else if (mock instanceof Factory) {\n+            ((Factory) mock).setCallbacks(new Callback[] {newFilter});\n+        } else {\n+            MockUtil.setMockitoNamingPolicy(mock.getClass());\n+            MockHandler<T> handler = new MockHandler<T>(Mockito.mockingDetails(mock).getMockCreationSettings().getMockitoFeatures().toArray(new MockitoPlugin[0]));\n+            handler.setInterceptorChain(new InterceptorChain(new LinkedList<MockitoInvocation>(), Mockito.mockingDetails(mock).getMockCreationSettings().getDefaultAnswer()));\n+            ProxyFactory proxyFactory = new ProxyFactory(handler);\n+            proxyFactory.setSuperclass(mock.getClass());\n+            Class<?>[] interfaces = getAllInterfaces(mock);\n+            proxyFactory.setInterfaces(interfaces);\n+            Object proxiedMock = proxyFactory.createMock(mock.getClass(), mock.getClass().getInterfaces(), handler, isJavaProxy(mock));\n+            MockUtil.copyInvocationListeners(mock, proxiedMock);\n+            resetMock(mock);\n+            MockUtil.copyState(proxiedMock, mock);\n+            ((Factory) proxiedMock).setCallbacks(new Callback[] {newFilter});\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}