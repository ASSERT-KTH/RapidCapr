{
    "patch": "      Node cursor = argList.getFirstChild();\n      while (cursor != null) {\n\n        Node next = cursor.getNext();\n        Var var = fnScope.getVar(cursor.getString());\n        \n        // remove the argument if it is not referenced\n        if (!referenced.contains(var)) {\n          argList.removeChild(cursor);\n          compiler.reportCodeChange();\n        }\n        \n        cursor = next;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..2dbbc994 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,19 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node cursor = argList.getFirstChild();\n+      while (cursor != null) {\n+\n+        Node next = cursor.getNext();\n+        Var var = fnScope.getVar(cursor.getString());\n+        \n+        // remove the argument if it is not referenced\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(cursor);\n+          compiler.reportCodeChange();\n+        }\n+        \n+        cursor = next;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}