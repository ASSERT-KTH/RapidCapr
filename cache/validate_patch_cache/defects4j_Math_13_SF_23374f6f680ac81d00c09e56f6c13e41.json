{
    "patch": "        if (m.isDiagonal()) {\n            // if the matrix is diagonal, compute the square root of its diagonal elements\n            double[] diagonal = m.getColumn(0);\n            for (int i = 0; i < diagonal.length; i++) {\n                diagonal[i] = FastMath.sqrt(diagonal[i]);\n            }\n            return MatrixUtils.createRealDiagonalMatrix(diagonal);\n        } else {\n            // otherwise, compute the eigen decomposition and return its square root\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..797a23258 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n+        if (m.isDiagonal()) {\n+            // if the matrix is diagonal, compute the square root of its diagonal elements\n+            double[] diagonal = m.getColumn(0);\n+            for (int i = 0; i < diagonal.length; i++) {\n+                diagonal[i] = FastMath.sqrt(diagonal[i]);\n+            }\n+            return MatrixUtils.createRealDiagonalMatrix(diagonal);\n+        } else {\n+            // otherwise, compute the eigen decomposition and return its square root\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n-    }\n+        }\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}