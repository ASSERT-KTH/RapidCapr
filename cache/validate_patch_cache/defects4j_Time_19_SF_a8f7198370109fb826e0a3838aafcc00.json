{
    "patch": "    public int getOffset(long instant) {\n        if (iLastLookup <= instant && instant < iLastLookup + iLastInfo.getDuration()) {\n            // quick path for caching zone info\n            return iLastInfo.getOffset(instant);\n        }\n\n        // binary search for zone info\n        synchronized (this) {\n            if (iLastLookup <= instant && instant < iLastLookup + iLastInfo.getDuration()) {\n                return iLastInfo.getOffset(instant);\n            }\n\n            ZoneInfo info = iZoneInfo;\n            long lastLookup = iZoneInfoInterval.getStartMillis();\n            int[] offsets = info.getOffsets(lastLookup);\n            long[] transitions = info.getTransitionTimes();\n\n            if (transitions == null || instant < transitions[0]) {\n                iLastLookup = lastLookup;\n                iLastInfo = info;\n                return offsets[0];\n            }\n\n            int pos = Arrays.binarySearch(transitions, instant);\n            if (pos < 0) {\n                pos = -(pos + 1) - 1; // back up to previous transition\n            }\n\n            iLastLookup = transitions[pos];\n            if (iLastLookup >= lastLookup + iZoneInfoInterval.getDuration()) {\n                // after max length of one info, search for next info\n                info = findZoneInfoForUTC(iLastLookup);\n                lastLookup = info.getInterval(iLastLookup).getStartMillis();\n            }\n\n            iLastInfo = info;\n            return iLastInfo.getOffset(instant);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..fbbc94ec 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,37 +877,44 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+    public int getOffset(long instant) {\n+        if (iLastLookup <= instant && instant < iLastLookup + iLastInfo.getDuration()) {\n+            // quick path for caching zone info\n+            return iLastInfo.getOffset(instant);\n+        }\n+\n+        // binary search for zone info\n+        synchronized (this) {\n+            if (iLastLookup <= instant && instant < iLastLookup + iLastInfo.getDuration()) {\n+                return iLastInfo.getOffset(instant);\n             }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n+\n+            ZoneInfo info = iZoneInfo;\n+            long lastLookup = iZoneInfoInterval.getStartMillis();\n+            int[] offsets = info.getOffsets(lastLookup);\n+            long[] transitions = info.getTransitionTimes();\n+\n+            if (transitions == null || instant < transitions[0]) {\n+                iLastLookup = lastLookup;\n+                iLastInfo = info;\n+                return offsets[0];\n+            }\n+\n+            int pos = Arrays.binarySearch(transitions, instant);\n+            if (pos < 0) {\n+                pos = -(pos + 1) - 1; // back up to previous transition\n             }\n+\n+            iLastLookup = transitions[pos];\n+            if (iLastLookup >= lastLookup + iZoneInfoInterval.getDuration()) {\n+                // after max length of one info, search for next info\n+                info = findZoneInfoForUTC(iLastLookup);\n+                lastLookup = info.getInterval(iLastLookup).getStartMillis();\n+            }\n+\n+            iLastInfo = info;\n+            return iLastInfo.getOffset(instant);\n         }\n-        return offsetAdjusted;\n     }\n \n     /**",
    "result_reason": "error: method getOffset(long) is already defined in class DateTimeZone",
    "test_result": "ERROR"
}