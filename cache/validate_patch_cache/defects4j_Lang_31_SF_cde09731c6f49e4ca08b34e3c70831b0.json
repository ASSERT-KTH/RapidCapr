{
    "patch": "import java.util.Arrays;\n\npublic class StringUtils {\n    public static boolean containsAny(char[] str, char[] searchChars) {\n        if (searchChars.length == 0 || str.length == 0) {\n            return false;\n        }\n        Arrays.sort(searchChars);\n        for (int i = 0; i < str.length; i++) {\n            if (Arrays.binarySearch(searchChars, str[i]) >= 0) {\n                return true;\n            }\n            if (Character.isHighSurrogate(str[i])) {\n                if (i + 1 < str.length && Character.isLowSurrogate(str[i + 1])) {\n                    int codePoint = Character.toCodePoint(str[i], str[i + 1]);\n                    if (Arrays.binarySearch(searchChars, (char) codePoint) >= 0) {\n                        return true;\n                    }\n                    i++;\n                }\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..bbbcfaf9 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,31 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.Arrays;\n+\n+public class StringUtils {\n+    public static boolean containsAny(char[] str, char[] searchChars) {\n+        if (searchChars.length == 0 || str.length == 0) {\n+            return false;\n+        }\n+        Arrays.sort(searchChars);\n+        for (int i = 0; i < str.length; i++) {\n+            if (Arrays.binarySearch(searchChars, str[i]) >= 0) {\n+                return true;\n+            }\n+            if (Character.isHighSurrogate(str[i])) {\n+                if (i + 1 < str.length && Character.isLowSurrogate(str[i + 1])) {\n+                    int codePoint = Character.toCodePoint(str[i], str[i + 1]);\n+                    if (Arrays.binarySearch(searchChars, (char) codePoint) >= 0) {\n+                        return true;\n+                    }\n+                    i++;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}