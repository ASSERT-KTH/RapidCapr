{
    "patch": "StringBuilder out = new StringBuilder(in.length());\nfor(int i = 0; i < in.length(); i++) {\n    char ch = in.charAt(i);\n    if(ch <= '\\u007f') {\n        out.append(ch);\n    } else {\n        byte[] bytes = new byte[]{(byte)ch};\n        String temp = new String(bytes, \"ISO8859_1\");\n        for(int j=0;j<temp.length();j++) {\n            out.append('%');\n            out.append(Character.toUpperCase(Character.forDigit(temp.charAt(j) >> 4 & 0xF, 16)));\n            out.append(Character.toUpperCase(Character.forDigit(temp.charAt(j) & 0xF, 16)));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}