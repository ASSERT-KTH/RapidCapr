{
    "patch": "    public double cumulativeProbability(double x) throws MathException {\n        if (Double.isInfinite(x)) {\n            return (x < 0) ? 0.0 : 1.0;\n        }\n        final double dev = x - mean;\n        double adjustedDev = (standardDeviation == 0) ? dev : dev / standardDeviation;\n        try {\n            return 0.5 * (1.0 + Erf.erf(adjustedDev / FastMath.sqrt(2.0)));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 40 * standardDeviation)) {\n                return 0;\n            } else if (x > (mean + 40 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..1c5b66f48 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -122,14 +122,17 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * @throws MathException if the algorithm fails to converge\n      */\n     public double cumulativeProbability(double x) throws MathException {\n+        if (Double.isInfinite(x)) {\n+            return (x < 0) ? 0.0 : 1.0;\n+        }\n         final double dev = x - mean;\n+        double adjustedDev = (standardDeviation == 0) ? dev : dev / standardDeviation;\n         try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n+            return 0.5 * (1.0 + Erf.erf(adjustedDev / FastMath.sqrt(2.0)));\n         } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n+            if (x < (mean - 40 * standardDeviation)) {\n                 return 0;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n+            } else if (x > (mean + 40 * standardDeviation)) {\n                 return 1;\n             } else {\n                 throw ex;",
    "result_reason": "org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value \u221e",
    "test_result": "FAIL"
}