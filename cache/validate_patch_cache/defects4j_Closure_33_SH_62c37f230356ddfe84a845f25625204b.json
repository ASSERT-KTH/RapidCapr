{
    "patch": "    if (constraintObj.isNominalConstructor()) {\n      ObjectType nomClass = (ObjectType) constraintObj;\n      for (FunctionType ctor : nomClass.getConstructors()) {\n        // Match the 'new' constraint object against the 'constructor'.\n        matchConstructor(ctor);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..d5f3af67 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,13 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    if (constraintObj.isNominalConstructor()) {\n+      ObjectType nomClass = (ObjectType) constraintObj;\n+      for (FunctionType ctor : nomClass.getConstructors()) {\n+        // Match the 'new' constraint object against the 'constructor'.\n+        matchConstructor(ctor);\n+      }\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}