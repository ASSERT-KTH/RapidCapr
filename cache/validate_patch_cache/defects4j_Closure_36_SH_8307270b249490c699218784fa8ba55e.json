{
    "patch": "      if (value.isFunction()) {\n        Node callNode = reference.getParent();\n        if (reference.getParent().isCall()) {\n          CodingConvention convention = compiler.getCodingConvention();\n          // Bug 2388531: Don't inline subclass definitions into class defining\n          // calls as this confused class removing logic.\n          SubclassRelationship relationship =\n              convention.getClassesDefinedByCall(callNode);\n          if (relationship != null) {\n            return false;\n          }\n\n          // issue 668: Don't inline singleton getter methods\n          // calls as this confused class removing logic.\n          if (( callNode.isGetProp() || (callNode.getFirstChild().isGetProp()\n              // Parse \"foo.bar()\n              && !callNode.getParent().isCall())\n              // Parse \"new Foo().bar()\n              || callNode.isNew()\n                  && callNode.getSecondChild().isGetProp())) {\n            Node targetNode = value.getLastChild();\n            TypeI targetType = targetNode.getTypeI();\n            String methodName = targetNode.getLastChild().getString();\n            Property prop = targetType.getProperty(methodName);\n            if (prop != null\n                && prop.getType().isFunctionType()\n                && prop.getType().isFunctionTypeWithInstanceType()) {\n              ObjectType instanceType = prop.getType().getInstanceType();\n              ObjectType thisType = callNode.getFirstChild().isThis()\n                  ? callNode.getParent()\n                      .getParent()\n                      .getJSType().toObjectType() : null;\n              if (thisType != null\n                  && instanceType.getReferenceName().equals(\n                        thisType.getReferenceName())) {\n                return false;\n              }\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..14cdfab9 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,47 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+      if (value.isFunction()) {\n+        Node callNode = reference.getParent();\n+        if (reference.getParent().isCall()) {\n+          CodingConvention convention = compiler.getCodingConvention();\n+          // Bug 2388531: Don't inline subclass definitions into class defining\n+          // calls as this confused class removing logic.\n+          SubclassRelationship relationship =\n+              convention.getClassesDefinedByCall(callNode);\n+          if (relationship != null) {\n+            return false;\n+          }\n+\n+          // issue 668: Don't inline singleton getter methods\n+          // calls as this confused class removing logic.\n+          if (( callNode.isGetProp() || (callNode.getFirstChild().isGetProp()\n+              // Parse \"foo.bar()\n+              && !callNode.getParent().isCall())\n+              // Parse \"new Foo().bar()\n+              || callNode.isNew()\n+                  && callNode.getSecondChild().isGetProp())) {\n+            Node targetNode = value.getLastChild();\n+            TypeI targetType = targetNode.getTypeI();\n+            String methodName = targetNode.getLastChild().getString();\n+            Property prop = targetType.getProperty(methodName);\n+            if (prop != null\n+                && prop.getType().isFunctionType()\n+                && prop.getType().isFunctionTypeWithInstanceType()) {\n+              ObjectType instanceType = prop.getType().getInstanceType();\n+              ObjectType thisType = callNode.getFirstChild().isThis()\n+                  ? callNode.getParent()\n+                      .getParent()\n+                      .getJSType().toObjectType() : null;\n+              if (thisType != null\n+                  && instanceType.getReferenceName().equals(\n+                        thisType.getReferenceName())) {\n+                return false;\n+              }\n+            }\n+          }\n+        }\n+      }\n         }\n       }\n ",
    "result_reason": "error: variable callNode is already defined in method canInline(Reference,Reference,Reference)",
    "test_result": "ERROR"
}