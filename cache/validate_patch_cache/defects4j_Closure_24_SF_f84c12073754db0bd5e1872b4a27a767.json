{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (n != null && n.isName() && n.getParent().isVar()) {\n      Node initialValue = v.getInitialValue();\n      Node parent = n.getParent();\n\n      // add alias if it's a qualified name\n      if (initialValue != null && initialValue.isQualifiedName()) {\n        String name = n.getString();\n        String qualifiedName = initialValue.getQualifiedName();\n        aliases.put(name, v);\n        transformation.addAlias(name, qualifiedName);\n      }\n      // ignore bleeding functions and function parameters\n      else if (parent.hasOneChild() && (initialValue.isFunction() || NodeUtil.isFunctionExpression(initialValue))) {\n        continue;\n      }\n      // outermost name can be used for private variable\n      else if (parent.getParent() == null) {\n        continue;\n      }\n      // report non-alias local variable used in goog.scope\n      else {\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..b9c16b70 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,36 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (n != null && n.isName() && n.getParent().isVar()) {\n+      Node initialValue = v.getInitialValue();\n+      Node parent = n.getParent();\n+\n+      // add alias if it's a qualified name\n+      if (initialValue != null && initialValue.isQualifiedName()) {\n+        String name = n.getString();\n+        String qualifiedName = initialValue.getQualifiedName();\n+        aliases.put(name, v);\n+        transformation.addAlias(name, qualifiedName);\n+      }\n+      // ignore bleeding functions and function parameters\n+      else if (parent.hasOneChild() && (initialValue.isFunction() || NodeUtil.isFunctionExpression(initialValue))) {\n+        continue;\n+      }\n+      // outermost name can be used for private variable\n+      else if (parent.getParent() == null) {\n+        continue;\n+      }\n+      // report non-alias local variable used in goog.scope\n+      else {\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n       }\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}