{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the expanded simplex\n                    simplex = evaluateNewSimplex(original, gamma, comparator);\n                }\n\n                return;\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = evaluateNewSimplex(original, rho, comparator);\n            }\n\n            // check convergence\n            final double delta = Math.abs(best.getValue() - simplex[simplex.length - 1].getValue());\n            final double size = getConvergenceChecker().getRelativeThreshold() *\n                (Math.abs(best.getValue()) + Math.abs(simplex[simplex.length - 1].getValue())) * 0.5;\n            if (delta <= size) {\n                return;\n            }\n            \n        }\n   \n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..a583aaca9 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -79,23 +79,31 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    // accept the expanded simplex\n+                    simplex = evaluateNewSimplex(original, gamma, comparator);\n                 }\n \n                 return;\n-\n             }\n \n             // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = evaluateNewSimplex(original, rho, comparator);\n+            }\n \n             // check convergence\n+            final double delta = Math.abs(best.getValue() - simplex[simplex.length - 1].getValue());\n+            final double size = getConvergenceChecker().getRelativeThreshold() *\n+                (Math.abs(best.getValue()) + Math.abs(simplex[simplex.length - 1].getValue())) * 0.5;\n+            if (delta <= size) {\n                 return;\n             }\n-\n+            \n         }\n-\n+   \n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}