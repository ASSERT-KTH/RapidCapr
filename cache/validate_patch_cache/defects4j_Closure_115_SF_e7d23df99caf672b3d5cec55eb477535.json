{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    Node fnBlock = NodeUtil.getFunctionBody(fnNode);\n\n    // Check if the function has exactly one statement that is a return statement\n    Node stmt = fnBlock.getOnlyChild();\n    if (!stmt.isReturn()) {\n        return CanInlineResult.NO;\n    }\n\n    // Check if the return statement in the function has exactly one child that is a call to a single-argument function\n    // and that argument is the name of the formal parameter of the function\n    Node expr = stmt.getFirstChild();\n    if (!expr.isCall()) {\n        return CanInlineResult.NO;\n    }\n    Node nameOrFn = expr.getFirstChild();\n    if (!nameOrFn.isName() && (!nameOrFn.isFunction() || NodeUtil.getFunctionParameters(nameOrFn).getChildCount() != 1)) {\n        return CanInlineResult.NO;\n    }\n    Node arg = expr.getLastChild();\n    if (arg == null || !arg.isName()) {\n        return CanInlineResult.NO;\n    }\n    Node parameterNode = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    if (parameterNode == null || !parameterNode.isName()) {\n        return CanInlineResult.NO;\n    }\n    if (!parameterNode.getString().equals(arg.getString())) {\n        return CanInlineResult.NO;\n    }\n\n    // Check if the call node has no side effects and a single argument other than \"this\"\n    boolean hasSideEffects = NodeUtil.mayHaveSideEffects(callNode, compiler);\n    Node callArguments = callNode.getLastChild();\n    if (!callArguments.hasOneChild()) {\n        return CanInlineResult.NO;\n    }\n    Node callArg = callArguments.getFirstChild();\n    if (isThisReference(callArg)) {\n        if (callArg.getNext() != null) {\n            return CanInlineResult.NO;\n        }\n    } else {\n        if (hasSideEffects || NodeUtil.mayHaveSideEffects(callArg, compiler)) {\n            return CanInlineResult.NO;\n        }\n        if (callArg.getNext() != null) {\n            return CanInlineResult.NO;\n        }\n    }\n\n    return CanInlineResult.YES;\n}\n\nprivate static boolean isThisReference(Node n) {\n    return n.isThis() || (n.isName() && n.getString().equals(\"this\"));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..7b4dc6fa 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,76 +686,67 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+        return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n+    Node fnBlock = NodeUtil.getFunctionBody(fnNode);\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n+    // Check if the function has exactly one statement that is a return statement\n+    Node stmt = fnBlock.getOnlyChild();\n+    if (!stmt.isReturn()) {\n+        return CanInlineResult.NO;\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+    // Check if the return statement in the function has exactly one child that is a call to a single-argument function\n+    // and that argument is the name of the formal parameter of the function\n+    Node expr = stmt.getFirstChild();\n+    if (!expr.isCall()) {\n+        return CanInlineResult.NO;\n+    }\n+    Node nameOrFn = expr.getFirstChild();\n+    if (!nameOrFn.isName() && (!nameOrFn.isFunction() || NodeUtil.getFunctionParameters(nameOrFn).getChildCount() != 1)) {\n+        return CanInlineResult.NO;\n+    }\n+    Node arg = expr.getLastChild();\n+    if (arg == null || !arg.isName()) {\n+        return CanInlineResult.NO;\n+    }\n+    Node parameterNode = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+    if (parameterNode == null || !parameterNode.isName()) {\n+        return CanInlineResult.NO;\n+    }\n+    if (!parameterNode.getString().equals(arg.getString())) {\n+        return CanInlineResult.NO;\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n+    // Check if the call node has no side effects and a single argument other than \"this\"\n+    boolean hasSideEffects = NodeUtil.mayHaveSideEffects(callNode, compiler);\n+    Node callArguments = callNode.getLastChild();\n+    if (!callArguments.hasOneChild()) {\n+        return CanInlineResult.NO;\n+    }\n+    Node callArg = callArguments.getFirstChild();\n+    if (isThisReference(callArg)) {\n+        if (callArg.getNext() != null) {\n             return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+        }\n+    } else {\n+        if (hasSideEffects || NodeUtil.mayHaveSideEffects(callArg, compiler)) {\n             return CanInlineResult.NO;\n-          }\n         }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+        if (callArg.getNext() != null) {\n+            return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n-      }\n     }\n \n     return CanInlineResult.YES;\n-  }\n+}\n+\n+private static boolean isThisReference(Node n) {\n+    return n.isThis() || (n.isName() && n.getString().equals(\"this\"));\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}