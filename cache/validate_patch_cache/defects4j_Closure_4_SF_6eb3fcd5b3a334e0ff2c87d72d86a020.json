{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    if (isResolved()) {\n        return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    boolean resolved = false;\n    if (!registry.cachingInProcess(this)) {\n        resolved = resolveViaRegistry(t, enclosing);\n        registry.cachingDone(this, resolved);\n    } else {\n        resolved = registry.isCachingComplete(this);\n    }\n\n    if (!resolved) {\n        resolveViaProperties(t, enclosing);\n    }\n\n    if (!isResolved() && detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n        if (!registry.cachingInProcess(this)) {\n            resolved = resolveViaRegistry(t, enclosing);\n            registry.cachingDone(this, resolved);\n        } else {\n            resolved = registry.isCachingComplete(this);\n        }\n        if (!resolved) {\n            resolveViaProperties(t, enclosing);\n        }\n    }\n\n    super.resolveInternal(t, enclosing);\n\n    if (isResolved()) {\n        finishPropertyContinuations();\n    }\n\n    return registry.isLastGeneration() ? getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..9ac7594f 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,44 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    if (isResolved()) {\n+        return registry.isLastGeneration() ? getReferencedType() : this;\n+    }\n+\n+    boolean resolved = false;\n+    if (!registry.cachingInProcess(this)) {\n+        resolved = resolveViaRegistry(t, enclosing);\n+        registry.cachingDone(this, resolved);\n+    } else {\n+        resolved = registry.isCachingComplete(this);\n     }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    if (!resolved) {\n+        resolveViaProperties(t, enclosing);\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    if (!isResolved() && detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n+        if (!registry.cachingInProcess(this)) {\n+            resolved = resolveViaRegistry(t, enclosing);\n+            registry.cachingDone(this, resolved);\n+        } else {\n+            resolved = registry.isCachingComplete(this);\n+        }\n+        if (!resolved) {\n+            resolveViaProperties(t, enclosing);\n+        }\n     }\n \n     super.resolveInternal(t, enclosing);\n+\n     if (isResolved()) {\n-      finishPropertyContinuations();\n+        finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}