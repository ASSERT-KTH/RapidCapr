{
    "patch": "private static final double TWO_PI = 2 * Math.PI;\n\nprivate Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException {\n    boolean neg = value < 0;\n    double r = neg ? -value : value;\n\n    // Check if value is an integer.\n    if (Math.floor(r) == r) {\n        this.numerator = (int) (neg ? -r : r);\n        this.denominator = 1;\n        return;\n    }\n\n    // Check if value is infinite or NaN.\n    if (Double.isInfinite(value) || Double.isNaN(value)) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n\n    int n = 1;\n    long aPrev = (long) Math.floor(r);\n    long pPrev = 1;\n    long p = aPrev;\n    long qPrev = 0;\n    long q = 1;\n    double rPrev = r - aPrev;\n    double delta = 1.0;\n\n    while (n <= maxIterations) {\n        double a = TWO_PI / rPrev;\n        long qNew = (long) Math.floor(delta * qPrev + a * q);\n        long pNew = qNew * aPrev + pPrev;\n\n        // Check if the maximum denominator or epsilon condition is satisfied.\n        if (qNew <= maxDenominator && Math.abs((double) pNew / qNew - r) < epsilon) {\n            this.numerator = (int) (neg ? -pNew : pNew);\n            this.denominator = (int) qNew;\n            return;\n        }\n\n        n++;\n\n        // Update variables.\n        rPrev = a - (int) a;\n        aPrev = (long) a;\n        delta = 1.0 / (rPrev * delta);\n        qPrev = q;\n        q = qNew;\n        pPrev = p;\n        p = pNew;\n    }\n\n    // Check if closest fraction is within epsilon of the value.\n    if (q <= maxDenominator && Math.abs((double) p / q - r) < epsilon) {\n        this.numerator = (int) (neg ? -p : p);\n        this.denominator = (int) q;\n        return;\n    }\n\n    throw new FractionConversionException(value, maxIterations);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..a0531a9d0 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -172,71 +172,67 @@ public class Fraction\n      * @throws FractionConversionException if the continued fraction failed to\n      *         converge.\n      */\n-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n-        throws FractionConversionException\n-    {\n-        long overflow = Integer.MAX_VALUE;\n-        double r0 = value;\n-        long a0 = (long)FastMath.floor(r0);\n-        if (a0 > overflow) {\n-            throw new FractionConversionException(value, a0, 1l);\n-        }\n+private static final double TWO_PI = 2 * Math.PI;\n \n-        // check for (almost) integer arguments, which should not go\n-        // to iterations.\n-        if (FastMath.abs(a0 - value) < epsilon) {\n-            this.numerator = (int) a0;\n-            this.denominator = 1;\n-            return;\n-        }\n+private Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException {\n+    boolean neg = value < 0;\n+    double r = neg ? -value : value;\n \n-        long p0 = 1;\n-        long q0 = 0;\n-        long p1 = a0;\n-        long q1 = 1;\n-\n-        long p2 = 0;\n-        long q2 = 1;\n-\n-        int n = 0;\n-        boolean stop = false;\n-        do {\n-            ++n;\n-            double r1 = 1.0 / (r0 - a0);\n-            long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n-            }\n+    // Check if value is an integer.\n+    if (Math.floor(r) == r) {\n+        this.numerator = (int) (neg ? -r : r);\n+        this.denominator = 1;\n+        return;\n+    }\n \n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n-                p0 = p1;\n-                p1 = p2;\n-                q0 = q1;\n-                q1 = q2;\n-                a0 = a1;\n-                r0 = r1;\n-            } else {\n-                stop = true;\n-            }\n-        } while (!stop);\n+    // Check if value is infinite or NaN.\n+    if (Double.isInfinite(value) || Double.isNaN(value)) {\n+        throw new FractionConversionException(value, maxIterations);\n+    }\n \n-        if (n >= maxIterations) {\n-            throw new FractionConversionException(value, maxIterations);\n+    int n = 1;\n+    long aPrev = (long) Math.floor(r);\n+    long pPrev = 1;\n+    long p = aPrev;\n+    long qPrev = 0;\n+    long q = 1;\n+    double rPrev = r - aPrev;\n+    double delta = 1.0;\n+\n+    while (n <= maxIterations) {\n+        double a = TWO_PI / rPrev;\n+        long qNew = (long) Math.floor(delta * qPrev + a * q);\n+        long pNew = qNew * aPrev + pPrev;\n+\n+        // Check if the maximum denominator or epsilon condition is satisfied.\n+        if (qNew <= maxDenominator && Math.abs((double) pNew / qNew - r) < epsilon) {\n+            this.numerator = (int) (neg ? -pNew : pNew);\n+            this.denominator = (int) qNew;\n+            return;\n         }\n \n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n-        } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n-        }\n+        n++;\n \n+        // Update variables.\n+        rPrev = a - (int) a;\n+        aPrev = (long) a;\n+        delta = 1.0 / (rPrev * delta);\n+        qPrev = q;\n+        q = qNew;\n+        pPrev = p;\n+        p = pNew;\n     }\n \n+    // Check if closest fraction is within epsilon of the value.\n+    if (q <= maxDenominator && Math.abs((double) p / q - r) < epsilon) {\n+        this.numerator = (int) (neg ? -p : p);\n+        this.denominator = (int) q;\n+        return;\n+    }\n+\n+    throw new FractionConversionException(value, maxIterations);\n+}\n+\n     /**\n      * Create a fraction from an int.\n      * The fraction is num / 1.",
    "result_reason": "org.apache.commons.math3.fraction.FractionConversionException: illegal state: Unable to convert 3.142 to fraction after 100 iterations",
    "test_result": "FAIL"
}