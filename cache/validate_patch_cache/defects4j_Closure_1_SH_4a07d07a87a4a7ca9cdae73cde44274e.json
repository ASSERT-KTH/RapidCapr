{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n>>> [ INFILL ] <<<\n      int paramCount = 0;\n      for (Node arg : argList.children()) {\n        paramCount++;\n        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n          compiler.reportCodeChange();\n          NodeUtil.removeChild(argList, arg);\n          arg.detach();\n          paramCount--;\n        }\n      }\n      if (NodeUtil.isVarArgsFunction(function)) {\n        Node restArg = argList.getLastChild();\n        if (restArg != null && !referenced.contains(fnScope.getVar(restArg.getString()))) {\n          argList.removeChild(restArg);\n          restArg.detach();\n          paramCount--;\n        }\n      }\n      if (function.isArrowFunction()) {\n        Preconditions.checkState(!function.hasChildren());\n        Preconditions.checkState(function.getParent().isCall());\n        // An arrow function whose body is an expression does not need an\n        // explicit return.\n        function.getParent().putBooleanProp(Node.FREE_CALL, true);\n      }\n      function.putProp(Node.FUNCTION_PARAMETER_COUNT, paramCount);\n>>> [ /INFILL ] <<<\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5d78cee8 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,60 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+>>> [ INFILL ] <<<\n+      int paramCount = 0;\n+      for (Node arg : argList.children()) {\n+        paramCount++;\n+        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+          compiler.reportCodeChange();\n+          NodeUtil.removeChild(argList, arg);\n+          arg.detach();\n+          paramCount--;\n+        }\n+      }\n+      if (NodeUtil.isVarArgsFunction(function)) {\n+        Node restArg = argList.getLastChild();\n+        if (restArg != null && !referenced.contains(fnScope.getVar(restArg.getString()))) {\n+          argList.removeChild(restArg);\n+          restArg.detach();\n+          paramCount--;\n+        }\n+      }\n+      if (function.isArrowFunction()) {\n+        Preconditions.checkState(!function.hasChildren());\n+        Preconditions.checkState(function.getParent().isCall());\n+        // An arrow function whose body is an expression does not need an\n+        // explicit return.\n+        function.getParent().putBooleanProp(Node.FREE_CALL, true);\n+      }\n+      function.putProp(Node.FUNCTION_PARAMETER_COUNT, paramCount);\n+>>> [ /INFILL ] <<<\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}