{
    "patch": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    // Store the old hash code of the node\n    int oldHashCode = node.hashCode();\n\n    int visits = 0;\n    do {\n      Node c = node.getFirstChild();\n      while(c != null) {\n        traverse(c);\n        Node next = c.getNext();\n        c = next;\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many iterations\");\n    } while (shouldRetraverse(node) || oldHashCode != node.hashCode());\n\n    exitNode(node);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..fb9a1c51 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -119,6 +119,9 @@ class PeepholeOptimizationsPass\n       return;\n     }\n \n+    // Store the old hash code of the node\n+    int oldHashCode = node.hashCode();\n+\n     int visits = 0;\n     do {\n       Node c = node.getFirstChild();\n@@ -131,8 +134,8 @@ class PeepholeOptimizationsPass\n       visit(node);\n       visits++;\n \n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n-    } while (shouldRetraverse(node));\n+      Preconditions.checkState(visits < 10000, \"too many iterations\");\n+    } while (shouldRetraverse(node) || oldHashCode != node.hashCode());\n \n     exitNode(node);\n   }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}