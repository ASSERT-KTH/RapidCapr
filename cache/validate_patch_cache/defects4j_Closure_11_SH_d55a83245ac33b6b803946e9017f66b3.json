{
    "patch": "if(n.getJSType() != null) {\n    if(parent != null && parent.isAssign()) {\n      return;\n    }\n    for (String method : METHODS_TO_IGNORE) {\n      if (n.matchesQualifiedName(method)) {\n        return;\n      }\n    }\n    String propName = n.getLastChild().getString();\n    String[] parts = propName.split(\"_\");\n    boolean isCamelCase = false;\n    // Check if property name is camelCase or not\n    if (parts.length > 1) {\n      isCamelCase = true;\n      for (String part : parts) {\n        if (!Character.isLowerCase(part.charAt(0))) {\n          isCamelCase = false;\n          break;\n        }\n      }\n    }\n    if (!isCamelCase) {\n      warnings.add(new Warning(\n          filepath,\n          n.getLineno(),\n          \"Avoid using underscore_separated names, use camelCase instead. - \" + propName));\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}