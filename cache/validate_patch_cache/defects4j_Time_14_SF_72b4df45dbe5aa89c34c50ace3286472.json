{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    \n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean monthChanged = false;\n        \n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex) {\n                int oldValue = values[i];\n                int newValue = oldValue + valueToAdd;\n                int monthOfYear = iChronology.monthOfYear().get(instant);\n                int year = iChronology.year().get(instant);\n                \n                if (newValue > 0) {\n                    int monthOverflow = (newValue - 1) / 12;\n                    if (monthOfYear + monthOverflow > 12) {\n                        year += (monthOfYear + monthOverflow - 1) / 12;\n                        monthOfYear = (monthOfYear + monthOverflow - 1) % 12 + 1;\n                        monthChanged = true;\n                    }\n                } else {\n                    int monthOverflow = (newValue + 1) / 12;\n                    if (monthOfYear + monthOverflow < 1) {\n                        year += (monthOfYear + monthOverflow) / 12;\n                        monthOfYear = 12 - ((monthOfYear + monthOverflow) % -12);\n                        monthChanged = true;\n                    }\n                }\n                \n                if (monthChanged) {\n                    int lastDay = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(instant, year), monthOfYear), 1));\n                    instant = iChronology.dayOfMonth().set(instant, Math.min(lastDay, iChronology.dayOfMonth().get(instant)));\n                } else {\n                    // fix month and/or year overflow\n                    if (monthOfYear == 2 && iChronology.dayOfMonth().get(instant) == 29 && !iChronology.isLeapYear(year)) {\n                        // change date to February 28\n                        instant = iChronology.dayOfMonth().set(instant, 28);\n                    }\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n                }\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        \n        if (monthChanged && iChronology.dayOfMonth().get(instant) == iChronology.dayOfMonth().getMinimumValue(instant)) {\n            // correct dayOfMonth to minimum value if month changed\n            instant = iChronology.dayOfMonth().set(instant, 1);\n        }\n        \n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..8faa662c 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,68 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    \n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    \n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean monthChanged = false;\n+        \n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex) {\n+                int oldValue = values[i];\n+                int newValue = oldValue + valueToAdd;\n+                int monthOfYear = iChronology.monthOfYear().get(instant);\n+                int year = iChronology.year().get(instant);\n+                \n+                if (newValue > 0) {\n+                    int monthOverflow = (newValue - 1) / 12;\n+                    if (monthOfYear + monthOverflow > 12) {\n+                        year += (monthOfYear + monthOverflow - 1) / 12;\n+                        monthOfYear = (monthOfYear + monthOverflow - 1) % 12 + 1;\n+                        monthChanged = true;\n+                    }\n+                } else {\n+                    int monthOverflow = (newValue + 1) / 12;\n+                    if (monthOfYear + monthOverflow < 1) {\n+                        year += (monthOfYear + monthOverflow) / 12;\n+                        monthOfYear = 12 - ((monthOfYear + monthOverflow) % -12);\n+                        monthChanged = true;\n+                    }\n+                }\n+                \n+                if (monthChanged) {\n+                    int lastDay = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(instant, year), monthOfYear), 1));\n+                    instant = iChronology.dayOfMonth().set(instant, Math.min(lastDay, iChronology.dayOfMonth().get(instant)));\n+                } else {\n+                    // fix month and/or year overflow\n+                    if (monthOfYear == 2 && iChronology.dayOfMonth().get(instant) == 29 && !iChronology.isLeapYear(year)) {\n+                        // change date to February 28\n+                        instant = iChronology.dayOfMonth().set(instant, 28);\n+                    }\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n+                }\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        \n+        if (monthChanged && iChronology.dayOfMonth().get(instant) == iChronology.dayOfMonth().getMinimumValue(instant)) {\n+            // correct dayOfMonth to minimum value if month changed\n+            instant = iChronology.dayOfMonth().set(instant, 1);\n+        }\n+        \n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "org.joda.time.IllegalFieldValueException: Value -4 for monthOfYear must be in the range [1,12]",
    "test_result": "FAIL"
}