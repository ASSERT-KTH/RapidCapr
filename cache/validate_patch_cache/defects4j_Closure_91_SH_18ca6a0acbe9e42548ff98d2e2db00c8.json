{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGet(parent)) {\n        Node lhs = parent.getFirstChild();\n        Node grandparent = parent.getParent();\n        if (NodeUtil.isAssignmentOp(grandparent)) {\n          // `x.prototype.y = function() {...}` or `x.y.prototype.z = function() {...}`.\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        } else if (grandparent.getType() == Token.CALL) {\n          // `x.y(...)` where `x.y` refers to a function value with a `prototype` property.\n          Node method = grandparent.getFirstChild();\n          if (method.getType() == Token.GETPROP &&\n              method.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      } else if (jsDoc != null && jsDoc.isConstructor()) {\n          return !NodeUtil.isNew(parent);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..e773ac39 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,28 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Node lhs = parent.getFirstChild();\n+        Node grandparent = parent.getParent();\n+        if (NodeUtil.isAssignmentOp(grandparent)) {\n+          // `x.prototype.y = function() {...}` or `x.y.prototype.z = function() {...}`.\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        } else if (grandparent.getType() == Token.CALL) {\n+          // `x.y(...)` where `x.y` refers to a function value with a `prototype` property.\n+          Node method = grandparent.getFirstChild();\n+          if (method.getType() == Token.GETPROP &&\n+              method.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+      } else if (jsDoc != null && jsDoc.isConstructor()) {\n+          return !NodeUtil.isNew(parent);\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 110 expected:<0> but was:<1>",
    "test_result": "FAIL"
}