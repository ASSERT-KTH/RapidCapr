{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid input argument: a <= 0 or x < 0\");\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    double incompleteGamma = incompleteGamma(a, x, epsilon, maxIterations);\n    double gamma = Gamma.gamma(a);\n    return incompleteGamma / gamma;\n}\n\nprivate static double incompleteGamma(double a, double x, double epsilon, int maxIterations) {\n    double incompleteGamma = 0.0;\n    double term;\n    int n = 1;\n    do {\n        term = x * Math.pow(-1.0 * x, -1.0 * n) / (a + n);\n        incompleteGamma += term;\n        n++;\n    } while (Math.abs(term) > Math.max(epsilon * Math.abs(incompleteGamma), epsilon));\n    return Math.exp(-1.0 * x) * Math.pow(x, a) * incompleteGamma;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..4a05161d5 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,29 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid input argument: a <= 0 or x < 0\");\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    double incompleteGamma = incompleteGamma(a, x, epsilon, maxIterations);\n+    double gamma = Gamma.gamma(a);\n+    return incompleteGamma / gamma;\n+}\n+\n+private static double incompleteGamma(double a, double x, double epsilon, int maxIterations) {\n+    double incompleteGamma = 0.0;\n+    double term;\n+    int n = 1;\n+    do {\n+        term = x * Math.pow(-1.0 * x, -1.0 * n) / (a + n);\n+        incompleteGamma += term;\n+        n++;\n+    } while (Math.abs(term) > Math.max(epsilon * Math.abs(incompleteGamma), epsilon));\n+    return Math.exp(-1.0 * x) * Math.pow(x, a) * incompleteGamma;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}