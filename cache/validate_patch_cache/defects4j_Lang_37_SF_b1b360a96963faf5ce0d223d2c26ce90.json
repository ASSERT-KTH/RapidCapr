{
    "patch": "public static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n        if (type1.isPrimitive() ^ type2.isPrimitive()) {\n            throw new IllegalArgumentException(\"Cannot store elements of different types (primitive or object) in the same array\");\n        } else {\n            throw new IllegalArgumentException(\"Cannot store elements of different object types in the same array\");\n        }\n    }\n    int length1 = array1.length;\n    int length2 = array2.length;\n    T[] result;\n    if (type1.isPrimitive()) {\n        result = (T[]) Array.newInstance(type1, length1 + length2);\n        if (type1 == Boolean.TYPE) {\n            System.arraycopy(array1, 0, result, 0, length1);\n            for (int i = 0; i < length2; ++i) {\n                Array.setBoolean(result, i + length1, (Boolean) array2[i]);\n            }\n        } else if (type1 == Byte.TYPE) {\n            System.arraycopy(array1, 0, result, 0, length1);\n            for (int i = 0; i < length2; ++i) {\n                Array.setByte(result, i + length1, (Byte) array2[i]);\n            }\n        } else if (type1 == Character.TYPE) {\n            System.arraycopy(array1, 0, result, 0, length1);\n            for (int i = 0; i < length2; ++i) {\n                Array.setChar(result, i + length1, (Character) array2[i]);\n            }\n        } else if (type1 == Double.TYPE) {\n            System.arraycopy(array1, 0, result, 0, length1);\n            for (int i = 0; i < length2; ++i) {\n                Array.setDouble(result, i + length1, (Double) array2[i]);\n            }\n        } else if (type1 == Float.TYPE) {\n            System.arraycopy(array1, 0, result, 0, length1);\n            for (int i = 0; i < length2; ++i) {\n                Array.setFloat(result, i + length1, (Float) array2[i]);\n            }\n        } else if (type1 == Integer.TYPE) {\n            System.arraycopy(array1, 0, result, 0, length1);\n            for (int i = 0; i < length2; ++i) {\n                Array.setInt(result, i + length1, (Integer) array2[i]);\n            }\n        } else if (type1 == Long.TYPE) {\n            System.arraycopy(array1, 0, result, 0, length1);\n            for (int i = 0; i < length2; ++i) {\n                Array.setLong(result, i + length1, (Long) array2[i]);\n            }\n        } else if (type1 == Short.TYPE) {\n            System.arraycopy(array1, 0, result, 0, length1);\n            for (int i = 0; i < length2; ++i) {\n                Array.setShort(result, i + length1, (Short) array2[i]);\n            }\n        }\n    } else {\n        result = (T[]) Array.newInstance(type1, length1 + length2);\n\n        System.arraycopy(array1, 0, result, 0, length1);\n        System.arraycopy(array2, 0, result, length1, length2);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..fa404f18 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,19 +2950,75 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n+public static <T> T[] addAll(T[] array1, T... array2) {\n+    if (array1 == null) {\n+        return clone(array2);\n+    } else if (array2 == null) {\n+        return clone(array1);\n+    }\n+    final Class<?> type1 = array1.getClass().getComponentType();\n+    final Class<?> type2 = array2.getClass().getComponentType();\n+    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n+        if (type1.isPrimitive() ^ type2.isPrimitive()) {\n+            throw new IllegalArgumentException(\"Cannot store elements of different types (primitive or object) in the same array\");\n+        } else {\n+            throw new IllegalArgumentException(\"Cannot store elements of different object types in the same array\");\n+        }\n+    }\n+    int length1 = array1.length;\n+    int length2 = array2.length;\n+    T[] result;\n+    if (type1.isPrimitive()) {\n+        result = (T[]) Array.newInstance(type1, length1 + length2);\n+        if (type1 == Boolean.TYPE) {\n+            System.arraycopy(array1, 0, result, 0, length1);\n+            for (int i = 0; i < length2; ++i) {\n+                Array.setBoolean(result, i + length1, (Boolean) array2[i]);\n+            }\n+        } else if (type1 == Byte.TYPE) {\n+            System.arraycopy(array1, 0, result, 0, length1);\n+            for (int i = 0; i < length2; ++i) {\n+                Array.setByte(result, i + length1, (Byte) array2[i]);\n+            }\n+        } else if (type1 == Character.TYPE) {\n+            System.arraycopy(array1, 0, result, 0, length1);\n+            for (int i = 0; i < length2; ++i) {\n+                Array.setChar(result, i + length1, (Character) array2[i]);\n+            }\n+        } else if (type1 == Double.TYPE) {\n+            System.arraycopy(array1, 0, result, 0, length1);\n+            for (int i = 0; i < length2; ++i) {\n+                Array.setDouble(result, i + length1, (Double) array2[i]);\n+            }\n+        } else if (type1 == Float.TYPE) {\n+            System.arraycopy(array1, 0, result, 0, length1);\n+            for (int i = 0; i < length2; ++i) {\n+                Array.setFloat(result, i + length1, (Float) array2[i]);\n+            }\n+        } else if (type1 == Integer.TYPE) {\n+            System.arraycopy(array1, 0, result, 0, length1);\n+            for (int i = 0; i < length2; ++i) {\n+                Array.setInt(result, i + length1, (Integer) array2[i]);\n+            }\n+        } else if (type1 == Long.TYPE) {\n+            System.arraycopy(array1, 0, result, 0, length1);\n+            for (int i = 0; i < length2; ++i) {\n+                Array.setLong(result, i + length1, (Long) array2[i]);\n+            }\n+        } else if (type1 == Short.TYPE) {\n+            System.arraycopy(array1, 0, result, 0, length1);\n+            for (int i = 0; i < length2; ++i) {\n+                Array.setShort(result, i + length1, (Short) array2[i]);\n+            }\n         }\n-        final Class<?> type1 = array1.getClass().getComponentType();\n-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n-        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n-        return joinedArray;\n+    } else {\n+        result = (T[]) Array.newInstance(type1, length1 + length2);\n+\n+        System.arraycopy(array1, 0, result, 0, length1);\n+        System.arraycopy(array2, 0, result, length1, length2);\n     }\n+    return result;\n+}\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}