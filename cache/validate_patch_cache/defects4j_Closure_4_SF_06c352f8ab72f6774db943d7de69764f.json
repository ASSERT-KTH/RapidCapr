{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Try to resolve the type via registry\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    // Check if type resolution triggers implicit prototype cycles\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    // If the type has been resolved then call super.resolveInternal, \n    // finish property continuations if resolved and return the appropriate type\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      if (isResolved()) {\n        finishPropertyContinuations();\n      }\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    } else {\n      // If the type could not be resolved via registry, try resolving via properties\n      resolveViaProperties(t, enclosing);\n      // Check if type resolution triggers implicit prototype cycles\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n      }\n      // Call super.resolveInternal and finish property continuations if resolved\n      super.resolveInternal(t, enclosing);\n      if (isResolved()) {\n        finishPropertyContinuations();\n      }\n      // Return the appropriate type\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..a04620dd 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,33 +182,36 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n+    // Try to resolve the type via registry\n     boolean resolved = resolveViaRegistry(t, enclosing);\n+    // Check if type resolution triggers implicit prototype cycles\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n+    // If the type has been resolved then call super.resolveInternal, \n+    // finish property continuations if resolved and return the appropriate type\n     if (resolved) {\n       super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+      if (isResolved()) {\n+        finishPropertyContinuations();\n+      }\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n+    } else {\n+      // If the type could not be resolved via registry, try resolving via properties\n+      resolveViaProperties(t, enclosing);\n+      // Check if type resolution triggers implicit prototype cycles\n+      if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n+      }\n+      // Call super.resolveInternal and finish property continuations if resolved\n+      super.resolveInternal(t, enclosing);\n+      if (isResolved()) {\n+        finishPropertyContinuations();\n+      }\n+      // Return the appropriate type\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n \n   /**",
    "result_reason": "junit.framework.AssertionFailedError: unexpected warning(s) : JSC_IMPLEMENTS_NON_INTERFACE. can only implement interfaces at [testcode] line 2 : 29, JSC_IMPLEMENTS_NON_INTERFACE. can only implement interfaces at [testcode] line 3 : 26 expected:<1> but was:<2>",
    "test_result": "FAIL"
}