{
    "patch": "public <T> void resetMock(T mock) {\n    if (Mockito.framework().isMock(mock)) {\n        MockHandler<T> oldHandler = Mockito.framework().getMockHandler(mock);\n        MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n        MethodInterceptorFilter interceptor = new MethodInterceptorFilter(newHandler, (MockSettingsImpl)Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS));\n        ((Factory)mock).setCallback(0, interceptor);\n    } else if (Mockito.framework().isSpy(mock)) {\n        Mockito.framework().resetMock(mock);\n        Mockito.reset(mock);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..832856e8f 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,18 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (Mockito.framework().isMock(mock)) {\n+        MockHandler<T> oldHandler = Mockito.framework().getMockHandler(mock);\n+        MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n+        MethodInterceptorFilter interceptor = new MethodInterceptorFilter(newHandler, (MockSettingsImpl)Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS));\n+        ((Factory)mock).setCallback(0, interceptor);\n+    } else if (Mockito.framework().isSpy(mock)) {\n+        Mockito.framework().resetMock(mock);\n+        Mockito.reset(mock);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}