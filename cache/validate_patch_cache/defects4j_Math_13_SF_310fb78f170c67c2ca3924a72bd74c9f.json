{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        if (dec.getImagEigenvalues()[0] == 0) {\n            // Matrix is positive definite, use Cholesky decomposition method\n            CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n            return cholesky.getL();\n        } else {\n            // Matrix is not positive definite, return NaN matrix\n            return MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension()).scalarMultiply(Double.NaN);\n        }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c064c1d97 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,15 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        if (dec.getImagEigenvalues()[0] == 0) {\n+            // Matrix is positive definite, use Cholesky decomposition method\n+            CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n+            return cholesky.getL();\n+        } else {\n+            // Matrix is not positive definite, return NaN matrix\n+            return MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension()).scalarMultiply(Double.NaN);\n+        }\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}