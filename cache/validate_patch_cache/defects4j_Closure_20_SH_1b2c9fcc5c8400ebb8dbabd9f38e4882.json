{
    "patch": "      Node value = callTarget.getNext();\n      // This code previously checked if the value was null,\n      // which could cause a NPE on function calls without args.\n      // However, in those cases the value should be a empty STRING node.\n      Node addition = IR.add(\n          IR.string(\"\").srcref(callTarget),\n          value.detachFromParent());\n      n.getParent().replaceChild(n, addition);\n      reportCodeChange();\n      return addition;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..ddf17bd8 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,16 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+      Node value = callTarget.getNext();\n+      // This code previously checked if the value was null,\n+      // which could cause a NPE on function calls without args.\n+      // However, in those cases the value should be a empty STRING node.\n+      Node addition = IR.add(\n+          IR.string(\"\").srcref(callTarget),\n+          value.detachFromParent());\n+      n.getParent().replaceChild(n, addition);\n+      reportCodeChange();\n+      return addition;\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}