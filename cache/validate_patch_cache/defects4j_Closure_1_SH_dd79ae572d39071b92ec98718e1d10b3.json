{
    "patch": "    // Check if any argument is not referenced.\n    Node arg = getFunctionArguments(function);\n    while (arg != null) {\n      String argName = arg.getString();\n      Var var = fnScope.getVar(argName);\n\n      if (!referenced.contains(var)) {\n        // Check if it is a rest parameter.\n        Node next = arg.getNext();\n        if (next != null && next.isRest()) {\n          // Rest parameters cannot be safely removed.\n          return;\n        }\n\n        // Remove the argument.\n        NodeUtil.removeChild(argList, arg);\n\n        compiler.reportCodeChange();\n        arg = next;\n        continue;\n      }\n\n      arg = arg.getNext();\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..38690150 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,30 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Check if any argument is not referenced.\n+    Node arg = getFunctionArguments(function);\n+    while (arg != null) {\n+      String argName = arg.getString();\n+      Var var = fnScope.getVar(argName);\n+\n+      if (!referenced.contains(var)) {\n+        // Check if it is a rest parameter.\n+        Node next = arg.getNext();\n+        if (next != null && next.isRest()) {\n+          // Rest parameters cannot be safely removed.\n+          return;\n+        }\n+\n+        // Remove the argument.\n+        NodeUtil.removeChild(argList, arg);\n+\n+        compiler.reportCodeChange();\n+        arg = next;\n+        continue;\n+      }\n+\n+      arg = arg.getNext();\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}