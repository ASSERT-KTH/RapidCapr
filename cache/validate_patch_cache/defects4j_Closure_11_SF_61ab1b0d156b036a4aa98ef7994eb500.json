{
    "patch": "public class MyProperty {\n  private Properties properties = new Properties();\n\n  public void load(InputStream input) throws IOException {\n    properties.load(input);\n  }\n\n  public String getProp(String key) {\n    String value = properties.getProperty(key);\n    if (value == null || value.isEmpty()) {\n      throw new RuntimeException(\"Value for \" + key + \" is not found\");\n    }\n    return value;\n  }\n\n  public void setProp(String key, String value) {\n    if (value == null || value.isEmpty()) {\n      throw new IllegalArgumentException(\"Value cannot be null or empty\");\n    }\n    properties.setProperty(key, value);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..0f896b56 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public class MyProperty {\n+  private Properties properties = new Properties();\n+\n+  public void load(InputStream input) throws IOException {\n+    properties.load(input);\n+  }\n+\n+  public String getProp(String key) {\n+    String value = properties.getProperty(key);\n+    if (value == null || value.isEmpty()) {\n+      throw new RuntimeException(\"Value for \" + key + \" is not found\");\n+    }\n+    return value;\n+  }\n+\n+  public void setProp(String key, String value) {\n+    if (value == null || value.isEmpty()) {\n+      throw new IllegalArgumentException(\"Value cannot be null or empty\");\n+    }\n+    properties.setProperty(key, value);\n+  }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}