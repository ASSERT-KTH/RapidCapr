{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    if (value == null) {\n        return regex;\n    }\n    boolean wasWhite = false;\n    boolean escaped = false;\n    boolean inGroup = false;\n    boolean inCharClass = false;\n    boolean charClassRange = false;\n    int length = value.length();\n    char lastChar = '\\0';\n    for (int i = 0; i < length; ++i) {\n        char c = value.charAt(i);\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s*\");\n            }\n            continue;\n        }\n        wasWhite = false;\n        switch (c) {\n            case '\\'':\n                if (unquote) {\n                    if (i == 0 || i == length - 1) {\n                        // quotes not paired or not at either end of value\n                        return null;\n                    }\n                    c = value.charAt(++i);\n                }\n                break;\n            case '[':\n                if (!escaped) {\n                    inCharClass = true;\n                }\n                break;\n            case ']':\n                if (!escaped) {\n                    inCharClass = false;\n                }\n                break;\n            case '^':\n                if (!escaped && inCharClass && !charClassRange) {\n                    regex.append(c);\n                    break;\n                }\n                escaped = false;\n                regex.append('\\\\');\n                break;\n            case '-':\n                if (inCharClass && !charClassRange) {\n                    charClassRange = true;\n                    break;\n                }\n                escaped = false;\n                regex.append('\\\\');\n                break;\n            case '\\\\':\n                if (escaped) {\n                    regex.append('\\\\');\n                }\n                escaped = !escaped;\n                break;\n            case '|':\n                if (inGroup && !escaped && !inCharClass && !charClassRange) {\n                    regex.append(c);\n                    break;\n                }\n                escaped = false;\n                regex.append('\\\\');\n                break;\n            case '(':\n                if (!escaped) {\n                    if (inGroup) {\n                        regex.append(\"(?:\");\n                    } else {\n                        inGroup = true;\n                    }\n                    lastChar = c;\n                    break;\n                }\n                escaped = false;\n                regex.append('\\\\');\n                break;\n            case ')':\n                if (!escaped) {\n                    if (inGroup) {\n                        regex.append(')');\n                        inGroup = false;\n                    } else {\n                        regex.append(\"\\\\)\");\n                    }\n                    lastChar = c;\n                    break;\n                }\n                escaped = false;\n                regex.append('\\\\');\n                break;\n            default:\n                escaped = false;\n                break;\n        }\n        if (!inGroup) {\n            if (c == '{' && !escaped) {\n                regex.append(\"(?:\");\n            } else if (c == '}' && !escaped) {\n                regex.append(\")?\");\n            }\n        }\n        if (charClassRange) {\n            regex.append('-');\n            charClassRange = false;\n        }\n        if (inCharClass) {\n            regex.append(c);\n        } else {\n            switch (c) {\n                case '?':\n                case '*':\n                case '+':\n                    if (!escaped && lastChar != '(' && lastChar != '|' && lastChar != '\\0') {\n                        regex.append(lastChar == ')' ? \"?\" : (\"(?:\\\\Q\" + lastChar + \"\\\\E)?\"));\n                    }\n                    break;\n                default:\n                    if (escaped) {\n                        regex.append('\\\\');\n                    }\n                    break;\n            }\n            regex.append(c);\n            lastChar = c;\n        }\n        escaped = false;\n    }\n    if (!inGroup) {\n        regex.append(\"(?:\\\\z)\");\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..920ed203 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,146 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    if (value == null) {\n+        return regex;\n+    }\n+    boolean wasWhite = false;\n+    boolean escaped = false;\n+    boolean inGroup = false;\n+    boolean inCharClass = false;\n+    boolean charClassRange = false;\n+    int length = value.length();\n+    char lastChar = '\\0';\n+    for (int i = 0; i < length; ++i) {\n+        char c = value.charAt(i);\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                regex.append(\"\\\\s*\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n+            continue;\n+        }\n+        wasWhite = false;\n+        switch (c) {\n             case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+                if (unquote) {\n+                    if (i == 0 || i == length - 1) {\n+                        // quotes not paired or not at either end of value\n+                        return null;\n                     }\n-                    c= value.charAt(i);\n+                    c = value.charAt(++i);\n                 }\n                 break;\n-            case '?':\n             case '[':\n+                if (!escaped) {\n+                    inCharClass = true;\n+                }\n+                break;\n             case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n+                if (!escaped) {\n+                    inCharClass = false;\n+                }\n+                break;\n+            case '^':\n+                if (!escaped && inCharClass && !charClassRange) {\n+                    regex.append(c);\n+                    break;\n+                }\n+                escaped = false;\n+                regex.append('\\\\');\n+                break;\n+            case '-':\n+                if (inCharClass && !charClassRange) {\n+                    charClassRange = true;\n+                    break;\n+                }\n+                escaped = false;\n+                regex.append('\\\\');\n+                break;\n             case '\\\\':\n+                if (escaped) {\n+                    regex.append('\\\\');\n+                }\n+                escaped = !escaped;\n+                break;\n             case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n+                if (inGroup && !escaped && !inCharClass && !charClassRange) {\n+                    regex.append(c);\n+                    break;\n+                }\n+                escaped = false;\n+                regex.append('\\\\');\n+                break;\n+            case '(':\n+                if (!escaped) {\n+                    if (inGroup) {\n+                        regex.append(\"(?:\");\n+                    } else {\n+                        inGroup = true;\n+                    }\n+                    lastChar = c;\n+                    break;\n+                }\n+                escaped = false;\n                 regex.append('\\\\');\n+                break;\n+            case ')':\n+                if (!escaped) {\n+                    if (inGroup) {\n+                        regex.append(')');\n+                        inGroup = false;\n+                    } else {\n+                        regex.append(\"\\\\)\");\n+                    }\n+                    lastChar = c;\n+                    break;\n+                }\n+                escaped = false;\n+                regex.append('\\\\');\n+                break;\n+            default:\n+                escaped = false;\n+                break;\n+        }\n+        if (!inGroup) {\n+            if (c == '{' && !escaped) {\n+                regex.append(\"(?:\");\n+            } else if (c == '}' && !escaped) {\n+                regex.append(\")?\");\n             }\n+        }\n+        if (charClassRange) {\n+            regex.append('-');\n+            charClassRange = false;\n+        }\n+        if (inCharClass) {\n             regex.append(c);\n+        } else {\n+            switch (c) {\n+                case '?':\n+                case '*':\n+                case '+':\n+                    if (!escaped && lastChar != '(' && lastChar != '|' && lastChar != '\\0') {\n+                        regex.append(lastChar == ')' ? \"?\" : (\"(?:\\\\Q\" + lastChar + \"\\\\E)?\"));\n+                    }\n+                    break;\n+                default:\n+                    if (escaped) {\n+                        regex.append('\\\\');\n+                    }\n+                    break;\n+            }\n+            regex.append(c);\n+            lastChar = c;\n         }\n-        return regex;\n+        escaped = false;\n     }\n+    if (!inGroup) {\n+        regex.append(\"(?:\\\\z)\");\n+    }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}