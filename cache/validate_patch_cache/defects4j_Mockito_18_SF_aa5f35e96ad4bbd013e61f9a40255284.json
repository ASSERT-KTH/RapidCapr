{
    "patch": "private static <T> ReturnValue<T> getEmptyReturnValue(Class<T> returnType) {\n    Object returnValue = null;\n    if (Collection.class.isAssignableFrom(returnType)) {\n        returnValue = Collections.emptyList();\n    } else if (Iterable.class.isAssignableFrom(returnType)) {\n        returnValue = Collections.emptySet();\n    } else if (Iterator.class.isAssignableFrom(returnType)) {\n        returnValue = Collections.emptyIterator();\n    } else if (Map.class.isAssignableFrom(returnType)) {\n        returnValue = Collections.emptyMap();\n    } else if (returnType.isArray()) {\n        returnValue = Array.newInstance(returnType.getComponentType(), 0);\n    } else if (Number.class.isAssignableFrom(returnType)) {\n        returnValue = 0;\n    } else if (Boolean.class.isAssignableFrom(returnType)) {\n        returnValue = false;\n    } else if (CharSequence.class.isAssignableFrom(returnType)) {\n        returnValue = \"\";\n    }\n    return new ReturnValue<>(returnValue, true);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..a25a6039d 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,27 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+private static <T> ReturnValue<T> getEmptyReturnValue(Class<T> returnType) {\n+    Object returnValue = null;\n+    if (Collection.class.isAssignableFrom(returnType)) {\n+        returnValue = Collections.emptyList();\n+    } else if (Iterable.class.isAssignableFrom(returnType)) {\n+        returnValue = Collections.emptySet();\n+    } else if (Iterator.class.isAssignableFrom(returnType)) {\n+        returnValue = Collections.emptyIterator();\n+    } else if (Map.class.isAssignableFrom(returnType)) {\n+        returnValue = Collections.emptyMap();\n+    } else if (returnType.isArray()) {\n+        returnValue = Array.newInstance(returnType.getComponentType(), 0);\n+    } else if (Number.class.isAssignableFrom(returnType)) {\n+        returnValue = 0;\n+    } else if (Boolean.class.isAssignableFrom(returnType)) {\n+        returnValue = false;\n+    } else if (CharSequence.class.isAssignableFrom(returnType)) {\n+        returnValue = \"\";\n+    }\n+    return new ReturnValue<>(returnValue, true);\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}