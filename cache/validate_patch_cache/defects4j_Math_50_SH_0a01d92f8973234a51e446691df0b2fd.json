{
    "patch": "if (f1 * fx < 0) {\n    x0 = x1;\n    f0 = f1;\n    inverted = !inverted;\n    x1 = x;\n    f1 = fx;\n} else if (x == x1) {\n    final double delta = FastMath.max(rtol * FastMath.abs(x1), atol);\n    if (inverted) {\n        x0 = FastMath.max(x0 - delta, getMin());\n        f0 = computeObjectiveValue(x0);\n        if (f0 == 0.0) {\n            return x0;\n        }\n    } else {\n        x1 = FastMath.min(x1 + delta, getMax());\n        f1 = computeObjectiveValue(x1);\n        if (f1 == 0.0) {\n            return x1;\n        }\n    }\n} else {\n    switch (method) {\n    case ILLINOIS:\n        f0 *= 0.5;\n        break;\n    case PEGASUS:\n        f0 *= f1 / (f1 + fx);\n        break;\n    case REGULA_FALSI:\n        // Nothing.\n        break;\n    default:\n        throw new MathInternalError();\n    }\n    x0 = x1;\n    f0 = f1;\n    x1 = x;\n    f1 = fx;\n    if (f1 == 0.0) {\n        return x1;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..2a4583244 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,10 +184,49 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+if (f1 * fx < 0) {\n+    x0 = x1;\n+    f0 = f1;\n+    inverted = !inverted;\n+    x1 = x;\n+    f1 = fx;\n+} else if (x == x1) {\n+    final double delta = FastMath.max(rtol * FastMath.abs(x1), atol);\n+    if (inverted) {\n+        x0 = FastMath.max(x0 - delta, getMin());\n+        f0 = computeObjectiveValue(x0);\n+        if (f0 == 0.0) {\n+            return x0;\n+        }\n+    } else {\n+        x1 = FastMath.min(x1 + delta, getMax());\n+        f1 = computeObjectiveValue(x1);\n+        if (f1 == 0.0) {\n+            return x1;\n+        }\n+    }\n+} else {\n+    switch (method) {\n+    case ILLINOIS:\n+        f0 *= 0.5;\n+        break;\n+    case PEGASUS:\n+        f0 *= f1 / (f1 + fx);\n+        break;\n+    case REGULA_FALSI:\n+        // Nothing.\n+        break;\n+    default:\n+        throw new MathInternalError();\n+    }\n+    x0 = x1;\n+    f0 = f1;\n+    x1 = x;\n+    f1 = fx;\n+    if (f1 == 0.0) {\n+        return x1;\n+    }\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "java.lang.Exception: Unexpected exception, expected<org.apache.commons.math.exception.TooManyEvaluationsException> but was<java.lang.AssertionError>",
    "test_result": "FAIL"
}