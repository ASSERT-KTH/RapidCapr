{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (arg != null && arg.isString()) {\n    // Get the required namespace.\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided != null && provided.isExplicitlyProvided()) {\n      // The required namespace is provided.\n      JSModule providedModule = provided.explicitModule;\n\n      JSModule module = t.getModule();\n      if (moduleGraph != null &&\n          module != providedModule &&\n          !moduleGraph.dependsOn(module, providedModule)) {\n        // Report an error if the required module is not a dependency.\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n\n      // Add the symbol to the symbol table.\n      String symbolName = NamespaceUtil.getLastQualifier(ns);\n      Node symbolNode = IR.name(symbolName).useSourceInfoFromForTree(left);\n      symbolNode.putBooleanProp(Node.IS_NAMESPACE, true);\n      symbolNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n      symbolNode.setJSDocInfo(left.getJSDocInfo());\n\n      Node statement = IR.exprResult(IR.assign(left.cloneTree(), symbolNode))\n          .useSourceInfoFromForTree(n);\n\n      // Replace the require statement with the symbol assignment statement.\n      parent.replaceChild(n, statement);\n      parent.removeChild(statement);\n      t.getCompiler().reportCodeChange();\n\n    } else {\n      // The required namespace is not provided.\n      unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n\n      // Remove the require statement.\n      parent.removeChild(n);\n      t.getCompiler().reportCodeChange();\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..053c6716 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,46 +292,53 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n-    Node left = n.getFirstChild();\n-    Node arg = left.getNext();\n-    if (verifyLastArgumentIsString(t, left, arg)) {\n-      String ns = arg.getString();\n-      ProvidedName provided = providedNames.get(ns);\n-      if (provided == null || !provided.isExplicitlyProvided()) {\n-        unrecognizedRequires.add(\n-            new UnrecognizedRequire(n, ns, t.getSourceName()));\n-      } else {\n-        JSModule providedModule = provided.explicitModule;\n-\n-        // This must be non-null, because there was an explicit provide.\n-        Preconditions.checkNotNull(providedModule);\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+  Node left = n.getFirstChild();\n+  Node arg = left.getNext();\n+  if (arg != null && arg.isString()) {\n+    // Get the required namespace.\n+    String ns = arg.getString();\n+    ProvidedName provided = providedNames.get(ns);\n+    if (provided != null && provided.isExplicitlyProvided()) {\n+      // The required namespace is provided.\n+      JSModule providedModule = provided.explicitModule;\n \n-        JSModule module = t.getModule();\n-        if (moduleGraph != null &&\n-            module != providedModule &&\n-            !moduleGraph.dependsOn(module, providedModule)) {\n-          compiler.report(\n-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n-                  providedModule.getName(),\n-                  module.getName()));\n-        }\n+      JSModule module = t.getModule();\n+      if (moduleGraph != null &&\n+          module != providedModule &&\n+          !moduleGraph.dependsOn(module, providedModule)) {\n+        // Report an error if the required module is not a dependency.\n+        compiler.report(\n+            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                providedModule.getName(),\n+                module.getName()));\n       }\n \n-      maybeAddToSymbolTable(left);\n-      maybeAddStringNodeToSymbolTable(arg);\n+      // Add the symbol to the symbol table.\n+      String symbolName = NamespaceUtil.getLastQualifier(ns);\n+      Node symbolNode = IR.name(symbolName).useSourceInfoFromForTree(left);\n+      symbolNode.putBooleanProp(Node.IS_NAMESPACE, true);\n+      symbolNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n+      symbolNode.setJSDocInfo(left.getJSDocInfo());\n \n-      // Requires should be removed before further processing.\n-      // Some clients run closure pass multiple times, first with\n-      // the checks for broken requires turned off. In these cases, we\n-      // allow broken requires to be preserved by the first run to\n-      // let them be caught in the subsequent run.\n-      if (provided != null) {\n-        parent.detachFromParent();\n-        compiler.reportCodeChange();\n-      }\n+      Node statement = IR.exprResult(IR.assign(left.cloneTree(), symbolNode))\n+          .useSourceInfoFromForTree(n);\n+\n+      // Replace the require statement with the symbol assignment statement.\n+      parent.replaceChild(n, statement);\n+      parent.removeChild(statement);\n+      t.getCompiler().reportCodeChange();\n+\n+    } else {\n+      // The required namespace is not provided.\n+      unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n+\n+      // Remove the require statement.\n+      parent.removeChild(n);\n+      t.getCompiler().reportCodeChange();\n     }\n   }\n+}\n \n   /**\n    * Handles a goog.provide call.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}