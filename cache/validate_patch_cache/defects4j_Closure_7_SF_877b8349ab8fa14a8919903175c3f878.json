{
    "patch": "      } else if (matchesExpectation(\"object\")) {\n        return type;\n      }\n      return null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0afabc8a..5e42d99f 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -607,15 +607,10 @@ public abstract class ChainableReverseAbstractInterpreter\n     }\n \n     @Override\n-    public JSType caseObjectType(ObjectType type) {\n-      if (value.equals(\"function\")) {\n-        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n-          // Objects are restricted to \"Function\", subtypes are left\n-          // Only filter out subtypes of \"function\"\n+      } else if (matchesExpectation(\"object\")) {\n+        return type;\n       }\n-      return matchesExpectation(\"object\") ? type : null;\n-    }\n+      return null;\n \n     @Override\n     public JSType caseStringType() {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}