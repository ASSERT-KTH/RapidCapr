{
    "patch": "      boolean foundReferenced = false;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          foundReferenced = true;\n          break;\n        }\n      }\n      //Checking for referenced args at other positions.\n      if(foundReferenced) {\n          Node arg = argList.getFirstChild();\n          while (arg != null) {\n            Var var = fnScope.getVar(arg.getString());\n            if (!referenced.contains(var)) {\n              argList.removeChild(arg);\n              compiler.reportCodeChange();\n            }\n            arg = arg.getNext();\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d0d6cbfe 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,28 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      boolean foundReferenced = false;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          foundReferenced = true;\n+          break;\n+        }\n+      }\n+      //Checking for referenced args at other positions.\n+      if(foundReferenced) {\n+          Node arg = argList.getFirstChild();\n+          while (arg != null) {\n+            Var var = fnScope.getVar(arg.getString());\n+            if (!referenced.contains(var)) {\n+              argList.removeChild(arg);\n+              compiler.reportCodeChange();\n+            }\n+            arg = arg.getNext();\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}