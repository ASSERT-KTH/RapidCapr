{
    "patch": "        if (val.startsWith(\"+\")) {\n            val = val.substring(1);\n        }\n        char firstChar = val.charAt(0);\n        // Fix case of leading double minus sign\n        if (val.startsWith(\"--\") || val.equals(\"-\")) {\n            return null;\n        } else if ((firstChar >= '0' && firstChar <= '9') || firstChar == '.') {\n            if (val.indexOf('.') == val.lastIndexOf('.')) {\n                if (val.indexOf('e') == -1 && val.indexOf('E') == -1) {\n                    try {\n                        return createBigInteger(val);\n                    } catch (NumberFormatException e) {\n                        if (val.length() <= 9) {\n                            try {\n                                return createInteger(val);\n                            } catch (NumberFormatException e2) {\n                                // ignore and try next possibility\n                            }\n                        }\n                        try {\n                            return createLong(val);\n                        } catch (NumberFormatException e2) {\n                            // ignore and try next possibility\n                        }\n                        // ignore exception, throw original instead\n                    }\n                } else {\n                    Number number;\n                    try {\n                        number = createBigDecimal(val);\n                    } catch (NumberFormatException e) {\n                        number = null;\n                    }\n                    if (number == null) {\n                        try {\n                            number = createDouble(val);\n                        } catch (NumberFormatException e) {\n                            // ignore exception\n                        }\n                    }\n                    return number;",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..a64fc3d6 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,48 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if (val.startsWith(\"+\")) {\n+            val = val.substring(1);\n+        }\n+        char firstChar = val.charAt(0);\n+        // Fix case of leading double minus sign\n+        if (val.startsWith(\"--\") || val.equals(\"-\")) {\n+            return null;\n+        } else if ((firstChar >= '0' && firstChar <= '9') || firstChar == '.') {\n+            if (val.indexOf('.') == val.lastIndexOf('.')) {\n+                if (val.indexOf('e') == -1 && val.indexOf('E') == -1) {\n+                    try {\n+                        return createBigInteger(val);\n+                    } catch (NumberFormatException e) {\n+                        if (val.length() <= 9) {\n+                            try {\n+                                return createInteger(val);\n+                            } catch (NumberFormatException e2) {\n+                                // ignore and try next possibility\n+                            }\n+                        }\n+                        try {\n+                            return createLong(val);\n+                        } catch (NumberFormatException e2) {\n+                            // ignore and try next possibility\n+                        }\n+                        // ignore exception, throw original instead\n+                    }\n+                } else {\n+                    Number number;\n+                    try {\n+                        number = createBigDecimal(val);\n+                    } catch (NumberFormatException e) {\n+                        number = null;\n+                    }\n+                    if (number == null) {\n+                        try {\n+                            number = createDouble(val);\n+                        } catch (NumberFormatException e) {\n+                            // ignore exception\n+                        }\n+                    }\n+                    return number;\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}