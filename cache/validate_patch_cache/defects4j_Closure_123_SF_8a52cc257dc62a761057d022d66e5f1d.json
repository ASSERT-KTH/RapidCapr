{
    "patch": "public static String fixCode(String code) {\n    // Replace ? true : false with just the Boolean expression\n    code = code.replaceAll(\"\\\\?\\\\s*true\\\\s*:\\\\s*false\", \"\");\n\n    // Replace \"in\" operator with equivalent boolean expression\n    Pattern p = Pattern.compile(\"for\\\\s*\\\\(.*?\\\\;\\\\s*.*?\\\\s+in\\\\s+(.*?)\\\\s*\\\\;.*?\\\\)\");\n    Matcher m = p.matcher(code);\n    StringBuffer sb = new StringBuffer();\n    while (m.find()) {\n        String expr = m.group(1);\n        expr = expr.replaceAll(\"\\\\$\\\\{.*?}\", \"\"); // remove any variable interpolation\n        String replacement = \"for (Iterator iterator = $1.iterator(); iterator.hasNext();) { Object $2 = iterator.next();\";\n        replacement += \" if ($1 instanceof java.util.Set || $1 instanceof java.util.Map) { $2 = $2 instanceof Map.Entry?((Map.Entry)$2).getKey() : $2; }\";\n        replacement += \"if ($2.equals(\" + expr + \"))\";\n        m.appendReplacement(sb, replacement);\n    }\n    m.appendTail(sb);\n    code = sb.toString();\n\n    return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..da0136a9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,27 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    // Replace ? true : false with just the Boolean expression\n+    code = code.replaceAll(\"\\\\?\\\\s*true\\\\s*:\\\\s*false\", \"\");\n+\n+    // Replace \"in\" operator with equivalent boolean expression\n+    Pattern p = Pattern.compile(\"for\\\\s*\\\\(.*?\\\\;\\\\s*.*?\\\\s+in\\\\s+(.*?)\\\\s*\\\\;.*?\\\\)\");\n+    Matcher m = p.matcher(code);\n+    StringBuffer sb = new StringBuffer();\n+    while (m.find()) {\n+        String expr = m.group(1);\n+        expr = expr.replaceAll(\"\\\\$\\\\{.*?}\", \"\"); // remove any variable interpolation\n+        String replacement = \"for (Iterator iterator = $1.iterator(); iterator.hasNext();) { Object $2 = iterator.next();\";\n+        replacement += \" if ($1 instanceof java.util.Set || $1 instanceof java.util.Map) { $2 = $2 instanceof Map.Entry?((Map.Entry)$2).getKey() : $2; }\";\n+        replacement += \"if ($2.equals(\" + expr + \"))\";\n+        m.appendReplacement(sb, replacement);\n+    }\n+    m.appendTail(sb);\n+    code = sb.toString();\n+\n+    return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}