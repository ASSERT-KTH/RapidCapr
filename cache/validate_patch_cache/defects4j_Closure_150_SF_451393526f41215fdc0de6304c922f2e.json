{
    "patch": "    @Override \n    public void visit(NodeTraversal t, Node n, Node parent) {\n      try {\n        if (n == scope.getRootNode()) return;\n\n        if (n.isBlock() && n.getParent().isFunction()) {\n          handleFunctionInputs(n.getParent());\n          return;\n        }\n\n        if (n.isFunction()) {\n          if (NodeUtil.isFunctionDeclaration(n)) {\n            defineDeclaredFunction(n, parent);\n            return;\n          }\n        }\n\n        if (n.isCatch()) {\n          defineCatch(n, parent);\n          return;\n        }\n\n        if (n.isVar()) {\n          defineVar(n, parent);\n          return;\n        }\n\n        attachLiteralTypes(n);\n      } catch (RuntimeException e) {\n        throw new RuntimeException(\n            \"Error in visit at \" + n.getLocation() + \": \" + e.getMessage(), e);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..07842bb6 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,37 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+    @Override \n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      try {\n+        if (n == scope.getRootNode()) return;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+        if (n.isBlock() && n.getParent().isFunction()) {\n+          handleFunctionInputs(n.getParent());\n+          return;\n+        }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+        if (n.isFunction()) {\n+          if (NodeUtil.isFunctionDeclaration(n)) {\n+            defineDeclaredFunction(n, parent);\n             return;\n           }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n+        }\n+\n+        if (n.isCatch()) {\n           defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n+          return;\n+        }\n+\n+        if (n.isVar()) {\n           defineVar(n, parent);\n-          break;\n-      }\n-    }\n+          return;\n+        }\n+\n+        attachLiteralTypes(n);\n+      } catch (RuntimeException e) {\n+        throw new RuntimeException(\n+            \"Error in visit at \" + n.getLocation() + \": \" + e.getMessage(), e);\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}