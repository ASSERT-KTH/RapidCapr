{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    Type[] actualTypeArguments;\n    if (typeVariable instanceof ParameterizedType) {\n        actualTypeArguments = ((ParameterizedType) typeVariable).getActualTypeArguments();\n        if (actualTypeArguments != null) {\n            for (Type actualTypeArgument : actualTypeArguments) {\n                if (actualTypeArgument instanceof TypeVariable) {\n                    registerTypeVariablesOn(getActualTypeArgumentFor(actualTypeArgument));\n                } else {\n                    registerTypeVariablesOn(actualTypeArgument);\n                }\n            }\n        }\n    } else if (typeVariable instanceof TypeVariable) {\n        actualTypeArguments = getActualTypeArgumentsFor((TypeVariable<?>) typeVariable);\n        if (actualTypeArguments != null) {\n            for (Type actualTypeArgument : actualTypeArguments) {\n                registerTypeVariablesOn(actualTypeArgument);\n            }\n        }\n    } else {\n        registerTypeVariablesOn(typeVariable);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..7f33b37c2 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,37 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    Type[] actualTypeArguments;\n+    if (typeVariable instanceof ParameterizedType) {\n+        actualTypeArguments = ((ParameterizedType) typeVariable).getActualTypeArguments();\n+        if (actualTypeArguments != null) {\n+            for (Type actualTypeArgument : actualTypeArguments) {\n+                if (actualTypeArgument instanceof TypeVariable) {\n+                    registerTypeVariablesOn(getActualTypeArgumentFor(actualTypeArgument));\n+                } else {\n+                    registerTypeVariablesOn(actualTypeArgument);\n+                }\n+            }\n+        }\n+    } else if (typeVariable instanceof TypeVariable) {\n+        actualTypeArguments = getActualTypeArgumentsFor((TypeVariable<?>) typeVariable);\n+        if (actualTypeArguments != null) {\n+            for (Type actualTypeArgument : actualTypeArguments) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            }\n+        }\n+    } else {\n+        registerTypeVariablesOn(typeVariable);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: incompatible types: Type cannot be converted to TypeVariable",
    "test_result": "ERROR"
}