{
    "patch": "        final int n = m.getRowDimension();\n        final EigenDecomposition dec = new EigenDecomposition(m, n * 10);\n        final RealMatrix v = dec.getV();\n        final RealMatrix d = dec.getD();\n        final RealMatrix vt = v.transpose();\n\n        for (int i = 0; i < n; i++) {\n            if (d.getEntry(i, i) < 0) {\n                // correct for numerical instabilities that can result in negative eigenvalues\n                d.setEntry(i, i, 0);\n            }\n        }\n\n        final RealMatrix dSqrt = MatrixUtils.createRealMatrix(d.getRowDimension(), d.getColumnDimension());\n        for (int i = 0; i < n; i++) {\n            dSqrt.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n        }\n\n        return v.multiply(dSqrt).multiply(vt);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..8b4d63626 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        final int n = m.getRowDimension();\n+        final EigenDecomposition dec = new EigenDecomposition(m, n * 10);\n+        final RealMatrix v = dec.getV();\n+        final RealMatrix d = dec.getD();\n+        final RealMatrix vt = v.transpose();\n+\n+        for (int i = 0; i < n; i++) {\n+            if (d.getEntry(i, i) < 0) {\n+                // correct for numerical instabilities that can result in negative eigenvalues\n+                d.setEntry(i, i, 0);\n+            }\n+        }\n+\n+        final RealMatrix dSqrt = MatrixUtils.createRealMatrix(d.getRowDimension(), d.getColumnDimension());\n+        for (int i = 0; i < n; i++) {\n+            dSqrt.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n+        }\n+\n+        return v.multiply(dSqrt).multiply(vt);\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}