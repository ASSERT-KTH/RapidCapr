{
    "patch": "public static String fixCode(String code) {\n  int indexOfIn = code.indexOf(\" in \");\n  if (indexOfIn != -1 && code.charAt(indexOfIn - 1) != '(') {\n    int start = indexOfIn - 1;\n    while (start >= 0 && Character.isJavaIdentifierPart(code.charAt(start))) {\n      start--;\n    }\n    start++;\n    int end = indexOfIn + 3;\n    while (end < code.length() && Character.isJavaIdentifierPart(code.charAt(end))) {\n      end++;\n    }\n    end--;\n    return code.substring(0, start) + \"(\" + code.substring(start, indexOfIn) + \".contains(\" + code.substring(indexOfIn + 4, end + 1) + \"))\" + code.substring(end + 1);\n  }\n  return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..9b9b4daa 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,23 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+  int indexOfIn = code.indexOf(\" in \");\n+  if (indexOfIn != -1 && code.charAt(indexOfIn - 1) != '(') {\n+    int start = indexOfIn - 1;\n+    while (start >= 0 && Character.isJavaIdentifierPart(code.charAt(start))) {\n+      start--;\n+    }\n+    start++;\n+    int end = indexOfIn + 3;\n+    while (end < code.length() && Character.isJavaIdentifierPart(code.charAt(end))) {\n+      end++;\n+    }\n+    end--;\n+    return code.substring(0, start) + \"(\" + code.substring(start, indexOfIn) + \".contains(\" + code.substring(indexOfIn + 4, end + 1) + \"))\" + code.substring(end + 1);\n+  }\n+  return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}