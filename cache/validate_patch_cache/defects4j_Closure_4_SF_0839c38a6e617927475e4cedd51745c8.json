{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = resolveViaRegistry(t, enclosing);\n\n    // If the type hasn't been resolved yet, try to resolve it via properties.\n    if (!resolved) {\n        resolveViaProperties(t, enclosing);\n    }\n\n    // Check for a cycle. If there is one, handle it and try to resolve again.\n    // This is necessary in case resolving via registry caused the cycle to be missed.\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n        if (!resolved) {\n            resolveViaProperties(t, enclosing);\n        }\n    }\n\n    if (isResolved()) {\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n    }\n\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..b92211af 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,31 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n     boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    // If the type hasn't been resolved yet, try to resolve it via properties.\n+    if (!resolved) {\n+        resolveViaProperties(t, enclosing);\n     }\n \n-    resolveViaProperties(t, enclosing);\n+    // Check for a cycle. If there is one, handle it and try to resolve again.\n+    // This is necessary in case resolving via registry caused the cycle to be missed.\n     if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+        handleTypeCycle(t);\n+        if (!resolved) {\n+            resolveViaProperties(t, enclosing);\n+        }\n     }\n \n-    super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n-      finishPropertyContinuations();\n+        super.resolveInternal(t, enclosing);\n+        finishPropertyContinuations();\n     }\n+\n     return registry.isLastGeneration() ?\n         getReferencedType() : this;\n-  }\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "junit.framework.AssertionFailedError: unexpected warning(s) : JSC_IMPLEMENTS_NON_INTERFACE. can only implement interfaces at [testcode] line 2 : 29, JSC_IMPLEMENTS_NON_INTERFACE. can only implement interfaces at [testcode] line 3 : 26 expected:<1> but was:<2>",
    "test_result": "FAIL"
}