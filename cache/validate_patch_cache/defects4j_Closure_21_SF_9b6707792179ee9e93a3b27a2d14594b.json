{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n.isEmpty()) {\n    return;\n  }\n\n  if (n.isComma()) {\n    if (NodeUtil.isExpressionResultUsed(n)) {\n      // Do not flag nodes whose result is used in a comma expression.\n      return;\n    }\n\n    if (n == parent.getLastChild()) {\n      // Do not flag nodes that are direct or indirect children of a block or expression result.\n      Node ancestor = parent.getParent();\n      while (ancestor != null) {\n        if (ancestor.isBlock() || ancestor.isExprResult()) {\n          return;\n        }\n        ancestor = ancestor.getParent();\n      }\n    }\n  }\n  \n  if (n.isQualifiedName()) {\n    JSDocInfo info = n.getJSDocInfo();\n    if (info != null && !info.getAnnotations().isEmpty()) {\n      // Do not flag qualified names with JSDoc annotations.\n      return;\n    }\n  }\n\n  if (NodeUtil.isStatement(n)) {\n    return;\n  }\n\n  if (n.isExprResult() || (parent != null && parent.isExprResult()) || parent == null) {\n    // Do not flag statements or expression results.\n    return;\n  }\n\n  boolean shouldFlag = false;\n\n  if (parent.getType() == Token.COMMA) {\n    Node grandParent = parent.getParent();\n    while (grandParent != null && grandParent.isComma()) {\n      grandParent = grandParent.getParent();\n    }\n    if (grandParent == null || !NodeUtil.isStatement(grandParent)) {\n      // Only flag nodes whose grandparent is a statement.\n      shouldFlag = true;\n    }\n  } else if (parent.getType() == Token.FOR) {\n    if (n == parent.getFirstChild() || n == parent.getLastChild()) {\n      // Do not flag the iteration variable and the condition node of a for loop.\n      return;\n    }\n    Node grandParent = parent.getParent();\n    if (grandParent == null || !NodeUtil.isStatement(grandParent)) {\n      // Only flag nodes whose grandparent is a statement.\n      shouldFlag = true;\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n    // Only flag nodes whose parent is an expression or a block.\n    shouldFlag = true;\n  }\n\n  if (shouldFlag && (NodeUtil.isSimpleOperatorType(n) || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    String msg;\n    if (n.isString()) {\n      // Flag strings that are not concatenated.\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (NodeUtil.isComparisonOp(n) && !NodeUtil.mayHaveSideEffects(n.getFirstChild(), t.getCompiler()) && !NodeUtil.mayHaveSideEffects(n.getLastChild(), t.getCompiler())) {\n      // Flag comparison operators where both operands lack side effects.\n      msg = \"This comparison is always \" + n.getFirstChild().toString(false, false) + \".\";\n    } else if (NodeUtil.isBooleanResult(n)) {\n      // Flag boolean literals inside non-boolean expressions.\n      msg = \"This boolean can be omitted.\";\n    } else if (NodeUtil.isNull(n)) {\n      // Flag null literals inside non-boolean expressions.\n      msg = \"This null literal can be omitted.\";\n    } else if (NodeUtil.isUndefined(n)) {\n      // Flag undefined literals inside non-boolean expressions.\n      msg = \"This undefined literal can be omitted.\";\n    } else {\n      // Flag nodes whose result has no side effects.\n      msg = \"This code lacks side-effects. Is there a bug?\";\n    }\n\n    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n\n    // Keep track of problematic nodes to print them at the end of the report.\n    problemNodes.add(n);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..47cefdac 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,71 +81,100 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n.isEmpty()) {\n+    return;\n+  }\n \n-    if (parent == null) {\n+  if (n.isComma()) {\n+    if (NodeUtil.isExpressionResultUsed(n)) {\n+      // Do not flag nodes whose result is used in a comma expression.\n       return;\n     }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n+    if (n == parent.getLastChild()) {\n+      // Do not flag nodes that are direct or indirect children of a block or expression result.\n+      Node ancestor = parent.getParent();\n+      while (ancestor != null) {\n+        if (ancestor.isBlock() || ancestor.isExprResult()) {\n+          return;\n+        }\n+        ancestor = ancestor.getParent();\n+      }\n+    }\n+  }\n+  \n+  if (n.isQualifiedName()) {\n+    JSDocInfo info = n.getJSDocInfo();\n+    if (info != null && !info.getAnnotations().isEmpty()) {\n+      // Do not flag qualified names with JSDoc annotations.\n       return;\n     }\n+  }\n+\n+  if (NodeUtil.isStatement(n)) {\n+    return;\n+  }\n+\n+  if (n.isExprResult() || (parent != null && parent.isExprResult()) || parent == null) {\n+    // Do not flag statements or expression results.\n+    return;\n+  }\n+\n+  boolean shouldFlag = false;\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+  if (parent.getType() == Token.COMMA) {\n+    Node grandParent = parent.getParent();\n+    while (grandParent != null && grandParent.isComma()) {\n+      grandParent = grandParent.getParent();\n+    }\n+    if (grandParent == null || !NodeUtil.isStatement(grandParent)) {\n+      // Only flag nodes whose grandparent is a statement.\n+      shouldFlag = true;\n+    }\n+  } else if (parent.getType() == Token.FOR) {\n+    if (n == parent.getFirstChild() || n == parent.getLastChild()) {\n+      // Do not flag the iteration variable and the condition node of a for loop.\n       return;\n     }\n-\n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n-        return;\n-      }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n-        }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n-        return;\n-      }\n+    Node grandParent = parent.getParent();\n+    if (grandParent == null || !NodeUtil.isStatement(grandParent)) {\n+      // Only flag nodes whose grandparent is a statement.\n+      shouldFlag = true;\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n+  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n+    // Only flag nodes whose parent is an expression or a block.\n+    shouldFlag = true;\n+  }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n+  if (shouldFlag && (NodeUtil.isSimpleOperatorType(n) || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n+    String msg;\n+    if (n.isString()) {\n+      // Flag strings that are not concatenated.\n+      msg = \"Is there a missing '+' on the previous line?\";\n+    } else if (NodeUtil.isComparisonOp(n) && !NodeUtil.mayHaveSideEffects(n.getFirstChild(), t.getCompiler()) && !NodeUtil.mayHaveSideEffects(n.getLastChild(), t.getCompiler())) {\n+      // Flag comparison operators where both operands lack side effects.\n+      msg = \"This comparison is always \" + n.getFirstChild().toString(false, false) + \".\";\n+    } else if (NodeUtil.isBooleanResult(n)) {\n+      // Flag boolean literals inside non-boolean expressions.\n+      msg = \"This boolean can be omitted.\";\n+    } else if (NodeUtil.isNull(n)) {\n+      // Flag null literals inside non-boolean expressions.\n+      msg = \"This null literal can be omitted.\";\n+    } else if (NodeUtil.isUndefined(n)) {\n+      // Flag undefined literals inside non-boolean expressions.\n+      msg = \"This undefined literal can be omitted.\";\n+    } else {\n+      // Flag nodes whose result has no side effects.\n+      msg = \"This code lacks side-effects. Is there a bug?\";\n     }\n+\n+    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+\n+    // Keep track of problematic nodes to print them at the end of the report.\n+    problemNodes.add(n);\n   }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}