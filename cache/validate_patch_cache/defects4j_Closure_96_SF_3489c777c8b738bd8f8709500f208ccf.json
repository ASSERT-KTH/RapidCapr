{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n                                FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  Node argument = null;\n  int ordinal = 0;\n  int numParams = functionType.getParameters().size();\n  boolean varArgs = functionType.isVarArgs();\n\n  while (arguments.hasNext() && (parameters.hasNext() || varArgs)) {\n    if (varArgs) {\n      // varargs function, any remaining arguments match the last parameter\n      Node lastParam = ((ArrayList<Node>) functionType.getParameters()).get(numParams - 1);\n      argument = arguments.next();\n      ordinal++;\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n                                               getJSType(lastParam), call, ordinal);\n    } else {\n      Node parameter = parameters.next();\n      if (parameter.isOptionalArg()) {\n        if (arguments.hasNext()) {\n          argument = arguments.next();\n          ordinal++;\n          validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n                                                   getJSType(parameter), call, ordinal);\n        } else {\n          // If the parameter is optional and no corresponding argument exists, we stop processing\n          break;\n        }\n      } else {\n        argument = arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n                                                 getJSType(parameter), call, ordinal);\n      }\n    }\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n\n  if (numArgs < minArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n           validator.getReadableJSTypeName(call.getFirstChild(), false),\n           String.valueOf(numArgs), String.valueOf(minArgs),\n           maxArgs != Integer.MAX_VALUE ?\n           \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  } else if (numArgs > maxArgs && !varArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n           validator.getReadableJSTypeName(call.getFirstChild(), false),\n           String.valueOf(numArgs), String.valueOf(minArgs),\n           \" and no more than \" + maxArgs + \" argument(s)\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..9dd80d12 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,63 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+private void visitParameterList(NodeTraversal t, Node call,\n+                                FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  Node argument = null;\n+  int ordinal = 0;\n+  int numParams = functionType.getParameters().size();\n+  boolean varArgs = functionType.isVarArgs();\n+\n+  while (arguments.hasNext() && (parameters.hasNext() || varArgs)) {\n+    if (varArgs) {\n+      // varargs function, any remaining arguments match the last parameter\n+      Node lastParam = ((ArrayList<Node>) functionType.getParameters()).get(numParams - 1);\n       argument = arguments.next();\n       ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+                                               getJSType(lastParam), call, ordinal);\n+    } else {\n+      Node parameter = parameters.next();\n+      if (parameter.isOptionalArg()) {\n+        if (arguments.hasNext()) {\n+          argument = arguments.next();\n+          ordinal++;\n+          validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+                                                   getJSType(parameter), call, ordinal);\n+        } else {\n+          // If the parameter is optional and no corresponding argument exists, we stop processing\n+          break;\n+        }\n+      } else {\n+        argument = arguments.next();\n+        ordinal++;\n+        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+                                                 getJSType(parameter), call, ordinal);\n+      }\n     }\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+\n+  if (numArgs < minArgs) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+           validator.getReadableJSTypeName(call.getFirstChild(), false),\n+           String.valueOf(numArgs), String.valueOf(minArgs),\n+           maxArgs != Integer.MAX_VALUE ?\n+           \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  } else if (numArgs > maxArgs && !varArgs) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+           validator.getReadableJSTypeName(call.getFirstChild(), false),\n+           String.valueOf(numArgs), String.valueOf(minArgs),\n+           \" and no more than \" + maxArgs + \" argument(s)\");\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}