{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n            throws IllegalArgumentException {\n\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                    (year, monthOfYear, dayOfMonth,\n                            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Check if date is in Gregorian calendar\n        boolean isGregorianAfterCutover = year > 1582 || (year == 1582 && monthOfYear > 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth >= 15);\n        boolean isGregorianBeforeCutover = year < 1582 || (year == 1582 && monthOfYear < 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth < 15);\n\n        if (isGregorianAfterCutover) {\n            // Gregorian\n            long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant < iCutoverMillis) {\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n            return instant;\n\n        } else if (isGregorianBeforeCutover) {\n            // Julian\n            if (monthOfYear == 2 && dayOfMonth == 29 && !iJulianChronology.isLeapYear(year)) {\n                throw new IllegalArgumentException(\"Invalid leap year day\");\n            }\n            long instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n            return instant;\n\n        } else {\n            // Date is in the cutover period\n            long gregorianInstant;\n            try {\n                gregorianInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            } catch (IllegalArgumentException e) {\n                // Date does not exist in Gregorian calendar\n                long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                if (julianInstant >= iCutoverMillis) {\n                    throw e;\n                }\n                return julianInstant;\n            }\n\n            long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (julianInstant >= iCutoverMillis) {\n                // Date does not exist in Julian calendar\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n            if (gregorianInstant == julianInstant) {\n                // Ambiguous date, return the Gregorian instant\n                return gregorianInstant;\n            } else {\n                // Date exists in both calendars, but is not ambiguous\n                throw new IllegalArgumentException(\"Specified date is ambiguous\");",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..e82f81ea 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,35 +347,71 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                   int hourOfDay, int minuteOfHour,\n                                   int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n+            throws IllegalArgumentException {\n+\n         Chronology base;\n         if ((base = getBase()) != null) {\n             return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+                    (year, monthOfYear, dayOfMonth,\n+                            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n         }\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        // Check if date is in Gregorian calendar\n+        boolean isGregorianAfterCutover = year > 1582 || (year == 1582 && monthOfYear > 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth >= 15);\n+        boolean isGregorianBeforeCutover = year < 1582 || (year == 1582 && monthOfYear < 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth < 15);\n+\n+        if (isGregorianAfterCutover) {\n+            // Gregorian\n+            long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            if (instant < iCutoverMillis) {\n+                throw new IllegalArgumentException(\"Specified date does not exist\");\n+            }\n+            return instant;\n+\n+        } else if (isGregorianBeforeCutover) {\n+            // Julian\n+            if (monthOfYear == 2 && dayOfMonth == 29 && !iJulianChronology.isLeapYear(year)) {\n+                throw new IllegalArgumentException(\"Invalid leap year day\");\n+            }\n+            long instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n             if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n                 throw new IllegalArgumentException(\"Specified date does not exist\");\n             }\n-        }\n-        return instant;\n-    }\n+            return instant;\n+\n+        } else {\n+            // Date is in the cutover period\n+            long gregorianInstant;\n+            try {\n+                gregorianInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            } catch (IllegalArgumentException e) {\n+                // Date does not exist in Gregorian calendar\n+                long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+                if (julianInstant >= iCutoverMillis) {\n+                    throw e;\n+                }\n+                return julianInstant;\n+            }\n+\n+            long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            if (julianInstant >= iCutoverMillis) {\n+                // Date does not exist in Julian calendar\n+                throw new IllegalArgumentException(\"Specified date does not exist\");\n+            }\n+            if (gregorianInstant == julianInstant) {\n+                // Ambiguous date, return the Gregorian instant\n+                return gregorianInstant;\n+            } else {\n+                // Date exists in both calendars, but is not ambiguous\n+                throw new IllegalArgumentException(\"Specified date is ambiguous\");\n \n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}