{
    "patch": "      if (parent != null && NodeUtil.isObjectLitKey(parent, n)) {\n        // Don't traverse function expressions in object literals.\n        if (n.getParent().getType() != Token.CATCH) {\n          return false;\n        }\n      } else if (NodeUtil.isFunctionDeclaration(n)) {\n        // Don't traverse function declarations.\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n\n      if (lhs.isGetProp() && lhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n\n      Node llhs = lhs.getFirstChild();\n      if (llhs.isGetProp() && llhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n\n      if (n != lhs.getNext()) {\n        // Only traverse the right side of the assignment once.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..17eeaaa7 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,31 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && NodeUtil.isObjectLitKey(parent, n)) {\n+        // Don't traverse function expressions in object literals.\n+        if (n.getParent().getType() != Token.CATCH) {\n+          return false;\n+        }\n+      } else if (NodeUtil.isFunctionDeclaration(n)) {\n+        // Don't traverse function declarations.\n+        return false;\n+      }\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+\n+      if (lhs.isGetProp() && lhs.getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+\n+      Node llhs = lhs.getFirstChild();\n+      if (llhs.isGetProp() && llhs.getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+\n+      if (n != lhs.getNext()) {\n+        // Only traverse the right side of the assignment once.\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}