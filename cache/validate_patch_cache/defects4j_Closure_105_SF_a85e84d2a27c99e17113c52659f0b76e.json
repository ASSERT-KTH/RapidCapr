{
    "patch": "/**\n * Coerces the given Node to a String literal Node\n * by wrapping it in a new Node of type Token.ADD\n * with an empty string Node as the first child.\n */\nprivate Node createStringNode(Node n) {\n  Preconditions.checkNotNull(n);\n  if (n.isString()) {\n    return n;\n  } else {\n    return new Node(Token.ADD, Node.newString(\"\"), n);\n  }\n}\n\n/**\n * Attempts to fold string literals in a `join` function call.\n * Returns the new folded string Node, or null if folding is not possible.\n */\nprivate Node foldStringJoin(Node arrayNode, String joinString) {\n  Node elem = arrayNode.getFirstChild();\n  StringBuilder sb = new StringBuilder();\n  boolean hasFolded = false;\n\n  // Merges adjacent String nodes.\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (sb.length() > 0) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n      hasFolded = true;\n    } else {\n      if (sb.length() > 0) {\n        // add the string built so far.\n        Node foldedStringNode = Node.newString(sb.toString());\n        arrayNode.addChildToBack(foldedStringNode);\n        sb = new StringBuilder();\n      }\n      arrayNode.addChildToBack(elem);\n    }\n    elem = elem.getNext();\n  }\n\n  if (sb.length() > 0) {\n    // add the string built so far.\n    Node foldedStringNode = Node.newString(sb.toString());\n    arrayNode.addChildToBack(foldedStringNode);\n    hasFolded = true;\n  }\n\n  if (hasFolded) {\n    // return the new folded string node\n    return IR.string(arrayNode.getString());\n  } else {\n    // no folding could actually be performed\n    return null;\n  }\n}\n\n/**\n * Attempts to fold string literals in a `join` function call.\n * If successful, replaces the original node with the folded string,\n * and reports the code change to the compiler.\n */\nvoid tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                       Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  Node foldedStringNode = foldStringJoin(arrayNode, joinString);\n\n  if (foldedStringNode == null) {\n    return;\n  }\n\n  int foldedSize = InlineCostEstimator.getCost(foldedStringNode);\n  int originalSize = InlineCostEstimator.getCost(n);\n\n  if (foldedSize > originalSize) {\n    return;\n  }\n\n  parent.replaceChild(n, foldedStringNode);\n  t.getCompiler().reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..8ff06679 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,96 +1458,102 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n+/**\n+ * Coerces the given Node to a String literal Node\n+ * by wrapping it in a new Node of type Token.ADD\n+ * with an empty string Node as the first child.\n+ */\n+private Node createStringNode(Node n) {\n+  Preconditions.checkNotNull(n);\n+  if (n.isString()) {\n+    return n;\n+  } else {\n+    return new Node(Token.ADD, Node.newString(\"\"), n);\n+  }\n+}\n+\n+/**\n+ * Attempts to fold string literals in a `join` function call.\n+ * Returns the new folded string Node, or null if folding is not possible.\n+ */\n+private Node foldStringJoin(Node arrayNode, String joinString) {\n+  Node elem = arrayNode.getFirstChild();\n+  StringBuilder sb = new StringBuilder();\n+  boolean hasFolded = false;\n+\n+  // Merges adjacent String nodes.\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      if (sb.length() > 0) {\n+        sb.append(joinString);\n+      }\n+      sb.append(NodeUtil.getStringValue(elem));\n+      hasFolded = true;\n+    } else {\n+      if (sb.length() > 0) {\n+        // add the string built so far.\n+        Node foldedStringNode = Node.newString(sb.toString());\n+        arrayNode.addChildToBack(foldedStringNode);\n+        sb = new StringBuilder();\n+      }\n+      arrayNode.addChildToBack(elem);\n     }\n+    elem = elem.getNext();\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  if (sb.length() > 0) {\n+    // add the string built so far.\n+    Node foldedStringNode = Node.newString(sb.toString());\n+    arrayNode.addChildToBack(foldedStringNode);\n+    hasFolded = true;\n+  }\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+  if (hasFolded) {\n+    // return the new folded string node\n+    return IR.string(arrayNode.getString());\n+  } else {\n+    // no folding could actually be performed\n+    return null;\n+  }\n+}\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      elem = elem.getNext();\n-    }\n+/**\n+ * Attempts to fold string literals in a `join` function call.\n+ * If successful, replaces the original node with the folded string,\n+ * and reports the code change to the compiler.\n+ */\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+                       Node parent) {\n+  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n \n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+  Node arrayNode = left.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n+      !functionName.getString().equals(\"join\")) {\n+    return;\n+  }\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  String joinString = NodeUtil.getStringValue(right);\n+  Node foldedStringNode = foldStringJoin(arrayNode, joinString);\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n-    }\n-    t.getCompiler().reportCodeChange();\n+  if (foldedStringNode == null) {\n+    return;\n+  }\n+\n+  int foldedSize = InlineCostEstimator.getCost(foldedStringNode);\n+  int originalSize = InlineCostEstimator.getCost(n);\n+\n+  if (foldedSize > originalSize) {\n+    return;\n   }\n \n+  parent.replaceChild(n, foldedStringNode);\n+  t.getCompiler().reportCodeChange();\n+}\n+\n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}