{
    "patch": "public static double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<Map<String, Integer>>() {}.getType();\n    Map<String, Integer> map = gson.fromJson(json, type);\n    \n    double total = 0.0;\n    double typed = 0.0;\n    \n    for (int value : map.values()) {\n        total += value;\n        if (value > 0) {\n            typed += value;\n        }\n    }\n    \n    return typed / total * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..831b1261 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<Map<String, Integer>>() {}.getType();\n+    Map<String, Integer> map = gson.fromJson(json, type);\n+    \n+    double total = 0.0;\n+    double typed = 0.0;\n+    \n+    for (int value : map.values()) {\n+        total += value;\n+        if (value > 0) {\n+            typed += value;\n+        }\n+    }\n+    \n+    return typed / total * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}