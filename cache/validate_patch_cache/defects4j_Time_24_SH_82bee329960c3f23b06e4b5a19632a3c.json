{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        long newMillis = savedFields[i].set(millis, resetFields);\n        if (newMillis != millis) {\n            // Check if the field causing the change is the year field\n            boolean isYearField = savedFields[i].iField.getType() == DateTimeFieldType.year();\n            if (isYearField) {\n                int parsedYear = savedFields[i].iField.get(newMillis);\n                if (parsedYear != iDefaultYear) {\n                    // Recursively parse the fields with iDefaultYear instead\n                    saveField(DateTimeFieldType.year(), iDefaultYear);\n                    return computeMillis(resetFields, text);\n                }\n            } else {\n                // Non-year field caused the change; throw exception\n                throw new IllegalArgumentException(\"Illegal instant due to disallowed field combination\");\n            }\n        }\n\n        millis = newMillis;\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..076524c1 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,33 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+        if (newMillis != millis) {\n+            // Check if the field causing the change is the year field\n+            boolean isYearField = savedFields[i].iField.getType() == DateTimeFieldType.year();\n+            if (isYearField) {\n+                int parsedYear = savedFields[i].iField.get(newMillis);\n+                if (parsedYear != iDefaultYear) {\n+                    // Recursively parse the fields with iDefaultYear instead\n+                    saveField(DateTimeFieldType.year(), iDefaultYear);\n+                    return computeMillis(resetFields, text);\n+                }\n+            } else {\n+                // Non-year field caused the change; throw exception\n+                throw new IllegalArgumentException(\"Illegal instant due to disallowed field combination\");\n+            }\n+        }\n+\n+        millis = newMillis;\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}