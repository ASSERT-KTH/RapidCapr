{
    "patch": "      if (parent.getType() == Token.EXPR_RESULT) {\n        Node gramps = parent.getParent();\n        if (gramps.getType() == Token.ASSIGN &&\n            NodeUtil.isGet(gramps.getFirstChild())) {\n          Node prototypeGet = gramps.getFirstChild();\n          if (prototypeGet.getType() == Token.GETPROP &&\n              \"prototype\".equals(prototypeGet.getLastChild().getString())) {\n            return false;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..28252872 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,16 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.EXPR_RESULT) {\n+        Node gramps = parent.getParent();\n+        if (gramps.getType() == Token.ASSIGN &&\n+            NodeUtil.isGet(gramps.getFirstChild())) {\n+          Node prototypeGet = gramps.getFirstChild();\n+          if (prototypeGet.getType() == Token.GETPROP &&\n+              \"prototype\".equals(prototypeGet.getLastChild().getString())) {\n+            return false;\n+          }\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}