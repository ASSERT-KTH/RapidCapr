{
    "patch": "            List<MockCandidate> candidates = mockCandidateFilter\n                    .findMatchingCandidates(mocks, field.getType(), field.getGenericType())\n                    .stream()\n                    .sorted()\n                    .collect(Collectors.toList());\n            for(MockCandidate candidate : candidates) {\n                candidate.thenInject(fieldInstance);\n                break;\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..2d1735acd 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,18 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            List<MockCandidate> candidates = mockCandidateFilter\n+                    .findMatchingCandidates(mocks, field.getType(), field.getGenericType())\n+                    .stream()\n+                    .sorted()\n+                    .collect(Collectors.toList());\n+            for(MockCandidate candidate : candidates) {\n+                candidate.thenInject(fieldInstance);\n+                break;\n+            }\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}