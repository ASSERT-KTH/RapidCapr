{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    double[] realEigenvalues = dec.getRealEigenvalues();\n    RealMatrix v = dec.getV();\n    int n = v.getRowDimension();\n    BlockRealMatrix sqrt = new BlockRealMatrix(n, n);\n\n    for (int i = 0; i < n; i++) {\n        double eigenvalue = realEigenvalues[i];\n        if (eigenvalue > 0) {\n            RealVector eigenvector = v.getColumnVector(i);\n            eigenvector.mapToSelf(x -> FastMath.sqrt(x));\n            RealMatrix eigVecT = eigenvector.outerProduct(eigenvector);\n            sqrt = sqrt.add(eigVecT.scalarMultiply(eigenvalue));\n        } else if (eigenvalue < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite.\");\n        }\n    }\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5446ed3d2 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    double[] realEigenvalues = dec.getRealEigenvalues();\n+    RealMatrix v = dec.getV();\n+    int n = v.getRowDimension();\n+    BlockRealMatrix sqrt = new BlockRealMatrix(n, n);\n+\n+    for (int i = 0; i < n; i++) {\n+        double eigenvalue = realEigenvalues[i];\n+        if (eigenvalue > 0) {\n+            RealVector eigenvector = v.getColumnVector(i);\n+            eigenvector.mapToSelf(x -> FastMath.sqrt(x));\n+            RealMatrix eigVecT = eigenvector.outerProduct(eigenvector);\n+            sqrt = sqrt.add(eigVecT.scalarMultiply(eigenvalue));\n+        } else if (eigenvalue < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite.\");\n+        }\n     }\n+    return sqrt;\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}