{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    \n    if (bounds.length == 1 && bounds[0] instanceof TypeVariable) {\n        TypeVariable<?> boundTypeVariable = (TypeVariable<?>) bounds[0];\n        Type actualType = getActualTypeArgumentFor(boundTypeVariable);\n        if (actualType != null) {\n            registerTypeVariablesOn(actualType);\n        } else {\n            readTypeVariable(boundTypeVariable);\n        }\n    } else {\n        for (Type bound : bounds) {\n            if (!bound.equals(Object.class) && !(bound instanceof WildcardType)) {\n                if (bound instanceof TypeVariable) {\n                    TypeVariable<?> boundTypeVariable = (TypeVariable<?>) bound;\n                    Type actualType = getActualTypeArgumentFor(boundTypeVariable);\n                    if (actualType != null) {\n                        registerTypeVariablesOn(actualType);\n                    } else {\n                        readTypeVariable(boundTypeVariable);\n                    }\n                } else {\n                    registerTypeVariablesOn(bound);\n                }\n            }\n        }\n    }\n    \n    Type actualType = getActualTypeArgumentFor(typeVariable);\n    if (actualType != null) {\n        registerTypeVariablesOn(actualType);\n    } else {\n        registerTypeVariablesOn(typeVariable);\n        for (Type bound : bounds) {\n            if (bound instanceof WildcardType) {\n                registerTypeVariablesOn(bound);\n            }\n        }\n    }\n}\n\nprivate void readTypeVariable(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    TypeVariable<?>[] typeVariables = typeVariable.getGenericDeclaration().getTypeParameters();\n    boolean foundMatchingVariable = false;\n\n    for (int i = 0; i < typeVariables.length; i++) {\n        if (typeVariables[i].equals(typeVariable)) {\n            Type type = typeArguments[i];\n            if (type instanceof WildcardType) {\n                WildcardType wildcardType = (WildcardType) type;\n                Type[] upperBounds = wildcardType.getUpperBounds();\n                if (upperBounds.length > 0) {\n                    registerTypeVariablesOn(upperBounds[0]);\n                }\n            } else {\n                registerTypeVariablesOn(type);\n            }\n            foundMatchingVariable = true;\n            break;\n        }\n    }\n\n    if (!foundMatchingVariable) {\n        for (Type bound : bounds) {\n            if (!bound.equals(Object.class) && !(bound instanceof WildcardType)) {\n                if (bound instanceof TypeVariable) {\n                    TypeVariable<?> boundTypeVariable = (TypeVariable<?>) bound;\n                    Type actualType = getActualTypeArgumentFor(boundTypeVariable);\n                    if (actualType != null) {\n                        registerTypeVariablesOn(actualType);\n                    } else {\n                        readTypeVariable(boundTypeVariable);\n                    }\n                } else {\n                    registerTypeVariablesOn(bound);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..fe1bfaf4f 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,89 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    \n+    if (bounds.length == 1 && bounds[0] instanceof TypeVariable) {\n+        TypeVariable<?> boundTypeVariable = (TypeVariable<?>) bounds[0];\n+        Type actualType = getActualTypeArgumentFor(boundTypeVariable);\n+        if (actualType != null) {\n+            registerTypeVariablesOn(actualType);\n+        } else {\n+            readTypeVariable(boundTypeVariable);\n+        }\n+    } else {\n+        for (Type bound : bounds) {\n+            if (!bound.equals(Object.class) && !(bound instanceof WildcardType)) {\n+                if (bound instanceof TypeVariable) {\n+                    TypeVariable<?> boundTypeVariable = (TypeVariable<?>) bound;\n+                    Type actualType = getActualTypeArgumentFor(boundTypeVariable);\n+                    if (actualType != null) {\n+                        registerTypeVariablesOn(actualType);\n+                    } else {\n+                        readTypeVariable(boundTypeVariable);\n+                    }\n+                } else {\n+                    registerTypeVariablesOn(bound);\n+                }\n+            }\n+        }\n+    }\n+    \n+    Type actualType = getActualTypeArgumentFor(typeVariable);\n+    if (actualType != null) {\n+        registerTypeVariablesOn(actualType);\n+    } else {\n+        registerTypeVariablesOn(typeVariable);\n+        for (Type bound : bounds) {\n+            if (bound instanceof WildcardType) {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+    }\n+}\n+\n+private void readTypeVariable(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    TypeVariable<?>[] typeVariables = typeVariable.getGenericDeclaration().getTypeParameters();\n+    boolean foundMatchingVariable = false;\n+\n+    for (int i = 0; i < typeVariables.length; i++) {\n+        if (typeVariables[i].equals(typeVariable)) {\n+            Type type = typeArguments[i];\n+            if (type instanceof WildcardType) {\n+                WildcardType wildcardType = (WildcardType) type;\n+                Type[] upperBounds = wildcardType.getUpperBounds();\n+                if (upperBounds.length > 0) {\n+                    registerTypeVariablesOn(upperBounds[0]);\n+                }\n+            } else {\n+                registerTypeVariablesOn(type);\n+            }\n+            foundMatchingVariable = true;\n+            break;\n+        }\n+    }\n+\n+    if (!foundMatchingVariable) {\n+        for (Type bound : bounds) {\n+            if (!bound.equals(Object.class) && !(bound instanceof WildcardType)) {\n+                if (bound instanceof TypeVariable) {\n+                    TypeVariable<?> boundTypeVariable = (TypeVariable<?>) bound;\n+                    Type actualType = getActualTypeArgumentFor(boundTypeVariable);\n+                    if (actualType != null) {\n+                        registerTypeVariablesOn(actualType);\n+                    } else {\n+                        readTypeVariable(boundTypeVariable);\n+                    }\n+                } else {\n+                    registerTypeVariablesOn(bound);\n+                }\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}