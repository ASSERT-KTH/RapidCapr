{
    "patch": "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n\n  // DiagnosticGroups override the plain checkTypes option.\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else {\n    options.checkTypes = !options.disables(DiagnosticGroups.CHECK_TYPES);\n  }\n  if (options.checkTypes && !options.shouldGenerateTypedExterns()) {\n    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);\n  } else if (!options.checkTypes) {\n    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.OFF);\n    options.setWarningLevel(\n        DiagnosticGroup.forType(\n            RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n\n  // Check `options.checkSymbols`, `options.requireEs6Module`, and `options.needsTranspilationFrom` for `DiagnosticGroups.ES6_MODULES`.\n  if (!options.checkSymbols\n      && !options.requireEs6Module\n      && !options.needsTranspilationFrom(LanguageMode.ECMASCRIPT_2015)) {\n    options.setWarningLevel(\n        DiagnosticGroups.ES6_MODULES, CheckLevel.OFF);\n  }\n\n  if (options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n  }\n\n  // Initialize the warnings guard.\n  List<WarningsGuard> guards = Lists.newArrayList();\n  guards.add(\n      new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n  guards.add(options.getWarningsGuard());\n\n  // All passes must run the variable check. This synthesizes variables later so that the compiler doesn't crash. \n  // It also checks the externs file for validity. If you don't want to warn about missing variable declarations, \n  // we shut that specific error off.\n  boolean disableCheckVariables = !options.checkSymbols\n      || options.disables(DiagnosticGroups.CHECK_VARIABLES);\n  if (disableCheckVariables) {\n    guards.add(\n        new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n  }\n\n  this.warningsGuard = new ComposeWarningsGuard(guards);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 11850211..a69c49d8 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -223,64 +223,67 @@ public class Compiler extends AbstractCompiler {\n    * Initialize the compiler options. Only necessary if you're not doing\n    * a normal compile() job.\n    */\n-  public void initOptions(CompilerOptions options) {\n-    this.options = options;\n-    if (errorManager == null) {\n-      if (outStream == null) {\n-        setErrorManager(\n-            new LoggerErrorManager(createMessageFormatter(), logger));\n-      } else {\n-        PrintStreamErrorManager printer =\n-            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n-        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n-        setErrorManager(printer);\n-      }\n-    }\n-\n-    // DiagnosticGroups override the plain checkTypes option.\n-    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n-      options.checkTypes = true;\n-    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n-      options.checkTypes = false;\n-    } else if (!options.checkTypes) {\n-      // If DiagnosticGroups did not override the plain checkTypes\n-      // option, and checkTypes is enabled, then turn off the\n-      // parser type warnings.\n-      options.setWarningLevel(\n-          DiagnosticGroup.forType(\n-              RhinoErrorReporter.TYPE_PARSE_ERROR),\n-          CheckLevel.OFF);\n+public void initOptions(CompilerOptions options) {\n+  this.options = options;\n+  if (errorManager == null) {\n+    if (outStream == null) {\n+      setErrorManager(\n+          new LoggerErrorManager(createMessageFormatter(), logger));\n+    } else {\n+      PrintStreamErrorManager printer =\n+          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n+      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n+      setErrorManager(printer);\n     }\n+  }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.GLOBAL_THIS,\n-          options.checkGlobalThisLevel);\n-    }\n+  // DiagnosticGroups override the plain checkTypes option.\n+  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n+    options.checkTypes = true;\n+  } else {\n+    options.checkTypes = !options.disables(DiagnosticGroups.CHECK_TYPES);\n+  }\n+  if (options.checkTypes && !options.shouldGenerateTypedExterns()) {\n+    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);\n+  } else if (!options.checkTypes) {\n+    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.OFF);\n+    options.setWarningLevel(\n+        DiagnosticGroup.forType(\n+            RhinoErrorReporter.TYPE_PARSE_ERROR),\n+        CheckLevel.OFF);\n+  }\n \n-    // Initialize the warnings guard.\n-    List<WarningsGuard> guards = Lists.newArrayList();\n-    guards.add(\n-        new SuppressDocWarningsGuard(\n-            getDiagnosticGroups().getRegisteredGroups()));\n-    guards.add(options.getWarningsGuard());\n+  // Check `options.checkSymbols`, `options.requireEs6Module`, and `options.needsTranspilationFrom` for `DiagnosticGroups.ES6_MODULES`.\n+  if (!options.checkSymbols\n+      && !options.requireEs6Module\n+      && !options.needsTranspilationFrom(LanguageMode.ECMASCRIPT_2015)) {\n+    options.setWarningLevel(\n+        DiagnosticGroups.ES6_MODULES, CheckLevel.OFF);\n+  }\n \n+  if (options.checkGlobalThisLevel.isOn()) {\n+    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n+  }\n \n-    // All passes must run the variable check. This synthesizes\n-    // variables later so that the compiler doesn't crash. It also\n-    // checks the externs file for validity. If you don't want to warn\n-    // about missing variable declarations, we shut that specific\n-    // error off.\n-    if (!options.checkSymbols &&\n-        (warningsGuard == null || !warningsGuard.disables(\n-            DiagnosticGroups.CHECK_VARIABLES))) {\n-      guards.add(new DiagnosticGroupWarningsGuard(\n-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n-    }\n+  // Initialize the warnings guard.\n+  List<WarningsGuard> guards = Lists.newArrayList();\n+  guards.add(\n+      new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n+  guards.add(options.getWarningsGuard());\n \n-    this.warningsGuard = new ComposeWarningsGuard(guards);\n+  // All passes must run the variable check. This synthesizes variables later so that the compiler doesn't crash. \n+  // It also checks the externs file for validity. If you don't want to warn about missing variable declarations, \n+  // we shut that specific error off.\n+  boolean disableCheckVariables = !options.checkSymbols\n+      || options.disables(DiagnosticGroups.CHECK_VARIABLES);\n+  if (disableCheckVariables) {\n+    guards.add(\n+        new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n   }\n \n+  this.warningsGuard = new ComposeWarningsGuard(guards);\n+}\n+\n   /**\n    * Initializes the instance state needed for a compile job.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}