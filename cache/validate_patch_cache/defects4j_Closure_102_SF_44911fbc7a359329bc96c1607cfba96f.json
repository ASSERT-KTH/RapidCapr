{
    "patch": "public void process(Node externs, Node root) {\n  // Remove duplicate declarations before renaming\n  removeDuplicateDeclarations(externs);\n  removeDuplicateDeclarations(root);\n  \n  // Rename local variable names if needed\n  if (MAKE_LOCAL_NAMES_UNIQUE) {\n    MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n    NodeTraversal t = new NodeTraversal(compiler, renamer);\n    t.traverseRoots(externs, root);\n  }\n  \n  // Process externs and root together\n  Node externsAndRoot = new Node(Token.BLOCK);\n  externsAndRoot.addChildToBack(externs);\n  externsAndRoot.addChildToBack(root);\n  \n  NodeTraversal.traverse(compiler, externsAndRoot, this);\n  \n  // Propagate constant annotations\n  new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java\nindex 4aa45558..ea19443d 100644\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n@@ -84,17 +84,28 @@ class Normalize implements CompilerPass, Callback {\n   }\n \n   @Override\n-  public void process(Node externs, Node root) {\n-    NodeTraversal.traverse(compiler, root, this);\n-    if (MAKE_LOCAL_NAMES_UNIQUE) {\n-      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n-      NodeTraversal t = new NodeTraversal(compiler, renamer);\n-      t.traverseRoots(externs, root);\n-    }\n-    removeDuplicateDeclarations(root);\n-    new PropogateConstantAnnotations(compiler, assertOnChange)\n-        .process(externs, root);\n+public void process(Node externs, Node root) {\n+  // Remove duplicate declarations before renaming\n+  removeDuplicateDeclarations(externs);\n+  removeDuplicateDeclarations(root);\n+  \n+  // Rename local variable names if needed\n+  if (MAKE_LOCAL_NAMES_UNIQUE) {\n+    MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n+    NodeTraversal t = new NodeTraversal(compiler, renamer);\n+    t.traverseRoots(externs, root);\n   }\n+  \n+  // Process externs and root together\n+  Node externsAndRoot = new Node(Token.BLOCK);\n+  externsAndRoot.addChildToBack(externs);\n+  externsAndRoot.addChildToBack(root);\n+  \n+  NodeTraversal.traverse(compiler, externsAndRoot, this);\n+  \n+  // Propagate constant annotations\n+  new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);\n+}\n \n   @Override\n   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {",
    "result_reason": "java.lang.RuntimeException: java.lang.IllegalArgumentException",
    "test_result": "FAIL"
}