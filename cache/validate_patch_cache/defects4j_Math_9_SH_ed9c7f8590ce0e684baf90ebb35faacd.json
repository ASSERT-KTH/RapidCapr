{
    "patch": "public class Line {\n\n    private final Vector direction;\n    private final Vector zero;\n    \n    public Line(Vector a, Vector b) {\n        direction = b.subtract(a).normalize();\n        zero = a;\n    }\n\n    public Vector pointAt(double t) {\n        return zero.add(direction.multiply(t));\n    }\n\n    public Line revert() {\n        final Line reverted = new Line(zero, zero.subtract(direction));\n        return reverted;\n   }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..3431bbe2a 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,9 +83,28 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n+    public Line revert() {\n+public class Line {\n+\n+    private final Vector direction;\n+    private final Vector zero;\n+    \n+    public Line(Vector a, Vector b) {\n+        direction = b.subtract(a).normalize();\n+        zero = a;\n+    }\n+\n+    public Vector pointAt(double t) {\n+        return zero.add(direction.multiply(t));\n+    }\n+\n     public Line revert() {\n         final Line reverted = new Line(zero, zero.subtract(direction));\n         return reverted;\n+   }\n+\n+}\n+        return reverted;\n     }\n \n     /** Get the normalized direction vector.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}