{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.getType() == Token.LABEL) {\n        n = n.getLastChild();\n        if (n.getType() == Token.EMPTY) {\n            // check if the next sibling is a FUNCTION or DO node\n            Node nextSibling = n.getNext();\n            if (nextSibling != null && (nextSibling.getType() == Token.FUNCTION || nextSibling.getType() == Token.DO)) {\n                return true;\n            }\n            return false;\n        } else {\n            // check if the only child is a FUNCTION or DO node\n            return isOneExactlyFunctionOrDo(n);\n        }\n    } else if (n.getType() == Token.BLOCK) {\n        int childCount = n.getChildCount();\n        if (childCount == 1) {\n            return isOneExactlyFunctionOrDo(n.getFirstChild());\n        } else {\n            return false;\n        }\n    } else {\n        return n.getType() == Token.FUNCTION || n.getType() == Token.DO;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..2863d018 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,31 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    if (n.getType() == Token.LABEL) {\n+        n = n.getLastChild();\n+        if (n.getType() == Token.EMPTY) {\n+            // check if the next sibling is a FUNCTION or DO node\n+            Node nextSibling = n.getNext();\n+            if (nextSibling != null && (nextSibling.getType() == Token.FUNCTION || nextSibling.getType() == Token.DO)) {\n+                return true;\n+            }\n+            return false;\n+        } else {\n+            // check if the only child is a FUNCTION or DO node\n+            return isOneExactlyFunctionOrDo(n);\n+        }\n+    } else if (n.getType() == Token.BLOCK) {\n+        int childCount = n.getChildCount();\n+        if (childCount == 1) {\n+            return isOneExactlyFunctionOrDo(n.getFirstChild());\n+        } else {\n+            return false;\n+        }\n+    } else {\n+        return n.getType() == Token.FUNCTION || n.getType() == Token.DO;\n+    }\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}