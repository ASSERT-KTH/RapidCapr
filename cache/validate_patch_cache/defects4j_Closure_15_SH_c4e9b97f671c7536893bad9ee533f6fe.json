{
    "patch": "        if (n.isGetProp()) {\n          JSType type = n.getFirstChild().getJSType();\n          String propName = n.getLastChild().getString();\n          if (type != null\n              && !type.isUnknownType()\n              && !type.isEnumType()\n              && !type.isLiteralObjectOrFunction()\n              && !type.isNominalConstructorOrInterface()) {\n            DeclaredFunctionType objType = ObjectType.cast(type).getDeclaredFunctionType();\n            if (objType != null && objType.hasProperty(propName)) {\n              JSType propType = objType.getPropertyType(propName);\n              if (propType != null\n                  && !propType.isUnknownType()\n                  && !propType.isNoResolvedType()\n                  && controlledVars != null\n                  && controlledVars.containsProp(type.toString(), propName)\n                  && NodeUtil.mayHaveSideEffects(propType.getPropDeclaration())) {\n                return true;\n              }\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..153c2b70 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,28 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        if (n.isGetProp()) {\n+          JSType type = n.getFirstChild().getJSType();\n+          String propName = n.getLastChild().getString();\n+          if (type != null\n+              && !type.isUnknownType()\n+              && !type.isEnumType()\n+              && !type.isLiteralObjectOrFunction()\n+              && !type.isNominalConstructorOrInterface()) {\n+            DeclaredFunctionType objType = ObjectType.cast(type).getDeclaredFunctionType();\n+            if (objType != null && objType.hasProperty(propName)) {\n+              JSType propType = objType.getPropertyType(propName);\n+              if (propType != null\n+                  && !propType.isUnknownType()\n+                  && !propType.isNoResolvedType()\n+                  && controlledVars != null\n+                  && controlledVars.containsProp(type.toString(), propName)\n+                  && NodeUtil.mayHaveSideEffects(propType.getPropDeclaration())) {\n+                return true;\n+              }\n+            }\n+          }\n+        }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}