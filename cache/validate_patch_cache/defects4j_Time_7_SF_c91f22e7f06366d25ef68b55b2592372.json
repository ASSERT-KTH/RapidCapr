{
    "patch": "\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n\n        try {\n            instant.setMillis(bucket.computeMillis(false, text));\n        } catch (IllegalFieldValueException e) {\n            int lastDayOfFeb = getLastDayOfFebruary(defaultYear);\n            bucket.saveField(DateTimeFieldType.dayOfMonth(), lastDayOfFeb);\n            instant.setMillis(bucket.computeMillis(false, text));\n        }\n        \n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }\n\n    private int getLastDayOfFebruary(int defaultYear) {\n        int lastDayOfFeb = 28;\n        if ((defaultYear % 4 == 0 && defaultYear % 100 != 0) || defaultYear % 400 == 0) {\n            lastDayOfFeb = 29;\n        }\n        return lastDayOfFeb;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..1bf4d812 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,22 +697,19 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n+\n+        try {\n+            instant.setMillis(bucket.computeMillis(false, text));\n+        } catch (IllegalFieldValueException e) {\n+            int lastDayOfFeb = getLastDayOfFebruary(defaultYear);\n+            bucket.saveField(DateTimeFieldType.dayOfMonth(), lastDayOfFeb);\n+            instant.setMillis(bucket.computeMillis(false, text));\n+        }\n+        \n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n@@ -727,6 +724,13 @@ public class DateTimeFormatter {\n         return newPos;\n     }\n \n+    private int getLastDayOfFebruary(int defaultYear) {\n+        int lastDayOfFeb = 28;\n+        if ((defaultYear % 4 == 0 && defaultYear % 100 != 0) || defaultYear % 400 == 0) {\n+            lastDayOfFeb = 29;\n+        }\n+        return lastDayOfFeb;\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}