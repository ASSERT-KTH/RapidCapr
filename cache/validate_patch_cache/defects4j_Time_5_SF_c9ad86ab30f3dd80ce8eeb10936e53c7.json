{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    long millis = getMillis();\n\n    boolean normalizeYearsAndMonths = years != 0 || months != 0;\n    boolean normalizeWeeksAndDays = weeks != 0 || days != 0;\n\n    // normalize years and months\n    if (normalizeYearsAndMonths) {\n        int totalMonths = years * 12 + months;\n        int normalizedYears = totalMonths / 12;\n        int normalizedMonths = totalMonths % 12;\n        if (normalizedYears != 0 && type.isSupported(DurationFieldType.years())) {\n            years = normalizedYears;\n            months = normalizedMonths;\n        } else {\n            months = totalMonths;\n            years = 0;\n        }\n    }\n\n    // normalize weeks and days\n    if (normalizeWeeksAndDays) {\n        if (type.isSupported(DurationFieldType.weeks())) {\n            int totalDays = weeks * 7 + days;\n            weeks = totalDays / 7;\n            days = totalDays % 7;\n        } else {\n            days += weeks * 7;\n            weeks = 0;\n        }\n    }\n\n    Period result = new Period(years, months, weeks, days, hours, minutes, seconds, millis, type);\n    return result.normalizedStandard(ISOChronology.getInstanceUTC());\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..63737cdb 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,48 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+    int hours = getHours();\n+    int minutes = getMinutes();\n+    int seconds = getSeconds();\n+    long millis = getMillis();\n+\n+    boolean normalizeYearsAndMonths = years != 0 || months != 0;\n+    boolean normalizeWeeksAndDays = weeks != 0 || days != 0;\n+\n+    // normalize years and months\n+    if (normalizeYearsAndMonths) {\n+        int totalMonths = years * 12 + months;\n+        int normalizedYears = totalMonths / 12;\n+        int normalizedMonths = totalMonths % 12;\n+        if (normalizedYears != 0 && type.isSupported(DurationFieldType.years())) {\n+            years = normalizedYears;\n+            months = normalizedMonths;\n+        } else {\n+            months = totalMonths;\n+            years = 0;\n         }\n-        return result;\n     }\n \n+    // normalize weeks and days\n+    if (normalizeWeeksAndDays) {\n+        if (type.isSupported(DurationFieldType.weeks())) {\n+            int totalDays = weeks * 7 + days;\n+            weeks = totalDays / 7;\n+            days = totalDays % 7;\n+        } else {\n+            days += weeks * 7;\n+            weeks = 0;\n+        }\n+    }\n+\n+    Period result = new Period(years, months, weeks, days, hours, minutes, seconds, millis, type);\n+    return result.normalizedStandard(ISOChronology.getInstanceUTC());\n+}\n+\n }",
    "result_reason": "error: no suitable constructor found for Period(int,int,int,int,int,int,int,long,PeriodType)",
    "test_result": "ERROR"
}