{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        int[] newValues = new int[values.length];\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            newValues[i] = values[i];\n        }\n        int newMonthOfNewValues;\n        try {\n            // Attempt to set month with new valueToAdd\n            newMonthOfNewValues = iChronology.monthOfYear().add(instant, valueToAdd);\n        } catch (IllegalArgumentException e) {\n            // This is an invalid date which means we've overflowed the month or year range.\n            // We need to reduce the valueToAdd until we can correctly set the month and year.\n            newMonthOfNewValues = iChronology.monthOfYear().getMaximumValue(instant);\n            int daysInMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n            int remainderToAdd = valueToAdd;\n            while (true) {\n                // Calculate the number of months we can add without exceeding the maximum possible year.\n                int maxMonthsToAdd = iChronology.monthOfYear().getDifferenceAsLong(iChronology.year().add(instant, (iChronology.maxYear().get() - iChronology.year().get(instant))), instant) > 0 ?\n                        iChronology.monthOfYear().getDifferenceAsLong(iChronology.year().add(instant, (iChronology.maxYear().get() - iChronology.year().get(instant))), instant) : 0;\n                if (maxMonthsToAdd <= 0) {\n                    break;\n                }\n                int monthsToAdd = remainderToAdd < maxMonthsToAdd ? remainderToAdd : maxMonthsToAdd;\n                newMonthOfNewValues = iChronology.monthOfYear().add(newMonthOfNewValues, monthsToAdd);\n                remainderToAdd -= monthsToAdd;\n                if (remainderToAdd == 0) {\n                    break;\n                }\n                // Since we are able to add `maxMonthsToAdd` without exceeding the maximum possible year,\n                // we add `maxMonthsToAdd` months to the current instant and try again.\n                instant = iChronology.monthOfYear().add(instant, maxMonthsToAdd);\n            }\n            // Calculate the year and day after adjusting for the maximum possible year range overflow\n            int newYearOfNewValues;\n            if (iChronology.year().getMaximumValue(newMonthOfNewValues) == Integer.MAX_VALUE && remainderToAdd > 0) {\n                newYearOfNewValues = iChronology.maxYear().get();\n                newMonthOfNewValues = iChronology.monthOfYear().getMaximumValue(iChronology.monthOfYear().set(iChronology.year().set(instant, iChronology.maxYear().get()), newMonthOfNewValues));\n                daysInMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(instant, iChronology.maxYear().get()), newMonthOfNewValues), daysInMonth));\n            } else if (iChronology.year().getMinimumValue(newMonthOfNewValues) == Integer.MIN_VALUE && remainderToAdd < 0) {\n                newYearOfNewValues = iChronology.minYear().get();\n                newMonthOfNewValues = iChronology.monthOfYear().getMinimumValue(iChronology.monthOfYear().set(iChronology.year().set(instant, iChronology.minYear().get()), newMonthOfNewValues));\n                daysInMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(instant, iChronology.minYear().get()), newMonthOfNewValues), daysInMonth));\n            } else {\n                newYearOfNewValues = iChronology.year().get(instant);\n            }\n            // Set month, year, and day values in newValues array\n            newValues[iChronology.monthOfYear().getFieldIndex()] = newMonthOfNewValues;\n            newValues[iChronology.year().getFieldIndex()] = newYearOfNewValues;\n            newValues[iChronology.dayOfMonth().getFieldIndex()] = daysInMonth;\n            return newValues;\n        }\n        // Adjust for any year overflows that may have occurred\n        int newYear;\n        if (newMonthOfNewValues < newValues[iChronology.monthOfYear().getFieldIndex()]) {\n            newYear = newValues[iChronology.year().getFieldIndex()] + 1;\n        } else if (newMonthOfNewValues > newValues[iChronology.monthOfYear().getFieldIndex()]) {\n            newYear = newValues[iChronology.year().getFieldIndex()] - 1;\n        } else {\n            newYear = newValues[iChronology.year().getFieldIndex()];\n        }\n        newValues[iChronology.monthOfYear().getFieldIndex()] = newMonthOfNewValues;\n        newValues[iChronology.year().getFieldIndex()] = newYear;\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..cfb10b52 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,82 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        int[] newValues = new int[values.length];\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            newValues[i] = values[i];\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        int newMonthOfNewValues;\n+        try {\n+            // Attempt to set month with new valueToAdd\n+            newMonthOfNewValues = iChronology.monthOfYear().add(instant, valueToAdd);\n+        } catch (IllegalArgumentException e) {\n+            // This is an invalid date which means we've overflowed the month or year range.\n+            // We need to reduce the valueToAdd until we can correctly set the month and year.\n+            newMonthOfNewValues = iChronology.monthOfYear().getMaximumValue(instant);\n+            int daysInMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+            int remainderToAdd = valueToAdd;\n+            while (true) {\n+                // Calculate the number of months we can add without exceeding the maximum possible year.\n+                int maxMonthsToAdd = iChronology.monthOfYear().getDifferenceAsLong(iChronology.year().add(instant, (iChronology.maxYear().get() - iChronology.year().get(instant))), instant) > 0 ?\n+                        iChronology.monthOfYear().getDifferenceAsLong(iChronology.year().add(instant, (iChronology.maxYear().get() - iChronology.year().get(instant))), instant) : 0;\n+                if (maxMonthsToAdd <= 0) {\n+                    break;\n+                }\n+                int monthsToAdd = remainderToAdd < maxMonthsToAdd ? remainderToAdd : maxMonthsToAdd;\n+                newMonthOfNewValues = iChronology.monthOfYear().add(newMonthOfNewValues, monthsToAdd);\n+                remainderToAdd -= monthsToAdd;\n+                if (remainderToAdd == 0) {\n+                    break;\n+                }\n+                // Since we are able to add `maxMonthsToAdd` without exceeding the maximum possible year,\n+                // we add `maxMonthsToAdd` months to the current instant and try again.\n+                instant = iChronology.monthOfYear().add(instant, maxMonthsToAdd);\n+            }\n+            // Calculate the year and day after adjusting for the maximum possible year range overflow\n+            int newYearOfNewValues;\n+            if (iChronology.year().getMaximumValue(newMonthOfNewValues) == Integer.MAX_VALUE && remainderToAdd > 0) {\n+                newYearOfNewValues = iChronology.maxYear().get();\n+                newMonthOfNewValues = iChronology.monthOfYear().getMaximumValue(iChronology.monthOfYear().set(iChronology.year().set(instant, iChronology.maxYear().get()), newMonthOfNewValues));\n+                daysInMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(instant, iChronology.maxYear().get()), newMonthOfNewValues), daysInMonth));\n+            } else if (iChronology.year().getMinimumValue(newMonthOfNewValues) == Integer.MIN_VALUE && remainderToAdd < 0) {\n+                newYearOfNewValues = iChronology.minYear().get();\n+                newMonthOfNewValues = iChronology.monthOfYear().getMinimumValue(iChronology.monthOfYear().set(iChronology.year().set(instant, iChronology.minYear().get()), newMonthOfNewValues));\n+                daysInMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(instant, iChronology.minYear().get()), newMonthOfNewValues), daysInMonth));\n+            } else {\n+                newYearOfNewValues = iChronology.year().get(instant);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            // Set month, year, and day values in newValues array\n+            newValues[iChronology.monthOfYear().getFieldIndex()] = newMonthOfNewValues;\n+            newValues[iChronology.year().getFieldIndex()] = newYearOfNewValues;\n+            newValues[iChronology.dayOfMonth().getFieldIndex()] = daysInMonth;\n+            return newValues;\n+        }\n+        // Adjust for any year overflows that may have occurred\n+        int newYear;\n+        if (newMonthOfNewValues < newValues[iChronology.monthOfYear().getFieldIndex()]) {\n+            newYear = newValues[iChronology.year().getFieldIndex()] + 1;\n+        } else if (newMonthOfNewValues > newValues[iChronology.monthOfYear().getFieldIndex()]) {\n+            newYear = newValues[iChronology.year().getFieldIndex()] - 1;\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            newYear = newValues[iChronology.year().getFieldIndex()];\n         }\n+        newValues[iChronology.monthOfYear().getFieldIndex()] = newMonthOfNewValues;\n+        newValues[iChronology.year().getFieldIndex()] = newYear;\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}