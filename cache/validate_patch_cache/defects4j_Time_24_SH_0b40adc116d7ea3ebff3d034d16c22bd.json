{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    boolean monthOrDayPresent = false;\n    boolean yearPresent = false;\n\n    // Check if an illegal value is a month or day, and whether a year exists\n    for (int i = 0; i < count; i++) {\n        DateTimeFieldType fieldType = savedFields[i].iField.getType();\n        if (fieldType == DateTimeFieldType.monthOfYear() || fieldType == DateTimeFieldType.dayOfMonth()) {\n            monthOrDayPresent = true;\n        } else if (fieldType == DateTimeFieldType.year()) {\n            yearPresent = true;\n        }\n    }\n\n    if (monthOrDayPresent && !yearPresent) {\n        // If both a month and a day are present, and there is no year, try changing the local date to the default year\n        saveField(DateTimeFieldType.year(), iDefaultYear);\n        return computeMillis(resetFields, text);\n    } else {\n        // Otherwise, rethrow the exception\n        throw e;\n    }\n}\n\nif (count > 0) {\n    DurationField months = DurationFieldType.months().getField(iChrono);\n    DurationField days = DurationFieldType.days().getField(iChrono);\n    DurationField first = savedFields[0].iField.getDurationField();\n    if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n        saveField(DateTimeFieldType.year(), iDefaultYear);\n        return computeMillis(resetFields, text);\n    }\n\n    sort(savedFields, count);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..467bf48f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,48 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    boolean monthOrDayPresent = false;\n+    boolean yearPresent = false;\n+\n+    // Check if an illegal value is a month or day, and whether a year exists\n+    for (int i = 0; i < count; i++) {\n+        DateTimeFieldType fieldType = savedFields[i].iField.getType();\n+        if (fieldType == DateTimeFieldType.monthOfYear() || fieldType == DateTimeFieldType.dayOfMonth()) {\n+            monthOrDayPresent = true;\n+        } else if (fieldType == DateTimeFieldType.year()) {\n+            yearPresent = true;\n+        }\n+    }\n+\n+    if (monthOrDayPresent && !yearPresent) {\n+        // If both a month and a day are present, and there is no year, try changing the local date to the default year\n+        saveField(DateTimeFieldType.year(), iDefaultYear);\n+        return computeMillis(resetFields, text);\n+    } else {\n+        // Otherwise, rethrow the exception\n+        throw e;\n+    }\n+}\n+\n+if (count > 0) {\n+    DurationField months = DurationFieldType.months().getField(iChrono);\n+    DurationField days = DurationFieldType.days().getField(iChrono);\n+    DurationField first = savedFields[0].iField.getDurationField();\n+    if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+        saveField(DateTimeFieldType.year(), iDefaultYear);\n+        return computeMillis(resetFields, text);\n+    }\n+\n+    sort(savedFields, count);\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}