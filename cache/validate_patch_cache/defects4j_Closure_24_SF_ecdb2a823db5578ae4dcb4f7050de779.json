{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n.getParent();\n    if (parent != null && parent.isVar()) { // check if `n` is a variable declaration\n      Node grandparent = parent.getParent();\n      boolean isFunction = grandparent != null && grandparent.isFunction();\n      boolean isAlias = n.hasChildren() && n.getFirstChild().isQualifiedName();\n      if (isFunction && isAlias) { // check if `n` is an alias declaration within a function\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n        if (aliasVar != null && aliasVar.getInitialValue() != null && aliasVar.getInitialValue().isQualifiedName()) {\n          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n          aliases.put(name, aliasVar);\n          transformation.addAlias(name, qualifiedName);\n        }\n      } else if (isFunction && !isAlias) { // handle case when `n` is a local variable but not an alias within a function\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      } else if (!isFunction) { // handle case when `n` is a local variable declared outside a function\n        // if the outer scope is not the goog.scope function, then `n` is not in a valid goog.scope\n        // else check if `n` is an alias\n        if (!grandparent.isFunction() || !grandparent.getFirstChild().getString().equals(\"goog.scope\")) {\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        } else if (isAlias) {\n          String name = n.getString();\n          Var aliasVar = scope.getVar(name);\n          if (aliasVar != null && aliasVar.getInitialValue() != null && aliasVar.getInitialValue().isQualifiedName()) {\n            String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n            aliases.put(name, aliasVar);\n            transformation.addAlias(name, qualifiedName);\n          }\n        } else {\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..5e9c4b0a 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,45 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+    if (parent != null && parent.isVar()) { // check if `n` is a variable declaration\n+      Node grandparent = parent.getParent();\n+      boolean isFunction = grandparent != null && grandparent.isFunction();\n+      boolean isAlias = n.hasChildren() && n.getFirstChild().isQualifiedName();\n+      if (isFunction && isAlias) { // check if `n` is an alias declaration within a function\n+        String name = n.getString();\n+        Var aliasVar = scope.getVar(name);\n+        if (aliasVar != null && aliasVar.getInitialValue() != null && aliasVar.getInitialValue().isQualifiedName()) {\n+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n           aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n+        }\n+      } else if (isFunction && !isAlias) { // handle case when `n` is a local variable but not an alias within a function\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+      } else if (!isFunction) { // handle case when `n` is a local variable declared outside a function\n+        // if the outer scope is not the goog.scope function, then `n` is not in a valid goog.scope\n+        // else check if `n` is an alias\n+        if (!grandparent.isFunction() || !grandparent.getFirstChild().getString().equals(\"goog.scope\")) {\n+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        } else if (isAlias) {\n+          String name = n.getString();\n+          Var aliasVar = scope.getVar(name);\n+          if (aliasVar != null && aliasVar.getInitialValue() != null && aliasVar.getInitialValue().isQualifiedName()) {\n+            String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+            aliases.put(name, aliasVar);\n+            transformation.addAlias(name, qualifiedName);\n+          }\n         } else {\n-          // TODO(robbyw): Support using locals for private variables.\n           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n-        }\n       }\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_GOOG_SCOPE_NON_ALIAS_LOCAL. The local variable x is in a goog.scope and is not an alias. at testcode line 1 : 27 expected:<0> but was:<1>",
    "test_result": "FAIL"
}