{
    "patch": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n  \n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    \n    int totalMinutes = hoursOffset * 60 + minutesOffset;\n    \n    if (totalMinutes % 15 != 0) {\n        int remainder = totalMinutes % 15;\n        int roundUpMinutes, roundDownMinutes, roundUpMillis, roundDownMillis;\n        \n        if (remainder > 0) {\n            roundUpMinutes = totalMinutes + (15 - remainder);\n            roundDownMinutes = totalMinutes - remainder;\n        } else {\n            roundUpMinutes = totalMinutes - remainder;\n            roundDownMinutes = totalMinutes - (15 + remainder);\n        }\n        \n        roundUpMillis = roundUpMinutes * DateTimeConstants.MILLIS_PER_MINUTE;\n        roundDownMillis = roundDownMinutes * DateTimeConstants.MILLIS_PER_MINUTE;\n        \n        if (roundUpMillis > DateTimeConstants.MILLIS_PER_DAY || roundDownMillis < -DateTimeConstants.MILLIS_PER_DAY) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n        \n        int diffUpMillis = Math.abs(roundUpMillis - totalMinutes * DateTimeConstants.MILLIS_PER_MINUTE);\n        int diffDownMillis = Math.abs(roundDownMillis - totalMinutes * DateTimeConstants.MILLIS_PER_MINUTE);\n        \n        if (diffUpMillis <= diffDownMillis) {\n            return forOffsetMillis(roundUpMillis);\n        } else {\n            return forOffsetMillis(roundDownMillis);\n        }\n    } else {\n        int offsetMillis = totalMinutes * DateTimeConstants.MILLIS_PER_MINUTE;\n        if (offsetMillis >= DateTimeConstants.MILLIS_PER_DAY || offsetMillis <= -DateTimeConstants.MILLIS_PER_DAY) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n        return forOffsetMillis(offsetMillis);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 7d1719bc..56a69071 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -269,30 +269,55 @@ public abstract class DateTimeZone implements Serializable {\n      * @throws IllegalArgumentException if any value is out of range, the minutes are negative\n      *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000\n      */\n-    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n-        if (hoursOffset == 0 && minutesOffset == 0) {\n-            return DateTimeZone.UTC;\n+public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n+    if (hoursOffset < -23 || hoursOffset > 23) {\n+        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n+    }\n+    if (minutesOffset < -59 || minutesOffset > 59) {\n+        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n+    }\n+  \n+    if (hoursOffset == 0 && minutesOffset == 0) {\n+        return DateTimeZone.UTC;\n+    }\n+    \n+    int totalMinutes = hoursOffset * 60 + minutesOffset;\n+    \n+    if (totalMinutes % 15 != 0) {\n+        int remainder = totalMinutes % 15;\n+        int roundUpMinutes, roundDownMinutes, roundUpMillis, roundDownMillis;\n+        \n+        if (remainder > 0) {\n+            roundUpMinutes = totalMinutes + (15 - remainder);\n+            roundDownMinutes = totalMinutes - remainder;\n+        } else {\n+            roundUpMinutes = totalMinutes - remainder;\n+            roundDownMinutes = totalMinutes - (15 + remainder);\n         }\n-        if (hoursOffset < -23 || hoursOffset > 23) {\n-            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n+        \n+        roundUpMillis = roundUpMinutes * DateTimeConstants.MILLIS_PER_MINUTE;\n+        roundDownMillis = roundDownMinutes * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+        if (roundUpMillis > DateTimeConstants.MILLIS_PER_DAY || roundDownMillis < -DateTimeConstants.MILLIS_PER_DAY) {\n+            throw new IllegalArgumentException(\"Offset is too large\");\n         }\n-        if (minutesOffset < 0 || minutesOffset > 59) {\n-            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n+        \n+        int diffUpMillis = Math.abs(roundUpMillis - totalMinutes * DateTimeConstants.MILLIS_PER_MINUTE);\n+        int diffDownMillis = Math.abs(roundDownMillis - totalMinutes * DateTimeConstants.MILLIS_PER_MINUTE);\n+        \n+        if (diffUpMillis <= diffDownMillis) {\n+            return forOffsetMillis(roundUpMillis);\n+        } else {\n+            return forOffsetMillis(roundDownMillis);\n         }\n-        int offset = 0;\n-        try {\n-            int hoursInMinutes = hoursOffset * 60;\n-            if (hoursInMinutes < 0) {\n-                minutesOffset = hoursInMinutes - minutesOffset;\n-            } else {\n-                minutesOffset = hoursInMinutes + minutesOffset;\n-            }\n-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n-        } catch (ArithmeticException ex) {\n+    } else {\n+        int offsetMillis = totalMinutes * DateTimeConstants.MILLIS_PER_MINUTE;\n+        if (offsetMillis >= DateTimeConstants.MILLIS_PER_DAY || offsetMillis <= -DateTimeConstants.MILLIS_PER_DAY) {\n             throw new IllegalArgumentException(\"Offset is too large\");\n         }\n-        return forOffsetMillis(offset);\n+        return forOffsetMillis(offsetMillis);\n     }\n+}\n \n     /**\n      * Gets a time zone instance for the specified offset to UTC in milliseconds.",
    "result_reason": "java.lang.IllegalArgumentException: Millis out of range: 86400000",
    "test_result": "FAIL"
}