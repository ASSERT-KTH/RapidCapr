{
    "patch": "      while (argList.getLastChild() != null) {\n        Node lastArg = argList.getLastChild();\n        String argName = lastArg.getString();\n        Var var = fnScope.getVar(argName);\n        if (var == null) {\n          // Can happen in case of duplicated parameter names or if the var is defined in a\n          // parent scope but not explicitly declared, e.g. fn(inc, x){ return (inc ? x+1 : x-1);\n          return;\n        }\n        if (!var.isReferenced()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..12b8aaf8 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,16 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      while (argList.getLastChild() != null) {\n+        Node lastArg = argList.getLastChild();\n+        String argName = lastArg.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (var == null) {\n+          // Can happen in case of duplicated parameter names or if the var is defined in a\n+          // parent scope but not explicitly declared, e.g. fn(inc, x){ return (inc ? x+1 : x-1);\n+          return;\n+        }\n+        if (!var.isReferenced()) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}