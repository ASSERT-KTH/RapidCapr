{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    List<Node> arguments = call.children().toList();\n    arguments.remove(0); // remove the function name\n\n    List<Node> parameters = functionType.getParameters().toList();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean hasVarArgs = false;\n    while (parameters.size() > 0) {\n        if (arguments.size() == 0) {\n            if (parameters.stream().anyMatch(p -> !p.isOptionalArg())) {\n                // Not enough arguments, report an error.\n                report(t, call, WRONG_ARGUMENT_COUNT,\n                        validator.getReadableJSTypeName(call.getFirstChild(), false),\n                        String.valueOf(ordinal), String.format(\"Function requires at least %d argument(s) but only %d supplied.\", functionType.getMinArguments(), ordinal),\n                        \"\");\n                return;\n            }\n            break;\n        }\n        parameter = parameters.remove(0);\n        if (parameter.isVarArgs()) {\n            // Handle varargs.\n            hasVarArgs = true;\n            break;\n        }\n        argument = arguments.remove(0);\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    if (hasVarArgs) {\n        // Handle varargs.\n        JSType varArgType = functionType.getReturnType();\n        while (arguments.size() > 0) {\n            argument = arguments.remove(0);\n            ordinal++;\n            validator.expectArgumentMatchesParameter(t, argument,\n              getJSType(argument), varArgType, call, ordinal);\n        }\n    } else if (arguments.size() > 0) {\n        // Too many arguments, report an error.\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(ordinal), String.format(\"Function takes at most %d argument(s) but %d arguments(s) were supplied.\", functionType.getMaxArguments(), arguments.size()),\n                \"\");\n    } else if (parameters.stream().anyMatch(p -> !p.isOptionalArg())) {\n        while (parameters.size() > 0) {\n            parameter = parameters.remove(0);\n            if (parameter.isOptionalArg()) {\n                continue;\n            } else {\n                // Optional parameter not filled in; report an error.\n                report(t, call, WRONG_ARGUMENT_COUNT,\n                        validator.getReadableJSTypeName(call.getFirstChild(), false),\n                        String.format(\"Function requires at least %d argument(s)\", functionType.getMinArguments()),\n                        String.format(\"Missing required argument %s at position %d\", parameter.getString(), ordinal + 1),\n                        \"\");\n                return;\n            }\n        }\n        // Not enough arguments, report an error.\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(ordinal), String.format(\"Function requires at least %d argument(s) but only %d supplied.\", functionType.getMinArguments(), ordinal),\n                \"\");\n    } else {\n        int numArgs = ordinal;\n        int minArgs = functionType.getMinArguments();\n        int maxArgs = functionType.getMaxArguments();\n        if (numArgs < minArgs || (maxArgs != -1 && numArgs > maxArgs)) {\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n                    String.valueOf(numArgs),\n                    String.format(\"Function requires between %d and %d argument(s)\", minArgs,\n                                  maxArgs == -1 ? Integer.MAX_VALUE : maxArgs),\n                    \"\");\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..566b4b91 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,89 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n+    List<Node> arguments = call.children().toList();\n+    arguments.remove(0); // remove the function name\n \n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n+    List<Node> parameters = functionType.getParameters().toList();\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n+    boolean hasVarArgs = false;\n+    while (parameters.size() > 0) {\n+        if (arguments.size() == 0) {\n+            if (parameters.stream().anyMatch(p -> !p.isOptionalArg())) {\n+                // Not enough arguments, report an error.\n+                report(t, call, WRONG_ARGUMENT_COUNT,\n+                        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                        String.valueOf(ordinal), String.format(\"Function requires at least %d argument(s) but only %d supplied.\", functionType.getMinArguments(), ordinal),\n+                        \"\");\n+                return;\n+            }\n+            break;\n+        }\n+        parameter = parameters.remove(0);\n+        if (parameter.isVarArgs()) {\n+            // Handle varargs.\n+            hasVarArgs = true;\n+            break;\n+        }\n+        argument = arguments.remove(0);\n+        ordinal++;\n+        validator.expectArgumentMatchesParameter(t, argument,\n           getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (hasVarArgs) {\n+        // Handle varargs.\n+        JSType varArgType = functionType.getReturnType();\n+        while (arguments.size() > 0) {\n+            argument = arguments.remove(0);\n+            ordinal++;\n+            validator.expectArgumentMatchesParameter(t, argument,\n+              getJSType(argument), varArgType, call, ordinal);\n+        }\n+    } else if (arguments.size() > 0) {\n+        // Too many arguments, report an error.\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(ordinal), String.format(\"Function takes at most %d argument(s) but %d arguments(s) were supplied.\", functionType.getMaxArguments(), arguments.size()),\n+                \"\");\n+    } else if (parameters.stream().anyMatch(p -> !p.isOptionalArg())) {\n+        while (parameters.size() > 0) {\n+            parameter = parameters.remove(0);\n+            if (parameter.isOptionalArg()) {\n+                continue;\n+            } else {\n+                // Optional parameter not filled in; report an error.\n+                report(t, call, WRONG_ARGUMENT_COUNT,\n+                        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                        String.format(\"Function requires at least %d argument(s)\", functionType.getMinArguments()),\n+                        String.format(\"Missing required argument %s at position %d\", parameter.getString(), ordinal + 1),\n+                        \"\");\n+                return;\n+            }\n+        }\n+        // Not enough arguments, report an error.\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(ordinal), String.format(\"Function requires at least %d argument(s) but only %d supplied.\", functionType.getMinArguments(), ordinal),\n+                \"\");\n+    } else {\n+        int numArgs = ordinal;\n+        int minArgs = functionType.getMinArguments();\n+        int maxArgs = functionType.getMaxArguments();\n+        if (numArgs < minArgs || (maxArgs != -1 && numArgs > maxArgs)) {\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                    String.valueOf(numArgs),\n+                    String.format(\"Function requires between %d and %d argument(s)\", minArgs,\n+                                  maxArgs == -1 ? Integer.MAX_VALUE : maxArgs),\n+                    \"\");\n+        }\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}