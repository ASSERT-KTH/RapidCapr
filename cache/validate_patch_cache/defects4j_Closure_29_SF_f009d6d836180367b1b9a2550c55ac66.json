{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  // Loop through each reference and check if it's an acceptable object\n  // literal assignment.\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Ignore indirect references, like x.y (except x.y(), since\n    // the function referenced by y might reference 'this').\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        // This is a call like x.y(). Ignore this.\n        continue;\n      }\n\n      // NOTE(nicksantos): This pass's object-splitting algorithm has\n      // a blind spot. It assumes that if a property isn't defined on an\n      // object, then the value is undefined. This is not true, because\n      // Object.prototype can have arbitrary properties on it.\n      //\n      // We short-circuit this problem by bailing out if we see a reference\n      // to a property that isn't defined on the object literal. This\n      // isn't a perfect algorithm, but it should catch most cases.\n      continue;\n    }\n\n    // Only rewrite VAR declarations or simple assignment statements\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      // A var with no assignment.\n      continue;\n    }\n\n    int numObjLits = countObjectLiterals(val);\n    if (numObjLits == 1) {\n      // We have found an acceptable object literal assignment. Check if all\n      // its properties can be inlined.\n      if (canInlineProperties(val.getFirstChild())) {\n        ret = true;\n      } else {\n        // If any properties can't be inlined, then we cannot inline this\n        // object literal.\n        return false;\n      }\n    } else if (numObjLits > 1) {\n      // This is a compound object literal. We cannot inline object literals\n      // inside compound object literals.\n      return false;\n    }\n  }\n\n  return ret;\n}\n\nprivate int countObjectLiterals(Node node) {\n  int count = 0;\n  for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n    if (child.isObjectLit()) {\n      count++;\n    } else if (child.isFunction()) {\n      // A function literal. We cannot inline object literals inside function\n      // definitions.\n      return -1;\n    } else {\n      int nestedCount = countObjectLiterals(child);\n      if (nestedCount == -1) {\n        return -1;\n      }\n      count += nestedCount;\n    }\n  }\n  return count;\n}\n\nprivate boolean canInlineProperties(Node node) {\n  for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n    if (child.isComputedProp()) {\n      // A computed property. We don't know the name of the property at\n      // compile-time, so we cannot inline it.\n      return false;\n    } else if (child.isGetterDef() || child.isSetterDef()) {\n      // A getter/setter definition. We cannot inline object literals inside\n      // function definitions.\n      return false;\n    } else if (child.isStringKey()) {\n      if (child.hasChildren()) {\n        // Check if we can inline the value of the property.\n        if (!canInlineValue(child.getFirstChild())) {\n          return false;\n        }\n      }\n    } else if (child.isSpread()) {\n      // A spread operator. We cannot inline object literals with spread\n      // operators.\n      return false;\n    } else {\n      // Unhandled node type.\n      return false;\n    }\n  }\n  return true;\n}\n\nprivate boolean canInlineValue(Node node) {\n  if (node.isObjectLit()) {\n    // Recurse into object literals.\n    return canInlineProperties(node);\n  } else if (node.isString()) {\n    // A string literal. We can inline this.\n    return true;\n  } else if (node.isNumber()) {\n    // A number literal. We can inline this.\n    return true;\n  } else if (node.isBoolean()) {\n    // A boolean literal. We can inline this.\n    return true;\n  } else if (node.isNull()) {\n    // A null literal. We can inline this.\n    return true;\n  } else if (node.isName()) {\n    // A variable reference. We cannot inline this.\n    return false;\n  } else {\n    // Unhandled node type.\n    return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..776df1dc 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,92 +152,141 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n+private boolean isInlinableObject(List<Reference> refs) {\n+  boolean ret = false;\n+  // Loop through each reference and check if it's an acceptable object\n+  // literal assignment.\n+  for (Reference ref : refs) {\n+    Node name = ref.getNode();\n+    Node parent = ref.getParent();\n+    Node gramps = ref.getGrandparent();\n+\n+    // Ignore indirect references, like x.y (except x.y(), since\n+    // the function referenced by y might reference 'this').\n+    if (parent.isGetProp()) {\n+      Preconditions.checkState(parent.getFirstChild() == name);\n+\n+      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n+        // This is a call like x.y(). Ignore this.\n+        continue;\n+      }\n \n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n-        }\n+      // NOTE(nicksantos): This pass's object-splitting algorithm has\n+      // a blind spot. It assumes that if a property isn't defined on an\n+      // object, then the value is undefined. This is not true, because\n+      // Object.prototype can have arbitrary properties on it.\n+      //\n+      // We short-circuit this problem by bailing out if we see a reference\n+      // to a property that isn't defined on the object literal. This\n+      // isn't a perfect algorithm, but it should catch most cases.\n+      continue;\n+    }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n+    // Only rewrite VAR declarations or simple assignment statements\n+    if (!isVarOrAssignExprLhs(name)) {\n+      return false;\n+    }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n-        }\n+    Node val = ref.getAssignedValue();\n+    if (val == null) {\n+      // A var with no assignment.\n+      continue;\n+    }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n-        }\n+    int numObjLits = countObjectLiterals(val);\n+    if (numObjLits == 1) {\n+      // We have found an acceptable object literal assignment. Check if all\n+      // its properties can be inlined.\n+      if (canInlineProperties(val.getFirstChild())) {\n+        ret = true;\n+      } else {\n+        // If any properties can't be inlined, then we cannot inline this\n+        // object literal.\n+        return false;\n+      }\n+    } else if (numObjLits > 1) {\n+      // This is a compound object literal. We cannot inline object literals\n+      // inside compound object literals.\n+      return false;\n+    }\n+  }\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n+  return ret;\n+}\n \n+private int countObjectLiterals(Node node) {\n+  int count = 0;\n+  for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n+    if (child.isObjectLit()) {\n+      count++;\n+    } else if (child.isFunction()) {\n+      // A function literal. We cannot inline object literals inside function\n+      // definitions.\n+      return -1;\n+    } else {\n+      int nestedCount = countObjectLiterals(child);\n+      if (nestedCount == -1) {\n+        return -1;\n+      }\n+      count += nestedCount;\n+    }\n+  }\n+  return count;\n+}\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n-          }\n+private boolean canInlineProperties(Node node) {\n+  for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n+    if (child.isComputedProp()) {\n+      // A computed property. We don't know the name of the property at\n+      // compile-time, so we cannot inline it.\n+      return false;\n+    } else if (child.isGetterDef() || child.isSetterDef()) {\n+      // A getter/setter definition. We cannot inline object literals inside\n+      // function definitions.\n+      return false;\n+    } else if (child.isStringKey()) {\n+      if (child.hasChildren()) {\n+        // Check if we can inline the value of the property.\n+        if (!canInlineValue(child.getFirstChild())) {\n+          return false;\n         }\n-\n-\n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n       }\n-      return ret;\n+    } else if (child.isSpread()) {\n+      // A spread operator. We cannot inline object literals with spread\n+      // operators.\n+      return false;\n+    } else {\n+      // Unhandled node type.\n+      return false;\n     }\n+  }\n+  return true;\n+}\n+\n+private boolean canInlineValue(Node node) {\n+  if (node.isObjectLit()) {\n+    // Recurse into object literals.\n+    return canInlineProperties(node);\n+  } else if (node.isString()) {\n+    // A string literal. We can inline this.\n+    return true;\n+  } else if (node.isNumber()) {\n+    // A number literal. We can inline this.\n+    return true;\n+  } else if (node.isBoolean()) {\n+    // A boolean literal. We can inline this.\n+    return true;\n+  } else if (node.isNull()) {\n+    // A null literal. We can inline this.\n+    return true;\n+  } else if (node.isName()) {\n+    // A variable reference. We cannot inline this.\n+    return false;\n+  } else {\n+    // Unhandled node type.\n+    return false;\n+  }\n+}\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}