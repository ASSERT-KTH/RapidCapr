{
    "patch": "public static double getTypedPercent(List<JSONObject> list) {\n    int total = list.size();\n    int count = 0;\n\n    for (JSONObject obj : list) {\n        String type = obj.getString(\"type\");\n        if (type != null && !type.isEmpty()) {\n            count++;\n        }\n    }\n\n    return (count * 100.0) / total;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..2a92389c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(List<JSONObject> list) {\n+    int total = list.size();\n+    int count = 0;\n+\n+    for (JSONObject obj : list) {\n+        String type = obj.getString(\"type\");\n+        if (type != null && !type.isEmpty()) {\n+            count++;\n+        }\n+    }\n+\n+    return (count * 100.0) / total;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}