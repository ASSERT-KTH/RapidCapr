{
    "patch": "public int getYears() {\n    if (iWeeks == 0) {\n        return 0;\n    }\n\n    ISOChronology chron = ISOChronology.getInstanceUTC();\n    long firstMondayMillis = chron.weeks().getFirstDayMillis(iWeeks);\n    int firstMondayYear = chron.year().get(firstMondayMillis);\n    return chron.year().getDifference(firstMondayYear, firstMondayMillis, iWeeks * ((long) getDays())) > 0 ? 1 : 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..8c727865 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,11 +218,17 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+public int getYears() {\n+    if (iWeeks == 0) {\n+        return 0;\n     }\n \n+    ISOChronology chron = ISOChronology.getInstanceUTC();\n+    long firstMondayMillis = chron.weeks().getFirstDayMillis(iWeeks);\n+    int firstMondayYear = chron.year().get(firstMondayMillis);\n+    return chron.year().getDifference(firstMondayYear, firstMondayMillis, iWeeks * ((long) getDays())) > 0 ? 1 : 0;\n+}\n+\n     /**\n      * Creates a period from the given millisecond duration, which is only really\n      * suitable for durations less than one day.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}