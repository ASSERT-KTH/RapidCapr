{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = resolveViaRegistry(t, enclosing);\n\n    resolveViaProperties(t, enclosing);\n    if (!resolved && !isResolved()) {\n      // When the registry resolution fails and property resolution also fails, assign a\n      // dummy type to avoid a crash. This happens when somebody references something that doesn't\n      // exist on a global object. The error will have already been reported.\n      JSTypeRegistry registry = this.getRegistry();\n      if (registry instanceof TypedScopeCreator.FunctionAndBlockScopeReferenceRegistry) {\n        TypedScopeCreator.FunctionAndBlockScopeReferenceRegistry refRegistry =\n            (TypedScopeCreator.FunctionAndBlockScopeReferenceRegistry) registry;\n        if (refRegistry.failForReferenceResolution()) {\n          return JSType.UNKNOWN;\n        }\n      }\n    }\n\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..fb73379a 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,23 +182,23 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n     boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    resolveViaProperties(t, enclosing);\n+    if (!resolved && !isResolved()) {\n+      // When the registry resolution fails and property resolution also fails, assign a\n+      // dummy type to avoid a crash. This happens when somebody references something that doesn't\n+      // exist on a global object. The error will have already been reported.\n+      JSTypeRegistry registry = this.getRegistry();\n+      if (registry instanceof TypedScopeCreator.FunctionAndBlockScopeReferenceRegistry) {\n+        TypedScopeCreator.FunctionAndBlockScopeReferenceRegistry refRegistry =\n+            (TypedScopeCreator.FunctionAndBlockScopeReferenceRegistry) registry;\n+        if (refRegistry.failForReferenceResolution()) {\n+          return JSType.UNKNOWN;\n+        }\n+      }\n     }\n \n-    resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}