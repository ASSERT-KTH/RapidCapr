{
    "patch": "        int lastHold = start;\n        boolean isQuoted = false;\n        if (escapingOn && c[start] == QUOTE) {\n            isQuoted = true;\n            next(pos);\n        }\n        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n            if (isQuoted) {\n                isQuoted = false;\n                switch (c[pos.getIndex()]) {\n                    case QUOTE:\n                        next(pos);\n                        return appendTo == null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n                    default:\n                        break;\n                }\n            } else if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n                        QUOTE);\n                pos.setIndex(i + ESCAPED_QUOTE.length());\n                lastHold = pos.getIndex();\n                isQuoted = true;\n                continue;\n            } else if (c[pos.getIndex()] == QUOTE) {\n                isQuoted = true;\n                next(pos);\n                continue;\n            }\n            next(pos);\n        }\n        if (isQuoted) {\n            throw new IllegalArgumentException(\n                    \"Unterminated quoted string at position \" + start);\n        }\n        return appendTo == null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..a1ac1c18 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -419,6 +419,41 @@ public class ExtendedMessageFormat extends MessageFormat {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n+        int lastHold = start;\n+        boolean isQuoted = false;\n+        if (escapingOn && c[start] == QUOTE) {\n+            isQuoted = true;\n+            next(pos);\n+        }\n+        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n+            if (isQuoted) {\n+                isQuoted = false;\n+                switch (c[pos.getIndex()]) {\n+                    case QUOTE:\n+                        next(pos);\n+                        return appendTo == null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n+                    default:\n+                        break;\n+                }\n+            } else if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n+                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n+                        QUOTE);\n+                pos.setIndex(i + ESCAPED_QUOTE.length());\n+                lastHold = pos.getIndex();\n+                isQuoted = true;\n+                continue;\n+            } else if (c[pos.getIndex()] == QUOTE) {\n+                isQuoted = true;\n+                next(pos);\n+                continue;\n+            }\n+            next(pos);\n+        }\n+        if (isQuoted) {\n+            throw new IllegalArgumentException(\n+                    \"Unterminated quoted string at position \" + start);\n+        }\n+        return appendTo == null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}