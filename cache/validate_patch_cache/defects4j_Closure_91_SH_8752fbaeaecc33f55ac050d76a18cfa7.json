{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n        JSDocInfo jsDoc = getJSDocInfo(n);\n\n        // Check if the function is being assigned to a prototype property or subproperty\n        if (NodeUtil.isGet(lhs)) {\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n            // Skip traversal for constructor functions and functions with @this or @override annotation\n            if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() ||\n                jsDoc.isOverride())) {\n              return false;\n            }\n\n            // Traverse up the parent chain to check for other nested assignments\n            while (parent != null && parent.getType() == Token.ASSIGN) {\n              lhs = parent.getFirstChild();\n              if (NodeUtil.isGet(lhs)) {\n                llhs = lhs.getFirstChild();\n                if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n                  parent = parent.getParent();\n                  continue;\n                }\n              }\n              break;\n            }\n\n            // Skip traversal for prototype functions being assigned to a non-object (e.g., a number or a string)\n            if (parent != null && !NodeUtil.isObject(parent.getLastChild())) {\n              return false;\n            }\n\n            // Only traverse functions being assigned to object literals or subproperties\n            if (parent != null && NodeUtil.isObject(parent.getLastChild()) && (lhs == llhs || !rhssContainFunction(rhs))) {\n              return true;\n            } else if (parent.getParent() != null && NodeUtil.isObject(parent.getParent().getLastChild()) &&\n                NodeUtil.isGet(parent) && lhs == parent.getFirstChild() &&\n                NodeUtil.isObject(parent.getParent().getLastChild().getFirstChild())) {\n              return true;\n            } else {\n              return false;\n            }\n          }\n        }\n\n        if (NodeUtil.isFunctionExpression(n)) {\n          // Only traverse function expressions that are assigned to an object property\n          return NodeUtil.isGet(lhs);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..5d721fd8 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,58 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        JSDocInfo jsDoc = getJSDocInfo(n);\n+\n+        // Check if the function is being assigned to a prototype property or subproperty\n+        if (NodeUtil.isGet(lhs)) {\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n+            // Skip traversal for constructor functions and functions with @this or @override annotation\n+            if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() ||\n+                jsDoc.isOverride())) {\n+              return false;\n+            }\n+\n+            // Traverse up the parent chain to check for other nested assignments\n+            while (parent != null && parent.getType() == Token.ASSIGN) {\n+              lhs = parent.getFirstChild();\n+              if (NodeUtil.isGet(lhs)) {\n+                llhs = lhs.getFirstChild();\n+                if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n+                  parent = parent.getParent();\n+                  continue;\n+                }\n+              }\n+              break;\n+            }\n+\n+            // Skip traversal for prototype functions being assigned to a non-object (e.g., a number or a string)\n+            if (parent != null && !NodeUtil.isObject(parent.getLastChild())) {\n+              return false;\n+            }\n+\n+            // Only traverse functions being assigned to object literals or subproperties\n+            if (parent != null && NodeUtil.isObject(parent.getLastChild()) && (lhs == llhs || !rhssContainFunction(rhs))) {\n+              return true;\n+            } else if (parent.getParent() != null && NodeUtil.isObject(parent.getParent().getLastChild()) &&\n+                NodeUtil.isGet(parent) && lhs == parent.getFirstChild() &&\n+                NodeUtil.isObject(parent.getParent().getLastChild().getFirstChild())) {\n+              return true;\n+            } else {\n+              return false;\n+            }\n+          }\n+        }\n+\n+        if (NodeUtil.isFunctionExpression(n)) {\n+          // Only traverse function expressions that are assigned to an object property\n+          return NodeUtil.isGet(lhs);\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: variable jsDoc is already defined in method shouldTraverse(NodeTraversal,Node,Node)",
    "test_result": "ERROR"
}