{
    "patch": "public static String unescape(String input) {\n    StringBuilder output = new StringBuilder();\n\n    int i = 0;\n    while (i < input.length()) {\n        char c = input.charAt(i);\n\n        if (c == '%') {\n\n            if ((i + 1 < input.length()) && (i + 2 < input.length())) {\n                char hi = input.charAt(i + 1);\n                char lo = input.charAt(i + 2);\n\n                if (isHexDigit(hi) && isHexDigit(lo)) {\n\n                    int value = digit16(hi) * 16 + digit16(lo);\n                    output.append((char)value);\n\n                    i += 3;\n                    continue;\n                }\n            }\n\n            output.append('%');\n            i++;\n            continue;\n\n        } else if (c == '+') {\n            output.append(' ');\n            i++;\n            continue;\n        }\n\n        output.append(c);\n        i++;\n    }\n\n    return output.toString();\n}\n\nprivate static boolean isHexDigit(char c) {\n    return (((c >= '0') && (c <= '9')) ||\n            ((c >= 'a') && (c <= 'f')) ||\n            ((c >= 'A') && (c <= 'F')));\n}\n\nprivate static int digit16(char c) {\n    if ((c >= '0') && (c <= '9'))\n        return c - '0';\n    if ((c >= 'a') && (c <= 'f'))\n        return c - 'a' + 10;\n    if ((c >= 'A') && (c <= 'F'))\n        return c - 'A' + 10;\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..4ffe29fe 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,61 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String input) {\n+    StringBuilder output = new StringBuilder();\n+\n+    int i = 0;\n+    while (i < input.length()) {\n+        char c = input.charAt(i);\n+\n+        if (c == '%') {\n+\n+            if ((i + 1 < input.length()) && (i + 2 < input.length())) {\n+                char hi = input.charAt(i + 1);\n+                char lo = input.charAt(i + 2);\n+\n+                if (isHexDigit(hi) && isHexDigit(lo)) {\n+\n+                    int value = digit16(hi) * 16 + digit16(lo);\n+                    output.append((char)value);\n+\n+                    i += 3;\n+                    continue;\n+                }\n+            }\n+\n+            output.append('%');\n+            i++;\n+            continue;\n+\n+        } else if (c == '+') {\n+            output.append(' ');\n+            i++;\n+            continue;\n+        }\n+\n+        output.append(c);\n+        i++;\n+    }\n+\n+    return output.toString();\n+}\n+\n+private static boolean isHexDigit(char c) {\n+    return (((c >= '0') && (c <= '9')) ||\n+            ((c >= 'a') && (c <= 'f')) ||\n+            ((c >= 'A') && (c <= 'F')));\n+}\n+\n+private static int digit16(char c) {\n+    if ((c >= '0') && (c <= '9'))\n+        return c - '0';\n+    if ((c >= 'a') && (c <= 'f'))\n+        return c - 'a' + 10;\n+    if ((c >= 'A') && (c <= 'F'))\n+        return c - 'A' + 10;\n+    return 0;\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}