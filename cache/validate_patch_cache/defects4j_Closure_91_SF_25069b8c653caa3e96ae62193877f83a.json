{
    "patch": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    if (n.getType() == Token.FUNCTION) {\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. \n      // e.g., var a = function() { }; // or function a() {} // or \n      // a.x = function() {}; // or var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            pType == Token.VAR ||\n            pType == Token.FOR ||\n            pType == Token.IF ||\n            pType == Token.CATCH ||\n            \n            // object literal keys\n            (pType == Token.STRING &&\n             parent.getParent().getType() == Token.OBJECTLIT) ||\n            (pType == Token.LB &&\n             parent.getParent().getType() == Token.OBJECTLIT))) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n        if (n == lhs &&\n            (parent.getParent().getType() == Token.EXPR_RESULT ||\n             parent.getParent().getType() == Token.VAR)) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n        } else if (!NodeUtil.isObjectLitKey(parent, lhs)) {\n          if (NodeUtil.isPrototypeProperty(lhs)) {\n            return false;\n          }\n          if (!(rhs == n && NodeUtil.isObjectLitKey(parent, lhs))) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..fa6f6ed1 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -80,68 +80,59 @@ final class CheckGlobalThis implements Callback {\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+    // Don't traverse functions that are constructors or have the @this\n+    // or @override annotation.\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n       JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n         return false;\n       }\n \n       // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n+      // be able to have a @this annotation associated with them. \n+      // e.g., var a = function() { }; // or function a() {} // or \n+      // a.x = function() {}; // or var a = {x: function() {}};\n       int pType = parent.getType();\n       if (!(pType == Token.BLOCK ||\n             pType == Token.SCRIPT ||\n             pType == Token.NAME ||\n             pType == Token.ASSIGN ||\n-\n+            pType == Token.VAR ||\n+            pType == Token.FOR ||\n+            pType == Token.IF ||\n+            pType == Token.CATCH ||\n+            \n             // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+            (pType == Token.STRING &&\n+             parent.getParent().getType() == Token.OBJECTLIT) ||\n+            (pType == Token.LB &&\n+             parent.getParent().getType() == Token.OBJECTLIT))) {\n         return false;\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        if (n == lhs &&\n+            (parent.getParent().getType() == Token.EXPR_RESULT ||\n+             parent.getParent().getType() == Token.VAR)) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+        } else if (!NodeUtil.isObjectLitKey(parent, lhs)) {\n+          if (NodeUtil.isPrototypeProperty(lhs)) {\n             return false;\n           }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n+          if (!(rhs == n && NodeUtil.isObjectLitKey(parent, lhs))) {\n             return false;\n           }\n         }\n       }\n     }\n-\n     return true;\n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}