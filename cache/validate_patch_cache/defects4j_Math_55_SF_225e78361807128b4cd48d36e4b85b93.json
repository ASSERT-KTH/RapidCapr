{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    final double absX1 = FastMath.abs(v1.getX());\n    final double absY1 = FastMath.abs(v1.getY());\n    final double absZ1 = FastMath.abs(v1.getZ());\n    final double absX2 = FastMath.abs(v2.getX());\n    final double absY2 = FastMath.abs(v2.getY());\n    final double absZ2 = FastMath.abs(v2.getZ());\n\n    // compute pairwise products\n    final double xx = absY1 * absZ2 - absZ1 * absY2;\n    final double yy = absZ1 * absX2 - absX1 * absZ2;\n    final double zz = absX1 * absY2 - absY1 * absX2;\n\n    final double max = FastMath.max(FastMath.max(FastMath.max(absX1, absY1), absZ1),\n                                    FastMath.max(FastMath.max(absX2, absY2), absZ2));\n    final double norm = FastMath.sqrt(xx * xx + yy * yy + zz * zz);\n    if (max < 1.e-15 * norm) {\n        // the cross product is too small to be accurately computed using\n        // non-zero elements of p1 and/or p2, use a default\n        return new Vector3D();\n    }\n\n    double x = xx;\n    double y = yy;\n    double z = zz;\n    if (norm > max * 1.e-8) {\n        // normalize only if the result will not be too small\n        final double invNorm = 1.0 / norm;\n        x *= invNorm;\n        y *= invNorm;\n        z *= invNorm;\n    }\n\n    if ((v1.getX() ^ v2.getX()) < 0.0) {\n        x = -x;\n    }\n    if ((v1.getY() ^ v2.getY()) < 0.0) {\n        y = -y;\n    }\n    if ((v1.getZ() ^ v2.getZ()) < 0.0) {\n        z = -z;\n    }\n\n    return new Vector3D(x, y, z);\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..53ad3606b 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,53 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    final double absX1 = FastMath.abs(v1.getX());\n+    final double absY1 = FastMath.abs(v1.getY());\n+    final double absZ1 = FastMath.abs(v1.getZ());\n+    final double absX2 = FastMath.abs(v2.getX());\n+    final double absY2 = FastMath.abs(v2.getY());\n+    final double absZ2 = FastMath.abs(v2.getZ());\n+\n+    // compute pairwise products\n+    final double xx = absY1 * absZ2 - absZ1 * absY2;\n+    final double yy = absZ1 * absX2 - absX1 * absZ2;\n+    final double zz = absX1 * absY2 - absY1 * absX2;\n+\n+    final double max = FastMath.max(FastMath.max(FastMath.max(absX1, absY1), absZ1),\n+                                    FastMath.max(FastMath.max(absX2, absY2), absZ2));\n+    final double norm = FastMath.sqrt(xx * xx + yy * yy + zz * zz);\n+    if (max < 1.e-15 * norm) {\n+        // the cross product is too small to be accurately computed using\n+        // non-zero elements of p1 and/or p2, use a default\n+        return new Vector3D();\n+    }\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    double x = xx;\n+    double y = yy;\n+    double z = zz;\n+    if (norm > max * 1.e-8) {\n+        // normalize only if the result will not be too small\n+        final double invNorm = 1.0 / norm;\n+        x *= invNorm;\n+        y *= invNorm;\n+        z *= invNorm;\n+    }\n \n+    if ((v1.getX() ^ v2.getX()) < 0.0) {\n+        x = -x;\n+    }\n+    if ((v1.getY() ^ v2.getY()) < 0.0) {\n+        y = -y;\n+    }\n+    if ((v1.getZ() ^ v2.getZ()) < 0.0) {\n+        z = -z;\n+    }\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    return new Vector3D(x, y, z);\n \n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: no suitable constructor found for Vector3D()",
    "test_result": "ERROR"
}