{
    "patch": "public static ReturnValue values(int[] array) {\n    if (array == null || array.length == 0) {\n        return new ReturnValue(0, \"\", \"\");\n    }\n    int min = Integer.MAX_VALUE;\n    int max = Integer.MIN_VALUE;\n    long sum = 0;\n    for (int i = 0; i < array.length; i++) {\n        int num = array[i];\n        if (num < min) {\n            min = num;\n        }\n        if (num > max) {\n            max = num;\n        }\n        sum += num;\n    }\n    double avg = (double) sum / array.length;\n    return new ReturnValue(avg, Integer.toString(min), Integer.toString(max));\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..bcc81d6a0 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,26 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static ReturnValue values(int[] array) {\n+    if (array == null || array.length == 0) {\n+        return new ReturnValue(0, \"\", \"\");\n+    }\n+    int min = Integer.MAX_VALUE;\n+    int max = Integer.MIN_VALUE;\n+    long sum = 0;\n+    for (int i = 0; i < array.length; i++) {\n+        int num = array[i];\n+        if (num < min) {\n+            min = num;\n+        }\n+        if (num > max) {\n+            max = num;\n+        }\n+        sum += num;\n+    }\n+    double avg = (double) sum / array.length;\n+    return new ReturnValue(avg, Integer.toString(min), Integer.toString(max));\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}