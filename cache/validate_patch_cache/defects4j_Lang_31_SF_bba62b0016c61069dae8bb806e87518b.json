{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (str == null || searchChars == null) {\n        return false;\n    }\n    int strLen = str.length();\n    int strLast = strLen - 1;\n    int searchLen = searchChars.length;\n    int searchLast = searchLen - 1;\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (contains(ch, searchChars)) {\n            return true;\n        }\n        if (i < strLast && Character.isHighSurrogate(ch)) {\n            char ch2 = str.charAt(i + 1);\n            if (Character.isLowSurrogate(ch2) && contains(Character.toCodePoint(ch, ch2), searchChars)) {\n                return true;\n            }\n        }\n    }\n    for (int i = 0; i < searchLen; i++) {\n        char ch = searchChars[i];\n        if (Character.isHighSurrogate(ch)) {\n            if (i < searchLast) {\n                char ch2 = searchChars[i + 1];\n                if (Character.isLowSurrogate(ch2)) {\n                    int codePoint = Character.toCodePoint(ch, ch2);\n                    if (!Character.isBmpCodePoint(codePoint)) {\n                        throw new IllegalArgumentException(\"Invalid unicode character: \" + codePoint);\n                    }\n                }\n            } else {\n                throw new IllegalArgumentException(\"Invalid unicode character: \" + ch);\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean contains(final char ch, final char[] searchChars) {\n    for (final char searchChar : searchChars) {\n        if (searchChar == ch) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..70977105 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,53 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (str == null || searchChars == null) {\n+        return false;\n+    }\n+    int strLen = str.length();\n+    int strLast = strLen - 1;\n+    int searchLen = searchChars.length;\n+    int searchLast = searchLen - 1;\n+    for (int i = 0; i < strLen; i++) {\n+        char ch = str.charAt(i);\n+        if (contains(ch, searchChars)) {\n+            return true;\n+        }\n+        if (i < strLast && Character.isHighSurrogate(ch)) {\n+            char ch2 = str.charAt(i + 1);\n+            if (Character.isLowSurrogate(ch2) && contains(Character.toCodePoint(ch, ch2), searchChars)) {\n+                return true;\n+            }\n+        }\n+    }\n+    for (int i = 0; i < searchLen; i++) {\n+        char ch = searchChars[i];\n+        if (Character.isHighSurrogate(ch)) {\n+            if (i < searchLast) {\n+                char ch2 = searchChars[i + 1];\n+                if (Character.isLowSurrogate(ch2)) {\n+                    int codePoint = Character.toCodePoint(ch, ch2);\n+                    if (!Character.isBmpCodePoint(codePoint)) {\n+                        throw new IllegalArgumentException(\"Invalid unicode character: \" + codePoint);\n+                    }\n+                }\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid unicode character: \" + ch);\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean contains(final char ch, final char[] searchChars) {\n+    for (final char searchChar : searchChars) {\n+        if (searchChar == ch) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}