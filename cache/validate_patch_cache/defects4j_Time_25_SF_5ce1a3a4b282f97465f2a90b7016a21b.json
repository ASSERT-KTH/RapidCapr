{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Sanity check: ensure given instant is valid\n    if (!DateTimeUtils.isContiguous(instantLocal)) {\n        throw new IllegalArgumentException(\"Instant is invalid due to time zone offset transition: \" + new DateTime(instantLocal));\n    }\n\n    // Initial offset at the given instant\n    final int initialOffset = getOffset(instantLocal);\n\n    // Check for a gap in the local time-line\n    if (isInDaylightSavingGap(instantLocal)) {\n        // Get the next transition after the gap ends\n        final long endOfGapInstant = nextTransition(instantLocal);\n        // Get the offset at the end of the gap (which equals the later offset)\n        final int endOfGapOffset = getOffset(endOfGapInstant);\n        return endOfGapOffset;\n    }\n\n    // Check for an overlap in the local time-line\n    if (isInDaylightSavingOverlap(instantLocal)) {\n        // Get the previous transition before the overlap starts\n        final long startOfOverlapInstant = previousTransition(instantLocal);\n        // Get the offset at the start of the overlap (which equals the earlier offset)\n        final int startOfOverlapOffset = getOffset(startOfOverlapInstant);\n        return startOfOverlapOffset;\n    }\n\n    // Find the next transition after the given instant\n    final long nextTransitionInstant = nextTransition(instantLocal);\n    final int nextOffset = getOffset(nextTransitionInstant);\n    if (nextOffset > initialOffset) {\n        return nextOffset;\n    }\n\n    // Find the previous transition before the given instant\n    final long prevTransitionInstant = previousTransition(instantLocal);\n    final int prevOffset = getOffset(prevTransitionInstant);\n    if (prevOffset < initialOffset) {\n        return prevOffset;\n    }\n\n    // No DST transition at the given instant, return initial offset\n    return initialOffset;\n}\n\nprivate boolean isInDaylightSavingGap(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    final int prevOffset = getOffset(instantLocal - 1);\n    return initialOffset > prevOffset;\n}\n\nprivate boolean isInDaylightSavingOverlap(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    final int prevOffset = getOffset(instantLocal - 1);\n    return initialOffset < prevOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..58fa826d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,63 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Sanity check: ensure given instant is valid\n+    if (!DateTimeUtils.isContiguous(instantLocal)) {\n+        throw new IllegalArgumentException(\"Instant is invalid due to time zone offset transition: \" + new DateTime(instantLocal));\n+    }\n+\n+    // Initial offset at the given instant\n+    final int initialOffset = getOffset(instantLocal);\n+\n+    // Check for a gap in the local time-line\n+    if (isInDaylightSavingGap(instantLocal)) {\n+        // Get the next transition after the gap ends\n+        final long endOfGapInstant = nextTransition(instantLocal);\n+        // Get the offset at the end of the gap (which equals the later offset)\n+        final int endOfGapOffset = getOffset(endOfGapInstant);\n+        return endOfGapOffset;\n+    }\n+\n+    // Check for an overlap in the local time-line\n+    if (isInDaylightSavingOverlap(instantLocal)) {\n+        // Get the previous transition before the overlap starts\n+        final long startOfOverlapInstant = previousTransition(instantLocal);\n+        // Get the offset at the start of the overlap (which equals the earlier offset)\n+        final int startOfOverlapOffset = getOffset(startOfOverlapInstant);\n+        return startOfOverlapOffset;\n+    }\n+\n+    // Find the next transition after the given instant\n+    final long nextTransitionInstant = nextTransition(instantLocal);\n+    final int nextOffset = getOffset(nextTransitionInstant);\n+    if (nextOffset > initialOffset) {\n+        return nextOffset;\n     }\n \n+    // Find the previous transition before the given instant\n+    final long prevTransitionInstant = previousTransition(instantLocal);\n+    final int prevOffset = getOffset(prevTransitionInstant);\n+    if (prevOffset < initialOffset) {\n+        return prevOffset;\n+    }\n+\n+    // No DST transition at the given instant, return initial offset\n+    return initialOffset;\n+}\n+\n+private boolean isInDaylightSavingGap(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    final int prevOffset = getOffset(instantLocal - 1);\n+    return initialOffset > prevOffset;\n+}\n+\n+private boolean isInDaylightSavingOverlap(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    final int prevOffset = getOffset(instantLocal - 1);\n+    return initialOffset < prevOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "error: method isContiguous in class DateTimeUtils cannot be applied to given types;",
    "test_result": "ERROR"
}