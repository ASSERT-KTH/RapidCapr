{
    "patch": "public static boolean containsAny(final CharSequence string, final char[] searchChars) {\n    final int len = string.length();\n    final int searchLen = searchChars.length;\n    final boolean[] arr = new boolean[Character.MAX_CODE_POINT + 1];\n\n    for (int i = 0; i < searchLen; i++) {\n        char c1 = searchChars[i];\n        if (Character.isHighSurrogate(c1)) {\n            if (i < searchLen - 1) {\n                char c2 = searchChars[++i];\n                if (Character.isLowSurrogate(c2)) {\n                    arr[Character.toCodePoint(c1, c2)] = true;\n                } else {\n                    throw new IllegalArgumentException(\"Invalid surrogate pair at index \" + (i - 1) + \": \" + c1 + \", \" + c2);\n                }\n            } else {\n                throw new IllegalArgumentException(\"Incomplete surrogate pair at index \" + i);\n            }\n        } else {\n            arr[c1] = true;\n        }\n    }\n\n    for (int i = 0; i < len; i++) {\n        final int ch = string.codePointAt(i);\n        if (arr[ch]) {\n            return true;\n        }\n        if (Character.isSupplementaryCodePoint(ch)) {\n            i++;\n        }\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..25d79c4b 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,41 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence string, final char[] searchChars) {\n+    final int len = string.length();\n+    final int searchLen = searchChars.length;\n+    final boolean[] arr = new boolean[Character.MAX_CODE_POINT + 1];\n+\n+    for (int i = 0; i < searchLen; i++) {\n+        char c1 = searchChars[i];\n+        if (Character.isHighSurrogate(c1)) {\n+            if (i < searchLen - 1) {\n+                char c2 = searchChars[++i];\n+                if (Character.isLowSurrogate(c2)) {\n+                    arr[Character.toCodePoint(c1, c2)] = true;\n+                } else {\n+                    throw new IllegalArgumentException(\"Invalid surrogate pair at index \" + (i - 1) + \": \" + c1 + \", \" + c2);\n+                }\n+            } else {\n+                throw new IllegalArgumentException(\"Incomplete surrogate pair at index \" + i);\n+            }\n+        } else {\n+            arr[c1] = true;\n+        }\n+    }\n+\n+    for (int i = 0; i < len; i++) {\n+        final int ch = string.codePointAt(i);\n+        if (arr[ch]) {\n+            return true;\n+        }\n+        if (Character.isSupplementaryCodePoint(ch)) {\n+            i++;\n+        }\n+    }\n+\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}