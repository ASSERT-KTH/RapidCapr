{
    "patch": "                    // if nextAdjust is still before the instant, use offsetLocal instead\n                    if (instantLocal - offsetLocal < nextAdjust) {\n                        return offsetLocal;\n                    }\n                    return offsetAdjusted;\n                }\n                // calculate new offsetLocal and offsetAdjusted with next transition\n                int newOffsetLocal = getOffset(nextLocal);\n                int newOffsetAdjusted = getOffset(nextAdjusted);\n                if (newOffsetLocal == newOffsetAdjusted) {\n                    return newOffsetLocal;\n                }\n                return offsetLocal;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d46ae23d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                    // if nextAdjust is still before the instant, use offsetLocal instead\n+                    if (instantLocal - offsetLocal < nextAdjust) {\n+                        return offsetLocal;\n+                    }\n+                    return offsetAdjusted;\n+                }\n+                // calculate new offsetLocal and offsetAdjusted with next transition\n+                int newOffsetLocal = getOffset(nextLocal);\n+                int newOffsetAdjusted = getOffset(nextAdjusted);\n+                if (newOffsetLocal == newOffsetAdjusted) {\n+                    return newOffsetLocal;\n+                }\n+                return offsetLocal;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}