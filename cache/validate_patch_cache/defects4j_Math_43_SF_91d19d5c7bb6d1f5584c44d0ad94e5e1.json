{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    // If mean, variance or geomean have been overridden\n    // and can handle NaN values, then increment them\n    if (meanImpl instanceof UnivariateStatistic && !Double.isNaN(value)) {\n        meanImpl.increment(value);\n    }\n    if (varianceImpl instanceof StorelessUnivariateStatistic && !Double.isNaN(value)) {\n        varianceImpl.increment(value);\n    }\n    if (geoMeanImpl instanceof StorelessUnivariateStatistic && !Double.isNaN(value)) {\n        geoMeanImpl.increment(value);\n    }\n\n    n++;\n\n    if (!(meanImpl instanceof Mean)) {\n        // If the value is NaN, set the current mean to NaN\n        if (Double.isNaN(value)) {\n            meanImpl.clear();\n            meanImpl.increment(Double.NaN);\n        }\n        // Else calculate the new mean from the old mean and the new value\n        else {\n            double currentMean = meanImpl.getResult();\n            double newMean = currentMean + (value - currentMean) / n;\n            meanImpl.increment(newMean - currentMean);\n        }\n    }\n    else {\n        // If mean is overridden by another class, increment by the standard mean calculation\n        ((Mean) meanImpl).increment(value);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..7f802f4fe 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,46 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    // If mean, variance or geomean have been overridden\n+    // and can handle NaN values, then increment them\n+    if (meanImpl instanceof UnivariateStatistic && !Double.isNaN(value)) {\n+        meanImpl.increment(value);\n+    }\n+    if (varianceImpl instanceof StorelessUnivariateStatistic && !Double.isNaN(value)) {\n+        varianceImpl.increment(value);\n+    }\n+    if (geoMeanImpl instanceof StorelessUnivariateStatistic && !Double.isNaN(value)) {\n+        geoMeanImpl.increment(value);\n+    }\n+\n+    n++;\n+\n+    if (!(meanImpl instanceof Mean)) {\n+        // If the value is NaN, set the current mean to NaN\n+        if (Double.isNaN(value)) {\n+            meanImpl.clear();\n+            meanImpl.increment(Double.NaN);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+        // Else calculate the new mean from the old mean and the new value\n+        else {\n+            double currentMean = meanImpl.getResult();\n+            double newMean = currentMean + (value - currentMean) / n;\n+            meanImpl.increment(newMean - currentMean);\n         }\n-        n++;\n     }\n+    else {\n+        // If mean is overridden by another class, increment by the standard mean calculation\n+        ((Mean) meanImpl).increment(value);\n+    }\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "junit.framework.AssertionFailedError: expected:<4.0> but was:<3.5>",
    "test_result": "FAIL"
}