{
    "patch": "      boolean isUnnamedFunction = false;\n      if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n\n      Node newName = transform(name);\n      node.addChildToBack(newName);\n\n      Node lp = newNode(Token.LP);\n      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n      lp.setLineno(position2line(pos));\n      lp.setCharno(position2charno(lparenCharno));\n\n      if (!functionNode.isExpressionClosure()) {\n        for (AstNode a : functionNode.getParams()) {\n          Name nameParam = ((Name)a);\n          Node paramNode = newNode(Token.LP);\n          paramNode.addChildToBack(transform(nameParam));\n          lp.addChildToBack(paramNode);\n        }\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n\n      if (functionNode.isExpressionClosure()) {\n        Node nameNode = node.getFirstChild();\n        Node funcNode = node.getLastChild();\n        return newNode(Token.CALL,\n                newNode(Token.FUNCTION, nameNode, funcNode)).setLineno(pos.line);\n      } else {\n        return node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..aef6c380 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,43 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      boolean isUnnamedFunction = false;\n+      if (name == null) {\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        isUnnamedFunction = true;\n+      }\n+      Node node = newNode(Token.FUNCTION);\n+\n+      Node newName = transform(name);\n+      node.addChildToBack(newName);\n+\n+      Node lp = newNode(Token.LP);\n+      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n+      lp.setLineno(position2line(pos));\n+      lp.setCharno(position2charno(lparenCharno));\n+\n+      if (!functionNode.isExpressionClosure()) {\n+        for (AstNode a : functionNode.getParams()) {\n+          Name nameParam = ((Name)a);\n+          Node paramNode = newNode(Token.LP);\n+          paramNode.addChildToBack(transform(nameParam));\n+          lp.addChildToBack(paramNode);\n+        }\n+      }\n+      node.addChildToBack(lp);\n+\n+      Node bodyNode = transform(functionNode.getBody());\n+      parseDirectives(bodyNode);\n+      node.addChildToBack(bodyNode);\n+\n+      if (functionNode.isExpressionClosure()) {\n+        Node nameNode = node.getFirstChild();\n+        Node funcNode = node.getLastChild();\n+        return newNode(Token.CALL,\n+                newNode(Token.FUNCTION, nameNode, funcNode)).setLineno(pos.line);\n+      } else {\n+        return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}