{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n    final int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    char ch0 = str.charAt(0);\n    char ch1 = str.charAt(1);\n    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    if (len == 2) {\n        return new Locale(str);\n    }\n\n    if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    int countryIndex = -1;\n    int variantIndex = -1;\n    for (int i = 3; i < len; i++) {\n        if (str.charAt(i) == '_') {\n            if (countryIndex < 0) {\n                countryIndex = i;\n            } else {\n                variantIndex = i;\n                break;\n            }\n        }\n    }\n\n    String language = str.substring(0, 2);\n\n    if (variantIndex < 0) {\n        if (countryIndex < 0) {\n            return new Locale(language);\n        } else {\n            return new Locale(language, str.substring(3));\n        }\n    } else {\n        if (countryIndex < 0) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        } else {\n            return new Locale(language, str.substring(3, countryIndex), \n                    str.substring(countryIndex + 1));\n        }\n    }   \n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..18e052bd 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,47 +85,59 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n+    }\n+    final int len = str.length();\n+    if (len < 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    char ch0 = str.charAt(0);\n+    char ch1 = str.charAt(1);\n+    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    if (len == 2) {\n+        return new Locale(str);\n+    }\n+\n+    if (str.charAt(2) != '_') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    int countryIndex = -1;\n+    int variantIndex = -1;\n+    for (int i = 3; i < len; i++) {\n+        if (str.charAt(i) == '_') {\n+            if (countryIndex < 0) {\n+                countryIndex = i;\n+            } else {\n+                variantIndex = i;\n+                break;\n+            }\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n+    }\n+\n+    String language = str.substring(0, 2);\n+\n+    if (variantIndex < 0) {\n+        if (countryIndex < 0) {\n+            return new Locale(language);\n+        } else {\n+            return new Locale(language, str.substring(3));\n+        }\n+    } else {\n+        if (countryIndex < 0) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        } else {\n+            return new Locale(language, str.substring(3, countryIndex), \n+                    str.substring(countryIndex + 1));\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n-    }\n+    }   \n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<[]> but was:<[_P]>",
    "test_result": "FAIL"
}