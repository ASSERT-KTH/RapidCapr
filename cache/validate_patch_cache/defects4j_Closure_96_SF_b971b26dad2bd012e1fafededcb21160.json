{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n    List<Node> argumentNodes = new ArrayList<>();\n\n    // collect all the arguments in a list for later validation\n    while (arguments.hasNext()) {\n        argumentNodes.add(arguments.next());\n    }\n\n    int numArguments = argumentNodes.size();\n    if (numArguments < functionType.getMinArguments()) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArguments), String.valueOf(functionType.getMinArguments()),\n            functionType.getMaxArguments() != Integer.MAX_VALUE ?\n                \"and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n        return;\n    }\n\n    if (numArguments > functionType.getMaxArguments() && !functionType.isVarArgs()) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArguments), String.valueOf(functionType.getMinArguments()),\n            functionType.getMaxArguments() != Integer.MAX_VALUE ?\n                \"and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n        return;\n    }\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument;\n    boolean foundVarArg = false;\n    while (ordinal < functionType.getMinArguments() && parameters.hasNext()) {\n        parameter = parameters.next();\n        if (parameters.hasNext()) {\n            // Don't validate the last parameter if it is a varargs parameter\n            validator.expectArgumentMatchesParameter(t, argumentNodes.get(ordinal),\n                getJSType(argumentNodes.get(ordinal)), getJSType(parameter), call, ordinal + 1);\n            ordinal++;\n        } else {\n            foundVarArg = true;\n            break;\n        }\n    }\n    if (foundVarArg) {\n        while (parameters.hasNext()) {\n            parameter = parameters.next();\n            for (;ordinal < numArguments; ordinal++) {\n                argument = argumentNodes.get(ordinal);\n                validator.expectArgumentMatchesParameter(t, argument,\n                    getJSType(argument), getJSType(parameter), call, ordinal + 1);\n            }\n        }\n    } else {\n        // There are no varargs parameters\n        while (parameters.hasNext() && ordinal < numArguments) {\n            parameter = parameters.next();\n            argument = argumentNodes.get(ordinal);\n            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n                getJSType(parameter), call, ordinal + 1);\n            ordinal++;\n        }\n    }\n    if (functionType.getMaxArguments() != Integer.MAX_VALUE && ordinal < numArguments) {\n      // There are more arguments than required\n      String message = \"Expected at most \" + functionType.getMaxArguments() + \" argument(s)\";\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArguments), String.valueOf(functionType.getMinArguments()), message);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..f87178bd 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,79 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n+    List<Node> argumentNodes = new ArrayList<>();\n+\n+    // collect all the arguments in a list for later validation\n+    while (arguments.hasNext()) {\n+        argumentNodes.add(arguments.next());\n+    }\n+\n+    int numArguments = argumentNodes.size();\n+    if (numArguments < functionType.getMinArguments()) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArguments), String.valueOf(functionType.getMinArguments()),\n+            functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+                \"and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n+        return;\n+    }\n+\n+    if (numArguments > functionType.getMaxArguments() && !functionType.isVarArgs()) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArguments), String.valueOf(functionType.getMinArguments()),\n+            functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+                \"and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n+        return;\n+    }\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n     int ordinal = 0;\n     Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    Node argument;\n+    boolean foundVarArg = false;\n+    while (ordinal < functionType.getMinArguments() && parameters.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+        if (parameters.hasNext()) {\n+            // Don't validate the last parameter if it is a varargs parameter\n+            validator.expectArgumentMatchesParameter(t, argumentNodes.get(ordinal),\n+                getJSType(argumentNodes.get(ordinal)), getJSType(parameter), call, ordinal + 1);\n+            ordinal++;\n+        } else {\n+            foundVarArg = true;\n+            break;\n+        }\n     }\n-\n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+    if (foundVarArg) {\n+        while (parameters.hasNext()) {\n+            parameter = parameters.next();\n+            for (;ordinal < numArguments; ordinal++) {\n+                argument = argumentNodes.get(ordinal);\n+                validator.expectArgumentMatchesParameter(t, argument,\n+                    getJSType(argument), getJSType(parameter), call, ordinal + 1);\n+            }\n+        }\n+    } else {\n+        // There are no varargs parameters\n+        while (parameters.hasNext() && ordinal < numArguments) {\n+            parameter = parameters.next();\n+            argument = argumentNodes.get(ordinal);\n+            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+                getJSType(parameter), call, ordinal + 1);\n+            ordinal++;\n+        }\n+    }\n+    if (functionType.getMaxArguments() != Integer.MAX_VALUE && ordinal < numArguments) {\n+      // There are more arguments than required\n+      String message = \"Expected at most \" + functionType.getMaxArguments() + \" argument(s)\";\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArguments), String.valueOf(functionType.getMinArguments()), message);\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}