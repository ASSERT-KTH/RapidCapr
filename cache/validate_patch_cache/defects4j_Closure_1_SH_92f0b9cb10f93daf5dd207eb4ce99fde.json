{
    "patch": "    // Extract all the parameter names.\n    List<String> parameterNames = Lists.newLinkedList();\n    for (Node current = getFunctionArgList(function).getFirstChild(); current != null;\n         current = current.getNext()) {\n      parameterNames.add(current.getString());\n    }\n\n    // Remove unreferenced parameters from the list.\n    for (int i = parameterNames.size() - 1; i >= 0; i--) {\n      String paramName = parameterNames.get(i);\n      Node current = IR.name(paramName);\n      Var var = fnScope.getVar(paramName);\n      if (referenced.contains(var)) {\n        // This parameter is referenced, no need to remove it.\n        continue;\n      } else if (var == null) {\n        fnScope.getGlobalScope().undeclare(current.getString());\n        continue;\n      }\n\n      Node paramNode = var.getInitialValue();\n      Node maybeAssign = paramNode.getParent();\n      Node defaultValue = null;\n      if (maybeAssign.getType() == Token.NAME) {\n        // The argument is set to another parameter.\n      } else if (maybeAssign.getType() == Token.ASSIGN) {\n        // The argument is assigned to a default value.\n        defaultValue = maybeAssign.getLastChild().detachFromParent().srcref(maybeAssign);\n        maybeAssign.detachFromParent();\n      } else {\n        throw new IllegalStateException(\n            \"paramNode parent must be ASSIGN or NAME, but was \" + maybeAssign);\n      }\n      paramNode.detachFromParent();\n\n      // Keep docs associated with param if possible.\n      JSDocInfo info = current.getJSDocInfo();\n      current = current.detachFromParent();\n\n      if (defaultValue != null) {\n        defaultValue.srcrefTree(current);\n        Node newParam = IR.param(current.getString(), defaultValue).srcref(current);\n        fnScope.getScopeRoot().replaceChild(current, newParam);\n      } else {\n        fnScope.getScopeRoot().removeChildren(current);\n      }\n\n      // Propagate the JSDocInfo to the param if possible.\n      Node newParam = fnScope.getScopeRoot().getLastChild();\n      if (newParam.isParam()) {\n        newParam.setJSDocInfo(info);\n      }\n\n      // We removed an unused parameter, so our call site params need to\n      // shift left one position.\n      callSiteOptimizer.shift(1);\n\n      compiler.reportCodeChange();\n    }\n\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..54d5bd84 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,67 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Extract all the parameter names.\n+    List<String> parameterNames = Lists.newLinkedList();\n+    for (Node current = getFunctionArgList(function).getFirstChild(); current != null;\n+         current = current.getNext()) {\n+      parameterNames.add(current.getString());\n+    }\n+\n+    // Remove unreferenced parameters from the list.\n+    for (int i = parameterNames.size() - 1; i >= 0; i--) {\n+      String paramName = parameterNames.get(i);\n+      Node current = IR.name(paramName);\n+      Var var = fnScope.getVar(paramName);\n+      if (referenced.contains(var)) {\n+        // This parameter is referenced, no need to remove it.\n+        continue;\n+      } else if (var == null) {\n+        fnScope.getGlobalScope().undeclare(current.getString());\n+        continue;\n+      }\n+\n+      Node paramNode = var.getInitialValue();\n+      Node maybeAssign = paramNode.getParent();\n+      Node defaultValue = null;\n+      if (maybeAssign.getType() == Token.NAME) {\n+        // The argument is set to another parameter.\n+      } else if (maybeAssign.getType() == Token.ASSIGN) {\n+        // The argument is assigned to a default value.\n+        defaultValue = maybeAssign.getLastChild().detachFromParent().srcref(maybeAssign);\n+        maybeAssign.detachFromParent();\n+      } else {\n+        throw new IllegalStateException(\n+            \"paramNode parent must be ASSIGN or NAME, but was \" + maybeAssign);\n+      }\n+      paramNode.detachFromParent();\n+\n+      // Keep docs associated with param if possible.\n+      JSDocInfo info = current.getJSDocInfo();\n+      current = current.detachFromParent();\n+\n+      if (defaultValue != null) {\n+        defaultValue.srcrefTree(current);\n+        Node newParam = IR.param(current.getString(), defaultValue).srcref(current);\n+        fnScope.getScopeRoot().replaceChild(current, newParam);\n+      } else {\n+        fnScope.getScopeRoot().removeChildren(current);\n+      }\n+\n+      // Propagate the JSDocInfo to the param if possible.\n+      Node newParam = fnScope.getScopeRoot().getLastChild();\n+      if (newParam.isParam()) {\n+        newParam.setJSDocInfo(info);\n+      }\n+\n+      // We removed an unused parameter, so our call site params need to\n+      // shift left one position.\n+      callSiteOptimizer.shift(1);\n+\n+      compiler.reportCodeChange();\n+    }\n+\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}