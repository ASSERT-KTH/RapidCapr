{
    "patch": "public static boolean cycpattern_check(String a, String b) {\n    int n = a.length();\n    int m = b.length();\n    if (n < m) return false;\n\n    // Calculate the hash of b\n    long b_hash = 0;\n    long prime = 31;\n    long mod = 1_000_000_007;\n    long prime_power = 1;\n    for (int i = 0; i < m; i++) {\n        b_hash = (b_hash + (b.charAt(i) - 'a' + 1) * prime_power) % mod;\n        prime_power = (prime_power * prime) % mod;\n    }\n\n    // Calculate the hash of the first m characters of a\n    long a_hash = 0;\n    prime_power = 1;\n    for (int i = 0; i < m; i++) {\n        a_hash = (a_hash + (a.charAt(i) - 'a' + 1) * prime_power) % mod;\n        prime_power = (prime_power * prime) % mod;\n    }\n\n    // Compare the hashes of b and the first m characters of a\n    if (a_hash == b_hash) return true;\n\n    // Calculate the hash of each substring of a with length m\n    for (int i = 1; i <= n - m; i++) {\n        a_hash = (a_hash - (a.charAt(i - 1) - 'a' + 1) * (prime_power / prime) % mod + mod) % mod;\n        a_hash = (a_hash * prime + (a.charAt(i + m - 1) - 'a' + 1)) % mod;\n        if (a_hash == b_hash) return true;\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java b/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java\nindex 763802b..2d4b92e 100644\n--- a/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java\n+++ b/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java\n@@ -9,14 +9,39 @@ package humaneval.buggy;\n // cycpattern_check(\"himenss\",\"simen\") => True\n \n public class CYCPATTERN_CHECK {\n-    public static boolean cycpattern_check(String a, String b) {\n-        int l = b.length();\n-        String pat = b;\n-        for (int i = 0; i < a.length(); i += 1) {\n-            for (int j = 0; j < l; j += 1) {\n-                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n-            }\n-        }\n-        return false;\n+public static boolean cycpattern_check(String a, String b) {\n+    int n = a.length();\n+    int m = b.length();\n+    if (n < m) return false;\n+\n+    // Calculate the hash of b\n+    long b_hash = 0;\n+    long prime = 31;\n+    long mod = 1_000_000_007;\n+    long prime_power = 1;\n+    for (int i = 0; i < m; i++) {\n+        b_hash = (b_hash + (b.charAt(i) - 'a' + 1) * prime_power) % mod;\n+        prime_power = (prime_power * prime) % mod;\n+    }\n+\n+    // Calculate the hash of the first m characters of a\n+    long a_hash = 0;\n+    prime_power = 1;\n+    for (int i = 0; i < m; i++) {\n+        a_hash = (a_hash + (a.charAt(i) - 'a' + 1) * prime_power) % mod;\n+        prime_power = (prime_power * prime) % mod;\n+    }\n+\n+    // Compare the hashes of b and the first m characters of a\n+    if (a_hash == b_hash) return true;\n+\n+    // Calculate the hash of each substring of a with length m\n+    for (int i = 1; i <= n - m; i++) {\n+        a_hash = (a_hash - (a.charAt(i - 1) - 'a' + 1) * (prime_power / prime) % mod + mod) % mod;\n+        a_hash = (a_hash * prime + (a.charAt(i + m - 1) - 'a' + 1)) % mod;\n+        if (a_hash == b_hash) return true;\n     }\n+\n+    return false;\n+}\n }",
    "result_reason": "   TEST_CYCPATTERN_CHECK.test_1:15 expected:<false> but was:<true>",
    "test_result": "FAIL"
}