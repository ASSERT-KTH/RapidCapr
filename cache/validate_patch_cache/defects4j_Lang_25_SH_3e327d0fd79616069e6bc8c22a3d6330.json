{
    "patch": "try {\n    // get input and output streams\n    byte[] inputBytes = input.getBytes(charset);\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    for (int i = 0; i < inputBytes.length; i++) {\n        byte b = inputBytes[i];\n        if (b == ESCAPE_CHAR) {\n            if (i + 2 >= inputBytes.length) {\n                throw new UnsupportedEncodingException(\"Invalid escape sequence at index \" + i);\n            }\n            byte typeByte = inputBytes[i + 1];\n            byte codeByte = inputBytes[i + 2];\n            CharsetDecoder cd = Charset.forName(charset.name()).newDecoder();\n            cd.onMalformedInput(CodingErrorAction.REPORT);\n            cd.onUnmappableCharacter(CodingErrorAction.REPORT);\n            final byte[] bytes = { codeByte };\n            final ByteBuffer bb = ByteBuffer.wrap(bytes);\n            final CharBuffer cb = cd.decode(bb);\n            final char[] chars = cb.array();\n            String replacement = escapeMap.get(new EscapeKey(typeByte, chars[0]));\n            if (replacement == null) {\n                throw new UnsupportedEncodingException(\"Invalid escape sequence at index \" + i);\n            }\n            out.write(replacement.getBytes(charset));\n            i += 2;\n        } else {\n            out.write(b);\n        }\n    }\n    output = out.toString(charset.name());\n    success = true;\n} catch (UnsupportedEncodingException e) {\n    // catch the exception and do not modify the input\n    output = input;\n    success = false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}