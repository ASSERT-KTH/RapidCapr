{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node child = n.getFirstChild();\n        if (NodeUtil.isExpressionNode(child) && !NodeUtil.isFunctionExpression(child) && !NodeUtil.isExpressionFunction(child) &&\n            child.getType() != Token.OBJECTLIT && child.getType() != Token.FUNCTION && child.getType() != Token.REGEXP) {\n\n            Node parent = n.getParent();\n            if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n                Node grandparent = parent.getParent();\n                if (grandparent != null) {\n                    switch (grandparent.getType()) {\n                        case Token.IF: {\n                            Node elseBlock = grandparent.getNext();\n                            if (elseBlock != null && elseBlock.getType() == Token.BLOCK) {\n                                Node returnStmt = elseBlock.getFirstChild();\n                                if (returnStmt != null && returnStmt.getType() == Token.RETURN && returnStmt.getFirstChild() != null\n                                        && returnStmt.getFirstChild().getType() == Token.FALSE) {\n                                    return false;\n                                }\n                            }\n                            break;\n                        }\n                        case Token.FOR: {\n                            Node grandparentParent = grandparent.getParent();\n                            if (grandparentParent != null && grandparentParent.getType() == Token.FOR) {\n                                Node greatGrandparent = grandparentParent.getParent();\n                                if (greatGrandparent != null && greatGrandparent.getType() == Token.IF) {\n                                    Node elseBlock = greatGrandparent.getNext();\n                                    if (elseBlock != null && elseBlock.getType() == Token.BLOCK) {\n                                        Node returnStmt = elseBlock.getFirstChild();\n                                        if (returnStmt != null && returnStmt.getType() == Token.RETURN && returnStmt.getFirstChild() != null\n                                                && returnStmt.getFirstChild().getType() == Token.FALSE) {\n                                            return false;\n                                        }\n                                    }\n                                }\n                            }\n                            break;\n                        }\n                        case Token.VAR:\n                            return true;\n                    }\n                }\n                return true;\n            }\n            return false;\n        }\n        return false;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..d540af35 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,57 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+        Node child = n.getFirstChild();\n+        if (NodeUtil.isExpressionNode(child) && !NodeUtil.isFunctionExpression(child) && !NodeUtil.isExpressionFunction(child) &&\n+            child.getType() != Token.OBJECTLIT && child.getType() != Token.FUNCTION && child.getType() != Token.REGEXP) {\n+\n+            Node parent = n.getParent();\n+            if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n+                Node grandparent = parent.getParent();\n+                if (grandparent != null) {\n+                    switch (grandparent.getType()) {\n+                        case Token.IF: {\n+                            Node elseBlock = grandparent.getNext();\n+                            if (elseBlock != null && elseBlock.getType() == Token.BLOCK) {\n+                                Node returnStmt = elseBlock.getFirstChild();\n+                                if (returnStmt != null && returnStmt.getType() == Token.RETURN && returnStmt.getFirstChild() != null\n+                                        && returnStmt.getFirstChild().getType() == Token.FALSE) {\n+                                    return false;\n+                                }\n+                            }\n+                            break;\n+                        }\n+                        case Token.FOR: {\n+                            Node grandparentParent = grandparent.getParent();\n+                            if (grandparentParent != null && grandparentParent.getType() == Token.FOR) {\n+                                Node greatGrandparent = grandparentParent.getParent();\n+                                if (greatGrandparent != null && greatGrandparent.getType() == Token.IF) {\n+                                    Node elseBlock = greatGrandparent.getNext();\n+                                    if (elseBlock != null && elseBlock.getType() == Token.BLOCK) {\n+                                        Node returnStmt = elseBlock.getFirstChild();\n+                                        if (returnStmt != null && returnStmt.getType() == Token.RETURN && returnStmt.getFirstChild() != null\n+                                                && returnStmt.getFirstChild().getType() == Token.FALSE) {\n+                                            return false;\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                            break;\n+                        }\n+                        case Token.VAR:\n+                            return true;\n+                    }\n+                }\n+                return true;\n+            }\n+            return false;\n+        }\n+        return false;\n     }\n-\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}