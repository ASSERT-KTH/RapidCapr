{
    "patch": "    // If we are coming out of the FINALLY block...\n    } else if (parent.getLastChild() == node) {\n      if (cfa != null) {\n        for (Node finallyNode : cfa.finallyMap.get(parent)) {\n          if (finallyNode != parent.getFirstChild() &&\n              finallyNode != node && finallyNode != null) {\n            // Jump to the finally block.\n            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            // Follow the normal fall through from the finally block.\n            cfa.createEdge(finallyNode, Branch.UNCOND,\n                computeFollowNode(node, node, cfa));\n          } else {\n            // No new edge needed, follow the normal fall through.\n            cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(node, node, cfa));\n          }\n        }\n      } else {\n        // If there is no CFA, simply follow the normal fall through from the finally block.\n        cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(node, node, cfa));\n      }\n      return null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..872fb40a 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,27 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+    // If we are coming out of the FINALLY block...\n+    } else if (parent.getLastChild() == node) {\n+      if (cfa != null) {\n+        for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+          if (finallyNode != parent.getFirstChild() &&\n+              finallyNode != node && finallyNode != null) {\n+            // Jump to the finally block.\n+            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+            // Follow the normal fall through from the finally block.\n+            cfa.createEdge(finallyNode, Branch.UNCOND,\n+                computeFollowNode(node, node, cfa));\n+          } else {\n+            // No new edge needed, follow the normal fall through.\n+            cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(node, node, cfa));\n+          }\n+        }\n+      } else {\n+        // If there is no CFA, simply follow the normal fall through from the finally block.\n+        cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(node, node, cfa));\n+      }\n+      return null;\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}