{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        if (lastArg.isDefaultValue()) {\n          lastArg = lastArg.getFirstChild();\n        }\n        Var var = fnScope.getVar(lastArg.getString());\n        boolean removable = false;\n        if (!referenced.contains(var)) {\n          removable = true;\n          if (callSiteWarnings.isOn()) {\n            if (var.getParentNode().isRest()) {\n              callSiteWarnings.add(Lang.COULD_NOT_REMOVE_REST_PARAMETER);\n            } else {\n              callSiteWarnings.add(Lang.COULD_NOT_REMOVE_PARAMETER);\n            }\n          }\n        } else if (lastArg.getNext() == null) {\n          // Last arg must remain because it maybe referenced in callee\n          break;\n        }\n\n        // Don't remove strongly typed parameter when typechecking is on.\n        JSTypeExpression type = lastArg.getJSType();\n        if (type != null && type.isWellFormed()) {\n          removable = false;\n        }\n\n        if (removable) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..507b52c3 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,56 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        if (lastArg.isDefaultValue()) {\n+          lastArg = lastArg.getFirstChild();\n+        }\n+        Var var = fnScope.getVar(lastArg.getString());\n+        boolean removable = false;\n+        if (!referenced.contains(var)) {\n+          removable = true;\n+          if (callSiteWarnings.isOn()) {\n+            if (var.getParentNode().isRest()) {\n+              callSiteWarnings.add(Lang.COULD_NOT_REMOVE_REST_PARAMETER);\n+            } else {\n+              callSiteWarnings.add(Lang.COULD_NOT_REMOVE_PARAMETER);\n+            }\n+          }\n+        } else if (lastArg.getNext() == null) {\n+          // Last arg must remain because it maybe referenced in callee\n+          break;\n+        }\n+\n+        // Don't remove strongly typed parameter when typechecking is on.\n+        JSTypeExpression type = lastArg.getJSType();\n+        if (type != null && type.isWellFormed()) {\n+          removable = false;\n+        }\n+\n+        if (removable) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}