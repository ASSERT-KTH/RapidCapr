{
    "patch": "      Node grandparent = parent.getParent();\n      if (grandparent != null && grandparent.getType() == Token.CALL &&\n          (grandparent.getFirstChild().getType() == Token.GETPROP &&\n           (grandparent.getFirstChild().getLastChild().getString().equals(\"bind\") ||\n            grandparent.getFirstChild().getLastChild().getString().equals(\"apply\") ||\n            grandparent.getFirstChild().getLastChild().getString().equals(\"call\")) ||\n           grandparent.getFirstChild().getType() == Token.NAME &&\n           (grandparent.getFirstChild().getString().equals(\"bind\") ||\n            grandparent.getFirstChild().getString().equals(\"apply\") ||\n            grandparent.getFirstChild().getString().equals(\"call\")))) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..91fc622f 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,16 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node grandparent = parent.getParent();\n+      if (grandparent != null && grandparent.getType() == Token.CALL &&\n+          (grandparent.getFirstChild().getType() == Token.GETPROP &&\n+           (grandparent.getFirstChild().getLastChild().getString().equals(\"bind\") ||\n+            grandparent.getFirstChild().getLastChild().getString().equals(\"apply\") ||\n+            grandparent.getFirstChild().getLastChild().getString().equals(\"call\")) ||\n+           grandparent.getFirstChild().getType() == Token.NAME &&\n+           (grandparent.getFirstChild().getString().equals(\"bind\") ||\n+            grandparent.getFirstChild().getString().equals(\"apply\") ||\n+            grandparent.getFirstChild().getString().equals(\"call\")))) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}