{
    "patch": "final int delta = offsetLocal - offsetAdjusted;\n\nif (delta >= 0) {\n    final long nextTransition = nextTransition(instantAdjusted);\n    final long adjNext = nextTransition(instantLocal - offsetAdjusted);\n    if (adjNext != nextTransition) {\n        if (getOffset(nextTransition - 1) >= getOffset(nextTransition)) {\n            return getOffset(nextTransition) + delta;\n        }\n        return offsetLocal;\n    } else {\n        return offsetAdjusted;\n    }\n} else {\n    long lastTransition = previousTransition(instantLocal - offsetAdjusted);\n    final long lastAdj = previousTransition(instantAdjusted);\n    int offsetBeforeLast = getOffset(lastTransition);\n    if (offsetBeforeLast >= offsetAdjusted) {\n        // offset remains same as the original calculation\n        return offsetAdjusted + delta;\n    }\n    int offsetPrev = offsetBeforeLast;\n    while (true) {\n        lastTransition = previousTransition(lastTransition - 1);\n        offsetPrev = getOffset(lastTransition);\n        if (offsetPrev < offsetAdjusted) {\n            break;\n        }\n        offsetBeforeLast = offsetPrev;\n    }\n    final int minDelta = Math.min(delta, 0);\n    if (offsetBeforeLast < offsetLocal + minDelta) {\n        final long prevTransition = previousTransition(lastAdj);\n        offsetPrev = getOffset(prevTransition);\n        if (offsetPrev >= offsetAdjusted && offsetPrev < offsetLocal + minDelta) {\n            return offsetPrev;\n        }\n        return offsetBeforeLast;\n    }\n    final int maxDelta = Math.max(delta, 0);\n    if (offsetAdjusted < offsetLocal + maxDelta) {\n        long nextTransition = nextTransition(lastAdj) + offsetAdjusted;\n        int offsetNext = getOffset(nextTransition);\n        while (offsetNext <= offsetLocal + maxDelta) {\n            while (offsetNext == offsetAdjusted) {\n                nextTransition = nextTransition(nextTransition - 1) + offsetAdjusted;\n                offsetNext = getOffset(nextTransition);\n            }\n            int newOffset =\n                getOffset(previousTransition(nextTransition - 1) - offsetAdjusted);\n            if (newOffset <= offsetAdjusted || newOffset <= offsetLocal + maxDelta) {\n                return offsetLocal + maxDelta;\n            }\n            maxDelta = delta;\n        }\n        return offsetAdjusted;\n    }\n    return offsetLocal + maxDelta;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ec6828e1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,65 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+final int delta = offsetLocal - offsetAdjusted;\n+\n+if (delta >= 0) {\n+    final long nextTransition = nextTransition(instantAdjusted);\n+    final long adjNext = nextTransition(instantLocal - offsetAdjusted);\n+    if (adjNext != nextTransition) {\n+        if (getOffset(nextTransition - 1) >= getOffset(nextTransition)) {\n+            return getOffset(nextTransition) + delta;\n+        }\n+        return offsetLocal;\n+    } else {\n+        return offsetAdjusted;\n+    }\n+} else {\n+    long lastTransition = previousTransition(instantLocal - offsetAdjusted);\n+    final long lastAdj = previousTransition(instantAdjusted);\n+    int offsetBeforeLast = getOffset(lastTransition);\n+    if (offsetBeforeLast >= offsetAdjusted) {\n+        // offset remains same as the original calculation\n+        return offsetAdjusted + delta;\n+    }\n+    int offsetPrev = offsetBeforeLast;\n+    while (true) {\n+        lastTransition = previousTransition(lastTransition - 1);\n+        offsetPrev = getOffset(lastTransition);\n+        if (offsetPrev < offsetAdjusted) {\n+            break;\n+        }\n+        offsetBeforeLast = offsetPrev;\n+    }\n+    final int minDelta = Math.min(delta, 0);\n+    if (offsetBeforeLast < offsetLocal + minDelta) {\n+        final long prevTransition = previousTransition(lastAdj);\n+        offsetPrev = getOffset(prevTransition);\n+        if (offsetPrev >= offsetAdjusted && offsetPrev < offsetLocal + minDelta) {\n+            return offsetPrev;\n+        }\n+        return offsetBeforeLast;\n+    }\n+    final int maxDelta = Math.max(delta, 0);\n+    if (offsetAdjusted < offsetLocal + maxDelta) {\n+        long nextTransition = nextTransition(lastAdj) + offsetAdjusted;\n+        int offsetNext = getOffset(nextTransition);\n+        while (offsetNext <= offsetLocal + maxDelta) {\n+            while (offsetNext == offsetAdjusted) {\n+                nextTransition = nextTransition(nextTransition - 1) + offsetAdjusted;\n+                offsetNext = getOffset(nextTransition);\n+            }\n+            int newOffset =\n+                getOffset(previousTransition(nextTransition - 1) - offsetAdjusted);\n+            if (newOffset <= offsetAdjusted || newOffset <= offsetLocal + maxDelta) {\n+                return offsetLocal + maxDelta;\n+            }\n+            maxDelta = delta;\n+        }\n+        return offsetAdjusted;\n+    }\n+    return offsetLocal + maxDelta;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot assign a value to final variable maxDelta",
    "test_result": "ERROR"
}