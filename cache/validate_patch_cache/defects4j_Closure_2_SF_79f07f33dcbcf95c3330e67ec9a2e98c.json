{
    "patch": "private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n        String functionName, HashMap<String, ObjectType> properties,\n        HashMap<String, ObjectType> currentProperties,\n        ObjectType interfaceType) {\n    // Get the implicit prototype and return if it is null\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    if (implicitProto == null) {\n        return;\n    }\n\n    // Get the set of property names from the implicit prototype and return if it is null\n    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n    if (currentPropertyNames == null) {\n        return;\n    }\n\n    // Loop through the property names\n    for (String name : currentPropertyNames) {\n        // Get the property type of the current interface and skip if it is null\n        JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);\n        if (interfaceTypePropertyType == null) {\n            continue;\n        }\n\n        // Get the object type from properties map and skip if it is null\n        ObjectType oType = properties.get(name);\n        if (oType == null) {\n            continue;\n        }\n\n        // Get the property type of the object type and skip if it is null\n        JSType oTypePropertyType = oType.getPropertyType(name);\n        if (oTypePropertyType == null) {\n            continue;\n        }\n\n        // Compare the property types of the object type and current interface type and report an error if they are not equivalent\n        if (!interfaceTypePropertyType.isEquivalentTo(oTypePropertyType)) {\n            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName,\n                    name, oType.toString(), interfaceType.toString()));\n        }\n\n        // Add the property to current properties map\n        currentProperties.put(name, interfaceType);\n    }\n\n    // Loop through the extended interfaces and recursively call the function for each extended interface\n    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n        checkInterfaceConflictProperties(t, n, functionName, properties,\n                currentProperties, iType);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex a0f95db9..8564fe4f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1563,33 +1563,58 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * that have been visited\n    * @param interfaceType The super interface that is being visited\n    */\n-  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n-      String functionName, HashMap<String, ObjectType> properties,\n-      HashMap<String, ObjectType> currentProperties,\n-      ObjectType interfaceType) {\n+private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n+        String functionName, HashMap<String, ObjectType> properties,\n+        HashMap<String, ObjectType> currentProperties,\n+        ObjectType interfaceType) {\n+    // Get the implicit prototype and return if it is null\n     ObjectType implicitProto = interfaceType.getImplicitPrototype();\n-    Set<String> currentPropertyNames;\n-      // This can be the case if interfaceType is proxy to a non-existent\n-      // object (which is a bad type annotation, but shouldn't crash).\n-      currentPropertyNames = implicitProto.getOwnPropertyNames();\n+    if (implicitProto == null) {\n+        return;\n+    }\n+\n+    // Get the set of property names from the implicit prototype and return if it is null\n+    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n+    if (currentPropertyNames == null) {\n+        return;\n+    }\n+\n+    // Loop through the property names\n     for (String name : currentPropertyNames) {\n-      ObjectType oType = properties.get(name);\n-      if (oType != null) {\n-        if (!interfaceType.getPropertyType(name).isEquivalentTo(\n-            oType.getPropertyType(name))) {\n-          compiler.report(\n-              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n-                  functionName, name, oType.toString(),\n-                  interfaceType.toString()));\n+        // Get the property type of the current interface and skip if it is null\n+        JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);\n+        if (interfaceTypePropertyType == null) {\n+            continue;\n         }\n-      }\n-      currentProperties.put(name, interfaceType);\n+\n+        // Get the object type from properties map and skip if it is null\n+        ObjectType oType = properties.get(name);\n+        if (oType == null) {\n+            continue;\n+        }\n+\n+        // Get the property type of the object type and skip if it is null\n+        JSType oTypePropertyType = oType.getPropertyType(name);\n+        if (oTypePropertyType == null) {\n+            continue;\n+        }\n+\n+        // Compare the property types of the object type and current interface type and report an error if they are not equivalent\n+        if (!interfaceTypePropertyType.isEquivalentTo(oTypePropertyType)) {\n+            compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName,\n+                    name, oType.toString(), interfaceType.toString()));\n+        }\n+\n+        // Add the property to current properties map\n+        currentProperties.put(name, interfaceType);\n     }\n+\n+    // Loop through the extended interfaces and recursively call the function for each extended interface\n     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n-      checkInterfaceConflictProperties(t, n, functionName, properties,\n-          currentProperties, iType);\n+        checkInterfaceConflictProperties(t, n, functionName, properties,\n+                currentProperties, iType);\n     }\n-  }\n+}\n \n   /**\n    * Visits a {@link Token#FUNCTION} node.",
    "result_reason": "junit.framework.AssertionFailedError: expected a warning",
    "test_result": "FAIL"
}