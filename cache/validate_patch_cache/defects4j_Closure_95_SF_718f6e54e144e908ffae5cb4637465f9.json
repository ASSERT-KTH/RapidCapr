{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n    Preconditions.checkArgument(inferred || type != null);\n\n    // Only allow declarations of NAMEs and qualfied names.\n    boolean shouldDeclareOnGlobalThis = false;\n    if (n.getType() == Token.NAME) {\n        Preconditions.checkArgument(parent.getType() == Token.FUNCTION\n                || parent.getType() == Token.VAR\n                || parent.getType() == Token.LET\n                || parent.getType() == Token.CONST\n                || parent.getType() == Token.CATCH\n                || parent.getType() == Token.PARAM_LIST\n                || parent.getType() == Token.CLASS_MEMBERS);\n        shouldDeclareOnGlobalThis = scope.isGlobal() && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);\n    } else {\n        Preconditions.checkArgument(\n                n.getType() == Token.GETPROP && (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT));\n    }\n\n    String variableName = n.getQualifiedName();\n    Preconditions.checkArgument(!variableName.isEmpty());\n\n    // If n is a property, then we should really declare it in the\n    // scope where the root object appears. This helps out people\n    // who declare \"global\" names in an anonymous namespace.\n    Scope scopeToDeclareIn = scope;\n\n    // When checking for existing declarations, also look in parent scopes\n    Var oldVar = scopeToDeclareIn.getVar(variableName);\n    if (oldVar != null && !oldVar.getType().equals(type)) {\n        // If the types are different, report an error\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n        return;\n    }\n\n    if (!inferred) {\n        setDeferredType(n, type);\n    }\n\n    CompilerInput input = compiler.getInput(sourceName);\n\n    // Declare the variable in the first scope where it's not already defined\n    while (scopeToDeclareIn != null && scopeToDeclareIn.isDeclared(variableName, false)) {\n        scopeToDeclareIn = scopeToDeclareIn.getParent();\n    }\n\n    if (scopeToDeclareIn == null) {\n        // If the variable is not declared, throw an error\n        throw new RuntimeException(\"INTERNAL COMPILER ERROR.\");\n    }\n\n    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n    if (shouldDeclareOnGlobalThis) {\n        // Declare the variable in the global scope\n        ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n        boolean isExtern = input.isExtern();\n        if (inferred) {\n            globalThis.defineInferredProperty(variableName,\n                    type == null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern);\n        } else {\n            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n        }\n    }\n\n    // If we're in the global scope, also declare var.prototype\n    // in the scope chain.\n    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n        FunctionType fnType = (FunctionType) type;\n        if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                    fnType.getPrototype(), compiler.getInput(sourceName),\n                    /* declared iff there's an explicit supertype */\n                    superClassCtor == null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..baa22c30 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,84 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+    Preconditions.checkArgument(inferred || type != null);\n+\n+    // Only allow declarations of NAMEs and qualfied names.\n+    boolean shouldDeclareOnGlobalThis = false;\n+    if (n.getType() == Token.NAME) {\n+        Preconditions.checkArgument(parent.getType() == Token.FUNCTION\n+                || parent.getType() == Token.VAR\n+                || parent.getType() == Token.LET\n+                || parent.getType() == Token.CONST\n+                || parent.getType() == Token.CATCH\n+                || parent.getType() == Token.PARAM_LIST\n+                || parent.getType() == Token.CLASS_MEMBERS);\n+        shouldDeclareOnGlobalThis = scope.isGlobal() && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);\n+    } else {\n         Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n-      }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n+                n.getType() == Token.GETPROP && (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT));\n+    }\n+\n+    String variableName = n.getQualifiedName();\n+    Preconditions.checkArgument(!variableName.isEmpty());\n+\n+    // If n is a property, then we should really declare it in the\n+    // scope where the root object appears. This helps out people\n+    // who declare \"global\" names in an anonymous namespace.\n+    Scope scopeToDeclareIn = scope;\n+\n+    // When checking for existing declarations, also look in parent scopes\n+    Var oldVar = scopeToDeclareIn.getVar(variableName);\n+    if (oldVar != null && !oldVar.getType().equals(type)) {\n+        // If the types are different, report an error\n+        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n+        return;\n+    }\n+\n+    if (!inferred) {\n+        setDeferredType(n, type);\n+    }\n+\n+    CompilerInput input = compiler.getInput(sourceName);\n+\n+    // Declare the variable in the first scope where it's not already defined\n+    while (scopeToDeclareIn != null && scopeToDeclareIn.isDeclared(variableName, false)) {\n+        scopeToDeclareIn = scopeToDeclareIn.getParent();\n+    }\n+\n+    if (scopeToDeclareIn == null) {\n+        // If the variable is not declared, throw an error\n+        throw new RuntimeException(\"INTERNAL COMPILER ERROR.\");\n+    }\n+\n+    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+\n+    if (shouldDeclareOnGlobalThis) {\n+        // Declare the variable in the global scope\n+        ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+        boolean isExtern = input.isExtern();\n+        if (inferred) {\n             globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n+                    type == null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern);\n+        } else {\n             globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n         }\n+    }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n+    // If we're in the global scope, also declare var.prototype\n+    // in the scope chain.\n+    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n+        FunctionType fnType = (FunctionType) type;\n+        if (fnType.isConstructor() || fnType.isInterface()) {\n             FunctionType superClassCtor = fnType.getSuperClassConstructor();\n             scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n+                    fnType.getPrototype(), compiler.getInput(sourceName),\n+                    /* declared iff there's an explicit supertype */\n+                    superClassCtor == null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n         }\n-      }\n     }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}