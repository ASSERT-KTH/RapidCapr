{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        // Get the DateTimeField and value\n        DateTimeField field = savedFields[i].iField;\n        int value = savedFields[i].iValue;\n        \n        // Set the new value\n        long newMillis = savedFields[i].set(millis, resetFields);\n\n        // Check if the new value is different from the original value and validate it\n        if (newMillis != millis && !field.isLenient()) {\n            // If not lenient, throw an exception\n            throw new IllegalArgumentException(\"Invalid value for \" + field.getName());\n        } else if (newMillis != millis) {\n            // If lenient, keep the original value\n            newMillis = millis;\n        }\n\n        // Check that all fields are consistent with each other\n        for (int j = 0; j < i; j++) {\n            DurationField f1 = savedFields[i].iField.getDurationField();\n            DurationField f2 = savedFields[j].iField.getDurationField();\n            // Only check fields of the same type\n            if (f1 == null || f2 == null || (f1.getType() != f2.getType())) {\n                continue;\n            }\n            int v1 = savedFields[i].iField.get(newMillis);\n            int v2 = savedFields[j].iField.get(newMillis);\n            if (v1 != v2) {\n                throw new IllegalArgumentException(\"Conflict found: \" + savedFields[i].iField.getName() +\n                        \" \" + v1 + \" and \" + savedFields[j].iField.getName() + \" \" + v2);\n            }\n        }\n\n        // Validate newMillis value\n        millis = newMillis;\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..9180d94f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,49 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        // Get the DateTimeField and value\n+        DateTimeField field = savedFields[i].iField;\n+        int value = savedFields[i].iValue;\n+        \n+        // Set the new value\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+\n+        // Check if the new value is different from the original value and validate it\n+        if (newMillis != millis && !field.isLenient()) {\n+            // If not lenient, throw an exception\n+            throw new IllegalArgumentException(\"Invalid value for \" + field.getName());\n+        } else if (newMillis != millis) {\n+            // If lenient, keep the original value\n+            newMillis = millis;\n+        }\n+\n+        // Check that all fields are consistent with each other\n+        for (int j = 0; j < i; j++) {\n+            DurationField f1 = savedFields[i].iField.getDurationField();\n+            DurationField f2 = savedFields[j].iField.getDurationField();\n+            // Only check fields of the same type\n+            if (f1 == null || f2 == null || (f1.getType() != f2.getType())) {\n+                continue;\n+            }\n+            int v1 = savedFields[i].iField.get(newMillis);\n+            int v2 = savedFields[j].iField.get(newMillis);\n+            if (v1 != v2) {\n+                throw new IllegalArgumentException(\"Conflict found: \" + savedFields[i].iField.getName() +\n+                        \" \" + v1 + \" and \" + savedFields[j].iField.getName() + \" \" + v2);\n+            }\n+        }\n+\n+        // Validate newMillis value\n+        millis = newMillis;\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "java.lang.IllegalArgumentException: Invalid value for year",
    "test_result": "FAIL"
}