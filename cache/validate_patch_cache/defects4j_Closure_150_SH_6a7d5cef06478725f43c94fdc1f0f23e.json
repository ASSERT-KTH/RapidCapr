{
    "patch": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n == scope.getRootNode()) return;\n\n        // Check if we're inside an extern function body.\n        if (n.getType() == Token.EXPR_RESULT && parent.getType() == Token.BLOCK &&\n                parent.getParent().getType() == Token.FUNCTION &&\n                NodeUtil.getFunctionBody(parent.getParent()).isOnlyWhitespace()) {\n            isExternFunction = true;\n            // Since we're in an extern function, we don't need to visit any of its code. However,\n            // we do need to keep visiting its direct children (i.e. the argument types), since\n            // they are part of the function signature.\n            t.getCompiler().reportCodeChange();\n            return;\n        }\n\n        attachLiteralTypes(n);\n\n        switch (n.getType()) {\n            case Token.FUNCTION:\n                if (parent.getType() == Token.NAME) {\n                    return;\n                }\n                defineDeclaredFunction(n, parent);\n                break;\n            case Token.NAME:\n                defineName(n, parent);\n                break;\n            case Token.CATCH:\n                defineCatch(n, parent);\n                break;\n            case Token.VAR:\n                defineVar(n, parent);\n                break;\n            case Token.LET:\n                defineLet(n, parent);\n                break;\n            case Token.CONST:\n                defineConst(n, parent);\n                break;\n            default:\n                break;\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..5836eaa7 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,50 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n == scope.getRootNode()) return;\n+\n+        // Check if we're inside an extern function body.\n+        if (n.getType() == Token.EXPR_RESULT && parent.getType() == Token.BLOCK &&\n+                parent.getParent().getType() == Token.FUNCTION &&\n+                NodeUtil.getFunctionBody(parent.getParent()).isOnlyWhitespace()) {\n+            isExternFunction = true;\n+            // Since we're in an extern function, we don't need to visit any of its code. However,\n+            // we do need to keep visiting its direct children (i.e. the argument types), since\n+            // they are part of the function signature.\n+            t.getCompiler().reportCodeChange();\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+\n+        attachLiteralTypes(n);\n+\n+        switch (n.getType()) {\n+            case Token.FUNCTION:\n+                if (parent.getType() == Token.NAME) {\n+                    return;\n+                }\n+                defineDeclaredFunction(n, parent);\n+                break;\n+            case Token.NAME:\n+                defineName(n, parent);\n+                break;\n+            case Token.CATCH:\n+                defineCatch(n, parent);\n+                break;\n+            case Token.VAR:\n+                defineVar(n, parent);\n+                break;\n+            case Token.LET:\n+                defineLet(n, parent);\n+                break;\n+            case Token.CONST:\n+                defineConst(n, parent);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}