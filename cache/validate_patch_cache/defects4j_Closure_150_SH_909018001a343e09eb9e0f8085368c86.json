{
    "patch": "Node first = n.getFirstChild();\nif (parent != null && parent.getType() == Token.EXPR_RESULT) {\n  if (n.getType() == Token.FUNCTION) {\n    if (first != null && first.getType() == Token.NAME) {\n      defineDeclaredFunction(first, n);\n    } else {\n      defineDeclaredFunction(n, parent);\n    }\n    attachLiteralTypes(first == null ? n : first);\n  }\n} else if (n.getType() == Token.CATCH) {\n  defineCatch(n, parent);\n} else if (n.getType() == Token.VAR) {\n  defineVar(n, parent);\n} else {\n  attachLiteralTypes(n);\n  if (n.getType() == Token.LP && parent == scope.getRootNode() && n.hasOneChild() &&\n      n.getFirstChild().getType() == Token.FUNCTION) {\n    defineDeclaredFunction(n.getFirstChild(), parent);\n    handleFunctionInputs(parent);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..5b314e73 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,28 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+Node first = n.getFirstChild();\n+if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n+  if (n.getType() == Token.FUNCTION) {\n+    if (first != null && first.getType() == Token.NAME) {\n+      defineDeclaredFunction(first, n);\n+    } else {\n+      defineDeclaredFunction(n, parent);\n+    }\n+    attachLiteralTypes(first == null ? n : first);\n+  }\n+} else if (n.getType() == Token.CATCH) {\n+  defineCatch(n, parent);\n+} else if (n.getType() == Token.VAR) {\n+  defineVar(n, parent);\n+} else {\n+  attachLiteralTypes(n);\n+  if (n.getType() == Token.LP && parent == scope.getRootNode() && n.hasOneChild() &&\n+      n.getFirstChild().getType() == Token.FUNCTION) {\n+    defineDeclaredFunction(n.getFirstChild(), parent);\n+    handleFunctionInputs(parent);\n+  }\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}