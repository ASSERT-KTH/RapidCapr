{
    "patch": "                long newMillis = savedFields[i].set(millis, resetFields);\n                if (newMillis == millis) {\n                    continue;\n                }\n                if (newMillis < millis && i > 0) {\n                    SavedField tmp = savedFields[i - 1];\n                    savedFields[i - 1] = savedFields[i];\n                    savedFields[i] = tmp;\n                    i -= 2;\n                } else {\n                    millis = newMillis;\n                }\n            }\n        } catch (IllegalArgumentException e) {\n            if (text != null) {\n                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..66fb9519 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,22 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                long newMillis = savedFields[i].set(millis, resetFields);\n+                if (newMillis == millis) {\n+                    continue;\n+                }\n+                if (newMillis < millis && i > 0) {\n+                    SavedField tmp = savedFields[i - 1];\n+                    savedFields[i - 1] = savedFields[i];\n+                    savedFields[i] = tmp;\n+                    i -= 2;\n+                } else {\n+                    millis = newMillis;\n+                }\n+            }\n+        } catch (IllegalArgumentException e) {\n+            if (text != null) {\n+                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'try' without 'catch' or 'finally'",
    "test_result": "ERROR"
}