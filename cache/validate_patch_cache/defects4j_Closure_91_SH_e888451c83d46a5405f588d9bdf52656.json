{
    "patch": "      if (NodeUtil.isLValue(parent)) {\n        Node gramps = parent.getParent();\n        if (gramps != null && NodeUtil.isExprAssign(gramps)) {\n          Node greatGramps = gramps.getParent();\n          if (greatGramps != null &&\n              NodeUtil.isObjectLitKey(greatGramps, gramps)) {\n            String key = gramps.getString();\n            if (\"constructor\".equals(key) || key.endsWith(\".prototype\")) {\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..ee271ffd 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,17 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(parent)) {\n+        Node gramps = parent.getParent();\n+        if (gramps != null && NodeUtil.isExprAssign(gramps)) {\n+          Node greatGramps = gramps.getParent();\n+          if (greatGramps != null &&\n+              NodeUtil.isObjectLitKey(greatGramps, gramps)) {\n+            String key = gramps.getString();\n+            if (\"constructor\".equals(key) || key.endsWith(\".prototype\")) {\n+              return false;\n+            }\n+          }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}