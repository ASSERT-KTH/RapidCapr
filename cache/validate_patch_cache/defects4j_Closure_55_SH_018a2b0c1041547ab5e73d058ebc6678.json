{
    "patch": "// Check if the node is a function expression\nif (!NodeUtil.isFunctionExpression(n)) {\n  return false;\n}\n// If the function expression has a name, it should not be reduced\nif (NodeUtil.getFunctionName(n) != null) {\n  return false;\n}\n// If the parent node is not one of these types, it should not be reduced\nint parentType = n.getParent().getType();\nif (parentType != Token.EXPR_RESULT &&\n    parentType != Token.ASSIGN &&\n    parentType != Token.VAR &&\n    !(parentType == Token.BLOCK && n.getParent().getParent().getType() == Token.FUNCTION)) {\n  return false;\n}\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..955c2d5e 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,23 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+// Check if the node is a function expression\n+if (!NodeUtil.isFunctionExpression(n)) {\n+  return false;\n+}\n+// If the function expression has a name, it should not be reduced\n+if (NodeUtil.getFunctionName(n) != null) {\n+  return false;\n+}\n+// If the parent node is not one of these types, it should not be reduced\n+int parentType = n.getParent().getType();\n+if (parentType != Token.EXPR_RESULT &&\n+    parentType != Token.ASSIGN &&\n+    parentType != Token.VAR &&\n+    !(parentType == Token.BLOCK && n.getParent().getParent().getType() == Token.FUNCTION)) {\n+  return false;\n+}\n+return true;\n   }\n \n   /**",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}