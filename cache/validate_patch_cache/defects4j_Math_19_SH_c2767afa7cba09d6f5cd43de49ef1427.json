{
    "patch": "                if (Double.isNaN(lB[i]) ||\n                    Double.isNaN(uB[i])) {\n                    throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX, i);\n                }\n                if (Double.compare(lB[i], uB[i]) > 0) {\n                    throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lB[i], uB[i], true);\n                }\n                if (!Double.isInfinite(lB[i]) ||\n                    !Double.isInfinite(uB[i])) {\n                    hasFiniteBounds = true;\n                }\n            }\n\n            if (hasFiniteBounds) {\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n            } else {\n                boundaries = null;\n            }\n        } else {\n            // Convert API to internal handling of boundaries.\n            boundaries = null;\n        }\n\n        if (inputSigma != null) {\n            if (inputSigma.length != init.length) {\n                throw new DimensionMismatchException(inputSigma.length, init.length);\n            }\n            for (int i = 0; i < init.length; i++) {\n                if (inputSigma[i] < 0) {\n                    throw new NotPositiveException(inputSigma[i]);\n                }\n                if (boundaries != null) {\n                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {\n                        throw new NumberIsTooLargeException(inputSigma[i], boundaries[1][i] - boundaries[0][i], false);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..6e5d2ba28 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,43 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                if (Double.isNaN(lB[i]) ||\n+                    Double.isNaN(uB[i])) {\n+                    throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX, i);\n+                }\n+                if (Double.compare(lB[i], uB[i]) > 0) {\n+                    throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lB[i], uB[i], true);\n+                }\n+                if (!Double.isInfinite(lB[i]) ||\n+                    !Double.isInfinite(uB[i])) {\n+                    hasFiniteBounds = true;\n+                }\n+            }\n+\n+            if (hasFiniteBounds) {\n+                // Convert API to internal handling of boundaries.\n+                boundaries = new double[2][];\n+                boundaries[0] = lB;\n+                boundaries[1] = uB;\n+            } else {\n+                boundaries = null;\n+            }\n+        } else {\n+            // Convert API to internal handling of boundaries.\n+            boundaries = null;\n+        }\n+\n+        if (inputSigma != null) {\n+            if (inputSigma.length != init.length) {\n+                throw new DimensionMismatchException(inputSigma.length, init.length);\n+            }\n+            for (int i = 0; i < init.length; i++) {\n+                if (inputSigma[i] < 0) {\n+                    throw new NotPositiveException(inputSigma[i]);\n+                }\n+                if (boundaries != null) {\n+                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {\n+                        throw new NumberIsTooLargeException(inputSigma[i], boundaries[1][i] - boundaries[0][i], false);\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}