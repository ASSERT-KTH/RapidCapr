{
    "patch": "public static double getTypedPercent(String json) {\n    double count = 0.0;\n    double typedCount = 0.0;\n    try {\n        JSONObject jo = new JSONObject(json);\n        JSONArray items = jo.getJSONArray(\"items\");\n        for (int i = 0; i < items.length(); i++) {\n            JSONObject item = items.getJSONObject(i);\n            count++;\n            if (item.has(\"tags\")) {\n                JSONArray tags = item.getJSONArray(\"tags\");\n                for (int j = 0; j < tags.length(); j++) {\n                    if (tags.getString(j).equals(\"java\")) {\n                        typedCount++;\n                        break;\n                    }\n                }\n            }\n        }\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n    return (typedCount / count) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..6a9b4bbe 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,30 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    double count = 0.0;\n+    double typedCount = 0.0;\n+    try {\n+        JSONObject jo = new JSONObject(json);\n+        JSONArray items = jo.getJSONArray(\"items\");\n+        for (int i = 0; i < items.length(); i++) {\n+            JSONObject item = items.getJSONObject(i);\n+            count++;\n+            if (item.has(\"tags\")) {\n+                JSONArray tags = item.getJSONArray(\"tags\");\n+                for (int j = 0; j < tags.length(); j++) {\n+                    if (tags.getString(j).equals(\"java\")) {\n+                        typedCount++;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+    return (typedCount / count) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}