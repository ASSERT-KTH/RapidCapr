{
    "patch": "// Make sure this assignment is not in a loop.\nfor (BasicBlock block = ref.getBasicBlock();\n    block != null; block = block.getParent()) {\n  if (block.isFunction) {\n    break;\n  } else if (block.isLoop) {\n    // Make sure this is the only assignment in the loop.\n    int assignments = 0;\n    for (int i = 0; i < block.getStatements().size(); i++) {\n      Statement stmt = block.getStatements().get(i);\n      if (stmt instanceof ExpressionStatement) {\n        Expression expr = ((ExpressionStatement) stmt).getExpression();\n        if (expr instanceof Assignment) {\n          Assignment assign = (Assignment) expr;\n          if (assign.getLeft().matchesName(getName())\n              && (ref == null || ref.getBasicBlock() != block || i < ref.getIndex())) {\n            assignments++;\n          }\n        }\n      }\n    }\n    return assignments <= 1;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..bc951d03 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,30 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+// Make sure this assignment is not in a loop.\n+for (BasicBlock block = ref.getBasicBlock();\n+    block != null; block = block.getParent()) {\n+  if (block.isFunction) {\n+    break;\n+  } else if (block.isLoop) {\n+    // Make sure this is the only assignment in the loop.\n+    int assignments = 0;\n+    for (int i = 0; i < block.getStatements().size(); i++) {\n+      Statement stmt = block.getStatements().get(i);\n+      if (stmt instanceof ExpressionStatement) {\n+        Expression expr = ((ExpressionStatement) stmt).getExpression();\n+        if (expr instanceof Assignment) {\n+          Assignment assign = (Assignment) expr;\n+          if (assign.getLeft().matchesName(getName())\n+              && (ref == null || ref.getBasicBlock() != block || i < ref.getIndex())) {\n+            assignments++;\n+          }\n+        }\n+      }\n+    }\n+    return assignments <= 1;\n+  }\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}