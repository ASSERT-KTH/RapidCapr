{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException,\n        FunctionEvaluationException {\n\n    final double ftol = getFunctionValueAccuracy();\n    clearResult();\n    verifyInterval(min, max);\n\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= ftol) {\n        setResult(min, 0);\n        return getResult();\n    }\n\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= ftol) {\n        setResult(max, 0);\n        return getResult();\n    }\n\n    if (yMin * yMax >= 0) {\n        throw new IllegalArgumentException(\n                \"Function values at endpoints do not have different signs.\" +\n                        \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    }\n\n    double x = Double.NaN;\n    double y;\n\n    double xMidpoint;\n    double yMidpoint;\n\n    int i = 0;\n\n    while (i < getMaximalIterationCount()) {\n\n        // update the interval endpoints\n        xMidpoint = (min + max) * 0.5;\n        yMidpoint = f.value(xMidpoint);\n\n        if (yMidpoint > 0) {\n            max = xMidpoint;\n            yMax = yMidpoint;\n        } else {\n            min = xMidpoint;\n            yMin = yMidpoint;\n        }\n\n        if (max - min <= ftol) {\n            x = xMidpoint;\n            break;\n        }\n\n        ++i;\n    }\n\n    if (Double.isNaN(x)) {\n        throw new MaxIterationsExceededException(getMaximalIterationCount());\n    }\n\n    setResult(x, i);\n    return getResult();\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..e8135727d 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,69 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n+public double solve(double min, double max) throws MaxIterationsExceededException,\n         FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n+\n+    final double ftol = getFunctionValueAccuracy();\n+    clearResult();\n+    verifyInterval(min, max);\n+\n+    double yMin = f.value(min);\n+    if (Math.abs(yMin) <= ftol) {\n+        setResult(min, 0);\n+        return getResult();\n+    }\n+\n+    double yMax = f.value(max);\n+    if (Math.abs(yMax) <= ftol) {\n+        setResult(max, 0);\n+        return getResult();\n+    }\n+\n+    if (yMin * yMax >= 0) {\n+        throw new IllegalArgumentException(\n+                \"Function values at endpoints do not have different signs.\" +\n+                        \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+    }\n+\n+    double x = Double.NaN;\n+    double y;\n+\n+    double xMidpoint;\n+    double yMidpoint;\n+\n+    int i = 0;\n+\n+    while (i < getMaximalIterationCount()) {\n+\n+        // update the interval endpoints\n+        xMidpoint = (min + max) * 0.5;\n+        yMidpoint = f.value(xMidpoint);\n+\n+        if (yMidpoint > 0) {\n+            max = xMidpoint;\n+            yMax = yMidpoint;\n         } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+            min = xMidpoint;\n+            yMin = yMidpoint;\n         }\n \n-        return ret;\n+        if (max - min <= ftol) {\n+            x = xMidpoint;\n+            break;\n+        }\n+\n+        ++i;\n+    }\n+\n+    if (Double.isNaN(x)) {\n+        throw new MaxIterationsExceededException(getMaximalIterationCount());\n     }\n+\n+    setResult(x, i);\n+    return getResult();\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}