{
    "patch": "                int offsetNext = getOffset(nextLocal);\n                if (offsetNext > offsetAdjusted) {\n                    return offsetNext;\n                }\n            } else if ((offsetLocal - offsetAdjusted) > 0) {\n                long nextLocal = previousTransition(instantAdjusted);\n                long nextAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n                int offsetNext = getOffset(nextLocal);\n                if (offsetNext < offsetAdjusted) {\n                    return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..93b372e6 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                int offsetNext = getOffset(nextLocal);\n+                if (offsetNext > offsetAdjusted) {\n+                    return offsetNext;\n+                }\n+            } else if ((offsetLocal - offsetAdjusted) > 0) {\n+                long nextLocal = previousTransition(instantAdjusted);\n+                long nextAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                int offsetNext = getOffset(nextLocal);\n+                if (offsetNext < offsetAdjusted) {\n+                    return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}