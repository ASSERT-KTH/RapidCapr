{
    "patch": "    attachLiteralTypes(n);\n    switch (n.getType()) {\n        case Token.NAME:\n            if (parent.getType() == Token.EXPR_RESULT) {\n                defineVar(n, parent);\n            } else if (parent.getType() == Token.CATCH) {\n                defineCatch(n, parent);\n            }\n            break;\n        case Token.FUNCTION:\n            if (NodeUtil.isFunctionExpression(n) && \n                parent.getType() != Token.TYPEOF && \n                parent.getType() != Token.ASSERT) {\n                defineDeclaredFunction(n, parent);\n            } else if (parent.getType() != Token.NAME) {\n                defineDeclaredFunction(n, parent);\n            }\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n        case Token.LP:\n            if (parent == scope.getRootNode() ||\n                parent.getType() == Token.ASSIGN ||\n                parent.getType() == Token.VAR ||\n                parent.getType() == Token.EXPR_RESULT) {\n                handleFunctionInputs(parent);\n            }\n            break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..14121d91 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,38 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+    attachLiteralTypes(n);\n+    switch (n.getType()) {\n+        case Token.NAME:\n+            if (parent.getType() == Token.EXPR_RESULT) {\n+                defineVar(n, parent);\n+            } else if (parent.getType() == Token.CATCH) {\n+                defineCatch(n, parent);\n+            }\n+            break;\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+            if (NodeUtil.isFunctionExpression(n) && \n+                parent.getType() != Token.TYPEOF && \n+                parent.getType() != Token.ASSERT) {\n+                defineDeclaredFunction(n, parent);\n+            } else if (parent.getType() != Token.NAME) {\n+                defineDeclaredFunction(n, parent);\n+            }\n+            break;\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            defineCatch(n, parent);\n+            break;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineVar(n, parent);\n+            break;\n+        case Token.LP:\n+            if (parent == scope.getRootNode() ||\n+                parent.getType() == Token.ASSIGN ||\n+                parent.getType() == Token.VAR ||\n+                parent.getType() == Token.EXPR_RESULT) {\n+                handleFunctionInputs(parent);\n+            }\n+            break;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}