{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int inputLength = input.length();\n        if (index >= inputLength - 1) {\n            return 0;\n        }\n        char c = input.charAt(index);\n        if (c != '&') {\n            return 0;\n        }\n        int value = 0;\n        int nextIndex = index + 1;\n        if (nextIndex >= inputLength) {\n            return 0;\n        }\n        c = input.charAt(nextIndex);\n        if (c == '#') {\n            boolean hex = false;\n            nextIndex++;\n            if (nextIndex >= inputLength) {\n                return 0;\n            }\n            c = input.charAt(nextIndex);\n            if (c == 'x' || c == 'X') {\n                hex = true;\n                nextIndex++;\n            }\n            int length = 0;\n            int i = nextIndex;\n            while (i < inputLength && input.charAt(i) != ';') {\n                if (i - nextIndex > (hex ? 7 : 5)) {\n                    return 0;\n                }\n                i++;\n                length++;\n            }\n            if (i >= inputLength) {\n                return 0;\n            }\n            if (length == 0) {\n                return 0;\n            }\n            if (input.subSequence(nextIndex, i).charAt(0) == '0' && length > 1) {\n                return 0;\n            }\n            int start = hex ? nextIndex + 1 : nextIndex;\n            try {\n                String entity = input.subSequence(start, i).toString();\n                value = hex ? Integer.parseInt(entity, 16) : Integer.parseInt(entity);\n            } catch (NumberFormatException nfe) {\n                return 0;\n            }\n            if (value < 0 || value > 0x10FFFF) {\n                return 0;\n            }\n            if (Character.isSurrogate((char) value)) {\n                return 0;\n            }\n            out.write(value);\n            return i - index + 1;\n        } else {\n            return 0;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..0d8fdded 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,67 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+        int inputLength = input.length();\n+        if (index >= inputLength - 1) {\n+            return 0;\n+        }\n+        char c = input.charAt(index);\n+        if (c != '&') {\n+            return 0;\n+        }\n+        int value = 0;\n+        int nextIndex = index + 1;\n+        if (nextIndex >= inputLength) {\n+            return 0;\n+        }\n+        c = input.charAt(nextIndex);\n+        if (c == '#') {\n+            boolean hex = false;\n+            nextIndex++;\n+            if (nextIndex >= inputLength) {\n+                return 0;\n             }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n+            c = input.charAt(nextIndex);\n+            if (c == 'x' || c == 'X') {\n+                hex = true;\n+                nextIndex++;\n             }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n+            int length = 0;\n+            int i = nextIndex;\n+            while (i < inputLength && input.charAt(i) != ';') {\n+                if (i - nextIndex > (hex ? 7 : 5)) {\n+                    return 0;\n                 }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+                i++;\n+                length++;\n+            }\n+            if (i >= inputLength) {\n                 return 0;\n             }\n-\n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n+            if (length == 0) {\n+                return 0;\n             }\n-\n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+            if (input.subSequence(nextIndex, i).charAt(0) == '0' && length > 1) {\n+                return 0;\n+            }\n+            int start = hex ? nextIndex + 1 : nextIndex;\n+            try {\n+                String entity = input.subSequence(start, i).toString();\n+                value = hex ? Integer.parseInt(entity, 16) : Integer.parseInt(entity);\n+            } catch (NumberFormatException nfe) {\n+                return 0;\n+            }\n+            if (value < 0 || value > 0x10FFFF) {\n+                return 0;\n+            }\n+            if (Character.isSurrogate((char) value)) {\n+                return 0;\n+            }\n+            out.write(value);\n+            return i - index + 1;\n+        } else {\n+            return 0;\n         }\n-        return 0;\n     }\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape expected:<[\u0080\u009f]> but was:<[\u000f]>",
    "test_result": "FAIL"
}