{
    "patch": "public class AlternativeSum {\n    \n    public static int alternativeSum(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            return 0;\n        }\n        int sum = 0;\n        for (int i = 0; i < arr.length; i += 2) {\n            sum += arr[i];\n            if (i == arr.length - 1) {\n                break;\n            }\n            sum -= arr[i + 1];\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {        \n        ReturnValue values = new ReturnValue();\n        values.setReturnValueFor(int.class, 0);\n        values.setReturnValueFor(Integer.class, 0);\n        values.setReturnValueFor(Object.class, null);\n        values.setReturnValueFor(Iterable.class, null);\n\n        assertEquals(10, alternativeSum(new int[]{1, 2, 3, 4, 5}));\n        assertEquals(-5, alternativeSum(new int[]{1, -2, 3, -4, 5}));\n        assertEquals(0, alternativeSum(new int[]{}));\n        assertEquals(0, alternativeSum(null));\n\n        assertEquals(0, values.returnValueFor(int.class));\n        assertNull(values.returnValueFor(Object.class));\n        assertFalse(((Iterable) values.returnValueFor(Iterable.class)).iterator().hasNext());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..9ddbf265a 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,40 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class AlternativeSum {\n+    \n+    public static int alternativeSum(int[] arr) {\n+        if (arr == null || arr.length == 0) {\n+            return 0;\n+        }\n+        int sum = 0;\n+        for (int i = 0; i < arr.length; i += 2) {\n+            sum += arr[i];\n+            if (i == arr.length - 1) {\n+                break;\n+            }\n+            sum -= arr[i + 1];\n+        }\n+        return sum;\n+    }\n+\n+    public static void main(String[] args) {        \n+        ReturnValue values = new ReturnValue();\n+        values.setReturnValueFor(int.class, 0);\n+        values.setReturnValueFor(Integer.class, 0);\n+        values.setReturnValueFor(Object.class, null);\n+        values.setReturnValueFor(Iterable.class, null);\n+\n+        assertEquals(10, alternativeSum(new int[]{1, 2, 3, 4, 5}));\n+        assertEquals(-5, alternativeSum(new int[]{1, -2, 3, -4, 5}));\n+        assertEquals(0, alternativeSum(new int[]{}));\n+        assertEquals(0, alternativeSum(null));\n+\n+        assertEquals(0, values.returnValueFor(int.class));\n+        assertNull(values.returnValueFor(Object.class));\n+        assertFalse(((Iterable) values.returnValueFor(Iterable.class)).iterator().hasNext());\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}