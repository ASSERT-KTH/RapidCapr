{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (x < 0 || a <= 0) {\n        throw new IllegalArgumentException();\n    }\n    if (x == 0) {\n        return 0;\n    }\n    double gammaValue = Gamma.gamma(a);\n    // Use regularizedGammaQ instead of 1 - regularizedGammaP for small x\n    if (x < 1 || x < a) {\n        return Gamma.regularizedGammaQ(a, x);\n    }\n    // Use series approximation for large a\n    if (a > 100) {\n        return Gamma.regularizedGammaP_series(a, x, 100);\n    }\n    // Use continued fraction approximation for large x\n    if (x > 35) {\n        return Gamma.regularizedGammaP_fraction(a, x, 100);\n    }\n    // Use power series approximation\n    double sum = 1 / gammaValue;\n    double ap = a;\n    double del = sum;\n    int i = 0;\n    while (i < 100 && Math.abs(del) > 10e-15 * Math.abs(sum)) {\n        i++;\n        ap += 1;\n        del = x * del / ap;\n        sum += del;\n    }\n    return sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..cb781a562 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,39 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (x < 0 || a <= 0) {\n+        throw new IllegalArgumentException();\n+    }\n+    if (x == 0) {\n+        return 0;\n+    }\n+    double gammaValue = Gamma.gamma(a);\n+    // Use regularizedGammaQ instead of 1 - regularizedGammaP for small x\n+    if (x < 1 || x < a) {\n+        return Gamma.regularizedGammaQ(a, x);\n+    }\n+    // Use series approximation for large a\n+    if (a > 100) {\n+        return Gamma.regularizedGammaP_series(a, x, 100);\n+    }\n+    // Use continued fraction approximation for large x\n+    if (x > 35) {\n+        return Gamma.regularizedGammaP_fraction(a, x, 100);\n+    }\n+    // Use power series approximation\n+    double sum = 1 / gammaValue;\n+    double ap = a;\n+    double del = sum;\n+    int i = 0;\n+    while (i < 100 && Math.abs(del) > 10e-15 * Math.abs(sum)) {\n+        i++;\n+        ap += 1;\n+        del = x * del / ap;\n+        sum += del;\n+    }\n+    return sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}