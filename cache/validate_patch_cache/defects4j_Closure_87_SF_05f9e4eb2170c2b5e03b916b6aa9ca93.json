{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node onlyChild = n.getFirstChild();\n\n        // Do not fold EXPR_RESULTs if the parent is a function and the child is a string.\n        if (onlyChild.getType() == Token.EXPR_RESULT &&\n            onlyChild.hasOneChild() &&\n            onlyChild.getFirstChild().getType() == Token.STRING &&\n            NodeUtil.isFunction(n.getParent())) {\n          return false;\n        }\n\n        // Do not fold EXPR_RESULT if parent is EXPR_VOID.\n        if (n.getParent() != null && n.getParent().getType() == Token.EXPR_VOID) {\n          return false;\n        }\n\n        // Detect and ignore an EXPR_RESULT node that contains only an IF node.\n        if (onlyChild.getType() == Token.EXPR_RESULT &&\n            onlyChild.hasOneChild() &&\n            onlyChild.getFirstChild().getType() == Token.IF) {\n          return false;\n        }\n\n        return NodeUtil.isExpressionNode(onlyChild);\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..1b5cd8f1 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -519,18 +519,29 @@ public class PeepholeSubstituteAlternateSyntax\n   private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+        Node onlyChild = n.getFirstChild();\n+\n+        // Do not fold EXPR_RESULTs if the parent is a function and the child is a string.\n+        if (onlyChild.getType() == Token.EXPR_RESULT &&\n+            onlyChild.hasOneChild() &&\n+            onlyChild.getFirstChild().getType() == Token.STRING &&\n+            NodeUtil.isFunction(n.getParent())) {\n+          return false;\n+        }\n+\n+        // Do not fold EXPR_RESULT if parent is EXPR_VOID.\n+        if (n.getParent() != null && n.getParent().getType() == Token.EXPR_VOID) {\n+          return false;\n+        }\n+\n+        // Detect and ignore an EXPR_RESULT node that contains only an IF node.\n+        if (onlyChild.getType() == Token.EXPR_RESULT &&\n+            onlyChild.hasOneChild() &&\n+            onlyChild.getFirstChild().getType() == Token.IF) {\n+          return false;\n+        }\n+\n+        return NodeUtil.isExpressionNode(onlyChild);\n       }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}