{
    "patch": "      if (n.isArrowFunction()) {\n          // arrow function can't have a this value.\n          return false;\n      }\n\n      boolean isLvalue = parent.getLastChild() == n;\n      if (isLvalue && NodeUtil.isExpressionAssign(parent)) {\n          Node lhs = parent.getFirstChild();\n          if (lhs.isGetProp() && lhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n          }\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..4090c31f 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,20 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.isArrowFunction()) {\n+          // arrow function can't have a this value.\n+          return false;\n+      }\n+\n+      boolean isLvalue = parent.getLastChild() == n;\n+      if (isLvalue && NodeUtil.isExpressionAssign(parent)) {\n+          Node lhs = parent.getFirstChild();\n+          if (lhs.isGetProp() && lhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+          }\n+      }\n+\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}