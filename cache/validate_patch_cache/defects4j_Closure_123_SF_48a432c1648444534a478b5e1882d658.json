{
    "patch": "public static String fixCode(String code) {\n    String fixedCode = code;\n    Pattern p = Pattern.compile(\"for\\\\s*\\\\(.*\\\\sin\\\\s*.*\\\\)\");\n    Matcher m = p.matcher(fixedCode);\n    while (m.find()) {\n        String match = m.group();\n        int startIndex = m.start();\n        int endIndex = m.end();\n        String toBeReplaced = match.substring(match.indexOf(\"in\") + 2, match.length() - 1);\n        String replacement = \"\";\n        if (toBeReplaced.contains(\".\")) {\n            String[] parts = toBeReplaced.split(\"\\\\.\");\n            String root = parts[0];\n            String rest = String.join(\".\", Arrays.copyOfRange(parts, 1, parts.length));\n            replacement = root + \".contains(\" + rest + \")\";\n        } else {\n            replacement = \"Arrays.asList(\" + toBeReplaced + \").contains\";\n        }\n        fixedCode = fixedCode.substring(0, startIndex) + match.replace(toBeReplaced, replacement) + fixedCode.substring(endIndex);\n        m = p.matcher(fixedCode);\n    }\n    return fixedCode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..30503a7d 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,29 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    String fixedCode = code;\n+    Pattern p = Pattern.compile(\"for\\\\s*\\\\(.*\\\\sin\\\\s*.*\\\\)\");\n+    Matcher m = p.matcher(fixedCode);\n+    while (m.find()) {\n+        String match = m.group();\n+        int startIndex = m.start();\n+        int endIndex = m.end();\n+        String toBeReplaced = match.substring(match.indexOf(\"in\") + 2, match.length() - 1);\n+        String replacement = \"\";\n+        if (toBeReplaced.contains(\".\")) {\n+            String[] parts = toBeReplaced.split(\"\\\\.\");\n+            String root = parts[0];\n+            String rest = String.join(\".\", Arrays.copyOfRange(parts, 1, parts.length));\n+            replacement = root + \".contains(\" + rest + \")\";\n+        } else {\n+            replacement = \"Arrays.asList(\" + toBeReplaced + \").contains\";\n+        }\n+        fixedCode = fixedCode.substring(0, startIndex) + match.replace(toBeReplaced, replacement) + fixedCode.substring(endIndex);\n+        m = p.matcher(fixedCode);\n+    }\n+    return fixedCode;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}