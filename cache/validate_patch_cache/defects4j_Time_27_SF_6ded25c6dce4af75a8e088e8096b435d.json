{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    List<Object> nodesWithLiteralsRemoved = removeLiteralNodes(elementPairs); // remove all Literal nodes\n\n    if (nodesWithLiteralsRemoved.isEmpty()) { // all nodes were literals\n        return new PeriodFormatter(null, null);\n    }\n\n    if (nodesWithLiteralsRemoved.get(0) instanceof Separator) { // the nodes start with Separator\n        Separator sep = (Separator) nodesWithLiteralsRemoved.get(0);\n        nodesWithLiteralsRemoved = nodesWithLiteralsRemoved.subList(1, nodesWithLiteralsRemoved.size());\n        PeriodFormatter f = toFormatter(nodesWithLiteralsRemoved, notPrinter, notParser);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        return new PeriodFormatter(sep, sep);\n    }\n\n    Object[] comp = createComposite(nodesWithLiteralsRemoved);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } \n    if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    }\n    return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n}\n\nprivate static List<Object> removeLiteralNodes(List<Object> elementPairs) {\n    List<Object> result = new ArrayList<>();\n    for (int i = 0; i < elementPairs.size(); ++i) {\n        Object current = elementPairs.get(i);\n        if (current instanceof Separator) {\n            result.add(current);\n        } else { // current is a composite node\n            Object[] comp = ((Composite) current).getElements();\n            if (comp != null) {\n                for (int j = 0; j < comp.length; ++j) {\n                    Object obj = comp[j];\n                    if (!(obj instanceof Literal)) {\n                        result.add(obj);\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..5e1a17d2 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,55 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    List<Object> nodesWithLiteralsRemoved = removeLiteralNodes(elementPairs); // remove all Literal nodes\n+\n+    if (nodesWithLiteralsRemoved.isEmpty()) { // all nodes were literals\n+        return new PeriodFormatter(null, null);\n+    }\n+\n+    if (nodesWithLiteralsRemoved.get(0) instanceof Separator) { // the nodes start with Separator\n+        Separator sep = (Separator) nodesWithLiteralsRemoved.get(0);\n+        nodesWithLiteralsRemoved = nodesWithLiteralsRemoved.subList(1, nodesWithLiteralsRemoved.size());\n+        PeriodFormatter f = toFormatter(nodesWithLiteralsRemoved, notPrinter, notParser);\n+        sep = sep.finish(f.getPrinter(), f.getParser());\n+        return new PeriodFormatter(sep, sep);\n+    }\n+\n+    Object[] comp = createComposite(nodesWithLiteralsRemoved);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } \n+    if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    }\n+    return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+}\n+\n+private static List<Object> removeLiteralNodes(List<Object> elementPairs) {\n+    List<Object> result = new ArrayList<>();\n+    for (int i = 0; i < elementPairs.size(); ++i) {\n+        Object current = elementPairs.get(i);\n+        if (current instanceof Separator) {\n+            result.add(current);\n+        } else { // current is a composite node\n+            Object[] comp = ((Composite) current).getElements();\n+            if (comp != null) {\n+                for (int j = 0; j < comp.length; ++j) {\n+                    Object obj = comp[j];\n+                    if (!(obj instanceof Literal)) {\n+                        result.add(obj);\n+                    }\n+                }\n+            }\n         }\n     }\n+    return result;\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}