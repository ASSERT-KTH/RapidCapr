{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isLValue(n)) {\n        Node lValueParent = n.getParent();\n        if (NodeUtil.isGet(lValueParent)) {\n          Node propAccess = lValueParent.getFirstChild();\n          if (propAccess.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node objAccess = propAccess.getFirstChild();\n          if (NodeUtil.isName(objAccess) &&\n              scope.getDeclaredName(objAccess.getString()) == null) {\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..3d43d774 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,21 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(n)) {\n+        Node lValueParent = n.getParent();\n+        if (NodeUtil.isGet(lValueParent)) {\n+          Node propAccess = lValueParent.getFirstChild();\n+          if (propAccess.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node objAccess = propAccess.getFirstChild();\n+          if (NodeUtil.isName(objAccess) &&\n+              scope.getDeclaredName(objAccess.getString()) == null) {\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}