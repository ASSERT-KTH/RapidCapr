{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            int[] newValues = Arrays.copyOf(values, values.length);\n            newValues[fieldIndex] += valueToAdd;\n\n            while (!partial.getChronology().isValidPartial(new MonthDay(newValues[DateTimeFieldType.MONTH_OF_YEAR], newValues[DateTimeFieldType.DAY_OF_MONTH]))) {\n                if (valueToAdd > 0) {\n                    newValues[fieldIndex] -= 1;\n                } else {\n                    newValues[fieldIndex] += 1;\n                }\n            }\n\n            return newValues;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..67cfc233 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,14 +206,21 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            int[] newValues = Arrays.copyOf(values, values.length);\n+            newValues[fieldIndex] += valueToAdd;\n+\n+            while (!partial.getChronology().isValidPartial(new MonthDay(newValues[DateTimeFieldType.MONTH_OF_YEAR], newValues[DateTimeFieldType.DAY_OF_MONTH]))) {\n+                if (valueToAdd > 0) {\n+                    newValues[fieldIndex] -= 1;\n+                } else {\n+                    newValues[fieldIndex] += 1;\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+\n+            return newValues;\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}