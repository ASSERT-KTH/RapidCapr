{
    "patch": "        boolean isArrayAccessExpr = false;\n        String arrayName = null;\n        int arrayIndex = -1;\n        if (rhsNode instanceof ArrayAccessExpr) {\n            isArrayAccessExpr = true;\n            ArrayAccessExpr arrayAccessExpr = (ArrayAccessExpr) rhsNode;\n            arrayIndex = arrayAccessExpr.getIndex().asInt();\n            arrayName = arrayAccessExpr.getName().toString();\n        }\n        String infixExpr = \"\";\n        if (isArrayAccessExpr) {\n            infixExpr = String.format(\"%s[%d] %s %s\", arrayName, arrayIndex, operatorSymbol, lhsName);\n        } else {\n            infixExpr = String.format(\"%s %s %s\", rhsNode.toString(), operatorSymbol, lhsName);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}