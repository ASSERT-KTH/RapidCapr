{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n\n    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArg == null) {\n        actualTypeArg = typeVariable.getGenericDeclaration().getTypeParameters()[0];\n    }\n\n    Stack<Type> stack = new Stack<>();\n    stack.push(actualTypeArg);\n    while (!stack.isEmpty()) {\n        Type currentType = stack.pop();\n        if (currentType instanceof TypeVariable) {\n            TypeVariable<?> tv = (TypeVariable<?>) currentType;\n            registerTypeVariablesOn(tv.getBounds()[0]);\n            stack.push(tv.getBounds()[0]);\n        } else if (currentType instanceof ParameterizedType) {\n            ParameterizedType pt = (ParameterizedType) currentType;\n            Type[] actualTypeArgs = pt.getActualTypeArguments();\n            for (Type arg : actualTypeArgs) {\n                registerTypeVariablesOn(arg);\n                stack.push(arg);\n            }\n        } else if (currentType instanceof WildcardType) {\n            WildcardType wt = (WildcardType) currentType;\n            Type[] upperBounds = wt.getUpperBounds();\n            Type[] lowerBounds = wt.getLowerBounds();\n            if (upperBounds.length > 0) {\n                registerTypeVariablesOn(upperBounds[0]);\n                stack.push(upperBounds[0]);\n            } else if (lowerBounds.length > 0) {\n                registerTypeVariablesOn(lowerBounds[0]);\n                stack.push(lowerBounds[0]);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..f9d9fc78a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,46 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+\n+    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArg == null) {\n+        actualTypeArg = typeVariable.getGenericDeclaration().getTypeParameters()[0];\n+    }\n+\n+    Stack<Type> stack = new Stack<>();\n+    stack.push(actualTypeArg);\n+    while (!stack.isEmpty()) {\n+        Type currentType = stack.pop();\n+        if (currentType instanceof TypeVariable) {\n+            TypeVariable<?> tv = (TypeVariable<?>) currentType;\n+            registerTypeVariablesOn(tv.getBounds()[0]);\n+            stack.push(tv.getBounds()[0]);\n+        } else if (currentType instanceof ParameterizedType) {\n+            ParameterizedType pt = (ParameterizedType) currentType;\n+            Type[] actualTypeArgs = pt.getActualTypeArguments();\n+            for (Type arg : actualTypeArgs) {\n+                registerTypeVariablesOn(arg);\n+                stack.push(arg);\n+            }\n+        } else if (currentType instanceof WildcardType) {\n+            WildcardType wt = (WildcardType) currentType;\n+            Type[] upperBounds = wt.getUpperBounds();\n+            Type[] lowerBounds = wt.getLowerBounds();\n+            if (upperBounds.length > 0) {\n+                registerTypeVariablesOn(upperBounds[0]);\n+                stack.push(upperBounds[0]);\n+            } else if (lowerBounds.length > 0) {\n+                registerTypeVariablesOn(lowerBounds[0]);\n+                stack.push(lowerBounds[0]);\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}