{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    Set<String> referencedArgs = new HashSet<>();\n\n    // Build a set of referenced arguments.\n    NodeUtil.visitPreOrder(function, new NodeUtil.Visitor() {\n      @Override\n      public void visit(Node node) {\n        if (node.isParamList()) {\n          for (Node arg : node.children()) {\n            referencedArgs.add(arg.getString());\n          }\n        } else if (node.isName()) {\n          String name = node.getString();\n          if (referenced.contains(fnScope.getVar(name))) {\n            // This node is referenced, so if it is an argument, add it to the set.\n            Node parent = node.getParent();\n            if (parent.isFunction()\n                && parent.getFirstChild() == node) {\n              // This is the function name.\n            } else if (parent.isParamList()) {\n              // This is a formal parameter.\n              referencedArgs.add(name);\n            }\n          }\n        }\n      }\n    });\n\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        if (!referencedArgs.contains(lastArg.getString())) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..2849f8f4 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,57 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    Set<String> referencedArgs = new HashSet<>();\n+\n+    // Build a set of referenced arguments.\n+    NodeUtil.visitPreOrder(function, new NodeUtil.Visitor() {\n+      @Override\n+      public void visit(Node node) {\n+        if (node.isParamList()) {\n+          for (Node arg : node.children()) {\n+            referencedArgs.add(arg.getString());\n+          }\n+        } else if (node.isName()) {\n+          String name = node.getString();\n+          if (referenced.contains(fnScope.getVar(name))) {\n+            // This node is referenced, so if it is an argument, add it to the set.\n+            Node parent = node.getParent();\n+            if (parent.isFunction()\n+                && parent.getFirstChild() == node) {\n+              // This is the function name.\n+            } else if (parent.isParamList()) {\n+              // This is a formal parameter.\n+              referencedArgs.add(name);\n+            }\n+          }\n+        }\n+      }\n+    });\n+\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        if (!referencedArgs.contains(lastArg.getString())) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}