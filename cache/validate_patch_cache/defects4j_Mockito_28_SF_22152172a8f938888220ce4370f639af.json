{
    "patch": "            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (mockCandidate != null && field.getType().isAssignableFrom(mockCandidate.getClass())) {\n                field.setAccessible(true);\n                try {\n                    Object existingFieldValue = field.get(fieldInstance);\n                    if (existingFieldValue != null && !existingFieldValue.getClass().equals(mockCandidate.getClass())) {\n                        // Skip injection if the field already has a value of different type\n                        continue;\n                    }\n                    field.set(fieldInstance, mockCandidate);\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..56090245a 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,21 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (mockCandidate != null && field.getType().isAssignableFrom(mockCandidate.getClass())) {\n+                field.setAccessible(true);\n+                try {\n+                    Object existingFieldValue = field.get(fieldInstance);\n+                    if (existingFieldValue != null && !existingFieldValue.getClass().equals(mockCandidate.getClass())) {\n+                        // Skip injection if the field already has a value of different type\n+                        continue;\n+                    }\n+                    field.set(fieldInstance, mockCandidate);\n+                } catch (IllegalAccessException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}