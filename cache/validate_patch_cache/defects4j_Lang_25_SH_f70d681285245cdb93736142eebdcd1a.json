{
    "patch": "// Fixed hunk\nStringBuffer retBuf = new StringBuffer(inString.length()*2);\nfor (int i = 0; i < inString.length(); i++)\n{\n    char c = inString.charAt(i);\n    switch (c)\n    {\n        case '\\'':\n            retBuf.append(\"\\\\'\");\n            break;\n        case '\\\"':\n            retBuf.append(\"\\\\\\\"\");\n            break;\n        case '\\\\':\n            retBuf.append(\"\\\\\\\\\");\n            break;\n        case '\\n':\n            retBuf.append(\"\\\\n\");\n            break;\n        case '\\r':\n            retBuf.append(\"\\\\r\");\n            break;\n        case '\\t':\n            retBuf.append(\"\\\\t\");\n            break;\n        case '\\b':\n            retBuf.append(\"\\\\b\");\n            break;\n        case '\\f':\n            retBuf.append(\"\\\\f\");\n            break;\n        case '/':\n            retBuf.append(\"\\\\/\");\n            break;\n        default:\n            // Reference: http://www.unicode.org/versions/Unicode5.1.0/\n            if ((c >= '\\u0000' && c <= '\\u001F') || (c >= '\\u007F' && c <= '\\uFFFF'))\n            {\n                String hex = Integer.toHexString(c);\n                hex = (\"0000\" + hex).substring(hex.length());\n                retBuf.append(\"\\\\u\").append(hex);\n            }\n            else\n            {\n                retBuf.append(c);\n            }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}