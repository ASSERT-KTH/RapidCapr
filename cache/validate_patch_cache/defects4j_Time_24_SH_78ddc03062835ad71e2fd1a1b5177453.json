{
    "patch": "            if (millis < iMillis || (millis > iMillis && savedFields[count - 1].iField.getType().equals(DateTimeFieldType.millisOfSecond()))) {\n                throw new IllegalFieldValueException(\n                    DateTimeFieldType.millisOfSecond(), Long.valueOf(millis).toString());\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..3449d8c5 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,10 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (millis < iMillis || (millis > iMillis && savedFields[count - 1].iField.getType().equals(DateTimeFieldType.millisOfSecond()))) {\n+                throw new IllegalFieldValueException(\n+                    DateTimeFieldType.millisOfSecond(), Long.valueOf(millis).toString());\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: MONTHM1b expected:<-1> but was:<0>",
    "test_result": "FAIL"
}