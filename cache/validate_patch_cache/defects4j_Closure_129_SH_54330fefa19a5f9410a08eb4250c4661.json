{
    "patch": "// ignore any cast nodes to get the actual callee\nwhile (first != null && first.isCast()) {\n  first = first.getFirstChild();\n}\n\nif (!NodeUtil.isGet(first)) {\n  n.putBooleanProp(Node.FREE_CALL, true);\n}\n\n// Keep track of the context in which eval is called. It is important\n// to distinguish between \"(0, eval)()\" and \"eval()\".\nif (first.isString()) {\n  try {\n    String callee = first.getString();\n    if (\"eval\".equals(callee)) {\n      // check if the call is a direct eval call\n      if (NodeUtil.isDirectCallNode(n)) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }\n  } catch (Exception e) {}\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..4b5b338e 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,28 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+// ignore any cast nodes to get the actual callee\n+while (first != null && first.isCast()) {\n+  first = first.getFirstChild();\n+}\n+\n+if (!NodeUtil.isGet(first)) {\n+  n.putBooleanProp(Node.FREE_CALL, true);\n+}\n+\n+// Keep track of the context in which eval is called. It is important\n+// to distinguish between \"(0, eval)()\" and \"eval()\".\n+if (first.isString()) {\n+  try {\n+    String callee = first.getString();\n+    if (\"eval\".equals(callee)) {\n+      // check if the call is a direct eval call\n+      if (NodeUtil.isDirectCallNode(n)) {\n+        first.putBooleanProp(Node.DIRECT_EVAL, true);\n+      }\n+    }\n+  } catch (Exception e) {}\n+}\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}