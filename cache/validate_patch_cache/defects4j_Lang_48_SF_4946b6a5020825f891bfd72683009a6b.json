{
    "patch": "import java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.math.BigDecimal;\nimport java.util.ArrayDeque;\nimport java.util.Arrays;\nimport java.util.Deque;\nimport java.util.IdentityHashMap;\nimport java.util.Map;\n\npublic class EqualsBuilder {\n    \n    private static final ThreadLocal<Deque<Map<Object, Object>>> REGISTRY = ThreadLocal.withInitial(ArrayDeque::new);\n    \n    private boolean isEquals = true;\n    \n    public EqualsBuilder() {\n        REGISTRY.get().push(new IdentityHashMap<>());\n    }\n    \n    private boolean isRegistered(Object lhs, Object rhs) {\n        return REGISTRY.get().peek().containsKey(lhs) && REGISTRY.get().peek().get(lhs) == rhs;\n    }\n    \n    private void register(Object lhs, Object rhs) {\n        REGISTRY.get().peek().put(lhs, rhs);\n    }\n    \n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (!isEquals) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            isEquals = false;\n            return this;\n        }\n        if (isRegistered(lhs, rhs)) {\n            return this;\n        }\n        register(lhs, rhs);\n        Class<?> lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            isEquals = lhs.equals(rhs);\n            return this;\n        }\n        if (lhsClass != rhs.getClass()) {\n            isEquals = false;\n            return this;\n        }\n        if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // Array of non-simple type\n            appendArray(lhs, rhs);\n        }\n        return this;\n    }\n    \n    private void appendArray(Object lhs, Object rhs) {\n        int lhsLength = Array.getLength(lhs);\n        int rhsLength = Array.getLength(rhs);\n        if (lhsLength != rhsLength) {\n            isEquals = false;\n            return;\n        }\n        for (int i = 0; i < lhsLength; i++) {\n            append(Array.get(lhs, i), Array.get(rhs, i));\n            if (!isEquals) {\n                return;\n            }\n        }\n    }\n    \n    public EqualsBuilder append(long lhs, long rhs) {\n        return append(Long.valueOf(lhs), Long.valueOf(rhs));\n    }\n\n    public EqualsBuilder append(int lhs, int rhs) {\n        return append(Integer.valueOf(lhs), Integer.valueOf(rhs));\n    }\n\n    public EqualsBuilder append(short lhs, short rhs) {\n        return append(Short.valueOf(lhs), Short.valueOf(rhs));\n    }\n\n    public EqualsBuilder append(char lhs, char rhs) {\n        return append(Character.valueOf(lhs), Character.valueOf(rhs));\n    }\n\n    public EqualsBuilder append(byte lhs, byte rhs) {\n        return append(Byte.valueOf(lhs), Byte.valueOf(rhs));\n    }\n\n    public EqualsBuilder append(double lhs, double rhs) {\n        return append(Double.valueOf(lhs), Double.valueOf(rhs));\n    }\n\n    public EqualsBuilder append(float lhs, float rhs) {\n        return append(Float.valueOf(lhs), Float.valueOf(rhs));\n    }\n\n    public EqualsBuilder append(boolean lhs, boolean rhs) {\n        return append(Boolean.valueOf(lhs), Boolean.valueOf(rhs));\n    }\n\n    public EqualsBuilder append(BigDecimal lhs, BigDecimal rhs) {\n        return append((Object) lhs, (Object) rhs);\n    }\n\n    public EqualsBuilder append(String lhs, String rhs) {\n        return append((Object) lhs, (Object) rhs);\n    }\n    \n    public EqualsBuilder append(Object[] lhs, Object[] rhs) {\n        if (!isEquals) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            isEquals = false;\n            return this;\n        }\n        if (isRegistered(lhs, rhs)) {\n            return this;\n        }\n        register(lhs, rhs);\n        int lhsLength = lhs.length;\n        int rhsLength = rhs.length;\n        if (lhsLength != rhsLength) {\n            isEquals = false;\n            return this;\n        }\n        for (int i = 0; i < lhsLength; i++) {\n            append(lhs[i], rhs[i]);\n            if (!isEquals) {\n                return this;\n            }\n        }\n        return this;\n    }\n    \n    public EqualsBuilder append(long[] lhs, long[] rhs) {\n        if (!isEquals) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            isEquals = false;\n            return this;\n        }\n        if (isRegistered(lhs, rhs)) {\n            return this;\n        }\n        register(lhs, rhs);\n        int lhsLength = lhs.length;\n        int rhsLength = rhs.length;\n        if (lhsLength != rhsLength) {\n            isEquals = false;\n            return this;\n        }\n        for (int i = 0; i < lhsLength; i++) {\n            append(lhs[i], rhs[i]);\n            if (!isEquals) {\n                return this;\n            }\n        }\n        return this;\n    }\n    \n    public EqualsBuilder append(int[] lhs, int[] rhs) {\n        if (!isEquals) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            isEquals = false;\n            return this;\n        }\n        if (isRegistered(lhs, rhs)) {\n            return this;\n        }\n        register(lhs, rhs);\n        int lhsLength = lhs.length;\n        int rhsLength = rhs.length;\n        if (lhsLength != rhsLength) {\n            isEquals = false;\n            return this;\n        }\n        for (int i = 0; i < lhsLength; i++) {\n            append(lhs[i], rhs[i]);\n            if (!isEquals) {\n                return this;\n            }\n        }\n        return this;\n    }\n    \n    public EqualsBuilder append(short[] lhs, short[] rhs) {\n        if (!isEquals) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            isEquals = false;\n            return this;\n        }\n        if (isRegistered(lhs, rhs)) {\n            return this;\n        }\n        register(lhs, rhs);\n        int lhsLength = lhs.length;\n        int rhsLength = rhs.length;\n        if (lhsLength != rhsLength) {\n            isEquals = false;\n            return this;\n        }\n        for (int i = 0; i < lhsLength; i++) {\n            append(lhs[i], rhs[i]);\n            if (!isEquals) {\n                return this;\n            }\n        }\n        return this;\n    }\n    \n    public EqualsBuilder append(char[] lhs, char[] rhs) {\n        if (!isEquals) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            isEquals = false;\n            return this;\n        }\n        if (isRegistered(lhs, rhs)) {\n            return this;\n        }\n        register(lhs, rhs);\n        int lhsLength = lhs.length;\n        int rhsLength = rhs.length;\n        if (lhsLength != rhsLength) {\n            isEquals = false;\n            return this;\n        }\n        for (int i = 0; i < lhsLength; i++) {\n            append(lhs[i], rhs[i]);\n            if (!isEquals) {\n                return this;\n            }\n        }\n        return this;\n    }\n    \n    public EqualsBuilder append(byte[] lhs, byte[] rhs) {\n        if (!isEquals) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            isEquals = false;\n            return this;\n        }\n        if (isRegistered(lhs, rhs)) {\n            return this;\n        }\n        register(lhs, rhs);\n        int lhsLength = lhs.length;\n        int rhsLength = rhs.length;\n        if (lhsLength != rhsLength) {\n            isEquals = false;\n            return this;\n        }\n        for (int i = 0; i < lhsLength; i++) {\n            append(lhs[i], rhs[i]);\n            if (!isEquals) {\n                return this;\n            }\n        }\n        return this;\n    }\n    \n    public EqualsBuilder append(double[] lhs, double[] rhs) {\n        if (!isEquals) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            isEquals = false;\n            return this;\n        }\n        if (isRegistered(lhs, rhs)) {\n            return this;\n        }\n        register(lhs, rhs);\n        int lhsLength = lhs.length;\n        int rhsLength = rhs.length;\n        if (lhsLength != rhsLength) {\n            isEquals = false;\n            return this;\n        }\n        for (int i = 0; i < lhsLength; i++) {\n            append(lhs[i], rhs[i]);\n            if (!isEquals) {\n                return this;\n            }\n        }\n        return this;\n    }\n    \n    public EqualsBuilder append(float[] lhs, float[] rhs) {\n        if (!isEquals) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            isEquals = false;\n            return this;\n        }\n        if (isRegistered(lhs, rhs)) {\n            return this;\n        }\n        register(lhs, rhs);\n        int lhsLength = lhs.length;\n        int rhsLength = rhs.length;\n        if (lhsLength != rhsLength) {\n            isEquals = false;\n            return this;\n        }\n        for (int i = 0; i < lhsLength; i++) {\n            append(lhs[i], rhs[i]);\n            if (!isEquals) {\n                return this;\n            }\n        }\n        return this;\n    }\n    \n    public EqualsBuilder append(boolean[] lhs, boolean[] rhs) {\n        if (!isEquals) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            isEquals = false;\n            return this;\n        }\n        if (isRegistered(lhs, rhs)) {\n            return this;\n        }\n        register(lhs, rhs);\n        int lhsLength = lhs.length;\n        int rhsLength = rhs.length;\n        if (lhsLength != rhsLength) {\n            isEquals = false;\n            return this;\n        }\n        for (int i = 0; i < lhsLength; i++) {\n            append(lhs[i], rhs[i]);\n            if (!isEquals) {\n                return this;\n            }\n        }\n        return this;\n    }\n    \n    public EqualsBuilder appendDeep(Object lhs, Object rhs) {\n        if (!isEquals) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            isEquals = false;\n            return this;\n        }\n        Class<?> lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            isEquals = lhs.equals(rhs);\n            return this;\n        }\n        if (lhsClass != rhs.getClass()) {\n            isEquals = false;\n            return this;\n        }\n        appendDeepArray(lhs, rhs);\n        return this;\n    }\n    \n    private void appendDeepArray(Object lhs, Object rhs) {\n        int lhsLength = Array.getLength(lhs);\n        int rhsLength = Array.getLength(rhs);\n        if (lhsLength != rhsLength) {\n            isEquals = false;\n            return;\n        }\n        for (int i = 0; i < lhsLength; i++) {\n            appendDeep(Array.get(lhs, i), Array.get(rhs, i));\n            if (!isEquals) {\n                return;\n            }\n        }\n    }\n    \n    public EqualsBuilder appendSuper(boolean superEquals) {\n        if (!isEquals) {\n            return this;\n        }\n        isEquals = superEquals;\n        return this;\n    }\n    \n    public EqualsBuilder reflectionAppend(Object lhs, Object rhs) {\n        if (!isEquals) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            isEquals = false;\n            return this;\n        }\n        Class<?> lhsClass = lhs.getClass();\n        if (lhsClass.isInstance(rhs)) {\n            Field[] fields = lhsClass.getDeclaredFields();\n            AccessibleObject.setAccessible(fields, true);\n            for (Field f : fields) {\n                try {\n                    Object lhsFieldValue = f.get(lhs);\n                    Object rhsFieldValue = f.get(rhs);\n                    append(lhsFieldValue, rhsFieldValue);\n                    if (!isEquals) {\n                        return this;\n                    }\n                } catch (IllegalAccessException ex) {\n                    throw new InternalError(\"Unexpected IllegalAccessException\");\n                }\n            }\n        } else {\n            isEquals = false;\n        }\n        return this;\n    }\n    \n    public boolean isEquals() {\n        try {\n            return isEquals;\n        } finally {\n            REGISTRY.get().pop();\n        }\n    }\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..070b12a3 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,28 +364,58 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n+import java.lang.reflect.Array;\n+import java.lang.reflect.Field;\n+import java.math.BigDecimal;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+\n+public class EqualsBuilder {\n+    \n+    private static final ThreadLocal<Deque<Map<Object, Object>>> REGISTRY = ThreadLocal.withInitial(ArrayDeque::new);\n+    \n+    private boolean isEquals = true;\n+    \n+    public EqualsBuilder() {\n+        REGISTRY.get().push(new IdentityHashMap<>());\n+    }\n+    \n+    private boolean isRegistered(Object lhs, Object rhs) {\n+        return REGISTRY.get().peek().containsKey(lhs) && REGISTRY.get().peek().get(lhs) == rhs;\n+    }\n+    \n+    private void register(Object lhs, Object rhs) {\n+        REGISTRY.get().peek().put(lhs, rhs);\n+    }\n+    \n     public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n+        if (!isEquals) {\n             return this;\n         }\n         if (lhs == rhs) {\n             return this;\n         }\n         if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n+            isEquals = false;\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n+        if (isRegistered(lhs, rhs)) {\n+            return this;\n+        }\n+        register(lhs, rhs);\n+        Class<?> lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n+            isEquals = lhs.equals(rhs);\n+            return this;\n         }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n+        if (lhsClass != rhs.getClass()) {\n+            isEquals = false;\n+            return this;\n+        }\n+        if (lhs instanceof long[]) {\n             append((long[]) lhs, (long[]) rhs);\n         } else if (lhs instanceof int[]) {\n             append((int[]) lhs, (int[]) rhs);\n@@ -402,11 +432,426 @@ public class EqualsBuilder {\n         } else if (lhs instanceof boolean[]) {\n             append((boolean[]) lhs, (boolean[]) rhs);\n         } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            // Array of non-simple type\n+            appendArray(lhs, rhs);\n+        }\n+        return this;\n+    }\n+    \n+    private void appendArray(Object lhs, Object rhs) {\n+        int lhsLength = Array.getLength(lhs);\n+        int rhsLength = Array.getLength(rhs);\n+        if (lhsLength != rhsLength) {\n+            isEquals = false;\n+            return;\n+        }\n+        for (int i = 0; i < lhsLength; i++) {\n+            append(Array.get(lhs, i), Array.get(rhs, i));\n+            if (!isEquals) {\n+                return;\n+            }\n+        }\n+    }\n+    \n+    public EqualsBuilder append(long lhs, long rhs) {\n+        return append(Long.valueOf(lhs), Long.valueOf(rhs));\n+    }\n+\n+    public EqualsBuilder append(int lhs, int rhs) {\n+        return append(Integer.valueOf(lhs), Integer.valueOf(rhs));\n+    }\n+\n+    public EqualsBuilder append(short lhs, short rhs) {\n+        return append(Short.valueOf(lhs), Short.valueOf(rhs));\n+    }\n+\n+    public EqualsBuilder append(char lhs, char rhs) {\n+        return append(Character.valueOf(lhs), Character.valueOf(rhs));\n+    }\n+\n+    public EqualsBuilder append(byte lhs, byte rhs) {\n+        return append(Byte.valueOf(lhs), Byte.valueOf(rhs));\n+    }\n+\n+    public EqualsBuilder append(double lhs, double rhs) {\n+        return append(Double.valueOf(lhs), Double.valueOf(rhs));\n+    }\n+\n+    public EqualsBuilder append(float lhs, float rhs) {\n+        return append(Float.valueOf(lhs), Float.valueOf(rhs));\n+    }\n+\n+    public EqualsBuilder append(boolean lhs, boolean rhs) {\n+        return append(Boolean.valueOf(lhs), Boolean.valueOf(rhs));\n+    }\n+\n+    public EqualsBuilder append(BigDecimal lhs, BigDecimal rhs) {\n+        return append((Object) lhs, (Object) rhs);\n+    }\n+\n+    public EqualsBuilder append(String lhs, String rhs) {\n+        return append((Object) lhs, (Object) rhs);\n+    }\n+    \n+    public EqualsBuilder append(Object[] lhs, Object[] rhs) {\n+        if (!isEquals) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            isEquals = false;\n+            return this;\n+        }\n+        if (isRegistered(lhs, rhs)) {\n+            return this;\n+        }\n+        register(lhs, rhs);\n+        int lhsLength = lhs.length;\n+        int rhsLength = rhs.length;\n+        if (lhsLength != rhsLength) {\n+            isEquals = false;\n+            return this;\n+        }\n+        for (int i = 0; i < lhsLength; i++) {\n+            append(lhs[i], rhs[i]);\n+            if (!isEquals) {\n+                return this;\n+            }\n+        }\n+        return this;\n+    }\n+    \n+    public EqualsBuilder append(long[] lhs, long[] rhs) {\n+        if (!isEquals) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            isEquals = false;\n+            return this;\n+        }\n+        if (isRegistered(lhs, rhs)) {\n+            return this;\n+        }\n+        register(lhs, rhs);\n+        int lhsLength = lhs.length;\n+        int rhsLength = rhs.length;\n+        if (lhsLength != rhsLength) {\n+            isEquals = false;\n+            return this;\n+        }\n+        for (int i = 0; i < lhsLength; i++) {\n+            append(lhs[i], rhs[i]);\n+            if (!isEquals) {\n+                return this;\n+            }\n+        }\n+        return this;\n+    }\n+    \n+    public EqualsBuilder append(int[] lhs, int[] rhs) {\n+        if (!isEquals) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            isEquals = false;\n+            return this;\n+        }\n+        if (isRegistered(lhs, rhs)) {\n+            return this;\n+        }\n+        register(lhs, rhs);\n+        int lhsLength = lhs.length;\n+        int rhsLength = rhs.length;\n+        if (lhsLength != rhsLength) {\n+            isEquals = false;\n+            return this;\n+        }\n+        for (int i = 0; i < lhsLength; i++) {\n+            append(lhs[i], rhs[i]);\n+            if (!isEquals) {\n+                return this;\n+            }\n         }\n         return this;\n     }\n+    \n+    public EqualsBuilder append(short[] lhs, short[] rhs) {\n+        if (!isEquals) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            isEquals = false;\n+            return this;\n+        }\n+        if (isRegistered(lhs, rhs)) {\n+            return this;\n+        }\n+        register(lhs, rhs);\n+        int lhsLength = lhs.length;\n+        int rhsLength = rhs.length;\n+        if (lhsLength != rhsLength) {\n+            isEquals = false;\n+            return this;\n+        }\n+        for (int i = 0; i < lhsLength; i++) {\n+            append(lhs[i], rhs[i]);\n+            if (!isEquals) {\n+                return this;\n+            }\n+        }\n+        return this;\n+    }\n+    \n+    public EqualsBuilder append(char[] lhs, char[] rhs) {\n+        if (!isEquals) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            isEquals = false;\n+            return this;\n+        }\n+        if (isRegistered(lhs, rhs)) {\n+            return this;\n+        }\n+        register(lhs, rhs);\n+        int lhsLength = lhs.length;\n+        int rhsLength = rhs.length;\n+        if (lhsLength != rhsLength) {\n+            isEquals = false;\n+            return this;\n+        }\n+        for (int i = 0; i < lhsLength; i++) {\n+            append(lhs[i], rhs[i]);\n+            if (!isEquals) {\n+                return this;\n+            }\n+        }\n+        return this;\n+    }\n+    \n+    public EqualsBuilder append(byte[] lhs, byte[] rhs) {\n+        if (!isEquals) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            isEquals = false;\n+            return this;\n+        }\n+        if (isRegistered(lhs, rhs)) {\n+            return this;\n+        }\n+        register(lhs, rhs);\n+        int lhsLength = lhs.length;\n+        int rhsLength = rhs.length;\n+        if (lhsLength != rhsLength) {\n+            isEquals = false;\n+            return this;\n+        }\n+        for (int i = 0; i < lhsLength; i++) {\n+            append(lhs[i], rhs[i]);\n+            if (!isEquals) {\n+                return this;\n+            }\n+        }\n+        return this;\n+    }\n+    \n+    public EqualsBuilder append(double[] lhs, double[] rhs) {\n+        if (!isEquals) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            isEquals = false;\n+            return this;\n+        }\n+        if (isRegistered(lhs, rhs)) {\n+            return this;\n+        }\n+        register(lhs, rhs);\n+        int lhsLength = lhs.length;\n+        int rhsLength = rhs.length;\n+        if (lhsLength != rhsLength) {\n+            isEquals = false;\n+            return this;\n+        }\n+        for (int i = 0; i < lhsLength; i++) {\n+            append(lhs[i], rhs[i]);\n+            if (!isEquals) {\n+                return this;\n+            }\n+        }\n+        return this;\n+    }\n+    \n+    public EqualsBuilder append(float[] lhs, float[] rhs) {\n+        if (!isEquals) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            isEquals = false;\n+            return this;\n+        }\n+        if (isRegistered(lhs, rhs)) {\n+            return this;\n+        }\n+        register(lhs, rhs);\n+        int lhsLength = lhs.length;\n+        int rhsLength = rhs.length;\n+        if (lhsLength != rhsLength) {\n+            isEquals = false;\n+            return this;\n+        }\n+        for (int i = 0; i < lhsLength; i++) {\n+            append(lhs[i], rhs[i]);\n+            if (!isEquals) {\n+                return this;\n+            }\n+        }\n+        return this;\n+    }\n+    \n+    public EqualsBuilder append(boolean[] lhs, boolean[] rhs) {\n+        if (!isEquals) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            isEquals = false;\n+            return this;\n+        }\n+        if (isRegistered(lhs, rhs)) {\n+            return this;\n+        }\n+        register(lhs, rhs);\n+        int lhsLength = lhs.length;\n+        int rhsLength = rhs.length;\n+        if (lhsLength != rhsLength) {\n+            isEquals = false;\n+            return this;\n+        }\n+        for (int i = 0; i < lhsLength; i++) {\n+            append(lhs[i], rhs[i]);\n+            if (!isEquals) {\n+                return this;\n+            }\n+        }\n+        return this;\n+    }\n+    \n+    public EqualsBuilder appendDeep(Object lhs, Object rhs) {\n+        if (!isEquals) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            isEquals = false;\n+            return this;\n+        }\n+        Class<?> lhsClass = lhs.getClass();\n+        if (!lhsClass.isArray()) {\n+            isEquals = lhs.equals(rhs);\n+            return this;\n+        }\n+        if (lhsClass != rhs.getClass()) {\n+            isEquals = false;\n+            return this;\n+        }\n+        appendDeepArray(lhs, rhs);\n+        return this;\n+    }\n+    \n+    private void appendDeepArray(Object lhs, Object rhs) {\n+        int lhsLength = Array.getLength(lhs);\n+        int rhsLength = Array.getLength(rhs);\n+        if (lhsLength != rhsLength) {\n+            isEquals = false;\n+            return;\n+        }\n+        for (int i = 0; i < lhsLength; i++) {\n+            appendDeep(Array.get(lhs, i), Array.get(rhs, i));\n+            if (!isEquals) {\n+                return;\n+            }\n+        }\n+    }\n+    \n+    public EqualsBuilder appendSuper(boolean superEquals) {\n+        if (!isEquals) {\n+            return this;\n+        }\n+        isEquals = superEquals;\n+        return this;\n+    }\n+    \n+    public EqualsBuilder reflectionAppend(Object lhs, Object rhs) {\n+        if (!isEquals) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            isEquals = false;\n+            return this;\n+        }\n+        Class<?> lhsClass = lhs.getClass();\n+        if (lhsClass.isInstance(rhs)) {\n+            Field[] fields = lhsClass.getDeclaredFields();\n+            AccessibleObject.setAccessible(fields, true);\n+            for (Field f : fields) {\n+                try {\n+                    Object lhsFieldValue = f.get(lhs);\n+                    Object rhsFieldValue = f.get(rhs);\n+                    append(lhsFieldValue, rhsFieldValue);\n+                    if (!isEquals) {\n+                        return this;\n+                    }\n+                } catch (IllegalAccessException ex) {\n+                    throw new InternalError(\"Unexpected IllegalAccessException\");\n+                }\n+            }\n+        } else {\n+            isEquals = false;\n+        }\n+        return this;\n+    }\n+    \n+    public boolean isEquals() {\n+        try {\n+            return isEquals;\n+        } finally {\n+            REGISTRY.get().pop();\n+        }\n+    }\n+\n+}\n \n     /**\n      * <p>",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}