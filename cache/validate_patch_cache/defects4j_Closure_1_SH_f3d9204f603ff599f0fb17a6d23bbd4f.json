{
    "patch": "    Set<Node> referencedNodes = Sets.newHashSet();\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Determine which arguments are referenced.\n      NodeTraversal.traverse(compiler, function, new AbstractPostOrderCallback() {\n        @Override\n        public void visit(NodeTraversal traversal, Node node, Node parent) {\n          if (node.isName() && node.getParent().isParamList()) {\n            Var var = fnScope.getVar(node.getString());\n            if (referenced.contains(var)) {\n              referencedNodes.add(node);\n            }\n          }\n        }\n      });\n\n      // Remove any unreferenced parameters from the function declaration.\n      for (Node child : argList.children()) {\n        if (!referencedNodes.contains(child)) {\n          argList.removeChild(child);\n          compiler.reportCodeChange();\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..87eda345 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,41 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Set<Node> referencedNodes = Sets.newHashSet();\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Determine which arguments are referenced.\n+      NodeTraversal.traverse(compiler, function, new AbstractPostOrderCallback() {\n+        @Override\n+        public void visit(NodeTraversal traversal, Node node, Node parent) {\n+          if (node.isName() && node.getParent().isParamList()) {\n+            Var var = fnScope.getVar(node.getString());\n+            if (referenced.contains(var)) {\n+              referencedNodes.add(node);\n+            }\n+          }\n+        }\n+      });\n+\n+      // Remove any unreferenced parameters from the function declaration.\n+      for (Node child : argList.children()) {\n+        if (!referencedNodes.contains(child)) {\n+          argList.removeChild(child);\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}