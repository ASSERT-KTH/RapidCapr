{
    "patch": "public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int strLen = sequence.length();\n    final int searchLen = searchChars.length;\n    final int strLast = strLen - 1;\n    final int searchLast = searchLen - 1;\n    outer:\n    for (int i = 0; i < strLen; i++) {\n        final char ch = sequence.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // Found character match, so return true\n                return true;\n            }\n            if (Character.isHighSurrogate(ch) && j < searchLast) {\n                // Check for supplementary code point match:\n                if (searchChars[j + 1] == sequence.charAt(i + 1)) {\n                    final int codePoint = Character.toCodePoint(ch, sequence.charAt(i + 1));\n                    if (Arrays.asList(searchChars).contains(Character.toChars(codePoint)[0])) {\n                        // Found matching supplementary character, so return true\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..e1630a05 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,36 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int strLen = sequence.length();\n+    final int searchLen = searchChars.length;\n+    final int strLast = strLen - 1;\n+    final int searchLast = searchLen - 1;\n+    outer:\n+    for (int i = 0; i < strLen; i++) {\n+        final char ch = sequence.charAt(i);\n+        for (int j = 0; j < searchLen; j++) {\n+            if (searchChars[j] == ch) {\n+                // Found character match, so return true\n+                return true;\n+            }\n+            if (Character.isHighSurrogate(ch) && j < searchLast) {\n+                // Check for supplementary code point match:\n+                if (searchChars[j + 1] == sequence.charAt(i + 1)) {\n+                    final int codePoint = Character.toCodePoint(ch, sequence.charAt(i + 1));\n+                    if (Arrays.asList(searchChars).contains(Character.toChars(codePoint)[0])) {\n+                        // Found matching supplementary character, so return true\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}