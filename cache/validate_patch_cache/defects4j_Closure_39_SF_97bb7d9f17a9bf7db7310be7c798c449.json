{
    "patch": "  public boolean canBeCalled() {\n    return !isRegexpType();\n  }\n\n  private static final int MAX_DEPTH = 10;\n  private static int depth = 0;\n\n  private String toStringHelper(boolean prettyPrint, Set<String> seenObjects) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Use a tree set so that the properties are sorted.\n      Set<String> propNames = Sets.newTreeSet();\n      for (ObjectType current = this; current != null && !current.isNativeObjectType() && propNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int count = 0;\n      for (String propName : propNames) {\n        if (count > 0) {\n          sb.append(\", \");\n        }\n        sb.append(propName).append(\": \");\n        Object propValue = getPropertyType(propName);\n        if (propValue instanceof ObjectType) {\n          ObjectType propType = (ObjectType) propValue;\n          if (depth >= MAX_DEPTH || seenObjects.contains(propType.toString())) {\n            sb.append(\"{...}\");\n          } else {\n            seenObjects.add(propType.toString());\n            depth++;\n            sb.append(propType.toStringHelper(prettyPrint, seenObjects));\n            depth--;\n          }\n        } else {\n          sb.append(propValue.toString());\n        }\n        count++;\n        if (count >= MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n      sb.append(\"}\");\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (prettyPrint) {\n      return toStringHelper(forAnnotations, Sets.newHashSet());\n    } else {\n      return \"{...}\";\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..cea0de64 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -346,55 +346,68 @@ class PrototypeObjectType extends ObjectType {\n \n   @Override\n   public boolean canBeCalled() {\n-    return isRegexpType();\n+    return !isRegexpType();\n   }\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n+  private static final int MAX_DEPTH = 10;\n+  private static int depth = 0;\n+\n+  private String toStringHelper(boolean prettyPrint, Set<String> seenObjects) {\n     if (hasReferenceName()) {\n       return getReferenceName();\n     } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n       // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+      Set<String> propNames = Sets.newTreeSet();\n+      for (ObjectType current = this; current != null && !current.isNativeObjectType() && propNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n            current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n+        propNames.addAll(current.getOwnPropertyNames());\n       }\n \n       StringBuilder sb = new StringBuilder();\n       sb.append(\"{\");\n \n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n+      int count = 0;\n+      for (String propName : propNames) {\n+        if (count > 0) {\n           sb.append(\", \");\n         }\n-\n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+        sb.append(propName).append(\": \");\n+        Object propValue = getPropertyType(propName);\n+        if (propValue instanceof ObjectType) {\n+          ObjectType propType = (ObjectType) propValue;\n+          if (depth >= MAX_DEPTH || seenObjects.contains(propType.toString())) {\n+            sb.append(\"{...}\");\n+          } else {\n+            seenObjects.add(propType.toString());\n+            depth++;\n+            sb.append(propType.toStringHelper(prettyPrint, seenObjects));\n+            depth--;\n+          }\n+        } else {\n+          sb.append(propValue.toString());\n+        }\n+        count++;\n+        if (count >= MAX_PRETTY_PRINTED_PROPERTIES) {\n           sb.append(\", ...\");\n           break;\n         }\n       }\n-\n       sb.append(\"}\");\n-\n-      prettyPrint = true;\n       return sb.toString();\n     } else {\n       return \"{...}\";\n     }\n   }\n \n+  @Override\n+  String toStringHelper(boolean forAnnotations) {\n+    if (prettyPrint) {\n+      return toStringHelper(forAnnotations, Sets.newHashSet());\n+    } else {\n+      return \"{...}\";\n+    }\n+  }\n+\n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;\n   }",
    "result_reason": "error: method toStringHelper in class JSType cannot be applied to given types;",
    "test_result": "ERROR"
}