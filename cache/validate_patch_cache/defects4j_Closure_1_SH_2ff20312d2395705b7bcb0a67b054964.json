{
    "patch": "      boolean removeArgs = true;\n      // Strip unreferenced args off the end of the function declaration.\n      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(arg);\n          compiler.reportCodeChange();\n        } else {\n          if (removeArgs) {\n            continue;\n          } else {\n            break;\n          }\n        }\n        removeArgs = false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b90624db 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,21 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      boolean removeArgs = true;\n+      // Strip unreferenced args off the end of the function declaration.\n+      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(arg);\n+          compiler.reportCodeChange();\n+        } else {\n+          if (removeArgs) {\n+            continue;\n+          } else {\n+            break;\n+          }\n+        }\n+        removeArgs = false;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}