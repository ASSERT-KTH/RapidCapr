{
    "patch": "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n\n    double prefactor = 1.0/Math.sqrt(Math.pow(2*Math.PI, dim)*covarianceMatrixDeterminant);\n    double[] diff = new double[dim];\n    for (int i = 0; i < dim; ++i) {\n        diff[i] = vals[i] - means[i];\n    }\n    double expTerm = 0.0;\n    for (int i = 0; i < dim; ++i) {\n        double tmp = 0.0;\n        for (int j = 0; j < dim; ++j) {\n            tmp += covarianceMatrix[i][j] * diff[j];\n        }\n        expTerm += tmp * diff[i];\n    }\n    expTerm *= -0.5;\n    return prefactor * Math.exp(expTerm);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..cfefdea33 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -174,16 +174,28 @@ public class MultivariateNormalDistribution\n     }\n \n     /** {@inheritDoc} */\n-    public double density(final double[] vals) throws DimensionMismatchException {\n-        final int dim = getDimension();\n-        if (vals.length != dim) {\n-            throw new DimensionMismatchException(vals.length, dim);\n-        }\n+public double density(final double[] vals) throws DimensionMismatchException {\n+    final int dim = getDimension();\n+    if (vals.length != dim) {\n+        throw new DimensionMismatchException(vals.length, dim);\n+    }\n \n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n+    double prefactor = 1.0/Math.sqrt(Math.pow(2*Math.PI, dim)*covarianceMatrixDeterminant);\n+    double[] diff = new double[dim];\n+    for (int i = 0; i < dim; ++i) {\n+        diff[i] = vals[i] - means[i];\n     }\n+    double expTerm = 0.0;\n+    for (int i = 0; i < dim; ++i) {\n+        double tmp = 0.0;\n+        for (int j = 0; j < dim; ++j) {\n+            tmp += covarianceMatrix[i][j] * diff[j];\n+        }\n+        expTerm += tmp * diff[i];\n+    }\n+    expTerm *= -0.5;\n+    return prefactor * Math.exp(expTerm);\n+}\n \n     /**\n      * Gets the square root of each element on the diagonal of the covariance",
    "result_reason": "error: array required, but RealMatrix found",
    "test_result": "ERROR"
}