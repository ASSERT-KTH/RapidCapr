{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.getFirstChild() != null) {\n        // Check if the block is foldable and does not contain any un-foldable expressions\n        Node child = n.getFirstChild();\n        if (child.getType() == Token.EXPR_RESULT && n.getChildCount() == 1) {\n            Node expression = child.getFirstChild();\n            if (expression.getType() == Token.ASSIGN) {\n                // Check if the expression is a direct assignment to a name\n                return expression.getFirstChild().getType() == Token.NAME && !NodeUtil.mayHaveSideEffects(expression.getLastChild());\n            } else {\n                // Check if the expression is foldable and does not have any side effects\n                return NodeUtil.isExpressionNode(expression) && !NodeUtil.mayHaveSideEffects(expression);\n            }\n        } else if (child.getType() == Token.IF) {\n            // Check if the block contains a single if statement\n            Node ifBlock = child.getLastChild();\n            if (ifBlock.getType() == Token.BLOCK && ifBlock.hasOneChild() && ifBlock.getFirstChild().getType() == Token.RETURN) {\n                // Check if the if statement contains a single return statement,\n                // and the return statement contains a foldable expression\n                Node expression = ifBlock.getFirstChild().getFirstChild();\n                return NodeUtil.isExpressionNode(expression) && !NodeUtil.mayHaveSideEffects(expression);\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..152031dd 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,32 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.getFirstChild() != null) {\n+        // Check if the block is foldable and does not contain any un-foldable expressions\n+        Node child = n.getFirstChild();\n+        if (child.getType() == Token.EXPR_RESULT && n.getChildCount() == 1) {\n+            Node expression = child.getFirstChild();\n+            if (expression.getType() == Token.ASSIGN) {\n+                // Check if the expression is a direct assignment to a name\n+                return expression.getFirstChild().getType() == Token.NAME && !NodeUtil.mayHaveSideEffects(expression.getLastChild());\n+            } else {\n+                // Check if the expression is foldable and does not have any side effects\n+                return NodeUtil.isExpressionNode(expression) && !NodeUtil.mayHaveSideEffects(expression);\n+            }\n+        } else if (child.getType() == Token.IF) {\n+            // Check if the block contains a single if statement\n+            Node ifBlock = child.getLastChild();\n+            if (ifBlock.getType() == Token.BLOCK && ifBlock.hasOneChild() && ifBlock.getFirstChild().getType() == Token.RETURN) {\n+                // Check if the if statement contains a single return statement,\n+                // and the return statement contains a foldable expression\n+                Node expression = ifBlock.getFirstChild().getFirstChild();\n+                return NodeUtil.isExpressionNode(expression) && !NodeUtil.mayHaveSideEffects(expression);\n+            }\n+        }\n     }\n-\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}