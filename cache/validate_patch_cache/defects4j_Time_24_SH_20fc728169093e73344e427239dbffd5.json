{
    "patch": "try {\n    DurationField years = DurationFieldType.years().getField(iChrono);\n    if (count > 0 && compareReverse(savedFields[0].iField.getDurationField(), years) <= 0) {\n        // adjust base year if first field is years or greater\n        int year = savedFields[0].iValue;\n        saveField(DateTimeFieldType.year(), year);\n        millis = iChrono.year().set(millis, year);\n        for (int i = 1; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } else {\n        // do not adjust base year\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n        throw new IllegalArgumentException(message, e);\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..b670b97f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,34 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    DurationField years = DurationFieldType.years().getField(iChrono);\n+    if (count > 0 && compareReverse(savedFields[0].iField.getDurationField(), years) <= 0) {\n+        // adjust base year if first field is years or greater\n+        int year = savedFields[0].iValue;\n+        saveField(DateTimeFieldType.year(), year);\n+        millis = iChrono.year().set(millis, year);\n+        for (int i = 1; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } else {\n+        // do not adjust base year\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n+        throw new IllegalArgumentException(message, e);\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "org.joda.time.IllegalFieldValueException: Cannot parse \"2005-10 AD\": Cannot parse \"2005-10 AD\": Value 0 for year is not supported",
    "test_result": "FAIL"
}