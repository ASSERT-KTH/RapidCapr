{
    "patch": "private void inlineNonConstants(\n    Var v, ReferenceCollection referenceInfo,\n    boolean maybeModifiedArguments) {\n  int refCount = referenceInfo.references.size();\n  Reference declaration = referenceInfo.references.get(0);\n  Reference init = referenceInfo.getInitializingReference();\n  Node value = null;\n\n  if (refCount > 1 &&\n      isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n    // if the variable is referenced more than once, we can only\n    // inline it if it's immutable and never defined before referenced.\n    if (init != null) {\n      value = init.getAssignedValue();           \n    } else {\n      // Create a new node for variable that is never initialized.\n      Node srcLocation = declaration.getNode();\n      value = NodeUtil.newUndefinedNode(srcLocation);\n    }\n  } else if (refCount == 2 &&\n             referenceInfo.references.get(1).getNode() !=\n                 declaration.getNode()) {\n    if (isValidDeclaration(declaration) &&\n        isValidInitialization(init)) {\n      // The only reference is the initialization, remove the\n      // assignment and the variable declaration.\n      value = init.getAssignedValue();               \n    }\n  } else if (refCount == 2) {\n    // The variable likely only read once, try some more complex inline\n    // heuristics.\n    init = referenceInfo.references.get(1);\n    if (canInline(declaration, init, init)) {\n      value = init.getAssignedValue();       \n    }\n  } else {\n\n    // Scan the references array for obstacles to inlining.\n    Reference refAfterInit = null;      \n    for (int i = 1 /* start from a read */; i < refCount; i++) {\n      Reference reference = referenceInfo.references.get(i);\n      if (isReferenceToOriginalDeclaration(reference, declaration)) {\n        // Never inline and keep the original variable declaration.\n        return;\n      }\n\n      if (!reference.isLvalue()) {\n        // Don't deal with non-lvalue references.\n        continue;\n      }\n\n      if (refAfterInit == null) {\n        refAfterInit = reference;\n      } else if (declaration != init) {\n        // There are more inlining options than the trivial cases.\n        // Abort the simplest inlining and look for other candidates.\n        refAfterInit = null;\n        break;\n      }\n    }\n\n    if (refAfterInit != null && canInline(declaration, init, refAfterInit)) {\n      value = refAfterInit.getAssignedValue();\n    }\n  }\n\n  if (value != null) {\n    inlineWellDefinedVariable(v, value, referenceInfo.references);\n    staleVars.add(v);\n  } else if (!maybeModifiedArguments &&\n             !staleVars.contains(v) &&\n             referenceInfo.isWellDefined() &&\n             referenceInfo.isAssignedOnceInLifetime()) {\n    // If this variable was not inlined normally, check if we can\n    // inline an alias of it. (If the variable was inlined, then the\n    // reference data is out of sync. We're better off just waiting for\n    // the next pass.)\n    List<Reference> refs = referenceInfo.references;\n    for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n      Node nameNode = refs.get(i).getNode();\n      if (aliasCandidates.containsKey(nameNode)) {\n        AliasCandidate candidate = aliasCandidates.get(nameNode);\n        if (!staleVars.contains(candidate.alias) &&\n            !isVarInlineForbidden(candidate.alias)) {\n          Reference aliasInit =\n              candidate.refInfo.getInitializingReference();\n          Node value = aliasInit.getAssignedValue();\n          inlineWellDefinedVariable(candidate.alias, value,\n                                     candidate.refInfo.references);\n          staleVars.add(candidate.alias);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 376abd40..2f5ab12c 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -251,80 +251,101 @@ class InlineVariables implements CompilerPass {\n           && parent.getFirstChild() == n));\n     }\n \n-    private void inlineNonConstants(\n-        Var v, ReferenceCollection referenceInfo,\n-        boolean maybeModifiedArguments) {\n-      int refCount = referenceInfo.references.size();\n-      Reference declaration = referenceInfo.references.get(0);\n-      Reference init = referenceInfo.getInitializingReference();\n-      int firstRefAfterInit = (declaration == init) ? 2 : 3;\n-\n-      if (refCount > 1 &&\n-          isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n-        // if the variable is referenced more than once, we can only\n-        // inline it if it's immutable and never defined before referenced.\n-        Node value;\n-        if (init != null) {\n-          value = init.getAssignedValue();\n-        } else {\n-          // Create a new node for variable that is never initialized.\n-          Node srcLocation = declaration.getNode();\n-          value = NodeUtil.newUndefinedNode(srcLocation);\n-        }\n-        Preconditions.checkNotNull(value);\n-        inlineWellDefinedVariable(v, value, referenceInfo.references);\n-        staleVars.add(v);\n-      } else if (refCount == firstRefAfterInit) {\n-        // The variable likely only read once, try some more\n-        // complex inlining heuristics.\n-        Reference reference = referenceInfo.references.get(\n-            firstRefAfterInit - 1);\n-        if (canInline(declaration, init, reference)) {\n-          inline(v, declaration, init, reference);\n-          staleVars.add(v);\n-        }\n-      } else if (declaration != init && refCount == 2) {\n-        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n-          // The only reference is the initialization, remove the assignment and\n-          // the variable declaration.\n-          Node value = init.getAssignedValue();\n-          Preconditions.checkNotNull(value);\n-          inlineWellDefinedVariable(v, value, referenceInfo.references);\n-          staleVars.add(v);\n-        }\n+private void inlineNonConstants(\n+    Var v, ReferenceCollection referenceInfo,\n+    boolean maybeModifiedArguments) {\n+  int refCount = referenceInfo.references.size();\n+  Reference declaration = referenceInfo.references.get(0);\n+  Reference init = referenceInfo.getInitializingReference();\n+  Node value = null;\n+\n+  if (refCount > 1 &&\n+      isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n+    // if the variable is referenced more than once, we can only\n+    // inline it if it's immutable and never defined before referenced.\n+    if (init != null) {\n+      value = init.getAssignedValue();           \n+    } else {\n+      // Create a new node for variable that is never initialized.\n+      Node srcLocation = declaration.getNode();\n+      value = NodeUtil.newUndefinedNode(srcLocation);\n+    }\n+  } else if (refCount == 2 &&\n+             referenceInfo.references.get(1).getNode() !=\n+                 declaration.getNode()) {\n+    if (isValidDeclaration(declaration) &&\n+        isValidInitialization(init)) {\n+      // The only reference is the initialization, remove the\n+      // assignment and the variable declaration.\n+      value = init.getAssignedValue();               \n+    }\n+  } else if (refCount == 2) {\n+    // The variable likely only read once, try some more complex inline\n+    // heuristics.\n+    init = referenceInfo.references.get(1);\n+    if (canInline(declaration, init, init)) {\n+      value = init.getAssignedValue();       \n+    }\n+  } else {\n+\n+    // Scan the references array for obstacles to inlining.\n+    Reference refAfterInit = null;      \n+    for (int i = 1 /* start from a read */; i < refCount; i++) {\n+      Reference reference = referenceInfo.references.get(i);\n+      if (isReferenceToOriginalDeclaration(reference, declaration)) {\n+        // Never inline and keep the original variable declaration.\n+        return;\n       }\n \n-      // If this variable was not inlined normally, check if we can\n-      // inline an alias of it. (If the variable was inlined, then the\n-      // reference data is out of sync. We're better off just waiting for\n-      // the next pass.)\n-      if (!maybeModifiedArguments &&\n-          !staleVars.contains(v) &&\n-          referenceInfo.isWellDefined() &&\n-          referenceInfo.isAssignedOnceInLifetime()) {\n-          // Inlining the variable based solely on well-defined and assigned\n-          // once is *NOT* correct. We relax the correctness requirement if\n-          // the variable is declared constant.\n-        List<Reference> refs = referenceInfo.references;\n-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n-          Node nameNode = refs.get(i).getNode();\n-          if (aliasCandidates.containsKey(nameNode)) {\n-            AliasCandidate candidate = aliasCandidates.get(nameNode);\n-            if (!staleVars.contains(candidate.alias) &&\n-                !isVarInlineForbidden(candidate.alias)) {\n-              Reference aliasInit;\n-              aliasInit = candidate.refInfo.getInitializingReference();\n-              Node value = aliasInit.getAssignedValue();\n-              Preconditions.checkNotNull(value);\n-              inlineWellDefinedVariable(candidate.alias,\n-                  value,\n-                  candidate.refInfo.references);\n-              staleVars.add(candidate.alias);\n-            }\n-          }\n+      if (!reference.isLvalue()) {\n+        // Don't deal with non-lvalue references.\n+        continue;\n+      }\n+\n+      if (refAfterInit == null) {\n+        refAfterInit = reference;\n+      } else if (declaration != init) {\n+        // There are more inlining options than the trivial cases.\n+        // Abort the simplest inlining and look for other candidates.\n+        refAfterInit = null;\n+        break;\n+      }\n+    }\n+\n+    if (refAfterInit != null && canInline(declaration, init, refAfterInit)) {\n+      value = refAfterInit.getAssignedValue();\n+    }\n+  }\n+\n+  if (value != null) {\n+    inlineWellDefinedVariable(v, value, referenceInfo.references);\n+    staleVars.add(v);\n+  } else if (!maybeModifiedArguments &&\n+             !staleVars.contains(v) &&\n+             referenceInfo.isWellDefined() &&\n+             referenceInfo.isAssignedOnceInLifetime()) {\n+    // If this variable was not inlined normally, check if we can\n+    // inline an alias of it. (If the variable was inlined, then the\n+    // reference data is out of sync. We're better off just waiting for\n+    // the next pass.)\n+    List<Reference> refs = referenceInfo.references;\n+    for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n+      Node nameNode = refs.get(i).getNode();\n+      if (aliasCandidates.containsKey(nameNode)) {\n+        AliasCandidate candidate = aliasCandidates.get(nameNode);\n+        if (!staleVars.contains(candidate.alias) &&\n+            !isVarInlineForbidden(candidate.alias)) {\n+          Reference aliasInit =\n+              candidate.refInfo.getInitializingReference();\n+          Node value = aliasInit.getAssignedValue();\n+          inlineWellDefinedVariable(candidate.alias, value,\n+                                     candidate.refInfo.references);\n+          staleVars.add(candidate.alias);\n         }\n       }\n     }\n+  }\n+}\n \n     /**\n      * If there are any variable references in the given node tree, blacklist",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}