{
    "patch": "    public double getNumericalMean() {\n        if (getPopulationSize() == 0) {\n            return 0.0;\n        } else if (getSampleSize() == 0) {\n            return Double.NaN;\n        } else {\n            return ((double) getSampleSize() * (double) getNumberOfSuccesses()) / (double) getPopulationSize();\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\nindex 27691272f..cda28b8b7 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n@@ -265,7 +265,15 @@ public class HypergeometricDistribution extends AbstractIntegerDistribution {\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+    public double getNumericalMean() {\n+        if (getPopulationSize() == 0) {\n+            return 0.0;\n+        } else if (getSampleSize() == 0) {\n+            return Double.NaN;\n+        } else {\n+            return ((double) getSampleSize() * (double) getNumberOfSuccesses()) / (double) getPopulationSize();\n+        }\n+    }\n     }\n \n     /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}