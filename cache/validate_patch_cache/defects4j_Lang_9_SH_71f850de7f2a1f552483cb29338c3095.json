{
    "patch": "boolean atLeastOneStrategyAdded = false;\nfor(;;) {\n    patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n    if(!patternMatcher.lookingAt()) {\n        nextStrategy = null;\n        break;\n    }\n    String nextFormatField = patternMatcher.group();\n    nextStrategy = getStrategy(nextFormatField);\n    if (currentStrategy != null) {\n        if (currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n            atLeastOneStrategyAdded = true;\n        }\n    } else {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n    currentFormatField = nextFormatField;\n    currentStrategy = nextStrategy;\n}\nif(nextStrategy == null && currentFormatField != null && currentStrategy != null) {\n    if(currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n        atLeastOneStrategyAdded = true;\n        nextStrategy = currentStrategy;\n    }\n}\ncurrentFormatField = null;\nif(!atLeastOneStrategyAdded) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\nstrategies = collector.toArray(new Strategy[0]);\nparsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..84815c69 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,39 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+boolean atLeastOneStrategyAdded = false;\n+for(;;) {\n+    patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+    if(!patternMatcher.lookingAt()) {\n+        nextStrategy = null;\n+        break;\n+    }\n+    String nextFormatField = patternMatcher.group();\n+    nextStrategy = getStrategy(nextFormatField);\n+    if (currentStrategy != null) {\n+        if (currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+            atLeastOneStrategyAdded = true;\n+        }\n+    } else {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n+    currentFormatField = nextFormatField;\n+    currentStrategy = nextStrategy;\n+}\n+if(nextStrategy == null && currentFormatField != null && currentStrategy != null) {\n+    if(currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+        atLeastOneStrategyAdded = true;\n+        nextStrategy = currentStrategy;\n+    }\n+}\n+currentFormatField = null;\n+if(!atLeastOneStrategyAdded) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+strategies = collector.toArray(new Strategy[0]);\n+parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}