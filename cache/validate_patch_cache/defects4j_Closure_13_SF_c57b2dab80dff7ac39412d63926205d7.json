{
    "patch": "private void traverse(Node node) {\n  if (!shouldVisit(node)) {\n    return;\n  }\n\n  int visits = 0;\n  Set<Node> visitedNodes = new HashSet<>();\n  Stack<Node> nodeStack = new Stack<>();\n  nodeStack.push(node);\n\n  while(!nodeStack.isEmpty()) {\n    Node currentNode = nodeStack.pop();\n    visitedNodes.add(currentNode);\n\n    Node child = currentNode.getFirstChild();\n    while(child != null) {\n      if (!visitedNodes.contains(child)) {\n        nodeStack.push(child);\n      }\n      child = child.getNext();\n    }\n\n    visit(currentNode);\n    visits++;\n    Preconditions.checkState(visits < 10000, \"too many iterations\");\n  }\n\n  exitNode(node);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..d4f26f30 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -110,33 +110,36 @@ class PeepholeOptimizationsPass\n     compiler.removeChangeHandler(handler);\n   }\n \n-  private void traverse(Node node) {\n-    // The goal here is to avoid retraversing\n-    // the entire AST to catch newly created opportunities.\n-    // So we track whether a \"unit of code\" has changed,\n-    // and revisit immediately.\n-    if (!shouldVisit(node)) {\n-      return;\n-    }\n+private void traverse(Node node) {\n+  if (!shouldVisit(node)) {\n+    return;\n+  }\n \n-    int visits = 0;\n-    do {\n-      Node c = node.getFirstChild();\n-      while(c != null) {\n-        traverse(c);\n-        Node next = c.getNext();\n-        c = next;\n-      }\n+  int visits = 0;\n+  Set<Node> visitedNodes = new HashSet<>();\n+  Stack<Node> nodeStack = new Stack<>();\n+  nodeStack.push(node);\n \n-      visit(node);\n-      visits++;\n+  while(!nodeStack.isEmpty()) {\n+    Node currentNode = nodeStack.pop();\n+    visitedNodes.add(currentNode);\n \n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n-    } while (shouldRetraverse(node));\n+    Node child = currentNode.getFirstChild();\n+    while(child != null) {\n+      if (!visitedNodes.contains(child)) {\n+        nodeStack.push(child);\n+      }\n+      child = child.getNext();\n+    }\n \n-    exitNode(node);\n+    visit(currentNode);\n+    visits++;\n+    Preconditions.checkState(visits < 10000, \"too many iterations\");\n   }\n \n+  exitNode(node);\n+}\n+\n   private boolean shouldRetraverse(Node node) {\n     if (node.getParent() != null && node.isFunction() || node.isScript()) {\n       ScopeState state = traversalState.peek();",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}