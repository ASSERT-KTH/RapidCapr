{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (parent == null) {\n      return;\n    }\n\n    // Iterate over function expressions and function declarations only\n    if (parent.isFunction()) {\n        return;\n    }\n\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    if (n.isEmpty() || n.isComma()) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (parent.isCall() && n == parent.getFirstChild() &&\n        parent.getChildCount() == 2 && n.getNext().isName() &&\n        \"eval\".equals(n.getNext().getString()) &&\n        n.isFirstChildOf(parent)) {\n      return;\n    }\n\n    // Don't warn about expressions with JSDoc comments attached.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    // Do not warn about a missing '+' on strings.\n    boolean isBinary =\n        parent.getType() == Token.ADD &&\n        !NodeUtil.mayHaveSideEffects(parent);\n    if (n.isString() && isBinary) {\n      return;\n    }\n\n    // Do not warn about an incomplete for loop.\n    boolean isForLoopInitOrIterate =\n        parent.getType() == Token.FOR &&\n        (n == parent.getFirstChild() ||\n         n == parent.getFirstChild().getNext().getNext());\n    if (isForLoopInitOrIterate && parent.getChildCount() < 4) {\n      return;\n    }\n\n    // Is there a binary operator without side effects?\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (isSimpleOp &&\n        !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR,\n                      \"The result of the '\" +\n                      NodeUtil.opToStr(n.getType()) +\n                      \"' operator is not being used.\"));\n      return;\n    }\n\n    // Is there a statement without side effects?\n    if (!NodeUtil.isStatement(n) &&\n        !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR,\n                      \"This code lacks side-effects. Is there a bug?\"));\n      problemNodes.add(n);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..9ca42892 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,76 +81,72 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (parent == null) {\n       return;\n     }\n \n-    if (parent == null) {\n+    // Iterate over function expressions and function declarations only\n+    if (parent.isFunction()) {\n+        return;\n+    }\n+\n+    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n+    if (n.isEmpty() || n.isComma()) {\n       return;\n     }\n \n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n-    if (parent.getType() == Token.COMMA) {\n-      Node gramps = parent.getParent();\n-      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n+    if (parent.isCall() && n == parent.getFirstChild() &&\n+        parent.getChildCount() == 2 && n.getNext().isName() &&\n+        \"eval\".equals(n.getNext().getString()) &&\n+        n.isFirstChildOf(parent)) {\n       return;\n-        }\n     }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n-        }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n-      } else {\n+    // Don't warn about expressions with JSDoc comments attached.\n+    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n       return;\n-      }\n     }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n+    // Do not warn about a missing '+' on strings.\n+    boolean isBinary =\n+        parent.getType() == Token.ADD &&\n+        !NodeUtil.mayHaveSideEffects(parent);\n+    if (n.isString() && isBinary) {\n+      return;\n+    }\n+\n+    // Do not warn about an incomplete for loop.\n+    boolean isForLoopInitOrIterate =\n+        parent.getType() == Token.FOR &&\n+        (n == parent.getFirstChild() ||\n+         n == parent.getFirstChild().getNext().getNext());\n+    if (isForLoopInitOrIterate && parent.getChildCount() < 4) {\n+      return;\n+    }\n+\n+    // Is there a binary operator without side effects?\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-        return;\n-      } else if (n.isExprResult()) {\n-        return;\n-      }\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n+    if (isSimpleOp &&\n+        !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n+      t.getCompiler().report(\n+          t.makeError(n, level, USELESS_CODE_ERROR,\n+                      \"The result of the '\" +\n+                      NodeUtil.opToStr(n.getType()) +\n+                      \"' operator is not being used.\"));\n+      return;\n+    }\n \n+    // Is there a statement without side effects?\n+    if (!NodeUtil.isStatement(n) &&\n+        !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n       t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n+          t.makeError(n, level, USELESS_CODE_ERROR,\n+                      \"This code lacks side-effects. Is there a bug?\"));\n+      problemNodes.add(n);\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}