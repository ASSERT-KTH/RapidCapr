{
    "patch": "    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        if (this.allowDuplicateXValues) {\n            // Look for the item in the list.\n            XYDataItem item = new XYDataItem(x, y);\n            int index = Collections.binarySearch(this.data, item);\n            if (index >= 0) {\n                XYDataItem existing = (XYDataItem) this.data.get(index);\n                XYDataItem overwritten = (XYDataItem) existing.clone();\n                existing.setY(item.getY());\n                fireSeriesChanged();\n                return overwritten;\n            }\n            else {\n                this.data.add(-index - 1, item);\n                if (getItemCount() > this.maximumItemCount) {\n                    this.data.remove(0);\n                }\n                fireSeriesChanged();\n                return null;\n            }\n        }\n        else {\n            // Search for an existing item with the same X-value.\n            XYDataItem match = new XYDataItem(x, null);\n            int index = Collections.binarySearch(this.data, match,\n                    new SeriesDataItemComparator());\n            if (index >= 0) {\n                XYDataItem existing = (XYDataItem) this.data.get(index);\n                XYDataItem overwritten = (XYDataItem) existing.clone();\n                existing.setY(y);\n                fireSeriesChanged();\n                return overwritten;\n            }\n            else {\n                XYDataItem newItem = new XYDataItem(x, y);\n                this.data.add(-index - 1, newItem);\n                if (getItemCount() > this.maximumItemCount) {\n                    this.data.remove(0);\n                }\n                fireSeriesChanged();\n                return null;\n            }\n        }\n    }\n    \n    /**\n     * A {@link Comparator} for comparing {@link SeriesDataItem} instances.\n     * \n     * @since 1.0.7\n     */\n    private static class SeriesDataItemComparator implements Comparator {\n        \n        /**\n         * Creates a new instance.\n         */\n        public SeriesDataItemComparator() {\n        }\n\n        /**\n         * Compares two objects.\n         * \n         * @param o1  object 1.\n         * @param o2  object 2.\n         * \n         * @return An integer indicating the relative order of the objects.\n         */\n        public int compare(Object o1, Object o2) {\n            XYDataItem dataItem1 = (XYDataItem) o1;\n            XYDataItem dataItem2 = (XYDataItem) o2;\n            double x1 = dataItem1.getXValue();\n            double x2 = dataItem2.getXValue();\n            if (x1 > x2) {\n                return 1;\n            }\n            else if (x1 < x2) {\n                return -1;\n            }\n            else {\n                return 0;\n            }\n        }\n        \n    }",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..b05ec19 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,93 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+    public XYDataItem addOrUpdate(Number x, Number y) {\n+        if (x == null) {\n+            throw new IllegalArgumentException(\"Null 'x' argument.\");\n+        }\n+\n+        if (this.allowDuplicateXValues) {\n+            // Look for the item in the list.\n+            XYDataItem item = new XYDataItem(x, y);\n+            int index = Collections.binarySearch(this.data, item);\n+            if (index >= 0) {\n+                XYDataItem existing = (XYDataItem) this.data.get(index);\n+                XYDataItem overwritten = (XYDataItem) existing.clone();\n+                existing.setY(item.getY());\n+                fireSeriesChanged();\n+                return overwritten;\n+            }\n+            else {\n+                this.data.add(-index - 1, item);\n+                if (getItemCount() > this.maximumItemCount) {\n+                    this.data.remove(0);\n+                }\n+                fireSeriesChanged();\n+                return null;\n+            }\n+        }\n+        else {\n+            // Search for an existing item with the same X-value.\n+            XYDataItem match = new XYDataItem(x, null);\n+            int index = Collections.binarySearch(this.data, match,\n+                    new SeriesDataItemComparator());\n+            if (index >= 0) {\n+                XYDataItem existing = (XYDataItem) this.data.get(index);\n+                XYDataItem overwritten = (XYDataItem) existing.clone();\n+                existing.setY(y);\n+                fireSeriesChanged();\n+                return overwritten;\n+            }\n+            else {\n+                XYDataItem newItem = new XYDataItem(x, y);\n+                this.data.add(-index - 1, newItem);\n+                if (getItemCount() > this.maximumItemCount) {\n+                    this.data.remove(0);\n+                }\n+                fireSeriesChanged();\n+                return null;\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * A {@link Comparator} for comparing {@link SeriesDataItem} instances.\n+     * \n+     * @since 1.0.7\n+     */\n+    private static class SeriesDataItemComparator implements Comparator {\n+        \n+        /**\n+         * Creates a new instance.\n+         */\n+        public SeriesDataItemComparator() {\n+        }\n+\n+        /**\n+         * Compares two objects.\n+         * \n+         * @param o1  object 1.\n+         * @param o2  object 2.\n+         * \n+         * @return An integer indicating the relative order of the objects.\n+         */\n+        public int compare(Object o1, Object o2) {\n+            XYDataItem dataItem1 = (XYDataItem) o1;\n+            XYDataItem dataItem2 = (XYDataItem) o2;\n+            double x1 = dataItem1.getXValue();\n+            double x2 = dataItem2.getXValue();\n+            if (x1 > x2) {\n+                return 1;\n+            }\n+            else if (x1 < x2) {\n+                return -1;\n+            }\n+            else {\n+                return 0;\n+            }\n+        }\n+        \n+    }\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}