{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    // Create the Cholesky decomposition of the matrix\n    CholeskyDecomposition decomposition = new CholeskyDecomposition(m);\n    RealMatrix L = decomposition.getL();\n\n    // Compute the square root matrix using the Cholesky decomposition\n    int n = m.getRowDimension();\n    RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            sqrtM.setEntry(i, j, 0.0);\n        }\n        double l_ii = L.getEntry(i, i);\n        sqrtM.setEntry(i, i, l_ii);\n        for (int k = i + 1; k < n; k++) {\n            double l_ik = L.getEntry(i, k);\n            sqrtM.setEntry(i, k, l_ik);\n            sqrtM.setEntry(k, i, 0.0);\n        }\n    }\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ef1f8d24d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    // Create the Cholesky decomposition of the matrix\n+    CholeskyDecomposition decomposition = new CholeskyDecomposition(m);\n+    RealMatrix L = decomposition.getL();\n+\n+    // Compute the square root matrix using the Cholesky decomposition\n+    int n = m.getRowDimension();\n+    RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < i; j++) {\n+            sqrtM.setEntry(i, j, 0.0);\n+        }\n+        double l_ii = L.getEntry(i, i);\n+        sqrtM.setEntry(i, i, l_ii);\n+        for (int k = i + 1; k < n; k++) {\n+            double l_ik = L.getEntry(i, k);\n+            sqrtM.setEntry(i, k, l_ik);\n+            sqrtM.setEntry(k, i, 0.0);\n+        }\n     }\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}