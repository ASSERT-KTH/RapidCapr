{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    final int n = simplex.length - 1;\n    while (true) {\n        incrementIterationsCounter();\n        final RealPointValuePair best = simplex[0];\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // Compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex[n] = expanded;\n            } else {\n                simplex[n] = reflected;\n            }\n        } else {\n            // Perform a contraction instead\n            boolean isShrink = true;\n            final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // Accept the contracted simplex\n                simplex[n] = contracted;\n                isShrink = false;\n            }\n            if (isShrink) {\n                // Shrink the simplex around the best point\n                for (int i = 1; i < simplex.length; i++) {\n                    simplex[i] = new RealPointValuePair(\n                            ArrayUtils.addAll(best.getPoint(), ArrayUtils.scale(ArrayUtils.sub(simplex[i].getPoint(), best.getPoint()), 0.5)),\n                            Double.NaN, false);\n                }\n            }\n        }\n        Arrays.sort(simplex, comparator);\n        final double d1 = simplex[0].getValue();\n        final double d2 = evaluate(simplex[simplex.length - 1].getPoint());\n        if (!(getEvaluations() < getMaxEvaluations() && Math.max(Math.abs(d1 - d2), FastMath.max(getRelativeTolerance() * (FastMath.abs(d1) + FastMath.abs(d2)) * 0.5, getAbsoluteTolerance())) > getFunctionValueAccuracy())) {\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..ab995ed01 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,47 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+    final int n = simplex.length - 1;\n+    while (true) {\n+        incrementIterationsCounter();\n+        final RealPointValuePair best = simplex[0];\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            // Compute the expanded simplex\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex[n] = expanded;\n+            } else {\n+                simplex[n] = reflected;\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        } else {\n+            // Perform a contraction instead\n+            boolean isShrink = true;\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                // Accept the contracted simplex\n+                simplex[n] = contracted;\n+                isShrink = false;\n+            }\n+            if (isShrink) {\n+                // Shrink the simplex around the best point\n+                for (int i = 1; i < simplex.length; i++) {\n+                    simplex[i] = new RealPointValuePair(\n+                            ArrayUtils.addAll(best.getPoint(), ArrayUtils.scale(ArrayUtils.sub(simplex[i].getPoint(), best.getPoint()), 0.5)),\n+                            Double.NaN, false);\n+                }\n             }\n-\n         }\n-\n+        Arrays.sort(simplex, comparator);\n+        final double d1 = simplex[0].getValue();\n+        final double d2 = evaluate(simplex[simplex.length - 1].getPoint());\n+        if (!(getEvaluations() < getMaxEvaluations() && Math.max(Math.abs(d1 - d2), FastMath.max(getRelativeTolerance() * (FastMath.abs(d1) + FastMath.abs(d2)) * 0.5, getAbsoluteTolerance())) > getFunctionValueAccuracy())) {\n+            return;\n+        }\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}