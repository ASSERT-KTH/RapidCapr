{
    "patch": "protected double getInitialDomain(double p) {\n    double ret = 0.0;\n    double d = getDenominatorDegreesOfFreedom();\n    if (d <= 2.0) {\n        // set the initial domain to 0.0 for degrees of freedom <= 2\n        ret = 0.0;\n    } else {\n        try {\n            // use mean for degrees of freedom > 2\n            ret = d / (d - 2.0);\n        } catch (ArithmeticException ex) {\n            // handle any exceptions that may occur\n            ret = Double.POSITIVE_INFINITY;\n        }\n    }\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97aef..832be3d6a 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -140,13 +140,23 @@ public class FDistributionImpl\n      * @param p the desired probability for the critical value\n      * @return initial domain value\n      */\n-    protected double getInitialDomain(double p) {\n-        double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n+protected double getInitialDomain(double p) {\n+    double ret = 0.0;\n+    double d = getDenominatorDegreesOfFreedom();\n+    if (d <= 2.0) {\n+        // set the initial domain to 0.0 for degrees of freedom <= 2\n+        ret = 0.0;\n+    } else {\n+        try {\n+            // use mean for degrees of freedom > 2\n             ret = d / (d - 2.0);\n-        return ret;\n+        } catch (ArithmeticException ex) {\n+            // handle any exceptions that may occur\n+            ret = Double.POSITIVE_INFINITY;\n+        }\n     }\n+    return ret;\n+}\n     \n     /**\n      * Modify the numerator degrees of freedom.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}