{
    "patch": "      // Don't traverse functions that are getting lent to a prototype or a scoped eval.\n      if (parent != null && NodeUtil.isGet(parent)) {\n        String lastChildOfFirstGetProp = \"\";\n        Node firstChild = parent.getFirstChild();\n        if (NodeUtil.isGet(firstChild)) {\n          lastChildOfFirstGetProp = parent.getFirstChild().getLastChild().getString();\n        }\n        if (lastChildOfFirstGetProp.equals(\"prototype\") || lastChildOfFirstGetProp.equals(\"$jscomp$scopedEval\")) {\n          return false;\n        }\n\n        // Check if the parent is an assignment to another getprop.\n        if (parent.getParent() != null\n            && parent.getParent().getType() == Token.ASSIGN\n            && NodeUtil.isGet(parent.getParent().getFirstChild())) {\n          Node grandParent = parent.getParent().getParent();\n          Node secondChild = parent.getParent().getSecondChild();\n          if (secondChild != null &&\n              !secondChild.isName() &&\n              grandParent != null &&\n              grandParent.getType() == Token.EXPR_RESULT &&\n              grandParent.getParent() != null &&\n              grandParent.getParent().getType() == Token.SCRIPT) {\n            Node candidateNameNode = secondChild.getFirstChild();\n            if (candidateNameNode != null &&\n                candidateNameNode.isName() &&\n                candidateNameNode.getString().equals(\"$jscomp$templatize\")) {\n              return true;\n            } else {\n              return false;\n            }\n          } else {\n            return false;\n          }\n        }\n      }\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..1ece0c4d 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,43 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype or a scoped eval.\n+      if (parent != null && NodeUtil.isGet(parent)) {\n+        String lastChildOfFirstGetProp = \"\";\n+        Node firstChild = parent.getFirstChild();\n+        if (NodeUtil.isGet(firstChild)) {\n+          lastChildOfFirstGetProp = parent.getFirstChild().getLastChild().getString();\n+        }\n+        if (lastChildOfFirstGetProp.equals(\"prototype\") || lastChildOfFirstGetProp.equals(\"$jscomp$scopedEval\")) {\n+          return false;\n+        }\n+\n+        // Check if the parent is an assignment to another getprop.\n+        if (parent.getParent() != null\n+            && parent.getParent().getType() == Token.ASSIGN\n+            && NodeUtil.isGet(parent.getParent().getFirstChild())) {\n+          Node grandParent = parent.getParent().getParent();\n+          Node secondChild = parent.getParent().getSecondChild();\n+          if (secondChild != null &&\n+              !secondChild.isName() &&\n+              grandParent != null &&\n+              grandParent.getType() == Token.EXPR_RESULT &&\n+              grandParent.getParent() != null &&\n+              grandParent.getParent().getType() == Token.SCRIPT) {\n+            Node candidateNameNode = secondChild.getFirstChild();\n+            if (candidateNameNode != null &&\n+                candidateNameNode.isName() &&\n+                candidateNameNode.getString().equals(\"$jscomp$templatize\")) {\n+              return true;\n+            } else {\n+              return false;\n+            }\n+          } else {\n+            return false;\n+          }\n+        }\n+      }\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}