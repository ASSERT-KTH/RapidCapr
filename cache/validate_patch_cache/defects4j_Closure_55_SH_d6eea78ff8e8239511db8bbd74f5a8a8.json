{
    "patch": "    boolean isFunctionExpression = NodeUtil.isFunctionExpression(n);\n    if(isFunctionExpression){\n        return true;\n    }\n    // Check if the node is a call expression\n    Node firstChild = n.getFirstChild();\n    if(firstChild==null || !firstChild.isQualifiedName()){\n        return false;\n    }\n    String functionName = firstChild.getQualifiedName();\n    switch(functionName){\n        case \"Object.freeze\":\n        case \"Object.seal\":\n        case \"Object.preventExtensions\":\n        case \"Reflect.preventExtensions\":\n            return true;\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..4d4d8d78 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,24 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    boolean isFunctionExpression = NodeUtil.isFunctionExpression(n);\n+    if(isFunctionExpression){\n+        return true;\n+    }\n+    // Check if the node is a call expression\n+    Node firstChild = n.getFirstChild();\n+    if(firstChild==null || !firstChild.isQualifiedName()){\n+        return false;\n+    }\n+    String functionName = firstChild.getQualifiedName();\n+    switch(functionName){\n+        case \"Object.freeze\":\n+        case \"Object.seal\":\n+        case \"Object.preventExtensions\":\n+        case \"Reflect.preventExtensions\":\n+            return true;\n+    }\n+    return false;\n   }\n \n   /**",
    "result_reason": "error: strings in switch are not supported in -source 1.6",
    "test_result": "ERROR"
}