{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n        String ns = arg.getString();\n        ProvidedName provided = providedNames.get(ns);\n        if (provided == null) {\n            // If the namespace was not provided, we add it to an \"unrecognized requires\" list\n            unrecognizedRequires.add(\n                new UnrecognizedRequire(n, ns, t.getSourceName()));\n        } else if (!provided.isExplicitlyProvided()) {\n            // If the namespace was provided implicitly, we add an error message\n            compiler.report(t.makeError(n, MISSING_PROVIDE_ERROR, ns));\n        } else {\n            // If the namespace was provided explicitly, we check if it is in the correct module\n            JSModule providedModule = provided.explicitModule;\n\n            // This must be non-null, because there was an explicit provide.\n            Preconditions.checkNotNull(providedModule);\n\n            JSModule module = t.getModule();\n            if (moduleGraph != null &&\n                module != providedModule &&\n                !moduleGraph.dependsOn(module, providedModule)) {\n                compiler.report(\n                    t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                        providedModule.getName(),\n                        module.getName()));\n            }\n        }\n\n        maybeAddToSymbolTable(left);\n        maybeAddStringNodeToSymbolTable(arg);\n\n        // We replace the require node with an empty node to remove it from the AST\n        Node emptyNode = IR.empty().useSourceInfoFromForTree(n);\n        parent.replaceChild(n, emptyNode);\n\n        compiler.reportCodeChange();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..662a4cee 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,46 +292,47 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n     Node left = n.getFirstChild();\n     Node arg = left.getNext();\n     if (verifyLastArgumentIsString(t, left, arg)) {\n-      String ns = arg.getString();\n-      ProvidedName provided = providedNames.get(ns);\n-      if (provided == null || !provided.isExplicitlyProvided()) {\n-        unrecognizedRequires.add(\n-            new UnrecognizedRequire(n, ns, t.getSourceName()));\n-      } else {\n-        JSModule providedModule = provided.explicitModule;\n-\n-        // This must be non-null, because there was an explicit provide.\n-        Preconditions.checkNotNull(providedModule);\n-\n-        JSModule module = t.getModule();\n-        if (moduleGraph != null &&\n-            module != providedModule &&\n-            !moduleGraph.dependsOn(module, providedModule)) {\n-          compiler.report(\n-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n-                  providedModule.getName(),\n-                  module.getName()));\n+        String ns = arg.getString();\n+        ProvidedName provided = providedNames.get(ns);\n+        if (provided == null) {\n+            // If the namespace was not provided, we add it to an \"unrecognized requires\" list\n+            unrecognizedRequires.add(\n+                new UnrecognizedRequire(n, ns, t.getSourceName()));\n+        } else if (!provided.isExplicitlyProvided()) {\n+            // If the namespace was provided implicitly, we add an error message\n+            compiler.report(t.makeError(n, MISSING_PROVIDE_ERROR, ns));\n+        } else {\n+            // If the namespace was provided explicitly, we check if it is in the correct module\n+            JSModule providedModule = provided.explicitModule;\n+\n+            // This must be non-null, because there was an explicit provide.\n+            Preconditions.checkNotNull(providedModule);\n+\n+            JSModule module = t.getModule();\n+            if (moduleGraph != null &&\n+                module != providedModule &&\n+                !moduleGraph.dependsOn(module, providedModule)) {\n+                compiler.report(\n+                    t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                        providedModule.getName(),\n+                        module.getName()));\n+            }\n         }\n-      }\n \n-      maybeAddToSymbolTable(left);\n-      maybeAddStringNodeToSymbolTable(arg);\n+        maybeAddToSymbolTable(left);\n+        maybeAddStringNodeToSymbolTable(arg);\n+\n+        // We replace the require node with an empty node to remove it from the AST\n+        Node emptyNode = IR.empty().useSourceInfoFromForTree(n);\n+        parent.replaceChild(n, emptyNode);\n \n-      // Requires should be removed before further processing.\n-      // Some clients run closure pass multiple times, first with\n-      // the checks for broken requires turned off. In these cases, we\n-      // allow broken requires to be preserved by the first run to\n-      // let them be caught in the subsequent run.\n-      if (provided != null) {\n-        parent.detachFromParent();\n         compiler.reportCodeChange();\n-      }\n     }\n-  }\n+}\n \n   /**\n    * Handles a goog.provide call.",
    "result_reason": "java.lang.RuntimeException: java.lang.IllegalStateException: Expected expression but was EMPTY Reference node EMPTY 2 [source_file: i0]",
    "test_result": "FAIL"
}