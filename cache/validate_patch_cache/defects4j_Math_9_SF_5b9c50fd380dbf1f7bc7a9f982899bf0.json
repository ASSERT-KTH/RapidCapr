{
    "patch": "public Line revert() {\n    Vector negatedDirection = direction.negate(); // negate direction\n    BigDecimal start_x = zero.getPoint().getX();\n    BigDecimal start_y = zero.getPoint().getY();\n    BigDecimal end_x = start_x.subtract(new BigDecimal(negatedDirection.getPoint().getX()));\n    BigDecimal end_y = start_y.subtract(new BigDecimal(negatedDirection.getPoint().getY()));\n    Point end = new Point(end_x.doubleValue(), end_y.doubleValue());\n    final Line reverted = new Line(zero.getPoint(), end);\n    return reverted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..dc640510e 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,16 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() {\n+    Vector negatedDirection = direction.negate(); // negate direction\n+    BigDecimal start_x = zero.getPoint().getX();\n+    BigDecimal start_y = zero.getPoint().getY();\n+    BigDecimal end_x = start_x.subtract(new BigDecimal(negatedDirection.getPoint().getX()));\n+    BigDecimal end_y = start_y.subtract(new BigDecimal(negatedDirection.getPoint().getY()));\n+    Point end = new Point(end_x.doubleValue(), end_y.doubleValue());\n+    final Line reverted = new Line(zero.getPoint(), end);\n+    return reverted;\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}