{
    "patch": "            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex.clone();\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex.clone();\n                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);\n\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = reflectedSimplex.clone();\n                    simplex[n + 1] = expanded;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex.clone();\n                    simplex[n + 1] = reflected;\n                }\n\n            } else {\n                // perform a contraction\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted.clone();\n                    simplex[n + 1] = contracted;\n                } else {\n                    // shrink the simplex\n                    shrink(simplex, comparator);\n                }\n            }\n\n            // check convergence\n            if (isConverged(simplex, comparator)) {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..54b96d954 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,15 +58,14 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n             incrementIterationsCounter();\n \n             // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n+            final RealPointValuePair[] original = simplex.clone();\n             final RealPointValuePair best = original[0];\n \n             // perform a reflection step\n@@ -74,29 +73,34 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             if (comparator.compare(reflected, best) < 0) {\n \n                 // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair[] reflectedSimplex = simplex.clone();\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);\n+\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = reflectedSimplex.clone();\n+                    simplex[n + 1] = expanded;\n+                } else {\n                     // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                    simplex = reflectedSimplex.clone();\n+                    simplex[n + 1] = reflected;\n                 }\n \n-                return;\n-\n+            } else {\n+                // perform a contraction\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contracted.clone();\n+                    simplex[n + 1] = contracted;\n+                } else {\n+                    // shrink the simplex\n+                    shrink(simplex, comparator);\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n-                return;\n-            }\n-\n-        }\n-\n-    }\n+            if (isConverged(simplex, comparator)) {\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}