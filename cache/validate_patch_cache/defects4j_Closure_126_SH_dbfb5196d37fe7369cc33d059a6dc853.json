{
    "patch": "      Node nextNode = n.getNext();\n      if (NodeUtil.hasFinally(n)) {\n        /* Don't try to minimize the exits of finally blocks, as this\n         * can cause problems if it changes the completion type of the finally\n         * block. See ECMA 262 Sections 8.9 & 12.14\n         */\n        Node finallyBlock = n.getLastChild();\n        nextNode = finallyBlock.getNext();\n      }\n      if (nextNode != null) {\n        tryMinimizeExits(nextNode, exitType, labelName);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..6b8e0fd0 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,9 +138,17 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n+      Node nextNode = n.getNext();\n       if (NodeUtil.hasFinally(n)) {\n+        /* Don't try to minimize the exits of finally blocks, as this\n+         * can cause problems if it changes the completion type of the finally\n+         * block. See ECMA 262 Sections 8.9 & 12.14\n+         */\n         Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n+        nextNode = finallyBlock.getNext();\n+      }\n+      if (nextNode != null) {\n+        tryMinimizeExits(nextNode, exitType, labelName);\n       }\n     }\n ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}