{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if(index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        char firstChar = input.charAt(start);\n        if(firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        int end = start + 1; // allow an empty entity\n        while(end < seqEnd && input.charAt(end) != ';') {\n            end++;\n        }\n\n        String entity = input.subSequence(start, end).toString();\n        if (entity.length() == 0) {\n            // If the entity is empty, write it to the output and return the current index\n            out.write(input.subSequence(index, end + 1).toString());\n            return index + 1 - start;\n        }\n\n        // Try to parse the entity value\n        int entityValue;\n        try {\n            entityValue = isHex ?\n                Integer.parseInt(entity, 16) :\n                Integer.parseInt(entity, 10);\n        } catch(NumberFormatException nfe) {\n            // If the entity is not valid, write it to the output and skip it\n            out.write(input.subSequence(index, end + 1).toString());\n            return index + 1 - start;\n        }\n\n        // If the entity value is valid, write it to the output\n        out.write(entityValue);\n        return end - index + 1;\n    }\n\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..056fa281 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,47 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    if(index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n+        int start = index + 2;\n+        boolean isHex = false;\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n-            }\n+        char firstChar = input.charAt(start);\n+        if(firstChar == 'x' || firstChar == 'X') {\n+            start++;\n+            isHex = true;\n+        }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n-            }\n+        int end = start + 1; // allow an empty entity\n+        while(end < seqEnd && input.charAt(end) != ';') {\n+            end++;\n+        }\n \n+        String entity = input.subSequence(start, end).toString();\n+        if (entity.length() == 0) {\n+            // If the entity is empty, write it to the output and return the current index\n+            out.write(input.subSequence(index, end + 1).toString());\n+            return index + 1 - start;\n+        }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        // Try to parse the entity value\n+        int entityValue;\n+        try {\n+            entityValue = isHex ?\n+                Integer.parseInt(entity, 16) :\n+                Integer.parseInt(entity, 10);\n+        } catch(NumberFormatException nfe) {\n+            // If the entity is not valid, write it to the output and skip it\n+            out.write(input.subSequence(index, end + 1).toString());\n+            return index + 1 - start;\n         }\n-        return 0;\n+\n+        // If the entity value is valid, write it to the output\n+        out.write(entityValue);\n+        return end - index + 1;\n     }\n+\n+    return 0;\n+}\n }",
    "result_reason": "java.lang.StringIndexOutOfBoundsException: String index out of range: 14",
    "test_result": "FAIL"
}