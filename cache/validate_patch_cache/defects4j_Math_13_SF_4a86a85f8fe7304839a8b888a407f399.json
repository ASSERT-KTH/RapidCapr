{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix sqrt = dec.getV().multiply(dec.getD().sqrt()).multiply(dec.getV().transpose());\n    // Set small negative eigenvalues to zero to avoid NaNs or negative results\n    for (int i = 0; i < sqrt.getRowDimension(); i++) {\n        for (int j = 0; j < sqrt.getColumnDimension(); j++) {\n            double value = sqrt.getEntry(i, j);\n            if (Double.isNaN(value) || value < 0.0) {\n                sqrt.setEntry(i, j, 0.0);\n            }\n        }\n    }\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ed2fdf01a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix sqrt = dec.getV().multiply(dec.getD().sqrt()).multiply(dec.getV().transpose());\n+    // Set small negative eigenvalues to zero to avoid NaNs or negative results\n+    for (int i = 0; i < sqrt.getRowDimension(); i++) {\n+        for (int j = 0; j < sqrt.getColumnDimension(); j++) {\n+            double value = sqrt.getEntry(i, j);\n+            if (Double.isNaN(value) || value < 0.0) {\n+                sqrt.setEntry(i, j, 0.0);\n+            }\n+        }\n     }\n+    return sqrt;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}