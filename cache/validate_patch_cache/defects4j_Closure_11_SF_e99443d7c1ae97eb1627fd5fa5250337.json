{
    "patch": "public class PropertyFileReader {\n    private final Properties props;\n\n    public PropertyFileReader(String fileName) throws IOException {\n        props = new Properties();\n        InputStream is = getClass().getClassLoader().getResourceAsStream(fileName);\n        props.load(is);\n    }\n\n    public String getProp(String key) {\n        return props.getProperty(key);\n    }\n\n    public String[] getProp(String... keys) {\n        List<String> values = new ArrayList<>();\n        for (String key : keys) {\n            String value = getProp(key);\n            if (value != null && !value.isEmpty()) {\n                values.add(value);\n            }\n        }\n        return values.toArray(new String[0]);\n    }\n\n    public String[] getPropWithWarning(String... keys) {\n        List<String> values = new ArrayList<>();\n        List<String> warnings = new ArrayList<>();\n        for (String key : keys) {\n            String value = getProp(key);\n            if (value != null && !value.isEmpty()) {\n                values.add(value);\n            } else {\n                warnings.add(\"Property '\" + key + \"' not found\");\n            }\n        }\n        if (!warnings.isEmpty()) {\n            System.out.println(\"Warnings:\");\n            for (String warning : warnings) {\n                System.out.println(warning);\n            }\n        }\n        return values.toArray(new String[0]);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..45f668ad 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,50 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public class PropertyFileReader {\n+    private final Properties props;\n+\n+    public PropertyFileReader(String fileName) throws IOException {\n+        props = new Properties();\n+        InputStream is = getClass().getClassLoader().getResourceAsStream(fileName);\n+        props.load(is);\n+    }\n+\n+    public String getProp(String key) {\n+        return props.getProperty(key);\n+    }\n+\n+    public String[] getProp(String... keys) {\n+        List<String> values = new ArrayList<>();\n+        for (String key : keys) {\n+            String value = getProp(key);\n+            if (value != null && !value.isEmpty()) {\n+                values.add(value);\n+            }\n+        }\n+        return values.toArray(new String[0]);\n+    }\n+\n+    public String[] getPropWithWarning(String... keys) {\n+        List<String> values = new ArrayList<>();\n+        List<String> warnings = new ArrayList<>();\n+        for (String key : keys) {\n+            String value = getProp(key);\n+            if (value != null && !value.isEmpty()) {\n+                values.add(value);\n+            } else {\n+                warnings.add(\"Property '\" + key + \"' not found\");\n+            }\n+        }\n+        if (!warnings.isEmpty()) {\n+            System.out.println(\"Warnings:\");\n+            for (String warning : warnings) {\n+                System.out.println(warning);\n+            }\n+        }\n+        return values.toArray(new String[0]);\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}