{
    "patch": "if (parent != null && parent.getType() == Token.ASSIGN) {\n  Node lhs = parent.getFirstChild();\n  Node rhs = lhs.getNext();\n\n  if (n == lhs) {\n    // Always traverse the left side of the assignment. To handle\n    // nested assignments properly (e.g., (a = this).property = c;),\n    // assignLhsChild should not be overridden.\n    if (assignLhsChild == null) {\n      assignLhsChild = lhs;\n    }\n  } else {\n\n     // Only traverse the right side if it's not an assignment to a prototype\n     // property or subproperty.\n     if (NodeUtil.isGet(lhs)) {\n         if (lhs.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n         } else if (lhs.getLastChild().getString().equals(\"constructor\")) {\n             // Don't traverse the right side of an assignment of a constructor.\n             // This is necessary to avoid traversing goog.inherits calls.\n             return n != rhs;\n         }\n     }\n\n     // Don't traverse functions that are getting lent to a prototype.\n     if (NodeUtil.isPrototypeProperty(lhs)) {\n         return false;\n     }\n\n     // Don't traverse functions that are conditionally constructed.\n     if (!NodeUtil.evaluatesToLocalValue(rhs)) {\n         return false;\n     }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..87d29815 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,42 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+if (parent != null && parent.getType() == Token.ASSIGN) {\n+  Node lhs = parent.getFirstChild();\n+  Node rhs = lhs.getNext();\n+\n+  if (n == lhs) {\n+    // Always traverse the left side of the assignment. To handle\n+    // nested assignments properly (e.g., (a = this).property = c;),\n+    // assignLhsChild should not be overridden.\n+    if (assignLhsChild == null) {\n+      assignLhsChild = lhs;\n+    }\n+  } else {\n+\n+     // Only traverse the right side if it's not an assignment to a prototype\n+     // property or subproperty.\n+     if (NodeUtil.isGet(lhs)) {\n+         if (lhs.getLastChild().getString().equals(\"prototype\")) {\n+             return false;\n+         } else if (lhs.getLastChild().getString().equals(\"constructor\")) {\n+             // Don't traverse the right side of an assignment of a constructor.\n+             // This is necessary to avoid traversing goog.inherits calls.\n+             return n != rhs;\n+         }\n+     }\n+\n+     // Don't traverse functions that are getting lent to a prototype.\n+     if (NodeUtil.isPrototypeProperty(lhs)) {\n+         return false;\n+     }\n+\n+     // Don't traverse functions that are conditionally constructed.\n+     if (!NodeUtil.evaluatesToLocalValue(rhs)) {\n+         return false;\n+     }\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}