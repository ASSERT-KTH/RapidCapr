{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n\t// Strip unreferenced args off the end of the function declaration.\n\tif (fnScope.getRootNode().isFunction()) {\n\t    Node function = fnScope.getRootNode();\n\n\t    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n\t\t    // The parameters object literal setters can not be removed.\n\t\t    return;\n\t    }\n\n\t    Node argList = function.getSecondChild();\n\t    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n\t    if (!modifyCallers) {\n\t\t    Node lastArg;\n\t\t    while ((lastArg = argList.getLastChild()) != null) {\n\t\t        if (!lastArg.isDefaultValue()) {\n\t\t\t        Var var = scope.getVar(lastArg.getString());\n\n\t\t\t        if (var == null || referenced.contains(var)) {\n\t\t\t\t        break;\n\t\t\t        }\n\n\t\t\t        argList.removeChild(lastArg);\n\n\t\t\t        reportCodeChange();\n\t\t        } else {\n\t\t\t        break;\n\t\t        }\n\t\t    }\n\t    } else {\n\t\t    callSiteOptimizer.optimize(fnScope, referenced);\n\t    }\n\t}\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6339d6db 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,41 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n-    }\n-  }\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+\t// Strip unreferenced args off the end of the function declaration.\n+\tif (fnScope.getRootNode().isFunction()) {\n+\t    Node function = fnScope.getRootNode();\n+\n+\t    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+\t\t    // The parameters object literal setters can not be removed.\n+\t\t    return;\n+\t    }\n+\n+\t    Node argList = function.getSecondChild();\n+\t    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+\t    if (!modifyCallers) {\n+\t\t    Node lastArg;\n+\t\t    while ((lastArg = argList.getLastChild()) != null) {\n+\t\t        if (!lastArg.isDefaultValue()) {\n+\t\t\t        Var var = scope.getVar(lastArg.getString());\n+\n+\t\t\t        if (var == null || referenced.contains(var)) {\n+\t\t\t\t        break;\n+\t\t\t        }\n+\n+\t\t\t        argList.removeChild(lastArg);\n+\n+\t\t\t        reportCodeChange();\n+\t\t        } else {\n+\t\t\t        break;\n+\t\t        }\n+\t\t    }\n+\t    } else {\n+\t\t    callSiteOptimizer.optimize(fnScope, referenced);\n+\t    }\n+\t}\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}