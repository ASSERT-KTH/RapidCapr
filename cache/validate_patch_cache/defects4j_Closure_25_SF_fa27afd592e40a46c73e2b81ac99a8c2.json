{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType type = null;\n    if (constructor.getJSType() != null) {\n      // We restrict to not-null/undef here to prevent errors for defaulted\n      // arguments.\n      FunctionType fnType = constructor.getJSType().restrictByNotNullOrUndefined().toMaybeFunctionType();\n      if (fnType != null && fnType.isConstructor()) {\n        type = fnType.getInstanceType();\n      } else if (!fnType.isUnknownType()){\n        // If the function is defined and is not a constructor, then there is\n        // no reason to believe it can return an object with fields.\n        type = getNativeType(NO_OBJECT_TYPE);\n      } else {\n        // If the constructor type is unknown, then we don't know whether it can\n        // return an object with fields.\n        type = getNativeType(UNKNOWN_TYPE);\n      }\n    } else {\n      // \"new xyz.R\" where xyz.R is unknown still should evaluate to {?}\n      type = getNativeType(UNKNOWN_TYPE);\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..a7e0f97f 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1033,27 +1033,27 @@ class TypeInference\n   }\n \n   private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n     JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n+    if (constructor.getJSType() != null) {\n+      // We restrict to not-null/undef here to prevent errors for defaulted\n+      // arguments.\n+      FunctionType fnType = constructor.getJSType().restrictByNotNullOrUndefined().toMaybeFunctionType();\n+      if (fnType != null && fnType.isConstructor()) {\n+        type = fnType.getInstanceType();\n+      } else if (!fnType.isUnknownType()){\n+        // If the function is defined and is not a constructor, then there is\n+        // no reason to believe it can return an object with fields.\n+        type = getNativeType(NO_OBJECT_TYPE);\n       } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+        // If the constructor type is unknown, then we don't know whether it can\n+        // return an object with fields.\n+        type = getNativeType(UNKNOWN_TYPE);\n       }\n+    } else {\n+      // \"new xyz.R\" where xyz.R is unknown still should evaluate to {?}\n+      type = getNativeType(UNKNOWN_TYPE);\n     }\n     n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}