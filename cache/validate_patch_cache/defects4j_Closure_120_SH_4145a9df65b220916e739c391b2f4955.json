{
    "patch": "      if (block.isFunction) {\n        // Function declarations have their own var scope.\n        return false;\n      } else if (block.isLoop) {\n        return false;\n      } else {\n        for (Node n : block.getSuccessors()) {\n          if (!n.equals(ref)) {\n            BasicBlock successorBlock = n.getBasicBlock();\n            if (successorBlock.isLoop) {\n              // In a loop body it's impossible to say whether a variable is\n              // used exactly once, since it depends on the number of loop iterations.\n              return false;\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..3f8912f8 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,23 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        // Function declarations have their own var scope.\n+        return false;\n+      } else if (block.isLoop) {\n+        return false;\n+      } else {\n+        for (Node n : block.getSuccessors()) {\n+          if (!n.equals(ref)) {\n+            BasicBlock successorBlock = n.getBasicBlock();\n+            if (successorBlock.isLoop) {\n+              // In a loop body it's impossible to say whether a variable is\n+              // used exactly once, since it depends on the number of loop iterations.\n+              return false;\n+            }\n+          }\n+        }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}