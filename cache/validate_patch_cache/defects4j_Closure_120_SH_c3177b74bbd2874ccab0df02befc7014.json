{
    "patch": "          // When a function call is made, it is impossible to know what values are\n          // being passed in, so we must conservatively assume that all arguments\n          // may be references to the variable being queried.\n          return !cfg.getOutEdges(block.getSuccessor()).stream()\n              .map(DiGraphEdge::getValue)\n              .anyMatch(Branch::isBackward);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..9c86c013 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,12 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // When a function call is made, it is impossible to know what values are\n+          // being passed in, so we must conservatively assume that all arguments\n+          // may be references to the variable being queried.\n+          return !cfg.getOutEdges(block.getSuccessor()).stream()\n+              .map(DiGraphEdge::getValue)\n+              .anyMatch(Branch::isBackward);\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}