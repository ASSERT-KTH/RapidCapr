{
    "patch": "boolean currentAdded = false;\nboolean nextAdded = false;\nif (currentStrategy != null) {\n    if (currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n        currentAdded = true;\n    }\n}\nif (nextStrategy != null) {\n    if (nextStrategy.addRegex(this, regex)) {\n        if (!currentAdded) {\n            collector.add(currentStrategy);\n        }\n        collector.add(nextStrategy);\n        nextAdded = true;\n    }\n}\nif (!currentAdded && !nextAdded) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\ncurrentFormatField = null;\nstrategies = collector.toArray(new Strategy[0]);\nparsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..ab768ece 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,29 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+boolean currentAdded = false;\n+boolean nextAdded = false;\n+if (currentStrategy != null) {\n+    if (currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+        currentAdded = true;\n+    }\n+}\n+if (nextStrategy != null) {\n+    if (nextStrategy.addRegex(this, regex)) {\n+        if (!currentAdded) {\n+            collector.add(currentStrategy);\n+        }\n+        collector.add(nextStrategy);\n+        nextAdded = true;\n+    }\n+}\n+if (!currentAdded && !nextAdded) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+currentFormatField = null;\n+strategies = collector.toArray(new Strategy[0]);\n+parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}