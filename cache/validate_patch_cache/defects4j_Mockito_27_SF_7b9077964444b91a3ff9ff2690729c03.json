{
    "patch": "import org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker;\nimport org.mockito.internal.handler.MockHandlerImpl;\nimport org.mockito.internal.util.MockUtil;\nimport org.mockito.invocation.Invocation;\nimport org.mockito.invocation.MockHandler;\nimport org.mockito.invocation.SelfReturns;\nimport org.mockito.mock.MockCreationSettings;\nimport org.mockito.mock.MockSettings;\nimport org.mockito.plugins.MockMaker;\n\nimport java.lang.reflect.Proxy;\nimport java.util.List;\n\npublic class MyMockito {\n    private static final MockMaker mockMaker = new ByteBuddyMockMaker();\n\n    public static <T> void resetMock(T mock) {\n        MockUtil mockUtil = new MockUtil();\n        if (!mockUtil.isMock(mock)) {\n            throw new IllegalArgumentException(\"Object is not a mock.\");\n        }\n\n        MockHandlerImpl<?> oldHandler = (MockHandlerImpl<?>) mockUtil.getMockHandler(mock);\n        MockCreationSettings<?> settings = oldHandler.getMockSettings();\n        MockHandler<T> newHandler = new MyMockHandler<>(settings.getMockSettings());\n\n        @SuppressWarnings(\"unchecked\")\n        T newProxy = (T) mockMaker.createMock(settings.withoutSerializable(),\n                new MethodInterceptorFilter(newHandler),\n                settings.getExtraInterfaces(),\n                mock.getClass().getClassLoader(),\n                false);\n\n        List<Class<?>> interfaces = mockUtil.getMockedType(mock).getInterfacesAsList();\n        if (!interfaces.isEmpty() && Proxy.isProxyClass(mock.getClass())) {\n            newProxy = (T) Proxy.newProxyInstance(mock.getClass().getClassLoader(), interfaces.toArray(new Class[0]), new MethodInterceptorFilter(newHandler));\n        }\n\n        oldHandler.setDelegates(newProxy);\n    }\n\n    private static class MyMockHandler<T> implements MockHandler<T> {\n        private final MockSettings mockSettings;\n\n        MyMockHandler(MockSettings mockSettings) {\n            this.mockSettings = mockSettings;\n        }\n\n        @Override\n        public Object handle(Invocation invocation) throws Throwable {\n            Object result = new SelfReturns().answer(invocation);\n\n            if (mockSettings.getInvocationListeners() != null) {\n                for (Object listener : mockSettings.getInvocationListeners()) {\n                    if (listener instanceof InvocationListener) {\n                        ((InvocationListener) listener).reportInvocation(new MethodInvocationReport(invocation, result));\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        @Override\n        public MockCreationSettings<T> getMockSettings() {\n            return null;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..717d290e3 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,76 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker;\n+import org.mockito.internal.handler.MockHandlerImpl;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.MockHandler;\n+import org.mockito.invocation.SelfReturns;\n+import org.mockito.mock.MockCreationSettings;\n+import org.mockito.mock.MockSettings;\n+import org.mockito.plugins.MockMaker;\n+\n+import java.lang.reflect.Proxy;\n+import java.util.List;\n+\n+public class MyMockito {\n+    private static final MockMaker mockMaker = new ByteBuddyMockMaker();\n+\n+    public static <T> void resetMock(T mock) {\n+        MockUtil mockUtil = new MockUtil();\n+        if (!mockUtil.isMock(mock)) {\n+            throw new IllegalArgumentException(\"Object is not a mock.\");\n+        }\n+\n+        MockHandlerImpl<?> oldHandler = (MockHandlerImpl<?>) mockUtil.getMockHandler(mock);\n+        MockCreationSettings<?> settings = oldHandler.getMockSettings();\n+        MockHandler<T> newHandler = new MyMockHandler<>(settings.getMockSettings());\n+\n+        @SuppressWarnings(\"unchecked\")\n+        T newProxy = (T) mockMaker.createMock(settings.withoutSerializable(),\n+                new MethodInterceptorFilter(newHandler),\n+                settings.getExtraInterfaces(),\n+                mock.getClass().getClassLoader(),\n+                false);\n+\n+        List<Class<?>> interfaces = mockUtil.getMockedType(mock).getInterfacesAsList();\n+        if (!interfaces.isEmpty() && Proxy.isProxyClass(mock.getClass())) {\n+            newProxy = (T) Proxy.newProxyInstance(mock.getClass().getClassLoader(), interfaces.toArray(new Class[0]), new MethodInterceptorFilter(newHandler));\n+        }\n+\n+        oldHandler.setDelegates(newProxy);\n+    }\n+\n+    private static class MyMockHandler<T> implements MockHandler<T> {\n+        private final MockSettings mockSettings;\n+\n+        MyMockHandler(MockSettings mockSettings) {\n+            this.mockSettings = mockSettings;\n+        }\n+\n+        @Override\n+        public Object handle(Invocation invocation) throws Throwable {\n+            Object result = new SelfReturns().answer(invocation);\n+\n+            if (mockSettings.getInvocationListeners() != null) {\n+                for (Object listener : mockSettings.getInvocationListeners()) {\n+                    if (listener instanceof InvocationListener) {\n+                        ((InvocationListener) listener).reportInvocation(new MethodInvocationReport(invocation, result));\n+                    }\n+                }\n+            }\n+\n+            return result;\n+        }\n+\n+        @Override\n+        public MockCreationSettings<T> getMockSettings() {\n+            return null;\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}