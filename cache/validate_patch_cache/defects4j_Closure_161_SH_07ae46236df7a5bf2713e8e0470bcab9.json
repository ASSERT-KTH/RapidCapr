{
    "patch": "if (left.getType() != Token.ARRAYLIT) {\n  return n;\n}\n\nif (left.getFirstChild() == null) {\n  if (NodeUtil.isAssignmentOp(parent)) {\n    // Empty array literals cannot be folded if used as targets of an\n    // assignment because they lack the correct side-effects.\n    return n;\n  }\n  // Replace the entire GETELEM with 'undefined'\n  Node undefinedNode = NodeUtil.newUndefinedNode(n);\n  parent.replaceChild(n, undefinedNode);\n  reportCodeChange();\n  return undefinedNode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..9ea3944c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,22 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+if (left.getType() != Token.ARRAYLIT) {\n+  return n;\n+}\n+\n+if (left.getFirstChild() == null) {\n+  if (NodeUtil.isAssignmentOp(parent)) {\n+    // Empty array literals cannot be folded if used as targets of an\n+    // assignment because they lack the correct side-effects.\n+    return n;\n+  }\n+  // Replace the entire GETELEM with 'undefined'\n+  Node undefinedNode = NodeUtil.newUndefinedNode(n);\n+  parent.replaceChild(n, undefinedNode);\n+  reportCodeChange();\n+  return undefinedNode;\n+}\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}