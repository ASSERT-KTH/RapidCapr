{
    "patch": "Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (mockCandidate != null && field.getType().isAssignableFrom(mockCandidate.getClass())) {\n    field.setAccessible(true);\n    try {\n        Object oldValue = field.get(fieldInstance);\n        field.set(fieldInstance, mockCandidate);\n        for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n            innerField.setAccessible(true);\n            if (innerField.get(mockCandidate) == oldValue) {\n                Object innerMockCandidate = mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate);\n                if (field.getType().isAssignableFrom(innerMockCandidate.getClass())) {\n                    innerField.set(mockCandidate, innerMockCandidate);\n                } else if (innerField.getType().isAssignableFrom(mockCandidate.getClass())) {\n                    if (innerMockCandidate != null) {\n                        field.setAccessible(true);\n                        field.set(fieldInstance, innerMockCandidate);\n                    }\n                    innerField.set(mockCandidate, mockCandidateFilter.filterCandidate(mocks, field, mockCandidate));\n                }\n            }\n        }\n    } catch (IllegalAccessException e) {\n        throw new RuntimeException(e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..0f35d5822 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,34 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (mockCandidate != null && field.getType().isAssignableFrom(mockCandidate.getClass())) {\n+    field.setAccessible(true);\n+    try {\n+        Object oldValue = field.get(fieldInstance);\n+        field.set(fieldInstance, mockCandidate);\n+        for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n+            innerField.setAccessible(true);\n+            if (innerField.get(mockCandidate) == oldValue) {\n+                Object innerMockCandidate = mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate);\n+                if (field.getType().isAssignableFrom(innerMockCandidate.getClass())) {\n+                    innerField.set(mockCandidate, innerMockCandidate);\n+                } else if (innerField.getType().isAssignableFrom(mockCandidate.getClass())) {\n+                    if (innerMockCandidate != null) {\n+                        field.setAccessible(true);\n+                        field.set(fieldInstance, innerMockCandidate);\n+                    }\n+                    innerField.set(mockCandidate, mockCandidateFilter.filterCandidate(mocks, field, mockCandidate));\n+                }\n+            }\n+        }\n+    } catch (IllegalAccessException e) {\n+        throw new RuntimeException(e);\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}