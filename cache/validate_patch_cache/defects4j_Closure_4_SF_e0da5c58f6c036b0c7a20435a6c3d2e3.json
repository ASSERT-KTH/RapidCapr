{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolvedViaProps = resolveViaProperties(t, enclosing);\n    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n    \n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    if (resolvedViaRegistry) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    if (resolvedViaProps) {\n      super.resolveInternal(t, enclosing);\n      if (isResolved()) {\n        finishPropertyContinuations();\n      }\n    }\n\n    if (!resolvedViaProps && !resolvedViaRegistry) {\n      super.resolveInternal(t, enclosing);\n    }\n\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..e6734e9a 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,31 +182,35 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+    boolean resolvedViaProps = resolveViaProperties(t, enclosing);\n+    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+    \n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n-    if (resolved) {\n+    if (resolvedViaRegistry) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n       return registry.isLastGeneration() ?\n           getReferencedType() : this;\n     }\n \n-    resolveViaProperties(t, enclosing);\n+    if (resolvedViaProps) {\n+      super.resolveInternal(t, enclosing);\n+      if (isResolved()) {\n+        finishPropertyContinuations();\n+      }\n+    }\n+\n+    if (!resolvedViaProps && !resolvedViaRegistry) {\n+      super.resolveInternal(t, enclosing);\n+    }\n+\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n     return registry.isLastGeneration() ?\n         getReferencedType() : this;\n   }",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}