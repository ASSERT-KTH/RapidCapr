{
    "patch": "    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Uses -2 to ensure there is something after the &#\n        if(index >= seqEnd) {\n            return 0;\n        }\n        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check there's more than just an x after the &# and before the semi-colon\n                int semi = input.subSequence(start, seqEnd).toString().indexOf(';');\n                if (semi < 0) {\n                    return 0;\n                }\n                end = semi + start;\n            } else {\n                int end = start;\n                // Note that this supports character codes without a ; on the end\n                while(end < seqEnd && input.charAt(end) != ';') \n                {\n                    end++;\n                }\n                if (end == seqEnd) {\n                    return 0;\n                }\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                return 0;\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..7a97ddd8 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -37,6 +37,9 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n+        if(index >= seqEnd) {\n+            return 0;\n+        }\n         if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n@@ -46,14 +49,22 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 start++;\n                 isHex = true;\n \n-                // Check there's more than just an x after the &#\n-            }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n+                // Check there's more than just an x after the &# and before the semi-colon\n+                int semi = input.subSequence(start, seqEnd).toString().indexOf(';');\n+                if (semi < 0) {\n+                    return 0;\n+                }\n+                end = semi + start;\n+            } else {\n+                int end = start;\n+                // Note that this supports character codes without a ; on the end\n+                while(end < seqEnd && input.charAt(end) != ';') \n+                {\n+                    end++;\n+                }\n+                if (end == seqEnd) {\n+                    return 0;\n+                }\n             }\n \n             int entityValue;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}