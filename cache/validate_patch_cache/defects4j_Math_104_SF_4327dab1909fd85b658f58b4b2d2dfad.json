{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a < 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid input. Both arguments must be non-negative.\");\n    }\n    double eps = 1e-15;\n    double g = incompleteGammaP(a, x, eps);\n    double ga = Gamma.gamma(a);\n    double rg = g * Math.pow(x, a) / ga;\n    return rg;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..355ccc15c 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,16 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a < 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid input. Both arguments must be non-negative.\");\n+    }\n+    double eps = 1e-15;\n+    double g = incompleteGammaP(a, x, eps);\n+    double ga = Gamma.gamma(a);\n+    double rg = g * Math.pow(x, a) / ga;\n+    return rg;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}