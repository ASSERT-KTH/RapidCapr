{
    "patch": "attachLiteralTypes(n);\nNode grandparent = parent == null ? null : parent.getParent();\nif (parent == null) {\n    if (n.getType() == Token.SCRIPT) {\n        handleFunctionInputs(n);\n    }\n} else if (parent.isFunction() && n.matchesQualifiedName(\"arguments\")) {\n    // Don't add hooks for call expressions to arguments.\n} else {\n    switch (n.getType()) {\n        case Token.FUNCTION:\n            if (parent.isFunction() && parent.getFirstChild() == n) {\n                // Function is a function statement, we don't need to attach anything\n            } else if (NodeUtil.isFunctionExpression(n) || parent.getType() == Token.SCRIPT || parent.getType() == Token.BLOCK) {\n                defineDeclaredFunction(n, parent);\n            } else if (grandparent != null && NodeUtil.isFunctionExpression(parent)) {\n                defineDeclaredFunction(parent, grandparent);\n            }\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n        case Token.LP:\n            if (parent.getParent().getType() == Token.SCRIPT && n.getNext().getType() == Token.RP) {\n                defineParamList(n);\n            } else if (parent.getParent() == scope.getRootNode()) {\n                handleFunctionInputs(parent.getParent());\n            }\n            break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e65b0603 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,40 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+attachLiteralTypes(n);\n+Node grandparent = parent == null ? null : parent.getParent();\n+if (parent == null) {\n+    if (n.getType() == Token.SCRIPT) {\n+        handleFunctionInputs(n);\n+    }\n+} else if (parent.isFunction() && n.matchesQualifiedName(\"arguments\")) {\n+    // Don't add hooks for call expressions to arguments.\n+} else {\n+    switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+            if (parent.isFunction() && parent.getFirstChild() == n) {\n+                // Function is a function statement, we don't need to attach anything\n+            } else if (NodeUtil.isFunctionExpression(n) || parent.getType() == Token.SCRIPT || parent.getType() == Token.BLOCK) {\n+                defineDeclaredFunction(n, parent);\n+            } else if (grandparent != null && NodeUtil.isFunctionExpression(parent)) {\n+                defineDeclaredFunction(parent, grandparent);\n+            }\n+            break;\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            defineCatch(n, parent);\n+            break;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineVar(n, parent);\n+            break;\n+        case Token.LP:\n+            if (parent.getParent().getType() == Token.SCRIPT && n.getNext().getType() == Token.RP) {\n+                defineParamList(n);\n+            } else if (parent.getParent() == scope.getRootNode()) {\n+                handleFunctionInputs(parent.getParent());\n+            }\n+            break;\n+    }\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}