{
    "patch": "@Override\npublic Node processForInLoop(ForInLoop loopNode) {\n    Node lhs = transform(loopNode.getIteratedObject());\n    Node rhs = transform(loopNode.getIterable());\n    Node body = transform(loopNode.getBody());\n\n    Node node = new Node(Token.FOR_IN, body);\n    node.addChildToBack(lhs);\n    node.addChildToBack(rhs);\n\n    AstNode assignmentTarget = loopNode.getIterator();\n\n    if (assignmentTarget instanceof VariableDeclaration) {\n        VariableDeclaration declaration = (VariableDeclaration) assignmentTarget;\n        for (VariableInitializer initializer : declaration.getVariables()) {\n            Node op = new Node(Token.VAR, newNode(Token.NAME, initializer.getTarget().getIdentifier()));\n            if (initializer.getInitializer() != null) {\n                op.addChildToBack(transform(initializer.getInitializer()));\n            }\n            node.addChildToBack(op);\n        }\n    } else { // Assignment\n        node.addChildToBack(transform(assignmentTarget));\n    }\n\n    node.setIsForEach(true);\n    node.useSourceInfoFrom(loopNode);\n    return node;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..942c9f3c 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,35 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n-\n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+@Override\n+public Node processForInLoop(ForInLoop loopNode) {\n+    Node lhs = transform(loopNode.getIteratedObject());\n+    Node rhs = transform(loopNode.getIterable());\n+    Node body = transform(loopNode.getBody());\n+\n+    Node node = new Node(Token.FOR_IN, body);\n+    node.addChildToBack(lhs);\n+    node.addChildToBack(rhs);\n+\n+    AstNode assignmentTarget = loopNode.getIterator();\n+\n+    if (assignmentTarget instanceof VariableDeclaration) {\n+        VariableDeclaration declaration = (VariableDeclaration) assignmentTarget;\n+        for (VariableInitializer initializer : declaration.getVariables()) {\n+            Node op = new Node(Token.VAR, newNode(Token.NAME, initializer.getTarget().getIdentifier()));\n+            if (initializer.getInitializer() != null) {\n+                op.addChildToBack(transform(initializer.getInitializer()));\n+            }\n+            node.addChildToBack(op);\n+        }\n+    } else { // Assignment\n+        node.addChildToBack(transform(assignmentTarget));\n     }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-\n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+    node.setIsForEach(true);\n+    node.useSourceInfoFrom(loopNode);\n+    return node;\n+}\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: IRFactory.TransformDispatcher is not abstract and does not override abstract method processExpressionStatement(ExpressionStatement) in TypeSafeDispatcher",
    "test_result": "ERROR"
}