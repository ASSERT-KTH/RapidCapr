{
    "patch": "Another possible fix line could be:\n```\nreturn (getSampleSize() > 0 && getPopulationSize() > 0) ? ((double) getNumberOfSuccesses() / (double) getPopulationSize()) * getSampleSize() : 0.0;\n```\nThis fix line checks if both the `getSampleSize()` and `getPopulationSize()` are greater than zero before computing the mean. If either of them is zero, it returns `0.0`. This ensures that the division by zero error is avoided and the function returns a valid result.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\nindex 27691272f..19457fd9c 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n@@ -265,7 +265,11 @@ public class HypergeometricDistribution extends AbstractIntegerDistribution {\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+Another possible fix line could be:\n+```\n+return (getSampleSize() > 0 && getPopulationSize() > 0) ? ((double) getNumberOfSuccesses() / (double) getPopulationSize()) * getSampleSize() : 0.0;\n+```\n+This fix line checks if both the `getSampleSize()` and `getPopulationSize()` are greater than zero before computing the mean. If either of them is zero, it returns `0.0`. This ensures that the division by zero error is avoided and the function returns a valid result.\n     }\n \n     /**",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}