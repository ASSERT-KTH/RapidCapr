{
    "patch": "@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  } else if (prettyPrint) {\n    // Don't pretty print recursively.\n    prettyPrint = false;\n\n    // Use a tree set so that the properties are sorted.\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this;\n         current != null && !current.isNativeObjectType() &&\n             propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n\n    StringBuilder sb = new StringBuilder();\n\n    // Check if the object type can be called\n    boolean isCallable = canBeCalled();\n\n    // If pretty-printing and the object type can be called, print with parentheses\n    if (!forAnnotations && isCallable) {\n      sb.append(\"(\");\n      if (isConstructor()) {\n        sb.append(\"new \");\n      }\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property).append(\": \");\n\n        // Check if the property is a recursive reference\n        JSType propertyType = getPropertyType(property);\n        if (propertyType != null && propertyType.equals(this)) {\n          sb.append(\"(recursive)\");\n        } else if (propertyType == null) {\n          sb.append(forAnnotations ? \"?\" : \"[?]\");\n        } else {\n          sb.append(propertyType.toString());\n        }\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"})\");\n    } else {\n      // If not pretty-printing or not callable, print with braces\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property).append(\": \");\n\n        // Check if the property is a recursive reference\n        JSType propertyType = getPropertyType(property);\n        if (propertyType != null && propertyType.equals(this)) {\n          sb.append(\"(recursive)\");\n        } else if (propertyType == null) {\n          sb.append(forAnnotations ? \"?\" : \"[?]\");\n        } else {\n          sb.append(propertyType.toString());\n        }\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n    }\n\n    prettyPrint = true;\n    return sb.toString();\n  } else {\n    return \"{...}\";\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..ec1069c0 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,28 +345,64 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n+  if (hasReferenceName()) {\n+    return getReferenceName();\n+  } else if (prettyPrint) {\n+    // Don't pretty print recursively.\n+    prettyPrint = false;\n+\n+    // Use a tree set so that the properties are sorted.\n+    Set<String> propertyNames = Sets.newTreeSet();\n+    for (ObjectType current = this;\n+         current != null && !current.isNativeObjectType() &&\n+             propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+         current = current.getImplicitPrototype()) {\n+      propertyNames.addAll(current.getOwnPropertyNames());\n+    }\n+\n+    StringBuilder sb = new StringBuilder();\n+\n+    // Check if the object type can be called\n+    boolean isCallable = canBeCalled();\n+\n+    // If pretty-printing and the object type can be called, print with parentheses\n+    if (!forAnnotations && isCallable) {\n+      sb.append(\"(\");\n+      if (isConstructor()) {\n+        sb.append(\"new \");\n+      }\n+      sb.append(\"{\");\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n-      return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n+      int i = 0;\n+      for (String property : propertyNames) {\n+        if (i > 0) {\n+          sb.append(\", \");\n+        }\n+\n+        sb.append(property).append(\": \");\n+\n+        // Check if the property is a recursive reference\n+        JSType propertyType = getPropertyType(property);\n+        if (propertyType != null && propertyType.equals(this)) {\n+          sb.append(\"(recursive)\");\n+        } else if (propertyType == null) {\n+          sb.append(forAnnotations ? \"?\" : \"[?]\");\n+        } else {\n+          sb.append(propertyType.toString());\n+        }\n+\n+        ++i;\n+        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+          sb.append(\", ...\");\n+          break;\n+        }\n       }\n \n-      StringBuilder sb = new StringBuilder();\n+      sb.append(\"})\");\n+    } else {\n+      // If not pretty-printing or not callable, print with braces\n       sb.append(\"{\");\n \n       int i = 0;\n@@ -375,9 +411,17 @@ class PrototypeObjectType extends ObjectType {\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+        sb.append(property).append(\": \");\n+\n+        // Check if the property is a recursive reference\n+        JSType propertyType = getPropertyType(property);\n+        if (propertyType != null && propertyType.equals(this)) {\n+          sb.append(\"(recursive)\");\n+        } else if (propertyType == null) {\n+          sb.append(forAnnotations ? \"?\" : \"[?]\");\n+        } else {\n+          sb.append(propertyType.toString());\n+        }\n \n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n@@ -387,13 +431,14 @@ class PrototypeObjectType extends ObjectType {\n       }\n \n       sb.append(\"}\");\n-\n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n     }\n+\n+    prettyPrint = true;\n+    return sb.toString();\n+  } else {\n+    return \"{...}\";\n   }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: duplicate annotation",
    "test_result": "ERROR"
}