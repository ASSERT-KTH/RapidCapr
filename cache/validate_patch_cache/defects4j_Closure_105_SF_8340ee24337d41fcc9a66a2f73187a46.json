{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = left.getSecondChild();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = new StringBuilder();\n  int foldedSize = 0;\n  Node elem = arrayNode.getFirstChild();\n  // Merges adjacent String nodes.\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (sb.length() > 0) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n    } else {\n      if (sb.length() > 0) {\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb = new StringBuilder();\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem.detach());\n    }\n    elem = elem.getNext();\n  }\n\n  if (sb.length() > 0) {\n    // + 2 for the quotes.\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n  // one for each comma.\n  foldedSize += arrayFoldedChildren.size() - 1;\n\n  // Compute cost savings after folding.\n  int originalSize = InlineCostEstimator.getCost(n);\n  int finalSize = foldedSize + 2 // [' and ']\n      + InlineCostEstimator.getCost(right); // add of join string\n  for (Node child : arrayFoldedChildren) {\n    finalSize += InlineCostEstimator.getCost(child);\n  }\n\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      // '[]' + '' => '[]'\n      Node emptyBracketNode = NodeUtil.newStringNode(\"\");\n      parent.replaceChild(n, emptyBracketNode);\n      break;\n\n    case 1:\n      Node foldedNode = arrayFoldedChildren.get(0);\n      if (finalSize < originalSize) {\n        if (foldedNode.isString() ||\n            (foldedNode.isTemplateLit() && NodeUtil.isNullOrEmptyStringNode(foldedNode.getLastChild()))) {\n          // If the folded node is a string or a template with a single static string part, we don't\n          // need to put it in a concat\n          parent.replaceChild(n, foldedNode);\n        } else {\n          // Wrap foldedNode in a new string node, so we can use that in a concat\n          Node stringifiedFoldedNode = NodeUtil.newStringNode(\n              compiler.toSource(foldedNode));\n          Node newConcat = IR.add(IR.concat(),\n              IR.string(\"[\"),\n              stringifiedFoldedNode,\n              IR.string(\"]\"),\n              IR.add(\n                  NodeUtil.newStringNode(joinString),\n                  NodeUtil.newStringNode(\"\")));\n          parent.replaceChild(n, NodeUtil.newStringNode(newConcat));\n        }\n      }\n      break;\n\n    default:\n      if (finalSize < originalSize) {\n        Node newArray = NodeUtil.newArrayNode(compiler);\n        for (Node child : arrayFoldedChildren) {\n          newArray.addChildToBack(child);\n        }\n        Node newJoin = IR.call(\n            IR.getprop(newArray, IR.string(\"join\")),\n            IR.string(joinString));\n        parent.replaceChild(n, newJoin);\n      }\n      break;\n  }\n\n  t.getCompiler().reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..74905241 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,96 +1458,108 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = left.getFirstChild();\n+  Node functionName = left.getSecondChild();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n+      !functionName.getString().equals(\"join\")) {\n+    return;\n+  }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+  String joinString = NodeUtil.getStringValue(right);\n+  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+  StringBuilder sb = new StringBuilder();\n+  int foldedSize = 0;\n+  Node elem = arrayNode.getFirstChild();\n+  // Merges adjacent String nodes.\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      if (sb.length() > 0) {\n+        sb.append(joinString);\n       }\n-      elem = elem.getNext();\n-    }\n-\n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+      sb.append(NodeUtil.getStringValue(elem));\n+    } else {\n+      if (sb.length() > 0) {\n+        // + 2 for the quotes.\n+        foldedSize += sb.length() + 2;\n+        arrayFoldedChildren.add(Node.newString(sb.toString()));\n+        sb = new StringBuilder();\n+      }\n+      foldedSize += InlineCostEstimator.getCost(elem);\n+      arrayFoldedChildren.add(elem.detach());\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+    elem = elem.getNext();\n+  }\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+  if (sb.length() > 0) {\n+    // + 2 for the quotes.\n+    foldedSize += sb.length() + 2;\n+    arrayFoldedChildren.add(Node.newString(sb.toString()));\n+  }\n+  // one for each comma.\n+  foldedSize += arrayFoldedChildren.size() - 1;\n+\n+  // Compute cost savings after folding.\n+  int originalSize = InlineCostEstimator.getCost(n);\n+  int finalSize = foldedSize + 2 // [' and ']\n+      + InlineCostEstimator.getCost(right); // add of join string\n+  for (Node child : arrayFoldedChildren) {\n+    finalSize += InlineCostEstimator.getCost(child);\n+  }\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n+  switch (arrayFoldedChildren.size()) {\n+    case 0:\n+      // '[]' + '' => '[]'\n+      Node emptyBracketNode = NodeUtil.newStringNode(\"\");\n+      parent.replaceChild(n, emptyBracketNode);\n+      break;\n+\n+    case 1:\n+      Node foldedNode = arrayFoldedChildren.get(0);\n+      if (finalSize < originalSize) {\n+        if (foldedNode.isString() ||\n+            (foldedNode.isTemplateLit() && NodeUtil.isNullOrEmptyStringNode(foldedNode.getLastChild()))) {\n+          // If the folded node is a string or a template with a single static string part, we don't\n+          // need to put it in a concat\n+          parent.replaceChild(n, foldedNode);\n+        } else {\n+          // Wrap foldedNode in a new string node, so we can use that in a concat\n+          Node stringifiedFoldedNode = NodeUtil.newStringNode(\n+              compiler.toSource(foldedNode));\n+          Node newConcat = IR.add(IR.concat(),\n+              IR.string(\"[\"),\n+              stringifiedFoldedNode,\n+              IR.string(\"]\"),\n+              IR.add(\n+                  NodeUtil.newStringNode(joinString),\n+                  NodeUtil.newStringNode(\"\")));\n+          parent.replaceChild(n, NodeUtil.newStringNode(newConcat));\n         }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+      }\n+      break;\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n+    default:\n+      if (finalSize < originalSize) {\n+        Node newArray = NodeUtil.newArrayNode(compiler);\n+        for (Node child : arrayFoldedChildren) {\n+          newArray.addChildToBack(child);\n         }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n-    }\n-    t.getCompiler().reportCodeChange();\n+        Node newJoin = IR.call(\n+            IR.getprop(newArray, IR.string(\"join\")),\n+            IR.string(joinString));\n+        parent.replaceChild(n, newJoin);\n+      }\n+      break;\n   }\n \n+  t.getCompiler().reportCodeChange();\n+}\n+\n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}