{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = Arrays.copyOf(simplex, simplex.length);\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair[] expandedSimplex = new RealPointValuePair[original.length];\n            expandedSimplex[0] = best;\n            final RealPointValuePair reflected2 = evaluateNewSimplex(original, rho, comparator);\n            if (comparator.compare(reflected2, reflected) < 0) {\n                // accept the reflected and expanded simplex\n                expandedSimplex[1] = reflected2;\n            } else {\n                expandedSimplex[1] = reflected;\n            }\n            final RealPointValuePair reflected3 = evaluateNewSimplex(original, sigma, comparator);\n            if (comparator.compare(reflected3, expandedSimplex[0]) < 0) {\n                expandedSimplex[2] = reflected3;\n            } else {\n                // perform a contraction\n                final RealPointValuePair contracted = evaluateNewSimplex(original, -gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n                    System.arraycopy(contracted.getPoint(), 0, contractedSimplex[0].getPoint(), 0, contracted.getPoint().length);\n                    contractedSimplex[0].setValue(contracted.getValue());\n                    for (int i = 1; i < contractedSimplex.length; ++i) {\n                        final RealPointValuePair pair = original[i];\n                        final double[] contractedPoint = new double[pair.getPoint().length];\n                        for (int j = 0; j < contractedPoint.length; ++j) {\n                            contractedPoint[j] = best.getPoint()[j] + gamma * (pair.getPoint()[j] - best.getPoint()[j]);\n                        }\n                        contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n                    }\n                    simplex = contractedSimplex;\n                    return;\n                }\n                // perform an inside contraction\n                final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n                contractedSimplex[0] = best;\n                for (int i = 1; i < contractedSimplex.length; ++i) {\n                    final RealPointValuePair pair = original[i];\n                    final double[] contractedPoint = new double[pair.getPoint().length];\n                    for (int j = 0; j < contractedPoint.length; ++j) {\n                        contractedPoint[j] = best.getPoint()[j] + rho * (pair.getPoint()[j] - best.getPoint()[j]);\n                    }\n                    contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n                }\n                simplex = contractedSimplex;\n                return;\n            }\n            simplex = expandedSimplex;\n        } else {\n            // perform an outside contraction\n            final RealPointValuePair contracted = evaluateNewSimplex(original, -gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n                System.arraycopy(contracted.getPoint(), 0, contractedSimplex[0].getPoint(), 0, contracted.getPoint().length);\n                contractedSimplex[0].setValue(contracted.getValue());\n                for (int i = 1; i < contractedSimplex.length; ++i) {\n                    final RealPointValuePair pair = original[i];\n                    final double[] contractedPoint = new double[pair.getPoint().length];\n                    for (int j = 0; j < contractedPoint.length; ++j) {\n                        contractedPoint[j] = best.getPoint()[j] + gamma * (pair.getPoint()[j] - best.getPoint()[j]);\n                    }\n                    contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n                }\n                simplex = contractedSimplex;\n            } else {\n                // perform a inside contraction\n                final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n                contractedSimplex[0] = best;\n                for (int i = 1; i < contractedSimplex.length; ++i) {\n                    final RealPointValuePair pair = original[i];\n                    final double[] contractedPoint = new double[pair.getPoint().length];\n                    for (int j = 0; j < contractedPoint.length; ++j) {\n                        contractedPoint[j] = best.getPoint()[j] + rho * (pair.getPoint()[j] - best.getPoint()[j]);\n                    }\n                    contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n                }\n                simplex = contractedSimplex;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..13dd48ebe 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,96 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+    while (true) {\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = Arrays.copyOf(simplex, simplex.length);\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            // compute the expanded simplex\n+            final RealPointValuePair[] expandedSimplex = new RealPointValuePair[original.length];\n+            expandedSimplex[0] = best;\n+            final RealPointValuePair reflected2 = evaluateNewSimplex(original, rho, comparator);\n+            if (comparator.compare(reflected2, reflected) < 0) {\n+                // accept the reflected and expanded simplex\n+                expandedSimplex[1] = reflected2;\n+            } else {\n+                expandedSimplex[1] = reflected;\n+            }\n+            final RealPointValuePair reflected3 = evaluateNewSimplex(original, sigma, comparator);\n+            if (comparator.compare(reflected3, expandedSimplex[0]) < 0) {\n+                expandedSimplex[2] = reflected3;\n+            } else {\n+                // perform a contraction\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, -gamma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+                    System.arraycopy(contracted.getPoint(), 0, contractedSimplex[0].getPoint(), 0, contracted.getPoint().length);\n+                    contractedSimplex[0].setValue(contracted.getValue());\n+                    for (int i = 1; i < contractedSimplex.length; ++i) {\n+                        final RealPointValuePair pair = original[i];\n+                        final double[] contractedPoint = new double[pair.getPoint().length];\n+                        for (int j = 0; j < contractedPoint.length; ++j) {\n+                            contractedPoint[j] = best.getPoint()[j] + gamma * (pair.getPoint()[j] - best.getPoint()[j]);\n+                        }\n+                        contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n+                    }\n+                    simplex = contractedSimplex;\n+                    return;\n                 }\n-\n+                // perform an inside contraction\n+                final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+                contractedSimplex[0] = best;\n+                for (int i = 1; i < contractedSimplex.length; ++i) {\n+                    final RealPointValuePair pair = original[i];\n+                    final double[] contractedPoint = new double[pair.getPoint().length];\n+                    for (int j = 0; j < contractedPoint.length; ++j) {\n+                        contractedPoint[j] = best.getPoint()[j] + rho * (pair.getPoint()[j] - best.getPoint()[j]);\n+                    }\n+                    contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n+                }\n+                simplex = contractedSimplex;\n                 return;\n-\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            simplex = expandedSimplex;\n+        } else {\n+            // perform an outside contraction\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, -gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+                System.arraycopy(contracted.getPoint(), 0, contractedSimplex[0].getPoint(), 0, contracted.getPoint().length);\n+                contractedSimplex[0].setValue(contracted.getValue());\n+                for (int i = 1; i < contractedSimplex.length; ++i) {\n+                    final RealPointValuePair pair = original[i];\n+                    final double[] contractedPoint = new double[pair.getPoint().length];\n+                    for (int j = 0; j < contractedPoint.length; ++j) {\n+                        contractedPoint[j] = best.getPoint()[j] + gamma * (pair.getPoint()[j] - best.getPoint()[j]);\n+                    }\n+                    contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n+                }\n+                simplex = contractedSimplex;\n+            } else {\n+                // perform a inside contraction\n+                final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+                contractedSimplex[0] = best;\n+                for (int i = 1; i < contractedSimplex.length; ++i) {\n+                    final RealPointValuePair pair = original[i];\n+                    final double[] contractedPoint = new double[pair.getPoint().length];\n+                    for (int j = 0; j < contractedPoint.length; ++j) {\n+                        contractedPoint[j] = best.getPoint()[j] + rho * (pair.getPoint()[j] - best.getPoint()[j]);\n+                    }\n+                    contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n+                }\n+                simplex = contractedSimplex;\n             }\n-\n         }\n-\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}