{
    "patch": "            Object varargsArray = invocation.getRawArguments()[indexOfVararg];\n            if (varargsArray != null && varargsArray.getClass().isArray()) {\n                int varargsLength = Array.getLength(varargsArray);\n                for (int i = 0; i < varargsLength; i++) {\n                    Object varargValue = Array.get(varargsArray, i);\n                    for (int position = 0; position < matchers.size(); position++) {\n                        Matcher m = matchers.get(position);\n                        if (m instanceof CapturesArguments) {\n                            ((CapturesArguments) m).captureFrom(getArgumentAt(invocation, position, varargValue));\n                        }\n                    }\n                }\n            } else {\n                throw new UnsupportedOperationException();\n            }\n        } else {\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(getArgumentAt(invocation, position, null));",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..65430c002 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,26 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object varargsArray = invocation.getRawArguments()[indexOfVararg];\n+            if (varargsArray != null && varargsArray.getClass().isArray()) {\n+                int varargsLength = Array.getLength(varargsArray);\n+                for (int i = 0; i < varargsLength; i++) {\n+                    Object varargValue = Array.get(varargsArray, i);\n+                    for (int position = 0; position < matchers.size(); position++) {\n+                        Matcher m = matchers.get(position);\n+                        if (m instanceof CapturesArguments) {\n+                            ((CapturesArguments) m).captureFrom(getArgumentAt(invocation, position, varargValue));\n+                        }\n+                    }\n+                }\n+            } else {\n+                throw new UnsupportedOperationException();\n+            }\n+        } else {\n+            for (int position = 0; position < matchers.size(); position++) {\n+                Matcher m = matchers.get(position);\n+                if (m instanceof CapturesArguments) {\n+                    ((CapturesArguments) m).captureFrom(getArgumentAt(invocation, position, null));\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}