{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix matrixV = dec.getV();\n    double[] realEigenvalues = dec.getRealEigenvalues();\n    int n = m.getRowDimension();\n    for (int i = 0; i < n; i++) {\n        realEigenvalues[i] = FastMath.sqrt(realEigenvalues[i]);\n    }\n    RealMatrix matrixD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n    return matrixV.multiply(matrixD).multiply(matrixV.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..66a3e2204 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,15 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix matrixV = dec.getV();\n+    double[] realEigenvalues = dec.getRealEigenvalues();\n+    int n = m.getRowDimension();\n+    for (int i = 0; i < n; i++) {\n+        realEigenvalues[i] = FastMath.sqrt(realEigenvalues[i]);\n     }\n+    RealMatrix matrixD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n+    return matrixV.multiply(matrixD).multiply(matrixV.transpose());\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}