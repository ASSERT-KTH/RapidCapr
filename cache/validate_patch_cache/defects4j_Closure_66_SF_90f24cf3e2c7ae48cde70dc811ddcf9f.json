{
    "patch": "public static double getTypedPercent(JsonObject jsonObject) {\n    double total = 0;\n    double typed = 0;\n    for (Map.Entry<String, JsonElement> entry : jsonObject.entrySet()) {\n        String key = entry.getKey();\n        JsonElement value = entry.getValue();\n        total += 1;\n        if (!value.isJsonNull() && value.getAsJsonObject().has(\"type\") && !value.getAsJsonObject().get(\"type\").isJsonNull()) {\n            typed += 1;\n        }\n    }\n    if (total == 0) {\n        return 0;\n    } \n    else {\n        return (typed / total) * 100;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..748a7c2d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonObject jsonObject) {\n+    double total = 0;\n+    double typed = 0;\n+    for (Map.Entry<String, JsonElement> entry : jsonObject.entrySet()) {\n+        String key = entry.getKey();\n+        JsonElement value = entry.getValue();\n+        total += 1;\n+        if (!value.isJsonNull() && value.getAsJsonObject().has(\"type\") && !value.getAsJsonObject().get(\"type\").isJsonNull()) {\n+            typed += 1;\n+        }\n+    }\n+    if (total == 0) {\n+        return 0;\n+    } \n+    else {\n+        return (typed / total) * 100;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}