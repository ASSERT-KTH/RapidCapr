{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    int years = getYears();\n    int months = getMonths();\n    long weeksInMillis = getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n    long daysInMillis = getDays() * DateTimeConstants.MILLIS_PER_DAY;\n    long hoursInMillis = getHours() * DateTimeConstants.MILLIS_PER_HOUR;\n    long minutesInMillis = getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n    long secondsInMillis = getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n    long millis = getMillis();  \n    Period result = new Period(millis + secondsInMillis + minutesInMillis + hoursInMillis + daysInMillis + weeksInMillis, type, ISOChronology.getInstanceUTC());\n\n    if (!type.hasFields()) {\n        return result;\n    }\n\n    // Create a new period with all fields\n    PeriodType fullType = PeriodType.forFields(type.getFields(), true);\n    Period fullPeriod = new Period(years, months, weeksInMillis, daysInMillis, hoursInMillis, minutesInMillis, secondsInMillis, millis, fullType, ISOChronology.getInstanceUTC());\n\n    // Normalize the new period\n    Years yearsField = fullPeriod.getYears();\n    Months monthsField = fullPeriod.getMonths();\n    Weeks weeksField = fullPeriod.getWeeks();\n    Days daysField = fullPeriod.getDays();\n    Hours hoursField = fullPeriod.getHours();\n    Minutes minutesField = fullPeriod.getMinutes();\n    Seconds secondsField = fullPeriod.getSeconds();\n    Millis millisField = fullPeriod.getMillis();\n    Period normalizedPeriod = fullType.getFieldTypes().normalize(fullType, yearsField, monthsField, weeksField, daysField, hoursField, minutesField, secondsField, millisField);\n    years = normalizedPeriod.getYears();\n    months = normalizedPeriod.getMonths();\n    weeksInMillis = normalizedPeriod.getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n    daysInMillis = normalizedPeriod.getDays() * DateTimeConstants.MILLIS_PER_DAY;\n    hoursInMillis = normalizedPeriod.getHours() * DateTimeConstants.MILLIS_PER_HOUR;\n    minutesInMillis = normalizedPeriod.getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n    secondsInMillis = normalizedPeriod.getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n    millis = normalizedPeriod.getMillis();\n\n    // Apply the normalized values to the result\n    if (type.isSupported(DurationFieldType.years())) {\n        result = result.withYears(years);\n    }\n    if (type.isSupported(DurationFieldType.months())) {\n        result = result.withMonths(months);\n    }\n    if (type.isSupported(DurationFieldType.weeks())) {\n        result = result.withWeeks(weeksInMillis / DateTimeConstants.MILLIS_PER_WEEK);\n    }\n    if (type.isSupported(DurationFieldType.days())) {\n        result = result.withDays((int) (daysInMillis / DateTimeConstants.MILLIS_PER_DAY));\n    }\n    if (type.isSupported(DurationFieldType.hours())) {\n        result = result.withHours((int) (hoursInMillis / DateTimeConstants.MILLIS_PER_HOUR));\n    }\n    if (type.isSupported(DurationFieldType.minutes())) {\n        result = result.withMinutes((int) (minutesInMillis / DateTimeConstants.MILLIS_PER_MINUTE));\n    }\n    if (type.isSupported(DurationFieldType.seconds())) {\n        result = result.withSeconds((int) (secondsInMillis / DateTimeConstants.MILLIS_PER_SECOND));\n    }\n    if (type.isSupported(DurationFieldType.millis())) {\n        result = result.withMillis((int) (millis % 1000));\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..508a01f4 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,72 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    int years = getYears();\n+    int months = getMonths();\n+    long weeksInMillis = getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n+    long daysInMillis = getDays() * DateTimeConstants.MILLIS_PER_DAY;\n+    long hoursInMillis = getHours() * DateTimeConstants.MILLIS_PER_HOUR;\n+    long minutesInMillis = getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n+    long secondsInMillis = getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n+    long millis = getMillis();  \n+    Period result = new Period(millis + secondsInMillis + minutesInMillis + hoursInMillis + daysInMillis + weeksInMillis, type, ISOChronology.getInstanceUTC());\n+\n+    if (!type.hasFields()) {\n         return result;\n     }\n \n+    // Create a new period with all fields\n+    PeriodType fullType = PeriodType.forFields(type.getFields(), true);\n+    Period fullPeriod = new Period(years, months, weeksInMillis, daysInMillis, hoursInMillis, minutesInMillis, secondsInMillis, millis, fullType, ISOChronology.getInstanceUTC());\n+\n+    // Normalize the new period\n+    Years yearsField = fullPeriod.getYears();\n+    Months monthsField = fullPeriod.getMonths();\n+    Weeks weeksField = fullPeriod.getWeeks();\n+    Days daysField = fullPeriod.getDays();\n+    Hours hoursField = fullPeriod.getHours();\n+    Minutes minutesField = fullPeriod.getMinutes();\n+    Seconds secondsField = fullPeriod.getSeconds();\n+    Millis millisField = fullPeriod.getMillis();\n+    Period normalizedPeriod = fullType.getFieldTypes().normalize(fullType, yearsField, monthsField, weeksField, daysField, hoursField, minutesField, secondsField, millisField);\n+    years = normalizedPeriod.getYears();\n+    months = normalizedPeriod.getMonths();\n+    weeksInMillis = normalizedPeriod.getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n+    daysInMillis = normalizedPeriod.getDays() * DateTimeConstants.MILLIS_PER_DAY;\n+    hoursInMillis = normalizedPeriod.getHours() * DateTimeConstants.MILLIS_PER_HOUR;\n+    minutesInMillis = normalizedPeriod.getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n+    secondsInMillis = normalizedPeriod.getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n+    millis = normalizedPeriod.getMillis();\n+\n+    // Apply the normalized values to the result\n+    if (type.isSupported(DurationFieldType.years())) {\n+        result = result.withYears(years);\n+    }\n+    if (type.isSupported(DurationFieldType.months())) {\n+        result = result.withMonths(months);\n+    }\n+    if (type.isSupported(DurationFieldType.weeks())) {\n+        result = result.withWeeks(weeksInMillis / DateTimeConstants.MILLIS_PER_WEEK);\n+    }\n+    if (type.isSupported(DurationFieldType.days())) {\n+        result = result.withDays((int) (daysInMillis / DateTimeConstants.MILLIS_PER_DAY));\n+    }\n+    if (type.isSupported(DurationFieldType.hours())) {\n+        result = result.withHours((int) (hoursInMillis / DateTimeConstants.MILLIS_PER_HOUR));\n+    }\n+    if (type.isSupported(DurationFieldType.minutes())) {\n+        result = result.withMinutes((int) (minutesInMillis / DateTimeConstants.MILLIS_PER_MINUTE));\n+    }\n+    if (type.isSupported(DurationFieldType.seconds())) {\n+        result = result.withSeconds((int) (secondsInMillis / DateTimeConstants.MILLIS_PER_SECOND));\n+    }\n+    if (type.isSupported(DurationFieldType.millis())) {\n+        result = result.withMillis((int) (millis % 1000));\n+    }\n+\n+    return result;\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}