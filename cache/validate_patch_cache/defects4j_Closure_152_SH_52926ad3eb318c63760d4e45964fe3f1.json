{
    "patch": "    JSType thisType = safeResolve(typeOfThis, t, scope);\n    if (!(thisType instanceof ObjectType || thisType == null)) {\n      t.report(typeOfThis.getSourceName(), INVALID_INTERFACE_MEMBER_TYPE,\n          \"type of `this` should be an object type or null, but was \" + thisType);\n      thisType = null;\n    }\n    typeOfThis = (ObjectType) thisType;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..17681d40 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,13 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    JSType thisType = safeResolve(typeOfThis, t, scope);\n+    if (!(thisType instanceof ObjectType || thisType == null)) {\n+      t.report(typeOfThis.getSourceName(), INVALID_INTERFACE_MEMBER_TYPE,\n+          \"type of `this` should be an object type or null, but was \" + thisType);\n+      thisType = null;\n+    }\n+    typeOfThis = (ObjectType) thisType;\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}