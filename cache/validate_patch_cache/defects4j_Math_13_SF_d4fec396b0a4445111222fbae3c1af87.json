{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix D = dec.getD();\n    RealMatrix V = dec.getV();\n\n    /* Scale matrix by inverse of square root of eigenvalues */\n    int n = D.getColumnDimension();\n    for (int j = 0; j < n; j++) {\n        if (D.getEntry(j, j) < 0) {\n            for (int i = 0; i < n; i++) {\n                V.setEntry(i, j, -V.getEntry(i, j));\n            }\n            D.setEntry(j, j, -D.getEntry(j, j));\n        }\n        double sqrt = FastMath.sqrt(D.getEntry(j, j));\n        for (int i = 0; i < n; i++) {\n            V.setEntry(i, j, V.getEntry(i, j) / sqrt);\n            D.setEntry(j, j, D.getEntry(j, j) / sqrt);\n        }\n    }\n\n    /* Compute the square root using scaling and squaring */\n    RealMatrix Vt = V.transpose();\n    RealMatrix A = V.multiply(D).multiply(Vt);\n    RealMatrix X = MatrixUtils.createRealIdentityMatrix(n);\n    int k = 20; // choose k to balance accuracy and efficiency\n    for (int i = 0; i < k; i++) {\n        X = (X.add(A.multiply(X)).scalarMultiply(0.5));\n    }\n\n    /* Unscale the result */\n    RealMatrix sqrtM = V.multiply(X).multiply(Vt);\n    for (int j = 0; j < n; j++) {\n        double scaleFactor = FastMath.sqrt(D.getEntry(j, j));\n        for (int i = 0; i < n; i++) {\n            sqrtM.setEntry(i, j, sqrtM.getEntry(i, j) * scaleFactor);\n        }\n    }\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..73c28ff6e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,45 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix D = dec.getD();\n+    RealMatrix V = dec.getV();\n+\n+    /* Scale matrix by inverse of square root of eigenvalues */\n+    int n = D.getColumnDimension();\n+    for (int j = 0; j < n; j++) {\n+        if (D.getEntry(j, j) < 0) {\n+            for (int i = 0; i < n; i++) {\n+                V.setEntry(i, j, -V.getEntry(i, j));\n+            }\n+            D.setEntry(j, j, -D.getEntry(j, j));\n+        }\n+        double sqrt = FastMath.sqrt(D.getEntry(j, j));\n+        for (int i = 0; i < n; i++) {\n+            V.setEntry(i, j, V.getEntry(i, j) / sqrt);\n+            D.setEntry(j, j, D.getEntry(j, j) / sqrt);\n+        }\n+    }\n+\n+    /* Compute the square root using scaling and squaring */\n+    RealMatrix Vt = V.transpose();\n+    RealMatrix A = V.multiply(D).multiply(Vt);\n+    RealMatrix X = MatrixUtils.createRealIdentityMatrix(n);\n+    int k = 20; // choose k to balance accuracy and efficiency\n+    for (int i = 0; i < k; i++) {\n+        X = (X.add(A.multiply(X)).scalarMultiply(0.5));\n     }\n+\n+    /* Unscale the result */\n+    RealMatrix sqrtM = V.multiply(X).multiply(Vt);\n+    for (int j = 0; j < n; j++) {\n+        double scaleFactor = FastMath.sqrt(D.getEntry(j, j));\n+        for (int i = 0; i < n; i++) {\n+            sqrtM.setEntry(i, j, sqrtM.getEntry(i, j) * scaleFactor);\n+        }\n+    }\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}