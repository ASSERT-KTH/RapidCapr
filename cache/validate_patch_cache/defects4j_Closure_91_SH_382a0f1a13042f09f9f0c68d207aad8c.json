{
    "patch": "      if (NodeUtil.isGet(parent)) {\n        Node lhs = ((Node) parent.getFirstChild());\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          Node target = ((Node) lhs.getFirstChild());\n          // If a prototype is being set and the function is the right hand side of\n          // the assignment then allow the traversal, but only for assignments to\n          // prototype.functions.\n          if (target.isName() && target.getString().endsWith(\"prototype\")) {\n            return n == parent.getLastChild() && isPrototypeFunction(parent);\n          } else if (NodeUtil.isQualifiedName(target)) {\n            String targetName = NodeUtil.getBestLValueName(target);\n            if (targetName != null && targetName.endsWith(\"prototype\")) {\n              return n == parent.getLastChild() && isPrototypeFunction(parent);\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..a6fb8e56 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,22 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Node lhs = ((Node) parent.getFirstChild());\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          Node target = ((Node) lhs.getFirstChild());\n+          // If a prototype is being set and the function is the right hand side of\n+          // the assignment then allow the traversal, but only for assignments to\n+          // prototype.functions.\n+          if (target.isName() && target.getString().endsWith(\"prototype\")) {\n+            return n == parent.getLastChild() && isPrototypeFunction(parent);\n+          } else if (NodeUtil.isQualifiedName(target)) {\n+            String targetName = NodeUtil.getBestLValueName(target);\n+            if (targetName != null && targetName.endsWith(\"prototype\")) {\n+              return n == parent.getLastChild() && isPrototypeFunction(parent);\n+            }\n+          }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}