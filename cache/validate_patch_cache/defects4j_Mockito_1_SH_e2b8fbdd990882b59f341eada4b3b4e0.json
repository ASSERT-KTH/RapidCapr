{
    "patch": "            Object[] args = invocation.getRawArguments();\n            for(int i=0; i < args.length; i++) {\n                Object arg = args[i];\n                for (int position = 0; position < matchers.size(); position++) {\n                    Matcher m = matchers.get(position);\n                    if (m instanceof CapturesArguments) {\n                        if (position == i && !(m instanceof VarargMatcher)) {\n                            ((CapturesArguments) m).captureFrom(arg);\n                        } else if (position < i && m instanceof VarargMatcher) {\n                            ((CapturesArguments) m).captureFrom(arg);\n                        }\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..656c95b82 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,20 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object[] args = invocation.getRawArguments();\n+            for(int i=0; i < args.length; i++) {\n+                Object arg = args[i];\n+                for (int position = 0; position < matchers.size(); position++) {\n+                    Matcher m = matchers.get(position);\n+                    if (m instanceof CapturesArguments) {\n+                        if (position == i && !(m instanceof VarargMatcher)) {\n+                            ((CapturesArguments) m).captureFrom(arg);\n+                        } else if (position < i && m instanceof VarargMatcher) {\n+                            ((CapturesArguments) m).captureFrom(arg);\n+                        }\n+                    }\n+                }\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}