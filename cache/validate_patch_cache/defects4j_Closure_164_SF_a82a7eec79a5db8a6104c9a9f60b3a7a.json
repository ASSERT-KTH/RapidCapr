{
    "patch": "public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // The return type of 'this' function must be a subtype of the return type of 'that' function.\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // Number of arguments in 'this' function must be less than or equal to the number of arguments in 'that' function.\n    if (this.parameters.getLength() > that.parameters.getLength()) {\n        return false;\n    }\n\n    // For each argument of 'this' function, check if it is a subtype of 'that' argument.\n    Node thisCurrent = this.parameters.getFirstChild();\n    Node thatCurrent = that.parameters.getFirstChild();\n\n    while (thisCurrent != null && thatCurrent != null) {\n        JSType thisType = thisCurrent.getDeclaredType();\n        JSType thatType = thatCurrent.getDeclaredType();\n        // In the presence of template types, if one of the types is not resolved yet,\n        // do not compare to avoid infinite recursion.\n        if (thisType != null && thisType.isTemplateType()) {\n            thatCurrent = thatCurrent.getNext();\n            continue;\n        }\n        if (thatType != null && thatType.isTemplateType()) {\n            thisCurrent = thisCurrent.getNext();\n            continue;\n        }\n\n        // If that parameter does not exist or its type is not a subtype of this parameter's type,\n        // then these functions are not a match.\n        if (!thatType.isSubtype(thisType)) {\n            return false;\n        }\n\n        if (thisCurrent.isVarArgs() != thatCurrent.isVarArgs()) {\n            return false;\n        }\n\n        thisCurrent = thisCurrent.getNext();\n        thatCurrent = thatCurrent.getNext();\n    }\n\n    // If we have remaining parameters in 'that', then these functions are not a match.\n    while (thatCurrent != null) {\n        if (!thatCurrent.isOptionalArg()) {\n            return false;\n        }\n        thatCurrent = thatCurrent.getNext();\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..eaca4d35 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,81 +77,65 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n+public boolean isSubtype(JSType other) {\n     if (!(other instanceof ArrowType)) {\n-      return false;\n+        return false;\n     }\n \n     ArrowType that = (ArrowType) other;\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n-\n-    // this.returnType <: that.returnType (covariant)\n+    // The return type of 'this' function must be a subtype of the return type of 'that' function.\n     if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n+        return false;\n     }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n-    Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n-      }\n+    // Number of arguments in 'this' function must be less than or equal to the number of arguments in 'that' function.\n+    if (this.parameters.getLength() > that.parameters.getLength()) {\n+        return false;\n+    }\n+\n+    // For each argument of 'this' function, check if it is a subtype of 'that' argument.\n+    Node thisCurrent = this.parameters.getFirstChild();\n+    Node thatCurrent = that.parameters.getFirstChild();\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+    while (thisCurrent != null && thatCurrent != null) {\n+        JSType thisType = thisCurrent.getDeclaredType();\n+        JSType thatType = thatCurrent.getDeclaredType();\n+        // In the presence of template types, if one of the types is not resolved yet,\n+        // do not compare to avoid infinite recursion.\n+        if (thisType != null && thisType.isTemplateType()) {\n+            thatCurrent = thatCurrent.getNext();\n+            continue;\n+        }\n+        if (thatType != null && thatType.isTemplateType()) {\n+            thisCurrent = thisCurrent.getNext();\n+            continue;\n+        }\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+        // If that parameter does not exist or its type is not a subtype of this parameter's type,\n+        // then these functions are not a match.\n+        if (!thatType.isSubtype(thisType)) {\n+            return false;\n+        }\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n-      }\n+        if (thisCurrent.isVarArgs() != thatCurrent.isVarArgs()) {\n+            return false;\n+        }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n+        thisCurrent = thisCurrent.getNext();\n+        thatCurrent = thatCurrent.getNext();\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+    // If we have remaining parameters in 'that', then these functions are not a match.\n+    while (thatCurrent != null) {\n+        if (!thatCurrent.isOptionalArg()) {\n+            return false;\n+        }\n+        thatCurrent = thatCurrent.getNext();\n+    }\n \n     return true;\n-  }\n+}\n \n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}