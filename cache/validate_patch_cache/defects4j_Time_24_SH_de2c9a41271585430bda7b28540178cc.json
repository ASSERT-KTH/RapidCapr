{
    "patch": "} catch (IllegalFieldValueException e) {\n            // In case this exception comes from a SavedField that was explicitly\n            // set by parseDefaulting, clean up those parse defaults.\n            invalidateParsedDefaultFields();\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n            }\n            throw e;\n} catch (RuntimeException ex) {  // Replace with Exception if running Java 6 or later.\n            // In case any exception comes from a SavedField that was explicitly\n            // set by parseDefaulting, clean up those parse defaults.\n            invalidateParsedDefaultFields();\n            if (text != null) {\n                StringBuilder buf = new StringBuilder();\n                buf.append(\"Cannot parse \\\"\");\n                buf.append(text);\n                buf.append('\\\"');\n                if (ex.getMessage() != null) {\n                    buf.append(\": \");\n                    buf.append(ex.getMessage());\n                }\n                throw new IllegalArgumentException(buf.toString(), ex);\n            }\n            throw ex;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..07214f7a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,30 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+} catch (IllegalFieldValueException e) {\n+            // In case this exception comes from a SavedField that was explicitly\n+            // set by parseDefaulting, clean up those parse defaults.\n+            invalidateParsedDefaultFields();\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+            }\n+            throw e;\n+} catch (RuntimeException ex) {  // Replace with Exception if running Java 6 or later.\n+            // In case any exception comes from a SavedField that was explicitly\n+            // set by parseDefaulting, clean up those parse defaults.\n+            invalidateParsedDefaultFields();\n+            if (text != null) {\n+                StringBuilder buf = new StringBuilder();\n+                buf.append(\"Cannot parse \\\"\");\n+                buf.append(text);\n+                buf.append('\\\"');\n+                if (ex.getMessage() != null) {\n+                    buf.append(\": \");\n+                    buf.append(ex.getMessage());\n+                }\n+                throw new IllegalArgumentException(buf.toString(), ex);\n+            }\n+            throw ex;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}