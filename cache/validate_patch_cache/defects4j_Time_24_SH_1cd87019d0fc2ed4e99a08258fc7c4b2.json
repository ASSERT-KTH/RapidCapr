{
    "patch": "for (int i = 0; i < count; i++) {\n    try {\n        long newMillis = savedFields[i].set(millis, resetFields);\n        if (newMillis != millis) {\n            // Check if the field value caused the time to change by more than one day\n            if (Math.abs(newMillis - millis) >= DateTimeConstants.MILLIS_PER_DAY) {\n                throw new IllegalArgumentException(\"Field values caused the time to change by more than one day\");\n            }\n            throw new IllegalArgumentException(\"Illegal instant due to disallowed field combination\");\n        }\n        millis = newMillis;\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..8a5822ef 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,24 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    try {\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+        if (newMillis != millis) {\n+            // Check if the field value caused the time to change by more than one day\n+            if (Math.abs(newMillis - millis) >= DateTimeConstants.MILLIS_PER_DAY) {\n+                throw new IllegalArgumentException(\"Field values caused the time to change by more than one day\");\n+            }\n+            throw new IllegalArgumentException(\"Illegal instant due to disallowed field combination\");\n+        }\n+        millis = newMillis;\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}