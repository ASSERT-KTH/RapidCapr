{
    "patch": "public void testGetprop4() {\n    System.setProperty(\"myprop\", \"myvalue\");\n    try {\n        Main.getprop(new String[]{\"myprop\", \"dummykey\"});\n        fail(\"expected an exception\");\n    } catch (IllegalArgumentException ex) {\n        // expected\n    }\n\n    String[] warnings = systemErrRule.getLog().split(System.lineSeparator());\n    assertTrue(\"expected a warning\", warnings.length > 0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..bce0d797 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() {\n+    System.setProperty(\"myprop\", \"myvalue\");\n+    try {\n+        Main.getprop(new String[]{\"myprop\", \"dummykey\"});\n+        fail(\"expected an exception\");\n+    } catch (IllegalArgumentException ex) {\n+        // expected\n+    }\n+\n+    String[] warnings = systemErrRule.getLog().split(System.lineSeparator());\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}