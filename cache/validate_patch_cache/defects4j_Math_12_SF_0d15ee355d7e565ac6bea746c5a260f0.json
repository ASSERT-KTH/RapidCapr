{
    "patch": "public static double[] oneRun(int n, int k, double[] p) {\n    double[] result = new double[2];\n    double[][] dp = new double[2][n + 1];\n    int curRow = 0;\n    dp[curRow][0] = 1.0;\n    \n    for (int i = 1; i <= k; i++) {\n        int nextRow = curRow ^ 1;\n        for (int j = 0; j <= n; j++) {\n            double lose = dp[curRow][j];\n    \n            if (j > 0) {\n                lose += dp[curRow][j - 1] * p[i - 1];\n            }\n            dp[nextRow][j] = lose;\n    \n            if (j + 1 <= n) {\n                dp[nextRow][j] += dp[curRow][j + 1] * (1 - p[i - 1]);\n            }\n        }\n        curRow = nextRow;\n    }\n\n    double minExpectation = Integer.MAX_VALUE;\n    double maxExpectation = 0;\n\n    for (int j = 0; j <= n; j++) {\n        double expectation = 0;\n        for (int i = 0; i <= k; i++) {\n            double probability = dp[curRow][j];\n            for (int l = 0; l < i; l++) {\n                probability *= p[l];\n            }\n            for (int l = i; l < k; l++) {\n                probability *= (1 - p[l]);\n            }\n            expectation += i * probability;\n        }\n        minExpectation = Math.min(minExpectation, expectation);\n        maxExpectation = Math.max(maxExpectation, expectation);\n    }\n\n    result[0] = minExpectation;\n    result[1] = maxExpectation;\n\n    return result;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}