{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    long nextLocal, nextAdjusted;\n    if (offsetLocal < offsetAdjusted) {\n        nextLocal = nextTransition(instantAdjusted);\n        nextAdjusted = nextTransition(instantLocal - offsetLocal);\n    } else {\n        nextLocal = previousTransition(instantAdjusted) + 1;\n        nextAdjusted = previousTransition(instantLocal - offsetAdjusted) + 1;\n    }\n    if (nextLocal != nextAdjusted) {\n        return offsetLocal < offsetAdjusted ? offsetLocal : offsetAdjusted;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f8141b0f 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    long nextLocal, nextAdjusted;\n+    if (offsetLocal < offsetAdjusted) {\n+        nextLocal = nextTransition(instantAdjusted);\n+        nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+    } else {\n+        nextLocal = previousTransition(instantAdjusted) + 1;\n+        nextAdjusted = previousTransition(instantLocal - offsetAdjusted) + 1;\n+    }\n+    if (nextLocal != nextAdjusted) {\n+        return offsetLocal < offsetAdjusted ? offsetLocal : offsetAdjusted;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}