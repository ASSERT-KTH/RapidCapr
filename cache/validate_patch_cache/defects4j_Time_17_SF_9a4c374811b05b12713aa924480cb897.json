{
    "patch": "public long adjustOffset(long instant, boolean earlierOrLater) {\n    // evaluate 12 hours before and after to work out if anything is happening\n    long instantBefore = convertUTCToLocal(instant - 12 * DateTimeConstants.MILLIS_PER_HOUR);\n    long instantAfter = convertUTCToLocal(instant + 12 * DateTimeConstants.MILLIS_PER_HOUR);\n\n    if (sameLocalTime(instantBefore, instantAfter)) {\n        return instant; // not an overlap (less than is a gap, equal is normal case)\n    }\n\n    if (earlierOrLater) {\n        // search forward for the next instant that is not in the later time zone\n        int oldOffset = getOffset(instant);\n        long nextInstant = instant + 1;\n        while (getOffset(nextInstant) > oldOffset) {\n            long nextLocal = convertUTCToLocal(nextInstant);\n            if (nextLocal == instantBefore) {\n                instantAfter = nextInstant;\n                break;\n            }\n            nextInstant++;\n        }\n    } else {\n        // search backward for the last instant that is in the earlier time zone\n        int oldOffset = getOffset(instant);\n        long prevInstant = instant - 1;\n        while (getOffset(prevInstant) == oldOffset) {\n            prevInstant--;\n        }\n        long prevLocal = convertUTCToLocal(prevInstant);\n        instantBefore = prevInstant;\n    }\n\n    long local = convertUTCToLocal(instant);\n    return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n}\n\nprivate boolean sameLocalTime(long instant1, long instant2) {\n    int offset1 = getOffset(instant1);\n    int offset2 = getOffset(instant2);\n    long local1 = convertUTCToLocal(instant1);\n    long local2 = convertUTCToLocal(instant2);\n    return offset1 == offset2 && local1 == local2;\n}\n\nprivate int getOffset(long instant) {\n    return DateTimeZone.forID(\"America/Sao_Paulo\").getOffset(instant);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..57f75c5f 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,53 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n+public long adjustOffset(long instant, boolean earlierOrLater) {\n+    // evaluate 12 hours before and after to work out if anything is happening\n+    long instantBefore = convertUTCToLocal(instant - 12 * DateTimeConstants.MILLIS_PER_HOUR);\n+    long instantAfter = convertUTCToLocal(instant + 12 * DateTimeConstants.MILLIS_PER_HOUR);\n+\n+    if (sameLocalTime(instantBefore, instantAfter)) {\n+        return instant; // not an overlap (less than is a gap, equal is normal case)\n+    }\n+\n+    if (earlierOrLater) {\n+        // search forward for the next instant that is not in the later time zone\n+        int oldOffset = getOffset(instant);\n+        long nextInstant = instant + 1;\n+        while (getOffset(nextInstant) > oldOffset) {\n+            long nextLocal = convertUTCToLocal(nextInstant);\n+            if (nextLocal == instantBefore) {\n+                instantAfter = nextInstant;\n+                break;\n+            }\n+            nextInstant++;\n         }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n+    } else {\n+        // search backward for the last instant that is in the earlier time zone\n+        int oldOffset = getOffset(instant);\n+        long prevInstant = instant - 1;\n+        while (getOffset(prevInstant) == oldOffset) {\n+            prevInstant--;\n+        }\n+        long prevLocal = convertUTCToLocal(prevInstant);\n+        instantBefore = prevInstant;\n     }\n+\n+    long local = convertUTCToLocal(instant);\n+    return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n+}\n+\n+private boolean sameLocalTime(long instant1, long instant2) {\n+    int offset1 = getOffset(instant1);\n+    int offset2 = getOffset(instant2);\n+    long local1 = convertUTCToLocal(instant1);\n+    long local2 = convertUTCToLocal(instant2);\n+    return offset1 == offset2 && local1 == local2;\n+}\n+\n+private int getOffset(long instant) {\n+    return DateTimeZone.forID(\"America/Sao_Paulo\").getOffset(instant);\n+}\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: method getOffset(long) is already defined in class DateTimeZone",
    "test_result": "ERROR"
}