{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    final double v1x = v1.getX();\n    final double v1y = v1.getY();\n    final double v1z = v1.getZ();\n\n    final double v2x = v2.getX();\n    final double v2y = v2.getY();\n    final double v2z = v2.getZ();\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    final double rho =\n            FastMath.max(2.0 / 65536.0,\n                    FastMath.min(65536.0 / 2.0,\n                        (v1x * v2x + v1y * v2y + v1z * v2z) / v2.getNormSq()));\n\n    final Vector3D pv1 = new Vector3D(rho * v2x, rho * v2y, rho * v2z);\n    final Vector3D v3  = new Vector3D(v1x - pv1.getX(), v1y - pv1.getY(), v1z - pv1.getZ());\n\n    return new Vector3D(v3.getY() * v2.getZ() - v3.getZ() * v2.getY(),\n                        v3.getZ() * v2.getX() - v3.getX() * v2.getZ(),\n                        v3.getX() * v2.getY() - v3.getY() * v2.getX());\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..6200eb0a0 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,30 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+    final double v1x = v1.getX();\n+    final double v1y = v1.getY();\n+    final double v1z = v1.getZ();\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n+    final double v2x = v2.getX();\n+    final double v2y = v2.getY();\n+    final double v2z = v2.getZ();\n \n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    final double rho =\n+            FastMath.max(2.0 / 65536.0,\n+                    FastMath.min(65536.0 / 2.0,\n+                        (v1x * v2x + v1y * v2y + v1z * v2z) / v2.getNormSq()));\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    final Vector3D pv1 = new Vector3D(rho * v2x, rho * v2y, rho * v2z);\n+    final Vector3D v3  = new Vector3D(v1x - pv1.getX(), v1y - pv1.getY(), v1z - pv1.getZ());\n \n+    return new Vector3D(v3.getY() * v2.getZ() - v3.getZ() * v2.getY(),\n+                        v3.getZ() * v2.getX() - v3.getX() * v2.getZ(),\n+                        v3.getX() * v2.getY() - v3.getY() * v2.getX());\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<-1.0> but was:<-1.0000000975387024>",
    "test_result": "FAIL"
}