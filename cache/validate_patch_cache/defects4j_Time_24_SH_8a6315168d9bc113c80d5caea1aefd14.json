{
    "patch": "} catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            if (e.getIllegalFieldValueExceptionFieldIndex() >= 0) {\n                int errorIndex = e.getIllegalFieldValueExceptionIndex();\n                for (int i = 0; i < count; ++i) {\n                    int fErrorIndex = savedFields[i].iErrorIndex;\n                    if (fErrorIndex >= errorIndex) {\n                        if (fErrorIndex > errorIndex) {\n                            savedFields[i].iErrorIndex = fErrorIndex + 1;\n                        } else if (i + 1 < count && savedFields[i + 1].iErrorIndex <= errorIndex) {\n                            // combine adjacent related errors, such as day/month\n                            savedFields[i + 1].iErrorIndex = fErrorIndex;\n                        } else {\n                            savedFields[i].iErrorIndex = fErrorIndex + 1;\n                        }\n                    }\n                }\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..1cbc6b05 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,28 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+} catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            if (e.getIllegalFieldValueExceptionFieldIndex() >= 0) {\n+                int errorIndex = e.getIllegalFieldValueExceptionIndex();\n+                for (int i = 0; i < count; ++i) {\n+                    int fErrorIndex = savedFields[i].iErrorIndex;\n+                    if (fErrorIndex >= errorIndex) {\n+                        if (fErrorIndex > errorIndex) {\n+                            savedFields[i].iErrorIndex = fErrorIndex + 1;\n+                        } else if (i + 1 < count && savedFields[i + 1].iErrorIndex <= errorIndex) {\n+                            // combine adjacent related errors, such as day/month\n+                            savedFields[i + 1].iErrorIndex = fErrorIndex;\n+                        } else {\n+                            savedFields[i].iErrorIndex = fErrorIndex + 1;\n+                        }\n+                    }\n+                }\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}