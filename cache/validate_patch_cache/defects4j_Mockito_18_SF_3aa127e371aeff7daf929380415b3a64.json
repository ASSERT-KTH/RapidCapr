{
    "patch": "public static <T> T returnValueFor(Class<T> clazz) {\n    if (clazz.equals(List.class)) {\n        return clazz.cast(Arrays.asList(\"value1\", \"value2\", \"value3\"));\n    } else if (clazz.equals(Map.class)) {\n        Map<String, String> map = new HashMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n        map.put(\"key3\", \"value3\");\n        return clazz.cast(map);\n    } else if (clazz.equals(Set.class)) {\n        return clazz.cast(new HashSet<>(Arrays.asList(\"value1\", \"value2\", \"value3\")));\n    } else {\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..f30f7bef0 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,21 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> T returnValueFor(Class<T> clazz) {\n+    if (clazz.equals(List.class)) {\n+        return clazz.cast(Arrays.asList(\"value1\", \"value2\", \"value3\"));\n+    } else if (clazz.equals(Map.class)) {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(\"key1\", \"value1\");\n+        map.put(\"key2\", \"value2\");\n+        map.put(\"key3\", \"value3\");\n+        return clazz.cast(map);\n+    } else if (clazz.equals(Set.class)) {\n+        return clazz.cast(new HashSet<>(Arrays.asList(\"value1\", \"value2\", \"value3\")));\n+    } else {\n+        return null;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}