{
    "patch": "public void addValue(double value) {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        return;\n    }\n\n    // increment sum of values\n    sumImpl.increment(value);\n\n    // increment sum of squares of values\n    sumsqImpl.increment(value);\n\n    // increment minimum value\n    minImpl.increment(value);\n\n    // increment maximum value\n    maxImpl.increment(value);\n\n    // increment sum of logarithms of values, if value is positive\n    if (value > 0) {\n        sumLogImpl.increment(Math.log(value));\n    }\n\n    // increment second moment\n    secondMoment.increment(value);\n\n    // check if mean has been overridden\n    if (!(meanImpl instanceof Mean)) {\n        meanImpl.increment(value);\n    } else {\n        meanImpl.evaluate(new double[]{value});\n    }\n\n    // check if variance has been overridden\n    if (!(varianceImpl instanceof Variance)) {\n        varianceImpl.increment(value);\n    } else {\n        varianceImpl.increment(value);\n    }\n\n    // check if geometric mean has been overridden\n    if (!(geoMeanImpl instanceof GeometricMean)) {\n        double[] values = getValues();\n        geoMeanImpl = new GeometricMean();\n        for (double v : values) {\n            if (v > 0) {\n                geoMeanImpl.increment(v);\n            }\n        }\n    } else {\n        if (value > 0) {\n            geoMeanImpl.increment(value);\n        }\n    }\n\n    // increment count of values\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..bb2eb274f 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,64 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+public void addValue(double value) {\n+    if (Double.isNaN(value) || Double.isInfinite(value)) {\n+        return;\n+    }\n+\n+    // increment sum of values\n+    sumImpl.increment(value);\n+\n+    // increment sum of squares of values\n+    sumsqImpl.increment(value);\n+\n+    // increment minimum value\n+    minImpl.increment(value);\n+\n+    // increment maximum value\n+    maxImpl.increment(value);\n+\n+    // increment sum of logarithms of values, if value is positive\n+    if (value > 0) {\n+        sumLogImpl.increment(Math.log(value));\n+    }\n+\n+    // increment second moment\n+    secondMoment.increment(value);\n+\n+    // check if mean has been overridden\n+    if (!(meanImpl instanceof Mean)) {\n+        meanImpl.increment(value);\n+    } else {\n+        meanImpl.evaluate(new double[]{value});\n+    }\n+\n+    // check if variance has been overridden\n+    if (!(varianceImpl instanceof Variance)) {\n+        varianceImpl.increment(value);\n+    } else {\n+        varianceImpl.increment(value);\n+    }\n+\n+    // check if geometric mean has been overridden\n+    if (!(geoMeanImpl instanceof GeometricMean)) {\n+        double[] values = getValues();\n+        geoMeanImpl = new GeometricMean();\n+        for (double v : values) {\n+            if (v > 0) {\n+                geoMeanImpl.increment(v);\n+            }\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n+    } else {\n+        if (value > 0) {\n             geoMeanImpl.increment(value);\n         }\n-        n++;\n     }\n \n+    // increment count of values\n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}