{
    "patch": "    // Strip unreferenced args off the end of the function declaration.\n    Node argList = getFunctionArgList(function);\n    int argCount = argList.getChildCount();\n    for (int i = 0; i < argCount; i++) {\n      Node arg = argList.getFirstChild();\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(arg);\n        compiler.reportCodeChange();\n      } else {\n        referenced.remove(var);\n        argList.removeChild(arg);\n        argList.addChildToBack(arg);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..02532918 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,21 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node argList = getFunctionArgList(function);\n+    int argCount = argList.getChildCount();\n+    for (int i = 0; i < argCount; i++) {\n+      Node arg = argList.getFirstChild();\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        argList.removeChild(arg);\n+        compiler.reportCodeChange();\n+      } else {\n+        referenced.remove(var);\n+        argList.removeChild(arg);\n+        argList.addChildToBack(arg);\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}