{
    "patch": "int posIn = pos;\nwhile (posIn < input.length()) {\n    int codePoint = Character.codePointAt(input, posIn);\n    if (Character.isHighSurrogate(input.charAt(posIn))) {\n        char[] codeUnits = Character.toChars(codePoint);\n        translate(new String(codeUnits), out);\n        posIn += 2;\n    } else {\n        translate(Character.toString((char) codePoint), out);\n        posIn += Character.charCount(codePoint);\n    }\n}\npos = posIn;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..6418ff10 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,19 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+int posIn = pos;\n+while (posIn < input.length()) {\n+    int codePoint = Character.codePointAt(input, posIn);\n+    if (Character.isHighSurrogate(input.charAt(posIn))) {\n+        char[] codeUnits = Character.toChars(codePoint);\n+        translate(new String(codeUnits), out);\n+        posIn += 2;\n+    } else {\n+        translate(Character.toString((char) codePoint), out);\n+        posIn += Character.charCount(codePoint);\n+    }\n+}\n+pos = posIn;\n             }\n         }\n     }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}