{
    "patch": "protected RealPointValuePair getSolution() {\n      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n      Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;\n      double mostNegative;\n      if (negativeVarBasicRow == null) {\n            mostNegative = 0;\n      } else {\n          mostNegative = getEntry(negativeVarBasicRow, getRhsOffset());\n      }\n\n      Set<Integer> basicRows = new HashSet<Integer>();\n      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n      for (int i = 0; i < coefficients.length; i++) {\n          int colIndex = columnLabels.indexOf(\"x\" + i);\n          if (colIndex < 0) {\n            coefficients[i] = 0;\n            continue;\n          }\n          Integer basicRow = getBasicRow(colIndex);\n          // if the basic row is found to be the objective function row\n          // set the coefficient to 0 -> this case handles unconstrained \n          // variables that are still part of the objective function\n          if (basicRows.contains(basicRow)) {\n            // if multiple variables can take a given value\n            // then we choose the first and set the rest equal to 0\n            coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n          } else {\n            basicRows.add(basicRow);\n            if (basicRow == null) {\n              coefficients[i] = 0;\n            } else {\n              coefficients[i] = getEntry(basicRow, getRhsOffset());\n            }\n            if (!restrictToNonNegative) {\n              coefficients[i] -= mostNegative;\n            }\n          }\n      }\n      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 02c22b59f..442760a7c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -393,10 +393,15 @@ class SimplexTableau implements Serializable {\n      *\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n+protected RealPointValuePair getSolution() {\n       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n+      Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;\n+      double mostNegative;\n+      if (negativeVarBasicRow == null) {\n+            mostNegative = 0;\n+      } else {\n+          mostNegative = getEntry(negativeVarBasicRow, getRhsOffset());\n+      }\n \n       Set<Integer> basicRows = new HashSet<Integer>();\n       double[] coefficients = new double[getOriginalNumDecisionVariables()];\n@@ -407,18 +412,23 @@ class SimplexTableau implements Serializable {\n             continue;\n           }\n           Integer basicRow = getBasicRow(colIndex);\n-              // if the basic row is found to be the objective function row\n-              // set the coefficient to 0 -> this case handles unconstrained \n-              // variables that are still part of the objective function\n+          // if the basic row is found to be the objective function row\n+          // set the coefficient to 0 -> this case handles unconstrained \n+          // variables that are still part of the objective function\n           if (basicRows.contains(basicRow)) {\n-              // if multiple variables can take a given value\n-              // then we choose the first and set the rest equal to 0\n-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n+            // if multiple variables can take a given value\n+            // then we choose the first and set the rest equal to 0\n+            coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n           } else {\n-              basicRows.add(basicRow);\n-              coefficients[i] =\n-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                  (restrictToNonNegative ? 0 : mostNegative);\n+            basicRows.add(basicRow);\n+            if (basicRow == null) {\n+              coefficients[i] = 0;\n+            } else {\n+              coefficients[i] = getEntry(basicRow, getRhsOffset());\n+            }\n+            if (!restrictToNonNegative) {\n+              coefficients[i] -= mostNegative;\n+            }\n           }\n       }\n       return new RealPointValuePair(coefficients, f.getValue(coefficients));",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}