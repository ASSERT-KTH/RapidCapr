{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\n\npublic class GammaRegularized {\n    public static void main(String[] args) {\n        double result = gammaRegularized(1.0, 1.0);\n        System.out.println(\"Result: \" + result);\n    }\n\n    public static double gammaRegularized(double a, double x) {\n        int maxIterations = 1000;\n        double epsilon = 1E-10;\n\n        double gammaA = Gamma.gamma(a);\n        double incompleteGamma = gammaIncomplete(a, x, epsilon, maxIterations);\n\n        return incompleteGamma / gammaA;\n    }\n\n    private static double gammaIncomplete(double a, double x, double epsilon, int maxIterations) {\n        double prev = 0.0;\n        double term = MathUtils.factorialDouble((int) a - 1) * Math.pow(x, a) * Math.exp(-x) / Gamma.gamma(a);\n        double sum = term;\n        for (int n = 1; n < maxIterations; n++) {\n            term *= x / (a + n);\n            sum += term;\n            if (Math.abs(sum - prev) < epsilon * Math.abs(prev)) {\n                return sum;\n            }\n            prev = sum;\n        }\n\n        throw new RuntimeException(\"gammaIncomplete failed to converge\");\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..6a949456b 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,42 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.MathUtils;\n+\n+public class GammaRegularized {\n+    public static void main(String[] args) {\n+        double result = gammaRegularized(1.0, 1.0);\n+        System.out.println(\"Result: \" + result);\n+    }\n+\n+    public static double gammaRegularized(double a, double x) {\n+        int maxIterations = 1000;\n+        double epsilon = 1E-10;\n+\n+        double gammaA = Gamma.gamma(a);\n+        double incompleteGamma = gammaIncomplete(a, x, epsilon, maxIterations);\n+\n+        return incompleteGamma / gammaA;\n+    }\n+\n+    private static double gammaIncomplete(double a, double x, double epsilon, int maxIterations) {\n+        double prev = 0.0;\n+        double term = MathUtils.factorialDouble((int) a - 1) * Math.pow(x, a) * Math.exp(-x) / Gamma.gamma(a);\n+        double sum = term;\n+        for (int n = 1; n < maxIterations; n++) {\n+            term *= x / (a + n);\n+            sum += term;\n+            if (Math.abs(sum - prev) < epsilon * Math.abs(prev)) {\n+                return sum;\n+            }\n+            prev = sum;\n+        }\n+\n+        throw new RuntimeException(\"gammaIncomplete failed to converge\");\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}