{
    "patch": "if (ref == null) {\n  return false;\n}\n\n// Make sure this assignment is not in a loop.\nBasicBlock block = ref.getBasicBlock();\nwhile (block != null) {\n  if (block.isFunction) {\n    // Only allow one assignment to a variable in a function.\n    break;\n  } else if (block.isLoop && !block.equals(ref.getBasicBlock())) {\n    return false;\n  }\n  if (!ref.isSimpleAssignmentToName() || !ref.isDeclaration()) {\n    return false;\n  }\n  if (ref.getBasicBlock() != block) {\n    return false;\n  }\n  block = block.getParent();\n}\n\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..a949bbbd 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,29 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (ref == null) {\n+  return false;\n+}\n+\n+// Make sure this assignment is not in a loop.\n+BasicBlock block = ref.getBasicBlock();\n+while (block != null) {\n+  if (block.isFunction) {\n+    // Only allow one assignment to a variable in a function.\n+    break;\n+  } else if (block.isLoop && !block.equals(ref.getBasicBlock())) {\n+    return false;\n+  }\n+  if (!ref.isSimpleAssignmentToName() || !ref.isDeclaration()) {\n+    return false;\n+  }\n+  if (ref.getBasicBlock() != block) {\n+    return false;\n+  }\n+  block = block.getParent();\n+}\n+\n+return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}