{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  Node scopeRoot = NodeUtil.getEnclosingScript(scope.getRootNode());\n  if (scopeRoot == null) {\n    report(t, null, GOOG_SCOPE_OUTSIDE_SCRIPT, \"\");\n    return;\n  }\n\n  List<Node> bindingDecls = Lists.newArrayList();\n\n  // First build a list of all NAME nodes in binding position within the\n  // goog.scope block.\n  for (Node stmt : scopeRoot.getChildren()) {\n    if (!stmt.isExprResult()) {\n      continue;\n    }\n    Node expr = stmt.getFirstChild();\n    if (!expr.isCall()) {\n      continue;\n    }\n    Node callee = expr.getFirstChild();\n    if (!callee.isGetProp()\n        || !callee.getFirstChild().matchesQualifiedName(\"goog.scope\")) {\n      continue;\n    }\n\n    // If the argument is a function expression, get the argument list of the\n    // function node itself, instead of the function expression node.\n    Node argNode = expr.getLastChild();\n    if (argNode.isFunction()) {\n      argNode = argNode.getLastChild();\n    }\n    if (!argNode.isBlock()) {\n      continue;\n    }\n\n    for (Node child : argNode.getChildren()) {\n      if (child.isVar() || child.isLet() || child.isConst()) {\n        for (Node nameNode : child.getFirstChild().siblings()) {\n          if (nameNode.isName()) {\n            bindingDecls.add(nameNode);\n          }\n        }\n      } else if (child.isFunction()) {\n        // this binding can only be used for the \"this\" arg of the function\n        // itself.\n        if (!child.getFirstChild().isThis()) {\n          continue;\n        }\n        bindingDecls.add(child.getFirstChild());\n      }\n    }\n  }\n\n  // Next, iterate over all NAME nodes, emitting an error for every node which\n  // is not a binding reference in the goog.scope block.\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (!bindingDecls.contains(n)) {\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      continue;\n    }\n\n    if (!n.hasChildren()) {\n      continue;\n    }\n\n    Node child = n.getFirstChild();\n    while (child != null) {\n      if (child.isName() && !bindingDecls.contains(child)) {\n        report(t, child, GOOG_SCOPE_NON_ALIAS_LOCAL, child.getString());\n      }\n      child = child.getNext();\n    }\n\n    Node parent = n.getParent();\n    if (parent == null || !parent.isVar()) {\n      continue;\n    }\n\n    if (!n.getFirstChild().isQualifiedName()) {\n      continue;\n    }\n\n    String name = n.getString();\n    Var aliasVar = scope.getVar(name);\n    aliases.put(name, aliasVar);\n    if (aliasVar == null || aliasVar.getInitialValue() == null) {\n      continue;\n    }\n\n    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n    transformation.addAlias(name, qualifiedName);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..f36a848b 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,101 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  Node scopeRoot = NodeUtil.getEnclosingScript(scope.getRootNode());\n+  if (scopeRoot == null) {\n+    report(t, null, GOOG_SCOPE_OUTSIDE_SCRIPT, \"\");\n+    return;\n+  }\n+\n+  List<Node> bindingDecls = Lists.newArrayList();\n+\n+  // First build a list of all NAME nodes in binding position within the\n+  // goog.scope block.\n+  for (Node stmt : scopeRoot.getChildren()) {\n+    if (!stmt.isExprResult()) {\n+      continue;\n+    }\n+    Node expr = stmt.getFirstChild();\n+    if (!expr.isCall()) {\n+      continue;\n+    }\n+    Node callee = expr.getFirstChild();\n+    if (!callee.isGetProp()\n+        || !callee.getFirstChild().matchesQualifiedName(\"goog.scope\")) {\n+      continue;\n+    }\n+\n+    // If the argument is a function expression, get the argument list of the\n+    // function node itself, instead of the function expression node.\n+    Node argNode = expr.getLastChild();\n+    if (argNode.isFunction()) {\n+      argNode = argNode.getLastChild();\n+    }\n+    if (!argNode.isBlock()) {\n+      continue;\n+    }\n+\n+    for (Node child : argNode.getChildren()) {\n+      if (child.isVar() || child.isLet() || child.isConst()) {\n+        for (Node nameNode : child.getFirstChild().siblings()) {\n+          if (nameNode.isName()) {\n+            bindingDecls.add(nameNode);\n+          }\n         }\n+      } else if (child.isFunction()) {\n+        // this binding can only be used for the \"this\" arg of the function\n+        // itself.\n+        if (!child.getFirstChild().isThis()) {\n+          continue;\n         }\n+        bindingDecls.add(child.getFirstChild());\n       }\n     }\n+  }\n+\n+  // Next, iterate over all NAME nodes, emitting an error for every node which\n+  // is not a binding reference in the goog.scope block.\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (!bindingDecls.contains(n)) {\n+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+      continue;\n+    }\n+\n+    if (!n.hasChildren()) {\n+      continue;\n+    }\n+\n+    Node child = n.getFirstChild();\n+    while (child != null) {\n+      if (child.isName() && !bindingDecls.contains(child)) {\n+        report(t, child, GOOG_SCOPE_NON_ALIAS_LOCAL, child.getString());\n+      }\n+      child = child.getNext();\n+    }\n+\n+    Node parent = n.getParent();\n+    if (parent == null || !parent.isVar()) {\n+      continue;\n+    }\n+\n+    if (!n.getFirstChild().isQualifiedName()) {\n+      continue;\n+    }\n+\n+    String name = n.getString();\n+    Var aliasVar = scope.getVar(name);\n+    aliases.put(name, aliasVar);\n+    if (aliasVar == null || aliasVar.getInitialValue() == null) {\n+      continue;\n+    }\n+\n+    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+    transformation.addAlias(name, qualifiedName);\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}