{
    "patch": "    // Get all the function parameters\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node currentArg = argList.getFirstChild();\n      while (currentArg != null) {\n        Var var = fnScope.getVar(currentArg.getString());\n        Node nextArg = currentArg.getNext();\n        if (!referenced.contains(var)) {\n          argList.removeChild(currentArg);\n          compiler.reportCodeChange();\n        }\n        currentArg = nextArg;\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    } ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..993d0ad6 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Get all the function parameters\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node currentArg = argList.getFirstChild();\n+      while (currentArg != null) {\n+        Var var = fnScope.getVar(currentArg.getString());\n+        Node nextArg = currentArg.getNext();\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(currentArg);\n+          compiler.reportCodeChange();\n+        }\n+        currentArg = nextArg;\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    } \n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}