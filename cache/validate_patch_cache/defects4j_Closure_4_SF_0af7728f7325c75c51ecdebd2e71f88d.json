{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Resolve named types via registry to avoid triggering warnings during resolution\n    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n    if (!resolvedViaRegistry) {\n      // If named type resolution via registry fails, try resolving via properties\n      resolveViaProperties(t, enclosing);\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n      }\n    }\n\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    // Call super.resolveInternal regardless of whether the type was resolved\n    super.resolveInternal(t, enclosing);\n\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..469870ce 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,31 +182,27 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    // Resolve named types via registry to avoid triggering warnings during resolution\n+    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+    if (!resolvedViaRegistry) {\n+      // If named type resolution via registry fails, try resolving via properties\n+      resolveViaProperties(t, enclosing);\n+      if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n+      }\n     }\n \n-    resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n+    // Call super.resolveInternal regardless of whether the type was resolved\n     super.resolveInternal(t, enclosing);\n+\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n+\n     return registry.isLastGeneration() ?\n         getReferencedType() : this;\n   }",
    "result_reason": "junit.framework.AssertionFailedError: unexpected warning(s) : JSC_IMPLEMENTS_NON_INTERFACE. can only implement interfaces at [testcode] line 2 : 29, JSC_IMPLEMENTS_NON_INTERFACE. can only implement interfaces at [testcode] line 3 : 26 expected:<1> but was:<2>",
    "test_result": "FAIL"
}