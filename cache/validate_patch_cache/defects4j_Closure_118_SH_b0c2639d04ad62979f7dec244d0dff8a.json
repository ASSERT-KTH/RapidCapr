{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    // Maybe STRING, GET, SET\n    if (child.isComputedProp()) {\n      maybeAddCast(child.getFirstChild());\n      continue;\n    }\n    if (!(child.isName() || child.isString())) {\n      continue;\n    }\n    String name = child.getString();\n    T type = typeSystem.getType(getScope(), n, name);\n    Property prop = getProperty(name);\n\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name, (type == null ? \"null\" : type.toString()),\n            n.toString(), \"\"));\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..ab1dd34e 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,29 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    // Maybe STRING, GET, SET\n+    if (child.isComputedProp()) {\n+      maybeAddCast(child.getFirstChild());\n+      continue;\n+    }\n+    if (!(child.isName() || child.isString())) {\n+      continue;\n+    }\n+    String name = child.getString();\n+    T type = typeSystem.getType(getScope(), n, name);\n+    Property prop = getProperty(name);\n+\n+    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+      if (propertiesToErrorFor.containsKey(name)) {\n+        compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n+            Warnings.INVALIDATION, name, (type == null ? \"null\" : type.toString()),\n+            n.toString(), \"\"));\n+      }\n+    }\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}