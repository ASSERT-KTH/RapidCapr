{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        SavedField savedField = savedFields[i];\n        try {\n            if (savedField.isSaved()) {\n                // restore original value\n                savedField.getField().set(millis, savedField.getValue(), savedField.getDuration());\n            } else {\n                millis = savedField.set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            iSavedFields = savedFields;\n            iSavedFieldsCount = i;\n            iSavedFieldsShared = false;\n            throw e;\n        }\n    }\n} catch (RuntimeException e) {\n    if (text != null) {\n        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n    }\n    throw e;\n} catch (Error e) {\n    if (text != null) {\n        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n    }\n    throw e;\n} finally {\n    iSavedFields = savedFields;\n    iSavedFieldsCount = count;\n    iSavedFieldsShared = false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..69a51c86 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,41 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        SavedField savedField = savedFields[i];\n+        try {\n+            if (savedField.isSaved()) {\n+                // restore original value\n+                savedField.getField().set(millis, savedField.getValue(), savedField.getDuration());\n+            } else {\n+                millis = savedField.set(millis, resetFields);\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            iSavedFields = savedFields;\n+            iSavedFieldsCount = i;\n+            iSavedFieldsShared = false;\n+            throw e;\n+        }\n+    }\n+} catch (RuntimeException e) {\n+    if (text != null) {\n+        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+    }\n+    throw e;\n+} catch (Error e) {\n+    if (text != null) {\n+        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+    }\n+    throw e;\n+} finally {\n+    iSavedFields = savedFields;\n+    iSavedFieldsCount = count;\n+    iSavedFieldsShared = false;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}