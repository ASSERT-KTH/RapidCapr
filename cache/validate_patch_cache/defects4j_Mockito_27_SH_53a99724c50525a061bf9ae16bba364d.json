{
    "patch": "        if (mock instanceof Enhancer) {\n            Enhancer enhancer = (Enhancer) mock;\n            Callback[] callbacks = enhancer.getCallbacks();\n            for (int i = 0; i < callbacks.length; i++) {\n                if (callbacks[i] instanceof MockHandler) {\n                    MockHandler<T> oldMockHandler = (MockHandler<T>) callbacks[i];\n                    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n                    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n                    callbacks[i] = newFilter;\n                }\n            }\n            enhancer.setCallbacks(callbacks);\n        } else if (mock instanceof Factory) {\n            Factory factory = (Factory) mock;\n            Callback callback = factory.getCallback(0);\n            if (callback instanceof MockHandler) {\n                MockHandler<T> oldMockHandler = (MockHandler<T>) callback;\n                MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n                MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n                factory.setCallback(0, newFilter);\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..f48244206 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,31 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        if (mock instanceof Enhancer) {\n+            Enhancer enhancer = (Enhancer) mock;\n+            Callback[] callbacks = enhancer.getCallbacks();\n+            for (int i = 0; i < callbacks.length; i++) {\n+                if (callbacks[i] instanceof MockHandler) {\n+                    MockHandler<T> oldMockHandler = (MockHandler<T>) callbacks[i];\n+                    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+                    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+                    callbacks[i] = newFilter;\n+                }\n+            }\n+            enhancer.setCallbacks(callbacks);\n+        } else if (mock instanceof Factory) {\n+            Factory factory = (Factory) mock;\n+            Callback callback = factory.getCallback(0);\n+            if (callback instanceof MockHandler) {\n+                MockHandler<T> oldMockHandler = (MockHandler<T>) callback;\n+                MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+                MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+                factory.setCallback(0, newFilter);\n+            }\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}