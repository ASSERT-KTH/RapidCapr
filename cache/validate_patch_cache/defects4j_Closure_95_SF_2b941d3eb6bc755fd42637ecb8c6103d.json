{
    "patch": "void declareVar(Node n) {\n  String name = n.getString();\n  Node parent = n.getParent();\n  JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n\n  // Declarations with multiple vars are split up,\n  // so check all siblings\n  Node previous = n.getPrevious();\n  Node next = n.getNext();\n  boolean isLetOrConst = NodeUtil.isNameDeclaration(parent)\n      && parent.getBooleanProp(Node.IS_BLOCK_SCOPED);\n  Node grandparent = parent.getParent();\n  boolean isForIn =\n      grandparent != null && grandparent.isVanillaFor() &&\n      grandparent.getLastChild() == parent &&\n      n == parent.getFirstChild();\n  boolean isCatch =\n      grandparent != null && grandparent.isCatch() &&\n      n == parent.getFirstChild();\n  boolean alreadyDeclaredInForInit =\n      !isLetOrConst &&\n      grandparent != null && grandparent.isVanillaFor() &&\n      n != parent.getFirstChild() &&\n      firstDeclaredVar(grandparent.getFirstChild()).name().equals(name);\n  if (!alreadyDeclaredInForInit && !isCatch &&\n      previous != null && previous.isName()) {\n    validator.expectRedeclarationInScope(\n        sourceName, n, previous, scope.getVar(name));\n  }\n  if (!alreadyDeclaredInForInit && !isCatch && !isForIn && next != null &&\n      next.isName()) {\n    validator.expectRedeclarationInScope(\n        sourceName, n, next, scope.getVar(name));\n  }\n\n  JSType declType = info != null ? info.getType() : null;\n  if (isLetOrConst) {\n    declType = getDeclaredTypeOfNode(n);\n  }\n  defineSlot(n, parent, declType, declType == null);\n  if (declType != null) {\n    JSType requiredType = info != null ? info.getParameterType() : null;\n    if (requiredType != null && !requiredType.isSubtype(declType)) {\n      if (parent.isCatch()) {\n        validator.expectTypeMismatches(\n            sourceName, n, getNativeType(UNKNOWN_TYPE), declType);\n      } else {\n        validator.expectTypeMismatches(\n            sourceName, n, requiredType, declType);\n      }\n    }\n  }\n}\n\nprivate static Var firstDeclaredVar(Node n) {\n  while (n != null && !NodeUtil.isNameDeclaration(n)) {\n    n = n.getNext();\n  }\n  if (n == null) {\n    return null;\n  }\n  Node nameNode = n.getFirstChild();\n  return nameNode == null ? null : nameNode.getJSType().getVar();\n}\n\nprivate void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  if (n.isName()) {\n    defineSimpleName(n, parent, type, inferred);\n  } else if (n.isStringKey()) {\n    String key = n.getString();\n    ObjectType obj;\n    if (parent.isObjectPattern()) {\n      JSType parentType = parent.getJSType();\n      obj = (ObjectType) parentType.restrictByNotNullOrUndefined();\n      if (obj == null && parentType != null) {\n        validator.expectNotNullOrUndefined(obj, parent);\n      }\n    } else {\n      Node lvalue = parent.getFirstChild();\n      JSType lvalueType = lvalue.getJSType();\n      obj = lvalueType == null ? null : lvalueType.dereference();\n    }\n    if (obj != null) {\n      obj.defineDeclaredProperty(\n          key, type != null ? type : getNativeType(JSTypeNative.NO_TYPE),\n          !inferred && parent.getParent().isFromExterns());\n    }\n  } else {\n    Preconditions.checkState(n.isGetElem(), n);\n    JSType objType = n.getFirstChild().getJSType();\n    if (objType != null) {\n      objType.getTemplateTypeMap().resolveTemplateTypes(\n          typeRegistry.getNativeType(JSTypeNative.NUMBER_TYPE));\n    }\n  }\n}\n\nprivate void defineSimpleName(\n    Node n, Node parent, JSType type, boolean inferred) {\n  String name = n.getString();\n  boolean isGlobalVar = !NodeUtil.isLocalName(n) && !scope.isDeclared(name, true);\n\n  if (parent.isFunction()) {\n    Var var = scope.getVar(name);\n    if (var != null) {\n      if (var.isFormalParam()) {\n        validator.expectUndeclaredFormals(\n            sourceName, n, parent, var, name, type);\n        return;\n      }\n      if (!var.isLocal()) {\n        validator.expectGlobalShadow(\n            sourceName, n, var, var.getNameNode().getSourceFileName());\n      }\n      return;\n    }\n  }\n\n  if (isGlobalVar) {\n    // Declare on global object in global scope\n    Node globalThis = IR.name(JSTypeNative.GLOBAL_THIS).setJSType(globalObjectType);\n    defineName(globalThis, n, type, inferred, name);\n    return;\n  }\n\n  Var var = scope.getSlot(name);\n  if (var == null) {\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n    boolean isConstant = info != null && info.isConstant();\n    Var newVar = scope.declare(\n        name, n, type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n        compiler.getInput(sourceName), inferred || isConstant);\n    if (previousVarBuilder != null && !inferred\n        && !compiler.getInput(sourceName).isExtern()) {\n      previousVarBuilder.add(newVar);\n    }\n    if (isConstant && type != null && !type.isPrimitive()) {\n      validator.expectValidEnums(n, type.getDisplayName());\n    }\n    if (parent.isFunction()) {\n      validator.expectUndeclaredFormals(\n          sourceName, n, parent, var, name, type);\n    }\n  } else if (var.isLet() && NodeUtil.isLoopStructure(parent)) {\n    // let variables are block scoped, but they appear in their own binding\n    // scope at the top of the block if in a for loop or for-of loop.\n    scope = scope.getVarScope();\n    scope.declare(\n        name, n, type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n        compiler.getInput(sourceName), inferred);\n    scope = scope.getParentScope();\n  } else {\n    if (parent.isFunction()) {\n      if (var.isFormalParam()) {\n        validator.expectUndeclaredFormals(\n            sourceName, n, parent, var, name, type);\n        return;\n      }\n      if (var.getParentScope() != scope) {\n        validator.expectGlobalShadow(\n            sourceName, n, var, var.getNameNode().getSourceFileName());\n      }\n      return;\n    }\n    validator.expectGlobalShadow(\n        sourceName, n, var, var.getNameNode().getSourceFileName());\n  }\n}\n\nprivate void defineName(\n    Node objNode, Node nameNod",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..11368c3a 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,177 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n+void declareVar(Node n) {\n+  String name = n.getString();\n+  Node parent = n.getParent();\n+  JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n+\n+  // Declarations with multiple vars are split up,\n+  // so check all siblings\n+  Node previous = n.getPrevious();\n+  Node next = n.getNext();\n+  boolean isLetOrConst = NodeUtil.isNameDeclaration(parent)\n+      && parent.getBooleanProp(Node.IS_BLOCK_SCOPED);\n+  Node grandparent = parent.getParent();\n+  boolean isForIn =\n+      grandparent != null && grandparent.isVanillaFor() &&\n+      grandparent.getLastChild() == parent &&\n+      n == parent.getFirstChild();\n+  boolean isCatch =\n+      grandparent != null && grandparent.isCatch() &&\n+      n == parent.getFirstChild();\n+  boolean alreadyDeclaredInForInit =\n+      !isLetOrConst &&\n+      grandparent != null && grandparent.isVanillaFor() &&\n+      n != parent.getFirstChild() &&\n+      firstDeclaredVar(grandparent.getFirstChild()).name().equals(name);\n+  if (!alreadyDeclaredInForInit && !isCatch &&\n+      previous != null && previous.isName()) {\n+    validator.expectRedeclarationInScope(\n+        sourceName, n, previous, scope.getVar(name));\n+  }\n+  if (!alreadyDeclaredInForInit && !isCatch && !isForIn && next != null &&\n+      next.isName()) {\n+    validator.expectRedeclarationInScope(\n+        sourceName, n, next, scope.getVar(name));\n+  }\n+\n+  JSType declType = info != null ? info.getType() : null;\n+  if (isLetOrConst) {\n+    declType = getDeclaredTypeOfNode(n);\n+  }\n+  defineSlot(n, parent, declType, declType == null);\n+  if (declType != null) {\n+    JSType requiredType = info != null ? info.getParameterType() : null;\n+    if (requiredType != null && !requiredType.isSubtype(declType)) {\n+      if (parent.isCatch()) {\n+        validator.expectTypeMismatches(\n+            sourceName, n, getNativeType(UNKNOWN_TYPE), declType);\n       } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+        validator.expectTypeMismatches(\n+            sourceName, n, requiredType, declType);\n       }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n+    }\n+  }\n+}\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n+private static Var firstDeclaredVar(Node n) {\n+  while (n != null && !NodeUtil.isNameDeclaration(n)) {\n+    n = n.getNext();\n+  }\n+  if (n == null) {\n+    return null;\n+  }\n+  Node nameNode = n.getFirstChild();\n+  return nameNode == null ? null : nameNode.getJSType().getVar();\n+}\n+\n+private void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  if (n.isName()) {\n+    defineSimpleName(n, parent, type, inferred);\n+  } else if (n.isStringKey()) {\n+    String key = n.getString();\n+    ObjectType obj;\n+    if (parent.isObjectPattern()) {\n+      JSType parentType = parent.getJSType();\n+      obj = (ObjectType) parentType.restrictByNotNullOrUndefined();\n+      if (obj == null && parentType != null) {\n+        validator.expectNotNullOrUndefined(obj, parent);\n+      }\n+    } else {\n+      Node lvalue = parent.getFirstChild();\n+      JSType lvalueType = lvalue.getJSType();\n+      obj = lvalueType == null ? null : lvalueType.dereference();\n+    }\n+    if (obj != null) {\n+      obj.defineDeclaredProperty(\n+          key, type != null ? type : getNativeType(JSTypeNative.NO_TYPE),\n+          !inferred && parent.getParent().isFromExterns());\n+    }\n+  } else {\n+    Preconditions.checkState(n.isGetElem(), n);\n+    JSType objType = n.getFirstChild().getJSType();\n+    if (objType != null) {\n+      objType.getTemplateTypeMap().resolveTemplateTypes(\n+          typeRegistry.getNativeType(JSTypeNative.NUMBER_TYPE));\n+    }\n+  }\n+}\n+\n+private void defineSimpleName(\n+    Node n, Node parent, JSType type, boolean inferred) {\n+  String name = n.getString();\n+  boolean isGlobalVar = !NodeUtil.isLocalName(n) && !scope.isDeclared(name, true);\n+\n+  if (parent.isFunction()) {\n+    Var var = scope.getVar(name);\n+    if (var != null) {\n+      if (var.isFormalParam()) {\n+        validator.expectUndeclaredFormals(\n+            sourceName, n, parent, var, name, type);\n+        return;\n       }\n+      if (!var.isLocal()) {\n+        validator.expectGlobalShadow(\n+            sourceName, n, var, var.getNameNode().getSourceFileName());\n+      }\n+      return;\n     }\n+  }\n+\n+  if (isGlobalVar) {\n+    // Declare on global object in global scope\n+    Node globalThis = IR.name(JSTypeNative.GLOBAL_THIS).setJSType(globalObjectType);\n+    defineName(globalThis, n, type, inferred, name);\n+    return;\n+  }\n+\n+  Var var = scope.getSlot(name);\n+  if (var == null) {\n+    JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n+    boolean isConstant = info != null && info.isConstant();\n+    Var newVar = scope.declare(\n+        name, n, type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n+        compiler.getInput(sourceName), inferred || isConstant);\n+    if (previousVarBuilder != null && !inferred\n+        && !compiler.getInput(sourceName).isExtern()) {\n+      previousVarBuilder.add(newVar);\n+    }\n+    if (isConstant && type != null && !type.isPrimitive()) {\n+      validator.expectValidEnums(n, type.getDisplayName());\n+    }\n+    if (parent.isFunction()) {\n+      validator.expectUndeclaredFormals(\n+          sourceName, n, parent, var, name, type);\n+    }\n+  } else if (var.isLet() && NodeUtil.isLoopStructure(parent)) {\n+    // let variables are block scoped, but they appear in their own binding\n+    // scope at the top of the block if in a for loop or for-of loop.\n+    scope = scope.getVarScope();\n+    scope.declare(\n+        name, n, type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n+        compiler.getInput(sourceName), inferred);\n+    scope = scope.getParentScope();\n+  } else {\n+    if (parent.isFunction()) {\n+      if (var.isFormalParam()) {\n+        validator.expectUndeclaredFormals(\n+            sourceName, n, parent, var, name, type);\n+        return;\n+      }\n+      if (var.getParentScope() != scope) {\n+        validator.expectGlobalShadow(\n+            sourceName, n, var, var.getNameNode().getSourceFileName());\n+      }\n+      return;\n+    }\n+    validator.expectGlobalShadow(\n+        sourceName, n, var, var.getNameNode().getSourceFileName());\n+  }\n+}\n+\n+private void defineName(\n+    Node objNode, Node nameNod\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}