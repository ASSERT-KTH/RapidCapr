{
    "patch": "            Matcher varargMatcher = matchers.get(indexOfVararg);\n            Object[] varargArguments = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg, indexOfVararg + 1);\n            if (varargArguments.length == 0) {\n                ((CapturesArguments) varargMatcher).captureFrom(null);\n            } else if (varargArguments[0].getClass().isArray()) {\n                Object[] arrayArgs = (Object[]) varargArguments[0];\n                for (Object arg : arrayArgs) {\n                    ((CapturesArguments) varargMatcher).captureFrom(arg);\n                }\n            } else {\n                ((CapturesArguments) varargMatcher).captureFrom(varargArguments[0]);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..49fd4f9f5 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,18 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Matcher varargMatcher = matchers.get(indexOfVararg);\n+            Object[] varargArguments = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg, indexOfVararg + 1);\n+            if (varargArguments.length == 0) {\n+                ((CapturesArguments) varargMatcher).captureFrom(null);\n+            } else if (varargArguments[0].getClass().isArray()) {\n+                Object[] arrayArgs = (Object[]) varargArguments[0];\n+                for (Object arg : arrayArgs) {\n+                    ((CapturesArguments) varargMatcher).captureFrom(arg);\n+                }\n+            } else {\n+                ((CapturesArguments) varargMatcher).captureFrom(varargArguments[0]);\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}