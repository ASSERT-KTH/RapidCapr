{
    "patch": "@Override \npublic final boolean shouldTraverse(NodeTraversal nodeTraversal, Node node, Node node1) {\n    final Node root = nodeTraversal.getScopeRoot();\n    /**\n     * Find the top-level function or script node, so that we can distinguish\n     * nested functions from non-nested functions.\n     */\n    if (root.getParent() != null) {\n        return true;\n    }\n    this.scope = nodeTraversal.getScope();\n    init();\n\n    // Recurse from a script or function root.\n    switch (root.getType()) {\n        case Token.SCRIPT:\n        case Token.FUNCTION:\n            return true;\n        default:\n            // Only traverse a parameter list if it is parented by a function.\n            return node.getType() != Token.LP || node1.getType() == Token.FUNCTION;\n    }\n}\n\n@Override \npublic final void visit(NodeTraversal t, Node n, Node parent) {\n    final Node root = t.getScopeRoot();\n    if (n == root) {\n        return;\n    }\n    if (n.getType() == Token.LP && NodeUtil.isFunctionExpression(parent)) {\n        handleFunctionInputs(parent);\n        return;\n    }\n    switch (n.getType()) {\n        case Token.FUNCTION:\n            if (NodeUtil.isFunctionExpression(n) || NodeUtil.isClassExpression(n)) {\n                return;\n            }\n            if (parent.getType() == Token.NAME) {\n                return;\n            }\n            defineDeclaredFunction(n, parent);\n            break;\n        case Token.NAME:\n            if (NodeUtil.isFunctionDeclaration(parent)) {\n                defineDeclaredFunction(parent, parent.getParent());\n            } else {\n                defineVar(n, parent);\n            }\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n    }\n    if (n.getType() == Token.LP && parent.getType() == Token.CALL) {\n        handleFunctionInputs(parent);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..bfa68523 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,68 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override \n+public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node node, Node node1) {\n+    final Node root = nodeTraversal.getScopeRoot();\n+    /**\n+     * Find the top-level function or script node, so that we can distinguish\n+     * nested functions from non-nested functions.\n+     */\n+    if (root.getParent() != null) {\n+        return true;\n+    }\n+    this.scope = nodeTraversal.getScope();\n+    init();\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+    // Recurse from a script or function root.\n+    switch (root.getType()) {\n+        case Token.SCRIPT:\n+        case Token.FUNCTION:\n+            return true;\n+        default:\n+            // Only traverse a parameter list if it is parented by a function.\n+            return node.getType() != Token.LP || node1.getType() == Token.FUNCTION;\n+    }\n+}\n+\n+@Override \n+public final void visit(NodeTraversal t, Node n, Node parent) {\n+    final Node root = t.getScopeRoot();\n+    if (n == root) {\n+        return;\n+    }\n+    if (n.getType() == Token.LP && NodeUtil.isFunctionExpression(parent)) {\n         handleFunctionInputs(parent);\n         return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+    }\n+    switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+            if (NodeUtil.isFunctionExpression(n) || NodeUtil.isClassExpression(n)) {\n+                return;\n+            }\n+            if (parent.getType() == Token.NAME) {\n+                return;\n+            }\n+            defineDeclaredFunction(n, parent);\n+            break;\n+        case Token.NAME:\n+            if (NodeUtil.isFunctionDeclaration(parent)) {\n+                defineDeclaredFunction(parent, parent.getParent());\n+            } else {\n+                defineVar(n, parent);\n+            }\n+            break;\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            defineCatch(n, parent);\n+            break;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineVar(n, parent);\n+            break;\n+    }\n+    if (n.getType() == Token.LP && parent.getType() == Token.CALL) {\n+        handleFunctionInputs(parent);\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: shouldTraverse(NodeTraversal,Node,Node) in TypedScopeCreator.LocalScopeBuilder cannot override shouldTraverse(NodeTraversal,Node,Node) in TypedScopeCreator.AbstractScopeBuilder",
    "test_result": "ERROR"
}