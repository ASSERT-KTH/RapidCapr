{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n      // Strip unreferenced args off the beginning of any call expressions.\n      for (Call call : referencedCalls) {\n        // Skip FUNCTION, which is the type of a Call node, but not an actual function call.\n        Preconditions.checkState(call.getSourceNode().isFunction(), call);\n        Node callArgList = call.getNodeAtIndex(1);\n        int i = 0;\n        while (i < callArgList.getChildCount()) {\n          Node arg = callArgList.getChildAtIndex(i);\n          Var var = fnScope.getVar(arg.getString());\n          if (!referenced.contains(var)) {\n            Node next = arg.getNext();\n            callArgList.removeChild(arg);\n            compiler.reportCodeChange();\n            // `arguments` has weird behavior so we can't abstractly remove its\n            // arguments. We'll skip to the next arg in this specific case.\n            if (var.getNode() != null && var.getNode().getBooleanProp(Node.ANALYZED_DURING_GTI)) {\n              while (next != null && next.isName() && VAR_ARGS.equals(next.getString())) {\n                next = next.getNext();\n                i++;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a41d90b2 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,58 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+      // Strip unreferenced args off the beginning of any call expressions.\n+      for (Call call : referencedCalls) {\n+        // Skip FUNCTION, which is the type of a Call node, but not an actual function call.\n+        Preconditions.checkState(call.getSourceNode().isFunction(), call);\n+        Node callArgList = call.getNodeAtIndex(1);\n+        int i = 0;\n+        while (i < callArgList.getChildCount()) {\n+          Node arg = callArgList.getChildAtIndex(i);\n+          Var var = fnScope.getVar(arg.getString());\n+          if (!referenced.contains(var)) {\n+            Node next = arg.getNext();\n+            callArgList.removeChild(arg);\n+            compiler.reportCodeChange();\n+            // `arguments` has weird behavior so we can't abstractly remove its\n+            // arguments. We'll skip to the next arg in this specific case.\n+            if (var.getNode() != null && var.getNode().getBooleanProp(Node.ANALYZED_DURING_GTI)) {\n+              while (next != null && next.isName() && VAR_ARGS.equals(next.getString())) {\n+                next = next.getNext();\n+                i++;\n+              }\n+            }\n+          } else {\n+            break;\n+          }\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}