{
    "patch": "        int size = this.data.size();\n\n        // start index exceeds time series size, return the empty copy\n        if (start >= size) {\n            return copy;\n        }\n\n        // end index exceeds time series size, use the last data item index \n        int endIndex = Math.min(end, size - 1);\n\n        for (int i = start; i <= endIndex; i++) {\n            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(i);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n\n            // set the correct time period for the cloned data item \n            RegularTimePeriod time = (RegularTimePeriod) item.getPeriod();\n            RegularTimePeriod cloneTime;\n\n            if (time instanceof Day) {\n                cloneTime = new Day((Day) time);\n            } else if (time instanceof Hour) {\n                cloneTime = new Hour((Hour) time);\n            } else if (time instanceof Minute) {\n                cloneTime = new Minute((Minute) time);\n            } else if (time instanceof Month) {\n                cloneTime = new Month((Month) time);\n            } else if (time instanceof Quarter) {\n                cloneTime = new Quarter((Quarter) time);\n            } else if (time instanceof Second) {\n                cloneTime = new Second((Second) time);\n            } else if (time instanceof Week) {\n                cloneTime = new Week((Week) time);\n            } else {\n                cloneTime = new Year((Year) time);\n            }\n\n            clone.setTimePeriod(cloneTime);\n\n            try {\n                copy.add(clone);\n            }\n            catch (SeriesException e) {\n                e.printStackTrace();",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..3c6ee1c 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1045,31 +1045,49 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n      *\n      * @throws CloneNotSupportedException if there is a cloning problem.\n      */\n-    public TimeSeries createCopy(int start, int end)\n-            throws CloneNotSupportedException {\n-        if (start < 0) {\n-            throw new IllegalArgumentException(\"Requires start >= 0.\");\n-        }\n-        if (end < start) {\n-            throw new IllegalArgumentException(\"Requires start <= end.\");\n-        }\n-        TimeSeries copy = (TimeSeries) super.clone();\n-        copy.data = new java.util.ArrayList();\n-        if (this.data.size() > 0) {\n-            for (int index = start; index <= end; index++) {\n-                TimeSeriesDataItem item\n-                        = (TimeSeriesDataItem) this.data.get(index);\n-                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n-                try {\n-                    copy.add(clone);\n-                }\n-                catch (SeriesException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }\n-        return copy;\n-    }\n+        int size = this.data.size();\n+\n+        // start index exceeds time series size, return the empty copy\n+        if (start >= size) {\n+            return copy;\n+        }\n+\n+        // end index exceeds time series size, use the last data item index \n+        int endIndex = Math.min(end, size - 1);\n+\n+        for (int i = start; i <= endIndex; i++) {\n+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(i);\n+            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+\n+            // set the correct time period for the cloned data item \n+            RegularTimePeriod time = (RegularTimePeriod) item.getPeriod();\n+            RegularTimePeriod cloneTime;\n+\n+            if (time instanceof Day) {\n+                cloneTime = new Day((Day) time);\n+            } else if (time instanceof Hour) {\n+                cloneTime = new Hour((Hour) time);\n+            } else if (time instanceof Minute) {\n+                cloneTime = new Minute((Minute) time);\n+            } else if (time instanceof Month) {\n+                cloneTime = new Month((Month) time);\n+            } else if (time instanceof Quarter) {\n+                cloneTime = new Quarter((Quarter) time);\n+            } else if (time instanceof Second) {\n+                cloneTime = new Second((Second) time);\n+            } else if (time instanceof Week) {\n+                cloneTime = new Week((Week) time);\n+            } else {\n+                cloneTime = new Year((Year) time);\n+            }\n+\n+            clone.setTimePeriod(cloneTime);\n+\n+            try {\n+                copy.add(clone);\n+            }\n+            catch (SeriesException e) {\n+                e.printStackTrace();\n \n     /**\n      * Creates a new timeseries by copying a subset of the data in this time",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}