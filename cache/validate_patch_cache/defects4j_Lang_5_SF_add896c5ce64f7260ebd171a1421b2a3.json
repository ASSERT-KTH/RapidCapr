{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n\n    final int len = str.length();\n\n    // Check if it starts with underscore\n    if (str.charAt(0) == '_') {\n        if (len < 3) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final int secondUnderscore = str.indexOf('_', 1);\n        if (secondUnderscore == -1) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final String language = \"\";\n        final String country = str.substring(1, secondUnderscore);\n\n        if (!isValidCode(country)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final String variant = str.substring(secondUnderscore + 1);\n\n        if (!isValidCode(variant)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        return new Locale(language, country, variant);\n    }\n\n    // Check if it contains underscore and split the parts\n    final int underscore = str.indexOf('_');\n\n    if (underscore == -1) {\n        if (!isValidCode(str)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        return new Locale(str);\n    }\n\n    final String language = str.substring(0, underscore);\n    final int lenMinusOne = len - 1;\n\n    if (lenMinusOne == underscore) {\n        if (!isValidCode(language)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        return new Locale(language);\n    }\n\n    final char afterUnderscore = str.charAt(underscore + 1);\n\n    if (afterUnderscore == '_') {\n        if (!isValidCode(language)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final String country = \"\";\n        final String variant = str.substring(underscore + 2);\n\n        if (!isValidCode(variant)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        return new Locale(language, country, variant);\n    }\n\n    if (!isValidCode(language) || !Character.isUpperCase(afterUnderscore)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    final int secondUnderscore = str.indexOf('_', underscore + 1);\n\n    if (secondUnderscore == -1) {\n        final String country = str.substring(underscore + 1);\n\n        if (!isValidCode(country)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        return new Locale(language, country);\n    }\n\n    final String country = str.substring(underscore + 1, secondUnderscore);\n\n    if (!isValidCode(country)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    final String variant = str.substring(secondUnderscore + 1);\n\n    if (!isValidCode(variant)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    return new Locale(language, country, variant);\n}\n\nprivate static boolean isValidCode(final String code) {\n    final int len = code.length();\n\n    if (len == 0 || len > 8) {\n        return false;\n    }\n\n    for (int i = 0; i < len; i++) {\n        final char ch = code.charAt(i);\n        if (!Character.isLetterOrDigit(ch) && ch != '-') {\n            return false;\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..a82d78d7 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,127 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n+    }\n+\n+    final int len = str.length();\n+\n+    // Check if it starts with underscore\n+    if (str.charAt(0) == '_') {\n+        if (len < 3) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n+\n+        final int secondUnderscore = str.indexOf('_', 1);\n+        if (secondUnderscore == -1) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+\n+        final String language = \"\";\n+        final String country = str.substring(1, secondUnderscore);\n+\n+        if (!isValidCode(country)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+\n+        final String variant = str.substring(secondUnderscore + 1);\n+\n+        if (!isValidCode(variant)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+\n+        return new Locale(language, country, variant);\n+    }\n+\n+    // Check if it contains underscore and split the parts\n+    final int underscore = str.indexOf('_');\n+\n+    if (underscore == -1) {\n+        if (!isValidCode(str)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+\n+        return new Locale(str);\n+    }\n+\n+    final String language = str.substring(0, underscore);\n+    final int lenMinusOne = len - 1;\n+\n+    if (lenMinusOne == underscore) {\n+        if (!isValidCode(language)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+\n+        return new Locale(language);\n     }\n \n+    final char afterUnderscore = str.charAt(underscore + 1);\n+\n+    if (afterUnderscore == '_') {\n+        if (!isValidCode(language)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+\n+        final String country = \"\";\n+        final String variant = str.substring(underscore + 2);\n+\n+        if (!isValidCode(variant)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+\n+        return new Locale(language, country, variant);\n+    }\n+\n+    if (!isValidCode(language) || !Character.isUpperCase(afterUnderscore)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    final int secondUnderscore = str.indexOf('_', underscore + 1);\n+\n+    if (secondUnderscore == -1) {\n+        final String country = str.substring(underscore + 1);\n+\n+        if (!isValidCode(country)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+\n+        return new Locale(language, country);\n+    }\n+\n+    final String country = str.substring(underscore + 1, secondUnderscore);\n+\n+    if (!isValidCode(country)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    final String variant = str.substring(secondUnderscore + 1);\n+\n+    if (!isValidCode(variant)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    return new Locale(language, country, variant);\n+}\n+\n+private static boolean isValidCode(final String code) {\n+    final int len = code.length();\n+\n+    if (len == 0 || len > 8) {\n+        return false;\n+    }\n+\n+    for (int i = 0; i < len; i++) {\n+        final char ch = code.charAt(i);\n+        if (!Character.isLetterOrDigit(ch) && ch != '-') {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: _GB",
    "test_result": "FAIL"
}