{
    "patch": "public static Map<Integer, String> removeStringsWithNumbers(Map<Integer, String> map) {\n    Map<Integer, String> result = new HashMap<>();\n    for (Map.Entry<Integer, String> entry : map.entrySet()) {\n        boolean containsNumber = false;\n        for (int i = 0; i < entry.getValue().length(); i++) {\n            if (Character.isDigit(entry.getValue().charAt(i))) {\n                containsNumber = true;\n                break;\n            }\n        }\n        if (!containsNumber) {\n            result.put(entry.getKey(), entry.getValue());\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..32455692e 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,22 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<Integer, String> removeStringsWithNumbers(Map<Integer, String> map) {\n+    Map<Integer, String> result = new HashMap<>();\n+    for (Map.Entry<Integer, String> entry : map.entrySet()) {\n+        boolean containsNumber = false;\n+        for (int i = 0; i < entry.getValue().length(); i++) {\n+            if (Character.isDigit(entry.getValue().charAt(i))) {\n+                containsNumber = true;\n+                break;\n+            }\n+        }\n+        if (!containsNumber) {\n+            result.put(entry.getKey(), entry.getValue());\n+        }\n+    }\n+    return result;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}