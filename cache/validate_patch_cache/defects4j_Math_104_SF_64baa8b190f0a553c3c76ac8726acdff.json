{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (x < 0 || a <= 0) {\n        throw new IllegalArgumentException(\"invalid input\");\n    }\n    double eps = 1.0E-15; // or set a matching value\n    double gln = LogGammaFunction.logGamma(a);\n    double ap = a;\n    double del = 1.0 / a;\n    double sum = del;\n    for (int n = 1; n <= 100; n++) {\n        ++ap;\n        del *= x / ap;\n        sum += del;\n        if (Math.abs(del) < Math.abs(sum) * eps) {\n            double gamser = sum * Math.exp(-x + a * Math.log(x) - gln);\n            return gamser;\n        }\n    }\n    throw new RuntimeException(\"no convergence\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..23c0ad944 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,26 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (x < 0 || a <= 0) {\n+        throw new IllegalArgumentException(\"invalid input\");\n+    }\n+    double eps = 1.0E-15; // or set a matching value\n+    double gln = LogGammaFunction.logGamma(a);\n+    double ap = a;\n+    double del = 1.0 / a;\n+    double sum = del;\n+    for (int n = 1; n <= 100; n++) {\n+        ++ap;\n+        del *= x / ap;\n+        sum += del;\n+        if (Math.abs(del) < Math.abs(sum) * eps) {\n+            double gamser = sum * Math.exp(-x + a * Math.log(x) - gln);\n+            return gamser;\n+        }\n+    }\n+    throw new RuntimeException(\"no convergence\");\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}