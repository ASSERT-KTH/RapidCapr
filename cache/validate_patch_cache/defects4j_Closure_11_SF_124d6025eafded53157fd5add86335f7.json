{
    "patch": "public String getprop(String name) {\n    ProcessBuilder builder = new ProcessBuilder(\"/system/bin/getprop\", name);\n    builder.redirectErrorStream(true);\n    Process process = null;\n    String output = null;\n\n    try {\n        process = builder.start();\n        OutputStream stdin = process.getOutputStream();\n        InputStream stdout = process.getInputStream();\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(stdout), 1);\n        StringBuilder builder2 = new StringBuilder();\n        int character;\n\n        while ((character = reader.read()) != -1) {\n            builder2.append((char) character);\n        }\n\n        try {\n            process.waitFor();\n        } catch (InterruptedException ex) {\n            // ignore\n        }\n\n        output = builder2.toString();\n    }\n    catch (IOException ex) {\n        // ignore\n    }\n    finally {\n        if (process != null) {\n            process.destroy();\n        }\n    }\n\n    return output.trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..98c845a0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,44 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String name) {\n+    ProcessBuilder builder = new ProcessBuilder(\"/system/bin/getprop\", name);\n+    builder.redirectErrorStream(true);\n+    Process process = null;\n+    String output = null;\n+\n+    try {\n+        process = builder.start();\n+        OutputStream stdin = process.getOutputStream();\n+        InputStream stdout = process.getInputStream();\n+\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(stdout), 1);\n+        StringBuilder builder2 = new StringBuilder();\n+        int character;\n+\n+        while ((character = reader.read()) != -1) {\n+            builder2.append((char) character);\n+        }\n+\n+        try {\n+            process.waitFor();\n+        } catch (InterruptedException ex) {\n+            // ignore\n+        }\n+\n+        output = builder2.toString();\n+    }\n+    catch (IOException ex) {\n+        // ignore\n+    }\n+    finally {\n+        if (process != null) {\n+            process.destroy();\n+        }\n+    }\n+\n+    return output.trim();\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}