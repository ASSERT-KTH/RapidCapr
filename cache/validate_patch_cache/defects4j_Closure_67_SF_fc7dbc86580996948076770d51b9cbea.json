{
    "patch": "      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && n.getType() == Token.GETPROP) {\n        boolean isChainedProperty =\n            n.getFirstChild() != null && n.getFirstChild().getType() == Token.GETPROP;\n\n        if (isChainedProperty) {\n          Node child = n.getFirstChild().getFirstChild().getNext();\n          if (child != null && child.getType() == Token.STRING &&\n              child.getString().equals(\"prototype\")) {\n            return true;\n          }\n        } else {\n          return false;\n        }\n      }\n\n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..598aa81d 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -311,27 +311,23 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getParent().getType() == Token.NAME);\n     }\n \n-    private boolean isPrototypePropertyAssign(Node assign) {\n-      Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n-        // We want to exclude the assignment itself from the usage list\n+          && n.getType() == Token.GETPROP) {\n         boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n+            n.getFirstChild() != null && n.getFirstChild().getType() == Token.GETPROP;\n \n         if (isChainedProperty) {\n           Node child = n.getFirstChild().getFirstChild().getNext();\n-\n-          if (child.getType() == Token.STRING &&\n+          if (child != null && child.getType() == Token.STRING &&\n               child.getString().equals(\"prototype\")) {\n             return true;\n           }\n+        } else {\n+          return false;\n         }\n       }\n \n       return false;\n-    }\n \n     /**\n      * Processes a NAME node to see if it's a global function declaration.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}