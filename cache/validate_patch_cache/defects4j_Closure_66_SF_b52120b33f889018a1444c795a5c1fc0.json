{
    "patch": "public static double getTypedPercent(JsonObject obj) {\n    double numTyped = 0;\n    double numTotal = obj.size();\n\n    for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n        JsonElement value = entry.getValue();\n        if (value != null && value.isJsonPrimitive() && ((JsonPrimitive) value).isNumber()) {\n            numTyped++;\n        }\n    }\n\n    return (numTyped / numTotal) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..1a337e2b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonObject obj) {\n+    double numTyped = 0;\n+    double numTotal = obj.size();\n+\n+    for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n+        JsonElement value = entry.getValue();\n+        if (value != null && value.isJsonPrimitive() && ((JsonPrimitive) value).isNumber()) {\n+            numTyped++;\n+        }\n+    }\n+\n+    return (numTyped / numTotal) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}