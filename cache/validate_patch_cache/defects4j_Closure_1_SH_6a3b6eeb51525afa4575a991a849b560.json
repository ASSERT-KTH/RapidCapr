{
    "patch": "    \n    if (!modifyCallers) {\n      // Get referenced variables so we know what arguments are actually used. \n      final Set<String> referencedVariables = new LinkedHashSet<>(); \n      NodeTraversal.traverse(compiler, function, new AbstractPostOrderCallback() {\n        @Override\n        public void visit(NodeTraversal t, Node node, Node parent) {\n          if (NodeUtil.isName(node) \n              && node.getParent().isParamList()\n              && !\"\".equals(node.getString())) {\n            referencedVariables.add(node.getString());\n          } \n        }\n      });\n      \n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referencedVariables.contains(var.getName())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4565c532 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,26 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    if (!modifyCallers) {\n+      // Get referenced variables so we know what arguments are actually used. \n+      final Set<String> referencedVariables = new LinkedHashSet<>(); \n+      NodeTraversal.traverse(compiler, function, new AbstractPostOrderCallback() {\n+        @Override\n+        public void visit(NodeTraversal t, Node node, Node parent) {\n+          if (NodeUtil.isName(node) \n+              && node.getParent().isParamList()\n+              && !\"\".equals(node.getString())) {\n+            referencedVariables.add(node.getString());\n+          } \n+        }\n+      });\n+      \n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referencedVariables.contains(var.getName())) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}