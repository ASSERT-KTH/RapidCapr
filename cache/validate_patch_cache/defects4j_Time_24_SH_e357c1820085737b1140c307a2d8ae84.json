{
    "patch": "        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            try {\n                millis = savedField.set(millis, resetFields);\n                if (i + 1 < count) {\n                    DurationField currentField = savedField.iField.getDurationField();\n                    SavedField nextField = savedFields[i + 1];\n                    DurationField nextDurationField = nextField.iField.getDurationField();\n                    if (compareReverse(currentField, nextDurationField) > 0) {\n                        throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField.getName() + \" -> \" + nextDurationField.getName());\n                    }\n                }\n            } catch (IllegalFieldValueException e) {\n                if (DateTimeFieldType.year().equals(savedFields[i].iField.getType())) {\n                    // Year is occasionally interpreted wrong due to Gregorian Reform\n                    iDefaultYear = -iDefaultYear;\n                    long instant = savedFields[i].iField.set(0L, iDefaultYear);\n                    millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n                } else if (savedFields[i].iField.getType().equals(DateTimeFieldType.weekyear())) {\n                    // Weekyear needs to be converted to year for parsing\n                    int year = savedFields[i].iField.get(DateTimeUtils.getChronology(iChrono).year(), millis);\n                    DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n                    int weeksPerYear = weeks.getRange().getMaximum();\n                    int weeksInYear = savedFields[i].iField.getDurationField().getRange().getMaximum();\n                    if (weeksInYear < weeksPerYear) {\n                        // Convert to year by setting the weekyear and weekOfWeekyear fields\n                        millis = savedFields[i].iField.set(0, millis);\n                        millis = weeks.set(millis, 1);\n                        millis = savedFields[i].iField.set(millis, year);\n                    } else {\n                        throw e;\n                    }\n                } else {\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                    }\n                    throw e;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..8cd4bff7 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,46 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            try {\n+                millis = savedField.set(millis, resetFields);\n+                if (i + 1 < count) {\n+                    DurationField currentField = savedField.iField.getDurationField();\n+                    SavedField nextField = savedFields[i + 1];\n+                    DurationField nextDurationField = nextField.iField.getDurationField();\n+                    if (compareReverse(currentField, nextDurationField) > 0) {\n+                        throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField.getName() + \" -> \" + nextDurationField.getName());\n+                    }\n+                }\n+            } catch (IllegalFieldValueException e) {\n+                if (DateTimeFieldType.year().equals(savedFields[i].iField.getType())) {\n+                    // Year is occasionally interpreted wrong due to Gregorian Reform\n+                    iDefaultYear = -iDefaultYear;\n+                    long instant = savedFields[i].iField.set(0L, iDefaultYear);\n+                    millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n+                } else if (savedFields[i].iField.getType().equals(DateTimeFieldType.weekyear())) {\n+                    // Weekyear needs to be converted to year for parsing\n+                    int year = savedFields[i].iField.get(DateTimeUtils.getChronology(iChrono).year(), millis);\n+                    DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n+                    int weeksPerYear = weeks.getRange().getMaximum();\n+                    int weeksInYear = savedFields[i].iField.getDurationField().getRange().getMaximum();\n+                    if (weeksInYear < weeksPerYear) {\n+                        // Convert to year by setting the weekyear and weekOfWeekyear fields\n+                        millis = savedFields[i].iField.set(0, millis);\n+                        millis = weeks.set(millis, 1);\n+                        millis = savedFields[i].iField.set(millis, year);\n+                    } else {\n+                        throw e;\n+                    }\n+                } else {\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                    }\n+                    throw e;\n+                }\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: method get in class DateTimeField cannot be applied to given types;",
    "test_result": "ERROR"
}