{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Get the initial estimate of the offset at the given instant\n    int initialOffset = getOffset(instantLocal);\n\n    // Calculate the instant of the initial estimated offset\n    long instantInitial = instantLocal - initialOffset;\n\n    // Get the actual offset at the instant of the initial estimated offset\n    int actualOffset = getOffset(instantInitial);\n\n    // Check if the estimated and actual offset are different, indicating a possible DST boundary\n    if (initialOffset != actualOffset) {\n\n        // Get the next time transition (forward or backward) relative to the instant of initial estimated offset\n        long nextTransition = initialOffset > actualOffset ? nextTransition(instantInitial) : previousTransition(instantInitial);\n\n        // Adjust the instant local to check if it is affected by the same transition\n        long instantLocalAdjusted = instantLocal - (initialOffset - actualOffset);\n\n        // Check if the instant of the next transition matches the instantLocal's adjusted transition\n        if (instantLocalAdjusted != nextTransition) {\n            return initialOffset;\n        }\n    }\n\n    // If no DST detected, return the actual offset\n    return actualOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d7066f58 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,35 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Get the initial estimate of the offset at the given instant\n+    int initialOffset = getOffset(instantLocal);\n+\n+    // Calculate the instant of the initial estimated offset\n+    long instantInitial = instantLocal - initialOffset;\n+\n+    // Get the actual offset at the instant of the initial estimated offset\n+    int actualOffset = getOffset(instantInitial);\n+\n+    // Check if the estimated and actual offset are different, indicating a possible DST boundary\n+    if (initialOffset != actualOffset) {\n+\n+        // Get the next time transition (forward or backward) relative to the instant of initial estimated offset\n+        long nextTransition = initialOffset > actualOffset ? nextTransition(instantInitial) : previousTransition(instantInitial);\n+\n+        // Adjust the instant local to check if it is affected by the same transition\n+        long instantLocalAdjusted = instantLocal - (initialOffset - actualOffset);\n+\n+        // Check if the instant of the next transition matches the instantLocal's adjusted transition\n+        if (instantLocalAdjusted != nextTransition) {\n+            return initialOffset;\n         }\n-        return offsetAdjusted;\n     }\n \n+    // If no DST detected, return the actual offset\n+    return actualOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}