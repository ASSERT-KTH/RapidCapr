{
    "patch": "            DateTimeField zoneField = savedFields[i].iField;\n            if(zoneField.getType() == DateTimeFieldType.zone()) {\n                // Always align the zone offset with ISO if it was parsed\n                String zoneName = savedFields[i].getLiteralValue();\n                DateTimeZone parsedZone = DateTimeZone.forID(zoneName);\n                if (parsedZone != null) {\n                    iZone = parsedZone;\n                }\n            } else {\n                millis = savedFields[i].set(millis, resetFields);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..594b9269 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,17 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            DateTimeField zoneField = savedFields[i].iField;\n+            if(zoneField.getType() == DateTimeFieldType.zone()) {\n+                // Always align the zone offset with ISO if it was parsed\n+                String zoneName = savedFields[i].getLiteralValue();\n+                DateTimeZone parsedZone = DateTimeZone.forID(zoneName);\n+                if (parsedZone != null) {\n+                    iZone = parsedZone;\n+                }\n+            } else {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}