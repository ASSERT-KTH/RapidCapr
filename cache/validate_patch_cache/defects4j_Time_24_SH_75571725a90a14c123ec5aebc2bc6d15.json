{
    "patch": "try {\n    int i = 0;\n    while (i < count) {\n        SavedField savedField = savedFields[i];\n        DateTimeField field = savedField.iField;\n        if (field.getType() == DateTimeFieldType.weekyear()) {\n            // Check if all fields up to weekyear has been parsed\n            boolean parseSuccess = true;\n            for (int j = 0; j < i; j++) {\n                DateTimeField jField = savedFields[j].iField;\n                if (jField.getType() != DateTimeFieldType.year() && jField.getType() != DateTimeFieldType.weekyear()) {\n                    parseSuccess = false;\n                    break;\n                }\n            }\n            if (!parseSuccess) {\n                // Cannot parse any further, throw exception with original message\n                throw e;\n            }\n            // Set calculated weekyear\n            millis = iChrono.weekyear().set(millis, savedField.getValue());\n            i++;\n            // skip over week fields\n            while (i < count && savedFields[i].iField.getType() == DateTimeFieldType.weekyearOfWeek()) {\n                i++;\n            }\n        } else {\n            millis = savedField.set(millis, resetFields);\n            i++;\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    // alter base year for parsing if first field is year\n    DurationField years = DurationFieldType.years().getField(iChrono);\n    DateTimeField first = savedFields[0].iField;\n    if (compareReverse(first.getDurationField(), years) <= 0 || first.getType() == DateTimeFieldType.weekyear()\n        || first.getType() == DateTimeFieldType.weekyearOfCentury()) {\n        millis = first.roundFloor(millis);\n        for (int i = 1; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } else {\n        throw e;\n    }\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n        throw new IllegalArgumentException(message, e);\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c8f382d1 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,60 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    int i = 0;\n+    while (i < count) {\n+        SavedField savedField = savedFields[i];\n+        DateTimeField field = savedField.iField;\n+        if (field.getType() == DateTimeFieldType.weekyear()) {\n+            // Check if all fields up to weekyear has been parsed\n+            boolean parseSuccess = true;\n+            for (int j = 0; j < i; j++) {\n+                DateTimeField jField = savedFields[j].iField;\n+                if (jField.getType() != DateTimeFieldType.year() && jField.getType() != DateTimeFieldType.weekyear()) {\n+                    parseSuccess = false;\n+                    break;\n+                }\n+            }\n+            if (!parseSuccess) {\n+                // Cannot parse any further, throw exception with original message\n+                throw e;\n+            }\n+            // Set calculated weekyear\n+            millis = iChrono.weekyear().set(millis, savedField.getValue());\n+            i++;\n+            // skip over week fields\n+            while (i < count && savedFields[i].iField.getType() == DateTimeFieldType.weekyearOfWeek()) {\n+                i++;\n+            }\n+        } else {\n+            millis = savedField.set(millis, resetFields);\n+            i++;\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    // alter base year for parsing if first field is year\n+    DurationField years = DurationFieldType.years().getField(iChrono);\n+    DateTimeField first = savedFields[0].iField;\n+    if (compareReverse(first.getDurationField(), years) <= 0 || first.getType() == DateTimeFieldType.weekyear()\n+        || first.getType() == DateTimeFieldType.weekyearOfCentury()) {\n+        millis = first.roundFloor(millis);\n+        for (int i = 1; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } else {\n+        throw e;\n+    }\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n+        throw new IllegalArgumentException(message, e);\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}