{
    "patch": "            iSavedFields = savedFields = savedFields.clone();\n            iSavedFieldsShared = false;\n        }\n\n        sort(savedFields, count);\n        int monthsIndex = -1, daysIndex = -1;\n        for (int i = 0; i < count; i++) {\n            DateTimeField field = savedFields[i].iField;\n            if (monthsIndex == -1 && field.getDurationField() == DurationFieldType.months().getField(iChrono)) {\n                monthsIndex = i;\n            } else if (daysIndex == -1 && field.getDurationField() == DurationFieldType.days().getField(iChrono)) {\n                daysIndex = i;\n            }\n            try {\n                millis = savedFields[i].set(millis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n                }\n                throw e;\n            }\n        }\n\n        if (daysIndex != -1 && savedFields[0].iField.getDurationField() == DurationFieldType.weekyears().getField(iChrono)) {\n            if (monthsIndex != -1 && monthsIndex < daysIndex) {\n                // swap months and days\n                SavedField tmp = savedFields[monthsIndex];\n                savedFields[monthsIndex] = savedFields[daysIndex];\n                savedFields[daysIndex] = tmp;\n                monthsIndex = daysIndex; // correction\n            }\n            millis = savedFields[0].set(millis, iDefaultYear);\n            for (int i = 1; i < count; i++) {\n                try {\n                    millis = savedFields[i].set(millis, resetFields);\n                } catch (IllegalFieldValueException e) {\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n                    }\n                    throw e;\n                }\n            }\n        }\n\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..8d8015fa 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,57 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            iSavedFields = savedFields = savedFields.clone();\n+            iSavedFieldsShared = false;\n+        }\n+\n+        sort(savedFields, count);\n+        int monthsIndex = -1, daysIndex = -1;\n+        for (int i = 0; i < count; i++) {\n+            DateTimeField field = savedFields[i].iField;\n+            if (monthsIndex == -1 && field.getDurationField() == DurationFieldType.months().getField(iChrono)) {\n+                monthsIndex = i;\n+            } else if (daysIndex == -1 && field.getDurationField() == DurationFieldType.days().getField(iChrono)) {\n+                daysIndex = i;\n+            }\n+            try {\n+                millis = savedFields[i].set(millis, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+                }\n+                throw e;\n+            }\n+        }\n+\n+        if (daysIndex != -1 && savedFields[0].iField.getDurationField() == DurationFieldType.weekyears().getField(iChrono)) {\n+            if (monthsIndex != -1 && monthsIndex < daysIndex) {\n+                // swap months and days\n+                SavedField tmp = savedFields[monthsIndex];\n+                savedFields[monthsIndex] = savedFields[daysIndex];\n+                savedFields[daysIndex] = tmp;\n+                monthsIndex = daysIndex; // correction\n+            }\n+            millis = savedFields[0].set(millis, iDefaultYear);\n+            for (int i = 1; i < count; i++) {\n+                try {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                } catch (IllegalFieldValueException e) {\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+                    }\n+                    throw e;\n+                }\n+            }\n+        }\n+\n+        if (iZone == null) {\n+            millis -= iOffset;\n+        } else {\n+            int offset = iZone.getOffsetFromLocal(millis);\n+            millis -= offset;\n+            if (offset != iZone.getOffset(millis)) {\n+                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'try' without 'catch' or 'finally'",
    "test_result": "ERROR"
}