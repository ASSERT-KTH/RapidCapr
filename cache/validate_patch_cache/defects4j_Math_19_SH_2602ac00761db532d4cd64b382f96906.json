{
    "patch": "private void checkParameters() {\n    final double[] init = getStartPoint();\n    final double[] lB = getLowerBound();\n    final double[] uB = getUpperBound();\n\n    // Check whether the bounds are valid.\n    for (int i = 0; i < lB.length; i++) {\n        if (Double.isNaN(lB[i]) || Double.isNaN(uB[i])) {\n            throw new NotANumberException();\n        }\n        if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n            throw new OutOfRangeException(lB[i], Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);\n        }\n    }\n    if (hasInfiniteBounds(lB, uB)) {\n        // If there is at least one finite bound, none can be infinite,\n        // because mixed cases are not supported by the current code.\n        throw new MathUnsupportedOperationException();\n    }\n\n    // Convert API to internal handling of boundaries.\n    if (hasFiniteBounds(lB, uB)) {\n        boundaries = new double[2][];\n        boundaries[0] = lB;\n        boundaries[1] = uB;\n        // Abort early if the normalization will overflow\n        if (Double.isInfinite(boundaries[1][0] - boundaries[0][0])) {\n            throw new NumberIsTooLargeException(boundaries[1][0] - boundaries[0][0], 0, true);\n        }\n    } else {\n        boundaries = null;\n    }\n\n    // Check the input sigma values.\n    if (inputSigma != null) {\n        if (inputSigma.length != init.length) {\n            throw new DimensionMismatchException(inputSigma.length, init.length);\n        }\n        for (int i = 0; i < init.length; i++) {\n            if (inputSigma[i] < 0) {\n                throw new NotPositiveException(inputSigma[i]);\n            }\n            if (hasFiniteBounds(lB, uB)) {\n                double boundaryRange = boundaries[1][i] - boundaries[0][i];\n                if (inputSigma[i] > boundaryRange) {\n                    throw new NumberIsTooLargeException(inputSigma[i], boundaryRange, true);\n                }\n            }\n        }\n    }\n}\n\nprivate boolean hasFiniteBounds(double[] lB, double[] uB) {\n    for (int i = 0; i < lB.length; i++) {\n        if (!Double.isInfinite(lB[i]) || !Double.isInfinite(uB[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate boolean hasInfiniteBounds(double[] lB, double[] uB) {\n    for (int i = 0; i < lB.length; i++) {\n        if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..845ba1709 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,75 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+private void checkParameters() {\n+    final double[] init = getStartPoint();\n+    final double[] lB = getLowerBound();\n+    final double[] uB = getUpperBound();\n+\n+    // Check whether the bounds are valid.\n+    for (int i = 0; i < lB.length; i++) {\n+        if (Double.isNaN(lB[i]) || Double.isNaN(uB[i])) {\n+            throw new NotANumberException();\n+        }\n+        if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n+            throw new OutOfRangeException(lB[i], Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);\n+        }\n+    }\n+    if (hasInfiniteBounds(lB, uB)) {\n+        // If there is at least one finite bound, none can be infinite,\n+        // because mixed cases are not supported by the current code.\n+        throw new MathUnsupportedOperationException();\n+    }\n+\n+    // Convert API to internal handling of boundaries.\n+    if (hasFiniteBounds(lB, uB)) {\n+        boundaries = new double[2][];\n+        boundaries[0] = lB;\n+        boundaries[1] = uB;\n+        // Abort early if the normalization will overflow\n+        if (Double.isInfinite(boundaries[1][0] - boundaries[0][0])) {\n+            throw new NumberIsTooLargeException(boundaries[1][0] - boundaries[0][0], 0, true);\n+        }\n+    } else {\n+        boundaries = null;\n+    }\n+\n+    // Check the input sigma values.\n+    if (inputSigma != null) {\n+        if (inputSigma.length != init.length) {\n+            throw new DimensionMismatchException(inputSigma.length, init.length);\n+        }\n+        for (int i = 0; i < init.length; i++) {\n+            if (inputSigma[i] < 0) {\n+                throw new NotPositiveException(inputSigma[i]);\n+            }\n+            if (hasFiniteBounds(lB, uB)) {\n+                double boundaryRange = boundaries[1][i] - boundaries[0][i];\n+                if (inputSigma[i] > boundaryRange) {\n+                    throw new NumberIsTooLargeException(inputSigma[i], boundaryRange, true);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+private boolean hasFiniteBounds(double[] lB, double[] uB) {\n+    for (int i = 0; i < lB.length; i++) {\n+        if (!Double.isInfinite(lB[i]) || !Double.isInfinite(uB[i])) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+private boolean hasInfiniteBounds(double[] lB, double[] uB) {\n+    for (int i = 0; i < lB.length; i++) {\n+        if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}