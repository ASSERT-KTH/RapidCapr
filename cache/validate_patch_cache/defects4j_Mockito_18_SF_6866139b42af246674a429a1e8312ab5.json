{
    "patch": "public static Iterable<Double> compute(double start, double end, int numPoints) {\n    List<Double> points = new ArrayList<>(numPoints);\n    double delta = (end - start) / (numPoints - 1);\n    for (int i = 0; i < numPoints - 1; i++) {\n        double x = start + delta * i;\n        double y = Math.sin(x);\n        points.add(y);\n    }\n    points.add(Math.sin(end));\n    return points;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..798dc3cad 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,17 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Iterable<Double> compute(double start, double end, int numPoints) {\n+    List<Double> points = new ArrayList<>(numPoints);\n+    double delta = (end - start) / (numPoints - 1);\n+    for (int i = 0; i < numPoints - 1; i++) {\n+        double x = start + delta * i;\n+        double y = Math.sin(x);\n+        points.add(y);\n+    }\n+    points.add(Math.sin(end));\n+    return points;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}