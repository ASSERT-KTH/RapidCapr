{
    "patch": "    // Strip unreferenced args that immediately follow a rest parameter.\n    // e.g. function foo(...args, arg1) { ... }\n    Node arg = argList.getFirstChild();\n    while (arg != null) {\n      if (NodeUtil.isRestArg(arg)) {\n        while ((arg = arg.getNext()) != null) {\n          if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n            argList.removeChild(arg);\n            compiler.reportCodeChange();\n          } else {\n            break;\n          }\n        }\n        break;\n      }\n      arg = arg.getNext();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6bbe55c4 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,22 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Strip unreferenced args that immediately follow a rest parameter.\n+    // e.g. function foo(...args, arg1) { ... }\n+    Node arg = argList.getFirstChild();\n+    while (arg != null) {\n+      if (NodeUtil.isRestArg(arg)) {\n+        while ((arg = arg.getNext()) != null) {\n+          if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+            argList.removeChild(arg);\n+            compiler.reportCodeChange();\n+          } else {\n+            break;\n+          }\n+        }\n+        break;\n+      }\n+      arg = arg.getNext();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}