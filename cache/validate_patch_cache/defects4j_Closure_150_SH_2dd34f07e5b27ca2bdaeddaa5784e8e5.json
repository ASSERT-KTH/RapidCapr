{
    "patch": "      Node grandparent = parent.getParent();\n      Node greatgrandparent = grandparent == null ? null : grandparent.getParent();\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (NodeUtil.isFunctionDeclaration(n)) {\n            if (greatgrandparent != null && greatgrandparent.getType() == Token.BLOCK) {\n              defineDeclaredFunction(n, grandparent);\n            } else {\n              defineDeclaredFunction(n, parent);\n            }\n          } else {\n            defineFunctionExpression(n); // For anonymous function expressions\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..f26afae1 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,13 +1448,20 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n+      Node grandparent = parent.getParent();\n+      Node greatgrandparent = grandparent == null ? null : grandparent.getParent();\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          if (NodeUtil.isFunctionDeclaration(n)) {\n+            if (greatgrandparent != null && greatgrandparent.getType() == Token.BLOCK) {\n+              defineDeclaredFunction(n, grandparent);\n+            } else {\n+              defineDeclaredFunction(n, parent);\n+            }\n+          } else {\n+            defineFunctionExpression(n); // For anonymous function expressions\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}