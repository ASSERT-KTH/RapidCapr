{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    boolean inQuotes= false;\n    boolean escaped= false;\n\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n        switch(c) {\n            case '\\'':\n                if (unquote && !escaped) {\n                    if (++i==value.length())\n                        break;\n                    c= value.charAt(i);\n                }\n                if (!escaped) {\n                    inQuotes= !inQuotes;\n                    if (inQuotes)\n                        regex.append(\"\\\\Q\");\n                    else\n                        regex.append(\"\\\\E\");\n                }\n                escaped= false;\n                break;\n            case '\\\\':\n                if (!escaped && i < value.length() - 1 && value.charAt(i + 1) == 's') {\n                    regex.append(\"\\\\s+\");\n                    i++;  // skip the 's' character\n                    wasWhite= true;\n                } else if (!escaped) {\n                    regex.append('\\\\');\n                }\n                escaped= !escaped;\n                break;\n            default:\n                escaped= false;\n                if (Character.isWhitespace(c)) {\n                    if (!inQuotes && !wasWhite) {\n                        regex.append(\"\\\\s+\");\n                        wasWhite= true;\n                    }\n                } else {\n                    if (\"[](){}|.*+?$\\\\\".indexOf(c) != -1 && !inQuotes)\n                        regex.append('\\\\');\n                    regex.append(c);\n                    wasWhite= false;\n                }\n                break;\n        }\n    }\n    if (inQuotes)\n        regex.append(\"\\\\E\");\n\n    if (wasWhite || escaped)\n        regex.append(\"\\\\s+\");\n\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..0710c175 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,63 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite= false;\n+    boolean inQuotes= false;\n+    boolean escaped= false;\n+\n+    for(int i= 0; i<value.length(); ++i) {\n+        char c= value.charAt(i);\n+        switch(c) {\n             case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n+                if (unquote && !escaped) {\n+                    if (++i==value.length())\n+                        break;\n                     c= value.charAt(i);\n                 }\n+                if (!escaped) {\n+                    inQuotes= !inQuotes;\n+                    if (inQuotes)\n+                        regex.append(\"\\\\Q\");\n+                    else\n+                        regex.append(\"\\\\E\");\n+                }\n+                escaped= false;\n                 break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n             case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                if (!escaped && i < value.length() - 1 && value.charAt(i + 1) == 's') {\n+                    regex.append(\"\\\\s+\");\n+                    i++;  // skip the 's' character\n+                    wasWhite= true;\n+                } else if (!escaped) {\n+                    regex.append('\\\\');\n+                }\n+                escaped= !escaped;\n+                break;\n+            default:\n+                escaped= false;\n+                if (Character.isWhitespace(c)) {\n+                    if (!inQuotes && !wasWhite) {\n+                        regex.append(\"\\\\s+\");\n+                        wasWhite= true;\n+                    }\n+                } else {\n+                    if (\"[](){}|.*+?$\\\\\".indexOf(c) != -1 && !inQuotes)\n+                        regex.append('\\\\');\n+                    regex.append(c);\n+                    wasWhite= false;\n+                }\n+                break;\n         }\n-        return regex;\n     }\n+    if (inQuotes)\n+        regex.append(\"\\\\E\");\n+\n+    if (wasWhite || escaped)\n+        regex.append(\"\\\\s+\");\n+\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}