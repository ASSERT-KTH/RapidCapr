{
    "patch": ">>> [INFILL] <<<\n        List<TimeSeriesDataItem> copyData = new ArrayList<>();\n        for (int index = start; index <= end && index < this.data.size(); index++) {\n            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copyData.add(clone);\n            } catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n        copy.addAndOrUpdate(copyData);",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..e1da02a 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,18 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+>>> [INFILL] <<<\n+        List<TimeSeriesDataItem> copyData = new ArrayList<>();\n+        for (int index = start; index <= end && index < this.data.size(); index++) {\n+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n+            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+            try {\n+                copyData.add(clone);\n+            } catch (SeriesException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        copy.addAndOrUpdate(copyData);\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}