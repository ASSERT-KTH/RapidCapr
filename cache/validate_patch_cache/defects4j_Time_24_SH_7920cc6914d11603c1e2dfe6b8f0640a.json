{
    "patch": "        SavedField lastSavedField = null;\n        try {\n            for (int i = 0; i < count; i++) {\n                SavedField curSavedField = savedFields[i];\n                if (lastSavedField == null ||\n                        curSavedField.compareTo(lastSavedField) >= 0) {\n                    lastSavedField = curSavedField;\n                    millis = curSavedField.set(millis, resetFields);\n                } else if (text != null) {\n                    int lastEnd = lastSavedField.iField.getFormatter().getPrinter().getMaxTextLength(\n                            iLocale);\n                    if (lastEnd > 32) {\n                        lastEnd = 32;\n                    }\n                    String failingText = text.substring(\n                            lastSavedField.iEnd, Math.min(lastSavedField.iEnd + lastEnd + 1, text.length()));\n                    throw new IllegalFieldValueException(\n                            \"Cannot parse \\\"\" + failingText + \"\\\": \" + curSavedField.iField.getType(),\n                            failingText);\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                int lastEnd = lastSavedField.iField.getFormatter().getPrinter().getMaxTextLength(iLocale);\n                if (lastEnd > 32) {\n                    lastEnd = 32;\n                }\n                String failingText = text.substring(lastSavedField.iEnd, Math.min(lastSavedField.iEnd + lastEnd + 1,\n                        text.length()));\n                e.prependMessage(\"Cannot parse \\\"\" + failingText + \"\\\": \");\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..bcca81d7 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,39 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        SavedField lastSavedField = null;\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                SavedField curSavedField = savedFields[i];\n+                if (lastSavedField == null ||\n+                        curSavedField.compareTo(lastSavedField) >= 0) {\n+                    lastSavedField = curSavedField;\n+                    millis = curSavedField.set(millis, resetFields);\n+                } else if (text != null) {\n+                    int lastEnd = lastSavedField.iField.getFormatter().getPrinter().getMaxTextLength(\n+                            iLocale);\n+                    if (lastEnd > 32) {\n+                        lastEnd = 32;\n+                    }\n+                    String failingText = text.substring(\n+                            lastSavedField.iEnd, Math.min(lastSavedField.iEnd + lastEnd + 1, text.length()));\n+                    throw new IllegalFieldValueException(\n+                            \"Cannot parse \\\"\" + failingText + \"\\\": \" + curSavedField.iField.getType(),\n+                            failingText);\n+                }\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                int lastEnd = lastSavedField.iField.getFormatter().getPrinter().getMaxTextLength(iLocale);\n+                if (lastEnd > 32) {\n+                    lastEnd = 32;\n+                }\n+                String failingText = text.substring(lastSavedField.iEnd, Math.min(lastSavedField.iEnd + lastEnd + 1,\n+                        text.length()));\n+                e.prependMessage(\"Cannot parse \\\"\" + failingText + \"\\\": \");\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}