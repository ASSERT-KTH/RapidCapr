{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] realEigen = dec.getRealEigenvalues();\n    final int n = realEigen.length;\n    final double[] sqrtEigen = new double[n];\n    double maxEigen = 0;\n    \n    for (int i = 0; i < n; i++) {\n        if (realEigen[i] < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        sqrtEigen[i] = Math.sqrt(realEigen[i]);\n        if (realEigen[i] > maxEigen) {\n            maxEigen = realEigen[i];\n        }\n    }\n    \n    final RealMatrix V = dec.getV();\n\n    if (maxEigen < 1e-6) {\n        final RealMatrix sqrtD = MatrixUtils.createRealIdentityMatrix(n);\n        for (int i = 0; i < n; i++) {\n            sqrtD.setEntry(i, i, sqrtEigen[i]);\n        }\n        return V.multiply(sqrtD).multiply(V.transpose());\n    } else {\n        final double threshold = maxEigen * 1e-6;\n        final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigen);\n        for (int i = 0; i < n; i++) {\n            if (realEigen[i] < threshold) {\n                sqrtD.setEntry(i, i, 0.0);\n            }\n        }\n        final RealMatrix sqrtM = V.multiply(sqrtD).multiply(V.transpose());\n        return sqrtM;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..473395e70 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,41 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] realEigen = dec.getRealEigenvalues();\n+    final int n = realEigen.length;\n+    final double[] sqrtEigen = new double[n];\n+    double maxEigen = 0;\n+    \n+    for (int i = 0; i < n; i++) {\n+        if (realEigen[i] < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        sqrtEigen[i] = Math.sqrt(realEigen[i]);\n+        if (realEigen[i] > maxEigen) {\n+            maxEigen = realEigen[i];\n+        }\n+    }\n+    \n+    final RealMatrix V = dec.getV();\n+\n+    if (maxEigen < 1e-6) {\n+        final RealMatrix sqrtD = MatrixUtils.createRealIdentityMatrix(n);\n+        for (int i = 0; i < n; i++) {\n+            sqrtD.setEntry(i, i, sqrtEigen[i]);\n+        }\n+        return V.multiply(sqrtD).multiply(V.transpose());\n+    } else {\n+        final double threshold = maxEigen * 1e-6;\n+        final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigen);\n+        for (int i = 0; i < n; i++) {\n+            if (realEigen[i] < threshold) {\n+                sqrtD.setEntry(i, i, 0.0);\n+            }\n+        }\n+        final RealMatrix sqrtM = V.multiply(sqrtD).multiply(V.transpose());\n+        return sqrtM;\n     }\n }\n+}",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}