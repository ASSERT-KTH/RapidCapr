{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        // Current best point\n        RealPointValuePair best = simplex[0];\n        // Number of iterations since best update\n        int noImprovementIterationCount = 0;\n        for (int i = 0; i < numIter; i++) {\n            incrementIterationsCounter();\n\n            // Perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(simplex, 1.0, comparator);\n\n            if (comparator.compare(reflected, best) < 0) {\n                // New best point found\n                best = reflected;\n                noImprovementIterationCount = 0;\n                // Check if the reflected point is good enough to accept\n                final RealPointValuePair expanded = evaluateNewSimplex(simplex, khi, comparator);\n                if (comparator.compare(expanded, best) < 0) {\n                    // Accept the expanded simplex\n                    simplex[0] = expanded;\n                } else {\n                    // Accept the reflected simplex\n                    simplex[0] = reflected;\n                }\n            } else {\n                // Check if all points in the simplex have the same function value\n                boolean allSameValue = true;\n                for (int j = 1; j < simplex.length; j++) {\n                    if (comparator.compare(simplex[j], best) != 0) {\n                        allSameValue = false;\n                        break;\n                    }\n                }\n\n                if (allSameValue) {\n                    // All points in the simplex have the same function value, so we cannot improve\n                    noImprovementIterationCount++;\n                } else {\n                    // Compute the contracted simplex\n                    final RealPointValuePair contracted = evaluateNewSimplex(simplex, gamma, comparator);\n                    if (comparator.compare(contracted, simplex[0]) < 0) {\n                        // Accept the contracted simplex\n                        simplex[0] = contracted;\n                    } else {\n                        noImprovementIterationCount++;\n                    }\n                }\n            }\n            // Check if the iterations should stop\n            if (noImprovementIterationCount >= stopMaxNoImprovementIterations) {\n                throw new OptimizationException(\"Maximum number of iterations without improvement exceeded.\");\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..6d9d23c7c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -59,43 +59,59 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     /** {@inheritDoc} */\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+        // Current best point\n+        RealPointValuePair best = simplex[0];\n+        // Number of iterations since best update\n+        int noImprovementIterationCount = 0;\n+        for (int i = 0; i < numIter; i++) {\n             incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+            // Perform a reflection step\n+            final RealPointValuePair reflected = evaluateNewSimplex(simplex, 1.0, comparator);\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n             if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                // New best point found\n+                best = reflected;\n+                noImprovementIterationCount = 0;\n+                // Check if the reflected point is good enough to accept\n+                final RealPointValuePair expanded = evaluateNewSimplex(simplex, khi, comparator);\n+                if (comparator.compare(expanded, best) < 0) {\n+                    // Accept the expanded simplex\n+                    simplex[0] = expanded;\n+                } else {\n+                    // Accept the reflected simplex\n+                    simplex[0] = reflected;\n+                }\n+            } else {\n+                // Check if all points in the simplex have the same function value\n+                boolean allSameValue = true;\n+                for (int j = 1; j < simplex.length; j++) {\n+                    if (comparator.compare(simplex[j], best) != 0) {\n+                        allSameValue = false;\n+                        break;\n+                    }\n                 }\n \n-                return;\n-\n+                if (allSameValue) {\n+                    // All points in the simplex have the same function value, so we cannot improve\n+                    noImprovementIterationCount++;\n+                } else {\n+                    // Compute the contracted simplex\n+                    final RealPointValuePair contracted = evaluateNewSimplex(simplex, gamma, comparator);\n+                    if (comparator.compare(contracted, simplex[0]) < 0) {\n+                        // Accept the contracted simplex\n+                        simplex[0] = contracted;\n+                    } else {\n+                        noImprovementIterationCount++;\n+                    }\n+                }\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+            // Check if the iterations should stop\n+            if (noImprovementIterationCount >= stopMaxNoImprovementIterations) {\n+                throw new OptimizationException(\"Maximum number of iterations without improvement exceeded.\");\n             }\n-\n         }\n-\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}