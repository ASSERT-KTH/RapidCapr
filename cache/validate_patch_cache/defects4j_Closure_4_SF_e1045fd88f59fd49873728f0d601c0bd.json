{
    "patch": "    Set<JSType> typesResolvedViaRegistry = new HashSet<>();\n    EntryHandler<JSType> registryEntryHandler =\n        (type, st, registry) -> typesResolvedViaRegistry.add(type);\n    try {\n      registry.addEntryHandler(registryEntryHandler);\n      // Resolution via properties is first in order to trigger the warnings built into that method\n      // before we attempt to resolve via the registry.\n      resolveViaProperties(t, enclosing);\n    } finally {\n      registry.removeEntryHandler(registryEntryHandler);\n    }\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    boolean resolved = !typesResolvedViaRegistry.isEmpty();\n    JSType resolvedType;\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n    } else {\n      resolvedType = this;\n    }\n    resolveViaRegistry(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ? getReferencedType() : resolvedType;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..349e466f 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,38 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+    Set<JSType> typesResolvedViaRegistry = new HashSet<>();\n+    EntryHandler<JSType> registryEntryHandler =\n+        (type, st, registry) -> typesResolvedViaRegistry.add(type);\n+    try {\n+      registry.addEntryHandler(registryEntryHandler);\n+      // Resolution via properties is first in order to trigger the warnings built into that method\n+      // before we attempt to resolve via the registry.\n+      resolveViaProperties(t, enclosing);\n+    } finally {\n+      registry.removeEntryHandler(registryEntryHandler);\n+    }\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n+    boolean resolved = !typesResolvedViaRegistry.isEmpty();\n+    JSType resolvedType;\n     if (resolved) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+      resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n+    } else {\n+      resolvedType = this;\n     }\n-\n-    resolveViaProperties(t, enclosing);\n+    resolveViaRegistry(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n     super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    return registry.isLastGeneration() ? getReferencedType() : resolvedType;\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}