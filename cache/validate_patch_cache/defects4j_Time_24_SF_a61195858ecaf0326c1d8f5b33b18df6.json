{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    long millis = iMillis;\n    boolean updated = false;\n    int savedFieldsCount = iSavedFieldsCount;\n\n    if (resetFields) {\n        for (int i = 0; i < savedFieldsCount; i++) {\n            millis = iSavedFields[i].reset(millis);\n        }\n    } else if (iSavedFieldsShared) {\n        iSavedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n\n    try {\n        sort(iSavedFields, savedFieldsCount);\n        for (int i = 0; i < savedFieldsCount; i++) {\n            millis = iSavedFields[i].set(millis);\n            if (iSavedFields[i].iField.getType() == DateTimeFieldType.year()) {\n                int year = ((YearField) iSavedFields[i].iField).getYear();\n                if (year != iSavedFields[i].iValue) {\n                    updated = true;\n                    iSavedFields[i].iValue = year;\n                }\n            }\n        }\n\n        if (updated) {\n            for (int i = 0; i < iSavedFieldsCount; i++) {\n                if (iSavedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {\n                    iSavedFields[i].savedFields = null;\n                }\n            }\n\n            sort(iSavedFields, savedFieldsCount);\n            for (int i = 0; i < savedFieldsCount; i++) {\n                millis = iSavedFields[i].set(millis);\n                if (iSavedFields[i].iField.getType() == DateTimeFieldType.year()) {\n                    int year = ((YearField) iSavedFields[i].iField).getYear();\n                    if (year != iSavedFields[i].iValue) {\n                        throw new IllegalArgumentException(\"Restarting to adjust year didn't work\");\n                    }\n                }\n            }\n        }\n\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone != null) {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..7fc7e27f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,73 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n+public long computeMillis(boolean resetFields, String text) {\n+    long millis = iMillis;\n+    boolean updated = false;\n+    int savedFieldsCount = iSavedFieldsCount;\n+\n+    if (resetFields) {\n+        for (int i = 0; i < savedFieldsCount; i++) {\n+            millis = iSavedFields[i].reset(millis);\n         }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+    } else if (iSavedFieldsShared) {\n+        iSavedFields = (SavedField[]) iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+\n+    try {\n+        sort(iSavedFields, savedFieldsCount);\n+        for (int i = 0; i < savedFieldsCount; i++) {\n+            millis = iSavedFields[i].set(millis);\n+            if (iSavedFields[i].iField.getType() == DateTimeFieldType.year()) {\n+                int year = ((YearField) iSavedFields[i].iField).getYear();\n+                if (year != iSavedFields[i].iValue) {\n+                    updated = true;\n+                    iSavedFields[i].iValue = year;\n+                }\n             }\n         }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n+        if (updated) {\n+            for (int i = 0; i < iSavedFieldsCount; i++) {\n+                if (iSavedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {\n+                    iSavedFields[i].savedFields = null;\n+                }\n             }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+\n+            sort(iSavedFields, savedFieldsCount);\n+            for (int i = 0; i < savedFieldsCount; i++) {\n+                millis = iSavedFields[i].set(millis);\n+                if (iSavedFields[i].iField.getType() == DateTimeFieldType.year()) {\n+                    int year = ((YearField) iSavedFields[i].iField).getYear();\n+                    if (year != iSavedFields[i].iValue) {\n+                        throw new IllegalArgumentException(\"Restarting to adjust year didn't work\");\n+                    }\n+                }\n             }\n-            throw e;\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+\n+    if (iZone != null) {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}