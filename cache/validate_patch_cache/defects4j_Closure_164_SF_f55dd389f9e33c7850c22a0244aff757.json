{
    "patch": "public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // Check subtyping of return types.\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // Check subtyping of parameter types.\n    // Parameters are contravariant in function types.\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n        JSType thisParamType = thisParam.getJSType();\n        JSType thatParamType = thatParam.getJSType();\n\n        if (thisParam.isVarArgs() && thatParam.isVarArgs()) {\n            // If both sets of parameters are varargs, then we only need to check if the\n            // types of the last parameter match.\n            JSType thisVarArgType = checkNotNull(thisParam.getNext()).getJSType();\n            JSType thatVarArgType = checkNotNull(thatParam.getNext()).getJSType();\n            if (!thisVarArgType.isSubtype(thatVarArgType)) {\n                return false;\n            }\n            return true;\n        } else if ((!thisParam.isVarArgs() && thatParam.isVarArgs()) || (thisParam == null && !thatParam.isVarArgs())) {\n            // If this function has fewer parameters than that function but that\n            // function has a variable number of parameters, then they are still\n            // considered subtype-compatible because the remaining parameters can\n            // be ignored. Likewise, if that function has no parameters but this\n            // one has a variable number of parameters, then they are also still\n            // subtype-compatible, because the varargs can be empty.\n            return true;\n        } else if ((thisParamType == null && thatParamType != null) || (thisParamType != null && !thatParamType.isSubtype(thisParamType))) {\n            // If the types at this parameter position do not match, then these\n            // are not subtype-compatible function types.\n            return false;\n        }\n        thisParam = thisParam.getNext();\n        thatParam = thatParam.getNext();\n    }\n\n    // If we have reached the end of one set of parameters but the other is still\n    // non-null, then these are not subtype-compatible function types.\n    return thisParam == null && thatParam == null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..d6a54301 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,81 +77,56 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n+public boolean isSubtype(JSType other) {\n     if (!(other instanceof ArrowType)) {\n-      return false;\n+        return false;\n     }\n \n     ArrowType that = (ArrowType) other;\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n-\n-    // this.returnType <: that.returnType (covariant)\n+    // Check subtyping of return types.\n     if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n+        return false;\n     }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n+    // Check subtyping of parameter types.\n+    // Parameters are contravariant in function types.\n     Node thisParam = parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n     while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n+        JSType thisParamType = thisParam.getJSType();\n+        JSType thatParamType = thatParam.getJSType();\n+\n+        if (thisParam.isVarArgs() && thatParam.isVarArgs()) {\n+            // If both sets of parameters are varargs, then we only need to check if the\n+            // types of the last parameter match.\n+            JSType thisVarArgType = checkNotNull(thisParam.getNext()).getJSType();\n+            JSType thatVarArgType = checkNotNull(thatParam.getNext()).getJSType();\n+            if (!thisVarArgType.isSubtype(thatVarArgType)) {\n+                return false;\n+            }\n+            return true;\n+        } else if ((!thisParam.isVarArgs() && thatParam.isVarArgs()) || (thisParam == null && !thatParam.isVarArgs())) {\n+            // If this function has fewer parameters than that function but that\n+            // function has a variable number of parameters, then they are still\n+            // considered subtype-compatible because the remaining parameters can\n+            // be ignored. Likewise, if that function has no parameters but this\n+            // one has a variable number of parameters, then they are also still\n+            // subtype-compatible, because the varargs can be empty.\n+            return true;\n+        } else if ((thisParamType == null && thatParamType != null) || (thisParamType != null && !thatParamType.isSubtype(thisParamType))) {\n+            // If the types at this parameter position do not match, then these\n+            // are not subtype-compatible function types.\n+            return false;\n         }\n-      }\n-\n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n-\n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n-\n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n         thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n         thatParam = thatParam.getNext();\n-      }\n-\n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n-\n-    return true;\n-  }\n+    // If we have reached the end of one set of parameters but the other is still\n+    // non-null, then these are not subtype-compatible function types.\n+    return thisParam == null && thatParam == null;\n+}\n \n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}