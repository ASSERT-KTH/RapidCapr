{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandler<T> oldHandler = (MockHandler<T>) getMockHandler(mock);\n    if (oldHandler instanceof MockMethodInterceptor) {\n        MockMethodInterceptor<T> mockMethodInterceptor = (MockMethodInterceptor<T>) oldHandler;\n        MockitoInvocationHandler orgMockitoHandler = (MockitoInvocationHandler) mockMethodInterceptor.getDelegate();\n        MockHandler<T> newMockHandler = new MockMethodInterceptor<T>(mock, orgMockitoHandler.getMockitoInterceptor().getMockHandler().getMockSettings());\n        mockMethodInterceptor.setDelegate(newMockHandler);\n    } else if (mock instanceof MockAccess) {\n        MockitoInvocationHandler handler = (MockitoInvocationHandler) FieldReader.readField(mock, \"mockitoInterceptor\");\n        MockHandler<T> newHandler = new MockMethodInterceptor<T>(mock, handler.getMockitoInterceptor().getMockHandler().getMockSettings());\n        FieldWriter.writeField(mock, \"mockitoInterceptor\", new MockitoInvocationHandler(handler.getMockitoInterceptor().getMockHandler(), handler.getMockitoInterceptor().getMockCreationSettings(), newHandler));\n    } else {\n        throw new RuntimeException(\"Could not reset the mock - unknown mock type: \" + mock.getClass());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..19e027050 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,22 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandler<T> oldHandler = (MockHandler<T>) getMockHandler(mock);\n+    if (oldHandler instanceof MockMethodInterceptor) {\n+        MockMethodInterceptor<T> mockMethodInterceptor = (MockMethodInterceptor<T>) oldHandler;\n+        MockitoInvocationHandler orgMockitoHandler = (MockitoInvocationHandler) mockMethodInterceptor.getDelegate();\n+        MockHandler<T> newMockHandler = new MockMethodInterceptor<T>(mock, orgMockitoHandler.getMockitoInterceptor().getMockHandler().getMockSettings());\n+        mockMethodInterceptor.setDelegate(newMockHandler);\n+    } else if (mock instanceof MockAccess) {\n+        MockitoInvocationHandler handler = (MockitoInvocationHandler) FieldReader.readField(mock, \"mockitoInterceptor\");\n+        MockHandler<T> newHandler = new MockMethodInterceptor<T>(mock, handler.getMockitoInterceptor().getMockHandler().getMockSettings());\n+        FieldWriter.writeField(mock, \"mockitoInterceptor\", new MockitoInvocationHandler(handler.getMockitoInterceptor().getMockHandler(), handler.getMockitoInterceptor().getMockCreationSettings(), newHandler));\n+    } else {\n+        throw new RuntimeException(\"Could not reset the mock - unknown mock type: \" + mock.getClass());\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}