{
    "patch": "long prevTransition = previousTransition(instantAdjusted);\nif (prevTransition == instantAdjusted - 1L) {\n    prevTransition = previousTransition(prevTransition);\n}\nlong nextTransition = nextTransition(instantAdjusted);\nif (nextTransition == instantAdjusted + 1L) {\n    nextTransition = nextTransition(nextTransition);\n}\nif (getOffset(prevTransition) == offsetAdjusted &&\n    getOffset(nextTransition) == offsetAdjusted) {\n    return offsetAdjusted;\n} else if (getOffset(prevTransition) < offsetAdjusted &&\n           getOffset(nextTransition) > offsetAdjusted) {\n    return offsetAdjusted;\n} else if (getOffset(prevTransition) < offsetAdjusted &&\n           getOffset(nextTransition) == offsetAdjusted) {\n    long next2 = nextTransition(nextTransition);\n    if (next2 == nextTransition + millisPerHour) {\n        // Ends meet at a DST Fall back transition\n        return offsetAdjusted;\n    } else if (instantLocal >= nextTransition - offsetAdjusted &&\n               next2 < instantLocal - offsetLocal) {\n        return getOffset(nextTransition);\n    }\n} else if (getOffset(prevTransition) == offsetAdjusted &&\n           getOffset(nextTransition) > offsetAdjusted) {\n    long prev2 = previousTransition(prevTransition);\n    if (prev2 == prevTransition - millisPerHour) {\n        // Ends meet at a DST Spring forward transition\n        return offsetAdjusted;\n    } else if (instantLocal < prevTransition - offsetAdjusted &&\n               prev2 >= instantLocal - offsetLocal) {\n        return getOffset(prevTransition);\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4b2b3669 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,42 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+long prevTransition = previousTransition(instantAdjusted);\n+if (prevTransition == instantAdjusted - 1L) {\n+    prevTransition = previousTransition(prevTransition);\n+}\n+long nextTransition = nextTransition(instantAdjusted);\n+if (nextTransition == instantAdjusted + 1L) {\n+    nextTransition = nextTransition(nextTransition);\n+}\n+if (getOffset(prevTransition) == offsetAdjusted &&\n+    getOffset(nextTransition) == offsetAdjusted) {\n+    return offsetAdjusted;\n+} else if (getOffset(prevTransition) < offsetAdjusted &&\n+           getOffset(nextTransition) > offsetAdjusted) {\n+    return offsetAdjusted;\n+} else if (getOffset(prevTransition) < offsetAdjusted &&\n+           getOffset(nextTransition) == offsetAdjusted) {\n+    long next2 = nextTransition(nextTransition);\n+    if (next2 == nextTransition + millisPerHour) {\n+        // Ends meet at a DST Fall back transition\n+        return offsetAdjusted;\n+    } else if (instantLocal >= nextTransition - offsetAdjusted &&\n+               next2 < instantLocal - offsetLocal) {\n+        return getOffset(nextTransition);\n+    }\n+} else if (getOffset(prevTransition) == offsetAdjusted &&\n+           getOffset(nextTransition) > offsetAdjusted) {\n+    long prev2 = previousTransition(prevTransition);\n+    if (prev2 == prevTransition - millisPerHour) {\n+        // Ends meet at a DST Spring forward transition\n+        return offsetAdjusted;\n+    } else if (instantLocal < prevTransition - offsetAdjusted &&\n+               prev2 >= instantLocal - offsetLocal) {\n+        return getOffset(prevTransition);\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}