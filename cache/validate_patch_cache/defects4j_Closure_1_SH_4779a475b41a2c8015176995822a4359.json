{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n\n      // Check for unreferenced arguments in the invocation\n      Node functionBlock = function.getLastChild();\n      for (Node caller = functionBlock.getFirstChild(); caller != null; caller = caller.getNext()) {\n        if (caller.isCall() && caller.getLastChild().hasChildren()) {\n          Node arg = caller.getLastChild().getFirstChild();\n          while (arg != null && arg.isName()) {\n            Var var = fnScope.getVar(arg.getString());\n            if (!referenced.contains(var)) {\n              // Remove the argument because it's unused\n              Node nextArg = arg.getNext();\n              caller.getLastChild().removeChild(arg);\n              compiler.reportCodeChange();\n              arg = nextArg;\n            } else {\n              arg = arg.getNext();\n            }\n          }\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e6465618 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,52 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+\n+      // Check for unreferenced arguments in the invocation\n+      Node functionBlock = function.getLastChild();\n+      for (Node caller = functionBlock.getFirstChild(); caller != null; caller = caller.getNext()) {\n+        if (caller.isCall() && caller.getLastChild().hasChildren()) {\n+          Node arg = caller.getLastChild().getFirstChild();\n+          while (arg != null && arg.isName()) {\n+            Var var = fnScope.getVar(arg.getString());\n+            if (!referenced.contains(var)) {\n+              // Remove the argument because it's unused\n+              Node nextArg = arg.getNext();\n+              caller.getLastChild().removeChild(arg);\n+              compiler.reportCodeChange();\n+              arg = nextArg;\n+            } else {\n+              arg = arg.getNext();\n+            }\n+          }\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable function is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}