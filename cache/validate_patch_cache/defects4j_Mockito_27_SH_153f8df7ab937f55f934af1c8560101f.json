{
    "patch": "MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\nMockSettings settings = Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS);\nMockitoSession mockito = Mockito.mockitoSession().initMocks(this);\nMockedConstruction mockedConstruction = Mockito.mockConstructionWithAnswer(new Answer<Object>() {\n    public Object answer(InvocationOnMock invocation) {\n        return invocation.getMock();\n    }\n});\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) settings);\nT spied = spy(mock);\nmockedConstruction.close();\nmockito.finishMocking();\n((Factory) spied).setCallbacks(new Callback[] { newFilter });",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..06cf4437b 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,22 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+MockSettings settings = Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS);\n+MockitoSession mockito = Mockito.mockitoSession().initMocks(this);\n+MockedConstruction mockedConstruction = Mockito.mockConstructionWithAnswer(new Answer<Object>() {\n+    public Object answer(InvocationOnMock invocation) {\n+        return invocation.getMock();\n+    }\n+});\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) settings);\n+T spied = spy(mock);\n+mockedConstruction.close();\n+mockito.finishMocking();\n+((Factory) spied).setCallbacks(new Callback[] { newFilter });\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}