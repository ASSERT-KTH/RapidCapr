{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1) {\n        return 1 - regularizedGammaQ(a, x, epsilon, maxIterations);\n    }\n    double term = 1 / a;\n    double sum = term;\n    int n = 1;\n    while (Math.abs(term / sum) > epsilon && n < maxIterations) {\n        term *= x / (a + n);\n        sum += term;\n        n++;\n    }\n    double result = Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n    return result;\n}\n\npublic static double regularizedGammaQ(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x < a + 1) {\n        return 1 - regularizedGammaP(a, x, epsilon, maxIterations);\n    }\n    ContinuedFraction fraction = new ContinuedFraction() {\n        @Override\n        protected double getB(int n, double x) {\n            double b;\n            if (n % 2 == 0) {\n                b = n / 2.0;\n            } else {\n                b = (n + 1) / 2.0 - a;\n            }\n            return b;\n        }\n\n        @Override\n        protected double getA(int n, double x) {\n            return 1.0;\n        }\n    };\n    double y = fraction.evaluate(x / (a + 1));\n    double result = Math.exp(-x + a * Math.log(x) - logGamma(a)) * y;\n    return result;\n}\n\npublic static double logGamma(double x) {\n    if (x <= 0.0) {\n        return Double.NaN;\n    }\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..448fc9e88 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,69 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1) {\n+        return 1 - regularizedGammaQ(a, x, epsilon, maxIterations);\n+    }\n+    double term = 1 / a;\n+    double sum = term;\n+    int n = 1;\n+    while (Math.abs(term / sum) > epsilon && n < maxIterations) {\n+        term *= x / (a + n);\n+        sum += term;\n+        n++;\n+    }\n+    double result = Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+    return result;\n+}\n+\n+public static double regularizedGammaQ(double a, double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1) {\n+        return 1 - regularizedGammaP(a, x, epsilon, maxIterations);\n+    }\n+    ContinuedFraction fraction = new ContinuedFraction() {\n+        @Override\n+        protected double getB(int n, double x) {\n+            double b;\n+            if (n % 2 == 0) {\n+                b = n / 2.0;\n+            } else {\n+                b = (n + 1) / 2.0 - a;\n+            }\n+            return b;\n+        }\n+\n+        @Override\n+        protected double getA(int n, double x) {\n+            return 1.0;\n+        }\n+    };\n+    double y = fraction.evaluate(x / (a + 1));\n+    double result = Math.exp(-x + a * Math.log(x) - logGamma(a)) * y;\n+    return result;\n+}\n+\n+public static double logGamma(double x) {\n+    if (x <= 0.0) {\n+        return Double.NaN;\n+    }\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n+            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}