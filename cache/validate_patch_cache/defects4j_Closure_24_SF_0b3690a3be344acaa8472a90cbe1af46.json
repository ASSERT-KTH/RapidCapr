{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (!n.isName()) {\n      continue;\n    }\n    Node parent = n.getParent();\n    if (parent != null && parent.isVar()) {\n      Node grandparent = parent.getParent();\n      boolean isFunction = grandparent != null && grandparent.isFunction();\n      if (isFunction) {\n        boolean isSimpleAlias = n.hasChildren() && n.getFirstChild().isQualifiedName();\n        boolean isShorthandAlias = v.getNameNode() != null && v.getNameNode().hasOneChild() && v.getNameNode().getFirstChild().isQualifiedName();\n        boolean isAlias = isSimpleAlias || isShorthandAlias;\n        if (isAlias) {\n          String name = n.getString();\n          Var aliasVar = scope.getVar(name);\n          Node value = aliasVar.getInitialValue();\n          if (value != null && value.isQualifiedName()) {\n            String qualifiedName = value.getQualifiedName();\n            aliases.put(name, aliasVar);\n            transformation.addAlias(name, qualifiedName);\n          }\n        } else if (v.isLocal()) {\n          Node func = grandparent.getFirstChild();\n          Node params = func.getSecondChild();\n          boolean isParam = NodeUtil.isNameDeclaration(params);\n          if (!isParam) {\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n          }\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..6aa11390 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,42 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (!n.isName()) {\n+      continue;\n+    }\n+    Node parent = n.getParent();\n+    if (parent != null && parent.isVar()) {\n+      Node grandparent = parent.getParent();\n+      boolean isFunction = grandparent != null && grandparent.isFunction();\n+      if (isFunction) {\n+        boolean isSimpleAlias = n.hasChildren() && n.getFirstChild().isQualifiedName();\n+        boolean isShorthandAlias = v.getNameNode() != null && v.getNameNode().hasOneChild() && v.getNameNode().getFirstChild().isQualifiedName();\n+        boolean isAlias = isSimpleAlias || isShorthandAlias;\n+        if (isAlias) {\n           String name = n.getString();\n           Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+          Node value = aliasVar.getInitialValue();\n+          if (value != null && value.isQualifiedName()) {\n+            String qualifiedName = value.getQualifiedName();\n+            aliases.put(name, aliasVar);\n+            transformation.addAlias(name, qualifiedName);\n+          }\n+        } else if (v.isLocal()) {\n+          Node func = grandparent.getFirstChild();\n+          Node params = func.getSecondChild();\n+          boolean isParam = NodeUtil.isNameDeclaration(params);\n+          if (!isParam) {\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+          }\n         }\n       }\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}