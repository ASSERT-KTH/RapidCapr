{
    "patch": "    JSType typeOfThisResolved = safeResolve(typeOfThis, t, scope);\n    if (typeOfThisResolved == null) {\n      typeOfThisResolved = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    if (typeOfThisResolved instanceof ObjectType) {\n      typeOfThis = (ObjectType) typeOfThisResolved;\n    } else {\n      throw new RuntimeException(\"typeOfThis does not resolve to an ObjectType: \" + typeOfThisResolved);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..1aef3101 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,15 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    JSType typeOfThisResolved = safeResolve(typeOfThis, t, scope);\n+    if (typeOfThisResolved == null) {\n+      typeOfThisResolved = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+    }\n+    if (typeOfThisResolved instanceof ObjectType) {\n+      typeOfThis = (ObjectType) typeOfThisResolved;\n+    } else {\n+      throw new RuntimeException(\"typeOfThis does not resolve to an ObjectType: \" + typeOfThisResolved);\n+    }\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "java.lang.RuntimeException: typeOfThis does not resolve to an ObjectType: string",
    "test_result": "FAIL"
}