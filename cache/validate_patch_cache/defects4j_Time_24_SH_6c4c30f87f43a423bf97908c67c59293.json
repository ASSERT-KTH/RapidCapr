{
    "patch": "            for (int i = 0; i < count; i++) {\n                SavedField field = savedFields[i];\n                try {\n                    millis = field.set(millis, resetFields);\n                } catch   (IllegalArgumentException e) {\n                    if (millis < field.iSavedValue) {\n                        // maximum value must be too small\n                        millis = Long.MAX_VALUE;\n                    } else if (millis > field.iSavedValue) {\n                        // minimum value must be too large\n                        millis = Long.MIN_VALUE;\n                    }\n                    for (int j = 0; j < i; j++) {\n                        millis = savedFields[j].set(millis, resetFields);\n                    }\n                    throw new IllegalArgumentException(field.iField.getName() + \" is out of range\", e);\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..bfd48947 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,24 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            for (int i = 0; i < count; i++) {\n+                SavedField field = savedFields[i];\n+                try {\n+                    millis = field.set(millis, resetFields);\n+                } catch   (IllegalArgumentException e) {\n+                    if (millis < field.iSavedValue) {\n+                        // maximum value must be too small\n+                        millis = Long.MAX_VALUE;\n+                    } else if (millis > field.iSavedValue) {\n+                        // minimum value must be too large\n+                        millis = Long.MIN_VALUE;\n+                    }\n+                    for (int j = 0; j < i; j++) {\n+                        millis = savedFields[j].set(millis, resetFields);\n+                    }\n+                    throw new IllegalArgumentException(field.iField.getName() + \" is out of range\", e);\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}