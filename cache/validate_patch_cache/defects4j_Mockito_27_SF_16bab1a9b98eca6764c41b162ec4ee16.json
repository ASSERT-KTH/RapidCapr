{
    "patch": "// create the spy object\nMyObject initializedSpy = Mockito.spy(new MyObject());\n\n// ... do some testing ...\n\n// reset the spy object\nMockito.reset(initializedSpy);\n\n// ... continue testing ...",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..c6c780538 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,16 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+// create the spy object\n+MyObject initializedSpy = Mockito.spy(new MyObject());\n+\n+// ... do some testing ...\n+\n+// reset the spy object\n+Mockito.reset(initializedSpy);\n+\n+// ... continue testing ...\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}