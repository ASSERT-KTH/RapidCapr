{
    "patch": "public class StringUtils {\n  public static boolean containsAny(final CharSequence string, final char... searchChars) {\n    if (isEmpty(string) || searchChars == null || searchChars.length == 0) {\n      return false;\n    }\n    final int len = string.length();\n    final int searchLen = searchChars.length;\n    final int endIndex = len - searchLen;\n    for (int i = 0; i <= endIndex; ++i) {\n      int j;\n      for (j = 0; j < searchLen; ++j) {\n        if (Character.isHighSurrogate(searchChars[j])) {\n          if (j + 1 < searchLen && Character.isLowSurrogate(searchChars[j + 1])) {\n            final int codePoint =\n                Character.toCodePoint(searchChars[j], searchChars[j + 1]);\n            if (string.indexOf(codePoint, i) >= 0) {\n              return true;\n            }\n          }\n        } else if (string.indexOf(searchChars[j], i) >= 0) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private static boolean isEmpty(final CharSequence cs) {\n    return cs == null || cs.length() == 0;\n  }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..fcea950d 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,37 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+  public static boolean containsAny(final CharSequence string, final char... searchChars) {\n+    if (isEmpty(string) || searchChars == null || searchChars.length == 0) {\n+      return false;\n+    }\n+    final int len = string.length();\n+    final int searchLen = searchChars.length;\n+    final int endIndex = len - searchLen;\n+    for (int i = 0; i <= endIndex; ++i) {\n+      int j;\n+      for (j = 0; j < searchLen; ++j) {\n+        if (Character.isHighSurrogate(searchChars[j])) {\n+          if (j + 1 < searchLen && Character.isLowSurrogate(searchChars[j + 1])) {\n+            final int codePoint =\n+                Character.toCodePoint(searchChars[j], searchChars[j + 1]);\n+            if (string.indexOf(codePoint, i) >= 0) {\n+              return true;\n+            }\n+          }\n+        } else if (string.indexOf(searchChars[j], i) >= 0) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  private static boolean isEmpty(final CharSequence cs) {\n+    return cs == null || cs.length() == 0;\n+  }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}