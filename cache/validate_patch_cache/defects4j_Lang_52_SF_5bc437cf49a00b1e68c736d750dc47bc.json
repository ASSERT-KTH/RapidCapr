{
    "patch": "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (str == null) {\n            return;\n        }\n        int sz;\n        sz = str.length();\n        for (int i = 0; i < sz; i++) {\n            char ch = str.charAt(i);\n\n            // handle unicode\n            if (ch > 0xfff) {\n                out.write(\"\\\\u\" + toHexString(ch));\n            } else if (ch > 0xff) {\n                out.write(\"\\\\u0\" + toHexString(ch));\n            } else if (ch > 0x7f) {\n                out.write(\"\\\\u00\" + toHexString(ch));\n            } else if (ch < 32) {\n                switch (ch) {\n                    case '\\b':\n                        out.write('\\\\');\n                        out.write('b');\n                        break;\n                    case '\\n':\n                        out.write('\\\\');\n                        out.write('n');\n                        break;\n                    case '\\t':\n                        out.write('\\\\');\n                        out.write('t');\n                        break;\n                    case '\\f':\n                        out.write('\\\\');\n                        out.write('f');\n                        break;\n                    case '\\r':\n                        out.write('\\\\');\n                        out.write('r');\n                        break;\n                    default :\n                        if (ch > 0xf) {\n                            out.write(\"\\\\u00\" + toHexString(ch));\n                        } else {\n                            out.write(\"\\\\u000\" + toHexString(ch));\n                        }\n                        break;\n                }\n            } else {\n                switch (ch) {\n                    case '\\'':\n                        if (escapeSingleQuote) {\n                          out.write('\\\\');\n                        }\n                        out.write('\\'');\n                        break;\n                    case '\"':\n                        out.write('\\\\');\n                        out.write('\"');\n                        break;\n                    case '\\\\':\n                        out.write('\\\\');\n                        out.write('\\\\');\n                        break;\n                    default :\n                        out.write(ch);\n                        break;\n                }\n            }\n        }\n}\n\nprivate static String toHexString(char ch) {\n        return Integer.toHexString(ch).toUpperCase(Locale.ENGLISH);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/StringEscapeUtils.java b/src/java/org/apache/commons/lang/StringEscapeUtils.java\nindex 4fda091d..826e164e 100644\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n@@ -168,7 +168,7 @@ public class StringEscapeUtils {\n      * @param escapeSingleQuote escapes single quotes if <code>true</code>\n      * @throws IOException if an IOException occurs\n      */\n-    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n+private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n         if (out == null) {\n             throw new IllegalArgumentException(\"The Writer must not be null\");\n         }\n@@ -182,11 +182,11 @@ public class StringEscapeUtils {\n \n             // handle unicode\n             if (ch > 0xfff) {\n-                out.write(\"\\\\u\" + hex(ch));\n+                out.write(\"\\\\u\" + toHexString(ch));\n             } else if (ch > 0xff) {\n-                out.write(\"\\\\u0\" + hex(ch));\n+                out.write(\"\\\\u0\" + toHexString(ch));\n             } else if (ch > 0x7f) {\n-                out.write(\"\\\\u00\" + hex(ch));\n+                out.write(\"\\\\u00\" + toHexString(ch));\n             } else if (ch < 32) {\n                 switch (ch) {\n                     case '\\b':\n@@ -211,9 +211,9 @@ public class StringEscapeUtils {\n                         break;\n                     default :\n                         if (ch > 0xf) {\n-                            out.write(\"\\\\u00\" + hex(ch));\n+                            out.write(\"\\\\u00\" + toHexString(ch));\n                         } else {\n-                            out.write(\"\\\\u000\" + hex(ch));\n+                            out.write(\"\\\\u000\" + toHexString(ch));\n                         }\n                         break;\n                 }\n@@ -239,7 +239,11 @@ public class StringEscapeUtils {\n                 }\n             }\n         }\n-    }\n+}\n+\n+private static String toHexString(char ch) {\n+        return Integer.toHexString(ch).toUpperCase(Locale.ENGLISH);\n+}\n \n     /**\n      * <p>Returns an upper case hexadecimal <code>String</code> for the given",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}