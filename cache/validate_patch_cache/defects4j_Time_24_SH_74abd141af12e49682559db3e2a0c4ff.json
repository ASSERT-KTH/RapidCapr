{
    "patch": "if (count > 0) {\n    // detect earliest and latest field being parsed\n    int first = Integer.MAX_VALUE;\n    int last = Integer.MIN_VALUE;\n    for (int i = 0; i < count; i++) {\n        int parsedField = savedFields[i].iField.getType();\n        if (parsedField < first) {\n            first = parsedField;\n        }\n        if (parsedField > last) {\n            last = parsedField;\n        }\n    }\n\n    // smart hocus-pocus adjustment\n    if (first == DateTimeFieldType.monthOfYear() && last >= DateTimeFieldType.dayOfMonth() ||\n            first == DateTimeFieldType.year() && last <= DateTimeFieldType.dayOfMonth()) {\n        saveField(DateTimeFieldType.year(), iDefaultYear);\n        millis = computeMillis(resetFields, text);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5d35ba8c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,27 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+if (count > 0) {\n+    // detect earliest and latest field being parsed\n+    int first = Integer.MAX_VALUE;\n+    int last = Integer.MIN_VALUE;\n+    for (int i = 0; i < count; i++) {\n+        int parsedField = savedFields[i].iField.getType();\n+        if (parsedField < first) {\n+            first = parsedField;\n+        }\n+        if (parsedField > last) {\n+            last = parsedField;\n+        }\n+    }\n+\n+    // smart hocus-pocus adjustment\n+    if (first == DateTimeFieldType.monthOfYear() && last >= DateTimeFieldType.dayOfMonth() ||\n+            first == DateTimeFieldType.year() && last <= DateTimeFieldType.dayOfMonth()) {\n+        saveField(DateTimeFieldType.year(), iDefaultYear);\n+        millis = computeMillis(resetFields, text);\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}