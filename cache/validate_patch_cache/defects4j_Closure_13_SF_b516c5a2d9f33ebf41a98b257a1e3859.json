{
    "patch": "private void traverse(Node node, int iterationCount) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      Node c = node.getFirstChild();\n      while(c != null) {\n        traverse(c, iterationCount);\n        Node next = c.getNext();\n        c = next;\n      }\n\n      visit(node);\n      visits++;\n\n      if(visits + iterationCount >= 10000) {\n        throw new IllegalStateException(\"too many iterations\");\n      } \n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..17358c9c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -110,7 +110,7 @@ class PeepholeOptimizationsPass\n     compiler.removeChangeHandler(handler);\n   }\n \n-  private void traverse(Node node) {\n+private void traverse(Node node, int iterationCount) {\n     // The goal here is to avoid retraversing\n     // the entire AST to catch newly created opportunities.\n     // So we track whether a \"unit of code\" has changed,\n@@ -123,7 +123,7 @@ class PeepholeOptimizationsPass\n     do {\n       Node c = node.getFirstChild();\n       while(c != null) {\n-        traverse(c);\n+        traverse(c, iterationCount);\n         Node next = c.getNext();\n         c = next;\n       }\n@@ -131,7 +131,9 @@ class PeepholeOptimizationsPass\n       visit(node);\n       visits++;\n \n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n+      if(visits + iterationCount >= 10000) {\n+        throw new IllegalStateException(\"too many iterations\");\n+      } \n     } while (shouldRetraverse(node));\n \n     exitNode(node);",
    "result_reason": "error: method traverse in class PeepholeOptimizationsPass cannot be applied to given types;",
    "test_result": "ERROR"
}