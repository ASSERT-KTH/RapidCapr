{
    "patch": "    Map<String, Var> paramMap = new LinkedHashMap<>();\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Build a map of the function's parameters for reference purposes.\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      // Check whether the parameter is used within the function.\n      Var var = fnScope.getVar(arg.getString());\n      if (referenced.contains(var)) {\n        paramMap.put(arg.getString(), var);\n      }\n    }\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        if (!paramMap.containsKey(lastArg.getString())) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced, paramMap);\n      for (Map.Entry<String, Var> entry : paramMap.entrySet()) {\n        Node arg = getArgForParam(argList, entry.getKey());\n        if (!referenced.contains(entry.getValue()) && arg != null) {\n          arg.detach();\n          compiler.reportCodeChange();\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6a39d9d9 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,50 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Map<String, Var> paramMap = new LinkedHashMap<>();\n+\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Build a map of the function's parameters for reference purposes.\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      // Check whether the parameter is used within the function.\n+      Var var = fnScope.getVar(arg.getString());\n+      if (referenced.contains(var)) {\n+        paramMap.put(arg.getString(), var);\n+      }\n+    }\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        if (!paramMap.containsKey(lastArg.getString())) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced, paramMap);\n+      for (Map.Entry<String, Var> entry : paramMap.entrySet()) {\n+        Node arg = getArgForParam(argList, entry.getKey());\n+        if (!referenced.contains(entry.getValue()) && arg != null) {\n+          arg.detach();\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}