{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    String str = text.substring(position);\n    int strLen = str.length();\n    for (String id : ALL_IDS) {\n        int idLen = id.length();\n        int idx = str.indexOf(id);\n        while (idx >= 0) {\n            boolean valid = true;\n            // check if id starts at the beginning of the string or after whitespace\n            if (idx != 0 && !Character.isWhitespace(str.charAt(idx - 1))) {\n                valid = false;\n            }\n            // check if there is whitespace or / after id\n            if ((idx + idLen != strLen) && !Character.isWhitespace(str.charAt(idx + idLen)) && str.charAt(idx + idLen) != '/') {\n                valid = false;\n            }\n            // check that the id is not part of a longer time zone ID\n            if (idx + idLen < strLen && (Character.isLetterOrDigit(str.charAt(idx + idLen)) || str.charAt(idx + idLen) == '_')) {\n                valid = false;\n            }\n            if (valid) {\n                bucket.setZone(DateTimeZone.forID(id));\n                return position + idx + idLen;\n            }\n            idx = str.indexOf(id, idx + 1);\n        }\n    }\n    return ~position;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..f3fdd64c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,16 +2537,35 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n-                }\n-            }\n-            return ~position;\n-        }\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    String str = text.substring(position);\n+    int strLen = str.length();\n+    for (String id : ALL_IDS) {\n+        int idLen = id.length();\n+        int idx = str.indexOf(id);\n+        while (idx >= 0) {\n+            boolean valid = true;\n+            // check if id starts at the beginning of the string or after whitespace\n+            if (idx != 0 && !Character.isWhitespace(str.charAt(idx - 1))) {\n+                valid = false;\n+            }\n+            // check if there is whitespace or / after id\n+            if ((idx + idLen != strLen) && !Character.isWhitespace(str.charAt(idx + idLen)) && str.charAt(idx + idLen) != '/') {\n+                valid = false;\n+            }\n+            // check that the id is not part of a longer time zone ID\n+            if (idx + idLen < strLen && (Character.isLetterOrDigit(str.charAt(idx + idLen)) || str.charAt(idx + idLen) == '_')) {\n+                valid = false;\n+            }\n+            if (valid) {\n+                bucket.setZone(DateTimeZone.forID(id));\n+                return position + idx + idLen;\n+            }\n+            idx = str.indexOf(id, idx + 1);\n+        }\n+    }\n+    return ~position;\n+}\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}