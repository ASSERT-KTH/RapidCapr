{
    "patch": "public static double getTypedPercent(JsonNode js) {\n    double total = 0;\n    double count = 0;\n    for (JsonNode node : js) {\n        if (node.has(\"type\")) {\n            count++;\n            if (node.get(\"type\").asText().equals(\"typed\")) {\n                total++;\n            }\n        }\n    }\n    return (count == 0) ? 100.0 : (total / count) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..dd4bf812 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonNode js) {\n+    double total = 0;\n+    double count = 0;\n+    for (JsonNode node : js) {\n+        if (node.has(\"type\")) {\n+            count++;\n+            if (node.get(\"type\").asText().equals(\"typed\")) {\n+                total++;\n+            }\n+        }\n+    }\n+    return (count == 0) ? 100.0 : (total / count) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}