{
    "patch": "import org.mockito.cglib.proxy.Factory;\nimport org.mockito.cglib.proxy.MethodInterceptor;\nimport org.mockito.cglib.proxy.MethodInterceptorFilter;\nimport org.mockito.cglib.proxy.MethodProxy;\nimport org.mockito.internal.creation.MockSettingsImpl;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.listeners.InvocationListener;\nimport org.mockito.listeners.MethodInvocationReport;\n\nimport java.lang.reflect.Method;\n\npublic class ResetMock {\n\n    public static <T> void resetMock(T mock, InvocationListener invocationListener) {\n        MockHandler<T> mockHandler = getMockHandler(mock);\n        MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        int factoryCallbackCount = ((Factory) mock).getCallbackCount();\n        for (int i = 0; i < factoryCallbackCount; i++) {\n            if (((Factory) mock).getCallback(i) instanceof MethodInterceptor) {\n                ((Factory) mock).setCallback(i, filter);\n            }\n        }\n\n        mockHandler.addInvocationListener(invocationListener);\n    }\n\n    private static class MockHandler<T> implements MethodInterceptor {\n        private final MockHandlerInterface<T> delegate;\n        private InvocationListener invocationListener;\n\n        MockHandler(MockHandlerInterface<T> delegate) {\n            this.delegate = delegate;\n        }\n\n        @Override\n        public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n            MethodInvocationReport report = getInvocationReport(object, method, args);\n            Object result;\n            try {\n                result = delegate.handle(report);\n            } catch (Throwable throwable) {\n                report.setThrowable(throwable);\n                throw throwable;\n            } finally {\n                invocationListener.reportInvocation(report);\n            }\n            report.setResult(result);\n            return result;\n        }\n\n        private MethodInvocationReport getInvocationReport(Object object, Method method, Object[] args) {\n            return new MethodInvocationReport() {\n                private Throwable throwable;\n                private Object result;\n\n                @Override\n                public Throwable getThrowable() {\n                    return throwable;\n                }\n\n                @Override\n                public void setThrowable(Throwable throwable) {\n                    this.throwable = throwable;\n                }\n\n                @Override\n                public Object getResult() {\n                    return result;\n                }\n\n                @Override\n                public void setResult(Object result) {\n                    this.result = result;\n                }\n\n                @Override\n                public InvocationOnMock getInvocation() {\n                    return org.mockito.internal.invocation.InvocationBuilder.forCallTo(method).inLocation(object.getClass()).withArguments(args).build();\n                }\n            };\n        }\n\n        public void addInvocationListener(InvocationListener invocationListener) {\n            this.invocationListener = invocationListener;\n        }\n    }\n\n    public interface MockHandlerInterface<T> {\n        Object handle(MethodInvocationReport report) throws Throwable;\n    }\n\n    private static <T> MockHandler<T> getMockHandler(T mock) {\n        Factory factory = (Factory) mock;\n        MockHandlerInterface<T> delegate = getMockHandlerInterface(factory);\n        return new MockHandler<>(delegate);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private static <T> MockHandlerInterface<T> getMockHandlerInterface(Factory factory) {\n        Callback[] callbacks = factory.getCallbacks();\n        for (Callback callback : callbacks) {\n            if (callback instanceof MethodInterceptor) {\n                MethodInterceptor currentInterceptor = (MethodInterceptor) callback;\n                if (currentInterceptor.getCallback(0) instanceof InvocationHandlerAdapter) {\n                    InvocationHandlerAdapter invocationHandlerAdapter = (InvocationHandlerAdapter) currentInterceptor.getCallback(0);\n                    MockMethodInterceptor mockMethodInterceptor = (MockMethodInterceptor) invocationHandlerAdapter.getDelegate();\n                    return (MockHandlerInterface<T>) mockMethodInterceptor.getMockHandler();\n                }\n            }\n        }\n        throw new AssertionError(\"Cannot find callback for mock\");\n    }\n\n    private static class InvocationHandlerAdapter implements MethodInterceptor, Factory {\n        private final MethodInterceptor delegate;\n\n        InvocationHandlerAdapter(MethodInterceptor delegate) {\n            this.delegate = delegate;\n        }\n\n        @Override\n        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n            return delegate.intercept(obj, method, args, proxy);\n        }\n\n        @Override\n        public Object newInstance(Callback callback) {\n            return new InvocationHandlerAdapter((MethodInterceptor) callback);\n        }\n\n        @Override\n        public Object newInstance(Callback[] callbacks) {\n            for (Callback callback : callbacks) {\n                if (callback instanceof MethodInterceptor) {\n                    return new InvocationHandlerAdapter((MethodInterceptor) callback);\n                }\n            }\n            throw new AssertionError(\"Cannot find callback for mock\");\n        }\n\n        @Override\n        public Object newInstance(Class<?>[] interfaces) {\n            throw new UnsupportedOperationException(\"Not implemented\");\n        }\n    }\n\n    private static class MockMethodInterceptor implements MethodInterceptor {\n        private final MockHandlerInterface<?> mockHandler;\n\n        MockMethodInterceptor(MockHandlerInterface<?> mockHandler) {\n            this.mockHandler = mockHandler;\n        }\n\n        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n            MethodInvocationReport report = new MethodInvocationReport() {\n                private Throwable throwable;\n                private Object result;\n\n                @Override\n                public Throwable getThrowable() {\n                    return throwable;\n                }\n\n                @Override\n                public void setThrowable(Throwable throwable) {\n                    this.throwable = throwable;\n                }\n\n                @Override\n                public Object getResult() {\n                    return result;\n                }\n\n                @Override\n                public void setResult(Object result) {\n                    this.result = result;\n                }\n\n                @Override\n                public InvocationOnMock getInvocation() {\n                    return org.mockito.internal.invocation.InvocationBuilder.forCallTo(method).inLocation(obj.getClass()).withArguments(args).build();\n                }\n            };\n\n            Object result;\n            try {\n                result = mockHandler.handle(report);\n            } catch (Throwable throwable) {\n                report.setThrowable(throwable);\n                throw throwable;\n            }\n            report.setResult(result);\n            return result;\n        }\n\n        public MockHandlerInterface<?> getMockHandler() {\n            return mockHandler;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..282968982 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,207 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.cglib.proxy.Factory;\n+import org.mockito.cglib.proxy.MethodInterceptor;\n+import org.mockito.cglib.proxy.MethodInterceptorFilter;\n+import org.mockito.cglib.proxy.MethodProxy;\n+import org.mockito.internal.creation.MockSettingsImpl;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.listeners.InvocationListener;\n+import org.mockito.listeners.MethodInvocationReport;\n+\n+import java.lang.reflect.Method;\n+\n+public class ResetMock {\n+\n+    public static <T> void resetMock(T mock, InvocationListener invocationListener) {\n+        MockHandler<T> mockHandler = getMockHandler(mock);\n+        MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        int factoryCallbackCount = ((Factory) mock).getCallbackCount();\n+        for (int i = 0; i < factoryCallbackCount; i++) {\n+            if (((Factory) mock).getCallback(i) instanceof MethodInterceptor) {\n+                ((Factory) mock).setCallback(i, filter);\n+            }\n+        }\n+\n+        mockHandler.addInvocationListener(invocationListener);\n+    }\n+\n+    private static class MockHandler<T> implements MethodInterceptor {\n+        private final MockHandlerInterface<T> delegate;\n+        private InvocationListener invocationListener;\n+\n+        MockHandler(MockHandlerInterface<T> delegate) {\n+            this.delegate = delegate;\n+        }\n+\n+        @Override\n+        public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n+            MethodInvocationReport report = getInvocationReport(object, method, args);\n+            Object result;\n+            try {\n+                result = delegate.handle(report);\n+            } catch (Throwable throwable) {\n+                report.setThrowable(throwable);\n+                throw throwable;\n+            } finally {\n+                invocationListener.reportInvocation(report);\n+            }\n+            report.setResult(result);\n+            return result;\n+        }\n+\n+        private MethodInvocationReport getInvocationReport(Object object, Method method, Object[] args) {\n+            return new MethodInvocationReport() {\n+                private Throwable throwable;\n+                private Object result;\n+\n+                @Override\n+                public Throwable getThrowable() {\n+                    return throwable;\n+                }\n+\n+                @Override\n+                public void setThrowable(Throwable throwable) {\n+                    this.throwable = throwable;\n+                }\n+\n+                @Override\n+                public Object getResult() {\n+                    return result;\n+                }\n+\n+                @Override\n+                public void setResult(Object result) {\n+                    this.result = result;\n+                }\n+\n+                @Override\n+                public InvocationOnMock getInvocation() {\n+                    return org.mockito.internal.invocation.InvocationBuilder.forCallTo(method).inLocation(object.getClass()).withArguments(args).build();\n+                }\n+            };\n+        }\n+\n+        public void addInvocationListener(InvocationListener invocationListener) {\n+            this.invocationListener = invocationListener;\n+        }\n+    }\n+\n+    public interface MockHandlerInterface<T> {\n+        Object handle(MethodInvocationReport report) throws Throwable;\n+    }\n+\n+    private static <T> MockHandler<T> getMockHandler(T mock) {\n+        Factory factory = (Factory) mock;\n+        MockHandlerInterface<T> delegate = getMockHandlerInterface(factory);\n+        return new MockHandler<>(delegate);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> MockHandlerInterface<T> getMockHandlerInterface(Factory factory) {\n+        Callback[] callbacks = factory.getCallbacks();\n+        for (Callback callback : callbacks) {\n+            if (callback instanceof MethodInterceptor) {\n+                MethodInterceptor currentInterceptor = (MethodInterceptor) callback;\n+                if (currentInterceptor.getCallback(0) instanceof InvocationHandlerAdapter) {\n+                    InvocationHandlerAdapter invocationHandlerAdapter = (InvocationHandlerAdapter) currentInterceptor.getCallback(0);\n+                    MockMethodInterceptor mockMethodInterceptor = (MockMethodInterceptor) invocationHandlerAdapter.getDelegate();\n+                    return (MockHandlerInterface<T>) mockMethodInterceptor.getMockHandler();\n+                }\n+            }\n+        }\n+        throw new AssertionError(\"Cannot find callback for mock\");\n+    }\n+\n+    private static class InvocationHandlerAdapter implements MethodInterceptor, Factory {\n+        private final MethodInterceptor delegate;\n+\n+        InvocationHandlerAdapter(MethodInterceptor delegate) {\n+            this.delegate = delegate;\n+        }\n+\n+        @Override\n+        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n+            return delegate.intercept(obj, method, args, proxy);\n+        }\n+\n+        @Override\n+        public Object newInstance(Callback callback) {\n+            return new InvocationHandlerAdapter((MethodInterceptor) callback);\n+        }\n+\n+        @Override\n+        public Object newInstance(Callback[] callbacks) {\n+            for (Callback callback : callbacks) {\n+                if (callback instanceof MethodInterceptor) {\n+                    return new InvocationHandlerAdapter((MethodInterceptor) callback);\n+                }\n+            }\n+            throw new AssertionError(\"Cannot find callback for mock\");\n+        }\n+\n+        @Override\n+        public Object newInstance(Class<?>[] interfaces) {\n+            throw new UnsupportedOperationException(\"Not implemented\");\n+        }\n+    }\n+\n+    private static class MockMethodInterceptor implements MethodInterceptor {\n+        private final MockHandlerInterface<?> mockHandler;\n+\n+        MockMethodInterceptor(MockHandlerInterface<?> mockHandler) {\n+            this.mockHandler = mockHandler;\n+        }\n+\n+        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n+            MethodInvocationReport report = new MethodInvocationReport() {\n+                private Throwable throwable;\n+                private Object result;\n+\n+                @Override\n+                public Throwable getThrowable() {\n+                    return throwable;\n+                }\n+\n+                @Override\n+                public void setThrowable(Throwable throwable) {\n+                    this.throwable = throwable;\n+                }\n+\n+                @Override\n+                public Object getResult() {\n+                    return result;\n+                }\n+\n+                @Override\n+                public void setResult(Object result) {\n+                    this.result = result;\n+                }\n+\n+                @Override\n+                public InvocationOnMock getInvocation() {\n+                    return org.mockito.internal.invocation.InvocationBuilder.forCallTo(method).inLocation(obj.getClass()).withArguments(args).build();\n+                }\n+            };\n+\n+            Object result;\n+            try {\n+                result = mockHandler.handle(report);\n+            } catch (Throwable throwable) {\n+                report.setThrowable(throwable);\n+                throw throwable;\n+            }\n+            report.setResult(result);\n+            return result;\n+        }\n+\n+        public MockHandlerInterface<?> getMockHandler() {\n+            return mockHandler;\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}