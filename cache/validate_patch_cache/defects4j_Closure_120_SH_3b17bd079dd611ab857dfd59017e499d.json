{
    "patch": "        if (block.isFunction) {\n          List<Reference> assignments = new ArrayList<>();\n          // Collect all assignments to the variable.\n          for (Node node : block.nodes) {\n            if (node.getType() == Token.ASSIGN) {\n              String assignTarget = NodeUtil.getStringValue(\n                  node.getFirstChild());\n              if (name.equals(assignTarget) && !isBranchTarget(node)) {\n                assignments.add(new Reference(node, this, registry));\n              }\n            }\n          }\n\n          // Check if there is only one assignment.\n          if (assignments.size() == 1) {\n            return true;\n          } else {\n            return false;\n          }\n        } else if (block.isLoop) {\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..89e126f6 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,28 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          List<Reference> assignments = new ArrayList<>();\n+          // Collect all assignments to the variable.\n+          for (Node node : block.nodes) {\n+            if (node.getType() == Token.ASSIGN) {\n+              String assignTarget = NodeUtil.getStringValue(\n+                  node.getFirstChild());\n+              if (name.equals(assignTarget) && !isBranchTarget(node)) {\n+                assignments.add(new Reference(node, this, registry));\n+              }\n+            }\n+          }\n+\n+          // Check if there is only one assignment.\n+          if (assignments.size() == 1) {\n+            return true;\n+          } else {\n+            return false;\n+          }\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}