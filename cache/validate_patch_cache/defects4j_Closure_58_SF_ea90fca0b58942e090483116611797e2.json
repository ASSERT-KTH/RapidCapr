{
    "patch": "private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n    switch (n.getType()) {\n        case Token.SCRIPT:\n        case Token.BLOCK:\n        case Token.FUNCTION:\n            return;\n\n        case Token.WHILE:\n        case Token.DO:\n        case Token.IF:\n            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n            return;\n\n        case Token.FOR:\n            if (!NodeUtil.isForIn(n)) {\n                computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n                return;\n            }\n            Node lhs = n.getFirstChild();\n            Node rhs = lhs.getNext();\n            if (NodeUtil.isVar(lhs)) {\n                // for (var x in y) { ... }\n                lhs = lhs.getLastChild();\n            }\n            // In a for-in loop, the lhs of the \"in\" operator is considered\n            // read, while the rhs is considered both read and written.\n            addToSetIfLocal(lhs, gen);\n            addToSetIfLocal(lhs, kill);\n            computeGenKill(rhs, gen, kill, conditional);\n            return;\n\n        case Token.VAR:\n            for (Node child : n.children()) {\n                if (child.hasChildren()) {\n                    if (child.getFirstChild().getType() == Token.NAME) {\n                        // a local var declaration needs to be treated as a definition\n                        addToSetIfLocal(child.getFirstChild(), gen);\n                    } else {\n                        computeGenKill(child.getFirstChild(), gen, kill, conditional);\n                        // If the VAR is not part of a larger conditional (e.g.\n                        // if (false) { var x = 3; }), add the children to the\n                        // kill set.\n                        if (!conditional) {\n                            addToSetIfLocal(child, kill);\n                        }\n                    }\n                }\n            }\n            return;\n\n        case Token.AND:\n        case Token.OR:\n            // Pessimistically, consider both sides conditional.\n            computeGenKill(n.getFirstChild(), gen, kill, true);\n            computeGenKill(n.getLastChild(), gen, kill, true);\n            // If the tree is not being considered conditionally in general,\n            // then consider the chosen side to be unconditional.\n            if (!conditional) {\n                computeGenKill(n.getFirstChild(), gen, kill, false);\n                computeGenKill(n.getLastChild(), gen, kill, false);\n            }\n            return;\n\n        case Token.HOOK:\n            computeGenKill(n.getFirstChild(), gen, kill, true);\n            computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n            computeGenKill(n.getLastChild(), gen, kill, true);\n            // If the tree is not being considered conditionally in general,\n            // then consider both sides to be unconditional.\n            if (!conditional) {\n                computeGenKill(n.getFirstChild(), gen, kill, false);\n                computeGenKill(n.getFirstChild().getNext(), gen, kill, false);\n                computeGenKill(n.getLastChild(), gen, kill, false);\n            }\n            return;\n\n        case Token.NAME:\n            if (isArgumentsName(n)) {\n                markAllParametersEscaped();\n            } else {\n                addToSetIfLocal(n, gen);\n            }\n            return;\n\n        default:\n            if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n                Node lhsNode = n.getFirstChild();\n                if (!conditional) {\n                    addToSetIfLocal(lhsNode, kill);\n                }\n                if (!NodeUtil.isAssign(n)) {\n                    addToSetIfLocal(lhsNode, gen);\n                }\n                computeGenKill(lhsNode.getNext(), gen, kill, conditional);\n            } else {\n                for (Node child : n.children()) {\n                    computeGenKill(child, gen, kill, conditional);\n                }\n            }\n            return;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..ff8c0341 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,92 +175,108 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n-      boolean conditional) {\n-\n+private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n     switch (n.getType()) {\n-      case Token.SCRIPT:\n-      case Token.BLOCK:\n-      case Token.FUNCTION:\n-        return;\n-\n-      case Token.WHILE:\n-      case Token.DO:\n-      case Token.IF:\n-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n-        return;\n-\n-      case Token.FOR:\n-        if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n-        } else {\n-          // for(x in y) {...}\n-          Node lhs = n.getFirstChild();\n-          Node rhs = lhs.getNext();\n-          if (NodeUtil.isVar(lhs)) {\n-            // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n-          }\n-            addToSetIfLocal(lhs, kill);\n+        case Token.SCRIPT:\n+        case Token.BLOCK:\n+        case Token.FUNCTION:\n+            return;\n+\n+        case Token.WHILE:\n+        case Token.DO:\n+        case Token.IF:\n+            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n+            return;\n+\n+        case Token.FOR:\n+            if (!NodeUtil.isForIn(n)) {\n+                computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n+                return;\n+            }\n+            Node lhs = n.getFirstChild();\n+            Node rhs = lhs.getNext();\n+            if (NodeUtil.isVar(lhs)) {\n+                // for (var x in y) { ... }\n+                lhs = lhs.getLastChild();\n+            }\n+            // In a for-in loop, the lhs of the \"in\" operator is considered\n+            // read, while the rhs is considered both read and written.\n             addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n-        }\n-        return;\n-\n-      case Token.VAR:\n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (c.hasChildren()) {\n-            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n+            addToSetIfLocal(lhs, kill);\n+            computeGenKill(rhs, gen, kill, conditional);\n+            return;\n+\n+        case Token.VAR:\n+            for (Node child : n.children()) {\n+                if (child.hasChildren()) {\n+                    if (child.getFirstChild().getType() == Token.NAME) {\n+                        // a local var declaration needs to be treated as a definition\n+                        addToSetIfLocal(child.getFirstChild(), gen);\n+                    } else {\n+                        computeGenKill(child.getFirstChild(), gen, kill, conditional);\n+                        // If the VAR is not part of a larger conditional (e.g.\n+                        // if (false) { var x = 3; }), add the children to the\n+                        // kill set.\n+                        if (!conditional) {\n+                            addToSetIfLocal(child, kill);\n+                        }\n+                    }\n+                }\n+            }\n+            return;\n+\n+        case Token.AND:\n+        case Token.OR:\n+            // Pessimistically, consider both sides conditional.\n+            computeGenKill(n.getFirstChild(), gen, kill, true);\n+            computeGenKill(n.getLastChild(), gen, kill, true);\n+            // If the tree is not being considered conditionally in general,\n+            // then consider the chosen side to be unconditional.\n             if (!conditional) {\n-              addToSetIfLocal(c, kill);\n+                computeGenKill(n.getFirstChild(), gen, kill, false);\n+                computeGenKill(n.getLastChild(), gen, kill, false);\n             }\n-          }\n-        }\n-        return;\n-\n-      case Token.AND:\n-      case Token.OR:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // May short circuit.\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.HOOK:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // Assume both sides are conditional.\n-        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.NAME:\n-        if (isArgumentsName(n)) {\n-          markAllParametersEscaped();\n-        } else {\n-          addToSetIfLocal(n, gen);\n-        }\n-        return;\n-\n-      default:\n-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n-          Node lhs = n.getFirstChild();\n-          if (!conditional) {\n-            addToSetIfLocal(lhs, kill);\n-          }\n-          if (!NodeUtil.isAssign(n)) {\n-            // assignments such as a += 1 reads a.\n-            addToSetIfLocal(lhs, gen);\n-          }\n-          computeGenKill(lhs.getNext(), gen, kill, conditional);\n-        } else {\n-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeGenKill(c, gen, kill, conditional);\n-          }\n-        }\n-        return;\n+            return;\n+\n+        case Token.HOOK:\n+            computeGenKill(n.getFirstChild(), gen, kill, true);\n+            computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n+            computeGenKill(n.getLastChild(), gen, kill, true);\n+            // If the tree is not being considered conditionally in general,\n+            // then consider both sides to be unconditional.\n+            if (!conditional) {\n+                computeGenKill(n.getFirstChild(), gen, kill, false);\n+                computeGenKill(n.getFirstChild().getNext(), gen, kill, false);\n+                computeGenKill(n.getLastChild(), gen, kill, false);\n+            }\n+            return;\n+\n+        case Token.NAME:\n+            if (isArgumentsName(n)) {\n+                markAllParametersEscaped();\n+            } else {\n+                addToSetIfLocal(n, gen);\n+            }\n+            return;\n+\n+        default:\n+            if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n+                Node lhsNode = n.getFirstChild();\n+                if (!conditional) {\n+                    addToSetIfLocal(lhsNode, kill);\n+                }\n+                if (!NodeUtil.isAssign(n)) {\n+                    addToSetIfLocal(lhsNode, gen);\n+                }\n+                computeGenKill(lhsNode.getNext(), gen, kill, conditional);\n+            } else {\n+                for (Node child : n.children()) {\n+                    computeGenKill(child, gen, kill, conditional);\n+                }\n+            }\n+            return;\n     }\n-  }\n+}\n \n   private void addToSetIfLocal(Node node, BitSet set) {\n     Preconditions.checkState(NodeUtil.isName(node));",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}