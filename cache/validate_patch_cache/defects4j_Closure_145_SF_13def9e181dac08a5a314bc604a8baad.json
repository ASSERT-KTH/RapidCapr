{
    "patch": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n    // For labels with block children, we need to ensure that a\n    // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n    // are skipped. \n    // Either it is an empty statement or a FUNCTION or DO with a single child that is either a BLOCK or another FUNCTION/DO.\n    Node firstChild = n.getFirstChild();\n    return firstChild == null \n        || (firstChild.getNext() == null \n            && (firstChild.getType() == Token.BLOCK || isOneExactlyFunctionOrDo(firstChild)));\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..142e8138 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -706,12 +706,14 @@ class CodeGenerator {\n    * labels).\n    */\n   private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+    // For labels with block children, we need to ensure that a\n+    // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n+    // are skipped. \n+    // Either it is an empty statement or a FUNCTION or DO with a single child that is either a BLOCK or another FUNCTION/DO.\n+    Node firstChild = n.getFirstChild();\n+    return firstChild == null \n+        || (firstChild.getNext() == null \n+            && (firstChild.getType() == Token.BLOCK || isOneExactlyFunctionOrDo(firstChild)));\n   }\n \n   /**",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){if(e1)[{function goo(){return true}}else foo()]}> but was:<function(){if(e1)[function goo(){return true}else{foo()}]}>",
    "test_result": "FAIL"
}