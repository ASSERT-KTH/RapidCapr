{
    "patch": "        if (mTimeZoneForced) {\n            TimeZone defaultTimeZone = TimeZone.getDefault();\n            calendar = new GregorianCalendar(mTimeZone);\n            calendar.setTimeInMillis(calendar.getTimeInMillis() + defaultTimeZone.getOffset(calendar.getTimeInMillis()) - mTimeZone.getOffset(calendar.getTimeInMillis()));\n            calendar.set(Calendar.MILLISECOND, 0);\n            calendar.set(Calendar.ZONE_OFFSET, 0);\n            calendar.set(Calendar.DST_OFFSET, 0);\n        }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..0478eb1b 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -869,6 +869,14 @@ public class FastDateFormat extends Format {\n      */\n     public StringBuffer format(Calendar calendar, StringBuffer buf) {\n         if (mTimeZoneForced) {\n+        if (mTimeZoneForced) {\n+            TimeZone defaultTimeZone = TimeZone.getDefault();\n+            calendar = new GregorianCalendar(mTimeZone);\n+            calendar.setTimeInMillis(calendar.getTimeInMillis() + defaultTimeZone.getOffset(calendar.getTimeInMillis()) - mTimeZone.getOffset(calendar.getTimeInMillis()));\n+            calendar.set(Calendar.MILLISECOND, 0);\n+            calendar.set(Calendar.ZONE_OFFSET, 0);\n+            calendar.set(Calendar.DST_OFFSET, 0);\n+        }\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }",
    "result_reason": "junit.framework.ComparisonFailure: dateTime expected:<20[09-10-16T16:42:16].000Z> but was:<20[23-06-12T09:33:42].000Z>",
    "test_result": "FAIL"
}