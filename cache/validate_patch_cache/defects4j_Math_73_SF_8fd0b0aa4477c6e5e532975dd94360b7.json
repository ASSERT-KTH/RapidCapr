{
    "patch": "public double solve(UnivariateRealFunction f, double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    double yInitial;\n\n    if (Math.abs(yMin) < Math.abs(yMax)) {\n        double temp = min;\n        min = max;\n        max = temp;\n        temp = yMin;\n        yMin = yMax;\n        yMax = temp;\n    }\n\n    if (Math.abs(yMin) < functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n\n    yInitial = f.value(initial);\n    if (Math.abs(yInitial) < functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    if (Math.abs(yMax) < functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    if (yMin * yMax > 0) {\n        throw new IllegalArgumentException(\"Interval must bracket the root.\");\n    }\n\n    double est = initial;\n    double x = initial;\n\n    for (int iter = 0; iter < maximalIterationCount; ++iter) {\n        double oldEst = est;\n        est = x;\n\n        if (Math.abs(yMin) < Math.abs(yMax)) {\n            x = min;\n            double fac = yMin / yMax;\n            est = x + fac * (est - x);\n        } else {\n            x = max;\n            double fac = yMax / yMin;\n            est = x - fac * (x - est);\n        }\n\n        double yEst = f.value(est);\n\n        if (Math.abs(yEst) <= functionValueAccuracy) {\n            setResult(est, iter);\n            return result;\n        }\n\n        boolean accept;\n        if (yEst * yMin < 0) {\n            max = est;\n            yMax = yEst;\n            accept = (Math.abs(yMax) < Math.abs(yMax));\n        } else if (yEst * yMax < 0) {\n            min = est;\n            yMin = yEst;\n            accept = (Math.abs(yMin) < Math.abs(yMax));\n        } else {\n            setResult(est, iter);\n            return result;\n        }\n\n        if (accept) {\n            x = est;\n        } else {\n            x = oldEst;\n            yInitial = f.value(x);\n        }\n\n        if (Math.abs(yInitial) < functionValueAccuracy) {\n            setResult(x, iter);\n            return result;\n        }\n    }\n    throw new MaxIterationsExceededException(maximalIterationCount);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..f4ee89842 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,49 +95,97 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+    double yInitial;\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+    if (Math.abs(yMin) < Math.abs(yMax)) {\n+        double temp = min;\n+        min = max;\n+        max = temp;\n+        temp = yMin;\n+        yMin = yMax;\n+        yMax = temp;\n+    }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n+    if (Math.abs(yMin) < functionValueAccuracy) {\n+        setResult(min, 0);\n+        return result;\n+    }\n+\n+    yInitial = f.value(initial);\n+    if (Math.abs(yInitial) < functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n+    }\n+\n+    if (Math.abs(yMax) < functionValueAccuracy) {\n+        setResult(max, 0);\n+        return result;\n+    }\n+\n+    if (yMin * yMax > 0) {\n+        throw new IllegalArgumentException(\"Interval must bracket the root.\");\n+    }\n+\n+    double est = initial;\n+    double x = initial;\n+\n+    for (int iter = 0; iter < maximalIterationCount; ++iter) {\n+        double oldEst = est;\n+        est = x;\n+\n+        if (Math.abs(yMin) < Math.abs(yMax)) {\n+            x = min;\n+            double fac = yMin / yMax;\n+            est = x + fac * (est - x);\n+        } else {\n+            x = max;\n+            double fac = yMax / yMin;\n+            est = x - fac * (x - est);\n         }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n+        double yEst = f.value(est);\n+\n+        if (Math.abs(yEst) <= functionValueAccuracy) {\n+            setResult(est, iter);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n+        boolean accept;\n+        if (yEst * yMin < 0) {\n+            max = est;\n+            yMax = yEst;\n+            accept = (Math.abs(yMax) < Math.abs(yMax));\n+        } else if (yEst * yMax < 0) {\n+            min = est;\n+            yMin = yEst;\n+            accept = (Math.abs(yMin) < Math.abs(yMax));\n+        } else {\n+            setResult(est, iter);\n+            return result;\n         }\n \n+        if (accept) {\n+            x = est;\n+        } else {\n+            x = oldEst;\n+            yInitial = f.value(x);\n+        }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n-\n+        if (Math.abs(yInitial) < functionValueAccuracy) {\n+            setResult(x, iter);\n+            return result;\n+        }\n     }\n+    throw new MaxIterationsExceededException(maximalIterationCount);\n+}\n \n     /**\n      * Find a zero in the given interval.",
    "result_reason": "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (100) exceeded",
    "test_result": "FAIL"
}