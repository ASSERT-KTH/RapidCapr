{
    "patch": "void add(String newcode) {\n    maybeEndStatement();\n\n    if (newcode.length() == 0) {\n      return;\n    }\n\n    char lastChar = getLastChar();\n    char newChar = newcode.charAt(0);\n\n    if (lastChar == '/') {\n      if (newChar == '/') {\n        // Do not allow a forward slash to appear after a DIV.\n        // For example, REGEXP DIV REGEXP is valid and should print like / // / /\n        append(\" \");\n      } else if (newChar == '*' && newcode.length() > 1 && newcode.charAt(1) == '/') {\n        // Avoid having a closing multi-line comment \"*/\" come right after opening \"/*\".\n        // This is necessary to avoid empty lines between the comment symbols.\n        // For example, \"/* One *//* Two */\" should print without empty lines like \"/* One *//* Two */\"\n        append(\" \");\n      }\n    } else if ((isWordChar(newChar) || newChar == '\\\\') && isWordChar(lastChar)) {\n      // Need space to separate. This is not pretty printing.\n      // For example: \"return foo;\"\n      append(\" \");\n    }\n\n    append(newcode);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 47556652..f41fd83d 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -178,28 +178,35 @@ abstract class CodeConsumer {\n   void endCaseBody() {\n   }\n \n-  void add(String newcode) {\n+void add(String newcode) {\n     maybeEndStatement();\n \n     if (newcode.length() == 0) {\n       return;\n     }\n \n-    char c = newcode.charAt(0);\n-    if ((isWordChar(c) || c == '\\\\') &&\n-        isWordChar(getLastChar())) {\n-      // need space to separate. This is not pretty printing.\n+    char lastChar = getLastChar();\n+    char newChar = newcode.charAt(0);\n+\n+    if (lastChar == '/') {\n+      if (newChar == '/') {\n+        // Do not allow a forward slash to appear after a DIV.\n+        // For example, REGEXP DIV REGEXP is valid and should print like / // / /\n+        append(\" \");\n+      } else if (newChar == '*' && newcode.length() > 1 && newcode.charAt(1) == '/') {\n+        // Avoid having a closing multi-line comment \"*/\" come right after opening \"/*\".\n+        // This is necessary to avoid empty lines between the comment symbols.\n+        // For example, \"/* One *//* Two */\" should print without empty lines like \"/* One *//* Two */\"\n+        append(\" \");\n+      }\n+    } else if ((isWordChar(newChar) || newChar == '\\\\') && isWordChar(lastChar)) {\n+      // Need space to separate. This is not pretty printing.\n       // For example: \"return foo;\"\n       append(\" \");\n-      // Do not allow a forward slash to appear after a DIV.\n-      // For example,\n-      // REGEXP DIV REGEXP\n-      // is valid and should print like\n-      // / // / /\n     }\n \n     append(newcode);\n-  }\n+}\n \n   void appendOp(String op, boolean binOp) {\n     append(op);",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}