{
    "patch": "public static double getTypedPercent(String[][] arr) {\n    int total = 0;\n    int typed = 0;\n    for (String[] innerArr : arr) {\n        for (String val : innerArr) {\n            total++;\n            if (val != null && !val.equals(\"\")) {\n                typed++;\n            }\n        }\n    }\n    return (double) typed / total * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..6e35c28c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String[][] arr) {\n+    int total = 0;\n+    int typed = 0;\n+    for (String[] innerArr : arr) {\n+        for (String val : innerArr) {\n+            total++;\n+            if (val != null && !val.equals(\"\")) {\n+                typed++;\n+            }\n+        }\n+    }\n+    return (double) typed / total * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}