{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values.clone();\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        int[] newValues = values.clone();\n        addImpl(partial, fieldIndex, newValues, valueToAdd);\n        // month is largest field and being added to, such as month-day\n        if (fieldIndex <= DateTimeFieldType.monthOfYear().getFieldIndex() &&\n                DateTimeFieldType.dayOfMonth().isSupported(partial)) {\n            // recalculate day-of-month, preserving time-of-day\n            int year = newValues[DateTimeFieldType.year().getFieldIndex()];\n            int month = newValues[DateTimeFieldType.monthOfYear().getFieldIndex()];\n            int day = newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n            try {\n                int maxDay = iChronology.dayOfMonth().getMaximumValue(year, month);\n                day = Math.min(day, maxDay);\n            } catch (IllegalArgumentException e) {\n                // year/month combination is invalid\n                // ignore and use computed day after month added\n            }\n            newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = day;\n        }\n        return newValues;\n    }\n    // Let the superclass handle non-contiguous partials\n    return super.add(partial, fieldIndex, values, valueToAdd);\n}\n \nprivate void addImpl(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    DurationField fieldDuration = partial.getField(fieldIndex).getDurationField();\n    long instant = 0L;\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        DurationField loopFieldDuration = partial.getField(i).getDurationField();\n        int loopValue;\n        if (i == fieldIndex) {\n            loopValue = fieldDuration.addWrapPartial(values[i], valueToAdd);\n        } else {\n            loopValue = values[i];\n        }\n        instant = partial.getFieldType(i).getField(iChronology).set(instant, loopValue);\n        if (loopFieldDuration != null && loopFieldDuration.isPrecise()) {\n            instant = loopFieldDuration.add(instant, loopValue);\n        }\n    }\n    // Provide a duration based on the original instant and new instant.\n    DurationField resultDuration = partial.getField(fieldIndex).getRangeDurationField();\n    if (resultDuration == null) {\n        // Inexact result, but we can use equality of the values to get the duration\n        int[] result = iChronology.get(partial, instant);\n        for (int i = 0; i < values.length; i++) {\n            if (values[i] != result[i]) {\n                resultDuration = fieldDuration;\n                break;\n            }\n        }\n        if (resultDuration == null) {\n            resultDuration = DurationFieldType.days().getField(iChronology);\n        }\n    }\n    values[fieldIndex] = iChronology.add(instant, valueToAdd) - instant;\n    // Make sure the same values are returned if the partial is queried twice\n    if (resultDuration.getField(iChronology).getType() == DurationFieldType.months() &&\n            DateTimeFieldType.year().isSupported(partial)) {\n        int year = values[DateTimeFieldType.year().getFieldIndex()];\n        int month = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n        if (iChronology.yearMonth(year, month).equals(partial)) {\n            return;\n        }\n    } else if (resultDuration.getField(iChronology).isSupported()) {\n        int value = values[fieldIndex];\n        if (iChronology.getField(fieldIndex).getDurationField().getType() ==\n                DurationFieldType.months()) {\n            // Adjust for number of days in previous month\n            int year = values[DateTimeFieldType.year().getFieldIndex()];\n            int month = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n            int prevMonthDays = iChronology.dayOfMonth().\n            getMaximumValue(iChronology.monthOfYear().\n            set(iChronology.setYearMonth(year, month), month - 1));\n            if (value > prevMonthDays) {\n                // Move to last day of previous month\n                value = prevMonthDays;\n            }\n        }\n        long instant2 = instant + resultDuration.add(0, value);\n        if (instant2 <= instant) {\n            // Date is unbounded, or at least will get earlier instead of later\n            return;\n        }\n        long end = iChronology.add(instant, valueToAdd);\n        if (instant2 > end) {\n            // Date is unbounded, or at least will get later instead of earlier\n            return;\n        }\n    }\n    // Modify values to be consistent with new instant\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        if (i != fieldIndex) {\n            while (true) {\n                DurationField loopFieldDuration = partial.getField(i).getDurationField();\n                long loopDuration;\n                if (loopFieldDuration == null || !loopFieldDuration.isPrecise()) {\n                    loopDuration = 1L;\n                } else {\n                    loopDuration = loopFieldDurationUnit.getField(iChronology).getUnitMillis();\n                }\n                int[] range = partial.getField(i).getDurationField().getRange(iChronology).get(instant);\n                int value = values[i];\n                if (range[0] == range[1]) {\n                    break;\n                }\n                long loopStart = iChronology.getDateTimeMillis(value, range[0], 1, 0);\n                long loopEnd = iChronology.getDateTimeMillis(value, range[1], 1, 0);\n                long loopWhole = loopEnd - loopStart;\n                long loopEnd2 = loopEnd;\n                if (instant < loopStart) {\n                    loopEnd2 = loopStart;\n                }\n                long diff = (instant2 - instant) / loopDuration;\n                if (loopEnd2 + (diff * loopWhole) > end) {\n                    break;\n                }\n                instant = loopEnd2;\n                if (i == DateTimeFieldType.monthOfYear().getFieldIndex()) {\n                    // Special case month adding when crossing year\n                    int year = values[DateTimeFieldType.year().getFieldIndex()];\n                    int month = values[i];\n                    MutableDateTime mdt = new MutableDateTime(year, month, 1, 0, 0, 0, 0, iChronology);\n                    instant = mdt.addMonths(valueToAdd).getMillis();\n                    year = iChronology.year().get(instant);\n                    month = iChronology.monthOfYear().get(instant);\n                    if (year != values[DateTimeFieldType.year().getFieldIndex()] ||\n                            month != values[DateTimeFieldType.monthOfYear().getFieldIndex()]) {\n                        values[DateTimeFieldType.year().getFieldIndex()] = year;\n                        values[DateTimeFieldType.monthOfYear().getFieldIndex()] = month;\n                        addImpl(partial, DateTimeFieldType.year().getFieldIndex(), values, 0);\n                        continue;\n                    }\n                } else {\n                    value = iChronology.get(partial, instant)[i];\n                }\n                value += (int) diff;\n                range = partial.getField(i).getDurationField().getRange(iChronology).get(instant);\n                value = (value - range[0]) % (range[1] - range[0]);\n                if (value < 0) {\n                    value += (range[1] - range[0]);\n                }\n                values[i] = value + range[0];\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..208c20a4 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,160 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values.clone();\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int[] newValues = values.clone();\n+        addImpl(partial, fieldIndex, newValues, valueToAdd);\n+        // month is largest field and being added to, such as month-day\n+        if (fieldIndex <= DateTimeFieldType.monthOfYear().getFieldIndex() &&\n+                DateTimeFieldType.dayOfMonth().isSupported(partial)) {\n+            // recalculate day-of-month, preserving time-of-day\n+            int year = newValues[DateTimeFieldType.year().getFieldIndex()];\n+            int month = newValues[DateTimeFieldType.monthOfYear().getFieldIndex()];\n+            int day = newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n+            try {\n+                int maxDay = iChronology.dayOfMonth().getMaximumValue(year, month);\n+                day = Math.min(day, maxDay);\n+            } catch (IllegalArgumentException e) {\n+                // year/month combination is invalid\n+                // ignore and use computed day after month added\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = day;\n+        }\n+        return newValues;\n+    }\n+    // Let the superclass handle non-contiguous partials\n+    return super.add(partial, fieldIndex, values, valueToAdd);\n+}\n+ \n+private void addImpl(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    DurationField fieldDuration = partial.getField(fieldIndex).getDurationField();\n+    long instant = 0L;\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        DurationField loopFieldDuration = partial.getField(i).getDurationField();\n+        int loopValue;\n+        if (i == fieldIndex) {\n+            loopValue = fieldDuration.addWrapPartial(values[i], valueToAdd);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            loopValue = values[i];\n+        }\n+        instant = partial.getFieldType(i).getField(iChronology).set(instant, loopValue);\n+        if (loopFieldDuration != null && loopFieldDuration.isPrecise()) {\n+            instant = loopFieldDuration.add(instant, loopValue);\n+        }\n+    }\n+    // Provide a duration based on the original instant and new instant.\n+    DurationField resultDuration = partial.getField(fieldIndex).getRangeDurationField();\n+    if (resultDuration == null) {\n+        // Inexact result, but we can use equality of the values to get the duration\n+        int[] result = iChronology.get(partial, instant);\n+        for (int i = 0; i < values.length; i++) {\n+            if (values[i] != result[i]) {\n+                resultDuration = fieldDuration;\n+                break;\n+            }\n+        }\n+        if (resultDuration == null) {\n+            resultDuration = DurationFieldType.days().getField(iChronology);\n         }\n     }\n+    values[fieldIndex] = iChronology.add(instant, valueToAdd) - instant;\n+    // Make sure the same values are returned if the partial is queried twice\n+    if (resultDuration.getField(iChronology).getType() == DurationFieldType.months() &&\n+            DateTimeFieldType.year().isSupported(partial)) {\n+        int year = values[DateTimeFieldType.year().getFieldIndex()];\n+        int month = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n+        if (iChronology.yearMonth(year, month).equals(partial)) {\n+            return;\n+        }\n+    } else if (resultDuration.getField(iChronology).isSupported()) {\n+        int value = values[fieldIndex];\n+        if (iChronology.getField(fieldIndex).getDurationField().getType() ==\n+                DurationFieldType.months()) {\n+            // Adjust for number of days in previous month\n+            int year = values[DateTimeFieldType.year().getFieldIndex()];\n+            int month = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n+            int prevMonthDays = iChronology.dayOfMonth().\n+            getMaximumValue(iChronology.monthOfYear().\n+            set(iChronology.setYearMonth(year, month), month - 1));\n+            if (value > prevMonthDays) {\n+                // Move to last day of previous month\n+                value = prevMonthDays;\n+            }\n+        }\n+        long instant2 = instant + resultDuration.add(0, value);\n+        if (instant2 <= instant) {\n+            // Date is unbounded, or at least will get earlier instead of later\n+            return;\n+        }\n+        long end = iChronology.add(instant, valueToAdd);\n+        if (instant2 > end) {\n+            // Date is unbounded, or at least will get later instead of earlier\n+            return;\n+        }\n+    }\n+    // Modify values to be consistent with new instant\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        if (i != fieldIndex) {\n+            while (true) {\n+                DurationField loopFieldDuration = partial.getField(i).getDurationField();\n+                long loopDuration;\n+                if (loopFieldDuration == null || !loopFieldDuration.isPrecise()) {\n+                    loopDuration = 1L;\n+                } else {\n+                    loopDuration = loopFieldDurationUnit.getField(iChronology).getUnitMillis();\n+                }\n+                int[] range = partial.getField(i).getDurationField().getRange(iChronology).get(instant);\n+                int value = values[i];\n+                if (range[0] == range[1]) {\n+                    break;\n+                }\n+                long loopStart = iChronology.getDateTimeMillis(value, range[0], 1, 0);\n+                long loopEnd = iChronology.getDateTimeMillis(value, range[1], 1, 0);\n+                long loopWhole = loopEnd - loopStart;\n+                long loopEnd2 = loopEnd;\n+                if (instant < loopStart) {\n+                    loopEnd2 = loopStart;\n+                }\n+                long diff = (instant2 - instant) / loopDuration;\n+                if (loopEnd2 + (diff * loopWhole) > end) {\n+                    break;\n+                }\n+                instant = loopEnd2;\n+                if (i == DateTimeFieldType.monthOfYear().getFieldIndex()) {\n+                    // Special case month adding when crossing year\n+                    int year = values[DateTimeFieldType.year().getFieldIndex()];\n+                    int month = values[i];\n+                    MutableDateTime mdt = new MutableDateTime(year, month, 1, 0, 0, 0, 0, iChronology);\n+                    instant = mdt.addMonths(valueToAdd).getMillis();\n+                    year = iChronology.year().get(instant);\n+                    month = iChronology.monthOfYear().get(instant);\n+                    if (year != values[DateTimeFieldType.year().getFieldIndex()] ||\n+                            month != values[DateTimeFieldType.monthOfYear().getFieldIndex()]) {\n+                        values[DateTimeFieldType.year().getFieldIndex()] = year;\n+                        values[DateTimeFieldType.monthOfYear().getFieldIndex()] = month;\n+                        addImpl(partial, DateTimeFieldType.year().getFieldIndex(), values, 0);\n+                        continue;\n+                    }\n+                } else {\n+                    value = iChronology.get(partial, instant)[i];\n+                }\n+                value += (int) diff;\n+                range = partial.getField(i).getDurationField().getRange(iChronology).get(instant);\n+                value = (value - range[0]) % (range[1] - range[0]);\n+                if (value < 0) {\n+                    value += (range[1] - range[0]);\n+                }\n+                values[i] = value + range[0];\n+            }\n+        }\n+    }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}