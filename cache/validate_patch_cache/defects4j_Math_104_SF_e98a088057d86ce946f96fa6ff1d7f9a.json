{
    "patch": "import org.apache.commons.math3.special.ImmutablePair;\nimport org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.Pair;\nimport org.apache.commons.math3.util.Precision;\n\npublic class MyClass {\n    public static void main(String[] args) {\n        double a = 1.49;\n        double x = 0.62;\n        double expected = Gamma.regularizedGammaP(a, x, 10e-15);\n        double actual = incompleteLowerGamma(a, x);\n\n        if (Precision.equals(expected, actual, 10e-15)) {\n            System.out.println(\"Test passed.\");\n        } else {\n            System.out.println(\"Test failed.\");\n            System.out.println(\"Expected: \" + expected);\n            System.out.println(\"Actual: \" + actual);\n        }\n    }\n\n    public static double incompleteLowerGamma(double a, double x) {\n        double epsilon = 10e-15;\n        double sum = 1 / a;\n        double term = sum;\n        while (Math.abs(term) > epsilon * Math.abs(sum)) {\n            a++;\n            term *= x / a;\n            sum += term;\n        }\n        return sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..164275246 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,39 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.ImmutablePair;\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.Pair;\n+import org.apache.commons.math3.util.Precision;\n+\n+public class MyClass {\n+    public static void main(String[] args) {\n+        double a = 1.49;\n+        double x = 0.62;\n+        double expected = Gamma.regularizedGammaP(a, x, 10e-15);\n+        double actual = incompleteLowerGamma(a, x);\n+\n+        if (Precision.equals(expected, actual, 10e-15)) {\n+            System.out.println(\"Test passed.\");\n+        } else {\n+            System.out.println(\"Test failed.\");\n+            System.out.println(\"Expected: \" + expected);\n+            System.out.println(\"Actual: \" + actual);\n+        }\n+    }\n+\n+    public static double incompleteLowerGamma(double a, double x) {\n+        double epsilon = 10e-15;\n+        double sum = 1 / a;\n+        double term = sum;\n+        while (Math.abs(term) > epsilon * Math.abs(sum)) {\n+            a++;\n+            term *= x / a;\n+            sum += term;\n+        }\n+        return sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}