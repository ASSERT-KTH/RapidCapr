{
    "patch": "        final int maxBlockSize = 1024;\n        final int numRows = m.getRowDimension();\n        final int numCols = m.getColumnDimension();\n        final int blockSize = Math.min(numRows, maxBlockSize);\n\n        RealMatrix squareRoot = MatrixUtils.createRealMatrix(numRows, numCols);\n        for (int j = 0; j < numCols; j += blockSize) {\n            final int jEnd = Math.min(j + blockSize, numCols);\n            final RealMatrix mBlock = m.getSubMatrix(0, numRows - 1, j, jEnd - 1);\n            final CholeskyDecomposition choleskyDecomposition = new CholeskyDecomposition(mBlock);\n            final RealMatrix blockSquareRoot = choleskyDecomposition.getL();\n            squareRoot.setSubMatrix(blockSquareRoot.getData(), 0, j);\n        }\n        return squareRoot;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..225e123a8 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        final int maxBlockSize = 1024;\n+        final int numRows = m.getRowDimension();\n+        final int numCols = m.getColumnDimension();\n+        final int blockSize = Math.min(numRows, maxBlockSize);\n+\n+        RealMatrix squareRoot = MatrixUtils.createRealMatrix(numRows, numCols);\n+        for (int j = 0; j < numCols; j += blockSize) {\n+            final int jEnd = Math.min(j + blockSize, numCols);\n+            final RealMatrix mBlock = m.getSubMatrix(0, numRows - 1, j, jEnd - 1);\n+            final CholeskyDecomposition choleskyDecomposition = new CholeskyDecomposition(mBlock);\n+            final RealMatrix blockSquareRoot = choleskyDecomposition.getL();\n+            squareRoot.setSubMatrix(blockSquareRoot.getData(), 0, j);\n+        }\n+        return squareRoot;\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}