{
    "patch": "if (f0 * fx < 0) {\n    x1 = x;\n    f1 = fx;\n} else {\n    if (x == x1) {\n        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n        f0 = computeObjectiveValue(x0);\n    } else if (f1 * fx < 0){\n        x0 = x1;\n        f0 = f1;\n        x1 = x;\n        f1 = fx;\n    } else {\n        x1 = x0;\n        f1 = f0;\n        x0 = x;\n        f0 = fx;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..75301f584 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,10 +184,25 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+if (f0 * fx < 0) {\n+    x1 = x;\n+    f1 = fx;\n+} else {\n+    if (x == x1) {\n+        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+        f0 = computeObjectiveValue(x0);\n+    } else if (f1 * fx < 0){\n+        x0 = x1;\n+        f0 = f1;\n+        x1 = x;\n+        f1 = fx;\n+    } else {\n+        x1 = x0;\n+        f1 = f0;\n+        x0 = x;\n+        f0 = fx;\n+    }\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}