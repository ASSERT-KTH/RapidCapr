{
    "patch": "      \n      Node nameNode = n.getFirstChild();\n      if (nameNode != null && nameNode.getType() == Token.NAME) {\n        String name = nameNode.getString();\n        if (this.lendingContext.isPrototypeMethod(name) ||\n            this.lendingContext.isFunctionLendedToExterns(name)) {\n          return false;\n        }\n      }\n      \n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            pType == Token.VAR ||\n            pType == Token.LP ||\n            pType == Token.IF ||\n            pType == Token.FOR ||\n            pType == Token.WHILE ||",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..f2084450 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,26 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      \n+      Node nameNode = n.getFirstChild();\n+      if (nameNode != null && nameNode.getType() == Token.NAME) {\n+        String name = nameNode.getString();\n+        if (this.lendingContext.isPrototypeMethod(name) ||\n+            this.lendingContext.isFunctionLendedToExterns(name)) {\n+          return false;\n+        }\n+      }\n+      \n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+            pType == Token.VAR ||\n+            pType == Token.LP ||\n+            pType == Token.IF ||\n+            pType == Token.FOR ||\n+            pType == Token.WHILE ||\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}