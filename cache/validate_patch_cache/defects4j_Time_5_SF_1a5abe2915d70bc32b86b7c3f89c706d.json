{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long totalMillis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    totalMillis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    totalMillis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    totalMillis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    totalMillis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    totalMillis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n\n    if (type.isSupported(DurationFieldType.years()) ||\n            type.isSupported(DurationFieldType.months())) {\n        long totalMonths = totalMillis / DateTimeConstants.MILLIS_PER_MONTH;\n        int years = 0;\n        int months = 0;\n        if (totalMonths != 0) {\n            years = (int) (totalMonths / 12);\n            months = (int) (totalMonths % 12);\n            result = result.withYears(years).withMonths(months);\n            totalMillis -= years * 12 * DateTimeConstants.MILLIS_PER_MONTH;\n            totalMillis -= months * DateTimeConstants.MILLIS_PER_MONTH;\n        }\n    }\n\n    if (type.isSupported(DurationFieldType.weeks())) {\n        int weeks = (int) (totalMillis / DateTimeConstants.MILLIS_PER_WEEK);\n        result = result.withWeeks(weeks);\n        totalMillis -= weeks * DateTimeConstants.MILLIS_PER_WEEK;\n    }\n\n    if (type.isSupported(DurationFieldType.days())) {\n        int days = (int) (totalMillis / DateTimeConstants.MILLIS_PER_DAY);\n        result = result.withDays(days);\n        totalMillis -= days * DateTimeConstants.MILLIS_PER_DAY;\n    }\n\n    if (type.isSupported(DurationFieldType.hours())) {\n        int hours = (int) (totalMillis / DateTimeConstants.MILLIS_PER_HOUR);\n        result = result.withHours(hours);\n        totalMillis -= hours * DateTimeConstants.MILLIS_PER_HOUR;\n    }\n\n    if (type.isSupported(DurationFieldType.minutes())) {\n        int minutes = (int) (totalMillis / DateTimeConstants.MILLIS_PER_MINUTE);\n        result = result.withMinutes(minutes);\n        totalMillis -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n    }\n\n    if (type.isSupported(DurationFieldType.seconds())) {\n        int seconds = (int) (totalMillis / DateTimeConstants.MILLIS_PER_SECOND);\n        result = result.withSeconds(seconds);\n        totalMillis -= seconds * DateTimeConstants.MILLIS_PER_SECOND;\n    }\n\n    if (type.isSupported(DurationFieldType.millis())) {\n        result = result.withMillis((int) totalMillis);\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..590ca42e 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,66 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long totalMillis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    totalMillis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    totalMillis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    totalMillis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    totalMillis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    totalMillis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+\n+    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n+\n+    if (type.isSupported(DurationFieldType.years()) ||\n+            type.isSupported(DurationFieldType.months())) {\n+        long totalMonths = totalMillis / DateTimeConstants.MILLIS_PER_MONTH;\n+        int years = 0;\n+        int months = 0;\n+        if (totalMonths != 0) {\n+            years = (int) (totalMonths / 12);\n+            months = (int) (totalMonths % 12);\n+            result = result.withYears(years).withMonths(months);\n+            totalMillis -= years * 12 * DateTimeConstants.MILLIS_PER_MONTH;\n+            totalMillis -= months * DateTimeConstants.MILLIS_PER_MONTH;\n         }\n-        return result;\n     }\n \n+    if (type.isSupported(DurationFieldType.weeks())) {\n+        int weeks = (int) (totalMillis / DateTimeConstants.MILLIS_PER_WEEK);\n+        result = result.withWeeks(weeks);\n+        totalMillis -= weeks * DateTimeConstants.MILLIS_PER_WEEK;\n+    }\n+\n+    if (type.isSupported(DurationFieldType.days())) {\n+        int days = (int) (totalMillis / DateTimeConstants.MILLIS_PER_DAY);\n+        result = result.withDays(days);\n+        totalMillis -= days * DateTimeConstants.MILLIS_PER_DAY;\n+    }\n+\n+    if (type.isSupported(DurationFieldType.hours())) {\n+        int hours = (int) (totalMillis / DateTimeConstants.MILLIS_PER_HOUR);\n+        result = result.withHours(hours);\n+        totalMillis -= hours * DateTimeConstants.MILLIS_PER_HOUR;\n+    }\n+\n+    if (type.isSupported(DurationFieldType.minutes())) {\n+        int minutes = (int) (totalMillis / DateTimeConstants.MILLIS_PER_MINUTE);\n+        result = result.withMinutes(minutes);\n+        totalMillis -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n+    }\n+\n+    if (type.isSupported(DurationFieldType.seconds())) {\n+        int seconds = (int) (totalMillis / DateTimeConstants.MILLIS_PER_SECOND);\n+        result = result.withSeconds(seconds);\n+        totalMillis -= seconds * DateTimeConstants.MILLIS_PER_SECOND;\n+    }\n+\n+    if (type.isSupported(DurationFieldType.millis())) {\n+        result = result.withMillis((int) totalMillis);\n+    }\n+\n+    return result;\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}