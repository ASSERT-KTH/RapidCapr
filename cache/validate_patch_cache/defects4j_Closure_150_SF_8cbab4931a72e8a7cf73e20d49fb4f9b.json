{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    // Ignore root node.\n    if (n == t.getScopeRoot()) {\n        return;\n    }\n\n    switch (n.getType()) {\n        case Token.FUNCTION:\n            if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n                // Define declared function.\n                defineDeclaredFunction(n, parent);\n            }\n            break;\n        case Token.CATCH:\n            // Define catch variable.\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            // Define variables.\n            defineVar(n, parent);\n            break;\n        case Token.LP:\n            if (parent != null && NodeUtil.isFunctionExpression(parent) && parent.getParent() != null && parent.getParent().getType() != Token.ASSIGN) {\n                // Handle function inputs.\n                handleFunctionInputs(n);\n            }\n            break;\n    }\n\n    // Attach literal types.\n    attachLiteralTypes(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..578dc3bb 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,40 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    // Ignore root node.\n+    if (n == t.getScopeRoot()) {\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+    switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+            if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n+                // Define declared function.\n+                defineDeclaredFunction(n, parent);\n+            }\n+            break;\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            // Define catch variable.\n+            defineCatch(n, parent);\n+            break;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            // Define variables.\n+            defineVar(n, parent);\n+            break;\n+        case Token.LP:\n+            if (parent != null && NodeUtil.isFunctionExpression(parent) && parent.getParent() != null && parent.getParent().getType() != Token.ASSIGN) {\n+                // Handle function inputs.\n+                handleFunctionInputs(n);\n+            }\n+            break;\n     }\n \n+    // Attach literal types.\n+    attachLiteralTypes(n);\n+}\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}