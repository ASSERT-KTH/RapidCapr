{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    if (n.isFunction()) {\n        // the node is a function expression\n        FunctionNode functionNode = n.getFunction();\n        return functionNode.getName() != null && functionNode.getBody() != null;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..34b168ba 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,14 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    if (n.isFunction()) {\n+        // the node is a function expression\n+        FunctionNode functionNode = n.getFunction();\n+        return functionNode.getName() != null && functionNode.getBody() != null;\n+    }\n+    return false;\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}