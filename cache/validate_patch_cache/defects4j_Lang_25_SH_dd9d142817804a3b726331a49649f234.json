{
    "patch": "private static String unescape(String s){\n    int i=0;\n    char[] data = s.toCharArray();\n    int len = data.length;\n    char c;\n    StringBuffer sb = new StringBuffer(len);\n    boolean success = true;\n\n    while(i<len){\n        c = data[i++];\n        if (c == '\\\\') {\n            if(i<len){\n                c = data[i++];\n                switch(c){\n                    case '\\\\':\n                        sb.append('\\\\'); break;\n                    case '\\'':\n                        sb.append('\\''); break;\n                    case '\\\"':\n                        sb.append('\\\"'); break;\n                    case 'r':\n                        sb.append('\\r'); break;\n                    case 'n':\n                        sb.append('\\n'); break;\n                    case 't':\n                        sb.append('\\t'); break;\n                    case 'b': //backspace BS ('\\u0008')\n                        sb.append('\\b'); break;\n                    case 'f':\n                        sb.append('\\f'); break;\n                    case 'u':\n                        if (i + 3 < len) {\n                            int first = hexDigitToInt(data[i]);\n                            int second = hexDigitToInt(data[i + 1]);\n                            int third = hexDigitToInt(data[i + 2]);\n                            int fourth = hexDigitToInt(data[i + 3]);\n                            if (first != -1 && second != -1 && third != -1 && fourth != -1) {\n                                int hexVal = (first << 12) + (second << 8) + (third << 4) + fourth;\n                                sb.append((char)hexVal);\n                                i += 4;\n                            }else{\n                                success=false;\n                                sb.append(\"\\\\u\");\n                            }\n                        } else {\n                            success=false;\n                            sb.append(\"\\\\u\");\n                        }\n                        break;\n                    default:\n                        success=false;\n                        sb.append('\\\\').append(c); break;\n                }\n            }else{\n                success=false;\n                break;\n            }\n        }else{\n            sb.append(c);\n        }\n    }\n    assertTrue(\"One or more errors detected\",success);  //Assertion\n    return sb.toString();\n}\n\nprivate static int hexDigitToInt(char ch) {\n    if ('0' <= ch && ch <= '9') {\n        return ch - '0';\n    }\n    if ('A' <= ch && ch <= 'F') {\n        return ch - 'A' + 10;\n    }\n    if ('a' <= ch && ch <= 'f') {\n        return ch - 'a' + 10;\n    }\n    return -1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}