{
    "patch": "public String getprop(String propName, String defaultValue) {\n    String value = null;\n    try {\n        Class<?> androidOsSystemProperties = Class.forName(\"android.os.SystemProperties\");\n        Method getMethod = androidOsSystemProperties.getMethod(\"get\", String.class);\n        value = (String) getMethod.invoke(null, propName);\n    } catch (ClassNotFoundException e) {\n        fail(\"Class Not Found: \" + e.getMessage());\n    } catch (NoSuchMethodException e) {\n        fail(\"Method Not Found: \" + e.getMessage());\n    } catch (IllegalAccessException e) {\n        fail(\"Illegal Access: \" + e.getMessage());\n    } catch (InvocationTargetException e) {\n        fail(\"Invocation Target Exception: \" + e.getMessage());\n    }\n    return value != null ? value : defaultValue;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..b4b28179 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String propName, String defaultValue) {\n+    String value = null;\n+    try {\n+        Class<?> androidOsSystemProperties = Class.forName(\"android.os.SystemProperties\");\n+        Method getMethod = androidOsSystemProperties.getMethod(\"get\", String.class);\n+        value = (String) getMethod.invoke(null, propName);\n+    } catch (ClassNotFoundException e) {\n+        fail(\"Class Not Found: \" + e.getMessage());\n+    } catch (NoSuchMethodException e) {\n+        fail(\"Method Not Found: \" + e.getMessage());\n+    } catch (IllegalAccessException e) {\n+        fail(\"Illegal Access: \" + e.getMessage());\n+    } catch (InvocationTargetException e) {\n+        fail(\"Invocation Target Exception: \" + e.getMessage());\n+    }\n+    return value != null ? value : defaultValue;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}