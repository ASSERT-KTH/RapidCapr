{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final SchurTransformer st = new SchurTransformer(m);\n    final RealMatrix t = st.getT();\n    final RealMatrix u = st.getU();\n\n    // Compute the square root of the diagonal matrix using element-wise square roots\n    final int n = t.getRowDimension();\n    final double[] sqrt = new double[n];\n    for (int i = 0; i < n; i++) {\n        sqrt[i] = Math.sqrt(Math.abs(t.getEntry(i, i)));\n    }\n    final RealMatrix sqrtT = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        sqrtT.setEntry(i, i, sqrt[i]);\n    }\n\n    // Compute the square root of the matrix by multiplying the Schur vectors and the sqrtT matrix\n    final RealMatrix sqrtM = u.multiply(sqrtT).multiply(u.transpose());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..804d1aaa6 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final SchurTransformer st = new SchurTransformer(m);\n+    final RealMatrix t = st.getT();\n+    final RealMatrix u = st.getU();\n+\n+    // Compute the square root of the diagonal matrix using element-wise square roots\n+    final int n = t.getRowDimension();\n+    final double[] sqrt = new double[n];\n+    for (int i = 0; i < n; i++) {\n+        sqrt[i] = Math.sqrt(Math.abs(t.getEntry(i, i)));\n     }\n+    final RealMatrix sqrtT = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        sqrtT.setEntry(i, i, sqrt[i]);\n+    }\n+\n+    // Compute the square root of the matrix by multiplying the Schur vectors and the sqrtT matrix\n+    final RealMatrix sqrtM = u.multiply(sqrtT).multiply(u.transpose());\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}