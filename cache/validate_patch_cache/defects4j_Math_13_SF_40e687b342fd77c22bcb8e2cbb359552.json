{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    int dim = m.getRowDimension();\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix sqrt;\n    if (dec.getEigenvector(0).getEntry(0) < 0) {\n        throw new IllegalArgumentException(\"Matrix cannot be square rooted: negative eigenvalue\");\n    }\n    do {\n        try {\n            sqrt = dec.getSquareRoot();\n            break;\n        } catch (OutOfMemoryError e) {\n            dim /= 2;\n            dec = new EigenDecomposition(m.getSubMatrix(0, dim - 1, 0, dim - 1));\n        }\n    } while (true);\n    RealMatrix sqrtM = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n    sqrtM.setSubMatrix(sqrt.getData(), 0, 0);\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ecee28006 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    int dim = m.getRowDimension();\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix sqrt;\n+    if (dec.getEigenvector(0).getEntry(0) < 0) {\n+        throw new IllegalArgumentException(\"Matrix cannot be square rooted: negative eigenvalue\");\n     }\n+    do {\n+        try {\n+            sqrt = dec.getSquareRoot();\n+            break;\n+        } catch (OutOfMemoryError e) {\n+            dim /= 2;\n+            dec = new EigenDecomposition(m.getSubMatrix(0, dim - 1, 0, dim - 1));\n+        }\n+    } while (true);\n+    RealMatrix sqrtM = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+    sqrtM.setSubMatrix(sqrt.getData(), 0, 0);\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}