{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if(a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"\\'a\\' must be a positive real number and \\'x\\' must be a non-negative real number.\");\n    }\n    if(x == 0.0) { // As per definition of GammaP function\n        return 0.0;\n    }\n    Gamma gamma = new Gamma();\n    double lnGammaA = gamma.logGamma(a);\n    double term = Math.exp(-x + (a * Math.log(x)) - lnGammaA) / a;\n    double sum = term;\n    int i = 1;\n    while(i <= maxIterations) {\n        term = (term * x) / (a + i);\n        sum += term;\n        if(Math.abs(term / sum) < epsilon) {\n            return sum;\n        }\n        i++;\n    }\n    throw new IllegalStateException(\"Maximum iterations reached (\" + maxIterations + \")\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..9f6050afa 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,28 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    if(a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"\\'a\\' must be a positive real number and \\'x\\' must be a non-negative real number.\");\n+    }\n+    if(x == 0.0) { // As per definition of GammaP function\n+        return 0.0;\n+    }\n+    Gamma gamma = new Gamma();\n+    double lnGammaA = gamma.logGamma(a);\n+    double term = Math.exp(-x + (a * Math.log(x)) - lnGammaA) / a;\n+    double sum = term;\n+    int i = 1;\n+    while(i <= maxIterations) {\n+        term = (term * x) / (a + i);\n+        sum += term;\n+        if(Math.abs(term / sum) < epsilon) {\n+            return sum;\n+        }\n+        i++;\n+    }\n+    throw new IllegalStateException(\"Maximum iterations reached (\" + maxIterations + \")\");\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}