{
    "patch": "    // Gather info about which arguments are actually used.\n    final BitSet usedArgs = new BitSet(argList.getChildCount());\n    NodeTraversal.traverse(compiler, function, (NodeTraversal t, Node n, Node parent) -> {\n      if (n.isName()) {\n        String name = n.getString();\n        if (fnScope.getParent().getVar(name) != null) {\n          // argument used\n          usedArgs.set(getIndexForNameNode(n));\n        }\n      }\n    });\n\n    // Remove unused arguments from the argument list, and from callers.\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      for (Node arg : Lists.reverse(argList.children())) {\n        if (usedArgs.get(getIndexForNameNode(arg))) {\n          break;\n        }\n        argList.removeChild(arg);\n        compiler.reportCodeChange();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, usedArgs);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ef8a8d03 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,31 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Gather info about which arguments are actually used.\n+    final BitSet usedArgs = new BitSet(argList.getChildCount());\n+    NodeTraversal.traverse(compiler, function, (NodeTraversal t, Node n, Node parent) -> {\n+      if (n.isName()) {\n+        String name = n.getString();\n+        if (fnScope.getParent().getVar(name) != null) {\n+          // argument used\n+          usedArgs.set(getIndexForNameNode(n));\n+        }\n+      }\n+    });\n+\n+    // Remove unused arguments from the argument list, and from callers.\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      for (Node arg : Lists.reverse(argList.children())) {\n+        if (usedArgs.get(getIndexForNameNode(arg))) {\n+          break;\n+        }\n+        argList.removeChild(arg);\n+        compiler.reportCodeChange();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, usedArgs);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}