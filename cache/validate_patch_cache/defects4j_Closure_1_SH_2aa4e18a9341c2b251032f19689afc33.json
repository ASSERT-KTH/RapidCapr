{
    "patch": "      int numArgs = argList.getChildCount();\n      Node curArg = argList.getFirstChild();\n      for (int i = 1; i <= numArgs; i++) {\n        Var var = fnScope.getVar(curArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(curArg);\n          compiler.reportCodeChange();\n        } else {\n          curArg = curArg.getNext();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3fee6493 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,15 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      int numArgs = argList.getChildCount();\n+      Node curArg = argList.getFirstChild();\n+      for (int i = 1; i <= numArgs; i++) {\n+        Var var = fnScope.getVar(curArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(curArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          curArg = curArg.getNext();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}