{
    "patch": "    // Remove any parameters that are unreferenced.\n    Node argList = function.getSecondChild();\n    Node arg = argList.getFirstChild();\n    while (arg != null) {\n      Node nextArg = arg.getNext();\n      String argName = arg.getString();\n      if (!referencedVars.contains(argName)) {\n        // The parameter is unreferenced. Remove it.\n        argList.removeChild(arg);\n        compiler.reportCodeChange();\n        skippedVars.add(argName);\n      } else if (skippedVars.contains(argName)) {\n        // There was a skipped parameter before this one.\n        // This one can now be skipped too.\n        skippedVars.add(argName);\n      } else {\n        // This is a referenced parameter.\n        // If any parameter was skipped between this one and the previous one,\n        // then we can't remove either this one or the skipped one(s) in between.\n        skippedVars.clear();\n      }\n      arg = nextArg;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..bf327cd2 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,28 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Remove any parameters that are unreferenced.\n+    Node argList = function.getSecondChild();\n+    Node arg = argList.getFirstChild();\n+    while (arg != null) {\n+      Node nextArg = arg.getNext();\n+      String argName = arg.getString();\n+      if (!referencedVars.contains(argName)) {\n+        // The parameter is unreferenced. Remove it.\n+        argList.removeChild(arg);\n+        compiler.reportCodeChange();\n+        skippedVars.add(argName);\n+      } else if (skippedVars.contains(argName)) {\n+        // There was a skipped parameter before this one.\n+        // This one can now be skipped too.\n+        skippedVars.add(argName);\n+      } else {\n+        // This is a referenced parameter.\n+        // If any parameter was skipped between this one and the previous one,\n+        // then we can't remove either this one or the skipped one(s) in between.\n+        skippedVars.clear();\n+      }\n+      arg = nextArg;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}