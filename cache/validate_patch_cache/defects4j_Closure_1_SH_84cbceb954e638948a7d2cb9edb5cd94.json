{
    "patch": "// Strip unreferenced args off the end of the function declaration.\nNode lastArg;\nwhile ((lastArg = argList.getLastChild()) != null) {\n  Var var = fnScope.getVar(lastArg.getString());\n  if (!referenced.contains(var)) {\n    argList.removeChild(lastArg);\n    compiler.reportCodeChange();\n  } else {\n    break;\n  }\n}\n\n// Strip unreferenced args from call sites.\nNodeTraversal.traverse(compiler, function, new AbstractPostOrderCallback() {\n  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isCall() && n.getFirstChild().matchesQualifiedName(function.getString()) && n.hasMoreThanOneChild()) {\n      Node args = n.getSecondChild();\n      int numArgsBeforeOptimization = args.getChildCount();\n      Node lastArg;\n      while ((lastArg = args.getLastChild()) != null) {\n        if (!lastArg.isSpread() && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n          args.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n      int numArgsAfterOptimization = args.getChildCount();\n      if (numArgsAfterOptimization != numArgsBeforeOptimization) {\n        MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n        mark.process(t.getScopeRoot());\n      }\n    }\n  }\n});",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c986a442 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,42 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Strip unreferenced args off the end of the function declaration.\n+Node lastArg;\n+while ((lastArg = argList.getLastChild()) != null) {\n+  Var var = fnScope.getVar(lastArg.getString());\n+  if (!referenced.contains(var)) {\n+    argList.removeChild(lastArg);\n+    compiler.reportCodeChange();\n+  } else {\n+    break;\n+  }\n+}\n+\n+// Strip unreferenced args from call sites.\n+NodeTraversal.traverse(compiler, function, new AbstractPostOrderCallback() {\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.isCall() && n.getFirstChild().matchesQualifiedName(function.getString()) && n.hasMoreThanOneChild()) {\n+      Node args = n.getSecondChild();\n+      int numArgsBeforeOptimization = args.getChildCount();\n+      Node lastArg;\n+      while ((lastArg = args.getLastChild()) != null) {\n+        if (!lastArg.isSpread() && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+          args.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+      int numArgsAfterOptimization = args.getChildCount();\n+      if (numArgsAfterOptimization != numArgsBeforeOptimization) {\n+        MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n+        mark.process(t.getScopeRoot());\n+      }\n+    }\n+  }\n+});\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}