{
    "patch": "public boolean apply(Node n) {\n    // When the node is null it means, we reached the implicit return\n    // where the function returns (possibly without a return statement)\n    if (n == null) {\n        return false;\n    }\n\n    // TODO: We only care about calls to functions that\n    // pass one of the dependent variables to a non-side-effect free\n    // function.\n    if (n.isCall()) {\n        if (NodeUtil.functionCallHasSideEffects(n)) {\n            return true;\n        }\n        // Check if any dependent variable is passed to a non-side-effect free function\n        Node callee = n.getFirstChild();\n        if (callee != null) {\n            for (int i = 1; i < n.getChildCount(); i++) {\n                Node arg = n.getChildAt(i);\n                if (arg.isName() && dependentVarNames.contains(arg.getString())) {\n                    Scope scope = callee.getScope();\n                    if (scope != null) {\n                        Var var = scope.getVar(arg.getString());\n                        if (var != null && !var.isDeclaredConstant() && !var.isGlobal()) {\n                            if (apply(callee)) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n        return true;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..3a68e1f3 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -81,32 +81,51 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n   private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n     new Predicate<Node>() {\n       @Override\n-      public boolean apply(Node n) {\n-        // When the node is null it means, we reached the implicit return\n-        // where the function returns (possibly without an return statement)\n-        if (n == null) {\n-          return false;\n-        }\n+public boolean apply(Node n) {\n+    // When the node is null it means, we reached the implicit return\n+    // where the function returns (possibly without a return statement)\n+    if (n == null) {\n+        return false;\n+    }\n \n-        // TODO(user): We only care about calls to functions that\n-        // passes one of the dependent variable to a non-side-effect free\n-        // function.\n-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n-          return true;\n+    // TODO: We only care about calls to functions that\n+    // pass one of the dependent variables to a non-side-effect free\n+    // function.\n+    if (n.isCall()) {\n+        if (NodeUtil.functionCallHasSideEffects(n)) {\n+            return true;\n         }\n-\n-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n-          return true;\n+        // Check if any dependent variable is passed to a non-side-effect free function\n+        Node callee = n.getFirstChild();\n+        if (callee != null) {\n+            for (int i = 1; i < n.getChildCount(); i++) {\n+                Node arg = n.getChildAt(i);\n+                if (arg.isName() && dependentVarNames.contains(arg.getString())) {\n+                    Scope scope = callee.getScope();\n+                    if (scope != null) {\n+                        Var var = scope.getVar(arg.getString());\n+                        if (var != null && !var.isDeclaredConstant() && !var.isGlobal()) {\n+                            if (apply(callee)) {\n+                                return true;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n         }\n+    }\n \n+    if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+        return true;\n+    }\n \n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n             return true;\n-          }\n         }\n-        return false;\n-      }\n+    }\n+    return false;\n+}\n   };\n \n   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}