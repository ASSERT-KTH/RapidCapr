{
    "patch": "    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        Calendar calendarToUse = (mTimeZoneForced) ? (Calendar) calendar.clone() : calendar;\n        StringBuilder newBuf = new StringBuilder();\n        applyRules(newBuf, calendarToUse);\n        int lastIdx = newBuf.length() - 1;\n        if (newBuf.charAt(lastIdx) == mSeparator.charAt(0)) {\n            newBuf.setCharAt(lastIdx, 'Z');\n        }\n        return buf.append(newBuf);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..4ff74741 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -868,11 +868,14 @@ public class FastDateFormat extends Format {\n      * @return the specified string buffer\n      */\n     public StringBuffer format(Calendar calendar, StringBuffer buf) {\n-        if (mTimeZoneForced) {\n-            calendar = (Calendar) calendar.clone();\n-            calendar.setTimeZone(mTimeZone);\n-        }\n-        return applyRules(calendar, buf);\n+        Calendar calendarToUse = (mTimeZoneForced) ? (Calendar) calendar.clone() : calendar;\n+        StringBuilder newBuf = new StringBuilder();\n+        applyRules(newBuf, calendarToUse);\n+        int lastIdx = newBuf.length() - 1;\n+        if (newBuf.charAt(lastIdx) == mSeparator.charAt(0)) {\n+            newBuf.setCharAt(lastIdx, 'Z');\n+        }\n+        return buf.append(newBuf);\n     }\n \n     /**",
    "result_reason": "error: method applyRules in class FastDateFormat cannot be applied to given types;",
    "test_result": "ERROR"
}