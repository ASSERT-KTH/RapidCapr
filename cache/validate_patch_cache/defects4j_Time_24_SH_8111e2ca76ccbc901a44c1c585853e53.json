{
    "patch": "            if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n              int year = savedFields[i].iValue;\n              if (iChrono.year().isLeap(year)) {\n                  if (dateTimeFormatter == null) {\n                      dateTimeFormatter = ISODateTimeFormat.date();\n                  }\n                  // If the date is 29th Feb onwards, then parse reset\n                  DateTime parsedDate = dateTimeFormatter.withChronology(iChrono).parseDateTime(iDefaultYear + \"-02-29\");\n                  if (parsedDate.getYear() != iDefaultYear) {\n                      saveField(DateTimeFieldType.dayOfYear(), \"60\");\n                      saveField(DateTimeFieldType.monthOfYear(), \"2\");\n                  }\n              }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..2c1af62b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,20 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n+              int year = savedFields[i].iValue;\n+              if (iChrono.year().isLeap(year)) {\n+                  if (dateTimeFormatter == null) {\n+                      dateTimeFormatter = ISODateTimeFormat.date();\n+                  }\n+                  // If the date is 29th Feb onwards, then parse reset\n+                  DateTime parsedDate = dateTimeFormatter.withChronology(iChrono).parseDateTime(iDefaultYear + \"-02-29\");\n+                  if (parsedDate.getYear() != iDefaultYear) {\n+                      saveField(DateTimeFieldType.dayOfYear(), \"60\");\n+                      saveField(DateTimeFieldType.monthOfYear(), \"2\");\n+                  }\n+              }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}