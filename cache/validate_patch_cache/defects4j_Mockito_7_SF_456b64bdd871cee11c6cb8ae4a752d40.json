{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type[] interfaceTypes = typeVariable.getGenericInterfaces();\n    for (Type interfaceType : interfaceTypes) {\n        if (interfaceType instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) interfaceType;\n            Type[] actualTypeArgs = parameterizedType.getActualTypeArguments();\n            TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n            for (int i = 0; i < typeParameters.length; i++) {\n                if (typeVariable.equals(typeParameters[i])) {\n                    Type actualTypeArg = actualTypeArgs[i];\n                    if (actualTypeArg == null) {\n                        actualTypeArg = Object.class; // default type if actual type arg is null\n                    }\n                    return actualTypeArg;\n                }\n            }\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..656f97c35 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,27 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type[] interfaceTypes = typeVariable.getGenericInterfaces();\n+    for (Type interfaceType : interfaceTypes) {\n+        if (interfaceType instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) interfaceType;\n+            Type[] actualTypeArgs = parameterizedType.getActualTypeArguments();\n+            TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+            for (int i = 0; i < typeParameters.length; i++) {\n+                if (typeVariable.equals(typeParameters[i])) {\n+                    Type actualTypeArg = actualTypeArgs[i];\n+                    if (actualTypeArg == null) {\n+                        actualTypeArg = Object.class; // default type if actual type arg is null\n+                    }\n+                    return actualTypeArg;\n+                }\n+            }\n+        }\n+    }\n+    return null;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}