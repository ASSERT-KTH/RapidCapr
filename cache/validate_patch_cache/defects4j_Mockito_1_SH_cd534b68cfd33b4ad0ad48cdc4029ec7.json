{
    "patch": "```\nObject[] args = invocation.getRawArguments();\nfor (int i = 0; i < args.length; i++) {\n    if (matchers.size() <= i) break;\n    Matcher m = matchers.get(i);\n    if (!(m instanceof CapturesArguments)) continue;\n    if (i == args.length - 1 && m instanceof VarargMatcher) {\n        Object varArgsObj = args[i];\n        if (!(varArgsObj instanceof Object[])) {\n            ((CapturesArguments) m).captureFrom(varArgsObj);\n        } else {\n            Object[] varArgs = (Object[]) varArgsObj;\n            for (Object varArg : varArgs) {\n                ((CapturesArguments) m).captureFrom(varArg);\n            }\n        }\n    } else {\n        ((CapturesArguments) m).captureFrom(args[i]);\n    }\n}\n```",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..e254251ba 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,27 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+```\n+Object[] args = invocation.getRawArguments();\n+for (int i = 0; i < args.length; i++) {\n+    if (matchers.size() <= i) break;\n+    Matcher m = matchers.get(i);\n+    if (!(m instanceof CapturesArguments)) continue;\n+    if (i == args.length - 1 && m instanceof VarargMatcher) {\n+        Object varArgsObj = args[i];\n+        if (!(varArgsObj instanceof Object[])) {\n+            ((CapturesArguments) m).captureFrom(varArgsObj);\n+        } else {\n+            Object[] varArgs = (Object[]) varArgsObj;\n+            for (Object varArg : varArgs) {\n+                ((CapturesArguments) m).captureFrom(varArg);\n+            }\n+        }\n+    } else {\n+        ((CapturesArguments) m).captureFrom(args[i]);\n+    }\n+}\n+```\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal character: '`'",
    "test_result": "ERROR"
}