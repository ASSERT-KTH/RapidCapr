{
    "patch": "            } catch (IllegalFieldValueException e) {\n                if (resetFields) {\n                    for (int j = 0; j < iSavedFieldsCount; j++) {\n                        if (savedFields[j].isSavedField) {\n                            savedFields[j].restore();\n                        }\n                    }\n                    if (iSavedFieldsShared) {\n                        iSavedFields = (SavedField[])savedFields.clone();\n                        iSavedFieldsShared = false;\n                    }\n                }\n                SavedField failingField = e.getIllegalFieldValue();\n                int failingFieldIndex = -1;\n                for (int j = 0; j < iSavedFieldsCount; j++) {\n                    if (savedFields[j].iField == failingField.getField()) {\n                        failingFieldIndex = j;\n                        break;\n                    }\n                }\n                StringBuilder sb = new StringBuilder(256);\n                sb.append(\"Cannot parse \\\"\").append(text).append(\"\\\": \");\n                if (failingFieldIndex >= 0) {\n                    sb.append(savedFields[failingFieldIndex].iText);\n                    sb.append(\" (\").append(failingField.getFieldName()).append(')');\n                } else {\n                    sb.append(e.getMessage());\n                }\n                throw new IllegalArgumentException(sb.toString(), e);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e3f7a9df 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,36 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            } catch (IllegalFieldValueException e) {\n+                if (resetFields) {\n+                    for (int j = 0; j < iSavedFieldsCount; j++) {\n+                        if (savedFields[j].isSavedField) {\n+                            savedFields[j].restore();\n+                        }\n+                    }\n+                    if (iSavedFieldsShared) {\n+                        iSavedFields = (SavedField[])savedFields.clone();\n+                        iSavedFieldsShared = false;\n+                    }\n+                }\n+                SavedField failingField = e.getIllegalFieldValue();\n+                int failingFieldIndex = -1;\n+                for (int j = 0; j < iSavedFieldsCount; j++) {\n+                    if (savedFields[j].iField == failingField.getField()) {\n+                        failingFieldIndex = j;\n+                        break;\n+                    }\n+                }\n+                StringBuilder sb = new StringBuilder(256);\n+                sb.append(\"Cannot parse \\\"\").append(text).append(\"\\\": \");\n+                if (failingFieldIndex >= 0) {\n+                    sb.append(savedFields[failingFieldIndex].iText);\n+                    sb.append(\" (\").append(failingField.getFieldName()).append(')');\n+                } else {\n+                    sb.append(e.getMessage());\n+                }\n+                throw new IllegalArgumentException(sb.toString(), e);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}