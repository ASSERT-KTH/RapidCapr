{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix D = dec.getD();\n    RealMatrix V = dec.getV();\n    int n = D.getColumnDimension();\n    for (int j = 0; j < n; j++) {\n        if (D.getEntry(j, j) < 0) {\n            for (int i = 0; i < n; i++) {\n                V.setEntry(i, j, -V.getEntry(i, j));\n            }\n            D.setEntry(j, j, -D.getEntry(j, j));\n        }\n        double sqrt = FastMath.sqrt(D.getEntry(j, j));\n        for (int i = 0; i < n; i++) {\n            V.setEntry(i, j, V.getEntry(i, j) / sqrt);\n        }\n    }\n    RealMatrix Vt = V.transpose();\n    RealMatrix sqrtM = V.multiply(getSqrtMatrix(D)).multiply(Vt);\n\n    return sqrtM;\n\n}\n\nprivate RealMatrix getSqrtMatrix(RealMatrix D) {\n    final int n = D.getColumnDimension();\n    final RealMatrix diagSqrt = MatrixUtils.createRealMatrix(n, n);\n    for (int j = 0; j < n; j++) {\n        double d = D.getEntry(j, j);\n        if (d < 0) {\n            throw new MathUnsupportedOperationException();\n        } else if (d == 0) {\n            diagSqrt.setEntry(j, j, 0);\n        } else {\n            diagSqrt.setEntry(j, j, FastMath.sqrt(d));\n        }\n    }\n    return diagSqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..14b3ccdd3 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,43 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix D = dec.getD();\n+    RealMatrix V = dec.getV();\n+    int n = D.getColumnDimension();\n+    for (int j = 0; j < n; j++) {\n+        if (D.getEntry(j, j) < 0) {\n+            for (int i = 0; i < n; i++) {\n+                V.setEntry(i, j, -V.getEntry(i, j));\n+            }\n+            D.setEntry(j, j, -D.getEntry(j, j));\n+        }\n+        double sqrt = FastMath.sqrt(D.getEntry(j, j));\n+        for (int i = 0; i < n; i++) {\n+            V.setEntry(i, j, V.getEntry(i, j) / sqrt);\n+        }\n+    }\n+    RealMatrix Vt = V.transpose();\n+    RealMatrix sqrtM = V.multiply(getSqrtMatrix(D)).multiply(Vt);\n+\n+    return sqrtM;\n+\n+}\n+\n+private RealMatrix getSqrtMatrix(RealMatrix D) {\n+    final int n = D.getColumnDimension();\n+    final RealMatrix diagSqrt = MatrixUtils.createRealMatrix(n, n);\n+    for (int j = 0; j < n; j++) {\n+        double d = D.getEntry(j, j);\n+        if (d < 0) {\n+            throw new MathUnsupportedOperationException();\n+        } else if (d == 0) {\n+            diagSqrt.setEntry(j, j, 0);\n+        } else {\n+            diagSqrt.setEntry(j, j, FastMath.sqrt(d));\n+        }\n     }\n+    return diagSqrt;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}