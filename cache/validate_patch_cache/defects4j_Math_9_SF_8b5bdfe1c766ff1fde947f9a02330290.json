{
    "patch": "public Line revert() {\n    final double errorTolerance = 1e-12;\n    if (direction.getNorm() < errorTolerance) {\n        // Zero-length vector or nearly so, so return a new Line object\n        // with start and end points equal to the current point\n        return new Line(zero, zero);\n    }\n    final Vector2D negativeDirection = direction.negate();\n    final Line reverted = new Line(zero, zero.add(negativeDirection));\n    return reverted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..1b47c72cf 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,17 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() {\n+    final double errorTolerance = 1e-12;\n+    if (direction.getNorm() < errorTolerance) {\n+        // Zero-length vector or nearly so, so return a new Line object\n+        // with start and end points equal to the current point\n+        return new Line(zero, zero);\n+    }\n+    final Vector2D negativeDirection = direction.negate();\n+    final Line reverted = new Line(zero, zero.add(negativeDirection));\n+    return reverted;\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}