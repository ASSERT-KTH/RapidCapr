{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n    int numArgs = call.getChildCount() - 1;\n\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n\n    // Handle varargs function.\n    if (functionType.isVarArgs()) {\n        Iterator<Node> parameters = functionType.getParameters().iterator();\n        Node parameter = null;\n        Node argument = null;\n        int ordinal = 0;\n        while (arguments.hasNext()) {\n            parameter = parameters.hasNext() ? parameters.next() : parameter;\n            argument = arguments.next();\n            ordinal++;\n            validator.expectArgumentMatchesParameter(t, argument,\n                    getJSType(argument), getJSType(parameter), call, ordinal);\n        }\n    } else {\n        Iterator<Node> parameters = functionType.getParameters().iterator();\n        Node parameter = null;\n        Node argument = null;\n        int ordinal = 0;\n        while (parameters.hasNext()) {\n            parameter = parameters.next();\n            if (!arguments.hasNext()) {\n                if (parameter.isOptional()) {\n                    break;\n                } else {\n                    report(t, call, WRONG_ARGUMENT_COUNT,\n                            validator.getReadableJSTypeName(call.getFirstChild(), false),\n                            String.valueOf(ordinal), String.format(\"%s is undefined\", parameter.getString()),\n                            \"\");\n                    return;\n                }\n            }\n            argument = arguments.next();\n            ordinal++;\n            validator.expectArgumentMatchesParameter(t, argument,\n                    getJSType(argument), getJSType(parameter), call, ordinal);\n        }\n\n        // Too few arguments.\n        if (ordinal < minArgs) {\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n                    String.valueOf(numArgs), String.format(\"Function requires at least %d argument(s)\", minArgs),\n                    \"\");\n            return;\n        }\n\n        // Too many arguments.\n        if (maxArgs >= 0 && ordinal > maxArgs) {\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n                    String.valueOf(numArgs), String.format(\"Function takes at most %d argument(s)\", maxArgs),\n                    \"\");\n            return;\n        }\n\n        // Handle optional arguments.\n        while (parameters.hasNext()) {\n            parameter = parameters.next();\n            if (!parameter.isOptional()) {\n                report(t, call, WRONG_ARGUMENT_COUNT,\n                        validator.getReadableJSTypeName(call.getFirstChild(), false),\n                        String.valueOf(numArgs), String.format(\"Function requires at least %d argument(s)\", minArgs),\n                        maxArgs >= 0 ? String.format(\" and at most %d argument(s)\", maxArgs) : \"\");\n                return;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..bc992389 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,82 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n-\n     int numArgs = call.getChildCount() - 1;\n+\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+\n+    // Handle varargs function.\n+    if (functionType.isVarArgs()) {\n+        Iterator<Node> parameters = functionType.getParameters().iterator();\n+        Node parameter = null;\n+        Node argument = null;\n+        int ordinal = 0;\n+        while (arguments.hasNext()) {\n+            parameter = parameters.hasNext() ? parameters.next() : parameter;\n+            argument = arguments.next();\n+            ordinal++;\n+            validator.expectArgumentMatchesParameter(t, argument,\n+                    getJSType(argument), getJSType(parameter), call, ordinal);\n+        }\n+    } else {\n+        Iterator<Node> parameters = functionType.getParameters().iterator();\n+        Node parameter = null;\n+        Node argument = null;\n+        int ordinal = 0;\n+        while (parameters.hasNext()) {\n+            parameter = parameters.next();\n+            if (!arguments.hasNext()) {\n+                if (parameter.isOptional()) {\n+                    break;\n+                } else {\n+                    report(t, call, WRONG_ARGUMENT_COUNT,\n+                            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                            String.valueOf(ordinal), String.format(\"%s is undefined\", parameter.getString()),\n+                            \"\");\n+                    return;\n+                }\n+            }\n+            argument = arguments.next();\n+            ordinal++;\n+            validator.expectArgumentMatchesParameter(t, argument,\n+                    getJSType(argument), getJSType(parameter), call, ordinal);\n+        }\n+\n+        // Too few arguments.\n+        if (ordinal < minArgs) {\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                    String.valueOf(numArgs), String.format(\"Function requires at least %d argument(s)\", minArgs),\n+                    \"\");\n+            return;\n+        }\n+\n+        // Too many arguments.\n+        if (maxArgs >= 0 && ordinal > maxArgs) {\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                    String.valueOf(numArgs), String.format(\"Function takes at most %d argument(s)\", maxArgs),\n+                    \"\");\n+            return;\n+        }\n+\n+        // Handle optional arguments.\n+        while (parameters.hasNext()) {\n+            parameter = parameters.next();\n+            if (!parameter.isOptional()) {\n+                report(t, call, WRONG_ARGUMENT_COUNT,\n+                        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                        String.valueOf(numArgs), String.format(\"Function requires at least %d argument(s)\", minArgs),\n+                        maxArgs >= 0 ? String.format(\" and at most %d argument(s)\", maxArgs) : \"\");\n+                return;\n+            }\n+        }\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}