{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            // Find the field type of the largest field being changed (e.g. month)\n            DateTimeField largestField = null;\n            int largestFieldValue = Integer.MIN_VALUE;\n            for (int i = 0; i < partial.size(); i++) {\n                DateTimeField fieldType = partial.getFieldType(i).getField(iChronology);\n                if (fieldType.getDurationField().getUnitMillis() >= \n                   largestField.getDurationField().getUnitMillis()) {\n                    largestField = fieldType;\n                    largestFieldValue = values[i];\n                }\n            }\n            \n            // Calculate the new value of the largest field\n            int newLargestFieldValue = largestField.add(largestFieldValue, valueToAdd);\n            \n            // Adjust for the case where the new value is 29 or 30 and the day is 31\n            if (largestField.equals(DateTimeFieldType.monthOfYear()) && \n               values[DateTimeFieldType.dayOfMonth().getFieldIndex()] > 28) {\n                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(\n                        iChronology.year().get(values[DateTimeFieldType.year().getFieldIndex()]),\n                        newLargestFieldValue);\n                if (values[DateTimeFieldType.dayOfMonth().getFieldIndex()] > maxDayOfMonth) {\n                    values[DateTimeFieldType.dayOfMonth().getFieldIndex()] = maxDayOfMonth;\n                }\n            }\n            \n            // Set the new value of the largest field\n            long instant = largestField.set(partial, largestField.getMinimumValue(), \n                                             values[DateTimeFieldType.year().getFieldIndex()], \n                                             newLargestFieldValue);\n            \n            // Calculate the other fields based on the new instant\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (i != fieldIndex && partial.getFieldType(i).getField(iChronology).getRangeDurationField().\n                   equals(DurationFieldType.days())) {\n                    int[] fieldValues = partial.getValues();\n                    int value = fieldValues[i];\n                    DateTimeField field = partial.getFieldType(i).getField(iChronology);\n                    instant = field.set(instant, value);\n                }\n            }\n\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..ca5f9911 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,13 +206,50 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n+            // Find the field type of the largest field being changed (e.g. month)\n+            DateTimeField largestField = null;\n+            int largestFieldValue = Integer.MIN_VALUE;\n+            for (int i = 0; i < partial.size(); i++) {\n+                DateTimeField fieldType = partial.getFieldType(i).getField(iChronology);\n+                if (fieldType.getDurationField().getUnitMillis() >= \n+                   largestField.getDurationField().getUnitMillis()) {\n+                    largestField = fieldType;\n+                    largestFieldValue = values[i];\n+                }\n+            }\n+            \n+            // Calculate the new value of the largest field\n+            int newLargestFieldValue = largestField.add(largestFieldValue, valueToAdd);\n+            \n+            // Adjust for the case where the new value is 29 or 30 and the day is 31\n+            if (largestField.equals(DateTimeFieldType.monthOfYear()) && \n+               values[DateTimeFieldType.dayOfMonth().getFieldIndex()] > 28) {\n+                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(\n+                        iChronology.year().get(values[DateTimeFieldType.year().getFieldIndex()]),\n+                        newLargestFieldValue);\n+                if (values[DateTimeFieldType.dayOfMonth().getFieldIndex()] > maxDayOfMonth) {\n+                    values[DateTimeFieldType.dayOfMonth().getFieldIndex()] = maxDayOfMonth;\n+                }\n+            }\n+            \n+            // Set the new value of the largest field\n+            long instant = largestField.set(partial, largestField.getMinimumValue(), \n+                                             values[DateTimeFieldType.year().getFieldIndex()], \n+                                             newLargestFieldValue);\n+            \n+            // Calculate the other fields based on the new instant\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                if (i != fieldIndex && partial.getFieldType(i).getField(iChronology).getRangeDurationField().\n+                   equals(DurationFieldType.days())) {\n+                    int[] fieldValues = partial.getValues();\n+                    int value = fieldValues[i];\n+                    DateTimeField field = partial.getFieldType(i).getField(iChronology);\n+                    instant = field.set(instant, value);\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n+\n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}