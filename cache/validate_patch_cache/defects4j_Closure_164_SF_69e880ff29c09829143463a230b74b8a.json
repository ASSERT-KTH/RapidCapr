{
    "patch": "public boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  int thisMinArgs = parameters.getMinArguments();\n  int thatMinArgs = that.parameters.getMinArguments();\n\n  if (thisMinArgs > thatMinArgs) {\n    // This function requires more arguments than the other function. This\n    // is not a subtype.\n    return false;\n  }\n\n  // Check if the rest parameter types are subtypes.\n  if (parameters.hasRestFormals() || that.parameters.hasRestFormals()) {\n    int thisMaxArgs = parameters.getMaxArguments();\n    int thatMaxArgs = that.parameters.getMaxArguments();\n    if (thisMaxArgs > thatMaxArgs) {\n      // This function can accept more arguments than the other function. This\n      // is not a subtype.\n      return false;\n    }\n\n    JSType thisRestParamType = parameters.getRestFormalsType();\n    JSType thatRestParamType = that.parameters.getRestFormalsType();\n\n    if (thisRestParamType != null && thatRestParamType != null) {\n      if (!thatRestParamType.isSubtype(thisRestParamType)) {\n        return false;\n      }\n    }\n  }\n\n  // Check if the required parameter types are subtypes.\n  for (Node thisParam = parameters.getSecondChild();\n      thisParam != null && !thisParam.isVarArgs();\n      thisParam = thisParam.getNext()) {\n\n    JSType thisParamType = thisParam.getJSType();\n    int thatParamIndex = thisParam.getIndex() - Parameters.MIN_PARAMETERS;\n    Node thatParam = that.parameters.get(Parameters.MIN_PARAMETERS + thatParamIndex);\n    JSType thatParamType = thatParam != null ? thatParam.getJSType() : null;\n\n    if (thatParamType == null && thisParamType == null) {\n      // Both parameter types are optional, move on to the next parameter.\n      continue;\n    }\n\n    if (thatParamType == null) {\n      // This function requires a parameter that the other function doesn't\n      // require. This is not a subtype.\n      return false;\n    }\n\n    if (thisParamType == null) {\n      // The other function has an optional parameter that this function\n      // doesn't have, but its type is a subtype of the required parameter\n      // type in this function. This is a subtype.\n      continue;\n    }\n\n    if (!thatParamType.isSubtype(thisParamType)) {\n      return false;\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..ff158270 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,82 +77,82 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n-    if (!(other instanceof ArrowType)) {\n-      return false;\n-    }\n+public boolean isSubtype(JSType other) {\n+  if (!(other instanceof ArrowType)) {\n+    return false;\n+  }\n \n-    ArrowType that = (ArrowType) other;\n+  ArrowType that = (ArrowType) other;\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+  if (!this.returnType.isSubtype(that.returnType)) {\n+    return false;\n+  }\n+\n+  int thisMinArgs = parameters.getMinArguments();\n+  int thatMinArgs = that.parameters.getMinArguments();\n+\n+  if (thisMinArgs > thatMinArgs) {\n+    // This function requires more arguments than the other function. This\n+    // is not a subtype.\n+    return false;\n+  }\n \n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n+  // Check if the rest parameter types are subtypes.\n+  if (parameters.hasRestFormals() || that.parameters.hasRestFormals()) {\n+    int thisMaxArgs = parameters.getMaxArguments();\n+    int thatMaxArgs = that.parameters.getMaxArguments();\n+    if (thisMaxArgs > thatMaxArgs) {\n+      // This function can accept more arguments than the other function. This\n+      // is not a subtype.\n       return false;\n     }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n-    Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n+    JSType thisRestParamType = parameters.getRestFormalsType();\n+    JSType thatRestParamType = that.parameters.getRestFormalsType();\n+\n+    if (thisRestParamType != null && thatRestParamType != null) {\n+      if (!thatRestParamType.isSubtype(thisRestParamType)) {\n+        return false;\n       }\n+    }\n+  }\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+  // Check if the required parameter types are subtypes.\n+  for (Node thisParam = parameters.getSecondChild();\n+      thisParam != null && !thisParam.isVarArgs();\n+      thisParam = thisParam.getNext()) {\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+    JSType thisParamType = thisParam.getJSType();\n+    int thatParamIndex = thisParam.getIndex() - Parameters.MIN_PARAMETERS;\n+    Node thatParam = that.parameters.get(Parameters.MIN_PARAMETERS + thatParamIndex);\n+    JSType thatParamType = thatParam != null ? thatParam.getJSType() : null;\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n-      }\n+    if (thatParamType == null && thisParamType == null) {\n+      // Both parameter types are optional, move on to the next parameter.\n+      continue;\n+    }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n+    if (thatParamType == null) {\n+      // This function requires a parameter that the other function doesn't\n+      // require. This is not a subtype.\n+      return false;\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+    if (thisParamType == null) {\n+      // The other function has an optional parameter that this function\n+      // doesn't have, but its type is a subtype of the required parameter\n+      // type in this function. This is a subtype.\n+      continue;\n+    }\n \n-    return true;\n+    if (!thatParamType.isSubtype(thisParamType)) {\n+      return false;\n+    }\n   }\n \n+  return true;\n+}\n+\n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter\n    *     spec.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}