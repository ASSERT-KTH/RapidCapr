{
    "patch": "// We only care about calls to non-pure functions and expressions that potentially modify dependent variables.\nif (NodeUtil.isCallOrNew(n) && NodeUtil.mayEffectMutableState(n)) {\n  return true;\n}\n\n// Handle the 'delete' operation and dynamic property access\nif (n.isDelProp() || (n.isGetElem() && !n.getLastChild().isString())) {\n  return true; \n}\n\n// Recurse on child nodes\nfor (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n  if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n    return true;\n  }\n}\n\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..240090da 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,24 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+// We only care about calls to non-pure functions and expressions that potentially modify dependent variables.\n+if (NodeUtil.isCallOrNew(n) && NodeUtil.mayEffectMutableState(n)) {\n+  return true;\n+}\n+\n+// Handle the 'delete' operation and dynamic property access\n+if (n.isDelProp() || (n.isGetElem() && !n.getLastChild().isString())) {\n+  return true; \n+}\n+\n+// Recurse on child nodes\n+for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+  if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+    return true;\n+  }\n+}\n+\n+return false;\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}