{
    "patch": "        // Maybe STRING, GET, SET\n        if (child.isGetterDef() || child.isSetterDef()) {\n          // NOTE: GET/SET functions typically appear in OBJECTLIT nodes\n          //       nested inside of VAR nodes. Therefore if you've found a\n          //       GET/SET function here, you know the type of parent node\n          //       is VAR.\n          Node parent = n.getParent();\n          if (parent.isVar()) {\n            Var v = scope.getVar(parent.getFirstChild().getString());\n            if (v == null) {\n              continue;\n            }\n            type = v.getType();\n          }\n        } else if (child.isString()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..8a297103 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,21 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        // Maybe STRING, GET, SET\n+        if (child.isGetterDef() || child.isSetterDef()) {\n+          // NOTE: GET/SET functions typically appear in OBJECTLIT nodes\n+          //       nested inside of VAR nodes. Therefore if you've found a\n+          //       GET/SET function here, you know the type of parent node\n+          //       is VAR.\n+          Node parent = n.getParent();\n+          if (parent.isVar()) {\n+            Var v = scope.getVar(parent.getFirstChild().getString());\n+            if (v == null) {\n+              continue;\n+            }\n+            type = v.getType();\n+          }\n+        } else if (child.isString()) {\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}