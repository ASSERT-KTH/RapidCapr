{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double eps = 10e-15;\n\n    if (x < 0.0 || a <= 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1.0) {\n        double b0 = 1.0;\n        double b1 = x;\n        double b2;\n        double a1 = 0.0;\n        double a2 = 1.0;\n        double gold = 0.0;\n        double aold = 1.0;\n        double fac = a;\n\n        while (Math.abs((aold - gold) / gold) > eps) {\n            double ana = fac + a1 - a2 * x;\n            b2 = b1 + ana * b0;\n            a2 = a1 + ana * a0;\n            b0 = b1;\n            b1 = b2;\n            a0 = a1;\n            a1 = a2;\n            if (b1 > Double.MAX_VALUE) {\n                a0 /= b1;\n                b0 /= b1;\n                b1 = 1.0;\n            }\n            if (a1 > Double.MAX_VALUE) {\n                a0 /= a1;\n                b0 /= a1;\n                a1 = 1.0;\n            }\n            if (b1 < Double.MIN_NORMAL) {\n                a0 *= b1;\n                b0 *= b1;\n                b1 = Double.MIN_NORMAL;\n            }\n            if (a1 < Double.MIN_NORMAL) {\n                a0 *= a1;\n                b0 *= a1;\n                a1 = Double.MIN_NORMAL;\n            }\n            gold = aold;\n            aold = a1;\n            fac += 1.0;\n        }\n\n        return 1.0 - Math.exp(-x + a * Math.log(x) - logGamma(a)) * b1 / a;\n    } else {\n        double b0 = 0.0;\n        double b1 = 1.0;\n        double b2;\n        double a0 = 0.0;\n        double a1 = 1.0;\n        double a2;\n        double p0 = 0.0;\n        double p1 = 1.0;\n        double p2;\n        double q0 = 1.0;\n        double q1 = a;\n        double q2;\n        double xam = x + 1.0 - a;\n        double gold = 0.0;\n        double aold = 1.0;\n\n        while (Math.abs((aold - gold) / gold) > eps) {\n            double ana = p1 / q1;\n            a2 = (xam * a1 + a * a0) / q1;\n            b2 = (xam * b1 + a * b0) / q1;\n            a0 = a1;\n            a1 = a2;\n            b0 = b1;\n            b1 = b2;\n            p2 = (xam * p1 + a * p0) / q1;\n            q2 = (xam * q1 + a * q0) / q1;\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            if (Math.abs(q1) > Double.MAX_VALUE) {\n                a0 /= q1;\n                b0 /= q1;\n                p0 /= q1;\n                q0 /= q1;\n                a1 /= q1;\n                b1 /= q1;\n                p1 /= q1;\n                q1 = 1.0;\n            }\n            if (Math.abs(p1) > Double.MAX_VALUE) {\n                a0 /= p1;\n                b0 /= p1;\n                p0 /= p1;\n                q0 /= p1;\n                a1 /= p1;\n                b1 /= p1;\n                p1 = 1.0;\n            }\n            if (Math.abs(q1) < Double.MIN_NORMAL) {\n                a0 *= q1;\n                b0 *= q1;\n                p0 *= q1;\n                q0 *= q1;\n                a1 *= q1;\n                b1 *= q1;\n                p1 *= q1;\n                q1 = Double.MIN_NORMAL;\n            }\n            if (Math.abs(p1) < Double.MIN_NORMAL) {\n                a0 *= p1;\n                b0 *= p1;\n                p0 *= p1;\n                q0 *= p1;\n                a1 *= p1;\n                b1 *= p1;\n                p1 = Double.MIN_NORMAL;\n            }\n            gold = aold;\n            aold = a1;\n        }\n\n        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * b1 / a;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..356f522c8 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,137 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double eps = 10e-15;\n+\n+    if (x < 0.0 || a <= 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1.0) {\n+        double b0 = 1.0;\n+        double b1 = x;\n+        double b2;\n+        double a1 = 0.0;\n+        double a2 = 1.0;\n+        double gold = 0.0;\n+        double aold = 1.0;\n+        double fac = a;\n+\n+        while (Math.abs((aold - gold) / gold) > eps) {\n+            double ana = fac + a1 - a2 * x;\n+            b2 = b1 + ana * b0;\n+            a2 = a1 + ana * a0;\n+            b0 = b1;\n+            b1 = b2;\n+            a0 = a1;\n+            a1 = a2;\n+            if (b1 > Double.MAX_VALUE) {\n+                a0 /= b1;\n+                b0 /= b1;\n+                b1 = 1.0;\n+            }\n+            if (a1 > Double.MAX_VALUE) {\n+                a0 /= a1;\n+                b0 /= a1;\n+                a1 = 1.0;\n+            }\n+            if (b1 < Double.MIN_NORMAL) {\n+                a0 *= b1;\n+                b0 *= b1;\n+                b1 = Double.MIN_NORMAL;\n+            }\n+            if (a1 < Double.MIN_NORMAL) {\n+                a0 *= a1;\n+                b0 *= a1;\n+                a1 = Double.MIN_NORMAL;\n+            }\n+            gold = aold;\n+            aold = a1;\n+            fac += 1.0;\n+        }\n+\n+        return 1.0 - Math.exp(-x + a * Math.log(x) - logGamma(a)) * b1 / a;\n+    } else {\n+        double b0 = 0.0;\n+        double b1 = 1.0;\n+        double b2;\n+        double a0 = 0.0;\n+        double a1 = 1.0;\n+        double a2;\n+        double p0 = 0.0;\n+        double p1 = 1.0;\n+        double p2;\n+        double q0 = 1.0;\n+        double q1 = a;\n+        double q2;\n+        double xam = x + 1.0 - a;\n+        double gold = 0.0;\n+        double aold = 1.0;\n+\n+        while (Math.abs((aold - gold) / gold) > eps) {\n+            double ana = p1 / q1;\n+            a2 = (xam * a1 + a * a0) / q1;\n+            b2 = (xam * b1 + a * b0) / q1;\n+            a0 = a1;\n+            a1 = a2;\n+            b0 = b1;\n+            b1 = b2;\n+            p2 = (xam * p1 + a * p0) / q1;\n+            q2 = (xam * q1 + a * q0) / q1;\n+            p0 = p1;\n+            p1 = p2;\n+            q0 = q1;\n+            q1 = q2;\n+            if (Math.abs(q1) > Double.MAX_VALUE) {\n+                a0 /= q1;\n+                b0 /= q1;\n+                p0 /= q1;\n+                q0 /= q1;\n+                a1 /= q1;\n+                b1 /= q1;\n+                p1 /= q1;\n+                q1 = 1.0;\n+            }\n+            if (Math.abs(p1) > Double.MAX_VALUE) {\n+                a0 /= p1;\n+                b0 /= p1;\n+                p0 /= p1;\n+                q0 /= p1;\n+                a1 /= p1;\n+                b1 /= p1;\n+                p1 = 1.0;\n+            }\n+            if (Math.abs(q1) < Double.MIN_NORMAL) {\n+                a0 *= q1;\n+                b0 *= q1;\n+                p0 *= q1;\n+                q0 *= q1;\n+                a1 *= q1;\n+                b1 *= q1;\n+                p1 *= q1;\n+                q1 = Double.MIN_NORMAL;\n+            }\n+            if (Math.abs(p1) < Double.MIN_NORMAL) {\n+                a0 *= p1;\n+                b0 *= p1;\n+                p0 *= p1;\n+                q0 *= p1;\n+                a1 *= p1;\n+                b1 *= p1;\n+                p1 = Double.MIN_NORMAL;\n+            }\n+            gold = aold;\n+            aold = a1;\n+        }\n+\n+        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * b1 / a;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}