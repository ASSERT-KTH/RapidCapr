{
    "patch": "public Complex add(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    double newReal = real + rhs.getReal();\n    double newImaginary = imaginary + rhs.getImaginary();\n    if (Double.isFinite(newReal) && Double.isFinite(newImaginary)) {\n        // If both the real and imaginary parts are finite, return the new complex number.\n        return createComplex(newReal, newImaginary);\n    } else if (Double.isNaN(newReal) || Double.isNaN(newImaginary)) {\n        // If either the real or imaginary part is NaN, return a NaN complex number.\n        return createComplex(Double.NaN, Double.NaN);\n    } else if (Double.isInfinite(newReal) && Double.isInfinite(newImaginary)) {\n        // If both the real and imaginary parts are infinite, return a complex infinity\n        // with the same sign as newReal.\n        double newSign = Math.signum(newReal);\n        return createComplex(newSign * Double.POSITIVE_INFINITY, newSign * Double.POSITIVE_INFINITY);\n    } else if (Double.isInfinite(newReal)) {\n        // If only the real part is infinite, return a new complex number with the same\n        // imaginary part as the original number.\n        return createComplex(newReal, imaginary + rhs.getImaginary());\n    } else {\n        // If only the imaginary part is infinite, return a new complex number with the same\n        // real part as the original number.\n        return createComplex(real + rhs.getReal(), newImaginary);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..681083aea 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -147,12 +147,31 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n      * @return the complex number sum\n      * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex add(Complex rhs)\n-        throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n-            imaginary + rhs.getImaginary());\n+public Complex add(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n+    double newReal = real + rhs.getReal();\n+    double newImaginary = imaginary + rhs.getImaginary();\n+    if (Double.isFinite(newReal) && Double.isFinite(newImaginary)) {\n+        // If both the real and imaginary parts are finite, return the new complex number.\n+        return createComplex(newReal, newImaginary);\n+    } else if (Double.isNaN(newReal) || Double.isNaN(newImaginary)) {\n+        // If either the real or imaginary part is NaN, return a NaN complex number.\n+        return createComplex(Double.NaN, Double.NaN);\n+    } else if (Double.isInfinite(newReal) && Double.isInfinite(newImaginary)) {\n+        // If both the real and imaginary parts are infinite, return a complex infinity\n+        // with the same sign as newReal.\n+        double newSign = Math.signum(newReal);\n+        return createComplex(newSign * Double.POSITIVE_INFINITY, newSign * Double.POSITIVE_INFINITY);\n+    } else if (Double.isInfinite(newReal)) {\n+        // If only the real part is infinite, return a new complex number with the same\n+        // imaginary part as the original number.\n+        return createComplex(newReal, imaginary + rhs.getImaginary());\n+    } else {\n+        // If only the imaginary part is infinite, return a new complex number with the same\n+        // real part as the original number.\n+        return createComplex(real + rhs.getReal(), newImaginary);\n     }\n+}\n \n     /**\n      * Return the conjugate of this complex number. The conjugate of",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}