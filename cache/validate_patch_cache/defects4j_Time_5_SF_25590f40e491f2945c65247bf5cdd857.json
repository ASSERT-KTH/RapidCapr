{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n\n    // calculating total number of days based on weeks and days fields\n    int totalDays = getDays() + (getWeeks() * 7);\n\n    millis += (((long) totalDays) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n\n    // If type does not support months field, any fractional months are added to years\n    if (!type.isSupported(DurationFieldType.months())) {\n        int years = getYears() + (getMonths() / 12);\n        int months = getMonths() % 12;\n        millis += ((long) years) * DateTimeUtils.MILLIS_PER_YEAR;\n        millis += ((long) months) * DateTimeUtils.MILLIS_PER_MONTH;\n        return new Period(millis, type, ISOChronology.getInstanceUTC());\n    }\n\n    // If type supports months field, the normalization requires days to be normalized first\n    if (!type.isSupported(DurationFieldType.days())) {\n        int years = getYears() + (getMonths() / 12);\n        int months = getMonths() % 12;\n\n        long yearsInMillis = ((long) years) * DateTimeUtils.MILLIS_PER_YEAR;\n        long monthsInMillis = ((long) months) * DateTimeUtils.MILLIS_PER_MONTH;\n        long totalDurationInMillis = yearsInMillis + monthsInMillis;\n        Period totalDuration = new Period(totalDurationInMillis, type, ISOChronology.getInstanceUTC());\n\n        Period normalizedTotal = totalDuration.normalizedStandard();\n\n        // extracting years and months from the normalized total duration\n        int yearsInDuration = normalizedTotal.getYears();\n        int monthsInDuration = normalizedTotal.getMonths();\n\n        // calculating the final duration in millis\n        long millisInDuration = yearsInDuration * DateTimeUtils.MILLIS_PER_YEAR;\n        millisInDuration += monthsInDuration * DateTimeUtils.MILLIS_PER_MONTH;\n\n        return new Period(millis + millisInDuration, type, ISOChronology.getInstanceUTC());\n    }\n\n    // type supports both months and days fields, we'll first normalize days\n    Period duration = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    Period normalizedDuration = duration.normalizedStandard(PeriodType.days());\n\n    // extracting years, months and days from the normalized duration\n    int years = normalizedDuration.getYears();\n    int months = normalizedDuration.getMonths();\n    int days = normalizedDuration.getDays();\n\n    // Calculating the final duration in millis\n    long millisInDuration = ((long) days) * DateTimeUtils.MILLIS_PER_DAY;\n    millisInDuration += ((long) months) * DateTimeUtils.MILLIS_PER_MONTH;\n    millisInDuration += ((long) years) * DateTimeUtils.MILLIS_PER_YEAR;\n\n    return new Period(millisInDuration, type, ISOChronology.getInstanceUTC());\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..669a1481 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,66 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+\n+    // calculating total number of days based on weeks and days fields\n+    int totalDays = getDays() + (getWeeks() * 7);\n+\n+    millis += (((long) totalDays) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+\n+    // If type does not support months field, any fractional months are added to years\n+    if (!type.isSupported(DurationFieldType.months())) {\n+        int years = getYears() + (getMonths() / 12);\n+        int months = getMonths() % 12;\n+        millis += ((long) years) * DateTimeUtils.MILLIS_PER_YEAR;\n+        millis += ((long) months) * DateTimeUtils.MILLIS_PER_MONTH;\n+        return new Period(millis, type, ISOChronology.getInstanceUTC());\n     }\n \n+    // If type supports months field, the normalization requires days to be normalized first\n+    if (!type.isSupported(DurationFieldType.days())) {\n+        int years = getYears() + (getMonths() / 12);\n+        int months = getMonths() % 12;\n+\n+        long yearsInMillis = ((long) years) * DateTimeUtils.MILLIS_PER_YEAR;\n+        long monthsInMillis = ((long) months) * DateTimeUtils.MILLIS_PER_MONTH;\n+        long totalDurationInMillis = yearsInMillis + monthsInMillis;\n+        Period totalDuration = new Period(totalDurationInMillis, type, ISOChronology.getInstanceUTC());\n+\n+        Period normalizedTotal = totalDuration.normalizedStandard();\n+\n+        // extracting years and months from the normalized total duration\n+        int yearsInDuration = normalizedTotal.getYears();\n+        int monthsInDuration = normalizedTotal.getMonths();\n+\n+        // calculating the final duration in millis\n+        long millisInDuration = yearsInDuration * DateTimeUtils.MILLIS_PER_YEAR;\n+        millisInDuration += monthsInDuration * DateTimeUtils.MILLIS_PER_MONTH;\n+\n+        return new Period(millis + millisInDuration, type, ISOChronology.getInstanceUTC());\n+    }\n+\n+    // type supports both months and days fields, we'll first normalize days\n+    Period duration = new Period(millis, type, ISOChronology.getInstanceUTC());\n+\n+    Period normalizedDuration = duration.normalizedStandard(PeriodType.days());\n+\n+    // extracting years, months and days from the normalized duration\n+    int years = normalizedDuration.getYears();\n+    int months = normalizedDuration.getMonths();\n+    int days = normalizedDuration.getDays();\n+\n+    // Calculating the final duration in millis\n+    long millisInDuration = ((long) days) * DateTimeUtils.MILLIS_PER_DAY;\n+    millisInDuration += ((long) months) * DateTimeUtils.MILLIS_PER_MONTH;\n+    millisInDuration += ((long) years) * DateTimeUtils.MILLIS_PER_YEAR;\n+\n+    return new Period(millisInDuration, type, ISOChronology.getInstanceUTC());\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}