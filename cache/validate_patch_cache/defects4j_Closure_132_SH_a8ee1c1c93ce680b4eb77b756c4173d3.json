{
    "patch": "public static boolean mayEffectMutableState(\n      Node n,\n      @Nullable CompilerOptions options,\n      @Nullable CodingConvention convention,\n      CompilerContext context) {\n\n    switch (n.getToken()) {\n      case FUNCTION: {\n        if (options != null &&\n            options.getLanguageOut().toFeatureSet().contains(FeatureSet.ES_NEXT)) {\n          // ES6 allows functions that don't reference \"this\" or \"arguments\"\n          // to remain outside of strict mode.\n          if (NodeUtil.referencesThis(n) || NodeUtil.referencesArguments(n)) {\n            return true;\n          }\n        }\n        Node body = n.getLastChild();\n        if (body.getBlockType() == Token.BLOCK &&\n            body.hasChildren() &&\n            !body.getFirstChild().isBlockCommentNode()) {\n          for (Node c = body.getFirstChild(); c != null; c = c.getNext()) {\n            if (mayEffectMutableState(c, options, convention, context)) {\n              return true;\n            }\n          }\n        }\n        break;\n      }\n      case ASSIGN:\n        Node lhs = n.getFirstChild();\n        Node rhs = lhs.getNext();\n        if (lhs.isGetProp() && convention != null) {\n          String methodName = convention.getGetPropertyName(lhs);\n          if (methodName != null && methodName.matches(\".set*\")) {\n            return true;\n          }\n        }\n        if (mayEffectMutableState(lhs, options, convention, context) ||\n            isCallToNonEscapingJsFunction(rhs)) {\n          return true;\n        } else if (rhs != null) {\n          return mayEffectMutableState(rhs, options, convention, context);\n        } else {\n          break;\n        }\n      case NAME:\n      case EXPR_RESULT:\n        return mayEffectMutableState(n.getFirstChild(), options, convention, context);\n...",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..aa0830e0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,55 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+public static boolean mayEffectMutableState(\n+      Node n,\n+      @Nullable CompilerOptions options,\n+      @Nullable CodingConvention convention,\n+      CompilerContext context) {\n+\n+    switch (n.getToken()) {\n+      case FUNCTION: {\n+        if (options != null &&\n+            options.getLanguageOut().toFeatureSet().contains(FeatureSet.ES_NEXT)) {\n+          // ES6 allows functions that don't reference \"this\" or \"arguments\"\n+          // to remain outside of strict mode.\n+          if (NodeUtil.referencesThis(n) || NodeUtil.referencesArguments(n)) {\n+            return true;\n+          }\n+        }\n+        Node body = n.getLastChild();\n+        if (body.getBlockType() == Token.BLOCK &&\n+            body.hasChildren() &&\n+            !body.getFirstChild().isBlockCommentNode()) {\n+          for (Node c = body.getFirstChild(); c != null; c = c.getNext()) {\n+            if (mayEffectMutableState(c, options, convention, context)) {\n+              return true;\n+            }\n+          }\n+        }\n+        break;\n+      }\n+      case ASSIGN:\n+        Node lhs = n.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        if (lhs.isGetProp() && convention != null) {\n+          String methodName = convention.getGetPropertyName(lhs);\n+          if (methodName != null && methodName.matches(\".set*\")) {\n+            return true;\n+          }\n+        }\n+        if (mayEffectMutableState(lhs, options, convention, context) ||\n+            isCallToNonEscapingJsFunction(rhs)) {\n+          return true;\n+        } else if (rhs != null) {\n+          return mayEffectMutableState(rhs, options, convention, context);\n+        } else {\n+          break;\n+        }\n+      case NAME:\n+      case EXPR_RESULT:\n+        return mayEffectMutableState(n.getFirstChild(), options, convention, context);\n+...\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}