{
    "patch": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<ObjectType> typeSet = Sets.newTreeSet((t1, t2) -> t1.toString().compareTo(t2.toString()));\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               typeSet.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        typeSet.add(current);\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (ObjectType type : typeSet) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        Set<String> propertyNames = Sets.newTreeSet(type.getOwnPropertyNames());\n        for (String property : propertyNames) {\n          sb.append(property);\n          sb.append(\": \");\n          sb.append(type.getPropertyType(property).toString());\n          sb.append(\", \");\n        }\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\"...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..d4a6a2db 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,10 +345,6 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n-\n   @Override\n   String toStringHelper(boolean forAnnotations) {\n     if (hasReferenceName()) {\n@@ -358,30 +354,34 @@ class PrototypeObjectType extends ObjectType {\n       prettyPrint = false;\n \n       // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n+      Set<ObjectType> typeSet = Sets.newTreeSet((t1, t2) -> t1.toString().compareTo(t2.toString()));\n       for (ObjectType current = this;\n            current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+               typeSet.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n            current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n+        typeSet.add(current);\n       }\n \n       StringBuilder sb = new StringBuilder();\n       sb.append(\"{\");\n \n       int i = 0;\n-      for (String property : propertyNames) {\n+      for (ObjectType type : typeSet) {\n         if (i > 0) {\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+        Set<String> propertyNames = Sets.newTreeSet(type.getOwnPropertyNames());\n+        for (String property : propertyNames) {\n+          sb.append(property);\n+          sb.append(\": \");\n+          sb.append(type.getPropertyType(property).toString());\n+          sb.append(\", \");\n+        }\n \n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n+          sb.append(\"...\");\n           break;\n         }\n       }",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}