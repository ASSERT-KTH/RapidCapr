{
    "patch": "      if (NodeUtil.isGet(parent)) {\n        if (parent.getType() == Token.GETPROP &&\n            parent.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        Node pp = parent.getParent();\n        if (pp != null) {\n          Node ppp = pp.getParent();\n          if (ppp != null &&\n              ppp.getType() == Token.ASSIGN &&\n              NodeUtil.isGet(pp)) {\n            Node pppp = ppp.getParent();\n            if (pppp != null && pppp.getType() == Token.EXPR_RESULT) {\n              JSDocInfo jsDoc = getJSDocInfo(pppp);\n              if (jsDoc != null &&\n                  (jsDoc.hasEnumParameterType())) {\n                // Don't traverse expressions in enums.\n                return false;\n              }\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..8e5c5b84 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,26 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        if (parent.getType() == Token.GETPROP &&\n+            parent.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        Node pp = parent.getParent();\n+        if (pp != null) {\n+          Node ppp = pp.getParent();\n+          if (ppp != null &&\n+              ppp.getType() == Token.ASSIGN &&\n+              NodeUtil.isGet(pp)) {\n+            Node pppp = ppp.getParent();\n+            if (pppp != null && pppp.getType() == Token.EXPR_RESULT) {\n+              JSDocInfo jsDoc = getJSDocInfo(pppp);\n+              if (jsDoc != null &&\n+                  (jsDoc.hasEnumParameterType())) {\n+                // Don't traverse expressions in enums.\n+                return false;\n+              }\n+            }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}