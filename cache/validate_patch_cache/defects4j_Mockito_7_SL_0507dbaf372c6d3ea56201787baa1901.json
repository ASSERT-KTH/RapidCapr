{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    Type actualTypeArgument = null;\n    GenericDeclaration genericDeclaration = typeVariable.getGenericDeclaration();\n    if (genericDeclaration instanceof Method) {\n        Method method = (Method) genericDeclaration;\n        Type[] types = method.getTypeParameters();\n        for (int i = 0; i < types.length; i++) {\n            if (types[i].equals(typeVariable)) {\n                Type[] actualTypeArguments = method.getGenericParameterTypes();\n                if (actualTypeArguments[i] instanceof TypeVariable) {\n                    actualTypeArgument = ((TypeVariable<?>) actualTypeArguments[i]).getBounds()[0];\n                } else {\n                    actualTypeArgument = actualTypeArguments[i];\n                }\n                break;\n            }\n        }\n    } else if (genericDeclaration instanceof Class) {\n        Class<?> clazz = (Class<?>) genericDeclaration;\n        TypeVariable<?>[] typeVariables = clazz.getTypeParameters();\n        for (int i = 0; i < typeVariables.length; i++) {\n            if (typeVariables[i].equals(typeVariable)) {\n                actualTypeArgument = typeVariable.getBounds()[0];\n                break;\n            }\n        }\n    }\n    if(actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..4b3ed859a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,45 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    Type actualTypeArgument = null;\n+    GenericDeclaration genericDeclaration = typeVariable.getGenericDeclaration();\n+    if (genericDeclaration instanceof Method) {\n+        Method method = (Method) genericDeclaration;\n+        Type[] types = method.getTypeParameters();\n+        for (int i = 0; i < types.length; i++) {\n+            if (types[i].equals(typeVariable)) {\n+                Type[] actualTypeArguments = method.getGenericParameterTypes();\n+                if (actualTypeArguments[i] instanceof TypeVariable) {\n+                    actualTypeArgument = ((TypeVariable<?>) actualTypeArguments[i]).getBounds()[0];\n+                } else {\n+                    actualTypeArgument = actualTypeArguments[i];\n+                }\n+                break;\n+            }\n+        }\n+    } else if (genericDeclaration instanceof Class) {\n+        Class<?> clazz = (Class<?>) genericDeclaration;\n+        TypeVariable<?>[] typeVariables = clazz.getTypeParameters();\n+        for (int i = 0; i < typeVariables.length; i++) {\n+            if (typeVariables[i].equals(typeVariable)) {\n+                actualTypeArgument = typeVariable.getBounds()[0];\n+                break;\n+            }\n+        }\n+    }\n+    if(actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}