{
    "patch": "    class Cyclic {\n        String encode_cyclic(String s) {\n            StringBuilder result = new StringBuilder();\n            int i = 0;\n            while (i < s.length()){\n                String group = \"\";\n                if (i + 2 < s.length()) {\n                    group = s.substring(i, i+3);\n                } else if (i + 1 < s.length()){\n                    group = s.substring(i, i+2) + \" \";\n                } else {\n                    group = s.substring(i) + \"  \";\n                }\n                result.append(group.charAt(1)).append(group.charAt(2)).append(group.charAt(0));\n                i += 3;\n            }\n            return result.toString();\n        }\n\n        String decode_cyclic(String s) {\n            StringBuilder result = new StringBuilder();\n            int i = 0;\n            while (i < s.length()){\n                String group = \"\";\n                if (i + 2 < s.length()) {\n                    group = s.substring(i, i+3);\n                } else if (i + 1 < s.length()){\n                    group = s.substring(i, i+2) + \" \";\n                } else {\n                    group = s.substring(i) + \"  \";\n                }\n                result.append(group.charAt(2)).append(group.charAt(0)).append(group.charAt(1));\n                i += 3;\n            }\n            return result.toString().trim();\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/DECODE_CYCLIC.java b/src/main/java/humaneval/buggy/DECODE_CYCLIC.java\nindex 9ba739f..a6ad76d 100644\n--- a/src/main/java/humaneval/buggy/DECODE_CYCLIC.java\n+++ b/src/main/java/humaneval/buggy/DECODE_CYCLIC.java\n@@ -4,27 +4,43 @@ import java.util.ArrayList;\n \n public class DECODE_CYCLIC {\n     public static String decode_cyclic(String str) {\n-        class Cyclic {\n-            String encode_cyclic(String s) {\n-                ArrayList<String> groups = new ArrayList<String>();\n-\n-                for (int i = 0; i < s.length(); i += 3){\n-                    groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n-                }\n-                int remain = s.length() % 3;\n-                \n-                String result = \"\";\n-                for (String group : groups){\n-                    result += group.substring(1) + group.substring(0, 1);\n+    class Cyclic {\n+        String encode_cyclic(String s) {\n+            StringBuilder result = new StringBuilder();\n+            int i = 0;\n+            while (i < s.length()){\n+                String group = \"\";\n+                if (i + 2 < s.length()) {\n+                    group = s.substring(i, i+3);\n+                } else if (i + 1 < s.length()){\n+                    group = s.substring(i, i+2) + \" \";\n+                } else {\n+                    group = s.substring(i) + \"  \";\n                 }\n+                result.append(group.charAt(1)).append(group.charAt(2)).append(group.charAt(0));\n+                i += 3;\n+            }\n+            return result.toString();\n+        }\n \n-                if (remain > 0){\n-                    result += s.substring(s.length() - remain);\n+        String decode_cyclic(String s) {\n+            StringBuilder result = new StringBuilder();\n+            int i = 0;\n+            while (i < s.length()){\n+                String group = \"\";\n+                if (i + 2 < s.length()) {\n+                    group = s.substring(i, i+3);\n+                } else if (i + 1 < s.length()){\n+                    group = s.substring(i, i+2) + \" \";\n+                } else {\n+                    group = s.substring(i) + \"  \";\n                 }\n-\n-                return result;\n+                result.append(group.charAt(2)).append(group.charAt(0)).append(group.charAt(1));\n+                i += 3;\n             }\n+            return result.toString().trim();\n         }\n+    }\n         \n         final Cyclic cyclic = new Cyclic();\n         return cyclic.encode_cyclic(cyclic.encode_cyclic(str));",
    "result_reason": "   TEST_DECODE_CYCLIC.test_0:7 expected:<abcdef[ g ]> but was:<abcdef[g]>",
    "test_result": "FAIL"
}