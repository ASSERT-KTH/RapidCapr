{
    "patch": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        if (n == null || !n.isName()) {\n          continue;\n        }\n        String name = n.getString();\n        Node parent = n.getParent();\n        if (parent == null) {\n          continue;\n        }\n        switch (parent.getToken()) {\n          case VAR:\n          case LET:\n          case CONST:\n            if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n              Var aliasVar = scope.getVar(name);\n              aliases.put(name, aliasVar);\n\n              String qualifiedName =\n                  aliasVar.getInitialValue().getQualifiedName();\n              transformation.addAlias(name, qualifiedName);\n            }\n            break;\n          case FUNCTION:\n            if (parent.getParent().isFunction()) {\n              // Parameters of the scope function also get a BAD_PARAMETERS\n              // error.\n              break;\n            }\n            // fall through\n          default:\n            // TODO(robbyw): Support using locals for private variables.\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n            break;\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..bb603288 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -273,25 +273,38 @@ class ScopedAliases implements HotSwapCompilerPass {\n       Scope scope = t.getScope();\n       for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n+        if (n == null || !n.isName()) {\n+          continue;\n+        }\n+        String name = n.getString();\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        if (parent == null) {\n+          continue;\n         }\n+        switch (parent.getToken()) {\n+          case VAR:\n+          case LET:\n+          case CONST:\n+            if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+              Var aliasVar = scope.getVar(name);\n+              aliases.put(name, aliasVar);\n+\n+              String qualifiedName =\n+                  aliasVar.getInitialValue().getQualifiedName();\n+              transformation.addAlias(name, qualifiedName);\n+            }\n+            break;\n+          case FUNCTION:\n+            if (parent.getParent().isFunction()) {\n+              // Parameters of the scope function also get a BAD_PARAMETERS\n+              // error.\n+              break;\n+            }\n+            // fall through\n+          default:\n+            // TODO(robbyw): Support using locals for private variables.\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+            break;\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}