{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // We only fold expression nodes that are not top-level functions.\n        if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isFunctionExpression(maybeExpr)) {\n            Node parent = n.getParent();\n            if (parent != null && parent.getType() == Token.EXPR_RESULT && parent.getFirstChild() == n) {\n                Node stmt = parent.getFirstChild();\n                // Don't fold if the statement is not a function call or member get\n                if (stmt.isCall() || stmt.isGetProp()) {\n                    Node callee = stmt.getFirstChild();\n                    if (callee.getType() == Token.GETPROP) {\n                        Node method = callee.getLastChild();\n                        if (method.getType() == Token.STRING) {\n                            String name = method.getString();\n                            // Don't fold if the call is to 'apply' or 'call'\n                            if (name.equals(\"apply\") || name.equals(\"call\")) {\n                                return false;\n                            }\n                        }\n                        // Don't fold if the call is to an instance method on 'Event'\n                        Node obj = callee.getFirstChild();\n                        if (obj.isName() && obj.getString().equals(\"Event\")) {\n                            return false;\n                        }\n                    }\n                    // Don't fold if the call has arguments.\n                    if (stmt.getChildCount() > 1) {\n                        return false;\n                    }\n                    // Don't fold if the parent is inside a loop or a conditional.\n                    Node grandparent = parent.getParent();\n                    if (grandparent != null) {\n                        switch (grandparent.getType()) {\n                            case Token.WHILE:\n                            case Token.DO:\n                            case Token.IF:\n                            case Token.FOR:\n                            case Token.FUNCTION:\n                            case Token.CATCH:\n                                return false;\n                            case Token.LABEL:\n                                if (grandparent.getParent().getType() != Token.FOR_IN) {\n                                    return false;\n                                }\n                                break;\n                        }\n                    }\n                    return true;\n                }\n            }\n            // Don't fold if the expression is the last expression in a sequence.\n            if (maybeExpr.isComma()) {\n                Node parent = maybeExpr.getParent();\n                if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n                    Node grandparent = parent.getParent();\n                    if (grandparent != null && NodeUtil.isStatementBlock(grandparent)) {\n                        Node lastChild = grandparent.getLastChild();\n                        if (lastChild == parent) {\n                            return false;\n                        }\n                    }\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..96c57aa8 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,75 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+        // We only fold expression nodes that are not top-level functions.\n+        if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isFunctionExpression(maybeExpr)) {\n+            Node parent = n.getParent();\n+            if (parent != null && parent.getType() == Token.EXPR_RESULT && parent.getFirstChild() == n) {\n+                Node stmt = parent.getFirstChild();\n+                // Don't fold if the statement is not a function call or member get\n+                if (stmt.isCall() || stmt.isGetProp()) {\n+                    Node callee = stmt.getFirstChild();\n+                    if (callee.getType() == Token.GETPROP) {\n+                        Node method = callee.getLastChild();\n+                        if (method.getType() == Token.STRING) {\n+                            String name = method.getString();\n+                            // Don't fold if the call is to 'apply' or 'call'\n+                            if (name.equals(\"apply\") || name.equals(\"call\")) {\n+                                return false;\n+                            }\n+                        }\n+                        // Don't fold if the call is to an instance method on 'Event'\n+                        Node obj = callee.getFirstChild();\n+                        if (obj.isName() && obj.getString().equals(\"Event\")) {\n+                            return false;\n+                        }\n+                    }\n+                    // Don't fold if the call has arguments.\n+                    if (stmt.getChildCount() > 1) {\n+                        return false;\n+                    }\n+                    // Don't fold if the parent is inside a loop or a conditional.\n+                    Node grandparent = parent.getParent();\n+                    if (grandparent != null) {\n+                        switch (grandparent.getType()) {\n+                            case Token.WHILE:\n+                            case Token.DO:\n+                            case Token.IF:\n+                            case Token.FOR:\n+                            case Token.FUNCTION:\n+                            case Token.CATCH:\n+                                return false;\n+                            case Token.LABEL:\n+                                if (grandparent.getParent().getType() != Token.FOR_IN) {\n+                                    return false;\n+                                }\n+                                break;\n+                        }\n+                    }\n+                    return true;\n+                }\n+            }\n+            // Don't fold if the expression is the last expression in a sequence.\n+            if (maybeExpr.isComma()) {\n+                Node parent = maybeExpr.getParent();\n+                if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n+                    Node grandparent = parent.getParent();\n+                    if (grandparent != null && NodeUtil.isStatementBlock(grandparent)) {\n+                        Node lastChild = grandparent.getLastChild();\n+                        if (lastChild == parent) {\n+                            return false;\n+                        }\n+                    }\n+                }\n+            }\n+            return true;\n+        }\n     }\n-\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}