{
    "patch": "            // adjust first for low year number (adding 12 years)\n            DateTimeField firstField = savedFields[0].iField;\n            int year = iDefaultYear;\n            DateTimeFieldType type = firstField.getType();\n            if (type == DateTimeFieldType.weekyear() || type == DateTimeFieldType.weekyearOfCentury()) {\n                int weeks = firstField.get(millis);\n                if (weeks <= 0) {\n                    year--;\n                } else if (weeks >= 50) {\n                    year++;\n                }\n                saveField(DateTimeFieldType.year(), year);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5a4e2807 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,18 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            // adjust first for low year number (adding 12 years)\n+            DateTimeField firstField = savedFields[0].iField;\n+            int year = iDefaultYear;\n+            DateTimeFieldType type = firstField.getType();\n+            if (type == DateTimeFieldType.weekyear() || type == DateTimeFieldType.weekyearOfCentury()) {\n+                int weeks = firstField.get(millis);\n+                if (weeks <= 0) {\n+                    year--;\n+                } else if (weeks >= 50) {\n+                    year++;\n+                }\n+                saveField(DateTimeFieldType.year(), year);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}