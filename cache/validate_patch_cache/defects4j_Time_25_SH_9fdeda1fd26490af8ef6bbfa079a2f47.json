{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n                // The bug was here: for negative offsets, we need to ensure that time is always *before* the next DST gap, \n                // otherwise the local time might jump over the gap to a time before it that has the same UTC offset.\n                long nextAdjustedLocal = nextTransition(nextAdjusted + 1) - offsetAdjusted;\n                if (instantAdjusted >= nextAdjustedLocal) {\n                    return offsetLocal;\n                }\n                return offsetAdjusted;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..eaa5284d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,20 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                // The bug was here: for negative offsets, we need to ensure that time is always *before* the next DST gap, \n+                // otherwise the local time might jump over the gap to a time before it that has the same UTC offset.\n+                long nextAdjustedLocal = nextTransition(nextAdjusted + 1) - offsetAdjusted;\n+                if (instantAdjusted >= nextAdjustedLocal) {\n+                    return offsetLocal;\n+                }\n+                return offsetAdjusted;\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}