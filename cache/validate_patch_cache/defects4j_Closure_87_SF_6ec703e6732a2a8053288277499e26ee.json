{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.EXPR_RESULT) {\n        Node child = n.getFirstChild();\n        if (child.getType() == Token.BLOCK && child.getChildCount() == 1) {\n            Node grandchild = child.getFirstChild();\n            if (grandchild.getType() == Token.EXPR_RESULT) {\n                Node greatgrandchild = grandchild.getFirstChild();\n                if (greatgrandchild.getType() == Token.IF) {\n                    return false;\n                }\n                return NodeUtil.isExpressionNode(grandchild);\n            }\n            if (grandchild.getType() != Token.CALL) {\n                return NodeUtil.isExpressionNode(grandchild);\n            }\n        }\n        return false;\n    } else if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n        Node child = n.getFirstChild();\n        if (child.getType() != Token.EXPR_RESULT && child.getType() != Token.CALL && child.getType() != Token.CATCH) {\n            if (child.getType() == Token.VAR || child.getType() == Token.LET || child.getType() == Token.CONST) {\n                Node nextChild = child.getNext();\n                // Detects early return for variable declaration and discards it\n                if(nextChild != null) {\n                    return false;\n                }\n            }\n            return NodeUtil.isExpressionNode(child);\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..b12ce549 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,38 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.EXPR_RESULT) {\n+        Node child = n.getFirstChild();\n+        if (child.getType() == Token.BLOCK && child.getChildCount() == 1) {\n+            Node grandchild = child.getFirstChild();\n+            if (grandchild.getType() == Token.EXPR_RESULT) {\n+                Node greatgrandchild = grandchild.getFirstChild();\n+                if (greatgrandchild.getType() == Token.IF) {\n+                    return false;\n+                }\n+                return NodeUtil.isExpressionNode(grandchild);\n+            }\n+            if (grandchild.getType() != Token.CALL) {\n+                return NodeUtil.isExpressionNode(grandchild);\n+            }\n+        }\n+        return false;\n+    } else if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n+        Node child = n.getFirstChild();\n+        if (child.getType() != Token.EXPR_RESULT && child.getType() != Token.CALL && child.getType() != Token.CATCH) {\n+            if (child.getType() == Token.VAR || child.getType() == Token.LET || child.getType() == Token.CONST) {\n+                Node nextChild = child.getNext();\n+                // Detects early return for variable declaration and discards it\n+                if(nextChild != null) {\n+                    return false;\n+                }\n+            }\n+            return NodeUtil.isExpressionNode(child);\n+        }\n     }\n-\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}