{
    "patch": "                if ((offsetLocal - offsetAdjusted) < 0) {\n                    // if we just return offsetAdjusted then the time is pushed\n                    // back before the transition, whereas it should be\n                    // on or after the transition\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        return offsetLocal;\n                    }\n                    // correction to handle rare cases where the previous transition\n                    // has greater offset\n                    long previousLocal = previousTransition(instantAdjusted);\n                    long previousAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                    if (previousLocal != previousAdjusted && getOffset(previousLocal) > offsetAdjusted) {\n                        return getOffset(previousLocal);\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..68b2ad31 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,22 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if ((offsetLocal - offsetAdjusted) < 0) {\n+                    // if we just return offsetAdjusted then the time is pushed\n+                    // back before the transition, whereas it should be\n+                    // on or after the transition\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                    // correction to handle rare cases where the previous transition\n+                    // has greater offset\n+                    long previousLocal = previousTransition(instantAdjusted);\n+                    long previousAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                    if (previousLocal != previousAdjusted && getOffset(previousLocal) > offsetAdjusted) {\n+                        return getOffset(previousLocal);\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}