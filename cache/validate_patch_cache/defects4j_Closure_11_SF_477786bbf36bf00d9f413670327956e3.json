{
    "patch": "public void testGetprop4() {\n    String key = \"foo\";\n    String expectedValue = \"bar\";\n    //Set property\n    System.setProperty(key, expectedValue);\n\n    //Run test\n    String[] warnings = new String[1];\n    String actualValue = PropertyUtil.getProperty(key, warnings);\n\n    //Verify results\n    assertNull(\"did not expect warning\", warnings[0]);\n    assertEquals(\"incorrect value\", expectedValue, actualValue);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..a24fab54 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() {\n+    String key = \"foo\";\n+    String expectedValue = \"bar\";\n+    //Set property\n+    System.setProperty(key, expectedValue);\n+\n+    //Run test\n+    String[] warnings = new String[1];\n+    String actualValue = PropertyUtil.getProperty(key, warnings);\n+\n+    //Verify results\n+    assertNull(\"did not expect warning\", warnings[0]);\n+    assertEquals(\"incorrect value\", expectedValue, actualValue);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}