{
    "patch": "              Node lhsFirstChild = lhs.getFirstChild();\n              if (NodeUtil.hasSideEffects(lhsFirstChild)) {\n                // if lhs has any side-effects, keep the original code and let DeadCodeElimination\n                // remove it.\n                return n;\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..aa5cb8a6 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,12 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              Node lhsFirstChild = lhs.getFirstChild();\n+              if (NodeUtil.hasSideEffects(lhsFirstChild)) {\n+                // if lhs has any side-effects, keep the original code and let DeadCodeElimination\n+                // remove it.\n+                return n;\n+              }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}