{
    "patch": "// Return false if n is not a function expression.\nif (!NodeUtil.isFunctionExpression(n)) {\n  return false;\n}\n\n// Get the parent node.\nNode parent = n.getParent();\nif (parent == null) {\n  return false;\n}\n\n// Determine the parent type and check if it's a valid context for a reduceable function expression.\nint parentType = parent.getType();\nswitch (parentType) {\n  case Token.CALL:\n  case Token.NEW:\n  case Token.OBJECTLIT:\n    return false;\n  case Token.EXPR_RESULT:\n  case Token.ASSIGN:\n  case Token.VAR:\n  case Token.RETURN:\n    return true;\n  case Token.BLOCK:\n    Node grandParent = parent.getParent();\n    return grandParent != null && grandParent.getType() == Token.FUNCTION;\n  default:\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..b2ce6870 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,35 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+// Return false if n is not a function expression.\n+if (!NodeUtil.isFunctionExpression(n)) {\n+  return false;\n+}\n+\n+// Get the parent node.\n+Node parent = n.getParent();\n+if (parent == null) {\n+  return false;\n+}\n+\n+// Determine the parent type and check if it's a valid context for a reduceable function expression.\n+int parentType = parent.getType();\n+switch (parentType) {\n+  case Token.CALL:\n+  case Token.NEW:\n+  case Token.OBJECTLIT:\n+    return false;\n+  case Token.EXPR_RESULT:\n+  case Token.ASSIGN:\n+  case Token.VAR:\n+  case Token.RETURN:\n+    return true;\n+  case Token.BLOCK:\n+    Node grandParent = parent.getParent();\n+    return grandParent != null && grandParent.getType() == Token.FUNCTION;\n+  default:\n+    return false;\n+}\n   }\n \n   /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}