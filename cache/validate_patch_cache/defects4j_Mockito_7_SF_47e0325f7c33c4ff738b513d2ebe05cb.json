{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    Class<?> declaringClass = typeVariable.getGenericDeclaration().getClass();\n    Type[] bounds = typeVariable.getBounds();\n    TypeVariable<?>[] variables = declaringClass.getTypeParameters();\n    if (bounds == null || bounds.length == 0) {\n        for (TypeVariable<?> variable : variables) {\n            if (typeVariable.equals(variable)) {\n                continue;\n            }\n            Type type = getActualTypeArgumentFor(variable);\n            if (type instanceof TypeVariable<?>) {\n                registerDependencies((TypeVariable<?>) type);\n            } else if (type != null) {\n                registerTypeVariablesOn(type);\n            }\n        }\n        return;\n    }\n    for (Type type : bounds) {\n        if (type instanceof TypeVariable<?>) {\n            registerDependencies((TypeVariable<?>) type);\n        } else if (type != null) {\n            registerTypeVariablesOn(type);\n        }\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument instanceof TypeVariable<?>) {\n        registerDependencies((TypeVariable<?>) actualTypeArgument);\n    } else if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}\n\nprivate void registerDependencies(TypeVariable<?> typeVariable) {\n    if (typeVariable == null) {\n        return;\n    }\n    Class<?> declaringClass = typeVariable.getGenericDeclaration().getClass();\n    TypeVariable<?>[] variables = declaringClass.getTypeParameters();\n    Type type = getActualTypeArgumentFor(typeVariable);\n    if (type instanceof TypeVariable<?>) {\n        registerDependencies((TypeVariable<?>) type);\n    } else if (type != null) {\n        registerTypeVariablesOn(type);\n    }\n    for (TypeVariable<?> variable : variables) {\n        if (typeVariable.equals(variable)) {\n            continue;\n        }\n        Type t = getActualTypeArgumentFor(variable);\n        if (t instanceof TypeVariable<?>) {\n            registerDependencies((TypeVariable<?>) t);\n        } else if (t != null) {\n            registerTypeVariablesOn(t);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..71a4b1804 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,67 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    Class<?> declaringClass = typeVariable.getGenericDeclaration().getClass();\n+    Type[] bounds = typeVariable.getBounds();\n+    TypeVariable<?>[] variables = declaringClass.getTypeParameters();\n+    if (bounds == null || bounds.length == 0) {\n+        for (TypeVariable<?> variable : variables) {\n+            if (typeVariable.equals(variable)) {\n+                continue;\n+            }\n+            Type type = getActualTypeArgumentFor(variable);\n+            if (type instanceof TypeVariable<?>) {\n+                registerDependencies((TypeVariable<?>) type);\n+            } else if (type != null) {\n+                registerTypeVariablesOn(type);\n+            }\n+        }\n+        return;\n+    }\n+    for (Type type : bounds) {\n+        if (type instanceof TypeVariable<?>) {\n+            registerDependencies((TypeVariable<?>) type);\n+        } else if (type != null) {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument instanceof TypeVariable<?>) {\n+        registerDependencies((TypeVariable<?>) actualTypeArgument);\n+    } else if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n+\n+private void registerDependencies(TypeVariable<?> typeVariable) {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    Class<?> declaringClass = typeVariable.getGenericDeclaration().getClass();\n+    TypeVariable<?>[] variables = declaringClass.getTypeParameters();\n+    Type type = getActualTypeArgumentFor(typeVariable);\n+    if (type instanceof TypeVariable<?>) {\n+        registerDependencies((TypeVariable<?>) type);\n+    } else if (type != null) {\n+        registerTypeVariablesOn(type);\n+    }\n+    for (TypeVariable<?> variable : variables) {\n+        if (typeVariable.equals(variable)) {\n+            continue;\n+        }\n+        Type t = getActualTypeArgumentFor(variable);\n+        if (t instanceof TypeVariable<?>) {\n+            registerDependencies((TypeVariable<?>) t);\n+        } else if (t != null) {\n+            registerTypeVariablesOn(t);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}