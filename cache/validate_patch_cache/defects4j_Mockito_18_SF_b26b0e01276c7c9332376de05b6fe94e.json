{
    "patch": "public static <T> ReturnTypeValues<T> returnValueFor(final Class<T> returnType) {\n    return new ReturnTypeValues<T>() {\n        @Override\n        public T getDefaultValue() {\n            return null;\n        }\n\n        @Override\n        public T getSpecificValue() {\n            if (returnType == String.class) {\n                return (T) \"specificValue\";\n            } else if (returnType == Boolean.class || returnType == boolean.class) {\n                return (T) Boolean.TRUE;\n            } else if (returnType == Iterable.class) {\n                return returnType.cast(Collections.emptyList());\n            } else {\n                // Return default value for all other types\n                return getDefaultValue();\n            }\n        }\n    };\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..2d09d255c 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,28 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> ReturnTypeValues<T> returnValueFor(final Class<T> returnType) {\n+    return new ReturnTypeValues<T>() {\n+        @Override\n+        public T getDefaultValue() {\n+            return null;\n+        }\n+\n+        @Override\n+        public T getSpecificValue() {\n+            if (returnType == String.class) {\n+                return (T) \"specificValue\";\n+            } else if (returnType == Boolean.class || returnType == boolean.class) {\n+                return (T) Boolean.TRUE;\n+            } else if (returnType == Iterable.class) {\n+                return returnType.cast(Collections.emptyList());\n+            } else {\n+                // Return default value for all other types\n+                return getDefaultValue();\n+            }\n+        }\n+    };\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}