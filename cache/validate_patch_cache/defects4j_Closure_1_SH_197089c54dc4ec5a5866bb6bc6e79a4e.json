{
    "patch": "if (!modifyCallers) {\n  // Strip unreferenced args.\n  Node firstParam = argList.getFirstChild();\n  while (firstParam != null) {\n    Node nextParam = firstParam.getNext();\n    String paramName = firstParam.getString();\n    Var var = fnScope.getOwnSlot(paramName);\n    // In some rare cases, it's possible for a local variable to have the same name.\n    if (var != null && var.getParentNode() == function) {\n      if (!referenced.contains(var)) {\n        argList.removeChild(firstParam);\n        compiler.reportCodeChange();\n      }\n    }\n    firstParam = nextParam;\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b8d5c186 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+if (!modifyCallers) {\n+  // Strip unreferenced args.\n+  Node firstParam = argList.getFirstChild();\n+  while (firstParam != null) {\n+    Node nextParam = firstParam.getNext();\n+    String paramName = firstParam.getString();\n+    Var var = fnScope.getOwnSlot(paramName);\n+    // In some rare cases, it's possible for a local variable to have the same name.\n+    if (var != null && var.getParentNode() == function) {\n+      if (!referenced.contains(var)) {\n+        argList.removeChild(firstParam);\n+        compiler.reportCodeChange();\n+      }\n+    }\n+    firstParam = nextParam;\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}