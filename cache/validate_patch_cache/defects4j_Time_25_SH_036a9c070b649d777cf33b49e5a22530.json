{
    "patch": "        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    // we should take the later of the two transitions\n                    // this handles the case where an invalid local time\n                    // is skipped entirely, ensuring it is still invalid\n                    instantLocal = (nextAdjusted > nextLocal ? nextAdjusted : nextLocal) + offsetAdjusted;\n                    return getOffset(instantLocal);\n                } else {\n                    // if local time is adjusted to a transition, recalculate the adjustment\n                    int transitions = getAvailableTransitionCount(instantLocal);\n                    if (transitions == 0) {\n                        // no more transitions available, use adjusted offset\n                        return offsetAdjusted;\n                    } else {\n                        // get the next transitions and compare which one is more recent\n                        long nextTransition = nextTransition(instantLocal);\n                        for (int i = 0; i < transitions; i++) {\n                            long transition = nextTransition(instantLocal, i);\n                            if (getOffset(transition) == offsetLocal) {\n                                nextTransition = transition;\n                            } else {\n                                break;\n                            }\n                        }\n                        // use the most recent transitions and calculate adjustment\n                        instantLocal = nextTransition + offsetLocal;\n                        return getOffset(instantLocal);\n                    }\n                }\n            } else {\n                // if local time is exactly at a transition, recalculate the adjustment\n                int transitions = getAvailableTransitionCount(instantLocal);\n                if (transitions == 0) {\n                    // no more transitions available, use adjusted offset\n                    return offsetAdjusted;\n                } else {\n                    // get the next transitions and compare which one is more recent\n                    long nextTransition = nextTransition(instantLocal);\n                    for (int i = 0; i < transitions; i++) {\n                        long transition = nextTransition(instantLocal, i);\n                        if (getOffset(transition) == offsetLocal) {\n                            nextTransition = transition;\n                        } else {\n                            break;\n                        }\n                    }\n                    // use the most recent transitions and calculate adjustment\n                    instantLocal = nextTransition + offsetLocal;\n                    return getOffset(instantLocal);\n                }\n            }\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..04e18577 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,68 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        // if the offsets differ, we must be near a DST boundary\n+        if (offsetLocal != offsetAdjusted) {\n+            // we need to ensure that time is always after the DST gap\n+            // this happens naturally for positive offsets, but not for negative\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    // we should take the later of the two transitions\n+                    // this handles the case where an invalid local time\n+                    // is skipped entirely, ensuring it is still invalid\n+                    instantLocal = (nextAdjusted > nextLocal ? nextAdjusted : nextLocal) + offsetAdjusted;\n+                    return getOffset(instantLocal);\n+                } else {\n+                    // if local time is adjusted to a transition, recalculate the adjustment\n+                    int transitions = getAvailableTransitionCount(instantLocal);\n+                    if (transitions == 0) {\n+                        // no more transitions available, use adjusted offset\n+                        return offsetAdjusted;\n+                    } else {\n+                        // get the next transitions and compare which one is more recent\n+                        long nextTransition = nextTransition(instantLocal);\n+                        for (int i = 0; i < transitions; i++) {\n+                            long transition = nextTransition(instantLocal, i);\n+                            if (getOffset(transition) == offsetLocal) {\n+                                nextTransition = transition;\n+                            } else {\n+                                break;\n+                            }\n+                        }\n+                        // use the most recent transitions and calculate adjustment\n+                        instantLocal = nextTransition + offsetLocal;\n+                        return getOffset(instantLocal);\n+                    }\n+                }\n+            } else {\n+                // if local time is exactly at a transition, recalculate the adjustment\n+                int transitions = getAvailableTransitionCount(instantLocal);\n+                if (transitions == 0) {\n+                    // no more transitions available, use adjusted offset\n+                    return offsetAdjusted;\n+                } else {\n+                    // get the next transitions and compare which one is more recent\n+                    long nextTransition = nextTransition(instantLocal);\n+                    for (int i = 0; i < transitions; i++) {\n+                        long transition = nextTransition(instantLocal, i);\n+                        if (getOffset(transition) == offsetLocal) {\n+                            nextTransition = transition;\n+                        } else {\n+                            break;\n+                        }\n+                    }\n+                    // use the most recent transitions and calculate adjustment\n+                    instantLocal = nextTransition + offsetLocal;\n+                    return getOffset(instantLocal);\n+                }\n+            }\n+        }\n+        return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}