{
    "patch": "      TypeI typeI = functionType.getTypeOfThis();\n      if (typeI != null) {\n        ObjectType thisType = ObjectType.cast(typeI);\n        Node callerNode = n.getParent();\n        if (callerNode.isGetProp() || callerNode.isGetElem()) {\n          ensureTyped(t, callerNode.getFirstChild(), thisType);\n        } else {\n          report(t, n, INVALID_THIS_TYPE);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..6c366530 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      TypeI typeI = functionType.getTypeOfThis();\n+      if (typeI != null) {\n+        ObjectType thisType = ObjectType.cast(typeI);\n+        Node callerNode = n.getParent();\n+        if (callerNode.isGetProp() || callerNode.isGetElem()) {\n+          ensureTyped(t, callerNode.getFirstChild(), thisType);\n+        } else {\n+          report(t, n, INVALID_THIS_TYPE);\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}