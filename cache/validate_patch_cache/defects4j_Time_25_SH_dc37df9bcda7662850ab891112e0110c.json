{
    "patch": "            // Positive offset change implies a gap in spring, which pushes the local time forward.\n            // Negative offset change implies an overlap in fall, which pulls the local time backward.\n            if (offsetLocal > offsetAdjusted) {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantAdjusted - (offsetLocal - offsetAdjusted));\n                if (prevLocal != prevAdjusted) {\n                    return offsetLocal;\n                } else {\n                    int beforeDiff = offsetLocal - getOffset(prevLocal + 1);\n                    int afterDiff = getOffset(prevLocal) - offsetAdjusted;\n                    if (beforeDiff > afterDiff) {\n                        return offsetLocal;\n                    }\n                }\n            } else {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantAdjusted - (offsetLocal - offsetAdjusted));\n                if (nextLocal != nextAdjusted) {\n                    int beforeDiff = getOffset(nextLocal - 1) - offsetLocal;\n                    int afterDiff = offsetAdjusted - getOffset(nextLocal);\n                    if (beforeDiff >= afterDiff) {\n                        return offsetLocal;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..15a3b493 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,29 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // Positive offset change implies a gap in spring, which pushes the local time forward.\n+            // Negative offset change implies an overlap in fall, which pulls the local time backward.\n+            if (offsetLocal > offsetAdjusted) {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantAdjusted - (offsetLocal - offsetAdjusted));\n+                if (prevLocal != prevAdjusted) {\n+                    return offsetLocal;\n+                } else {\n+                    int beforeDiff = offsetLocal - getOffset(prevLocal + 1);\n+                    int afterDiff = getOffset(prevLocal) - offsetAdjusted;\n+                    if (beforeDiff > afterDiff) {\n+                        return offsetLocal;\n+                    }\n+                }\n+            } else {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantAdjusted - (offsetLocal - offsetAdjusted));\n+                if (nextLocal != nextAdjusted) {\n+                    int beforeDiff = getOffset(nextLocal - 1) - offsetLocal;\n+                    int afterDiff = offsetAdjusted - getOffset(nextLocal);\n+                    if (beforeDiff >= afterDiff) {\n+                        return offsetLocal;\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}