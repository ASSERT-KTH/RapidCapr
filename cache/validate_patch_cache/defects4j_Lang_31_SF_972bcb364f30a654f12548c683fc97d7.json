{
    "patch": "public class StringUtils {\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t    int csLength = cs.length();\n\t    int searchLength = searchChars.length;\n\t    int foundCount = 0;\n\t    outer:\n\t    for (int i = 0; i < csLength; i++) {\n\t        int ch = Character.codePointAt(cs, i);\n\t        for (int j = 0; j < searchLength; j++) {\n\t            if (Character.compare(ch, searchChars[j]) == 0) {\n\t                if (Character.isSupplementaryCodePoint(ch)) {\n                        i++; // skip the second surrogate of a supplementary character\n                    }\n\t                foundCount++;\n\t                if (foundCount == searchLength) {\n\t                    break outer;\n\t                }\n\t                break; // break the inner loop, continue with the next character in the outer loop\n\t            }\n\t        }\n\t    }\n\t    return (foundCount == searchLength);\n\t}\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..5015070b 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,30 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n+public class StringUtils {\n \tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+\t    int csLength = cs.length();\n+\t    int searchLength = searchChars.length;\n+\t    int foundCount = 0;\n+\t    outer:\n+\t    for (int i = 0; i < csLength; i++) {\n+\t        int ch = Character.codePointAt(cs, i);\n+\t        for (int j = 0; j < searchLength; j++) {\n+\t            if (Character.compare(ch, searchChars[j]) == 0) {\n+\t                if (Character.isSupplementaryCodePoint(ch)) {\n+                        i++; // skip the second surrogate of a supplementary character\n+                    }\n+\t                foundCount++;\n+\t                if (foundCount == searchLength) {\n+\t                    break outer;\n+\t                }\n+\t                break; // break the inner loop, continue with the next character in the outer loop\n+\t            }\n+\t        }\n+\t    }\n+\t    return (foundCount == searchLength);\n+\t}\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}