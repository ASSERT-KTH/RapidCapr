{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos >= 0) {\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    } else {\n        long millis = bucket.computeMillis(false, text);\n        DateFormatSymbols symbols = new DateFormatSymbols(iLocale);\n        String[] months = symbols.getMonths();\n        String monthName = StringUtils.substring(text, position, position + 2);\n        int monthOfYear = -1;\n        for (int i = 0; i < 12; i++) {\n            if (monthName.equalsIgnoreCase(months[i])) {\n                monthOfYear = i + 1;\n                break;\n            }\n        }\n        if (monthOfYear < 0) {\n            throw new IllegalArgumentException(\"Invalid month name: \" + monthName);\n        }\n        int dayOfMonth = Integer.parseInt(text.substring(position + 3, position + 5));\n        int maxDayOfMonth = chrono.dayOfMonth().getMaximumValue(millis);\n        if (dayOfMonth > maxDayOfMonth) {\n            dayOfMonth = maxDayOfMonth;\n        }\n        LocalDate date = new LocalDate(millis, chrono);\n        date = date.withMonthOfYear(monthOfYear).withDayOfMonth(dayOfMonth);\n        instant.setMillis(date.toDateTimeAtStartOfDay(chrono.getZone()).getMillis());\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return text.length();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..23041724 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,21 +697,20 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos >= 0) {\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n@@ -725,7 +724,36 @@ public class DateTimeFormatter {\n             instant.setZone(iZone);\n         }\n         return newPos;\n+    } else {\n+        long millis = bucket.computeMillis(false, text);\n+        DateFormatSymbols symbols = new DateFormatSymbols(iLocale);\n+        String[] months = symbols.getMonths();\n+        String monthName = StringUtils.substring(text, position, position + 2);\n+        int monthOfYear = -1;\n+        for (int i = 0; i < 12; i++) {\n+            if (monthName.equalsIgnoreCase(months[i])) {\n+                monthOfYear = i + 1;\n+                break;\n+            }\n+        }\n+        if (monthOfYear < 0) {\n+            throw new IllegalArgumentException(\"Invalid month name: \" + monthName);\n+        }\n+        int dayOfMonth = Integer.parseInt(text.substring(position + 3, position + 5));\n+        int maxDayOfMonth = chrono.dayOfMonth().getMaximumValue(millis);\n+        if (dayOfMonth > maxDayOfMonth) {\n+            dayOfMonth = maxDayOfMonth;\n+        }\n+        LocalDate date = new LocalDate(millis, chrono);\n+        date = date.withMonthOfYear(monthOfYear).withDayOfMonth(dayOfMonth);\n+        instant.setMillis(date.toDateTimeAtStartOfDay(chrono.getZone()).getMillis());\n+        instant.setChronology(chrono);\n+        if (iZone != null) {\n+            instant.setZone(iZone);\n+        }\n+        return text.length();\n     }\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}