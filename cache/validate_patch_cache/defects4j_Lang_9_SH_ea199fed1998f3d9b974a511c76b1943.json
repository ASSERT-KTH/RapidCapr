{
    "patch": "        if(currentStrategy == null){\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        while (patternMatcher.regionStart()<pattern.length()) {\n            patternMatcher.find();\n            String intermediate = pattern.substring(patternMatcher.regionStart()-1, patternMatcher.start());\n            if (currentFormatField.contains(\"y\") && intermediate.contains(\" \") && !parseInteger(intermediate).isEmpty()) {\n                if (currentStrategy.addRegex(this, regex)) {\n                    collector.add(currentStrategy);\n                }\n                currentStrategy = getStrategy(\"y\");\n                currentFormatField = \"y\";\n                continue;\n            }\n            nextFormatField = patternMatcher.group();                \n            nextStrategy = getStrategy(nextFormatField);\n            if (currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            currentFormatField = nextFormatField;\n            currentStrategy = nextStrategy;\n        }\n        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField = null;\n        strategies = collector.toArray(new Strategy[collector.size()]);\n        parsePattern = Pattern.compile(regex.toString());\n",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..947c2aea 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,38 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+        if(currentStrategy == null){\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n+        if(currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        }\n+        while (patternMatcher.regionStart()<pattern.length()) {\n+            patternMatcher.find();\n+            String intermediate = pattern.substring(patternMatcher.regionStart()-1, patternMatcher.start());\n+            if (currentFormatField.contains(\"y\") && intermediate.contains(\" \") && !parseInteger(intermediate).isEmpty()) {\n+                if (currentStrategy.addRegex(this, regex)) {\n+                    collector.add(currentStrategy);\n+                }\n+                currentStrategy = getStrategy(\"y\");\n+                currentFormatField = \"y\";\n+                continue;\n+            }\n+            nextFormatField = patternMatcher.group();                \n+            nextStrategy = getStrategy(nextFormatField);\n+            if (currentStrategy.addRegex(this, regex)) {\n+                collector.add(currentStrategy);\n+            }\n+            currentFormatField = nextFormatField;\n+            currentStrategy = nextStrategy;\n+        }\n+        if(currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        }\n+        currentFormatField = null;\n+        strategies = collector.toArray(new Strategy[collector.size()]);\n+        parsePattern = Pattern.compile(regex.toString());\n+\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}