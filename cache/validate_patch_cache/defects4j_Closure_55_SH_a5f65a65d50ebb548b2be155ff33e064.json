{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    if (n.isCall()) {\n        Node callee = n.getFirstChild();\n        return callee.isFunction() || callee.isArrowFunction();\n    }\n    return NodeUtil.isFunctionExpression(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..f91d4905 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,13 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    if (n.isCall()) {\n+        Node callee = n.getFirstChild();\n+        return callee.isFunction() || callee.isArrowFunction();\n+    }\n     return NodeUtil.isFunctionExpression(n);\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}