{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal + initialOffset;\n    final int offsetAdjustment = getOffset(instantAdjusted);\n\n    if (initialOffset == offsetAdjustment) {\n        // There is no transition at instantLocal; return the initial offset\n        return initialOffset;\n    }\n\n    final long transition = (initialOffset > offsetAdjustment) ?\n            previousTransition(instantAdjusted) :\n            nextTransition(instantAdjusted);\n\n    if (transition == Long.MAX_VALUE || transition == Long.MIN_VALUE) {\n        // There is no transition at instantLocal\n        return initialOffset;\n    }\n\n    final int offsetBefore = getOffset(transition - 1);\n    final int offsetAfter = getOffset(transition);\n\n    if (initialOffset > offsetAdjustment) {\n        // We are in a gap\n        if (initialOffset != offsetBefore) {\n            // The local time is in the skipped range, which is illegal\n            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + new DateTime(instantLocal, DateTimeZone.forOffsetMillis(initialOffset)));\n        }\n        return offsetBefore;\n    } else {\n        // We are in an overlap\n        return (instantLocal < transition - offsetAfter * DateTimeConstants.MILLIS_PER_HOUR) ? offsetBefore : offsetAfter;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..8dd3c005 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,40 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    final long instantAdjusted = instantLocal + initialOffset;\n+    final int offsetAdjustment = getOffset(instantAdjusted);\n+\n+    if (initialOffset == offsetAdjustment) {\n+        // There is no transition at instantLocal; return the initial offset\n+        return initialOffset;\n+    }\n+\n+    final long transition = (initialOffset > offsetAdjustment) ?\n+            previousTransition(instantAdjusted) :\n+            nextTransition(instantAdjusted);\n+\n+    if (transition == Long.MAX_VALUE || transition == Long.MIN_VALUE) {\n+        // There is no transition at instantLocal\n+        return initialOffset;\n+    }\n+\n+    final int offsetBefore = getOffset(transition - 1);\n+    final int offsetAfter = getOffset(transition);\n+\n+    if (initialOffset > offsetAdjustment) {\n+        // We are in a gap\n+        if (initialOffset != offsetBefore) {\n+            // The local time is in the skipped range, which is illegal\n+            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + new DateTime(instantLocal, DateTimeZone.forOffsetMillis(initialOffset)));\n         }\n-        return offsetAdjusted;\n+        return offsetBefore;\n+    } else {\n+        // We are in an overlap\n+        return (instantLocal < transition - offsetAfter * DateTimeConstants.MILLIS_PER_HOUR) ? offsetBefore : offsetAfter;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}