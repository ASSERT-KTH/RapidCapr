{
    "patch": "public static String encode(String s) {\n    StringBuffer out = new StringBuffer(s.length());\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n    OutputStreamWriter writer;\n    try {\n        writer = new OutputStreamWriter(new HexOutputStream(buf), \"UTF-8\");\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == ' ') {\n                out.append('+');\n            } else if (c <= '!' || c >= '~' || c == '+' || c == '%') {\n                writer.write(c);\n                writer.flush();\n                String st = buf.toString(\"UTF-8\");\n                for (int j = 0; j < st.length(); j++) {\n                    out.append(Character.toUpperCase(st.charAt(j)));\n                }\n                buf.reset();\n            } else {\n                out.append(c);\n            }\n        }\n        writer.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return out.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..079157a2 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,34 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String encode(String s) {\n+    StringBuffer out = new StringBuffer(s.length());\n+    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n+    OutputStreamWriter writer;\n+    try {\n+        writer = new OutputStreamWriter(new HexOutputStream(buf), \"UTF-8\");\n+        for (int i = 0; i < s.length(); i++) {\n+            char c = s.charAt(i);\n+            if (c == ' ') {\n+                out.append('+');\n+            } else if (c <= '!' || c >= '~' || c == '+' || c == '%') {\n+                writer.write(c);\n+                writer.flush();\n+                String st = buf.toString(\"UTF-8\");\n+                for (int j = 0; j < st.length(); j++) {\n+                    out.append(Character.toUpperCase(st.charAt(j)));\n+                }\n+                buf.reset();\n+            } else {\n+                out.append(c);\n+            }\n+        }\n+        writer.close();\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+    return out.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}