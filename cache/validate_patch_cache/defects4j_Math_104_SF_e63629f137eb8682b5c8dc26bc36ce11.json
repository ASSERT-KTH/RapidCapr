{
    "patch": "public static double regularizedGamma(final double a, final double x) {\n    final double epsilon = 1e-15;\n    final double maxIterations = 1000;\n    double sum = 0.0;\n    double lastSum = Double.NaN;\n    int i = 0;\n    do {\n        lastSum = sum;\n        sum += (Math.pow(x, i) * Math.exp(-x)) / Gamma.gamma(a + i);\n        i++;\n        if (i > maxIterations) {\n            throw new RuntimeException(\"Maximum number of iterations exceeded\");\n        }\n    } while (Math.abs(sum - lastSum) > epsilon);\n\n    return sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..b06b2f6be 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,23 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(final double a, final double x) {\n+    final double epsilon = 1e-15;\n+    final double maxIterations = 1000;\n+    double sum = 0.0;\n+    double lastSum = Double.NaN;\n+    int i = 0;\n+    do {\n+        lastSum = sum;\n+        sum += (Math.pow(x, i) * Math.exp(-x)) / Gamma.gamma(a + i);\n+        i++;\n+        if (i > maxIterations) {\n+            throw new RuntimeException(\"Maximum number of iterations exceeded\");\n+        }\n+    } while (Math.abs(sum - lastSum) > epsilon);\n+\n+    return sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}