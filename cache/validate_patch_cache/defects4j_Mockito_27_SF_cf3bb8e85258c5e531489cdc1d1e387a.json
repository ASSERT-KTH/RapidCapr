{
    "patch": "public <T> void resetMock(T mock) {\n    if (!(mock instanceof Factory)) {\n        return;\n    }\n    MethodInterceptorFilter newFilter = null;\n    try {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MockSettingsImpl settings = new MockSettingsImpl().defaultAnswer(Mockito.RETURNS_DEFAULTS);\n        if (mock.getClass().getInterfaces() != null && mock.getClass().getInterfaces().length > 0) {\n            settings.extraInterfaces(mock.getClass().getInterfaces());\n        }\n        newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n        ((Factory) mock).setCallback(0, newFilter);\n    } catch (IllegalArgumentException e) {\n        // ignore\n    } finally {\n        if (newFilter != null) {\n            newFilter.resetInvocationRegister();\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..decf08bed 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,29 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (!(mock instanceof Factory)) {\n+        return;\n+    }\n+    MethodInterceptorFilter newFilter = null;\n+    try {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MockSettingsImpl settings = new MockSettingsImpl().defaultAnswer(Mockito.RETURNS_DEFAULTS);\n+        if (mock.getClass().getInterfaces() != null && mock.getClass().getInterfaces().length > 0) {\n+            settings.extraInterfaces(mock.getClass().getInterfaces());\n+        }\n+        newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n+        ((Factory) mock).setCallback(0, newFilter);\n+    } catch (IllegalArgumentException e) {\n+        // ignore\n+    } finally {\n+        if (newFilter != null) {\n+            newFilter.resetInvocationRegister();\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}