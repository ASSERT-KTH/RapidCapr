{
    "patch": "public String getprop(String propName) throws IOException {\n    String[] args = { \"/system/bin/getprop\", propName };\n    Process process = new ProcessBuilder(args).start();\n    InputStream in = process.getInputStream();\n    byte[] buffer = new byte[1024];\n    int len = in.read(buffer);\n    in.close();\n    String propValue = new String(buffer, 0, len);\n    if (propValue.endsWith(\"\\n\")) {\n        propValue = propValue.substring(0, propValue.length() - 1);\n    }\n    return propValue;\n}\n\npublic void testGetprop4() throws IOException {\n    String propName = \"ro.serialno\";\n    String propValue = getprop(propName);\n    String[] warnings = { \"Warning: AAAAAA\" };\n    boolean isWarningPresent = false;\n    for (String warning : warnings) {\n        if (propValue.contains(warning)) {\n            isWarningPresent = true;\n            break;\n        }\n    }\n    assertTrue(\"expected a warning\", isWarningPresent);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..abde9f29 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String propName) throws IOException {\n+    String[] args = { \"/system/bin/getprop\", propName };\n+    Process process = new ProcessBuilder(args).start();\n+    InputStream in = process.getInputStream();\n+    byte[] buffer = new byte[1024];\n+    int len = in.read(buffer);\n+    in.close();\n+    String propValue = new String(buffer, 0, len);\n+    if (propValue.endsWith(\"\\n\")) {\n+        propValue = propValue.substring(0, propValue.length() - 1);\n+    }\n+    return propValue;\n+}\n+\n+public void testGetprop4() throws IOException {\n+    String propName = \"ro.serialno\";\n+    String propValue = getprop(propName);\n+    String[] warnings = { \"Warning: AAAAAA\" };\n+    boolean isWarningPresent = false;\n+    for (String warning : warnings) {\n+        if (propValue.contains(warning)) {\n+            isWarningPresent = true;\n+            break;\n+        }\n+    }\n+    assertTrue(\"expected a warning\", isWarningPresent);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}