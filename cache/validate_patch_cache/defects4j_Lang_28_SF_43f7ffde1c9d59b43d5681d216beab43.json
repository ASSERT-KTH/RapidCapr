{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    // TODO: Protect from ArrayIndexOutOfBounds\n    final int len = input.length();\n    if (len <= index + 1) {\n        return 0;\n    }\n    int semicolonIndex = input.subSequence(index, len).toString().indexOf(';');\n    if (semicolonIndex == -1) {\n        return 0;\n    }\n    semicolonIndex += index;\n    if (semicolonIndex - index <= 2) {\n        return 0;\n    }\n    String valueStr = input.subSequence(index + 2, semicolonIndex).toString();\n    boolean isHex = (valueStr.charAt(0) == 'x') || (valueStr.charAt(0) == 'X');\n    int radix = isHex ? 16 : 10;\n    int value;\n    try {\n        value = Integer.parseInt(valueStr, radix);\n    } catch (NumberFormatException e) {\n        return 0;\n    }\n    if (Character.isSupplementaryCodePoint(value)) {\n        out.write(Character.toChars(value));\n    } else {\n        out.write(value);\n    }\n    return semicolonIndex + 1 - index;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..22926263 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -32,37 +32,34 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n-\n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-                return 0;\n-            }\n-\n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n-        }\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    // TODO: Protect from ArrayIndexOutOfBounds\n+    final int len = input.length();\n+    if (len <= index + 1) {\n+        return 0;\n+    }\n+    int semicolonIndex = input.subSequence(index, len).toString().indexOf(';');\n+    if (semicolonIndex == -1) {\n         return 0;\n     }\n+    semicolonIndex += index;\n+    if (semicolonIndex - index <= 2) {\n+        return 0;\n+    }\n+    String valueStr = input.subSequence(index + 2, semicolonIndex).toString();\n+    boolean isHex = (valueStr.charAt(0) == 'x') || (valueStr.charAt(0) == 'X');\n+    int radix = isHex ? 16 : 10;\n+    int value;\n+    try {\n+        value = Integer.parseInt(valueStr, radix);\n+    } catch (NumberFormatException e) {\n+        return 0;\n+    }\n+    if (Character.isSupplementaryCodePoint(value)) {\n+        out.write(Character.toChars(value));\n+    } else {\n+        out.write(value);\n+    }\n+    return semicolonIndex + 1 - index;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape expected:<[\u0080\u009f]> but was:<[&P&#x9F;]>",
    "test_result": "FAIL"
}