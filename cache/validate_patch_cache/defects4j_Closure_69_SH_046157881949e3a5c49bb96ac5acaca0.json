{
    "patch": "      if (functionType.getTypeOfThis() != null) {\n        Node parent = n.getParent();\n        // Allow calls of the form \"Foo.prototype.method.call(this, ...)\".\n        if (parent != null &&\n            parent.isGetProp() &&\n            parent.getLastChild().getString().equals(\"call\") &&\n            parent.getParent() != null &&\n            parent.getParent().isCall() &&\n            parent.getParent().getFirstChild() == parent &&\n            parent.getParent().getChildCount() == 2 &&\n            parent.getFirstChild().matchesQualifiedName(\n                context.getScope().getVar(\"Function\").getType().getReferenceName() + \".prototype.method\")) {\n          return;\n        }\n        report(t, n, EXPLICIT_THIS_PARAMETER, functionType.toString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..57a0a366 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getTypeOfThis() != null) {\n+        Node parent = n.getParent();\n+        // Allow calls of the form \"Foo.prototype.method.call(this, ...)\".\n+        if (parent != null &&\n+            parent.isGetProp() &&\n+            parent.getLastChild().getString().equals(\"call\") &&\n+            parent.getParent() != null &&\n+            parent.getParent().isCall() &&\n+            parent.getParent().getFirstChild() == parent &&\n+            parent.getParent().getChildCount() == 2 &&\n+            parent.getFirstChild().matchesQualifiedName(\n+                context.getScope().getVar(\"Function\").getType().getReferenceName() + \".prototype.method\")) {\n+          return;\n+        }\n+        report(t, n, EXPLICIT_THIS_PARAMETER, functionType.toString());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}