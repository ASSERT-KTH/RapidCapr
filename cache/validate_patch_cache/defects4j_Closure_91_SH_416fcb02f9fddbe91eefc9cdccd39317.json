{
    "patch": "      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n        } else {\n          // Only traverse the right side if it's not an assignment to a prototype, and ignore\n          // assignments of function expressions to properties or variables (e.g. var x = function() {}).\n          boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(rhs);\n          boolean isFunctionExpression =\n              (NodeUtil.isFunctionExpression(rhs) && lhs.getType() != Token.GETELEM);\n          if (NodeUtil.isGet(lhs) && !isFunctionDeclaration && !isFunctionExpression) {\n            if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n            Node llhs = lhs.getFirstChild();\n            if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n          } else if (parent.getParent() != null) {\n            Node parentParent = parent.getParent();\n            if (NodeUtil.isGet(parentParent) && parentParent.getType() == Token.GETPROP &&\n                parentParent.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            } \n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..1cefd452 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,40 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+        } else {\n+          // Only traverse the right side if it's not an assignment to a prototype, and ignore\n+          // assignments of function expressions to properties or variables (e.g. var x = function() {}).\n+          boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(rhs);\n+          boolean isFunctionExpression =\n+              (NodeUtil.isFunctionExpression(rhs) && lhs.getType() != Token.GETELEM);\n+          if (NodeUtil.isGet(lhs) && !isFunctionDeclaration && !isFunctionExpression) {\n+            if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+            Node llhs = lhs.getFirstChild();\n+            if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+          } else if (parent.getParent() != null) {\n+            Node parentParent = parent.getParent();\n+            if (NodeUtil.isGet(parentParent) && parentParent.getType() == Token.GETPROP &&\n+                parentParent.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            } \n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 110 expected:<0> but was:<1>",
    "test_result": "FAIL"
}