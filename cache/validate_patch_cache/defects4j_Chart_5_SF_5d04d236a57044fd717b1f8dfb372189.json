{
    "patch": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n\n    // Check if the series is sorted and find the index where to insert/update the item\n    int index;\n    if (this.autoSort) {\n        index = Collections.binarySearch(this.data, new XYDataItem(x, y));\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            // If the item already exists and duplicates are not allowed, throw an exception\n            throw new IllegalArgumentException(\"X-value already exists and duplicates are not allowed.\");\n        } else if (index < 0) {\n            // If the item does not exist, insert it at the appropriate position\n            index = -index - 1;\n            this.data.add(index, new XYDataItem(x, y));\n        } else {\n            // If duplicates are allowed, update the existing item\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            XYDataItem overwritten;\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            } catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n            return overwritten;\n        }\n    } else {\n        // If the series is not sorted, find the index of the item with the same X-value (if any)\n        index = indexOf(x);\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            // If the item already exists and duplicates are not allowed, throw an exception\n            throw new IllegalArgumentException(\"X-value already exists and duplicates are not allowed.\");\n        } else if (index >= 0 && this.allowDuplicateXValues) {\n            // If the item already exists and duplicates are allowed, update the existing item\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            XYDataItem overwritten;\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            } catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n            return overwritten;\n        } else {\n            // If the item does not exist, add it to the series\n            this.data.add(new XYDataItem(x, y));\n        }\n    }\n\n    // Check if the maximum item count has been exceeded and remove the first item if necessary\n    if (getItemCount() > this.maximumItemCount) {\n        this.data.remove(0);\n    }\n\n    // Notify listeners that the series has changed and return null\n    fireSeriesChanged();\n    return null;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..b3f36fe 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,66 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+public XYDataItem addOrUpdate(Number x, Number y) {\n+    if (x == null) {\n+        throw new IllegalArgumentException(\"Null 'x' argument.\");\n+    }\n+\n+    // Check if the series is sorted and find the index where to insert/update the item\n+    int index;\n+    if (this.autoSort) {\n+        index = Collections.binarySearch(this.data, new XYDataItem(x, y));\n+        if (index >= 0 && !this.allowDuplicateXValues) {\n+            // If the item already exists and duplicates are not allowed, throw an exception\n+            throw new IllegalArgumentException(\"X-value already exists and duplicates are not allowed.\");\n+        } else if (index < 0) {\n+            // If the item does not exist, insert it at the appropriate position\n+            index = -index - 1;\n+            this.data.add(index, new XYDataItem(x, y));\n+        } else {\n+            // If duplicates are allowed, update the existing item\n+            XYDataItem existing = (XYDataItem) this.data.get(index);\n+            XYDataItem overwritten;\n+            try {\n+                overwritten = (XYDataItem) existing.clone();\n+            } catch (CloneNotSupportedException e) {\n+                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+            }\n+            existing.setY(y);\n+            return overwritten;\n+        }\n+    } else {\n+        // If the series is not sorted, find the index of the item with the same X-value (if any)\n+        index = indexOf(x);\n+        if (index >= 0 && !this.allowDuplicateXValues) {\n+            // If the item already exists and duplicates are not allowed, throw an exception\n+            throw new IllegalArgumentException(\"X-value already exists and duplicates are not allowed.\");\n+        } else if (index >= 0 && this.allowDuplicateXValues) {\n+            // If the item already exists and duplicates are allowed, update the existing item\n+            XYDataItem existing = (XYDataItem) this.data.get(index);\n+            XYDataItem overwritten;\n+            try {\n+                overwritten = (XYDataItem) existing.clone();\n+            } catch (CloneNotSupportedException e) {\n+                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+            }\n+            existing.setY(y);\n+            return overwritten;\n+        } else {\n+            // If the item does not exist, add it to the series\n+            this.data.add(new XYDataItem(x, y));\n+        }\n+    }\n+\n+    // Check if the maximum item count has been exceeded and remove the first item if necessary\n+    if (getItemCount() > this.maximumItemCount) {\n+        this.data.remove(0);\n+    }\n+\n+    // Notify listeners that the series has changed and return null\n+    fireSeriesChanged();\n+    return null;\n+}\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "java.lang.IllegalArgumentException: X-value already exists and duplicates are not allowed.",
    "test_result": "FAIL"
}