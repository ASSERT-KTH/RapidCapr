{
    "patch": "        \n        int[] workValues = values.clone();\n        workValues[fieldIndex] = FieldUtils.safeAdd(values[fieldIndex], valueToAdd);\n        \n        try {\n            partial = partial.with(fieldIndex, workValues[fieldIndex]);\n        } catch (IllegalArgumentException ex) {\n            if (valueToAdd > 0) {\n                int max = partial.getField(fieldIndex).getMaximumValue();\n                if (workValues[fieldIndex] > max) {\n                    int[] newValues = Arrays.copyOf(values, values.length);\n                    newValues[fieldIndex] = max;\n                    return add(partial, fieldIndex, newValues, workValues[fieldIndex] - max);\n                }\n            } else {\n                int min = partial.getField(fieldIndex).getMinimumValue();\n                if (workValues[fieldIndex] < min) {\n                    int[] newValues = Arrays.copyOf(values, values.length);\n                    newValues[fieldIndex] = min;\n                    return add(partial, fieldIndex, newValues, workValues[fieldIndex] - min); \n                }\n            }\n            throw ex;\n        }\n        return partial.getChronology().get(partial, DateTimeUtils.currentTimeMillis());",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..997055e1 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,31 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        \n+        int[] workValues = values.clone();\n+        workValues[fieldIndex] = FieldUtils.safeAdd(values[fieldIndex], valueToAdd);\n+        \n+        try {\n+            partial = partial.with(fieldIndex, workValues[fieldIndex]);\n+        } catch (IllegalArgumentException ex) {\n+            if (valueToAdd > 0) {\n+                int max = partial.getField(fieldIndex).getMaximumValue();\n+                if (workValues[fieldIndex] > max) {\n+                    int[] newValues = Arrays.copyOf(values, values.length);\n+                    newValues[fieldIndex] = max;\n+                    return add(partial, fieldIndex, newValues, workValues[fieldIndex] - max);\n+                }\n+            } else {\n+                int min = partial.getField(fieldIndex).getMinimumValue();\n+                if (workValues[fieldIndex] < min) {\n+                    int[] newValues = Arrays.copyOf(values, values.length);\n+                    newValues[fieldIndex] = min;\n+                    return add(partial, fieldIndex, newValues, workValues[fieldIndex] - min); \n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            throw ex;\n         }\n-    }\n+        return partial.getChronology().get(partial, DateTimeUtils.currentTimeMillis());\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: ']' expected",
    "test_result": "ERROR"
}