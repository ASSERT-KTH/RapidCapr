{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type type = typeVariable;\n    while (type instanceof TypeVariable) {\n        TypeVariable<?> typeVariable1 = (TypeVariable<?>) type;\n        GenericDeclaration genericDeclaration = typeVariable1.getGenericDeclaration();\n        if (!(genericDeclaration instanceof Class)) {\n            return null;\n        }\n        TypeVariable<?>[] typeParameters = ((Class<?>) genericDeclaration).getTypeParameters();\n        if (typeParameters.length == 0) {\n            return null;\n        }\n        int index = -1;\n        for (int i = 0; i < typeParameters.length; i++) {\n            if (typeParameters[i].getName().equals(typeVariable1.getName())) {\n                index = i;\n                break;\n            }\n        }\n        if (index == -1) {\n            return null;\n        }\n        Type[] bounds = typeParameters[index].getBounds();\n        if (bounds.length == 0) {\n            return Object.class;\n        }\n        type = bounds[0];\n    }\n    return type;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..65bbd618c 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,41 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type type = typeVariable;\n+    while (type instanceof TypeVariable) {\n+        TypeVariable<?> typeVariable1 = (TypeVariable<?>) type;\n+        GenericDeclaration genericDeclaration = typeVariable1.getGenericDeclaration();\n+        if (!(genericDeclaration instanceof Class)) {\n+            return null;\n+        }\n+        TypeVariable<?>[] typeParameters = ((Class<?>) genericDeclaration).getTypeParameters();\n+        if (typeParameters.length == 0) {\n+            return null;\n+        }\n+        int index = -1;\n+        for (int i = 0; i < typeParameters.length; i++) {\n+            if (typeParameters[i].getName().equals(typeVariable1.getName())) {\n+                index = i;\n+                break;\n+            }\n+        }\n+        if (index == -1) {\n+            return null;\n+        }\n+        Type[] bounds = typeParameters[index].getBounds();\n+        if (bounds.length == 0) {\n+            return Object.class;\n+        }\n+        type = bounds[0];\n+    }\n+    return type;\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}