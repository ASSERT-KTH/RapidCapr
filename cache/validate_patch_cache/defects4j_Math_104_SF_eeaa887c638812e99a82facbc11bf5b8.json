{
    "patch": "public static double regularizedGammaP(double x, double a, double epsilon, int maxIterations) {\n    if (Double.isNaN(x) || Double.isNaN(a) || x < 0.0 || a <= 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1.0) {\n        double b = regularizedGammaQ(a, x, epsilon, maxIterations);\n        return 1.0 - b;\n    }\n\n    double n = 0.0;\n    double an = 1.0 / a;\n    double sum = an;\n\n    while (Math.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n        n += 1.0;\n        an *= x / (a + n);\n        sum += an;\n    }\n\n    if (n >= maxIterations) {\n        throw new RuntimeException(\"Maximum number of iterations exceeded\");\n    }\n\n    double p = Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n\n    return p;\n}\n\npublic static double regularizedGammaQ(double x, double a, double epsilon, int maxIterations) {\n    if (Double.isNaN(x) || Double.isNaN(a) || x < 0.0 || a <= 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 1.0;\n    }\n\n    if (x < a + 1.0) {\n        double b = regularizedGammaP(a, x, epsilon, maxIterations);\n        return 1.0 - b;\n    }\n\n    continuedFraction cf = new continuedFraction() {\n        @Override\n        protected double getA(int n, double x) {\n            if (n == 0) {\n                return 1.0;\n            }\n            return ((2.0 * n - 1.0) - a + x);\n        }\n\n        @Override\n        protected double getB(int n, double x) {\n            return n * (a - n);\n        }\n    };\n\n    double cfValue = cf.evaluate(x, epsilon, maxIterations);\n    double p = Math.exp(-x + a * Math.log(x) - logGamma(a)) / cfValue;\n\n    return p;\n}\n\npublic static double logGamma(double x) {\n    if (x <= 0.0) {\n        throw new RuntimeException(\"Domain error: LogGamma function is not defined for non-positive arguments\");\n    }\n\n    double z = x + 1.0;\n    double sum = 0.99999999999980993;\n\n    for (int i = 0; i < 8; i++) {\n        sum += coefficients[i] / ++z;\n    }\n\n    double series = 1.000000000190015;\n    for (int i = 0; i < 8; i++) {\n        series += coefficients2[i] / ++x;\n    }\n\n    return -series + Math.log(2.5066282746310005 * sum / x);\n}\n\nprivate static final double[] coefficients = {\n        676.5203681218851,\n        -1259.1392167224028,\n        771.32342877765313,\n        -176.61502916214059,\n        12.507343278686905,\n        -0.13857109526572012,\n        9.9843695780195716e-6,\n        1.5056327351493116e-7\n};\n\nprivate static final double[] coefficients2 = {\n        -0.000595238095238,\n        0.000793650793651,\n        -0.002777777777778,\n        0.083333333333333,\n        0.005708238981009,\n        -0.00125102895751,\n        0.000216647502491,\n        -0.000004200738642\n};",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..7c2fa8eb3 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,115 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double x, double a, double epsilon, int maxIterations) {\n+    if (Double.isNaN(x) || Double.isNaN(a) || x < 0.0 || a <= 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1.0) {\n+        double b = regularizedGammaQ(a, x, epsilon, maxIterations);\n+        return 1.0 - b;\n+    }\n+\n+    double n = 0.0;\n+    double an = 1.0 / a;\n+    double sum = an;\n+\n+    while (Math.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n+        n += 1.0;\n+        an *= x / (a + n);\n+        sum += an;\n+    }\n+\n+    if (n >= maxIterations) {\n+        throw new RuntimeException(\"Maximum number of iterations exceeded\");\n+    }\n+\n+    double p = Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+\n+    return p;\n+}\n+\n+public static double regularizedGammaQ(double x, double a, double epsilon, int maxIterations) {\n+    if (Double.isNaN(x) || Double.isNaN(a) || x < 0.0 || a <= 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+\n+    if (x < a + 1.0) {\n+        double b = regularizedGammaP(a, x, epsilon, maxIterations);\n+        return 1.0 - b;\n+    }\n+\n+    continuedFraction cf = new continuedFraction() {\n+        @Override\n+        protected double getA(int n, double x) {\n+            if (n == 0) {\n+                return 1.0;\n+            }\n+            return ((2.0 * n - 1.0) - a + x);\n+        }\n+\n+        @Override\n+        protected double getB(int n, double x) {\n+            return n * (a - n);\n+        }\n+    };\n+\n+    double cfValue = cf.evaluate(x, epsilon, maxIterations);\n+    double p = Math.exp(-x + a * Math.log(x) - logGamma(a)) / cfValue;\n+\n+    return p;\n+}\n+\n+public static double logGamma(double x) {\n+    if (x <= 0.0) {\n+        throw new RuntimeException(\"Domain error: LogGamma function is not defined for non-positive arguments\");\n+    }\n+\n+    double z = x + 1.0;\n+    double sum = 0.99999999999980993;\n+\n+    for (int i = 0; i < 8; i++) {\n+        sum += coefficients[i] / ++z;\n+    }\n+\n+    double series = 1.000000000190015;\n+    for (int i = 0; i < 8; i++) {\n+        series += coefficients2[i] / ++x;\n+    }\n+\n+    return -series + Math.log(2.5066282746310005 * sum / x);\n+}\n+\n+private static final double[] coefficients = {\n+        676.5203681218851,\n+        -1259.1392167224028,\n+        771.32342877765313,\n+        -176.61502916214059,\n+        12.507343278686905,\n+        -0.13857109526572012,\n+        9.9843695780195716e-6,\n+        1.5056327351493116e-7\n+};\n+\n+private static final double[] coefficients2 = {\n+        -0.000595238095238,\n+        0.000793650793651,\n+        -0.002777777777778,\n+        0.083333333333333,\n+        0.005708238981009,\n+        -0.00125102895751,\n+        0.000216647502491,\n+        -0.000004200738642\n+};\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}