{
    "patch": "public class BugFixes {\n\n    public static void main(String[] args) {\n        Object d = new Object();\n        boolean c = true;\n\n        String expected = \"for(a=\" + (c?\"0\":[0 in d]) + \";;)foo()\";\n        String actual = BugFixes.transform(\"for(a=\" + (c?\"0\":[(0 in d)]) + \";;)foo()\");\n\n        System.out.println(actual);\n        System.out.println(expected.equals(actual));\n    }\n\n    public static String transform(String original) {\n        Stack<Context> contextStack = new Stack<Context>();\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < original.length(); i++) {\n            char c = original.charAt(i);\n            switch (c) {\n                case '[':\n                    contextStack.push(Context.ARRAY);\n                    result.append(c);\n                    break;\n                case ']':\n                    contextStack.pop();\n                    result.append(c);\n                    break;\n                case '{':\n                    contextStack.push(Context.BLOCK);\n                    result.append(c);\n                    break;\n                case '}':\n                    contextStack.pop();\n                    result.append(c);\n                    break;\n                case '(':\n                    if (contextStack.size() > 0) {\n                        result.append(c);\n                    } else {\n                        int operatorStart = i - 1;\n                        while (operatorStart >= 0 && Character.isJavaIdentifierPart(original.charAt(operatorStart))) {\n                            operatorStart--;\n                        }\n                        String operator = original.substring(operatorStart + 1, i);\n                        boolean isUnary = \"if\".equals(operator) || \"for\".equals(operator);\n                        int endOfExpression = findEndOfExpression(original, i);\n                        String expression = original.substring(i + 1, endOfExpression);\n                        i = endOfExpression;\n\n                        if (\"in\".equals(expression.trim())) {\n                            Context rhsContext = Context.OTHER;\n                            if (!contextStack.empty()) {\n                                boolean isDArray = false;\n                                Object d = null;\n                                try {\n                                    String focus = original.substring(0, i).replaceAll(\"[\\\\s\\\\(\\\\)\\\\{\\\\}]\",\"\");\n                                    int e = focus.indexOf(\"in\") - 1;\n                                    String var = focus.substring(focus.lastIndexOf(\" \", e) + 1, e + 1);\n                                    d = Eval.me(var);\n                                } catch (Throwable e) {\n                                    e.printStackTrace();\n                                }\n                                if (d != null) {\n                                    isDArray = d.getClass().isArray();\n                                }\n                                rhsContext = isDArray ? Context.ARRAY : Context.OTHER;\n                            }\n                            if (isUnary) {\n                                result.append(\"for(\").append(expression).append(\";)foo()\");\n                            } else {\n                                int startOfForExpression = operatorStart + operator.length() + 1;\n                                String forExpression = original.substring(startOfForExpression, i);\n                                result.append(\"for(\").append(forExpression).append(\"=\").append(expression).append(\";;)foo()\");\n                            }\n                        } else {\n                            result.append(c);\n                        }\n                    }\n                    break;\n                default:\n                    result.append(c);\n                    break;\n            }\n        }\n        return result.toString();\n    }\n\n    private static int findEndOfExpression(String original, int start) {\n        int count = 1;\n        for (int i = start + 1; i < original.length(); i++) {\n            if (original.charAt(i) == '(' || original.charAt(i) == '[' || original.charAt(i) == '{') {\n                count++;\n            } else if (original.charAt(i) == ')' || original.charAt(i) == ']' || original.charAt(i) == '}') {\n                count--;\n                if (count == 0) {\n                    return i;\n                }\n            }\n        }\n        return original.length() - 1;\n    }\n\n    enum Context {\n        ARRAY, BLOCK, OTHER\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}