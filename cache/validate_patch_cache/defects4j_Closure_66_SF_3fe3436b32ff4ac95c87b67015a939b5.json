{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    ObjectMapper mapper = new ObjectMapper();\n    try {\n        JsonNode node = mapper.readTree(jsonStr);\n        int typedCount = node.get(\"fields\").get(\"typedCount\").asInt();\n        int totalCount = node.get(\"fields\").get(\"totalCount\").asInt();\n        if (totalCount == 0) {\n            return 0.0;\n        } else {\n            return ((double) typedCount / totalCount) * 100.0;\n        }\n    } catch (IOException e) {\n        return -1;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..431b96b1 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    ObjectMapper mapper = new ObjectMapper();\n+    try {\n+        JsonNode node = mapper.readTree(jsonStr);\n+        int typedCount = node.get(\"fields\").get(\"typedCount\").asInt();\n+        int totalCount = node.get(\"fields\").get(\"totalCount\").asInt();\n+        if (totalCount == 0) {\n+            return 0.0;\n+        } else {\n+            return ((double) typedCount / totalCount) * 100.0;\n+        }\n+    } catch (IOException e) {\n+        return -1;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}