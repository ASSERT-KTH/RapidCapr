{
    "patch": "    public Partial with(DateTimeFieldType fieldType, int value) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"The field type must not be null\");\n        }\n        int index = indexOf(fieldType);\n        if (index == -1) {\n            // No field of this type in the partial - add a new field\n            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n            int[] newValues = new int[newTypes.length];\n\n            System.arraycopy(iTypes, 0, newTypes, 0, iTypes.length);\n\n            // Determine where to insert the new field\n            int insertAt = iTypes.length;\n            for (int i = 0; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                if (fieldType.getDurationType().getField(iChronology).compareTo(loopType.getDurationType().getField(iChronology)) < 0) {\n                    insertAt = i;\n                    break;\n                }\n                if (fieldType.getDurationType().getField(iChronology).equals(loopType.getDurationType().getField(iChronology))\n                        && fieldType.getRangeDurationType().getField(iChronology).compareTo(loopType.getRangeDurationType().getField(iChronology)) < 0) {\n                    insertAt = i;\n                    break;\n                }\n            }\n\n            newTypes[insertAt] = fieldType;\n            newValues[insertAt] = value;\n\n            System.arraycopy(iValues, 0, newValues, 0, iValues.length);\n            return new Partial(iChronology, newTypes, newValues);\n        }\n\n        // Replace the field in place\n        if (iValues[index] == value) {\n            return this;\n        }\n\n        int[] newValues = iValues.clone();\n        newValues[index] = value;\n        return new Partial(iChronology, iTypes, newValues);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..ede73578 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -429,48 +429,42 @@ public final class Partial\n         }\n         int index = indexOf(fieldType);\n         if (index == -1) {\n+            // No field of this type in the partial - add a new field\n             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n             int[] newValues = new int[newTypes.length];\n-            \n-            // find correct insertion point to keep largest-smallest order\n-            int i = 0;\n-            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n-            if (unitField.isSupported()) {\n-                for (; i < iTypes.length; i++) {\n-                    DateTimeFieldType loopType = iTypes[i];\n-                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n-                    if (loopUnitField.isSupported()) {\n-                        int compare = unitField.compareTo(loopUnitField);\n-                        if (compare > 0) {\n-                            break;\n-                        } else if (compare == 0) {\n-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n-                            if (rangeField.compareTo(loopRangeField) > 0) {\n-                                break;\n-                            }\n-                        }\n-                    }\n+\n+            System.arraycopy(iTypes, 0, newTypes, 0, iTypes.length);\n+\n+            // Determine where to insert the new field\n+            int insertAt = iTypes.length;\n+            for (int i = 0; i < iTypes.length; i++) {\n+                DateTimeFieldType loopType = iTypes[i];\n+                if (fieldType.getDurationType().getField(iChronology).compareTo(loopType.getDurationType().getField(iChronology)) < 0) {\n+                    insertAt = i;\n+                    break;\n+                }\n+                if (fieldType.getDurationType().getField(iChronology).equals(loopType.getDurationType().getField(iChronology))\n+                        && fieldType.getRangeDurationType().getField(iChronology).compareTo(loopType.getRangeDurationType().getField(iChronology)) < 0) {\n+                    insertAt = i;\n+                    break;\n                 }\n             }\n-            System.arraycopy(iTypes, 0, newTypes, 0, i);\n-            System.arraycopy(iValues, 0, newValues, 0, i);\n-            newTypes[i] = fieldType;\n-            newValues[i] = value;\n-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n-            // use public constructor to ensure full validation\n-            // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n-            iChronology.validate(newPartial, newValues);\n-            return newPartial;\n+\n+            newTypes[insertAt] = fieldType;\n+            newValues[insertAt] = value;\n+\n+            System.arraycopy(iValues, 0, newValues, 0, iValues.length);\n+            return new Partial(iChronology, newTypes, newValues);\n         }\n-        if (value == getValue(index)) {\n+\n+        // Replace the field in place\n+        if (iValues[index] == value) {\n             return this;\n         }\n-        int[] newValues = getValues();\n-        newValues = getField(index).set(this, index, newValues, value);\n-        return new Partial(this, newValues);\n+\n+        int[] newValues = iValues.clone();\n+        newValues[index] = value;\n+        return new Partial(iChronology, iTypes, newValues);\n     }\n \n     /**",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}