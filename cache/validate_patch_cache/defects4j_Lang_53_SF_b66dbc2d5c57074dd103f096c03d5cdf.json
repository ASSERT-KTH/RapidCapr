{
    "patch": "    private static final int[][] FIELDS = {{Calendar.MILLISECOND}, {Calendar.SECOND}, {Calendar.MINUTE}, {Calendar.HOUR_OF_DAY, Calendar.HOUR}, {Calendar.DATE, Calendar.DAY_OF_MONTH, (Calendar.AM_PM == Calendar.AM) ? Calendar.HOUR : Calendar.HOUR_OF_DAY, Calendar.DAY_OF_YEAR}, {Calendar.MONTH, Calendar.DAY_OF_YEAR}, {Calendar.YEAR}, {Calendar.ERA}};\n    private static final long[] ROUNDING_FACTORS = {1, 1000, 60000, 3600000, 86400000, 2592000000L, 31536000000L, Long.MAX_VALUE};\n\n    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n\n        // truncate milliseconds\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) {\n            time = time - millisecs;\n            if (field == Calendar.SECOND) {\n                done = true;\n            }\n        }\n\n        // truncate seconds\n        if (!done) {\n            int seconds = val.get(Calendar.SECOND);\n            if (!round || seconds < 30) {\n                time = time - (seconds * 1000L);\n                if (field == Calendar.MINUTE) {\n                    done = true;\n                }\n            }\n        }\n\n        // truncate minutes\n        if (!done) {\n            int minutes = val.get(Calendar.MINUTE);\n            if (!round || minutes < 30) {\n                time = time - (minutes * 60000L);\n            }\n        }\n\n        // reset time\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n\n        // fix for https://issues.apache.org/jira/browse/LANG-48\n        boolean roundUp = false;\n        for (int i = 0; i < FIELDS.length; i++) {\n            int[] fieldValue = FIELDS[i];\n            for (int j = 0; j < fieldValue.length; j++) {\n                if (fieldValue[j] == field) {\n                    if (round) {\n                        int offset = val.get(field) % ((int) ROUNDING_FACTORS[j]);\n                        if (offset >= ROUNDING_FACTORS[j] / 2) {\n                            roundUp = true;\n                            if (field == Calendar.DAY_OF_MONTH) { // advance in months\n                                int months = offset / (int) ROUNDING_FACTORS[j - 1];\n                                if (months > 0) {\n                                    val.add(Calendar.MONTH, months);\n                                    offset = offset % (int) ROUNDING_FACTORS[j - 1];\n                                }\n                            }\n                        }\n                        val.set(field, val.get(field) - offset + ((roundUp) ? ROUNDING_FACTORS[j] : 0L));\n                    }\n                    return;\n                }\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java\nindex 0dd0dedc..7a8f4e01 100644\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -617,21 +617,16 @@ public class DateUtils {\n      * @param round  true to round, false to truncate\n      * @throws ArithmeticException if the year is over 280 million\n      */\n+    private static final int[][] FIELDS = {{Calendar.MILLISECOND}, {Calendar.SECOND}, {Calendar.MINUTE}, {Calendar.HOUR_OF_DAY, Calendar.HOUR}, {Calendar.DATE, Calendar.DAY_OF_MONTH, (Calendar.AM_PM == Calendar.AM) ? Calendar.HOUR : Calendar.HOUR_OF_DAY, Calendar.DAY_OF_YEAR}, {Calendar.MONTH, Calendar.DAY_OF_YEAR}, {Calendar.YEAR}, {Calendar.ERA}};\n+    private static final long[] ROUNDING_FACTORS = {1, 1000, 60000, 3600000, 86400000, 2592000000L, 31536000000L, Long.MAX_VALUE};\n+\n     private static void modify(Calendar val, int field, boolean round) {\n         if (val.get(Calendar.YEAR) > 280000000) {\n             throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n         }\n-        \n         if (field == Calendar.MILLISECOND) {\n             return;\n         }\n-\n-        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n-        // see http://issues.apache.org/jira/browse/LANG-59\n-        //\n-        // Manually truncate milliseconds, seconds and minutes, rather than using\n-        // Calendar methods.\n-\n         Date date = val.getTime();\n         long time = date.getTime();\n         boolean done = false;\n@@ -640,24 +635,28 @@ public class DateUtils {\n         int millisecs = val.get(Calendar.MILLISECOND);\n         if (!round || millisecs < 500) {\n             time = time - millisecs;\n-        if (field == Calendar.SECOND) {\n-            done = true;\n+            if (field == Calendar.SECOND) {\n+                done = true;\n             }\n         }\n \n         // truncate seconds\n-        int seconds = val.get(Calendar.SECOND);\n-        if (!done && (!round || seconds < 30)) {\n-            time = time - (seconds * 1000L);\n-        if (field == Calendar.MINUTE) {\n-            done = true;\n+        if (!done) {\n+            int seconds = val.get(Calendar.SECOND);\n+            if (!round || seconds < 30) {\n+                time = time - (seconds * 1000L);\n+                if (field == Calendar.MINUTE) {\n+                    done = true;\n+                }\n             }\n         }\n \n         // truncate minutes\n-        int minutes = val.get(Calendar.MINUTE);\n-        if (!done && (!round || minutes < 30)) {\n-            time = time - (minutes * 60000L);\n+        if (!done) {\n+            int minutes = val.get(Calendar.MINUTE);\n+            if (!round || minutes < 30) {\n+                time = time - (minutes * 60000L);\n+            }\n         }\n \n         // reset time\n@@ -665,82 +664,32 @@ public class DateUtils {\n             date.setTime(time);\n             val.setTime(date);\n         }\n-        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n \n+        // fix for https://issues.apache.org/jira/browse/LANG-48\n         boolean roundUp = false;\n-        for (int i = 0; i < fields.length; i++) {\n-            for (int j = 0; j < fields[i].length; j++) {\n-                if (fields[i][j] == field) {\n-                    //This is our field... we stop looping\n-                    if (round && roundUp) {\n-                        if (field == DateUtils.SEMI_MONTH) {\n-                            //This is a special case that's hard to generalize\n-                            //If the date is 1, we round up to 16, otherwise\n-                            //  we subtract 15 days and add 1 month\n-                            if (val.get(Calendar.DATE) == 1) {\n-                                val.add(Calendar.DATE, 15);\n-                            } else {\n-                                val.add(Calendar.DATE, -15);\n-                                val.add(Calendar.MONTH, 1);\n+        for (int i = 0; i < FIELDS.length; i++) {\n+            int[] fieldValue = FIELDS[i];\n+            for (int j = 0; j < fieldValue.length; j++) {\n+                if (fieldValue[j] == field) {\n+                    if (round) {\n+                        int offset = val.get(field) % ((int) ROUNDING_FACTORS[j]);\n+                        if (offset >= ROUNDING_FACTORS[j] / 2) {\n+                            roundUp = true;\n+                            if (field == Calendar.DAY_OF_MONTH) { // advance in months\n+                                int months = offset / (int) ROUNDING_FACTORS[j - 1];\n+                                if (months > 0) {\n+                                    val.add(Calendar.MONTH, months);\n+                                    offset = offset % (int) ROUNDING_FACTORS[j - 1];\n+                                }\n                             }\n-                        } else {\n-                            //We need at add one to this field since the\n-                            //  last number causes us to round up\n-                            val.add(fields[i][0], 1);\n                         }\n+                        val.set(field, val.get(field) - offset + ((roundUp) ? ROUNDING_FACTORS[j] : 0L));\n                     }\n                     return;\n                 }\n             }\n-            //We have various fields that are not easy roundings\n-            int offset = 0;\n-            boolean offsetSet = false;\n-            //These are special types of fields that require different rounding rules\n-            switch (field) {\n-                case DateUtils.SEMI_MONTH:\n-                    if (fields[i][0] == Calendar.DATE) {\n-                        //If we're going to drop the DATE field's value,\n-                        //  we want to do this our own way.\n-                        //We need to subtrace 1 since the date has a minimum of 1\n-                        offset = val.get(Calendar.DATE) - 1;\n-                        //If we're above 15 days adjustment, that means we're in the\n-                        //  bottom half of the month and should stay accordingly.\n-                        if (offset >= 15) {\n-                            offset -= 15;\n-                        }\n-                        //Record whether we're in the top or bottom half of that range\n-                        roundUp = offset > 7;\n-                        offsetSet = true;\n-                    }\n-                    break;\n-                case Calendar.AM_PM:\n-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n-                        //If we're going to drop the HOUR field's value,\n-                        //  we want to do this our own way.\n-                        offset = val.get(Calendar.HOUR_OF_DAY);\n-                        if (offset >= 12) {\n-                            offset -= 12;\n-                        }\n-                        roundUp = offset > 6;\n-                        offsetSet = true;\n-                    }\n-                    break;\n-            }\n-            if (!offsetSet) {\n-                int min = val.getActualMinimum(fields[i][0]);\n-                int max = val.getActualMaximum(fields[i][0]);\n-                //Calculate the offset from the minimum allowed value\n-                offset = val.get(fields[i][0]) - min;\n-                //Set roundUp if this is more than half way between the minimum and maximum\n-                roundUp = offset > ((max - min) / 2);\n-            }\n-            //We need to remove this field\n-            if (offset != 0) {\n-                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n-            }\n         }\n         throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n-\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: no suitable method found for set(int,long)",
    "test_result": "ERROR"
}