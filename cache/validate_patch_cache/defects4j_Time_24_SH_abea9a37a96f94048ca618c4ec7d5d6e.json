{
    "patch": "        for (int i = 0; i < count; i++) {\n            long newMillis = savedFields[i].set(millis, resetFields);\n            if (newMillis == millis) {\n                continue;\n            } else if (newMillis <= LocalDate.MIN_VALUE.toDateTimeAtStartOfDay().getMillis() ||\n                newMillis >= LocalDate.MAX_VALUE.toDateTimeAtStartOfDay().getMillis()) {\n                throw new IllegalArgumentException(\"New millis returned by field set is invalid.\");\n            } else {\n                millis = newMillis;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..6906c848 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,17 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            long newMillis = savedFields[i].set(millis, resetFields);\n+            if (newMillis == millis) {\n+                continue;\n+            } else if (newMillis <= LocalDate.MIN_VALUE.toDateTimeAtStartOfDay().getMillis() ||\n+                newMillis >= LocalDate.MAX_VALUE.toDateTimeAtStartOfDay().getMillis()) {\n+                throw new IllegalArgumentException(\"New millis returned by field set is invalid.\");\n+            } else {\n+                millis = newMillis;\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: package LocalDate does not exist",
    "test_result": "ERROR"
}