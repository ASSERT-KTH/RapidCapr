{
    "patch": "          outerFunction = block.getEnclosingFunction();\n          break;\n        } else if (block.isLoop) {\n          return false;\n        }\n      }\n      if (outerFunction != null) {\n        int assignCount = 0;\n        for (BasicBlock block : outerFunction.getCfg().getNodes()) {\n          for (Node node : block.getNodes()) {\n            if (node.getType() == Token.ASSIGN\n                && node.getFirstChild().getString().equals(name)) {\n              assignCount++;\n              if (assignCount > 1) {\n                return false;\n              }\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c3f8a20a 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,24 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          outerFunction = block.getEnclosingFunction();\n+          break;\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n+      }\n+      if (outerFunction != null) {\n+        int assignCount = 0;\n+        for (BasicBlock block : outerFunction.getCfg().getNodes()) {\n+          for (Node node : block.getNodes()) {\n+            if (node.getType() == Token.ASSIGN\n+                && node.getFirstChild().getString().equals(name)) {\n+              assignCount++;\n+              if (assignCount > 1) {\n+                return false;\n+              }\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}