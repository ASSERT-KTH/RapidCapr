{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length;\n    int[] search = new int[Character.MAX_VALUE + 1];\n    for (int i = 0; i < searchLen; i++) {\n        search[searchChars[i]] = 1;\n    }\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (ch < Character.MIN_HIGH_SURROGATE || ch > Character.MAX_LOW_SURROGATE) {\n            if (search[ch] == 1) {\n                return true;\n            }\n        } else if (ch < Character.MAX_HIGH_SURROGATE) {\n            if (i < strLen - 1) {\n                char ch2 = str.charAt(i + 1);\n                if (Character.isSurrogatePair(ch, ch2)) {\n                    if (search[Character.toCodePoint(ch, ch2)] == 1) {\n                        return true;\n                    }\n                }\n            }\n        } else {\n            if (search[ch] == 1) {\n                return true;\n            } else {\n                i++;\n                if (i < strLen) {\n                    char ch2 = str.charAt(i);\n                    if (Character.isSurrogatePair(ch, ch2)) {\n                        if (search[Character.toCodePoint(ch, ch2)] == 1) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..d8bddd6f 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,49 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int strLen = str.length();\n+    int searchLen = searchChars.length;\n+    int[] search = new int[Character.MAX_VALUE + 1];\n+    for (int i = 0; i < searchLen; i++) {\n+        search[searchChars[i]] = 1;\n+    }\n+    for (int i = 0; i < strLen; i++) {\n+        char ch = str.charAt(i);\n+        if (ch < Character.MIN_HIGH_SURROGATE || ch > Character.MAX_LOW_SURROGATE) {\n+            if (search[ch] == 1) {\n+                return true;\n+            }\n+        } else if (ch < Character.MAX_HIGH_SURROGATE) {\n+            if (i < strLen - 1) {\n+                char ch2 = str.charAt(i + 1);\n+                if (Character.isSurrogatePair(ch, ch2)) {\n+                    if (search[Character.toCodePoint(ch, ch2)] == 1) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        } else {\n+            if (search[ch] == 1) {\n+                return true;\n+            } else {\n+                i++;\n+                if (i < strLen) {\n+                    char ch2 = str.charAt(i);\n+                    if (Character.isSurrogatePair(ch, ch2)) {\n+                        if (search[Character.toCodePoint(ch, ch2)] == 1) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}