{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node current = left.getFirstChild();\n    Node elem = null;\n    int i = 0;\n    while (current != null) {\n      if (i == intIndex) {\n        elem = current;\n        break;\n      }\n      if (current.getNext() == null) {\n          // if current node is the last node in the list, add enough nodes to get to the index\n            for (; i < intIndex; i++) {\n                Node arrElem = new Node(Token.EMPTY);\n                arrElem.putProp(Node.IS_ARRAY_FUNCTION_PROP, true);\n                current.addChildToBack(arrElem);\n            }\n            elem = current.getNext();\n      }\n      current = current.getNext();\n      i++;\n    }\n\n\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..f3c33a5f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,7 +1419,7 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n@@ -1448,12 +1448,26 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n \n     Node current = left.getFirstChild();\n     Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n+    int i = 0;\n+    while (current != null) {\n+      if (i == intIndex) {\n         elem = current;\n-\n+        break;\n+      }\n+      if (current.getNext() == null) {\n+          // if current node is the last node in the list, add enough nodes to get to the index\n+            for (; i < intIndex; i++) {\n+                Node arrElem = new Node(Token.EMPTY);\n+                arrElem.putProp(Node.IS_ARRAY_FUNCTION_PROP, true);\n+                current.addChildToBack(arrElem);\n+            }\n+            elem = current.getNext();\n+      }\n       current = current.getNext();\n+      i++;\n     }\n \n+\n     if (elem == null) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n@@ -1469,7 +1483,7 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n-  }\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}