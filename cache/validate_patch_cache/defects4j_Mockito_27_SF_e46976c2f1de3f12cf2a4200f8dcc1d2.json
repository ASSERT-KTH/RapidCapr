{
    "patch": "public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MockMaker.TypeMockability typeMockability = mockMaker.isTypeMockable(getMockSettings(mock).getTypeToMock());\n        MockSettingsImpl settings = new MockSettingsImpl();\n        settings.defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n        if(typeMockability == MockMaker.TypeMockability.SKIP.mockable) {\n            settings.spiedInstance(mock);\n        }\n        settings.extraInterfaces(getMockSettings(mock).getExtraInterfaces().toArray(new Class[]{}));\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n        ((Factory) mock).setCallback(0, newFilter);\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..1ec796e1b 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,20 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MockMaker.TypeMockability typeMockability = mockMaker.isTypeMockable(getMockSettings(mock).getTypeToMock());\n+        MockSettingsImpl settings = new MockSettingsImpl();\n+        settings.defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n+        if(typeMockability == MockMaker.TypeMockability.SKIP.mockable) {\n+            settings.spiedInstance(mock);\n+        }\n+        settings.extraInterfaces(getMockSettings(mock).getExtraInterfaces().toArray(new Class[]{}));\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n+        ((Factory) mock).setCallback(0, newFilter);\n+    }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: package MockMaker does not exist",
    "test_result": "ERROR"
}