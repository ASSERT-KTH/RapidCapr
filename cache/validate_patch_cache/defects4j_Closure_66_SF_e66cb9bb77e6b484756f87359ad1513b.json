{
    "patch": "public static double getTypedPercent(String json) {\n    try {\n        ObjectMapper mapper = new ObjectMapper();\n        Map<String, Object> map = mapper.readValue(json, new TypeReference<Map<String, Object>>(){});\n        int total = map.size();\n        int typed = 0;\n        for (Object value : map.values()) {\n            if (value instanceof String) {\n                typed++;\n            }\n        }\n        return (double) typed / total * 100;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return -1;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..f63e9e3e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    try {\n+        ObjectMapper mapper = new ObjectMapper();\n+        Map<String, Object> map = mapper.readValue(json, new TypeReference<Map<String, Object>>(){});\n+        int total = map.size();\n+        int typed = 0;\n+        for (Object value : map.values()) {\n+            if (value instanceof String) {\n+                typed++;\n+            }\n+        }\n+        return (double) typed / total * 100;\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+        return -1;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}