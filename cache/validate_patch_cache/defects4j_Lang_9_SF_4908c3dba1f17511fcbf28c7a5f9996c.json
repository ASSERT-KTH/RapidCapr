{
    "patch": "private void init() {\n    thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n\n    nameValues = new ConcurrentHashMap<Integer, KeyValue[]>();\n\n    StringBuilder regex = new StringBuilder();\n    List<Strategy> collector = new ArrayList<Strategy>();\n\n    Matcher patternMatcher = formatPattern.matcher(pattern);\n    if (!patternMatcher.lookingAt()) {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n\n    currentFormatField = patternMatcher.group();\n    Strategy currentStrategy = getStrategy(currentFormatField);\n    for (;;) {\n        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n        if (!patternMatcher.lookingAt()) {\n            nextStrategy = null;\n            break;\n        }\n        String nextFormatField = patternMatcher.group();\n        nextStrategy = getStrategy(nextFormatField);\n        if (currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField = nextFormatField;\n        currentStrategy = nextStrategy;\n    }\n    if (currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n    }\n    currentFormatField = null;\n    strategies = collector.toArray(new Strategy[collector.size()]);\n    parsePattern = Pattern.compile(regex.toString());\n}\n\nprivate Date parseInternal(String text) throws ParseException {\n    if (text == null || text.length() == 0) {\n        throw new ParseException(\"Text cannot be null or blank\", 0);\n    }\n    Matcher matcher = parsePattern.matcher(text);\n    if (matcher.matches()) {\n        Calendar cal = Calendar.getInstance();\n        cal.clear();\n        boolean parsed = false;\n        for (int i = 0; i < strategies.length; i++) {\n            Strategy strategy = strategies[i];\n            if (strategy.parse(this, cal, matcher.group(i + 1))) {\n                parsed = true;\n            }\n        }\n        if (!parsed) {\n            throw new ParseException(\"Failed to parse date: \" + text, 0);\n        }\n        return cal.getTime();\n    } else {\n        throw new ParseException(\"Failed to parse date: \" + text, 0);\n    }\n}\n\npublic synchronized Date parse(String text) throws ParseException {\n    Date parsed = parseInternal(text);\n    if (parsed == null) {\n        throw new ParseException(\"Failed to parse date: \" + text, 0);\n    }\n    return parsed;\n}\n\npublic synchronized Date parse(String text, ParsePosition pos) {\n    try {\n        Date parsed = parseInternal(text);\n        if (parsed == null) {\n            pos.setErrorIndex(0);\n        }\n        return parsed;\n    } catch (ParseException ex) {\n        pos.setErrorIndex(0);\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..55d53e46 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -112,42 +112,87 @@ public class FastDateParser implements DateParser, Serializable {\n      * Initialize derived fields from defining fields.\n      * This is called from constructor and from readObject (de-serialization)\n      */\n-    private void init() {\n-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+private void init() {\n+    thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n \n-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n+    nameValues = new ConcurrentHashMap<Integer, KeyValue[]>();\n \n-        StringBuilder regex= new StringBuilder();\n-        List<Strategy> collector = new ArrayList<Strategy>();\n+    StringBuilder regex = new StringBuilder();\n+    List<Strategy> collector = new ArrayList<Strategy>();\n \n-        Matcher patternMatcher= formatPattern.matcher(pattern);\n-        if(!patternMatcher.lookingAt()) {\n-            throw new IllegalArgumentException(\"Invalid pattern\");\n+    Matcher patternMatcher = formatPattern.matcher(pattern);\n+    if (!patternMatcher.lookingAt()) {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n+\n+    currentFormatField = patternMatcher.group();\n+    Strategy currentStrategy = getStrategy(currentFormatField);\n+    for (;;) {\n+        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+        if (!patternMatcher.lookingAt()) {\n+            nextStrategy = null;\n+            break;\n         }\n+        String nextFormatField = patternMatcher.group();\n+        nextStrategy = getStrategy(nextFormatField);\n+        if (currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        }\n+        currentFormatField = nextFormatField;\n+        currentStrategy = nextStrategy;\n+    }\n+    if (currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+    }\n+    currentFormatField = null;\n+    strategies = collector.toArray(new Strategy[collector.size()]);\n+    parsePattern = Pattern.compile(regex.toString());\n+}\n \n-        currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n-        for(;;) {\n-            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n-            if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n-                break;\n-            }\n-            String nextFormatField= patternMatcher.group();\n-            nextStrategy = getStrategy(nextFormatField);\n-            if(currentStrategy.addRegex(this, regex)) {\n-                collector.add(currentStrategy);\n+private Date parseInternal(String text) throws ParseException {\n+    if (text == null || text.length() == 0) {\n+        throw new ParseException(\"Text cannot be null or blank\", 0);\n+    }\n+    Matcher matcher = parsePattern.matcher(text);\n+    if (matcher.matches()) {\n+        Calendar cal = Calendar.getInstance();\n+        cal.clear();\n+        boolean parsed = false;\n+        for (int i = 0; i < strategies.length; i++) {\n+            Strategy strategy = strategies[i];\n+            if (strategy.parse(this, cal, matcher.group(i + 1))) {\n+                parsed = true;\n             }\n-            currentFormatField= nextFormatField;\n-            currentStrategy= nextStrategy;\n         }\n-        if(currentStrategy.addRegex(this, regex)) {\n-            collector.add(currentStrategy);\n+        if (!parsed) {\n+            throw new ParseException(\"Failed to parse date: \" + text, 0);\n         }\n-        currentFormatField= null;\n-        strategies= collector.toArray(new Strategy[collector.size()]);\n-        parsePattern= Pattern.compile(regex.toString());\n+        return cal.getTime();\n+    } else {\n+        throw new ParseException(\"Failed to parse date: \" + text, 0);\n+    }\n+}\n+\n+public synchronized Date parse(String text) throws ParseException {\n+    Date parsed = parseInternal(text);\n+    if (parsed == null) {\n+        throw new ParseException(\"Failed to parse date: \" + text, 0);\n     }\n+    return parsed;\n+}\n+\n+public synchronized Date parse(String text, ParsePosition pos) {\n+    try {\n+        Date parsed = parseInternal(text);\n+        if (parsed == null) {\n+            pos.setErrorIndex(0);\n+        }\n+        return parsed;\n+    } catch (ParseException ex) {\n+        pos.setErrorIndex(0);\n+        return null;\n+    }\n+}\n \n     // Accessors\n     //-----------------------------------------------------------------------",
    "result_reason": "error: method parse(String) is already defined in class FastDateParser",
    "test_result": "ERROR"
}