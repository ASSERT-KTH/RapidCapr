{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n\n    double n = 1;\n    double an = a;\n    double sum = a;\n    while (sum != n) {\n        an *= x / (a + n);\n        sum = sum + an;\n        n++;\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\npublic static double regularizedGammaQ(final double a, final double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0) {\n        return 1.0;\n    }\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n\n    // continued fraction\n    final double epsilon = 10E-15;\n    double a0 = 1;\n    double b0 = x + 1 - a;\n    double a1 = x;\n    double b1 = x + 1 - a;\n    double current;\n    int i = 1;\n    do {\n        final double an = i * (a - i);\n        final double ip = i + 1;\n        final double a2 = b1 + a1 * an;\n        final double b2 = b1 + a1 / ip;\n        current = a2 / b2;\n        a0 = a1;\n        b0 = b1;\n        a1 = a2;\n        b1 = b2;\n        ++i;\n    } while (i < 1000 && Math.abs(current - 1) > epsilon);\n\n    return 1 - Math.exp(-x + a * Math.log(x) - logGamma(a)) * current;\n}\n    \npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.65) - (x + 4.65);\n    double ser = 1.0 + 76.18009173     / (x + 0) - 86.50532033    / (x + 1)\n                        + 24.01409822    / (x + 2) - 1.231739516   / (x + 3)\n                        + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..eec2cf8d7 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,70 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+\n+    double n = 1;\n+    double an = a;\n+    double sum = a;\n+    while (sum != n) {\n+        an *= x / (a + n);\n+        sum = sum + an;\n+        n++;\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+public static double regularizedGammaQ(final double a, final double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+\n+    // continued fraction\n+    final double epsilon = 10E-15;\n+    double a0 = 1;\n+    double b0 = x + 1 - a;\n+    double a1 = x;\n+    double b1 = x + 1 - a;\n+    double current;\n+    int i = 1;\n+    do {\n+        final double an = i * (a - i);\n+        final double ip = i + 1;\n+        final double a2 = b1 + a1 * an;\n+        final double b2 = b1 + a1 / ip;\n+        current = a2 / b2;\n+        a0 = a1;\n+        b0 = b1;\n+        a1 = a2;\n+        b1 = b2;\n+        ++i;\n+    } while (i < 1000 && Math.abs(current - 1) > epsilon);\n+\n+    return 1 - Math.exp(-x + a * Math.log(x) - logGamma(a)) * current;\n+}\n+    \n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.65) - (x + 4.65);\n+    double ser = 1.0 + 76.18009173     / (x + 0) - 86.50532033    / (x + 1)\n+                        + 24.01409822    / (x + 2) - 1.231739516   / (x + 3)\n+                        + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}