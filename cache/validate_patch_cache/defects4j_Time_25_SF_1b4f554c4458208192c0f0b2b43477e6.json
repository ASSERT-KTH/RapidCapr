{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Check if there is a transition at the given instant\n    Boolean isTransition = false;\n    int initialOffset = getOffset(instantLocal);\n    int prevOffset = getOffset(instantLocal - 1);\n    int nextOffset = getOffset(instantLocal + 1);\n\n    if (prevOffset != initialOffset && nextOffset != initialOffset) {\n        isTransition = true;\n    }\n\n    // If there is no transition at the given instant, return the initial offset\n    if (!isTransition) {\n        return initialOffset;\n    }\n\n    // If the new instant is past the next transition, increment and try again\n    long nextTransition = nextTransition(instantLocal);\n    if (instantLocal > nextTransition) {\n        return getOffsetFromLocal(nextTransition + 1);\n    }\n\n    // If the new instant is before the previous transition, decrement and try again\n    long prevTransition = previousTransition(instantLocal);\n    if (instantLocal < prevTransition) {\n        return getOffsetFromLocal(prevTransition - 1);\n    }\n\n    // We are in the transition interval\n    if (nextOffset > prevOffset) { // Spring transition (Gap)\n        return (initialOffset >= nextOffset) ? nextOffset : initialOffset;\n    } else { // Autumn transition (Overlap)\n        return (initialOffset >= prevOffset) ? initialOffset : prevOffset;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b903a58d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,41 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Check if there is a transition at the given instant\n+    Boolean isTransition = false;\n+    int initialOffset = getOffset(instantLocal);\n+    int prevOffset = getOffset(instantLocal - 1);\n+    int nextOffset = getOffset(instantLocal + 1);\n+\n+    if (prevOffset != initialOffset && nextOffset != initialOffset) {\n+        isTransition = true;\n+    }\n+\n+    // If there is no transition at the given instant, return the initial offset\n+    if (!isTransition) {\n+        return initialOffset;\n+    }\n+\n+    // If the new instant is past the next transition, increment and try again\n+    long nextTransition = nextTransition(instantLocal);\n+    if (instantLocal > nextTransition) {\n+        return getOffsetFromLocal(nextTransition + 1);\n+    }\n+\n+    // If the new instant is before the previous transition, decrement and try again\n+    long prevTransition = previousTransition(instantLocal);\n+    if (instantLocal < prevTransition) {\n+        return getOffsetFromLocal(prevTransition - 1);\n+    }\n+\n+    // We are in the transition interval\n+    if (nextOffset > prevOffset) { // Spring transition (Gap)\n+        return (initialOffset >= nextOffset) ? nextOffset : initialOffset;\n+    } else { // Autumn transition (Overlap)\n+        return (initialOffset >= prevOffset) ? initialOffset : prevOffset;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}