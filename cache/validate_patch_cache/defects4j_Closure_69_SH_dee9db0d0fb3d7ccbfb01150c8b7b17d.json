{
    "patch": " ObjectType thisType = functionType.getTypeOfThis();\n if (thisType != null && !(NodeUtil.isGet(parent) || NodeUtil.isGetElem(parent))) {\n   report(t, n, FUNCTION_WITHOUT_GETTHIS, childType.toString());\n   ensureTyped(t, n);\n   return;\n }\n\n NodeUtil.getArgumentsForCallOrNew(n, args);\n if (functionType.isVarArgs()) {\n   args = validateVarArgs(t, n, args, functionType);\n } else {\n   validateArgumentList(t, args, functionType.getParameterTypes(), n);\n }\n ensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..d2235291 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+ ObjectType thisType = functionType.getTypeOfThis();\n+ if (thisType != null && !(NodeUtil.isGet(parent) || NodeUtil.isGetElem(parent))) {\n+   report(t, n, FUNCTION_WITHOUT_GETTHIS, childType.toString());\n+   ensureTyped(t, n);\n+   return;\n+ }\n+\n+ NodeUtil.getArgumentsForCallOrNew(n, args);\n+ if (functionType.isVarArgs()) {\n+   args = validateVarArgs(t, n, args, functionType);\n+ } else {\n+   validateArgumentList(t, args, functionType.getParameterTypes(), n);\n+ }\n+ ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}