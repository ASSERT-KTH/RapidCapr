{
    "patch": "   * Infers record types in the given type based on the given constraint.\n   */\n  public void inferRecordTypes(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop) || objType.isPropertyTypeInferred(prop) || !objType.getPropertyType(prop).isSubtype(propType)) {\n              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            } else {\n              typeToInfer = objType.getPropertyType(prop);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n    }\n    return scope;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..a885e848 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,6 +1111,9 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n+   * Infers record types in the given type based on the given constraint.\n+   */\n+  public void inferRecordTypes(\n       JSType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n@@ -1125,9 +1128,10 @@ class TypeInference\n           JSType propType = constraintObj.getPropertyType(prop);\n           if (!objType.isPropertyTypeDeclared(prop)) {\n             JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            if (!objType.hasProperty(prop) || objType.isPropertyTypeInferred(prop) || !objType.getPropertyType(prop).isSubtype(propType)) {\n+              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            } else {\n+              typeToInfer = objType.getPropertyType(prop);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n@@ -1140,7 +1144,7 @@ class TypeInference\n    * If we access a property of a symbol, then that symbol is not\n    * null or undefined.\n    */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n+  FlowScope dereferencePointer(Node n, FlowScope scope) {\n     if (n.isQualifiedName()) {\n       JSType type = getJSType(n);\n       JSType narrowed = type.restrictByNotNullOrUndefined();\n@@ -1149,6 +1153,8 @@ class TypeInference\n       }\n     }\n     return scope;\n+    }\n+    return scope;\n   }\n \n   private JSType getPropertyType(JSType objType, String propName,",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}