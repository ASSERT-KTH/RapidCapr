{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n        return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n        return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    boolean isSingleCharJoinString = joinString.length() == 1;\n    List<Node> arrayFoldedChildren = Lists.newArrayList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n        switch (elem.getType()) {\n            case Token.STRING:\n                if (sb.length() > 0) {\n                    sb.append(joinString);\n                    foldedSize += joinString.length();\n                }\n                sb.append(elem.getString());\n                foldedSize += 2; // Add 2 for the quotes\n                break;\n            case Token.TRUE:\n            case Token.FALSE:\n            case Token.NUMBER:\n            case Token.NULL:\n                if (sb.length() > 0) {\n                    // + 2 for the quotes.\n                    foldedSize += sb.length() + 2;\n                    arrayFoldedChildren.add(Node.newString(sb.toString()));\n                    sb = new StringBuilder();\n                }\n                arrayFoldedChildren.add(elem.cloneTree());\n                foldedSize += InlineCostEstimator.getCost(elem);\n                if (elem.getNext() != null && isSingleCharJoinString) {\n                    foldedSize += 1; // Add one for the comma, -1 to skip the last comma\n                }\n                break;\n            default:\n                // Not a string literal or known immutable value\n                if (sb.length() > 0) {\n                    // + 2 for the quotes.\n                    foldedSize += sb.length() + 2;\n                    arrayFoldedChildren.add(Node.newString(sb.toString()));\n                    sb = new StringBuilder();\n                }\n                if (elem.getNext() != null && isSingleCharJoinString) {\n                    foldedSize += 1; // Add one for the comma, -1 to skip the last comma\n                }\n                foldedSize += InlineCostEstimator.getCost(elem);\n                arrayFoldedChildren.add(elem.cloneTree());\n                break;\n        }\n        elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n        case 0:\n            Node emptyStringNode = Node.newString(\"\");\n            parent.replaceChild(n, emptyStringNode);\n            break;\n\n        case 1:\n            Node foldedStringNode = arrayFoldedChildren.remove(0);\n            if (foldedSize > originalSize) {\n                return;\n            }\n            arrayNode.detachChildren();\n            if (foldedStringNode.getType() != Token.STRING) {\n                // If the Node is not a string literal, ensure that\n                // it is coerced to a string.\n                foldedStringNode = new Node(Token.ADD,\n                        Node.newString(\"\"), foldedStringNode);\n            }\n            parent.replaceChild(n, foldedStringNode);\n            break;\n\n        default:\n            // No folding could actually be performed.\n            if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n                return;\n            }\n            int kJoinOverhead = isSingleCharJoinString ? \"[].join()\".length() : (\"[].join('\" + joinString + \"')\").length();\n            foldedSize += kJoinOverhead;\n            foldedSize += InlineCostEstimator.getCost(right);\n            if (foldedSize > originalSize) {\n                return;\n            }\n            arrayNode.detachChildren();\n            for (Node node : arrayFoldedChildren) {\n                arrayNode.addChildToBack(node);\n            }\n            Node joinNode = new Node(Token.CALL,\n                    NodeUtil.newQualifiedNameNode(\n                            t.getCompiler(),\n                            \"Array.prototype.join\"), arrayNode);\n            joinNode.addChildToBack(right.cloneTree());\n            if (!isSingleCharJoinString) {\n                Node joinStringNode = Node.newString(joinString);\n                joinNode.addChildToBack(joinStringNode);\n            }\n            parent.replaceChild(n, joinNode);\n            break;\n    }\n    t.getCompiler().reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..56a66ce8 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,126 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n+        return;\n     }\n \n     Node arrayNode = left.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n+    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n+        return;\n     }\n \n     String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+    boolean isSingleCharJoinString = joinString.length() == 1;\n+    List<Node> arrayFoldedChildren = Lists.newArrayList();\n     StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n     Node elem = arrayNode.getFirstChild();\n     // Merges adjacent String nodes.\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+        switch (elem.getType()) {\n+            case Token.STRING:\n+                if (sb.length() > 0) {\n+                    sb.append(joinString);\n+                    foldedSize += joinString.length();\n+                }\n+                sb.append(elem.getString());\n+                foldedSize += 2; // Add 2 for the quotes\n+                break;\n+            case Token.TRUE:\n+            case Token.FALSE:\n+            case Token.NUMBER:\n+            case Token.NULL:\n+                if (sb.length() > 0) {\n+                    // + 2 for the quotes.\n+                    foldedSize += sb.length() + 2;\n+                    arrayFoldedChildren.add(Node.newString(sb.toString()));\n+                    sb = new StringBuilder();\n+                }\n+                arrayFoldedChildren.add(elem.cloneTree());\n+                foldedSize += InlineCostEstimator.getCost(elem);\n+                if (elem.getNext() != null && isSingleCharJoinString) {\n+                    foldedSize += 1; // Add one for the comma, -1 to skip the last comma\n+                }\n+                break;\n+            default:\n+                // Not a string literal or known immutable value\n+                if (sb.length() > 0) {\n+                    // + 2 for the quotes.\n+                    foldedSize += sb.length() + 2;\n+                    arrayFoldedChildren.add(Node.newString(sb.toString()));\n+                    sb = new StringBuilder();\n+                }\n+                if (elem.getNext() != null && isSingleCharJoinString) {\n+                    foldedSize += 1; // Add one for the comma, -1 to skip the last comma\n+                }\n+                foldedSize += InlineCostEstimator.getCost(elem);\n+                arrayFoldedChildren.add(elem.cloneTree());\n+                break;\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      elem = elem.getNext();\n+        elem = elem.getNext();\n     }\n \n     if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+        // + 2 for the quotes.\n+        foldedSize += sb.length() + 2;\n+        arrayFoldedChildren.add(Node.newString(sb.toString()));\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n     int originalSize = InlineCostEstimator.getCost(n);\n     switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+        case 0:\n+            Node emptyStringNode = Node.newString(\"\");\n+            parent.replaceChild(n, emptyStringNode);\n+            break;\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+        case 1:\n+            Node foldedStringNode = arrayFoldedChildren.remove(0);\n+            if (foldedSize > originalSize) {\n+                return;\n+            }\n+            arrayNode.detachChildren();\n+            if (foldedStringNode.getType() != Token.STRING) {\n+                // If the Node is not a string literal, ensure that\n+                // it is coerced to a string.\n+                foldedStringNode = new Node(Token.ADD,\n+                        Node.newString(\"\"), foldedStringNode);\n+            }\n+            parent.replaceChild(n, foldedStringNode);\n+            break;\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+        default:\n+            // No folding could actually be performed.\n+            if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n+                return;\n+            }\n+            int kJoinOverhead = isSingleCharJoinString ? \"[].join()\".length() : (\"[].join('\" + joinString + \"')\").length();\n+            foldedSize += kJoinOverhead;\n+            foldedSize += InlineCostEstimator.getCost(right);\n+            if (foldedSize > originalSize) {\n+                return;\n+            }\n+            arrayNode.detachChildren();\n+            for (Node node : arrayFoldedChildren) {\n+                arrayNode.addChildToBack(node);\n+            }\n+            Node joinNode = new Node(Token.CALL,\n+                    NodeUtil.newQualifiedNameNode(\n+                            t.getCompiler(),\n+                            \"Array.prototype.join\"), arrayNode);\n+            joinNode.addChildToBack(right.cloneTree());\n+            if (!isSingleCharJoinString) {\n+                Node joinStringNode = Node.newString(joinString);\n+                joinNode.addChildToBack(joinStringNode);\n+            }\n+            parent.replaceChild(n, joinNode);\n+            break;\n     }\n     t.getCompiler().reportCodeChange();\n-  }\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: no suitable method found for newQualifiedNameNode(Compiler,String)",
    "test_result": "ERROR"
}