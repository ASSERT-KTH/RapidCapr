{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node fnNode = fnScope.getRootNode();\n    checkState(fnNode.isFunction());\n\n    // Object literal setters cannot be removed\n    Node parent = fnNode.getParent();\n    if (parent.isGetterDef() || parent.isSetterDef()) {\n      return;\n    }\n\n    Node paramList = fnNode.getSecondChild();\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(fnNode);\n    List<Node> paramsToRemove = ImmutableList.of();\n    if (!modifyCallers) {\n      for (Node param = paramList.getFirstChild(); param != null;\n          param = param.getNext()) {\n        if (!param.isName()) {\n          break;\n        }\n\n        Var var = fnScope.getVar(param.getString());\n        if (referenced.contains(var)) {\n          break;\n        }\n\n        paramsToRemove = ImmutableList.<Node>builder()\n            .add(param)\n            .addAll(paramsToRemove)\n            .build();\n      }\n    }\n    if (!paramsToRemove.isEmpty()) {\n      for (Node param : paramsToRemove) {\n        param.detach();\n        compiler.reportChangeToEnclosingScope(param);\n      }\n    } else if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e55314ce 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,41 +366,44 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    Node fnNode = fnScope.getRootNode();\n+    checkState(fnNode.isFunction());\n+\n+    // Object literal setters cannot be removed\n+    Node parent = fnNode.getParent();\n+    if (parent.isGetterDef() || parent.isSetterDef()) {\n       return;\n     }\n \n-    Node argList = getFunctionArgList(function);\n+    Node paramList = fnNode.getSecondChild();\n     boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n+        && callSiteOptimizer.canModifyCallers(fnNode);\n+    List<Node> paramsToRemove = ImmutableList.of();\n     if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n+      for (Node param = paramList.getFirstChild(); param != null;\n+          param = param.getNext()) {\n+        if (!param.isName()) {\n           break;\n         }\n+\n+        Var var = fnScope.getVar(param.getString());\n+        if (referenced.contains(var)) {\n+          break;\n+        }\n+\n+        paramsToRemove = ImmutableList.<Node>builder()\n+            .add(param)\n+            .addAll(paramsToRemove)\n+            .build();\n+      }\n+    }\n+    if (!paramsToRemove.isEmpty()) {\n+      for (Node param : paramsToRemove) {\n+        param.detach();\n+        compiler.reportChangeToEnclosingScope(param);\n       }\n-    } else {\n+    } else if (modifyCallers) {\n       callSiteOptimizer.optimize(fnScope, referenced);\n     }\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}