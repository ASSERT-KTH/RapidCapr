{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n    // If mean, variance or geomean have been overridden and have been initialized with enough values,\n    // need to increment these\n    if (!(meanImpl instanceof Mean) && meanImpl.getN() > 1) {\n        double oldMean = meanImpl.getResult();\n        meanImpl.increment(value);\n        if (Double.isNaN(oldMean) && !(Double.isNaN(value))) {\n            meanImpl.increment(Double.NaN);\n        }\n    }\n    if (!(varianceImpl instanceof Variance) && varianceImpl.getN() > 1) {\n        varianceImpl.increment(value);\n    }\n    if (!(geoMeanImpl instanceof GeometricMean) && geoMeanImpl.getN() > 0) {\n        geoMeanImpl.increment(value);\n    }\n    n++;\n\n    //If mean has been overridden with just 1 value, we need to add remaining values\n    if (!(meanImpl instanceof Mean) && meanImpl.getN() == 1) {\n        double sum = sumImpl.getResult();\n        Double doubleValue = value;\n        for (int i = 1; i < n; i++) {\n            doubleValue += values[i - 1];\n        }\n        meanImpl.increment((doubleValue - sum) / (n - 1));\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..87bf3ebdc 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,42 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+    // If mean, variance or geomean have been overridden and have been initialized with enough values,\n+    // need to increment these\n+    if (!(meanImpl instanceof Mean) && meanImpl.getN() > 1) {\n+        double oldMean = meanImpl.getResult();\n+        meanImpl.increment(value);\n+        if (Double.isNaN(oldMean) && !(Double.isNaN(value))) {\n+            meanImpl.increment(Double.NaN);\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+    }\n+    if (!(varianceImpl instanceof Variance) && varianceImpl.getN() > 1) {\n+        varianceImpl.increment(value);\n+    }\n+    if (!(geoMeanImpl instanceof GeometricMean) && geoMeanImpl.getN() > 0) {\n+        geoMeanImpl.increment(value);\n+    }\n+    n++;\n+\n+    //If mean has been overridden with just 1 value, we need to add remaining values\n+    if (!(meanImpl instanceof Mean) && meanImpl.getN() == 1) {\n+        double sum = sumImpl.getResult();\n+        Double doubleValue = value;\n+        for (int i = 1; i < n; i++) {\n+            doubleValue += values[i - 1];\n         }\n-        n++;\n+        meanImpl.increment((doubleValue - sum) / (n - 1));\n     }\n \n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}