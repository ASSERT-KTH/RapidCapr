{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        int monthToAdd = valueToAdd % 12;\n        int yearToAdd = valueToAdd / 12;\n        int newMonth = iChronology.monthOfYear().get(instant);\n        int newYear = iChronology.year().get(instant);\n        if (valueToAdd == 12) {\n            // UTC calculation can change 02-29 into 03-01 which is no good even for add(1 year).\n            // Instead it goes to next year at the same dayOfMonth.\n            if (iChronology.dayOfMonth().get(instant) == 29 && iChronology.monthOfYear().isLeap(newYear)) {\n                newMonth = iChronology.monthOfYear().get(instant);\n            } else {\n                newYear += yearToAdd;\n            }\n        } else if (monthToAdd != 0) {\n            if (newMonth == 2 && iChronology.dayOfMonth().get(instant) == 29) {\n                // if leap day and adding months crosses Feb. 29th then day of month + 1\n                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.year().set(instant, newYear));\n                if (maxDayOfMonth < 29) {\n                    newMonth++;\n                } else {\n                    newMonth = iChronology.monthOfYear().set(instant, newMonth + monthToAdd);\n                }\n            } else {\n                newMonth = iChronology.monthOfYear().add(instant, monthToAdd);\n            }\n            newYear += yearToAdd;\n        } else {\n            newYear += yearToAdd;\n        }\n        instant = iChronology.monthOfYear().set(instant, newMonth);\n        instant = iChronology.year().set(instant, newYear);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..783e1e0c 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,53 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        int monthToAdd = valueToAdd % 12;\n+        int yearToAdd = valueToAdd / 12;\n+        int newMonth = iChronology.monthOfYear().get(instant);\n+        int newYear = iChronology.year().get(instant);\n+        if (valueToAdd == 12) {\n+            // UTC calculation can change 02-29 into 03-01 which is no good even for add(1 year).\n+            // Instead it goes to next year at the same dayOfMonth.\n+            if (iChronology.dayOfMonth().get(instant) == 29 && iChronology.monthOfYear().isLeap(newYear)) {\n+                newMonth = iChronology.monthOfYear().get(instant);\n+            } else {\n+                newYear += yearToAdd;\n+            }\n+        } else if (monthToAdd != 0) {\n+            if (newMonth == 2 && iChronology.dayOfMonth().get(instant) == 29) {\n+                // if leap day and adding months crosses Feb. 29th then day of month + 1\n+                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(iChronology.year().set(instant, newYear));\n+                if (maxDayOfMonth < 29) {\n+                    newMonth++;\n+                } else {\n+                    newMonth = iChronology.monthOfYear().set(instant, newMonth + monthToAdd);\n+                }\n+            } else {\n+                newMonth = iChronology.monthOfYear().add(instant, monthToAdd);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            newYear += yearToAdd;\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            newYear += yearToAdd;\n         }\n+        instant = iChronology.monthOfYear().set(instant, newMonth);\n+        instant = iChronology.year().set(instant, newYear);\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}