{
    "patch": "      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN ||\n          // object literal keys\n          pType == Token.STRING || pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGet(parent)) {\n        Node root = NodeUtil.getRootOfQualifiedName(parent);\n        // check that the grandparent is an ASSIGN node because the grandparent\n        // of a GETPROP node is a String key (token type STRING) in an object literal\n        Node grandparent = root.getParent();\n        if (grandparent == null || grandparent.getType() != Token.ASSIGN) {\n          return true;\n        }\n\n        Node greatGrandparent = grandparent.getParent();\n        if (greatGrandparent == null || !NodeUtil.isExprAssign(greatGrandparent)) {\n          return true;\n        }\n\n        Node greatGreatGrandparent = greatGrandparent.getParent();\n        if (greatGreatGrandparent == null || !NodeUtil.isGet(greatGreatGrandparent)) {\n          return true;\n        }\n\n        Node greatGreatGreatGrandparent = greatGreatGrandparent.getParent();\n        if (greatGreatGreatGrandparent == null || !NodeUtil.isExprAssign(greatGreatGreatGrandparent)) {\n          return true;\n        }\n\n        Node getprop = greatGrandparent.getFirstChild();\n        if (NodeUtil.isPrototypeProperty(getprop)) {\n          return false;\n        }\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..84b1a495 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,75 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN ||\n+          // object literal keys\n+          pType == Token.STRING || pType == Token.NUMBER)) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Node root = NodeUtil.getRootOfQualifiedName(parent);\n+        // check that the grandparent is an ASSIGN node because the grandparent\n+        // of a GETPROP node is a String key (token type STRING) in an object literal\n+        Node grandparent = root.getParent();\n+        if (grandparent == null || grandparent.getType() != Token.ASSIGN) {\n+          return true;\n+        }\n+\n+        Node greatGrandparent = grandparent.getParent();\n+        if (greatGrandparent == null || !NodeUtil.isExprAssign(greatGrandparent)) {\n+          return true;\n+        }\n+\n+        Node greatGreatGrandparent = greatGrandparent.getParent();\n+        if (greatGreatGrandparent == null || !NodeUtil.isGet(greatGreatGrandparent)) {\n+          return true;\n+        }\n+\n+        Node greatGreatGreatGrandparent = greatGreatGrandparent.getParent();\n+        if (greatGreatGreatGrandparent == null || !NodeUtil.isExprAssign(greatGreatGreatGrandparent)) {\n+          return true;\n+        }\n+\n+        Node getprop = greatGrandparent.getFirstChild();\n+        if (NodeUtil.isPrototypeProperty(getprop)) {\n+          return false;\n+        }\n+      }\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        // Only traverse the right side if it's not an assignment to a prototype\n+        // property or subproperty.\n+        if (NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}