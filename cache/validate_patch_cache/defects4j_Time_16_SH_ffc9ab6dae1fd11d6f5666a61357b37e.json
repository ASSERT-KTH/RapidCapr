{
    "patch": "        long instantLocal = instantMillis;\n        if (instantLocal > 0) {\n            instantLocal = instantMillis / 1000 * 1000;\n        } else {\n            instantLocal = (instantMillis - 999) / 1000 * 1000;\n        }\n >>>       instantLocal = bucket.computeMillis(instant, instantLocal, text);\n        chrono = selectChronology(chrono);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..6d6cf9ea 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,14 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        long instantLocal = instantMillis;\n+        if (instantLocal > 0) {\n+            instantLocal = instantMillis / 1000 * 1000;\n+        } else {\n+            instantLocal = (instantMillis - 999) / 1000 * 1000;\n+        }\n+ >>>       instantLocal = bucket.computeMillis(instant, instantLocal, text);\n+        chrono = selectChronology(chrono);\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}