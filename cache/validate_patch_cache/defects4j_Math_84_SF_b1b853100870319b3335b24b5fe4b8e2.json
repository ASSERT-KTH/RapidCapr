{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the reflected point even if its larger than expanded as the reflection was smaller than the best point\n                    simplex = new RealPointValuePair[] { reflected };\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n\n                // compute the contracted contracted simplex\n                RealPointValuePair contractedContracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contractedContracted, contracted) < 0) {\n                    simplex = new RealPointValuePair[] { contractedContracted };\n                } else {\n                    simplex = new RealPointValuePair[] { contracted };\n                }\n\n            } else {\n                // shrink the simplex\n                final RealPointValuePair[] shrinked = shrink(original, comparator);\n                simplex = shrinked;\n            }\n\n            // check convergence\n            final RealPointValuePair newBest = simplex[0];\n            final double f0 = best.getValue();\n            final double f1 = newBest.getValue();\n            final double delta = Math.max(Math.abs(f0), Math.abs(f1));\n            final double size = 0;\n            for (int i = 0; i < simplex.length; ++i) {\n                final double[] x = simplex[i].getPoint();\n                for (int j = 0; j < x.length; ++j) {\n                    final double diff = simplex[i].getPoint()[j] - best.getPoint()[j];\n                    size += diff * diff;\n                }\n            }\n            if (delta <= ftol && size <= xtol) {\n                return;\n            }\n\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..fc1d379d4 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -79,6 +79,9 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    // accept the reflected point even if its larger than expanded as the reflection was smaller than the best point\n+                    simplex = new RealPointValuePair[] { reflected };\n                 }\n \n                 return;\n@@ -90,7 +93,34 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n \n+                // compute the contracted contracted simplex\n+                RealPointValuePair contractedContracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contractedContracted, contracted) < 0) {\n+                    simplex = new RealPointValuePair[] { contractedContracted };\n+                } else {\n+                    simplex = new RealPointValuePair[] { contracted };\n+                }\n+\n+            } else {\n+                // shrink the simplex\n+                final RealPointValuePair[] shrinked = shrink(original, comparator);\n+                simplex = shrinked;\n+            }\n+\n             // check convergence\n+            final RealPointValuePair newBest = simplex[0];\n+            final double f0 = best.getValue();\n+            final double f1 = newBest.getValue();\n+            final double delta = Math.max(Math.abs(f0), Math.abs(f1));\n+            final double size = 0;\n+            for (int i = 0; i < simplex.length; ++i) {\n+                final double[] x = simplex[i].getPoint();\n+                for (int j = 0; j < x.length; ++j) {\n+                    final double diff = simplex[i].getPoint()[j] - best.getPoint()[j];\n+                    size += diff * diff;\n+                }\n+            }\n+            if (delta <= ftol && size <= xtol) {\n                 return;\n             }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}