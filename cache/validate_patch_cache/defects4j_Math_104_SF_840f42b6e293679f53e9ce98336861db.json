{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double gamma = gamma(a);\n    double incompleteGamma = incompleteGamma(a, x);\n    return incompleteGamma / gamma;\n}\n\nprivate static double gamma(double x) {\n    double sqrt2pi = 2.5066282746310002;\n    double[] coef = {76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5};\n    double y = x;\n    double tmp = x + 5.5;\n    tmp -= (x + 0.5) * Math.log(tmp);\n    double ser = 1.000000000190015;\n    for (int j = 0; j <= 5; j++) {\n        y += 1;\n        ser += coef[j] / y;\n    }\n    return sqrt2pi * ser / x * Math.exp(-tmp);\n}\n\nprivate static double incompleteGamma(double a, double x) {\n    if (x == 0) {\n        return 0;\n    }\n    double upperIncompleteGamma = upperIncompleteGamma(a, x);\n    double gamma = gamma(a);\n    return gamma - upperIncompleteGamma;\n}\n\nprivate static double upperIncompleteGamma(double a, double x) {\n    double eps = 1.0e-14;\n    double fpmin = 1.0e-30;\n    double gln = logGamma(a);\n    double b = x + 1.0 - a;\n    double c = 1.0 / fpmin;\n    double d = 1.0 / b;\n    double h = d;\n    int i;\n    for (i = 1; i <= 100000; i++) {\n        double an = -i * (i - a);\n        b += 2.0;\n        d = an * d + b;\n        if (Math.abs(d) < fpmin) {\n            d = fpmin;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < fpmin) {\n            c = fpmin;\n        }\n        d = 1.0 / d;\n        double del = d * c;\n        h *= del;\n        if (Math.abs(del - 1.0) < eps) {\n            break;\n        }\n    }\n    if (i > 100000) {\n        throw new ArithmeticException(\"Maximum number of iterations exceeded in upperIncompleteGamma\");\n    }\n    return Math.exp(-x + a * Math.log(x) - gln) * h;\n}\n\nprivate static double logGamma(double x) {\n    double[] cof = {76.18009172947146, -86.50532032941677, 24.01409824083091,    -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5};\n    double xx, y, tmp, ser;\n    int j;\n    y = xx = x;\n    tmp = xx + 5.5;\n    tmp -= (xx + 0.5) * Math.log(tmp);\n    ser = 1.000000000190015;\n    for (j = 0; j <= 5; j++) {\n        ser += cof[j] / ++y;\n    }\n    return -tmp + Math.log(2.5066282746310005 * ser / xx);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..233be8192 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,81 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double gamma = gamma(a);\n+    double incompleteGamma = incompleteGamma(a, x);\n+    return incompleteGamma / gamma;\n+}\n+\n+private static double gamma(double x) {\n+    double sqrt2pi = 2.5066282746310002;\n+    double[] coef = {76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5};\n+    double y = x;\n+    double tmp = x + 5.5;\n+    tmp -= (x + 0.5) * Math.log(tmp);\n+    double ser = 1.000000000190015;\n+    for (int j = 0; j <= 5; j++) {\n+        y += 1;\n+        ser += coef[j] / y;\n+    }\n+    return sqrt2pi * ser / x * Math.exp(-tmp);\n+}\n+\n+private static double incompleteGamma(double a, double x) {\n+    if (x == 0) {\n+        return 0;\n+    }\n+    double upperIncompleteGamma = upperIncompleteGamma(a, x);\n+    double gamma = gamma(a);\n+    return gamma - upperIncompleteGamma;\n+}\n+\n+private static double upperIncompleteGamma(double a, double x) {\n+    double eps = 1.0e-14;\n+    double fpmin = 1.0e-30;\n+    double gln = logGamma(a);\n+    double b = x + 1.0 - a;\n+    double c = 1.0 / fpmin;\n+    double d = 1.0 / b;\n+    double h = d;\n+    int i;\n+    for (i = 1; i <= 100000; i++) {\n+        double an = -i * (i - a);\n+        b += 2.0;\n+        d = an * d + b;\n+        if (Math.abs(d) < fpmin) {\n+            d = fpmin;\n+        }\n+        c = b + an / c;\n+        if (Math.abs(c) < fpmin) {\n+            c = fpmin;\n+        }\n+        d = 1.0 / d;\n+        double del = d * c;\n+        h *= del;\n+        if (Math.abs(del - 1.0) < eps) {\n+            break;\n+        }\n+    }\n+    if (i > 100000) {\n+        throw new ArithmeticException(\"Maximum number of iterations exceeded in upperIncompleteGamma\");\n+    }\n+    return Math.exp(-x + a * Math.log(x) - gln) * h;\n+}\n+\n+private static double logGamma(double x) {\n+    double[] cof = {76.18009172947146, -86.50532032941677, 24.01409824083091,    -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5};\n+    double xx, y, tmp, ser;\n+    int j;\n+    y = xx = x;\n+    tmp = xx + 5.5;\n+    tmp -= (xx + 0.5) * Math.log(tmp);\n+    ser = 1.000000000190015;\n+    for (j = 0; j <= 5; j++) {\n+        ser += cof[j] / ++y;\n+    }\n+    return -tmp + Math.log(2.5066282746310005 * ser / xx);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}