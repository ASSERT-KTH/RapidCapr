{
    "patch": ">>> [ INFILL ] <<<\n      if (value != null && !NodeUtil.mayHaveSideEffects(value) &&\n          (value.isString() || value.isNumber() ||\n           value.getToken() == Token.TRUE || value.getToken() == Token.FALSE)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..f9459d07 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,10 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+>>> [ INFILL ] <<<\n+      if (value != null && !NodeUtil.mayHaveSideEffects(value) &&\n+          (value.isString() || value.isNumber() ||\n+           value.getToken() == Token.TRUE || value.getToken() == Token.FALSE)) {\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}