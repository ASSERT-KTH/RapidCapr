{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n\n    VisitState visitState = new VisitState();\n    readTypeVariables(typeVariable, visitState);\n}\n\nprivate void readTypeVariables(TypeVariable<?> typeVariable, VisitState visitState) {\n    visitState.addVisited(typeVariable);\n\n    for (Type bound : typeVariable.getBounds()) {\n        if (bound instanceof TypeVariable<?>) {\n            TypeVariable<?> boundVariable = (TypeVariable<?>) bound;\n            if (!visitState.hasVisited(boundVariable)) {\n                readTypeVariables(boundVariable, visitState);\n            }\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument instanceof TypeVariable<?>) {\n        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n\n        if (!visitState.hasVisited(actualTypeVariable)) {\n            readTypeVariables(actualTypeVariable, visitState);\n        }\n    } else if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}\n\nprivate static class VisitState {\n    private final Set<TypeVariable<?>> visited;\n\n    public VisitState() {\n        visited = new HashSet<>();\n    }\n\n    public void addVisited(TypeVariable<?> typeVariable) {\n        visited.add(typeVariable);\n    }\n\n    public boolean hasVisited(TypeVariable<?> typeVariable) {\n        return visited.contains(typeVariable);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..450534c3b 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,57 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+\n+    VisitState visitState = new VisitState();\n+    readTypeVariables(typeVariable, visitState);\n+}\n+\n+private void readTypeVariables(TypeVariable<?> typeVariable, VisitState visitState) {\n+    visitState.addVisited(typeVariable);\n+\n+    for (Type bound : typeVariable.getBounds()) {\n+        if (bound instanceof TypeVariable<?>) {\n+            TypeVariable<?> boundVariable = (TypeVariable<?>) bound;\n+            if (!visitState.hasVisited(boundVariable)) {\n+                readTypeVariables(boundVariable, visitState);\n+            }\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument instanceof TypeVariable<?>) {\n+        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n+\n+        if (!visitState.hasVisited(actualTypeVariable)) {\n+            readTypeVariables(actualTypeVariable, visitState);\n+        }\n+    } else if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n+\n+private static class VisitState {\n+    private final Set<TypeVariable<?>> visited;\n+\n+    public VisitState() {\n+        visited = new HashSet<>();\n+    }\n+\n+    public void addVisited(TypeVariable<?> typeVariable) {\n+        visited.add(typeVariable);\n+    }\n+\n+    public boolean hasVisited(TypeVariable<?> typeVariable) {\n+        return visited.contains(typeVariable);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}