{
    "patch": "private String getRemainingJSDocLine() {\n    String result = \"\";\n    boolean done = false;\n    while (!done) {\n        String line = stream.getRemainingJSDocLine();\n        if (line == null) {\n            done = true;\n        } else if (line.contains(\"*/\")) {\n            result = result.concat(line.substring(0, line.indexOf(\"*/\") + 2)));\n            done = true;\n        } else if (line.contains(\"@type\")) {\n            result = result.concat(line);\n        } else {\n            result = result.concat(line).concat(\" \");\n        }\n    }\n    return result.trim().isEmpty() ? null : result.trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..aa81ad1d 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,24 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n-    String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+private String getRemainingJSDocLine() {\n+    String result = \"\";\n+    boolean done = false;\n+    while (!done) {\n+        String line = stream.getRemainingJSDocLine();\n+        if (line == null) {\n+            done = true;\n+        } else if (line.contains(\"*/\")) {\n+            result = result.concat(line.substring(0, line.indexOf(\"*/\") + 2)));\n+            done = true;\n+        } else if (line.contains(\"@type\")) {\n+            result = result.concat(line);\n+        } else {\n+            result = result.concat(line).concat(\" \");\n+        }\n+    }\n+    return result.trim().isEmpty() ? null : result.trim();\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}