{
    "patch": "                    bucket.setZone(DateTimeZone.forID(id));\n                    return position + id.length();\n                }\n            }\n            int underscoreIndex = str.indexOf('_');\n            if (underscoreIndex >= 0) {\n                str = str.substring(underscoreIndex + 1);\n                for (String id : ALL_IDS) {\n                    if (str.startsWith(id)) {\n                        bucket.setZone(DateTimeZone.forID(id));\n                        return position + underscoreIndex + 1 + id.length();\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..0fb76232 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,16 +2537,18 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n                     bucket.setZone(DateTimeZone.forID(id));\n                     return position + id.length();\n                 }\n             }\n-            return ~position;\n-        }\n+            int underscoreIndex = str.indexOf('_');\n+            if (underscoreIndex >= 0) {\n+                str = str.substring(underscoreIndex + 1);\n+                for (String id : ALL_IDS) {\n+                    if (str.startsWith(id)) {\n+                        bucket.setZone(DateTimeZone.forID(id));\n+                        return position + underscoreIndex + 1 + id.length();\n+                    }\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}