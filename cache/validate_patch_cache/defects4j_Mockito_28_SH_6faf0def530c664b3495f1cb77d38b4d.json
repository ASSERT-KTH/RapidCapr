{
    "patch": "    Set<MockCandidate> candidates = mockCandidateFilter.filterCandidates(mocks, field, fieldInstance);\n    MockCandidate selected = mockCandidateFilter.selectCandidate(candidates);\n    if (selected != null) {\n        selected.thenInject();\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..7c759877a 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,14 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+    Set<MockCandidate> candidates = mockCandidateFilter.filterCandidates(mocks, field, fieldInstance);\n+    MockCandidate selected = mockCandidateFilter.selectCandidate(candidates);\n+    if (selected != null) {\n+        selected.thenInject();\n+    }\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}