{
    "patch": "        if (boundaries != null) {\n            for (int i = 0; i < init.length; i++) {\n                if ((boundaries[1][i] - init[i]) / inputSigma[i] > 0.5) {\n                    throw new NumberIsTooLargeException(init[i], boundaries[1][i], false);\n                } else if ((init[i] - boundaries[0][i]) / inputSigma[i] > 0.5) {\n                    throw new NumberIsTooSmallException(init[i], boundaries[0][i], false);\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..2d224545b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,15 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+        if (boundaries != null) {\n+            for (int i = 0; i < init.length; i++) {\n+                if ((boundaries[1][i] - init[i]) / inputSigma[i] > 0.5) {\n+                    throw new NumberIsTooLargeException(init[i], boundaries[1][i], false);\n+                } else if ((init[i] - boundaries[0][i]) / inputSigma[i] > 0.5) {\n+                    throw new NumberIsTooSmallException(init[i], boundaries[0][i], false);\n+                }\n+            }\n+        }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}