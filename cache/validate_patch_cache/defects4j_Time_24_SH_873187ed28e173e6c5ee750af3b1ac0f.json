{
    "patch": "        int failureIndex = -1;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            failureIndex = e.getIllegalFieldValueExceptionIndex();\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                        \n                    // Compute the index of the field with illegal value\n                    DateTimeParserBucket bucket = new DateTimeParserBucket(millis, iChrono, iLocale);\n                    bucket.saveFieldsFrom(this);\n                    bucket.restoreState(savedFields, count);\n                    int endIndex = failureIndex + 1;\n                    for (int i = 0; i < endIndex; i++) {\n                        bucket.saveField(DateTimeFieldType.year(), iDefaultYear);                       \n                        try {\n                            savedFields[i].set(bucket, resetFields);\n                        } catch (IllegalFieldValueException ex) {\n                            failureIndex = i;\n                            break;\n                        }\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..1a9c07d6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,44 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        int failureIndex = -1;\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            failureIndex = e.getIllegalFieldValueExceptionIndex();\n+            throw e;\n+        }\n+        \n+        if (iZone == null) {\n+            millis -= iOffset;\n+        } else {\n+            int offset = iZone.getOffsetFromLocal(millis);\n+            millis -= offset;\n+            if (offset != iZone.getOffset(millis)) {\n+                String message =\n+                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                if (text != null) {\n+                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                        \n+                    // Compute the index of the field with illegal value\n+                    DateTimeParserBucket bucket = new DateTimeParserBucket(millis, iChrono, iLocale);\n+                    bucket.saveFieldsFrom(this);\n+                    bucket.restoreState(savedFields, count);\n+                    int endIndex = failureIndex + 1;\n+                    for (int i = 0; i < endIndex; i++) {\n+                        bucket.saveField(DateTimeFieldType.year(), iDefaultYear);                       \n+                        try {\n+                            savedFields[i].set(bucket, resetFields);\n+                        } catch (IllegalFieldValueException ex) {\n+                            failureIndex = i;\n+                            break;\n+                        }\n+                    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}