{
    "patch": "    public void captureArgumentsFrom(Invocation invocation) {\n        if (invocation.getMethod().isVarArgs()) {\n            int indexOfVararg = invocation.getRawArguments().length - 1;\n            for (int position = 0; position < matchers.size() && position <= indexOfVararg; position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                }\n            }\n            // Capture varargs if applicable\n            Matcher varargMatcher = null;\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof VarargMatcher) {\n                    varargMatcher = m;\n                    break;\n                }\n            }\n            if (varargMatcher != null) {\n                for (int position = indexOfVararg; position < invocation.getRawArguments().length; position++) {\n                    varargMatcher.captureFrom(invocation.getRawArguments()[position]);\n                }\n            }\n        } else {\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..159fde762 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,33 +120,34 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n-\n+            for (int position = 0; position < matchers.size() && position <= indexOfVararg; position++) {\n+                Matcher m = matchers.get(position);\n+                if (m instanceof CapturesArguments) {\n+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n+                }\n+            }\n+            // Capture varargs if applicable\n+            Matcher varargMatcher = null;\n+            for (int position = 0; position < matchers.size(); position++) {\n+                Matcher m = matchers.get(position);\n+                if (m instanceof VarargMatcher) {\n+                    varargMatcher = m;\n+                    break;\n+                }\n+            }\n+            if (varargMatcher != null) {\n+                for (int position = indexOfVararg; position < invocation.getRawArguments().length; position++) {\n+                    varargMatcher.captureFrom(invocation.getRawArguments()[position]);\n+                }\n+            }\n         } else {\n             for (int position = 0; position < matchers.size(); position++) {\n                 Matcher m = matchers.get(position);\n                 if (m instanceof CapturesArguments) {\n-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                 }\n             }\n         }\n-\n-//        for (int position = 0; position < matchers.size(); position++) {\n-//            Matcher m = matchers.get(position);\n-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n-//                //TODO SF - this whole lot can be moved captureFrom implementation\n-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n-//                    Object array = invocation.getRawArguments()[position];\n-//                    for (int i = 0; i < Array.getLength(array); i++) {\n-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n-//                    }\n-//                    //since we've captured all varargs already, it does not make sense to process other matchers.\n-//                    return;\n-//                } else {\n-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n-//                }\n-//            }\n-//        }\n     }\n \n     private boolean isVarargMatcher(Matcher matcher) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}