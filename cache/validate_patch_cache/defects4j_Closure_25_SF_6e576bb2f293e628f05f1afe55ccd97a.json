{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        } else if (constructor.getJSType().isInterface()) {\n          type = getNativeType(OBJECT_TYPE_MARKER);\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    if (type != null) {\n      ObjectType objType = ObjectType.cast(type);\n      if (objType != null) {\n        JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n        if (info != null && info.hasEnumParameterType()) {\n          JSType et = info.getEnumParameterType().evaluate(scope, getTypeRegistry());\n          for (String propertyName : objType.getPropertyNames()) {\n            ObjectType p = objType.getPropertyType(propertyName).autobox().dereference().getObjectRepresentation();\n            if (et.isSubtypeOf(p)) {\n              objType.defineInferredProperty(propertyName, info.getEnumParameterType(), n);\n            }\n          }\n        }\n      }\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..e31f4be5 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1052,6 +1052,8 @@ class TypeInference\n         }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n+        } else if (constructor.getJSType().isInterface()) {\n+          type = getNativeType(OBJECT_TYPE_MARKER);\n         }\n       }\n     }\n@@ -1059,6 +1061,21 @@ class TypeInference\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }\n+    if (type != null) {\n+      ObjectType objType = ObjectType.cast(type);\n+      if (objType != null) {\n+        JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n+        if (info != null && info.hasEnumParameterType()) {\n+          JSType et = info.getEnumParameterType().evaluate(scope, getTypeRegistry());\n+          for (String propertyName : objType.getPropertyNames()) {\n+            ObjectType p = objType.getPropertyType(propertyName).autobox().dereference().getObjectRepresentation();\n+            if (et.isSubtypeOf(p)) {\n+              objType.defineInferredProperty(propertyName, info.getEnumParameterType(), n);\n+            }\n+          }\n+        }\n+      }\n+    }\n     return scope;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}