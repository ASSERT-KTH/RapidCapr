{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException();\n    }\n    double result = 0;\n    double epsilon = 1e-15;\n    double previous = 0;\n    double gamma = incompleteGamma(a, x);\n    \n    result = Math.exp(-x + a * Math.log(x) - logGamma(a)) * gamma / a;\n    while (Math.abs(previous - result) > epsilon) {\n        previous = result;\n        a += 1;\n        gamma = incompleteGamma(a, x);\n        result += Math.exp(-x + a * Math.log(x) - logGamma(a)) * gamma / a;\n    }\n    return result;\n}\n\npublic static double incompleteGamma(double a, double x) {\n    double epsilon = 1e-15;\n    double gamma;\n    double previous = 0;\n    if (x <= 0 || a <= 0) {\n        gamma = 0;\n    } else {\n        gamma = Math.pow(x, a) * Math.exp(-x) / a;\n        while (Math.abs(gamma - previous) > epsilon) {\n            previous = gamma;\n            a += 1;\n            gamma += Math.pow(x, a) * Math.exp(-x) / a;\n        }\n    }\n    return gamma;\n}\n\npublic static double logGamma(double x) {\n    double[] coeffs = {0.99999999999980993, 676.5203681218851, -1259.1392167224028,\n                       771.32342877765313, -176.61502916214059, 12.507343278686905,\n                       -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7};\n    double sum = coeffs[0];\n    for (int i = 1; i < coeffs.length; i++) {\n        sum += coeffs[i] / (x + i);\n    }\n    double tmp = (x + 0.5) * Math.log(x + 5.5) - (x + 5.5) + Math.log(sum * Math.sqrt(2 * Math.PI));\n    return tmp - Math.log10(x);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..a474afb30 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,53 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException();\n+    }\n+    double result = 0;\n+    double epsilon = 1e-15;\n+    double previous = 0;\n+    double gamma = incompleteGamma(a, x);\n+    \n+    result = Math.exp(-x + a * Math.log(x) - logGamma(a)) * gamma / a;\n+    while (Math.abs(previous - result) > epsilon) {\n+        previous = result;\n+        a += 1;\n+        gamma = incompleteGamma(a, x);\n+        result += Math.exp(-x + a * Math.log(x) - logGamma(a)) * gamma / a;\n+    }\n+    return result;\n+}\n+\n+public static double incompleteGamma(double a, double x) {\n+    double epsilon = 1e-15;\n+    double gamma;\n+    double previous = 0;\n+    if (x <= 0 || a <= 0) {\n+        gamma = 0;\n+    } else {\n+        gamma = Math.pow(x, a) * Math.exp(-x) / a;\n+        while (Math.abs(gamma - previous) > epsilon) {\n+            previous = gamma;\n+            a += 1;\n+            gamma += Math.pow(x, a) * Math.exp(-x) / a;\n+        }\n+    }\n+    return gamma;\n+}\n+\n+public static double logGamma(double x) {\n+    double[] coeffs = {0.99999999999980993, 676.5203681218851, -1259.1392167224028,\n+                       771.32342877765313, -176.61502916214059, 12.507343278686905,\n+                       -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7};\n+    double sum = coeffs[0];\n+    for (int i = 1; i < coeffs.length; i++) {\n+        sum += coeffs[i] / (x + i);\n+    }\n+    double tmp = (x + 0.5) * Math.log(x + 5.5) - (x + 5.5) + Math.log(sum * Math.sqrt(2 * Math.PI));\n+    return tmp - Math.log10(x);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}