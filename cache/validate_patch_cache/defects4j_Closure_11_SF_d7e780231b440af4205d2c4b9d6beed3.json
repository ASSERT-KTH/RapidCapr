{
    "patch": "public void testGetprop4() {\n    String key = \"non.existent\";\n    String result = config.getProperty(key);\n    assertNull(result);\n\n    // Check that a warning was issued\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    PrintStream ps = new PrintStream(os);\n    System.setErr(ps);\n\n    config.getProperty(\"non.existent\");\n\n    String warnings = os.toString();\n    assertTrue(\"expected a warning\", warnings.contains(\"Could not load properties file.\"));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..3a97d7f8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() {\n+    String key = \"non.existent\";\n+    String result = config.getProperty(key);\n+    assertNull(result);\n+\n+    // Check that a warning was issued\n+    ByteArrayOutputStream os = new ByteArrayOutputStream();\n+    PrintStream ps = new PrintStream(os);\n+    System.setErr(ps);\n+\n+    config.getProperty(\"non.existent\");\n+\n+    String warnings = os.toString();\n+    assertTrue(\"expected a warning\", warnings.contains(\"Could not load properties file.\"));\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}