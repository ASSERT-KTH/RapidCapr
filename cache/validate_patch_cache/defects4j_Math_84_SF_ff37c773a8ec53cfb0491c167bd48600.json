{
    "patch": "import org.apache.commons.math3.util.FastMath;\n\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the expanded simplex\n                simplex = replaceWorstPoint(original, expanded, comparator);\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = replaceWorstPoint(original, contracted, comparator);\n            } else {\n\n                // perform a shrinking step\n                for (int i = 1; i < original.length; i++) {\n\n                    final double[] points = original[i].getPoint();\n                    final double[] newPoints = new double[points.length];\n\n                    // apply the shrinking coefficient to each point\n                    for (int j = 0; j < points.length; j++) {\n                        newPoints[j] = best.getPoint()[j] + sigma * (points[j] - best.getPoint()[j]);\n                    }\n\n                    // create the new point\n                    final RealPointValuePair newPoint = new RealPointValuePair(newPoints, computeObjectiveValue(newPoints));\n                    original[i] = newPoint;\n                }\n\n                // re-sort and return the new simplex\n                simplex = sortSimplex(original, comparator);\n\n            }\n        }\n\n        // check convergence\n        final double minValue = simplex[0].getValue();\n        final double maxValue = simplex[simplex.length - 1].getValue();\n        final double delta = FastMath.abs(maxValue - minValue);\n        final double stopSize = getRelativeThreshold() * (FastMath.abs(maxValue) + getAbsoluteThreshold());\n\n        if (delta <= stopSize || getEvaluations() > getMaxEvaluations()) {\n            return;\n        }\n\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..72933f581 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,77 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n+import org.apache.commons.math3.util.FastMath;\n \n-            incrementIterationsCounter();\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+    while (true) {\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        incrementIterationsCounter();\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // accept the expanded simplex\n+                simplex = replaceWorstPoint(original, expanded, comparator);\n             }\n \n+        } else {\n+\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = replaceWorstPoint(original, contracted, comparator);\n+            } else {\n+\n+                // perform a shrinking step\n+                for (int i = 1; i < original.length; i++) {\n+\n+                    final double[] points = original[i].getPoint();\n+                    final double[] newPoints = new double[points.length];\n+\n+                    // apply the shrinking coefficient to each point\n+                    for (int j = 0; j < points.length; j++) {\n+                        newPoints[j] = best.getPoint()[j] + sigma * (points[j] - best.getPoint()[j]);\n+                    }\n+\n+                    // create the new point\n+                    final RealPointValuePair newPoint = new RealPointValuePair(newPoints, computeObjectiveValue(newPoints));\n+                    original[i] = newPoint;\n+                }\n+\n+                // re-sort and return the new simplex\n+                simplex = sortSimplex(original, comparator);\n \n-            // check convergence\n-                return;\n             }\n+        }\n+\n+        // check convergence\n+        final double minValue = simplex[0].getValue();\n+        final double maxValue = simplex[simplex.length - 1].getValue();\n+        final double delta = FastMath.abs(maxValue - minValue);\n+        final double stopSize = getRelativeThreshold() * (FastMath.abs(maxValue) + getAbsoluteThreshold());\n \n+        if (delta <= stopSize || getEvaluations() > getMaxEvaluations()) {\n+            return;\n         }\n \n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}