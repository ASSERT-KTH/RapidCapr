{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int initialOffset = getOffset(instantLocal);\n\n    // Get the UTC instant corresponding to instantLocal using the initial offset.\n    long instantUTC = instantLocal - initialOffset;\n\n    // Get the offset for the UTC instant, which may be different from the initial estimate.\n    int offsetAtUTC = getOffset(instantUTC);\n\n    // If the initial and current offset differ, check for a DST boundary.\n    if (initialOffset != offsetAtUTC) {\n\n        // Find the next DST transition after instantUTC.\n        long nextLocalTransition = nextTransition(instantUTC);\n\n        // Find the corresponding UTC transition.\n        long nextUTCTransition = nextTransition(nextLocalTransition - offsetAtUTC);\n\n        // If the transitions coincide, there is no ambiguity.\n        if (nextLocalTransition == nextUTCTransition) {\n            return offsetAtUTC;\n        }\n\n        // Determine which side of the transition instantLocal is on.\n        if (instantLocal >= nextLocalTransition) {\n            return offsetAtUTC;\n        } else if (nextLocalTransition - instantLocal < offsetAtUTC - initialOffset) {\n            return getOffset(nextLocalTransition);\n        } else {\n            return initialOffset;\n        }\n    } else {\n        return initialOffset;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..a1b27f30 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,42 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int initialOffset = getOffset(instantLocal);\n+\n+    // Get the UTC instant corresponding to instantLocal using the initial offset.\n+    long instantUTC = instantLocal - initialOffset;\n+\n+    // Get the offset for the UTC instant, which may be different from the initial estimate.\n+    int offsetAtUTC = getOffset(instantUTC);\n+\n+    // If the initial and current offset differ, check for a DST boundary.\n+    if (initialOffset != offsetAtUTC) {\n+\n+        // Find the next DST transition after instantUTC.\n+        long nextLocalTransition = nextTransition(instantUTC);\n+\n+        // Find the corresponding UTC transition.\n+        long nextUTCTransition = nextTransition(nextLocalTransition - offsetAtUTC);\n+\n+        // If the transitions coincide, there is no ambiguity.\n+        if (nextLocalTransition == nextUTCTransition) {\n+            return offsetAtUTC;\n         }\n-        return offsetAdjusted;\n+\n+        // Determine which side of the transition instantLocal is on.\n+        if (instantLocal >= nextLocalTransition) {\n+            return offsetAtUTC;\n+        } else if (nextLocalTransition - instantLocal < offsetAtUTC - initialOffset) {\n+            return getOffset(nextLocalTransition);\n+        } else {\n+            return initialOffset;\n+        }\n+    } else {\n+        return initialOffset;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}