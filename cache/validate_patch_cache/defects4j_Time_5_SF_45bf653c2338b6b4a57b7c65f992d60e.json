{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    int years = 0;\n    int months = 0;\n    int weeks = 0;\n    int days = 0;\n\n    if (type.isSupported(DurationFieldType.years())) {\n        years = getYears();\n    }\n    if (type.isSupported(DurationFieldType.months())) {\n        int totalMonths = getMonths() + (years * 12);\n        years = totalMonths / 12;\n        months = totalMonths % 12;\n    }\n    if (type.isSupported(DurationFieldType.weeks())) {\n        int daysFromWeeks = getWeeks() * 7;\n        weeks = daysFromWeeks / 7;\n        days = daysFromWeeks % 7;\n    }\n    if (type.isSupported(DurationFieldType.days())) {\n        days += getDays();\n    }\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    result = result.withYears(years).withMonths(months).withWeeks(weeks).withDays(days);\n\n    return result.normalizedStandard();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..0be781da 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,42 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    long millis = getMillis();\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+\n+    int years = 0;\n+    int months = 0;\n+    int weeks = 0;\n+    int days = 0;\n+\n+    if (type.isSupported(DurationFieldType.years())) {\n+        years = getYears();\n+    }\n+    if (type.isSupported(DurationFieldType.months())) {\n+        int totalMonths = getMonths() + (years * 12);\n+        years = totalMonths / 12;\n+        months = totalMonths % 12;\n+    }\n+    if (type.isSupported(DurationFieldType.weeks())) {\n+        int daysFromWeeks = getWeeks() * 7;\n+        weeks = daysFromWeeks / 7;\n+        days = daysFromWeeks % 7;\n     }\n+    if (type.isSupported(DurationFieldType.days())) {\n+        days += getDays();\n+    }\n+\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    result = result.withYears(years).withMonths(months).withWeeks(weeks).withDays(days);\n+\n+    return result.normalizedStandard();\n+}\n \n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}