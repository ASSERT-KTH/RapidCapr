{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.EXPR_RESULT) {\n            defineDeclaredFunction(n, parent);\n          } else if (n.getFirstChild().getType() == Token.NAME) {\n            defineDeclaredFunction(n.getFirstChild(), n);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          for (int i = 0; i < n.getChildCount(); i++) {\n            defineVar(n.getChildAt(i), parent);\n          }\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..7e6c77cd 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1451,16 +1451,19 @@ final class TypedScopeCreator implements ScopeCreator {\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          if (parent.getType() == Token.EXPR_RESULT) {\n+            defineDeclaredFunction(n, parent);\n+          } else if (n.getFirstChild().getType() == Token.NAME) {\n+            defineDeclaredFunction(n.getFirstChild(), n);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n-          defineVar(n, parent);\n+          for (int i = 0; i < n.getChildCount(); i++) {\n+            defineVar(n.getChildAt(i), parent);\n+          }\n           break;\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}