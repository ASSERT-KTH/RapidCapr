{
    "patch": "        } catch (IllegalFieldValueException e) {\n            // Save error information to be used later\n            if (iError == null) {\n                iError = e;\n            }\n            // If error is before last field, then drop saved fields down\n            if (e.getIllegalFieldValueExceptionType() == IllegalFieldValueException.TYPE_DATE_DURATION\n                    && iParsed.isSupportedDurationField()) {\n                int errorValue = ((Integer) e.getIllegalFieldValue()).intValue();\n                int bestField = -1;\n                int fieldValue;\n                for (int i = 0; i < iSavedFieldsCount; i++) {\n                    fieldValue = iSavedFields[i].iField.getType();\n                    if (fieldValue > bestField && fieldValue <= DateTimeFieldType.seconds().getType()) {\n                        bestField = fieldValue;\n                    }\n                }\n                if (bestField >= 0) {\n                    for (int i = 0; i < iSavedFieldsCount; i++) {\n                        fieldValue = iSavedFields[i].iField.getType();\n                        if (fieldValue < bestField || (fieldValue == bestField && fieldValue == DateTimeFieldType.monthOfYear().getType())) {\n                            resetField(iSavedFields[i], i);\n                            iSavedFields[i] = null;\n                        }\n                    }\n                    if (iErrorValues == null) {\n                        iErrorValues = new int[3];\n                    }\n                    iErrorValues[0] = bestField;\n                    iErrorValues[1] = errorValue;\n                    iErrorValues[2] = e.getIllegalFieldValueRangeDuration();\n                    return computeMillis(resetFlag, text);\n                }\n            }\n            throw e;\n        }\n",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..0350f964 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,43 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            // Save error information to be used later\n+            if (iError == null) {\n+                iError = e;\n+            }\n+            // If error is before last field, then drop saved fields down\n+            if (e.getIllegalFieldValueExceptionType() == IllegalFieldValueException.TYPE_DATE_DURATION\n+                    && iParsed.isSupportedDurationField()) {\n+                int errorValue = ((Integer) e.getIllegalFieldValue()).intValue();\n+                int bestField = -1;\n+                int fieldValue;\n+                for (int i = 0; i < iSavedFieldsCount; i++) {\n+                    fieldValue = iSavedFields[i].iField.getType();\n+                    if (fieldValue > bestField && fieldValue <= DateTimeFieldType.seconds().getType()) {\n+                        bestField = fieldValue;\n+                    }\n+                }\n+                if (bestField >= 0) {\n+                    for (int i = 0; i < iSavedFieldsCount; i++) {\n+                        fieldValue = iSavedFields[i].iField.getType();\n+                        if (fieldValue < bestField || (fieldValue == bestField && fieldValue == DateTimeFieldType.monthOfYear().getType())) {\n+                            resetField(iSavedFields[i], i);\n+                            iSavedFields[i] = null;\n+                        }\n+                    }\n+                    if (iErrorValues == null) {\n+                        iErrorValues = new int[3];\n+                    }\n+                    iErrorValues[0] = bestField;\n+                    iErrorValues[1] = errorValue;\n+                    iErrorValues[2] = e.getIllegalFieldValueRangeDuration();\n+                    return computeMillis(resetFlag, text);\n+                }\n+            }\n+            throw e;\n+        }\n+\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}