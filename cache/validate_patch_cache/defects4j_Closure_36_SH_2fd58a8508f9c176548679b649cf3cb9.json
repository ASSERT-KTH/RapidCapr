{
    "patch": "        if (callNode != null && callNode.isCall()) {\n          CodingConvention convention = compiler.getCodingConvention();\n          // Bug 2388531: Don't inline subclass definitions into class defining\n          // calls as this confused class removing logic.\n          SubclassRelationship relationship =\n              convention.getClassesDefinedByCall(callNode);\n          if (relationship != null) {\n            return false;\n          }\n\n          // issue 668: Don't inline singleton getter methods\n          // calls as this confused class removing logic.\n          Node parent = value.getParent();\n          if (parent.isAssign()) {\n            Node grandParent = parent.getParent();\n            if (grandParent.isExprResult()) {\n              String fnName = convention.getFunctionName(parent);\n              if (convention.isSingletonGetter(fnName, parent)) {\n                return false;\n              }\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..11d00bc1 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,27 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+        if (callNode != null && callNode.isCall()) {\n+          CodingConvention convention = compiler.getCodingConvention();\n+          // Bug 2388531: Don't inline subclass definitions into class defining\n+          // calls as this confused class removing logic.\n+          SubclassRelationship relationship =\n+              convention.getClassesDefinedByCall(callNode);\n+          if (relationship != null) {\n+            return false;\n+          }\n+\n+          // issue 668: Don't inline singleton getter methods\n+          // calls as this confused class removing logic.\n+          Node parent = value.getParent();\n+          if (parent.isAssign()) {\n+            Node grandParent = parent.getParent();\n+            if (grandParent.isExprResult()) {\n+              String fnName = convention.getFunctionName(parent);\n+              if (convention.isSingletonGetter(fnName, parent)) {\n+                return false;\n+              }\n+            }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}