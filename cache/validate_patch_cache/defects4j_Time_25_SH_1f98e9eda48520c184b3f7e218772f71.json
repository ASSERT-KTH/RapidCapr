{
    "patch": "final int offsetLocal = getOffset(instantLocal);\nfinal long instantAdjusted = instantLocal - offsetLocal;\nfinal int offsetAdjusted = getOffset(instantAdjusted);\n\nif (offsetAdjusted != offsetLocal) {\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetAdjusted > offsetLocal) {\n        // we need to ensure that time is always after the DST gap\n        final long nextLocal = nextTransition(instantAdjusted);\n        final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        }\n    } else {\n        // if offsetAdjusted < offsetLocal\n        final long prevLocal = previousTransition(instantAdjusted);\n        final long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n        if (prevLocal < prevAdjusted) {\n            return offsetAdjusted;\n        } else if (prevLocal > prevAdjusted) {\n            return offsetLocal;\n        } else {\n            final int newOffsetAdjusted = getOffset(prevAdjusted - 1);\n            final boolean newDstBound = newOffsetAdjusted != offsetLocal;\n            if (newDstBound) {\n                final long nextLocal = nextTransition(prevAdjusted - 1);\n                if (nextLocal != prevAdjusted) {\n                    return offsetLocal;\n                } else {\n                    return newOffsetAdjusted;\n                }\n            } else {\n                return offsetAdjusted;\n            }\n        }\n    }\n}\n\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..58a8a516 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,45 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+final int offsetLocal = getOffset(instantLocal);\n+final long instantAdjusted = instantLocal - offsetLocal;\n+final int offsetAdjusted = getOffset(instantAdjusted);\n+\n+if (offsetAdjusted != offsetLocal) {\n+    // if the offsets differ, we must be near a DST boundary\n+    if (offsetAdjusted > offsetLocal) {\n+        // we need to ensure that time is always after the DST gap\n+        final long nextLocal = nextTransition(instantAdjusted);\n+        final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        }\n+    } else {\n+        // if offsetAdjusted < offsetLocal\n+        final long prevLocal = previousTransition(instantAdjusted);\n+        final long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+        if (prevLocal < prevAdjusted) {\n+            return offsetAdjusted;\n+        } else if (prevLocal > prevAdjusted) {\n+            return offsetLocal;\n+        } else {\n+            final int newOffsetAdjusted = getOffset(prevAdjusted - 1);\n+            final boolean newDstBound = newOffsetAdjusted != offsetLocal;\n+            if (newDstBound) {\n+                final long nextLocal = nextTransition(prevAdjusted - 1);\n+                if (nextLocal != prevAdjusted) {\n+                    return offsetLocal;\n+                } else {\n+                    return newOffsetAdjusted;\n+                }\n+            } else {\n+                return offsetAdjusted;\n+            }\n+        }\n+    }\n+}\n+\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: variable offsetLocal is already defined in method getOffsetFromLocal(long)",
    "test_result": "ERROR"
}