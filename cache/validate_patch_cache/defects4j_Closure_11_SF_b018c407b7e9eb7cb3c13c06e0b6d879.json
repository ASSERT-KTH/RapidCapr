{
    "patch": "public void testGetprop4() {\n    ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n    PrintStream out = new PrintStream(outStream);\n    PrintStream oldOut = System.out;\n    System.setOut(out);\n    \n    try {\n        Main.getprop(new String[]{\"x.y.z\"});\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    \n    System.setOut(oldOut);\n    String output = outStream.toString();\n    String[] warnings = output.split(\"WARNING:\");\n    assertTrue(\"expected a warning\", warnings.length > 1);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..ab9bdab3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() {\n+    ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n+    PrintStream out = new PrintStream(outStream);\n+    PrintStream oldOut = System.out;\n+    System.setOut(out);\n+    \n+    try {\n+        Main.getprop(new String[]{\"x.y.z\"});\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+    }\n+    \n+    System.setOut(oldOut);\n+    String output = outStream.toString();\n+    String[] warnings = output.split(\"WARNING:\");\n+    assertTrue(\"expected a warning\", warnings.length > 1);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}