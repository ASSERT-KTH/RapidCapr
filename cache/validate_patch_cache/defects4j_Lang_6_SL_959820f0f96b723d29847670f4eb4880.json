{
    "patch": "public final String unescape(final String input) {\n    if (input == null) {\n        return null;\n    }\n    final StringBuilder result = new StringBuilder(input.length());\n    final int length = input.length();\n    for (int i = 0; i < length; i++) {\n        char c = input.charAt(i);\n        if (c == '\\\\') {\n            if (++i >= length) {\n                throw new IllegalArgumentException(\"Invalid escape sequence at end of input: \" +\n                        input);\n            }\n            c = input.charAt(i);\n            if (c == 'u') {\n                int value = 0;\n                for (int j = 0; j < 4; j++) {\n                    if (++i >= length) {\n                        throw new IllegalArgumentException(\"Invalid Unicode escape sequence \" +\n                                \"at index \" + (i - 1) + \": \" + input);\n                    }\n                    final char ch = input.charAt(i);\n                    switch (ch) {\n                        case '0': case '1': case '2': case '3': case '4': case '5': case '6':\n                        case '7': case '8': case '9':\n                            value = (value << 4) + ch - '0';\n                            break;\n                        case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':\n                            value = (value << 4) + 10 + ch - 'a';\n                            break;\n                        case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':\n                            value = (value << 4) + 10 + ch - 'A';\n                            break;\n                        default:\n                            throw new IllegalArgumentException(\"Invalid character in Unicode \" +\n                                    \"escape sequence at index \" + i + \": \" + input);\n                    }\n                }\n                result.append((char) value);\n            } else {\n                // if the character to be unescaped is a backspace, write it directly to the output\n                if(c == 'b') {\n                    result.append('\\b');\n                } else {\n                    result.append(c);\n                }\n            }\n        } else {\n            result.append(c);\n        }\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..a57d0490 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,59 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public final String unescape(final String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    final StringBuilder result = new StringBuilder(input.length());\n+    final int length = input.length();\n+    for (int i = 0; i < length; i++) {\n+        char c = input.charAt(i);\n+        if (c == '\\\\') {\n+            if (++i >= length) {\n+                throw new IllegalArgumentException(\"Invalid escape sequence at end of input: \" +\n+                        input);\n+            }\n+            c = input.charAt(i);\n+            if (c == 'u') {\n+                int value = 0;\n+                for (int j = 0; j < 4; j++) {\n+                    if (++i >= length) {\n+                        throw new IllegalArgumentException(\"Invalid Unicode escape sequence \" +\n+                                \"at index \" + (i - 1) + \": \" + input);\n+                    }\n+                    final char ch = input.charAt(i);\n+                    switch (ch) {\n+                        case '0': case '1': case '2': case '3': case '4': case '5': case '6':\n+                        case '7': case '8': case '9':\n+                            value = (value << 4) + ch - '0';\n+                            break;\n+                        case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':\n+                            value = (value << 4) + 10 + ch - 'a';\n+                            break;\n+                        case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':\n+                            value = (value << 4) + 10 + ch - 'A';\n+                            break;\n+                        default:\n+                            throw new IllegalArgumentException(\"Invalid character in Unicode \" +\n+                                    \"escape sequence at index \" + i + \": \" + input);\n+                    }\n+                }\n+                result.append((char) value);\n+            } else {\n+                // if the character to be unescaped is a backspace, write it directly to the output\n+                if(c == 'b') {\n+                    result.append('\\b');\n+                } else {\n+                    result.append(c);\n+                }\n+            }\n+        } else {\n+            result.append(c);\n+        }\n+    }\n+    return result.toString();\n+}\n             }\n         }\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}