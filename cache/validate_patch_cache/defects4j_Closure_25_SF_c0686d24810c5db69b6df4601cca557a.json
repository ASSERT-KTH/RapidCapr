{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        if (constructorType.isFunctionType()) {\n            FunctionType ct = constructorType.restrictByNotNullOrUndefined().toMaybeFunctionType();\n            if (ct != null && ct.isConstructor()) {\n                // Get the instance type of the constructor.\n                JSType instanceType = ct.getInstanceType();\n                if (instanceType == null) {\n                    // If the instance type is null, check to see if it's a function's 'this' binding.\n                    JSType thisType = ct.getTypeOfThis();\n                    if (thisType != null && !thisType.isUnknownType() && !thisType.isEmptyType()) {\n                        instanceType = thisType.restrictByNotNullOrUndefined();\n                    } else {\n                        instanceType = getNativeType(UNKNOWN_TYPE);\n                    }\n                }\n                type = instanceType.restrictByNotNullOrUndefined();\n            } else {\n                // If the constructor is not a function type, get an unknown type.\n                type = getNativeType(UNKNOWN_TYPE);\n            }\n        } else if (constructorType.isArrayType()) {\n            // If the constructor is an array type, get the element type.\n            JSType elementType = constructorType.toArrayType().getElementType();\n            if (elementType != null) {\n                type = createUnionType(elementType.restrictByNotNullOrUndefined(), getNativeType(NULL_TYPE));\n            } else {\n                type = getNativeType(UNKNOWN_TYPE);\n            }\n        } else if (constructorType.isInterface() && constructorType.hasProperty(\"prototype\")) {\n            // If the constructor is an interface type with a prototype property, get the prototype type.\n            JSType prototypeType = constructorType.getPropertyType(\"prototype\").restrictByNotNullOrUndefined();\n            if (prototypeType.isObjectType()) {\n                type = prototypeType;\n            } else {\n                type = getNativeType(UNKNOWN_TYPE);\n            }\n        } else {\n            // If the constructor has an unknown or empty type, get an unknown type.\n            type = getNativeType(UNKNOWN_TYPE);\n        }\n    } else {\n        // If the constructor has a null type, get an unknown type.\n        type = getNativeType(UNKNOWN_TYPE);\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..c0c4b29c 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,60 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n     if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+        if (constructorType.isFunctionType()) {\n+            FunctionType ct = constructorType.restrictByNotNullOrUndefined().toMaybeFunctionType();\n+            if (ct != null && ct.isConstructor()) {\n+                // Get the instance type of the constructor.\n+                JSType instanceType = ct.getInstanceType();\n+                if (instanceType == null) {\n+                    // If the instance type is null, check to see if it's a function's 'this' binding.\n+                    JSType thisType = ct.getTypeOfThis();\n+                    if (thisType != null && !thisType.isUnknownType() && !thisType.isEmptyType()) {\n+                        instanceType = thisType.restrictByNotNullOrUndefined();\n+                    } else {\n+                        instanceType = getNativeType(UNKNOWN_TYPE);\n+                    }\n+                }\n+                type = instanceType.restrictByNotNullOrUndefined();\n+            } else {\n+                // If the constructor is not a function type, get an unknown type.\n+                type = getNativeType(UNKNOWN_TYPE);\n+            }\n+        } else if (constructorType.isArrayType()) {\n+            // If the constructor is an array type, get the element type.\n+            JSType elementType = constructorType.toArrayType().getElementType();\n+            if (elementType != null) {\n+                type = createUnionType(elementType.restrictByNotNullOrUndefined(), getNativeType(NULL_TYPE));\n+            } else {\n+                type = getNativeType(UNKNOWN_TYPE);\n+            }\n+        } else if (constructorType.isInterface() && constructorType.hasProperty(\"prototype\")) {\n+            // If the constructor is an interface type with a prototype property, get the prototype type.\n+            JSType prototypeType = constructorType.getPropertyType(\"prototype\").restrictByNotNullOrUndefined();\n+            if (prototypeType.isObjectType()) {\n+                type = prototypeType;\n+            } else {\n+                type = getNativeType(UNKNOWN_TYPE);\n+            }\n+        } else {\n+            // If the constructor has an unknown or empty type, get an unknown type.\n+            type = getNativeType(UNKNOWN_TYPE);\n         }\n-      }\n+    } else {\n+        // If the constructor has a null type, get an unknown type.\n+        type = getNativeType(UNKNOWN_TYPE);\n     }\n     n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+        scope = traverse(arg, scope);\n     }\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}