{
    "patch": "      // Make sure this assignment is not in a loop.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          return false;\n        } else if (isConditionalBranch(block)) {\n          if (firstInConditionalBlock(ref, block)) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    private static boolean isConditionalBranch(BasicBlock block) {\n      return block.getTerminatingInstruction() instanceof If;\n    }\n\n    private boolean firstInConditionalBlock(Reference ref, BasicBlock condBlock) {\n      for (Node node : condBlock.getNodes()) {\n        if (node == ref.getNode()) {\n          return true;\n        }\n        if (node instanceof Condition && node.getJumps().get(1) == ref.getNode()) {\n          return false;\n        }\n      }\n      throw new AssertionError(\"Reference not found in condition block\");\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..0eee7c78 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,38 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      // Make sure this assignment is not in a loop.\n+      for (BasicBlock block = ref.getBasicBlock();\n+           block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          return false;\n+        } else if (isConditionalBranch(block)) {\n+          if (firstInConditionalBlock(ref, block)) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      return true;\n+    }\n+\n+    private static boolean isConditionalBranch(BasicBlock block) {\n+      return block.getTerminatingInstruction() instanceof If;\n+    }\n+\n+    private boolean firstInConditionalBlock(Reference ref, BasicBlock condBlock) {\n+      for (Node node : condBlock.getNodes()) {\n+        if (node == ref.getNode()) {\n+          return true;\n+        }\n+        if (node instanceof Condition && node.getJumps().get(1) == ref.getNode()) {\n+          return false;\n+        }\n+      }\n+      throw new AssertionError(\"Reference not found in condition block\");\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}