{
    "patch": "      boolean hasNumber = false;\n      boolean hasString = false;\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (!child.isString()) {\n          continue;\n        }\n        if (child.getString().isEmpty()) {\n          continue;\n        }\n        char firstChar = child.getString().charAt(0);\n        if (Character.isDigit(firstChar)) {\n          if (hasString) {\n            throw new RuntimeException(\"We should never see a mix of numbers and strings.\");\n          }\n          hasNumber = true;\n          continue;\n        }\n        if (hasNumber) {\n          throw new RuntimeException(\"We should never see a mix of numbers and strings.\");\n        }\n        hasString = true;\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..bc742d8b 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,31 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+      boolean hasNumber = false;\n+      boolean hasString = false;\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        if (!child.isString()) {\n+          continue;\n+        }\n+        if (child.getString().isEmpty()) {\n+          continue;\n+        }\n+        char firstChar = child.getString().charAt(0);\n+        if (Character.isDigit(firstChar)) {\n+          if (hasString) {\n+            throw new RuntimeException(\"We should never see a mix of numbers and strings.\");\n+          }\n+          hasNumber = true;\n+          continue;\n+        }\n+        if (hasNumber) {\n+          throw new RuntimeException(\"We should never see a mix of numbers and strings.\");\n+        }\n+        hasString = true;\n+        String name = child.getString();\n+        T type = typeSystem.getType(getScope(), n, name);\n+        Property prop = getProperty(name);\n+        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}