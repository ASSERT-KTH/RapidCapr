{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n  if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  stream.update();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  String line = stream.getRemainingJSDocLine();\n  if (option != WhitespaceOption.PRESERVE) {\n    line = line.trim();\n  }\n\n  StringBuilder builder = new StringBuilder();\n  builder.append(line);\n\n  boolean ignoreStar = false;\n\n  while (true) {\n    token = next();\n    if (token == null) {\n      break;\n    }\n    switch (token) {\n      case STAR:\n        if (ignoreStar) {\n          ignoreStar = false;\n        } else {\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append('*');\n        }\n        break;\n      case EOL:\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          builder.append(\"\\n\");\n        }\n        ignoreStar = true;\n        break;\n      case END_MULTI_LINE_COMMENT:\n        String multilineText = builder.toString();\n        if (option != WhitespaceOption.PRESERVE) {\n          multilineText = multilineText.trim();\n        }\n        int endLineno = stream.getLineno();\n        int endCharno = stream.getCharno();\n        if (multilineText.length() > 0) {\n          jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n        }\n        return new ExtractionInfo(multilineText, token);\n      default:\n        ignoreStar = false;\n        if (builder.length() > 0) {\n          builder.append(' ');\n        }\n        builder.append(toString(token));\n        line = stream.getRemainingJSDocLine();\n        if (option != WhitespaceOption.PRESERVE) {\n          line = trimEnd(line);\n        }\n        builder.append(line);\n        break;\n    }\n  }\n\n  return new ExtractionInfo(builder.toString(), token != null ? token : JsDocToken.EOF);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..dd9f54e2 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,108 +1326,76 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n+  if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n+    return new ExtractionInfo(\"\", token);\n+  }\n \n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n-    }\n+  stream.update();\n+  int startLineno = stream.getLineno();\n+  int startCharno = stream.getCharno() + 1;\n \n-    stream.update();\n-    int startLineno = stream.getLineno();\n-    int startCharno = stream.getCharno() + 1;\n+  String line = stream.getRemainingJSDocLine();\n+  if (option != WhitespaceOption.PRESERVE) {\n+    line = line.trim();\n+  }\n \n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n-    if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n-    }\n+  StringBuilder builder = new StringBuilder();\n+  builder.append(line);\n \n-    StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n+  boolean ignoreStar = false;\n \n-    state = State.SEARCHING_ANNOTATION;\n+  while (true) {\n     token = next();\n-\n-    boolean ignoreStar = false;\n-\n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n-\n-    do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n-\n-            builder.append('*');\n-          }\n-\n-          token = next();\n-          continue;\n-\n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n-\n-          ignoreStar = true;\n-          token = next();\n-          continue;\n-\n-        default:\n+    if (token == null) {\n+      break;\n+    }\n+    switch (token) {\n+      case STAR:\n+        if (ignoreStar) {\n           ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n-\n-              // All tokens must be separated by a space.\n-\n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n-\n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n-\n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n-\n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n-\n-            return new ExtractionInfo(multilineText, token);\n-          }\n-\n+        } else {\n           if (builder.length() > 0) {\n             builder.append(' ');\n           }\n-          builder.append(toString(token));\n-\n-          line = stream.getRemainingJSDocLine();\n-\n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n-\n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n+          builder.append('*');\n+        }\n+        break;\n+      case EOL:\n+        if (option != WhitespaceOption.SINGLE_LINE) {\n+          builder.append(\"\\n\");\n+        }\n+        ignoreStar = true;\n+        break;\n+      case END_MULTI_LINE_COMMENT:\n+        String multilineText = builder.toString();\n+        if (option != WhitespaceOption.PRESERVE) {\n+          multilineText = multilineText.trim();\n+        }\n+        int endLineno = stream.getLineno();\n+        int endCharno = stream.getCharno();\n+        if (multilineText.length() > 0) {\n+          jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n+        }\n+        return new ExtractionInfo(multilineText, token);\n+      default:\n+        ignoreStar = false;\n+        if (builder.length() > 0) {\n+          builder.append(' ');\n+        }\n+        builder.append(toString(token));\n+        line = stream.getRemainingJSDocLine();\n+        if (option != WhitespaceOption.PRESERVE) {\n+          line = trimEnd(line);\n+        }\n+        builder.append(line);\n+        break;\n+    }\n   }\n \n+  return new ExtractionInfo(builder.toString(), token != null ? token : JsDocToken.EOF);\n+}\n+\n \n   /**\n    * Extracts the top-level block comment from the JsDoc comment, if any.",
    "result_reason": "error: an enum switch case label must be the unqualified name of an enumeration constant",
    "test_result": "ERROR"
}