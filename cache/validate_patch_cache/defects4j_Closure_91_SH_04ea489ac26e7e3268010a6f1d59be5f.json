{
    "patch": "      Node gramps = parent.getParent();\n      if (gramps != null && gramps.getType() == Token.OBJECTLIT &&\n          NodeUtil.isGet(lhs)) {\n        for (Node ancestor : NodeUtil.getAncestors(gramps)) {\n          if (ancestor.getType() == Token.ASSIGN) {\n            Node llhs = ancestor.getFirstChild();\n            if (NodeUtil.isGet(llhs) &&\n                llhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n          } else if (ancestor.getType() == Token.CALL &&\n                     ancestor.getFirstChild().matchesQualifiedName(\"goog.inherits\")) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..cd60788a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,20 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node gramps = parent.getParent();\n+      if (gramps != null && gramps.getType() == Token.OBJECTLIT &&\n+          NodeUtil.isGet(lhs)) {\n+        for (Node ancestor : NodeUtil.getAncestors(gramps)) {\n+          if (ancestor.getType() == Token.ASSIGN) {\n+            Node llhs = ancestor.getFirstChild();\n+            if (NodeUtil.isGet(llhs) &&\n+                llhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+          } else if (ancestor.getType() == Token.CALL &&\n+                     ancestor.getFirstChild().matchesQualifiedName(\"goog.inherits\")) {\n+            return false;\n+          }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}