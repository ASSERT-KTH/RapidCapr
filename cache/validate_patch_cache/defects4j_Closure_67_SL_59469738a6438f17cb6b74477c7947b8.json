{
    "patch": "          && n.getType() == Token.GETPROP) {\n          // We want to exclude the assignment itself from the usage list\n          boolean isChainedProperty =\n              n.getFirstChild().getType() == Token.GETPROP;\n\n          if (isChainedProperty) {\n            Node child = n.getFirstChild().getFirstChild().getNext();\n\n            if (child.getType() == Token.STRING &&\n                child.getString().equals(\"prototype\")) {\n              return true;\n            }\n          }\n           return !NodeUtil.isAssignmentOp(assign.getParent()) &&\n                  !NodeUtil.isForIn(assign.getParent());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..dcae7623 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,21 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+          && n.getType() == Token.GETPROP) {\n+          // We want to exclude the assignment itself from the usage list\n+          boolean isChainedProperty =\n+              n.getFirstChild().getType() == Token.GETPROP;\n+\n+          if (isChainedProperty) {\n+            Node child = n.getFirstChild().getFirstChild().getNext();\n+\n+            if (child.getType() == Token.STRING &&\n+                child.getString().equals(\"prototype\")) {\n+              return true;\n+            }\n+          }\n+           return !NodeUtil.isAssignmentOp(assign.getParent()) &&\n+                  !NodeUtil.isForIn(assign.getParent());\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: variable isChainedProperty is already defined in method isPrototypePropertyAssign(Node)",
    "test_result": "ERROR"
}