{
    "patch": "        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MockSettingsImpl mockSettings = new MockSettingsImpl();\n        mockSettings.defaultAnswer(RETURNS_DEFAULTS);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, mockSettings);\n        try {\n            ((Factory) mock).getCallbacks(); // Check if the mock is based on a framework that uses CGLIB.\n            ((Factory) mock).setCallbackType(MethodInterceptorFilter.class);\n            ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n        } catch (IllegalStateException e) {\n            ((Enhancer) mock).setCallbackType(MethodInterceptorFilter.class);\n            ((Enhancer) mock).setCallbacks(new Callback[] { newFilter });\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..9c15f318b 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,21 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MockSettingsImpl mockSettings = new MockSettingsImpl();\n+        mockSettings.defaultAnswer(RETURNS_DEFAULTS);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, mockSettings);\n+        try {\n+            ((Factory) mock).getCallbacks(); // Check if the mock is based on a framework that uses CGLIB.\n+            ((Factory) mock).setCallbackType(MethodInterceptorFilter.class);\n+            ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n+        } catch (IllegalStateException e) {\n+            ((Enhancer) mock).setCallbackType(MethodInterceptorFilter.class);\n+            ((Enhancer) mock).setCallbacks(new Callback[] { newFilter });\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}