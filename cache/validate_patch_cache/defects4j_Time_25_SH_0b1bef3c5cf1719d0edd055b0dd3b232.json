{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    int diff = offsetAdjusted - offsetLocal;\n                    int totalSeconds = (int) ((nextLocal - instantAdjusted) / 1000);\n                    int wallOffset = getOffset(nextLocal);\n                    if (offsetLocal != wallOffset) {\n                        // ambiguous overlap\n                        DateTimeZone ourZone = DateTimeZone.forOffsetMillis(offsetLocal);\n                        throw new IllegalInstantException(\"Ambiguous local time due to daylight saving time \" +\n                                \"transition. Previous offset=\" + offsetLocal +\n                                \", new offset=\" + wallOffset + \" (transition=\" +\n                                new Instant(nextLocal, ourZone).toString() +\n                                \"), gap=\" + (diff += (wallOffset - offsetLocal)) +\n                                \" seconds, data=\" + this);\n                    } else {\n                        instantLocal = nextLocal + (long) (diff * 1000);\n                        offsetLocal = offsetAdjusted;\n                        int newOffset = getOffset(instantLocal);\n                        if (offsetLocal != newOffset) {\n                            // DST adjustment\n                            instantLocal = nextTransition(instantLocal);\n                        }\n                    }\n                    offsetChanged = true;\n                    continue;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ad1c477e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,35 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    int diff = offsetAdjusted - offsetLocal;\n+                    int totalSeconds = (int) ((nextLocal - instantAdjusted) / 1000);\n+                    int wallOffset = getOffset(nextLocal);\n+                    if (offsetLocal != wallOffset) {\n+                        // ambiguous overlap\n+                        DateTimeZone ourZone = DateTimeZone.forOffsetMillis(offsetLocal);\n+                        throw new IllegalInstantException(\"Ambiguous local time due to daylight saving time \" +\n+                                \"transition. Previous offset=\" + offsetLocal +\n+                                \", new offset=\" + wallOffset + \" (transition=\" +\n+                                new Instant(nextLocal, ourZone).toString() +\n+                                \"), gap=\" + (diff += (wallOffset - offsetLocal)) +\n+                                \" seconds, data=\" + this);\n+                    } else {\n+                        instantLocal = nextLocal + (long) (diff * 1000);\n+                        offsetLocal = offsetAdjusted;\n+                        int newOffset = getOffset(instantLocal);\n+                        if (offsetLocal != newOffset) {\n+                            // DST adjustment\n+                            instantLocal = nextTransition(instantLocal);\n+                        }\n+                    }\n+                    offsetChanged = true;\n+                    continue;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}