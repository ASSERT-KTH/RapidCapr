{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    double ret;\n    if (Double.isNaN(x) || Double.isInfinite(x)) {\n        ret = Double.NaN;\n    } else if (x == mean) {\n        ret = 0.5;\n    } else {\n        double dev = standardDeviation * Math.sqrt(2.0);\n        double x0 = (lowerTail(x - mean, dev)) * 0.5;\n        double x1 = 0.5 - x0;\n        ret = (x < mean) ? x1 : x0;\n    }\n    return ret;\n}\n\nprivate double lowerTail(double z, double standardDeviation) {\n    double root2 = Math.sqrt(2.0);\n    double inner = (-z) / (standardDeviation * root2);\n    double inv = Erf.erfc(inner);\n    return 0.5 * inv;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..2db3b5d7f 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,27 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    double ret;\n+    if (Double.isNaN(x) || Double.isInfinite(x)) {\n+        ret = Double.NaN;\n+    } else if (x == mean) {\n+        ret = 0.5;\n+    } else {\n+        double dev = standardDeviation * Math.sqrt(2.0);\n+        double x0 = (lowerTail(x - mean, dev)) * 0.5;\n+        double x1 = 0.5 - x0;\n+        ret = (x < mean) ? x1 : x0;\n     }\n+    return ret;\n+}\n+\n+private double lowerTail(double z, double standardDeviation) {\n+    double root2 = Math.sqrt(2.0);\n+    double inner = (-z) / (standardDeviation * root2);\n+    double inv = Erf.erfc(inner);\n+    return 0.5 * inv;\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}