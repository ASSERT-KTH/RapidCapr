{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n\n  // Ensure that the call target is valid, since that's the most likely reason\n  // for this method to be called in this context.\n  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n\n  // Ensure that the right operand to the call is immutable.\n  Node right = callTarget.getNext();\n  if (right != null && !NodeUtil.isImmutableValue(right)) {\n    return n;\n  }\n\n  // Get the array node and the function name node.\n  Node arrayNode = callTarget.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  // Ensure that the array is indeed an array, and that the function is \"join\".\n  if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals(\"join\")) {\n    return n;\n  }\n\n  // Get the join string, which is the second argument to the join() call if it's a string literal,\n  // and \",\" if not.\n  String joinString = \",\";\n  if (right != null) {\n    if (!right.isString()) {\n      return n;\n    }\n    joinString = right.getString();\n  }\n\n  // Optimization: if the join string is empty, the result is simply a concatenation of all array\n  // elements, with no separator.\n  if (joinString.isEmpty()) {\n    Node firstElement = arrayNode.getFirstChild();\n    if (firstElement == null) {\n      Node emptyStringNode = new Node(Token.STRING);\n      emptyStringNode.setString(\"\");\n      n.getParent().replaceChild(n, emptyStringNode);\n      return emptyStringNode;\n    } else {\n      Node literal = new Node(Token.ADD, getArrayElementCopy(n, firstElement), null);\n      Node first = literal.getLastChild();\n      for (Node elem = firstElement.getNext(); elem != null; elem = elem.getNext()) {\n        Node nextLiteral = new Node(Token.ADD, getArrayElementCopy(n, elem), null);\n        first.setNext(nextLiteral);\n        first = nextLiteral.getLastChild();\n      }\n      n.getParent().replaceChild(n, literal);\n      return literal;\n    }\n  }\n\n  // Otherwise, create a string by concatenating array elements with the join string.\n  Node arrayElement = arrayNode.getFirstChild();\n  StringBuilder sb = new StringBuilder();\n  while (arrayElement != null) {\n    String value = NodeUtil.getArrayElementStringValue(arrayElement);\n    if (value != null) {\n      sb.append(value);\n    }\n    arrayElement = arrayElement.getNext();\n    if (arrayElement != null) {\n      sb.append(joinString);\n    }\n  }\n  String joinedString = sb.toString();\n\n  // Create a new string node for the result.\n  Node foldedNode = new Node(Token.STRING);\n  foldedNode.setString(joinedString);\n  foldedNode.copyInformationFromForTree(n);\n\n  // If the joined string is shorter than the original node, replace the original with the new string\n  // node and return the new node.\n  if (joinedString.length() < InlineCostEstimator.getCost(n)) {\n    n.getParent().replaceChild(n, foldedNode);\n    reportCodeChange();\n    return foldedNode;\n  }\n\n  // Otherwise, we can't optimize the node so return the original node.\n  return n;\n}\n\nprivate Node getArrayElementCopy(Node n, Node arrayElement) {\n  Node copy = arrayElement.cloneTree();\n  copy.copyInformationFrom(arrayElement);\n  if (!NodeUtil.isImmutableValue(arrayElement) && (!arrayElement.isObjectLit() || !arrayElement.hasChildren())) {\n    copy.putBooleanProp(Node.ORIGINAL_HAS_SIDE_EFFECTS, n.getBooleanProp(Node.ORIGINAL_HAS_SIDE_EFFECTS));\n  }\n  return copy;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..48b31056 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,116 +364,102 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n-    Node callTarget = n.getFirstChild();\n+private Node tryFoldArrayJoin(Node n) {\n+  Node callTarget = n.getFirstChild();\n \n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n-    }\n+  // Ensure that the call target is valid, since that's the most likely reason\n+  // for this method to be called in this context.\n+  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n+    return n;\n+  }\n \n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n-    }\n+  // Ensure that the right operand to the call is immutable.\n+  Node right = callTarget.getNext();\n+  if (right != null && !NodeUtil.isImmutableValue(right)) {\n+    return n;\n+  }\n \n-    Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  // Get the array node and the function name node.\n+  Node arrayNode = callTarget.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+  // Ensure that the array is indeed an array, and that the function is \"join\".\n+  if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals(\"join\")) {\n+    return n;\n+  }\n+\n+  // Get the join string, which is the second argument to the join() call if it's a string literal,\n+  // and \",\" if not.\n+  String joinString = \",\";\n+  if (right != null) {\n+    if (!right.isString()) {\n       return n;\n     }\n+    joinString = right.getString();\n+  }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+  // Optimization: if the join string is empty, the result is simply a concatenation of all array\n+  // elements, with no separator.\n+  if (joinString.isEmpty()) {\n+    Node firstElement = arrayNode.getFirstChild();\n+    if (firstElement == null) {\n+      Node emptyStringNode = new Node(Token.STRING);\n+      emptyStringNode.setString(\"\");\n+      n.getParent().replaceChild(n, emptyStringNode);\n+      return emptyStringNode;\n+    } else {\n+      Node literal = new Node(Token.ADD, getArrayElementCopy(n, firstElement), null);\n+      Node first = literal.getLastChild();\n+      for (Node elem = firstElement.getNext(); elem != null; elem = elem.getNext()) {\n+        Node nextLiteral = new Node(Token.ADD, getArrayElementCopy(n, elem), null);\n+        first.setNext(nextLiteral);\n+        first = nextLiteral.getLastChild();\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n+      n.getParent().replaceChild(n, literal);\n+      return literal;\n     }\n+  }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+  // Otherwise, create a string by concatenating array elements with the join string.\n+  Node arrayElement = arrayNode.getFirstChild();\n+  StringBuilder sb = new StringBuilder();\n+  while (arrayElement != null) {\n+    String value = NodeUtil.getArrayElementStringValue(arrayElement);\n+    if (value != null) {\n+      sb.append(value);\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+    arrayElement = arrayElement.getNext();\n+    if (arrayElement != null) {\n+      sb.append(joinString);\n     }\n+  }\n+  String joinedString = sb.toString();\n \n-    return n;\n+  // Create a new string node for the result.\n+  Node foldedNode = new Node(Token.STRING);\n+  foldedNode.setString(joinedString);\n+  foldedNode.copyInformationFromForTree(n);\n+\n+  // If the joined string is shorter than the original node, replace the original with the new string\n+  // node and return the new node.\n+  if (joinedString.length() < InlineCostEstimator.getCost(n)) {\n+    n.getParent().replaceChild(n, foldedNode);\n+    reportCodeChange();\n+    return foldedNode;\n+  }\n+\n+  // Otherwise, we can't optimize the node so return the original node.\n+  return n;\n+}\n+\n+private Node getArrayElementCopy(Node n, Node arrayElement) {\n+  Node copy = arrayElement.cloneTree();\n+  copy.copyInformationFrom(arrayElement);\n+  if (!NodeUtil.isImmutableValue(arrayElement) && (!arrayElement.isObjectLit() || !arrayElement.hasChildren())) {\n+    copy.putBooleanProp(Node.ORIGINAL_HAS_SIDE_EFFECTS, n.getBooleanProp(Node.ORIGINAL_HAS_SIDE_EFFECTS));\n   }\n+  return copy;\n+}\n \n   /**\n    * Try to fold .substr() calls on strings\n@@ -642,4 +628,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}