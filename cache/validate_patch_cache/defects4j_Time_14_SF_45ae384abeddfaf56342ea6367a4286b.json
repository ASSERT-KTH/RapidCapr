{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            int[] result = new int[partial.size()];\n            int carry = 0;\n            for (int i = result.length - 1; i >= 0; i--) {\n                if (i == fieldIndex) {\n                    int curValue = values[i];\n                    int range = partial.getFieldType(i).getField(iChronology).getMaximumValue();\n                    int newValue = valueToAdd % range;\n                    if (newValue < 0) {\n                        newValue += range;\n                    }\n                    int calcCarry = (valueToAdd - newValue) / range;\n                    curValue = FieldUtils.safeAdd(curValue, newValue);\n                    if (curValue < 0 || curValue > range - 1) {\n                        calcCarry = FieldUtils.safeAdd(calcCarry, FieldUtils.safeDivide(curValue, range));\n                        curValue = FieldUtils.safeMod(curValue, range);\n                    }\n                    result[i] = curValue;\n                    carry = calcCarry;\n                } else {\n                    result[i] = values[i];\n                }\n            }\n            if (carry != 0) {\n                result = add(partial, fieldIndex, result, carry);\n            }\n            return result;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..14f76552 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,14 +206,34 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            int[] result = new int[partial.size()];\n+            int carry = 0;\n+            for (int i = result.length - 1; i >= 0; i--) {\n+                if (i == fieldIndex) {\n+                    int curValue = values[i];\n+                    int range = partial.getFieldType(i).getField(iChronology).getMaximumValue();\n+                    int newValue = valueToAdd % range;\n+                    if (newValue < 0) {\n+                        newValue += range;\n+                    }\n+                    int calcCarry = (valueToAdd - newValue) / range;\n+                    curValue = FieldUtils.safeAdd(curValue, newValue);\n+                    if (curValue < 0 || curValue > range - 1) {\n+                        calcCarry = FieldUtils.safeAdd(calcCarry, FieldUtils.safeDivide(curValue, range));\n+                        curValue = FieldUtils.safeMod(curValue, range);\n+                    }\n+                    result[i] = curValue;\n+                    carry = calcCarry;\n+                } else {\n+                    result[i] = values[i];\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            if (carry != 0) {\n+                result = add(partial, fieldIndex, result, carry);\n+            }\n+            return result;\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}