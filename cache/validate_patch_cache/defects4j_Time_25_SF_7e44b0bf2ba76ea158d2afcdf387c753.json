{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Get initial offset\n    int offsetLocal = getOffset(instantLocal);\n    // Get next transition time from local time and from adjusted time\n    long transitionLocal = nextTransition(instantLocal + offsetLocal);\n    long transitionAdjusted = nextTransition(instantLocal - offsetLocal);\n    // If the next transition time is not the same, determine if current local time is in overlap or gap\n    if (transitionLocal != transitionAdjusted) {\n        offsetLocal = getOffset(transitionLocal - 1);\n        // If in overlap, choose the larger offset\n        if (offsetLocal > getOffset(transitionLocal)) {\n            return offsetLocal;\n        }\n        // If in gap, choose previous offset\n        if (instantLocal + offsetLocal < transitionLocal) {\n            return getOffset(previousTransition(transitionLocal - 1));\n        }\n    }\n    return offsetLocal;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..11563a0d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,26 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Get initial offset\n+    int offsetLocal = getOffset(instantLocal);\n+    // Get next transition time from local time and from adjusted time\n+    long transitionLocal = nextTransition(instantLocal + offsetLocal);\n+    long transitionAdjusted = nextTransition(instantLocal - offsetLocal);\n+    // If the next transition time is not the same, determine if current local time is in overlap or gap\n+    if (transitionLocal != transitionAdjusted) {\n+        offsetLocal = getOffset(transitionLocal - 1);\n+        // If in overlap, choose the larger offset\n+        if (offsetLocal > getOffset(transitionLocal)) {\n+            return offsetLocal;\n+        }\n+        // If in gap, choose previous offset\n+        if (instantLocal + offsetLocal < transitionLocal) {\n+            return getOffset(previousTransition(transitionLocal - 1));\n         }\n-        return offsetAdjusted;\n     }\n+    return offsetLocal;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}