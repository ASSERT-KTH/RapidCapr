{
    "patch": "class IRFactory {\n  private final String sourceName;\n  private final ErrorReporter errorReporter;\n\n  IRFactory(String sourceName, ErrorReporter errorReporter) {\n    this.sourceName = sourceName;\n    this.errorReporter = errorReporter;\n  }\n\n  Node transform(AstNode node) {\n    TransformDispatcher dispatcher = new TransformDispatcher();\n    return dispatcher.transform(node);\n  }\n\n  private class TransformDispatcher implements NodeVisitor<Node> {\n    @Override\n    public Node visit(AstNode node) {\n      return node.accept(this);\n    }\n\n    @Override\n    public Node visitArrayComprehension(ArrayComprehension node) {\n      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n    }\n\n    @Override\n    public Node visitArrayComprehensionLoop(ArrayComprehensionLoop node) {\n      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n    }\n\n    @Override\n    public Node visitAssignment(Assignment node) {\n      return newNode(\n          transformTokenType(node.getType()),\n          transform(node.getLeft()),\n          transform(node.getRight()));\n    }\n\n    @Override\n    public Node visitBlock(Block blockNode) {\n      return processGeneric(blockNode);\n    }\n\n    @Override\n    public Node visitBreak(BreakStatement statementNode) {\n      Node node = newNode(Token.BREAK);\n      if (statementNode.getBreakLabel() != null) {\n        Node labelName = transform(statementNode.getBreakLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    public Node visitCatch(CatchClause clauseNode) {\n      AstNode catchVar = clauseNode.getVarName();\n      Node node = newNode(Token.CATCH, transform(catchVar));\n      if (clauseNode.getCatchCondition() != null) {\n        errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n      }\n      node.addChildToBack(transformBlock(clauseNode.getBody()));\n      return node;\n    }\n\n    @Override\n    public Node visitConditionalExpression(ConditionalExpression exprNode) {\n      return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));\n    }\n\n    @Override\n    public Node visitContinue(ContinueStatement statementNode) {\n      Node node = newNode(Token.CONTINUE);\n      if (statementNode.getLabel() != null) {\n        Node labelName = transform(statementNode.getLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    public Node visitDoLoop(DoLoop loopNode) {\n      return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));\n    }\n\n    @Override\n    public Node visitElementGet(ElementGet getNode) {\n      return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));\n    }\n\n    @Override\n    public Node visitEmptyExpression(EmptyExpression exprNode) {\n      Node node = newNode(Token.EMPTY);\n      return node;\n    }\n\n    @Override\n    public Node visitExpressionStatement(ExpressionStatement statementNode) {\n      Node node = newNode(transformTokenType(statementNode.getType()));\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }\n\n    @Override\n    public Node visitForInLoop(ForInLoop loopNode) {\n      return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));\n    }\n\n    @Override\n    public Node visitForLoop(ForLoop loopNode) {\n      return newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()),\n          transformBlock(loopNode.getBody()));\n    }\n\n    @Override\n    public Node visitFunctionCall(FunctionCall callNode) {\n      Node node = newNode(transformTokenType(callNode.getType()));\n      node.addChildToBack(transform(callNode.getTarget()));\n      for (AstNode arg : callNode.getArguments()) {\n        node.addChildToBack(transform(arg));\n      }\n      return node;\n    }\n\n    @Override\n    public Node visitFunction(FunctionNode functionNode) {\n      Node node = processGeneric(functionNode);\n      node.setIsArrowFunction(functionNode.isArrowFunction());\n      return node;\n    }\n\n    @Override\n    public Node visitGeneratorExpression(GeneratorExpression node) {\n      throw new UnsupportedOperationException(\"Generator expressions not supported\");\n    }\n\n    @Override\n    public Node visitIfStatement(IfStatement statementNode) {\n      return newNode(\n          Token.IF,\n          transform(statementNode.getCondition()),\n          transformBlock(statementNode.getThenPart()),\n          transformBlock(statementNode.getElsePart()));\n    }\n\n    @Override\n    public Node visitInfixExpression(InfixExpression node) {\n      if (node.isLogicalOperator()) {\n        Token type;\n        if (node.getType() == Token.AND) {\n          type = Token.AND;\n        } else if (node.getType() == Token.OR) {\n          type = Token.OR;\n        } else {\n          throw new IllegalStateException(\"Unexpected operator: \" + node.getType());\n        }\n        return newNode(\n            type,\n            transform(node.getLeft()),\n            transform(node.getRight()));\n      } else {\n        return newNode(\n            transformTokenType(node.getType()),\n            transform(node.getLeft()),\n            transform(node.getRight()));\n      }\n    }\n\n    @Override\n    public Node visitKeywordLiteral(KeywordLiteral node) {\n      return newNode(transformTokenType(node.getType()));\n    }\n\n    @Override\n    public Node visitLabeledStatement(LabeledStatement statementNode) {\n      return newNode(\n          Token.LABEL,\n          transform(statementNode.getStatement()),\n          newString(statementNode.getLabel()));\n    }\n\n    @Override\n    public Node visitLetNode(LetNode node) {\n      throw new UnsupportedOperationException(\"Let nodes not supported\");\n    }\n\n    ...",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..faa3da7e 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,22 +473,51 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+class IRFactory {\n+  private final String sourceName;\n+  private final ErrorReporter errorReporter;\n+\n+  IRFactory(String sourceName, ErrorReporter errorReporter) {\n+    this.sourceName = sourceName;\n+    this.errorReporter = errorReporter;\n+  }\n+\n+  Node transform(AstNode node) {\n+    TransformDispatcher dispatcher = new TransformDispatcher();\n+    return dispatcher.transform(node);\n+  }\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  private class TransformDispatcher implements NodeVisitor<Node> {\n+    @Override\n+    public Node visit(AstNode node) {\n+      return node.accept(this);\n+    }\n+\n+    @Override\n+    public Node visitArrayComprehension(ArrayComprehension node) {\n+      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n     }\n \n     @Override\n-    Node processBlock(Block blockNode) {\n+    public Node visitArrayComprehensionLoop(ArrayComprehensionLoop node) {\n+      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n+    }\n+\n+    @Override\n+    public Node visitAssignment(Assignment node) {\n+      return newNode(\n+          transformTokenType(node.getType()),\n+          transform(node.getLeft()),\n+          transform(node.getRight()));\n+    }\n+\n+    @Override\n+    public Node visitBlock(Block blockNode) {\n       return processGeneric(blockNode);\n     }\n \n     @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n+    public Node visitBreak(BreakStatement statementNode) {\n       Node node = newNode(Token.BREAK);\n       if (statementNode.getBreakLabel() != null) {\n         Node labelName = transform(statementNode.getBreakLabel());\n@@ -500,7 +529,7 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n+    public Node visitCatch(CatchClause clauseNode) {\n       AstNode catchVar = clauseNode.getVarName();\n       Node node = newNode(Token.CATCH, transform(catchVar));\n       if (clauseNode.getCatchCondition() != null) {\n@@ -514,7 +543,7 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n+    public Node visitConditionalExpression(ConditionalExpression exprNode) {\n       return newNode(\n           Token.HOOK,\n           transform(exprNode.getTestExpression()),\n@@ -523,7 +552,7 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n+    public Node visitContinue(ContinueStatement statementNode) {\n       Node node = newNode(Token.CONTINUE);\n       if (statementNode.getLabel() != null) {\n         Node labelName = transform(statementNode.getLabel());\n@@ -535,7 +564,7 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processDoLoop(DoLoop loopNode) {\n+    public Node visitDoLoop(DoLoop loopNode) {\n       return newNode(\n           Token.DO,\n           transformBlock(loopNode.getBody()),\n@@ -543,7 +572,7 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processElementGet(ElementGet getNode) {\n+    public Node visitElementGet(ElementGet getNode) {\n       return newNode(\n           Token.GETELEM,\n           transform(getNode.getTarget()),\n@@ -551,22 +580,20 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n+    public Node visitEmptyExpression(EmptyExpression exprNode) {\n       Node node = newNode(Token.EMPTY);\n       return node;\n     }\n \n     @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n+    public Node visitExpressionStatement(ExpressionStatement statementNode) {\n       Node node = newNode(transformTokenType(statementNode.getType()));\n       node.addChildToBack(transform(statementNode.getExpression()));\n       return node;\n     }\n \n     @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-\n-        // Return the bare minimum to put the AST in a valid state.\n+    public Node visitForInLoop(ForInLoop loopNode) {\n       return newNode(\n           Token.FOR,\n           transform(loopNode.getIterator()),\n@@ -574,6 +601,90 @@ class IRFactory {\n           transformBlock(loopNode.getBody()));\n     }\n \n+    @Override\n+    public Node visitForLoop(ForLoop loopNode) {\n+      return newNode(\n+          Token.FOR,\n+          transform(loopNode.getInitializer()),\n+          transform(loopNode.getCondition()),\n+          transform(loopNode.getIncrement()),\n+          transformBlock(loopNode.getBody()));\n+    }\n+\n+    @Override\n+    public Node visitFunctionCall(FunctionCall callNode) {\n+      Node node = newNode(transformTokenType(callNode.getType()));\n+      node.addChildToBack(transform(callNode.getTarget()));\n+      for (AstNode arg : callNode.getArguments()) {\n+        node.addChildToBack(transform(arg));\n+      }\n+      return node;\n+    }\n+\n+    @Override\n+    public Node visitFunction(FunctionNode functionNode) {\n+      Node node = processGeneric(functionNode);\n+      node.setIsArrowFunction(functionNode.isArrowFunction());\n+      return node;\n+    }\n+\n+    @Override\n+    public Node visitGeneratorExpression(GeneratorExpression node) {\n+      throw new UnsupportedOperationException(\"Generator expressions not supported\");\n+    }\n+\n+    @Override\n+    public Node visitIfStatement(IfStatement statementNode) {\n+      return newNode(\n+          Token.IF,\n+          transform(statementNode.getCondition()),\n+          transformBlock(statementNode.getThenPart()),\n+          transformBlock(statementNode.getElsePart()));\n+    }\n+\n+    @Override\n+    public Node visitInfixExpression(InfixExpression node) {\n+      if (node.isLogicalOperator()) {\n+        Token type;\n+        if (node.getType() == Token.AND) {\n+          type = Token.AND;\n+        } else if (node.getType() == Token.OR) {\n+          type = Token.OR;\n+        } else {\n+          throw new IllegalStateException(\"Unexpected operator: \" + node.getType());\n+        }\n+        return newNode(\n+            type,\n+            transform(node.getLeft()),\n+            transform(node.getRight()));\n+      } else {\n+        return newNode(\n+            transformTokenType(node.getType()),\n+            transform(node.getLeft()),\n+            transform(node.getRight()));\n+      }\n+    }\n+\n+    @Override\n+    public Node visitKeywordLiteral(KeywordLiteral node) {\n+      return newNode(transformTokenType(node.getType()));\n+    }\n+\n+    @Override\n+    public Node visitLabeledStatement(LabeledStatement statementNode) {\n+      return newNode(\n+          Token.LABEL,\n+          transform(statementNode.getStatement()),\n+          newString(statementNode.getLabel()));\n+    }\n+\n+    @Override\n+    public Node visitLetNode(LetNode node) {\n+      throw new UnsupportedOperationException(\"Let nodes not supported\");\n+    }\n+\n+    ...\n+\n     @Override\n     Node processForLoop(ForLoop loopNode) {\n       Node node = newNode(",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}