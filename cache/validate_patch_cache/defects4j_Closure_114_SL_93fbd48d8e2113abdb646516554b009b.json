{
    "patch": "      if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // Patch for assignments that appear in the init,\n          // condition or iteration part of a FOR loop.  Without\n          // this change, all 3 of those parts try to claim the for\n          // loop as their dependency scope.  The last assignment in\n          // those three fields wins, which can result in incorrect\n          // reference edges between referenced and assigned variables.\n          //\n          // TODO(user) revisit the dependency scope calculation\n          // logic.\n          if (n.getNext() != null) {\n            recordDepScope(n.getNext(), ns);\n          } else {\n            recordDepScope(nameNode, ns);\n          }\n          // The rhs of the assignment is the caller, so it's used by the\n          // context. Don't associate it w/ the lhs.\n          // FYI: this fixes only the specific case where the assignment is the\n          // caller expression, but it could be nested deeper in the caller and\n          // we would still get a bug.\n          // See testAssignWithCall2 for an example of this.\n          if (NodeUtil.mayHaveSideEffects(recordNode.getLastChild())) {\n            recordDepScope(recordNode.getLastChild(), null);\n          }\n        } else {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..ba6b3269 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,6 +575,31 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n+      if (ns != null) {\n+        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n+          // Patch for assignments that appear in the init,\n+          // condition or iteration part of a FOR loop.  Without\n+          // this change, all 3 of those parts try to claim the for\n+          // loop as their dependency scope.  The last assignment in\n+          // those three fields wins, which can result in incorrect\n+          // reference edges between referenced and assigned variables.\n+          //\n+          // TODO(user) revisit the dependency scope calculation\n+          // logic.\n+          if (n.getNext() != null) {\n+            recordDepScope(n.getNext(), ns);\n+          } else {\n+            recordDepScope(nameNode, ns);\n+          }\n+          // The rhs of the assignment is the caller, so it's used by the\n+          // context. Don't associate it w/ the lhs.\n+          // FYI: this fixes only the specific case where the assignment is the\n+          // caller expression, but it could be nested deeper in the caller and\n+          // we would still get a bug.\n+          // See testAssignWithCall2 for an example of this.\n+          if (NodeUtil.mayHaveSideEffects(recordNode.getLastChild())) {\n+            recordDepScope(recordNode.getLastChild(), null);\n+          }\n         } else {\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}