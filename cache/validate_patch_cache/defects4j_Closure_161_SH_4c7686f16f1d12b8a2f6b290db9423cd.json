{
    "patch": "if (left.getType() == Token.ARRAYLIT && left.getFirstChild() == null) {\n  return NodeUtil.newUndefinedNode(left);\n}\n\nif (right.getType() != Token.NUMBER) {\n  // Sometimes people like to use complex expressions to index into\n  // arrays, or strings to index into array methods.\n  return n;\n}\n\ndouble index = right.getDouble();\nint intIndex = (int) index;\nif (intIndex != index) {\n  error(INVALID_GETELEM_INDEX_ERROR, right);\n  return n;\n}\n\nif (intIndex < 0 || intIndex >= left.getChildCount()) {\n  return NodeUtil.newUndefinedNode(left);\n}\n\nNode elem = left.getChildAtIndex(intIndex);\nif (elem == null) {\n  error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n  return n;\n}\n\nif (elem.getType() == Token.EMPTY) {\n  elem = NodeUtil.newUndefinedNode(elem);\n} else {\n  left.removeChild(elem);\n}\n\n// Replace the entire GETELEM with the value\nn.getParent().replaceChild(n, elem);\nreportCodeChange();\nreturn elem;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..04a721a6 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,43 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+if (left.getType() == Token.ARRAYLIT && left.getFirstChild() == null) {\n+  return NodeUtil.newUndefinedNode(left);\n+}\n+\n+if (right.getType() != Token.NUMBER) {\n+  // Sometimes people like to use complex expressions to index into\n+  // arrays, or strings to index into array methods.\n+  return n;\n+}\n+\n+double index = right.getDouble();\n+int intIndex = (int) index;\n+if (intIndex != index) {\n+  error(INVALID_GETELEM_INDEX_ERROR, right);\n+  return n;\n+}\n+\n+if (intIndex < 0 || intIndex >= left.getChildCount()) {\n+  return NodeUtil.newUndefinedNode(left);\n+}\n+\n+Node elem = left.getChildAtIndex(intIndex);\n+if (elem == null) {\n+  error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+  return n;\n+}\n+\n+if (elem.getType() == Token.EMPTY) {\n+  elem = NodeUtil.newUndefinedNode(elem);\n+} else {\n+  left.removeChild(elem);\n+}\n+\n+// Replace the entire GETELEM with the value\n+n.getParent().replaceChild(n, elem);\n+reportCodeChange();\n+return elem;\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: variable index is already defined in method tryFoldArrayAccess(Node,Node,Node)",
    "test_result": "ERROR"
}