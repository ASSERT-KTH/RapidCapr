{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix eigenVectors = dec.getV();\n    RealMatrix eigenValues = dec.getD();\n    int dim = m.getRowDimension();\n\n    // check that all eigenvalues are positive or zero\n    for (int i = 0; i < dim; i++) {\n        if (eigenValues.getEntry(i, i) < 0.0) {\n            throw new IllegalArgumentException(\"Matrix is not positive semi-definite\");\n        }\n    }\n\n    // compute the square root of the eigenvalues\n    for (int i = 0; i < dim; i++) {\n        eigenValues.setEntry(i, i, Math.sqrt(eigenValues.getEntry(i, i)));\n    }\n\n    // compute the square root of the matrix: V * sqrt(D) * V^T\n    RealMatrix sqrtM = eigenVectors.multiply(eigenValues).multiply(eigenVectors.transpose());\n\n    // check that all values in the square root matrix are positive or zero,\n    // rounding any negative values to 0\n    for (int i = 0; i < dim; i++) {\n        for (int j = 0; j < dim; j++) {\n            sqrtM.setEntry(i, j, Math.max(sqrtM.getEntry(i, j), 0.0));\n        }\n    }\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..9353c6414 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,35 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix eigenVectors = dec.getV();\n+    RealMatrix eigenValues = dec.getD();\n+    int dim = m.getRowDimension();\n+\n+    // check that all eigenvalues are positive or zero\n+    for (int i = 0; i < dim; i++) {\n+        if (eigenValues.getEntry(i, i) < 0.0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive semi-definite\");\n+        }\n+    }\n+\n+    // compute the square root of the eigenvalues\n+    for (int i = 0; i < dim; i++) {\n+        eigenValues.setEntry(i, i, Math.sqrt(eigenValues.getEntry(i, i)));\n     }\n+\n+    // compute the square root of the matrix: V * sqrt(D) * V^T\n+    RealMatrix sqrtM = eigenVectors.multiply(eigenValues).multiply(eigenVectors.transpose());\n+\n+    // check that all values in the square root matrix are positive or zero,\n+    // rounding any negative values to 0\n+    for (int i = 0; i < dim; i++) {\n+        for (int j = 0; j < dim; j++) {\n+            sqrtM.setEntry(i, j, Math.max(sqrtM.getEntry(i, j), 0.0));\n+        }\n+    }\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}