{
    "patch": "    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n    // Collect all arguments which are not referenced by any local variable\n    List<Node> unusedArgs = new ArrayList<>();\n    for (Node arg : argList.children()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (var == null || !referenced.contains(var)) {\n        unusedArgs.add(arg);\n      }\n    }\n\n    if (unusedArgs.isEmpty()) {\n      // No unreferenced parameters found\n      return;\n    }\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      for (Node unusedArg : unusedArgs) {\n        argList.removeChild(unusedArg);\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5ac466c3 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,27 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Collect all arguments which are not referenced by any local variable\n+    List<Node> unusedArgs = new ArrayList<>();\n+    for (Node arg : argList.children()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (var == null || !referenced.contains(var)) {\n+        unusedArgs.add(arg);\n+      }\n+    }\n+\n+    if (unusedArgs.isEmpty()) {\n+      // No unreferenced parameters found\n+      return;\n+    }\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      for (Node unusedArg : unusedArgs) {\n+        argList.removeChild(unusedArg);\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}