{
    "patch": "if (Double.isNaN(initial) || f.value(initial) * f.value(min) > 0 || f.value(initial) * f.value(max) > 0) {\n    initial = 0.5 * (min + max);\n}\n\nreturn new BrentSolver().solve(f, min, max, initial);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..c68671dd5 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,11 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+if (Double.isNaN(initial) || f.value(initial) * f.value(min) > 0 || f.value(initial) * f.value(max) > 0) {\n+    initial = 0.5 * (min + max);\n+}\n+\n+return new BrentSolver().solve(f, min, max, initial);\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}