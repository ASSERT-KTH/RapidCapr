{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (index >= seqEnd || input.charAt(index) != '&' || index >= seqEnd - 1 || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n    int start = index + 2;\n    boolean isHex = false;\n    if (start >= seqEnd) return 0;\n    if ((input.charAt(start) == 'x' || input.charAt(start) == 'X') && start < seqEnd - 1 && isHexDigit(input.charAt(start + 1))) {\n        start++;\n        isHex = true;\n    } else if (!isDigit(input.charAt(start))) {\n        return 0;\n    }\n\n    int end = start + 1;\n    while (end < seqEnd && isEntityChar(input.charAt(end))) { // find end of entity\n        end++;\n    }\n\n    int entityValue = 0;\n    if (end >= seqEnd || (input.charAt(end) != ';' && !isEntityChar(input.charAt(end)))) {\n        // Unfinished entity\n        end--;\n    }\n    if (end - start <= 0) {\n        return 0;\n    }\n    try {\n        entityValue = decodeValue(input.subSequence(start, end), isHex);\n    } catch (NumberFormatException nfe) {\n        System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start + \"][\" + end + \"]\");\n        return 0;\n    }\n\n    // Make sure that the entityValue is a valid Unicode code point\n    if (!Character.isValidCodePoint(entityValue)) {\n        return 0;\n    }\n\n    // Handle supplementary characters\n    if (entityValue > 0xFFFF) {\n        entityValue -= 0x10000;\n        out.write((char) ((entityValue >> 10) + 0xD800));\n        out.write((char) ((entityValue & 0x3FF) + 0xDC00));\n    } else {\n        out.write((char) entityValue);\n    }\n\n    return end - index;\n}\n\nprivate boolean isEntityChar(char ch) {\n    return isDigit(ch) || isHexDigit(ch) || ch == 'x' || ch == 'X';\n}\n\nprivate boolean isDigit(char ch) {\n    return ch >= '0' && ch <= '9';\n}\n\nprivate boolean isHexDigit(char ch) {\n    return isDigit(ch) || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F');\n}\n\nprivate int decodeValue(CharSequence seq, boolean isHex) {\n    int radix = isHex ? 16 : 10;\n    int value = 0;\n    for (int i = 0; i < seq.length(); i++) {\n        char ch = seq.charAt(i);\n        if (isHexDigit(ch)) {\n            value = value * radix + Character.digit(ch, radix);\n        } else {\n            break;\n        }\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..a39b8d16 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,81 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    if (index >= seqEnd || input.charAt(index) != '&' || index >= seqEnd - 1 || input.charAt(index + 1) != '#') {\n+        return 0;\n+    }\n+    int start = index + 2;\n+    boolean isHex = false;\n+    if (start >= seqEnd) return 0;\n+    if ((input.charAt(start) == 'x' || input.charAt(start) == 'X') && start < seqEnd - 1 && isHexDigit(input.charAt(start + 1))) {\n+        start++;\n+        isHex = true;\n+    } else if (!isDigit(input.charAt(start))) {\n+        return 0;\n+    }\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n+    int end = start + 1;\n+    while (end < seqEnd && isEntityChar(input.charAt(end))) { // find end of entity\n+        end++;\n+    }\n \n-                // Check there's more than just an x after the &#\n-            }\n+    int entityValue = 0;\n+    if (end >= seqEnd || (input.charAt(end) != ';' && !isEntityChar(input.charAt(end)))) {\n+        // Unfinished entity\n+        end--;\n+    }\n+    if (end - start <= 0) {\n+        return 0;\n+    }\n+    try {\n+        entityValue = decodeValue(input.subSequence(start, end), isHex);\n+    } catch (NumberFormatException nfe) {\n+        System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start + \"][\" + end + \"]\");\n+        return 0;\n+    }\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n+    // Make sure that the entityValue is a valid Unicode code point\n+    if (!Character.isValidCodePoint(entityValue)) {\n+        return 0;\n+    }\n+\n+    // Handle supplementary characters\n+    if (entityValue > 0xFFFF) {\n+        entityValue -= 0x10000;\n+        out.write((char) ((entityValue >> 10) + 0xD800));\n+        out.write((char) ((entityValue & 0x3FF) + 0xDC00));\n+    } else {\n+        out.write((char) entityValue);\n+    }\n+\n+    return end - index;\n+}\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n-            }\n+private boolean isEntityChar(char ch) {\n+    return isDigit(ch) || isHexDigit(ch) || ch == 'x' || ch == 'X';\n+}\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n-            }\n+private boolean isDigit(char ch) {\n+    return ch >= '0' && ch <= '9';\n+}\n \n+private boolean isHexDigit(char ch) {\n+    return isDigit(ch) || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F');\n+}\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+private int decodeValue(CharSequence seq, boolean isHex) {\n+    int radix = isHex ? 16 : 10;\n+    int value = 0;\n+    for (int i = 0; i < seq.length(); i++) {\n+        char ch = seq.charAt(i);\n+        if (isHexDigit(ch)) {\n+            value = value * radix + Character.digit(ch, radix);\n+        } else {\n+            break;\n         }\n-        return 0;\n     }\n+    return value;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape expected:<\u0080[\u009f]> but was:<\u0080[;\u009f;]>",
    "test_result": "FAIL"
}