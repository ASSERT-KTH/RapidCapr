{
    "patch": "    Set<Node> allNodes = new HashSet<Node>();\n    collectNodes(n, allNodes, true /* includeFunctions */);\n    for (Node node : allNodes) {\n      if (!MAY_BE_STRING_PREDICATE.apply(node)) {\n        return false;\n      }\n    }\n    return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..d32d640f 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1414,7 +1414,14 @@ public final class NodeUtil {\n \n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+    Set<Node> allNodes = new HashSet<Node>();\n+    collectNodes(n, allNodes, true /* includeFunctions */);\n+    for (Node node : allNodes) {\n+      if (!MAY_BE_STRING_PREDICATE.apply(node)) {\n+        return false;\n+      }\n+    }\n+    return true;\n     } else {\n       return mayBeStringHelper(n);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}