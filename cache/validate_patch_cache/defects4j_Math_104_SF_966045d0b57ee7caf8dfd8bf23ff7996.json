{
    "patch": "public double regularizedGammaP(double a, double x, double epsilon, int max_iterations) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid arguments for regularized gamma function.\");\n    }\n    double sum = 1.0 / a;\n    double term = sum;\n    int i = 1;\n    while (Math.abs(term) > epsilon && i <= max_iterations) {\n        term *= x / (a + i);\n        sum += term;\n        i++;\n    }\n    if (i > max_iterations) {\n        throw new RuntimeException(\"Maximum iterations exceeded for regularized gamma function.\");\n    }\n    return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bee00f348 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,23 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public double regularizedGammaP(double a, double x, double epsilon, int max_iterations) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid arguments for regularized gamma function.\");\n+    }\n+    double sum = 1.0 / a;\n+    double term = sum;\n+    int i = 1;\n+    while (Math.abs(term) > epsilon && i <= max_iterations) {\n+        term *= x / (a + i);\n+        sum += term;\n+        i++;\n+    }\n+    if (i > max_iterations) {\n+        throw new RuntimeException(\"Maximum iterations exceeded for regularized gamma function.\");\n+    }\n+    return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}