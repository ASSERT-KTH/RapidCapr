{
    "patch": "        } else {\n            long nextTransition = nextTransition(instantAdjusted);\n            if (nextTransition == instantAdjusted - offsetLocal) {\n                int offsetNext = getOffset(nextTransition);\n                if (offsetAdjusted < offsetNext) { // we jumped a whole offset\n                    return offsetLocal;\n                }\n            }\n            long prevTransition = previousTransition(instantAdjusted);\n            if (instantAdjusted - prevTransition <= ONE_DAY) {\n                int offsetPrev = getOffset(prevTransition);\n                if (offsetPrev < offsetLocal) {\n                    long prev2Transition = previousTransition(prevTransition);\n                    int offsetPrev2 = getOffset(prev2Transition);\n                    if (offsetPrev2 == offsetLocal) { // try the previous\n                        return offsetPrev;\n                    }\n                }\n            }\n            return offsetAdjusted;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..8d19a7dd 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else {\n+            long nextTransition = nextTransition(instantAdjusted);\n+            if (nextTransition == instantAdjusted - offsetLocal) {\n+                int offsetNext = getOffset(nextTransition);\n+                if (offsetAdjusted < offsetNext) { // we jumped a whole offset\n+                    return offsetLocal;\n+                }\n+            }\n+            long prevTransition = previousTransition(instantAdjusted);\n+            if (instantAdjusted - prevTransition <= ONE_DAY) {\n+                int offsetPrev = getOffset(prevTransition);\n+                if (offsetPrev < offsetLocal) {\n+                    long prev2Transition = previousTransition(prevTransition);\n+                    int offsetPrev2 = getOffset(prev2Transition);\n+                    if (offsetPrev2 == offsetLocal) { // try the previous\n+                        return offsetPrev;\n+                    }\n+                }\n+            }\n+            return offsetAdjusted;\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}