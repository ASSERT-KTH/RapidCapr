{
    "patch": "public Dfp multiply(final int x) {\n    Dfp result;\n    if (x >= 0 && x < RADIX) {\n        result = newInstance();\n        result.field.setIEEEFlagsBits(0);\n        result.mant[((DfpField) field).getOffset()] = mant[((DfpField) field).getOffset()] * x;\n        result.normalize();\n    } else {\n        result = multiply(newInstance(x));\n    }\n    return dotrap(Dfp.TRAP_INVALID, \"multiply\", x, result);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..02805159b 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,18 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n-        }\n-        n++;\n-    }\n+public Dfp multiply(final int x) {\n+    Dfp result;\n+    if (x >= 0 && x < RADIX) {\n+        result = newInstance();\n+        result.field.setIEEEFlagsBits(0);\n+        result.mant[((DfpField) field).getOffset()] = mant[((DfpField) field).getOffset()] * x;\n+        result.normalize();\n+    } else {\n+        result = multiply(newInstance(x));\n+    }\n+    return dotrap(Dfp.TRAP_INVALID, \"multiply\", x, result);\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}