{
    "patch": "            List<Object> varargs = new ArrayList<>();\n            for (int i = indexOfVararg; i < invocation.getRawArguments().length; i++) {\n                varargs.add(invocation.getArgumentAt(i, Object.class));\n            }\n            if (matchers.size() == 1 && matchers.get(0) instanceof AnyVararg) {\n                ((AnyVararg) matchers.get(0)).setVarargs(varargs.toArray(new Object[0]));\n                return;\n            }\n            Matcher[] lastMatchers = matchers.subList(matcherStack.size(), matchers.size()).toArray(new Matcher[0]);\n            int position = indexOfVararg;\n            for (int i = 0; i < lastMatchers.length; i++) {\n                Matcher lastMatcher = lastMatchers[i];\n                Matcher capturedMatcher;\n                if (lastMatcher instanceof CapturesArguments) {\n                    capturedMatcher = ((CapturesArguments) lastMatcher).captureFrom(invocation.getArgumentAt(position, Object[].class));\n                } else {\n                    capturedMatcher = lastMatcher;\n                }\n                matcherStack.add(capturedMatcher);\n                position += capturedMatcher.getPrecedence();",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..d557f0362 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,26 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            List<Object> varargs = new ArrayList<>();\n+            for (int i = indexOfVararg; i < invocation.getRawArguments().length; i++) {\n+                varargs.add(invocation.getArgumentAt(i, Object.class));\n+            }\n+            if (matchers.size() == 1 && matchers.get(0) instanceof AnyVararg) {\n+                ((AnyVararg) matchers.get(0)).setVarargs(varargs.toArray(new Object[0]));\n+                return;\n+            }\n+            Matcher[] lastMatchers = matchers.subList(matcherStack.size(), matchers.size()).toArray(new Matcher[0]);\n+            int position = indexOfVararg;\n+            for (int i = 0; i < lastMatchers.length; i++) {\n+                Matcher lastMatcher = lastMatchers[i];\n+                Matcher capturedMatcher;\n+                if (lastMatcher instanceof CapturesArguments) {\n+                    capturedMatcher = ((CapturesArguments) lastMatcher).captureFrom(invocation.getArgumentAt(position, Object[].class));\n+                } else {\n+                    capturedMatcher = lastMatcher;\n+                }\n+                matcherStack.add(capturedMatcher);\n+                position += capturedMatcher.getPrecedence();\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}