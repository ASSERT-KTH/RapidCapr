{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetBefore = getOffset(instantLocal - 1);\n    int offsetAfter = getOffset(instantLocal + 1);\n\n    // current offset is same as the offset before and after\n    if (offsetBefore == offsetAfter) {\n        return offsetBefore;\n    }\n\n    // current offset is different from the offset before and after\n    int initialOffset = getOffset(instantLocal);\n\n    if (initialOffset > offsetBefore) {\n        // we have skipped ahead in time (e.g. spring DST transition)\n        long nextTransition = nextTransition(instantLocal);\n        int nextOffset = getOffset(nextTransition);\n\n        // check if we are currently in an overlap\n        if (initialOffset >= nextOffset) {\n            long previousTransition = previousTransition(instantLocal);\n            int previousOffset = getOffset(previousTransition);\n\n            // if current offset is less than the previous offset, we have jumped over the overlap\n            if (initialOffset < previousOffset) {\n                return nextOffset;\n            } else {\n                // we are inside the overlap - choose the smallest of the two offsets\n                return (previousOffset < nextOffset) ? previousOffset : nextOffset;\n            }\n        } else {\n            // we are not currently in an overlap, return the current offset\n            return initialOffset;\n        }\n    } else {\n        // we have gone back in time (e.g. autumn DST transition)\n        long previousTransition = previousTransition(instantLocal);\n        int previousOffset = getOffset(previousTransition);\n\n        // check if we are currently in a gap\n        if (initialOffset <= previousOffset) {\n            long nextTransition = nextTransition(instantLocal);\n            int nextOffset = getOffset(nextTransition);\n\n            // if current offset is greater than the next offset, we have skipped over the gap\n            if (initialOffset > nextOffset) {\n                return previousOffset;\n            } else {\n                // we are inside the gap - return the previous offset\n                return previousOffset;\n            }\n        } else {\n            // we are not currently in a gap, return the current offset\n            return initialOffset;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0eb17e47 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,62 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offsetBefore = getOffset(instantLocal - 1);\n+    int offsetAfter = getOffset(instantLocal + 1);\n+\n+    // current offset is same as the offset before and after\n+    if (offsetBefore == offsetAfter) {\n+        return offsetBefore;\n+    }\n+\n+    // current offset is different from the offset before and after\n+    int initialOffset = getOffset(instantLocal);\n+\n+    if (initialOffset > offsetBefore) {\n+        // we have skipped ahead in time (e.g. spring DST transition)\n+        long nextTransition = nextTransition(instantLocal);\n+        int nextOffset = getOffset(nextTransition);\n+\n+        // check if we are currently in an overlap\n+        if (initialOffset >= nextOffset) {\n+            long previousTransition = previousTransition(instantLocal);\n+            int previousOffset = getOffset(previousTransition);\n+\n+            // if current offset is less than the previous offset, we have jumped over the overlap\n+            if (initialOffset < previousOffset) {\n+                return nextOffset;\n+            } else {\n+                // we are inside the overlap - choose the smallest of the two offsets\n+                return (previousOffset < nextOffset) ? previousOffset : nextOffset;\n             }\n+        } else {\n+            // we are not currently in an overlap, return the current offset\n+            return initialOffset;\n+        }\n+    } else {\n+        // we have gone back in time (e.g. autumn DST transition)\n+        long previousTransition = previousTransition(instantLocal);\n+        int previousOffset = getOffset(previousTransition);\n+\n+        // check if we are currently in a gap\n+        if (initialOffset <= previousOffset) {\n+            long nextTransition = nextTransition(instantLocal);\n+            int nextOffset = getOffset(nextTransition);\n+\n+            // if current offset is greater than the next offset, we have skipped over the gap\n+            if (initialOffset > nextOffset) {\n+                return previousOffset;\n+            } else {\n+                // we are inside the gap - return the previous offset\n+                return previousOffset;\n+            }\n+        } else {\n+            // we are not currently in a gap, return the current offset\n+            return initialOffset;\n         }\n-        return offsetAdjusted;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}