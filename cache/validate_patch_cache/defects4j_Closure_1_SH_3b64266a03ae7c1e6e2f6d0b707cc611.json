{
    "patch": "    // NodeUtil.getFunctionParameters cleans up unused parameters in normal mode.\n    Node paramsToRemove = NodeUtil.getFunctionParameters(function);\n    Preconditions.checkNotNull(paramsToRemove, \"Expected parameter list must not be null\");\n    boolean changed = false;\n    while (paramsToRemove.hasChildren()) {\n      Node lastParam = paramsToRemove.getLastChild();\n      if (!referenced.contains(fnScope.getVar(lastParam.getString()))) {\n        NodeUtil.removeChild(paramsToRemove, lastParam);\n        changed = true;\n      } else {\n        break;\n      }\n    }\n    if (changed) {\n      compiler.reportCodeChange();\n    }\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a3a70542 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // NodeUtil.getFunctionParameters cleans up unused parameters in normal mode.\n+    Node paramsToRemove = NodeUtil.getFunctionParameters(function);\n+    Preconditions.checkNotNull(paramsToRemove, \"Expected parameter list must not be null\");\n+    boolean changed = false;\n+    while (paramsToRemove.hasChildren()) {\n+      Node lastParam = paramsToRemove.getLastChild();\n+      if (!referenced.contains(fnScope.getVar(lastParam.getString()))) {\n+        NodeUtil.removeChild(paramsToRemove, lastParam);\n+        changed = true;\n+      } else {\n+        break;\n+      }\n+    }\n+    if (changed) {\n+      compiler.reportCodeChange();\n+    }\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}