{
    "patch": "/**\n * Determines whether this type is empty.\n * A type is empty if it's either of the following:\n * - NoType\n * - NoObjectType\n * - UnknownType\n * - NoResolvedType\n * - VoidType\n * - NullType\n * - WILDCARD_TYPE with a bound that is empty\n * - Intersection type of empty types\n * - Union type of empty types\n *\n * @return true if this type is empty, false otherwise\n */\npublic final boolean isEmptyType() {\n    if (isWildcardType()) {\n        WildcardType wildcardType = (WildcardType) this;\n        return wildcardType.getExtendsBound() != null && wildcardType.getExtendsBound().isEmptyType()\n                || wildcardType.getSuperBound() != null && wildcardType.getSuperBound().isEmptyType();\n    } else if (isIntersectionType()) {\n        IntersectionType intersectionType = (IntersectionType) this;\n        for (Type type : intersectionType.getTypes()) {\n            if (!type.isEmptyType()) {\n                return false;\n            }\n        }\n        return true;\n    } else if (isUnionType()) {\n        UnionType unionType = (UnionType) this;\n        for (Type type : unionType.getTypes()) {\n            if (!type.isEmptyType()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return isNoType() || isNoObjectType() || isUnknownType() || isNoResolvedType() || isVoidType() || isNullType();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 32a0b250..da252105 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -159,9 +159,45 @@ public abstract class JSType implements Serializable {\n     return false;\n   }\n \n-  public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType();\n-  }\n+/**\n+ * Determines whether this type is empty.\n+ * A type is empty if it's either of the following:\n+ * - NoType\n+ * - NoObjectType\n+ * - UnknownType\n+ * - NoResolvedType\n+ * - VoidType\n+ * - NullType\n+ * - WILDCARD_TYPE with a bound that is empty\n+ * - Intersection type of empty types\n+ * - Union type of empty types\n+ *\n+ * @return true if this type is empty, false otherwise\n+ */\n+public final boolean isEmptyType() {\n+    if (isWildcardType()) {\n+        WildcardType wildcardType = (WildcardType) this;\n+        return wildcardType.getExtendsBound() != null && wildcardType.getExtendsBound().isEmptyType()\n+                || wildcardType.getSuperBound() != null && wildcardType.getSuperBound().isEmptyType();\n+    } else if (isIntersectionType()) {\n+        IntersectionType intersectionType = (IntersectionType) this;\n+        for (Type type : intersectionType.getTypes()) {\n+            if (!type.isEmptyType()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    } else if (isUnionType()) {\n+        UnionType unionType = (UnionType) this;\n+        for (Type type : unionType.getTypes()) {\n+            if (!type.isEmptyType()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    return isNoType() || isNoObjectType() || isUnknownType() || isNoResolvedType() || isVoidType() || isNullType();\n+}\n \n   public boolean isNumberObjectType() {\n     return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}