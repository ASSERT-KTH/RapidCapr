{
    "patch": "// Check if the array access is being used as an assignment target\nif (NodeUtil.isLValue(n)) {\n  return n;\n}\n\nNode parent = n.getParent();\nNode grandParent = parent.getParent();\n\n// If GETPROP/GETELEM is used as assignment target the array literal is\n// acting as a temporary we can't fold it here:\n//    \"[][0] += 1\"\nif (parent.getType() != Token.ASSIGN) {\n  if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n    return n;\n",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..7bb9115f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,21 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Check if the array access is being used as an assignment target\n+if (NodeUtil.isLValue(n)) {\n+  return n;\n+}\n+\n+Node parent = n.getParent();\n+Node grandParent = parent.getParent();\n+\n+// If GETPROP/GETELEM is used as assignment target the array literal is\n+// acting as a temporary we can't fold it here:\n+//    \"[][0] += 1\"\n+if (parent.getType() != Token.ASSIGN) {\n+  if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n+    return n;\n+\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}