{
    "patch": "public static String fixCode(String codeWithBug) {\n    String pattern = \"for\\\\s*\\\\(((.*)\\\\)|(.*)\\\\)\\\\s*\\\\{[\\\\n\\\\s]*([\\\\w\\\\W]*?)[\\\\n\\\\s]*\\\\}\";\n    String replacement = \"for ($1$3) { $4 }\";\n    String fixedCode = codeWithBug.replaceAll(pattern, replacement);\n\n    // Check for nested for loops\n    if (fixedCode.matches(\"(?s).*\\\\bfor\\\\b.*\\\\bfor\\\\b.*\")) {\n        fixedCode = fixNestedForLoops(fixedCode);\n    }\n\n    return fixedCode;\n}\n\nprivate static String fixNestedForLoops(String code) {\n    String pattern = \"for\\\\s*\\\\(((.*)\\\\)|(.*)\\\\)\\\\s*\\\\{[\\\\n\\\\s]*([\\\\w\\\\W]*?)[\\\\n\\\\s]*\\\\}\";\n    String outerReplacement = \"for ($1$3) { $4 }\";\n    String innerReplacement = \"for ($2) { $3 }\";\n    String fixedCode = code.replaceAll(pattern, outerReplacement);\n    fixedCode = fixedCode.replaceAll(pattern, innerReplacement);\n    return fixedCode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..703cf7db 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,27 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String codeWithBug) {\n+    String pattern = \"for\\\\s*\\\\(((.*)\\\\)|(.*)\\\\)\\\\s*\\\\{[\\\\n\\\\s]*([\\\\w\\\\W]*?)[\\\\n\\\\s]*\\\\}\";\n+    String replacement = \"for ($1$3) { $4 }\";\n+    String fixedCode = codeWithBug.replaceAll(pattern, replacement);\n+\n+    // Check for nested for loops\n+    if (fixedCode.matches(\"(?s).*\\\\bfor\\\\b.*\\\\bfor\\\\b.*\")) {\n+        fixedCode = fixNestedForLoops(fixedCode);\n+    }\n+\n+    return fixedCode;\n+}\n+\n+private static String fixNestedForLoops(String code) {\n+    String pattern = \"for\\\\s*\\\\(((.*)\\\\)|(.*)\\\\)\\\\s*\\\\{[\\\\n\\\\s]*([\\\\w\\\\W]*?)[\\\\n\\\\s]*\\\\}\";\n+    String outerReplacement = \"for ($1$3) { $4 }\";\n+    String innerReplacement = \"for ($2) { $3 }\";\n+    String fixedCode = code.replaceAll(pattern, outerReplacement);\n+    fixedCode = fixedCode.replaceAll(pattern, innerReplacement);\n+    return fixedCode;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}