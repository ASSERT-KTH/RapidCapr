{
    "patch": "public static double regularizedGammaFunction(double a, double x) {\n    final double eps = 10e-15;\n    final int maxIterations = 1000;\n    double small = 1e-50;\n    double big = 1e50;\n    double gln = Gamma.logGamma(a);\n    if (x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (a <= 0.0) {\n        return Double.NaN;\n    }\n    if (x < a + 1.0) {\n        double ap = a;\n        double del = 1.0 / a;\n        double sum = del;\n        for (int n = 1; n <= maxIterations; n++) {\n            ap += 1.0;\n            del *= x / ap;\n            sum += del;\n            if (Math.abs(del) < Math.abs(sum) * eps) {\n                return sum * Math.exp(-x + a * Math.log(x) - gln);\n            }\n        }\n    } else {\n        double b = x + 1.0 - a;\n        double c = big;\n        double d = 1.0 / b;\n        double h = d;\n        for (int i = 1; i <= maxIterations; i++) {\n            double an = -i * (i - a);\n            b += 2.0;\n            d = an * d + b;\n            if (Math.abs(d) < small) {\n                d = small;\n            }\n            c = b + an / c;\n            if (Math.abs(c) < small) {\n                c = small;\n            }\n            d = 1.0 / d;\n            double del = d * c;\n            h *= del;\n            if (Math.abs(del - 1.0) < eps) {\n                return 1.0 - h * Math.exp(-x + a * Math.log(x) - gln);\n            }\n        }\n    }\n    return Double.NaN;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..43047f4f4 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,59 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaFunction(double a, double x) {\n+    final double eps = 10e-15;\n+    final int maxIterations = 1000;\n+    double small = 1e-50;\n+    double big = 1e50;\n+    double gln = Gamma.logGamma(a);\n+    if (x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (a <= 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x < a + 1.0) {\n+        double ap = a;\n+        double del = 1.0 / a;\n+        double sum = del;\n+        for (int n = 1; n <= maxIterations; n++) {\n+            ap += 1.0;\n+            del *= x / ap;\n+            sum += del;\n+            if (Math.abs(del) < Math.abs(sum) * eps) {\n+                return sum * Math.exp(-x + a * Math.log(x) - gln);\n+            }\n+        }\n+    } else {\n+        double b = x + 1.0 - a;\n+        double c = big;\n+        double d = 1.0 / b;\n+        double h = d;\n+        for (int i = 1; i <= maxIterations; i++) {\n+            double an = -i * (i - a);\n+            b += 2.0;\n+            d = an * d + b;\n+            if (Math.abs(d) < small) {\n+                d = small;\n+            }\n+            c = b + an / c;\n+            if (Math.abs(c) < small) {\n+                c = small;\n+            }\n+            d = 1.0 / d;\n+            double del = d * c;\n+            h *= del;\n+            if (Math.abs(del - 1.0) < eps) {\n+                return 1.0 - h * Math.exp(-x + a * Math.log(x) - gln);\n+            }\n+        }\n+    }\n+    return Double.NaN;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}