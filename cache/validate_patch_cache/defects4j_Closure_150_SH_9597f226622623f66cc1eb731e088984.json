{
    "patch": "    if (n.getType() == Token.LP &&\n        parent != null &&\n        NodeUtil.isFunctionExpression(parent.getParent())) {\n          defineDeclaredFunction(n.getFirstChild(), parent);\n          return;\n    }\n\n    attachLiteralTypes(n);\n    switch (n.getType()) {\n      case Token.FUNCTION: {\n        Node firstChild = n.getFirstChild();\n        if (firstChild == null || !NodeUtil.isFunctionExpression(n)) {\n          break;  // Ignore function declarations and named function expressions\n        }\n\n        Node grandParent = parent.getParent();\n        if (grandParent != null && grandParent.getType() == Token.SCRIPT) {\n          defineDeclaredFunction(firstChild, parent.getParent());\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n\n      case Token.VAR:\n        defineVar(n, parent);\n        break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..fba78f86 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,35 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+    if (n.getType() == Token.LP &&\n+        parent != null &&\n+        NodeUtil.isFunctionExpression(parent.getParent())) {\n+          defineDeclaredFunction(n.getFirstChild(), parent);\n+          return;\n+    }\n+\n+    attachLiteralTypes(n);\n+    switch (n.getType()) {\n+      case Token.FUNCTION: {\n+        Node firstChild = n.getFirstChild();\n+        if (firstChild == null || !NodeUtil.isFunctionExpression(n)) {\n+          break;  // Ignore function declarations and named function expressions\n+        }\n+\n+        Node grandParent = parent.getParent();\n+        if (grandParent != null && grandParent.getType() == Token.SCRIPT) {\n+          defineDeclaredFunction(firstChild, parent.getParent());\n+        }\n+        break;\n       }\n+\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}