{
    "patch": "    Preconditions.checkState(callTarget != null && callTarget.isName());\n    String functionName = callTarget.getString();\n    if (functionName.equals(\"String\")) {\n      Node value = callTarget.getNext();\n      if (value != null) {\n        Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            value.detachFromParent());\n        n.getParent().replaceChild(n, addition);\n        reportCodeChange();\n        return addition;\n      }\n    }\n    return n;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..ad44fe7e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,6 +217,10 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n+    Preconditions.checkState(callTarget != null && callTarget.isName());\n+    String functionName = callTarget.getString();\n+    if (functionName.equals(\"String\")) {\n+      Node value = callTarget.getNext();\n       if (value != null) {\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n@@ -226,6 +230,15 @@ class PeepholeSubstituteAlternateSyntax\n         return addition;\n       }\n     }\n+    return n;\n+        Node addition = IR.add(\n+            IR.string(\"\").srcref(callTarget),\n+            value.detachFromParent());\n+        n.getParent().replaceChild(n, addition);\n+        reportCodeChange();\n+        return addition;\n+      }\n+    }\n     return n;\n   }\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}