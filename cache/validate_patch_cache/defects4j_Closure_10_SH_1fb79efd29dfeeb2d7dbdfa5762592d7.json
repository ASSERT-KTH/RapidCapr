{
    "patch": "    List<Node> nodesToCheck = new ArrayList<Node>();\n    nodesToCheck.add(n);\n    while (!nodesToCheck.isEmpty()) {\n      Node currNode = nodesToCheck.remove(0);\n      if (mayBeStringHelper(currNode)) {\n        return true;\n      }\n      List<Node> secondChildren = currNode.getSecondChildren();\n      for(Node child : secondChildren) {\n        nodesToCheck.add(child);    \n      }\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..fb14db21 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1414,7 +1414,19 @@ public final class NodeUtil {\n \n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+    List<Node> nodesToCheck = new ArrayList<Node>();\n+    nodesToCheck.add(n);\n+    while (!nodesToCheck.isEmpty()) {\n+      Node currNode = nodesToCheck.remove(0);\n+      if (mayBeStringHelper(currNode)) {\n+        return true;\n+      }\n+      List<Node> secondChildren = currNode.getSecondChildren();\n+      for(Node child : secondChildren) {\n+        nodesToCheck.add(child);    \n+      }\n+    }\n+    return false;\n     } else {\n       return mayBeStringHelper(n);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}