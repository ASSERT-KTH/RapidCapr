{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    double eps = 10e-15;\n    double gln = logGamma(a);\n    if (x < 0.0) {\n        return Double.NaN;\n    } else if (x == 0.0) {\n        return 0.0;\n    } else if (x < a + 1.0) {\n        double ap = a;\n        double del = 1.0 / a;\n        double sum = del;\n        while (Math.abs(del) > Math.abs(sum) * eps && ap > 0.0) {\n            del *= x / (++ap);\n            sum += del;\n        }\n        return sum * Math.exp(-x + a * Math.log(x) - gln);\n    } else {\n        double b = x + 1.0 - a;\n        double c = 1.0 / eps;\n        double d = 1.0 / b;\n        double h = d;\n        double an = -1.0;\n        while (Math.abs(d - an) > c * Math.abs(d) && b > 0.0) {\n            an = d;\n            h *= b / (a++);\n            d += h;\n            b--;\n        }\n        return 1.0 - d * Math.exp(-x + a * Math.log(x) - gln);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..5be761832 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,37 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    double eps = 10e-15;\n+    double gln = logGamma(a);\n+    if (x < 0.0) {\n+        return Double.NaN;\n+    } else if (x == 0.0) {\n+        return 0.0;\n+    } else if (x < a + 1.0) {\n+        double ap = a;\n+        double del = 1.0 / a;\n+        double sum = del;\n+        while (Math.abs(del) > Math.abs(sum) * eps && ap > 0.0) {\n+            del *= x / (++ap);\n+            sum += del;\n+        }\n+        return sum * Math.exp(-x + a * Math.log(x) - gln);\n+    } else {\n+        double b = x + 1.0 - a;\n+        double c = 1.0 / eps;\n+        double d = 1.0 / b;\n+        double h = d;\n+        double an = -1.0;\n+        while (Math.abs(d - an) > c * Math.abs(d) && b > 0.0) {\n+            an = d;\n+            h *= b / (a++);\n+            d += h;\n+            b--;\n+        }\n+        return 1.0 - d * Math.exp(-x + a * Math.log(x) - gln);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}