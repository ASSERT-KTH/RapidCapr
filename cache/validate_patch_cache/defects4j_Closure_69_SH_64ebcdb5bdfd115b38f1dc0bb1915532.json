{
    "patch": "...\n// Functions with explicit 'this' types must be called in a GETPROP\n// or GETELEM.\nif (!isGetPropOrGetElem(child.getParent())) {\n    report(\n        t,\n        n,\n        CALL_FUNCTION_WITH_NON_LITERAL_THIS,\n        functionType.getThisType().toString());\n}\nvisitParameterList(t, n, functionType);\nensureTyped(t, n, functionType.getReturnType());\n...",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..08993c0e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+...\n+// Functions with explicit 'this' types must be called in a GETPROP\n+// or GETELEM.\n+if (!isGetPropOrGetElem(child.getParent())) {\n+    report(\n+        t,\n+        n,\n+        CALL_FUNCTION_WITH_NON_LITERAL_THIS,\n+        functionType.getThisType().toString());\n+}\n+visitParameterList(t, n, functionType);\n+ensureTyped(t, n, functionType.getReturnType());\n+...\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}