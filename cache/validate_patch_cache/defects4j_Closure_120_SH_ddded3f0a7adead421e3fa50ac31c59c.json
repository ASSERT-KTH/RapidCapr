{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphEdge<Node, ExceptionHandler>> exceptionEdges = getCfg().getOutEdges(cfgNode);\n    return !exceptionEdges.isEmpty();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..36826c74 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,10 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphEdge<Node, ExceptionHandler>> exceptionEdges = getCfg().getOutEdges(cfgNode);\n+    return !exceptionEdges.isEmpty();\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}