{
    "patch": "  private static final DiagnosticType JSC_USED_GLOBAL_THIS =\n      DiagnosticType.warning(\n          \"JSC_USED_GLOBAL_THIS\",\n          \"dangerous use of the global this object\");\n\n  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = n.getJSDocInfo();\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (isLvalue(n.getParent()) &&\n          n.getParent().getFirstChild().getNodeType() == Token.GETPROP &&\n          \"prototype\".equals(n.getParent().getFirstChild().getLastChild().getString())) {\n        return false;\n      }\n    }\n\n    Node grandparent = parent.getParent();\n    if (grandparent != null &&\n        grandparent.getType() == Token.CALL &&\n        parent == grandparent.getFirstChild() &&\n        n.getType() == Token.GETPROP &&\n        \"call\".equals(n.getLastChild().getString())) {\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(grandparent);\n      if (jsDoc != null && jsDoc.isConstructor()) {\n        // A prototype constructor call pattern.\n        // Don't traverse the function being called (e.g. goog.object.inherits).\n        return false;\n      }\n    }\n\n    if (n.getType() == Token.STRING_KEY) {\n      // Don't traverse object literal keys that would not be valid variable\n      // names in a global script. This includes all keywords, plus names that\n      // start with a digit or a minus sign.\n      String name = n.getString();\n      if (TokenStream.isKeyword(name) ||\n          name.startsWith(\"-\") ||\n          name.matches(\"\\\\d+\")) {\n        return false;\n      }\n    }\n\n    if (n.getType() == Token.THIS) {\n      // Report dangerous use of the global this object.\n      t.report(n, JSC_USED_GLOBAL_THIS);\n    }\n\n    return true;\n  }\n\n  private static boolean isLvalue(Node n) {\n    // Identifiers and properties are lvalues; everything else is not.\n    return n != null && (n.isName() || n.isGetProp());\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..82c532b0 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,12 +79,17 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  private static final DiagnosticType JSC_USED_GLOBAL_THIS =\n+      DiagnosticType.warning(\n+          \"JSC_USED_GLOBAL_THIS\",\n+          \"dangerous use of the global this object\");\n \n+  @Override\n+  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n       // Don't traverse functions that are constructors or have the @this\n       // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      JSDocInfo jsDoc = n.getJSDocInfo();\n       if (jsDoc != null &&\n           (jsDoc.isConstructor() ||\n            jsDoc.isInterface() ||\n@@ -112,39 +117,52 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (isLvalue(n.getParent()) &&\n+          n.getParent().getFirstChild().getNodeType() == Token.GETPROP &&\n+          \"prototype\".equals(n.getParent().getFirstChild().getLastChild().getString())) {\n+        return false;\n+      }\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n+    Node grandparent = parent.getParent();\n+    if (grandparent != null &&\n+        grandparent.getType() == Token.CALL &&\n+        parent == grandparent.getFirstChild() &&\n+        n.getType() == Token.GETPROP &&\n+        \"call\".equals(n.getLastChild().getString())) {\n+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(grandparent);\n+      if (jsDoc != null && jsDoc.isConstructor()) {\n+        // A prototype constructor call pattern.\n+        // Don't traverse the function being called (e.g. goog.object.inherits).\n+        return false;\n+      }\n+    }\n \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-        }\n+    if (n.getType() == Token.STRING_KEY) {\n+      // Don't traverse object literal keys that would not be valid variable\n+      // names in a global script. This includes all keywords, plus names that\n+      // start with a digit or a minus sign.\n+      String name = n.getString();\n+      if (TokenStream.isKeyword(name) ||\n+          name.startsWith(\"-\") ||\n+          name.matches(\"\\\\d+\")) {\n+        return false;\n       }\n     }\n \n+    if (n.getType() == Token.THIS) {\n+      // Report dangerous use of the global this object.\n+      t.report(n, JSC_USED_GLOBAL_THIS);\n+    }\n+\n     return true;\n   }\n \n+  private static boolean isLvalue(Node n) {\n+    // Identifiers and properties are lvalues; everything else is not.\n+    return n != null && (n.isName() || n.isGetProp());\n+  }\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}