{
    "patch": "    Node function = fnScope.getRootNode();\n    Node parameter = function.getFirstChild();\n    Node name;\n    int i = 0;\n    while (parameter != null && (name = parameter.getFirstChild()) != null) {\n      if (referenced.contains(fnScope.getVar(name.getString()))) {\n        i++;\n      } else {\n        NodeUtil.removeChild(parameter.getParent(), parameter);\n        compiler.reportCodeChange();\n      }\n      parameter = parameter.getNext();\n    }\n    function.putProp(Node.FUNCTION_LENGTH, i);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..58565558 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Node parameter = function.getFirstChild();\n+    Node name;\n+    int i = 0;\n+    while (parameter != null && (name = parameter.getFirstChild()) != null) {\n+      if (referenced.contains(fnScope.getVar(name.getString()))) {\n+        i++;\n+      } else {\n+        NodeUtil.removeChild(parameter.getParent(), parameter);\n+        compiler.reportCodeChange();\n+      }\n+      parameter = parameter.getNext();\n+    }\n+    function.putProp(Node.FUNCTION_LENGTH, i);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}