{
    "patch": "public String fixCode(String code) {\n    String fixed = code.replaceAll(\"(?<!\\\\[)([+-]\\\\d+\\\\s*\\\\+\\\\s*\\\\d+)(?!\\\\])\", \"($1)\");\n    fixed = fixed.replaceAll(\"\\\\[(\\\\d+)\\\\s*([+-])\\\\s*\\\\d+\\\\]\", \"[$1 $2 $2 $2 $2 $2 $2]\");\n    fixed = normalizeForLoops(fixed);\n    return fixed;\n}\n\npublic String normalizeForLoops(String code) {\n    String regex = \"\\\\bfor\\\\b\\\\s*\\\\(([^)]+?)\\\\)\\\\s*\\\\{\";\n    Pattern forLoopPattern = Pattern.compile(regex, Pattern.DOTALL);\n    Matcher forLoopMatcher = forLoopPattern.matcher(code);\n    StringBuffer sb = new StringBuffer();\n    while (forLoopMatcher.find()) {\n        String forLoopMatch = forLoopMatcher.group(1);\n        String normalized = fixInOperatorInForLoop(forLoopMatch);\n        forLoopMatcher.appendReplacement(sb, Matcher.quoteReplacement(\"for (\" + normalized + \") {\"));\n    }\n    forLoopMatcher.appendTail(sb);\n    return sb.toString();\n}\n\npublic String fixInOperatorInForLoop(String forLoop) {\n    String regex = \"\\\\b(for)\\\\b\\\\s*\\\\(\\\\s*([^;]*\\\\s)?in\\\\s+([^)]+)\\\\s*\\\\)\";\n    Pattern inOperatorPattern = Pattern.compile(regex, Pattern.DOTALL);\n    Matcher inOperatorMatcher = inOperatorPattern.matcher(forLoop);\n    StringBuffer sb = new StringBuffer();\n    while (inOperatorMatcher.find()) {\n        String inOperatorMatch = inOperatorMatcher.group();\n        String fixedInOperator = inOperatorMatch.replaceAll(\"\\\\s+\", \" \");\n        inOperatorMatcher.appendReplacement(sb, fixedInOperator);\n    }\n    inOperatorMatcher.appendTail(sb);\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..784a59b4 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,40 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    String fixed = code.replaceAll(\"(?<!\\\\[)([+-]\\\\d+\\\\s*\\\\+\\\\s*\\\\d+)(?!\\\\])\", \"($1)\");\n+    fixed = fixed.replaceAll(\"\\\\[(\\\\d+)\\\\s*([+-])\\\\s*\\\\d+\\\\]\", \"[$1 $2 $2 $2 $2 $2 $2]\");\n+    fixed = normalizeForLoops(fixed);\n+    return fixed;\n+}\n+\n+public String normalizeForLoops(String code) {\n+    String regex = \"\\\\bfor\\\\b\\\\s*\\\\(([^)]+?)\\\\)\\\\s*\\\\{\";\n+    Pattern forLoopPattern = Pattern.compile(regex, Pattern.DOTALL);\n+    Matcher forLoopMatcher = forLoopPattern.matcher(code);\n+    StringBuffer sb = new StringBuffer();\n+    while (forLoopMatcher.find()) {\n+        String forLoopMatch = forLoopMatcher.group(1);\n+        String normalized = fixInOperatorInForLoop(forLoopMatch);\n+        forLoopMatcher.appendReplacement(sb, Matcher.quoteReplacement(\"for (\" + normalized + \") {\"));\n+    }\n+    forLoopMatcher.appendTail(sb);\n+    return sb.toString();\n+}\n+\n+public String fixInOperatorInForLoop(String forLoop) {\n+    String regex = \"\\\\b(for)\\\\b\\\\s*\\\\(\\\\s*([^;]*\\\\s)?in\\\\s+([^)]+)\\\\s*\\\\)\";\n+    Pattern inOperatorPattern = Pattern.compile(regex, Pattern.DOTALL);\n+    Matcher inOperatorMatcher = inOperatorPattern.matcher(forLoop);\n+    StringBuffer sb = new StringBuffer();\n+    while (inOperatorMatcher.find()) {\n+        String inOperatorMatch = inOperatorMatcher.group();\n+        String fixedInOperator = inOperatorMatch.replaceAll(\"\\\\s+\", \" \");\n+        inOperatorMatcher.appendReplacement(sb, fixedInOperator);\n+    }\n+    inOperatorMatcher.appendTail(sb);\n+    return sb.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}