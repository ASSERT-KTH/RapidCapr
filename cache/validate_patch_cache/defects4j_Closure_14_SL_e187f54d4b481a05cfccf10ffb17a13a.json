{
    "patch": "private static boolean hasFinallyOnPath(Node startNode, Node targetNode) {\n  Node n = startNode;\n  while (n != null) {\n    if (n.getType() == Token.TRY && NodeUtil.hasFinally(n)) {\n      for (Node finallyNode : NodeUtil.getFinallyBlocks(n)) {\n        if (ControlFlowGraph.isAncestor(finallyNode, targetNode)) {\n          return true;\n        }\n      }\n    }\n    n = n.getParent();\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..52315a61 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,20 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+private static boolean hasFinallyOnPath(Node startNode, Node targetNode) {\n+  Node n = startNode;\n+  while (n != null) {\n+    if (n.getType() == Token.TRY && NodeUtil.hasFinally(n)) {\n+      for (Node finallyNode : NodeUtil.getFinallyBlocks(n)) {\n+        if (ControlFlowGraph.isAncestor(finallyNode, targetNode)) {\n+          return true;\n+        }\n+      }\n+    }\n+    n = n.getParent();\n+  }\n+  return false;\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}