{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        double[][] rootArray = dec.getSquareRoot().getData();\n        int n = rootArray.length;\n        RealMatrix root = MatrixUtils.createRealMatrix(n, n);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                root.setEntry(i, j, rootArray[i][j]);\n            }\n        }\n        return root;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..30793cda7 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,15 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        double[][] rootArray = dec.getSquareRoot().getData();\n+        int n = rootArray.length;\n+        RealMatrix root = MatrixUtils.createRealMatrix(n, n);\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < n; j++) {\n+                root.setEntry(i, j, rootArray[i][j]);\n+            }\n+        }\n+        return root;\n     }\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}