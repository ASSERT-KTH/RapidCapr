{
    "patch": "public double getTypedPercent(String input) {\n    String[] lines = input.split(\"\\n\");\n    int totalCount = 0;\n    int typedCount = 0;\n    for (String line : lines) {\n        if (line.startsWith(\"P:\")) {\n            totalCount++;\n            char typed = line.charAt(2);\n            if (typed != '_') {\n                typedCount++;\n            }\n        }\n    }\n    return (double) typedCount / totalCount * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..7ab71340 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String input) {\n+    String[] lines = input.split(\"\\n\");\n+    int totalCount = 0;\n+    int typedCount = 0;\n+    for (String line : lines) {\n+        if (line.startsWith(\"P:\")) {\n+            totalCount++;\n+            char typed = line.charAt(2);\n+            if (typed != '_') {\n+                typedCount++;\n+            }\n+        }\n+    }\n+    return (double) typedCount / totalCount * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}