{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    if (result == null) {\n        throw new IllegalStateException(\"Failed to get remaining JSDoc line\");\n    }\n    result = result.replace(\"*/\", \"\");\n    result = result.trim();\n    return (result.isEmpty() ? \"\" : \" \" + result);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..25dd0bd9 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,15 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n+private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+    if (result == null) {\n+        throw new IllegalStateException(\"Failed to get remaining JSDoc line\");\n+    }\n+    result = result.replace(\"*/\", \"\");\n+    result = result.trim();\n+    return (result.isEmpty() ? \"\" : \" \" + result);\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "junit.framework.ComparisonFailure: expected:<Hello[]!> but was:<Hello[ ]!>",
    "test_result": "FAIL"
}