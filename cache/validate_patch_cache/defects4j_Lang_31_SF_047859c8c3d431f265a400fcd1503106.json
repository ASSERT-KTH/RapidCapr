{
    "patch": "public class StringUtils {    \n    public static boolean containsAny(CharSequence str, char[] searchChars) {\n        if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int strLength = str.length();\n        int searchLength = searchChars.length;\n        int firstSupplementaryCharIndex = indexOfAnyBut(str, searchChars);\n        if (firstSupplementaryCharIndex == -1) {\n            return true;\n        }\n        int i = 0;\n        while (i < strLength) {\n            int codePoint = Character.codePointAt(str, i);\n            if (searchLength <= 2) {\n                if (searchChars[0] == codePoint || searchChars[1] == codePoint) {\n                    return true;\n                }\n            } else if (searchLength <= 4) {\n                if (searchChars[0] == codePoint || searchChars[1] == codePoint || \n                        searchChars[2] == codePoint || searchChars[3] == codePoint) {\n                    return true;\n                }\n            } else {\n                for (char searchChar : searchChars) {\n                    if (Character.charCount(searchChar) == 1) {\n                        if (searchChar == codePoint) {\n                            return true;\n                        }\n                    } else {\n                        if (i < strLength - 1 && searchChar == str.charAt(i + 1) && \n                                Character.isSurrogatePair(codePoint, str.charAt(i + 1))) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            if (i >= firstSupplementaryCharIndex) {\n                break;\n            } else {\n                i += Character.charCount(codePoint);\n            }\n        }       \n        return false;\n    }\n\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        for (int i = 0; i < cs.length(); i++) {\n            char ch = cs.charAt(i);\n            boolean found = false;\n            for (int j = 0; j < searchChars.length; j++) {\n                if (searchChars[j] == ch) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public static boolean isEmpty(CharSequence cs) {\n        return cs == null || cs.length() == 0;    \n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..f01280bc 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,73 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {    \n+    public static boolean containsAny(CharSequence str, char[] searchChars) {\n+        if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+            return false;\n+        }\n+        int strLength = str.length();\n+        int searchLength = searchChars.length;\n+        int firstSupplementaryCharIndex = indexOfAnyBut(str, searchChars);\n+        if (firstSupplementaryCharIndex == -1) {\n+            return true;\n+        }\n+        int i = 0;\n+        while (i < strLength) {\n+            int codePoint = Character.codePointAt(str, i);\n+            if (searchLength <= 2) {\n+                if (searchChars[0] == codePoint || searchChars[1] == codePoint) {\n+                    return true;\n+                }\n+            } else if (searchLength <= 4) {\n+                if (searchChars[0] == codePoint || searchChars[1] == codePoint || \n+                        searchChars[2] == codePoint || searchChars[3] == codePoint) {\n+                    return true;\n+                }\n+            } else {\n+                for (char searchChar : searchChars) {\n+                    if (Character.charCount(searchChar) == 1) {\n+                        if (searchChar == codePoint) {\n+                            return true;\n+                        }\n+                    } else {\n+                        if (i < strLength - 1 && searchChar == str.charAt(i + 1) && \n+                                Character.isSurrogatePair(codePoint, str.charAt(i + 1))) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n+            if (i >= firstSupplementaryCharIndex) {\n+                break;\n+            } else {\n+                i += Character.charCount(codePoint);\n+            }\n+        }       \n+        return false;\n+    }\n+\n+    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n+        for (int i = 0; i < cs.length(); i++) {\n+            char ch = cs.charAt(i);\n+            boolean found = false;\n+            for (int j = 0; j < searchChars.length; j++) {\n+                if (searchChars[j] == ch) {\n+                    found = true;\n+                    break;\n+                }\n+            }\n+            if (!found) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public static boolean isEmpty(CharSequence cs) {\n+        return cs == null || cs.length() == 0;    \n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}