{
    "patch": "if (x == x1) {\n    // The new approximation is the same as the previous one.\n    // We try to limit the relative distance between the bounds to prevent infinite looping.\n    final double delta = FastMath.max(rtol * FastMath.abs(x1), atol);\n    if (inverted) {\n        x0 = FastMath.max(x0 - delta, getMin());\n    } else {\n        x1 = FastMath.min(x1 + delta, getMax());\n    }\n} else {\n    // The new approximation is different from the previous one.\n    // We can safely update the bounds as usual.\n    if (f1 * fx < 0) {\n        x0 = x1;\n        f0 = f1;\n        inverted = !inverted;\n    } else {\n        switch (method) {\n        case ILLINOIS:\n            f0 *= 0.5;\n            break;\n        case PEGASUS:\n            f0 *= f1 / (f1 + fx);\n            break;\n        case REGULA_FALSI:\n            // Nothing.\n            break;\n        default:\n            throw new MathInternalError();\n        }\n    }\n    x1 = x;\n    f1 = fx;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..2cfc421c5 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,10 +184,40 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+if (x == x1) {\n+    // The new approximation is the same as the previous one.\n+    // We try to limit the relative distance between the bounds to prevent infinite looping.\n+    final double delta = FastMath.max(rtol * FastMath.abs(x1), atol);\n+    if (inverted) {\n+        x0 = FastMath.max(x0 - delta, getMin());\n+    } else {\n+        x1 = FastMath.min(x1 + delta, getMax());\n+    }\n+} else {\n+    // The new approximation is different from the previous one.\n+    // We can safely update the bounds as usual.\n+    if (f1 * fx < 0) {\n+        x0 = x1;\n+        f0 = f1;\n+        inverted = !inverted;\n+    } else {\n+        switch (method) {\n+        case ILLINOIS:\n+            f0 *= 0.5;\n+            break;\n+        case PEGASUS:\n+            f0 *= f1 / (f1 + fx);\n+            break;\n+        case REGULA_FALSI:\n+            // Nothing.\n+            break;\n+        default:\n+            throw new MathInternalError();\n+        }\n+    }\n+    x1 = x;\n+    f1 = fx;\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}