{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n.getParent();\n    if (parent.isVar() && parent.getParent().isFunction()) {\n      String name = n.getString();\n      Var aliasVar = scope.getVar(name);\n      if (aliasVar.getInitialValue() != null && aliasVar.getInitialValue().isQualifiedName()) {\n        aliases.put(name, aliasVar);\n    \n        String qualifiedName =\n            aliasVar.getInitialValue().getQualifiedName();\n        transformation.addAlias(name, qualifiedName);\n      } else {\n        // Bleeding functions already get a BAD_PARAMETERS error, so just\n        // do nothing.\n        // Parameters of the scope function also get a BAD_PARAMETERS\n        // error.\n      }\n    } else if (parent.isVar() && parent.getParent().isObjectLit()) {\n      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n        aliases.put(name, aliasVar);\n\n        Node aliasInit = aliasVar.getInitialValue();\n        if (aliasInit == null) {\n          // Do nothing.\n        } else if (aliasInit.isQualifiedName()) {\n          String qualifiedName = aliasInit.getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n        } else {\n          // Variables that are aliased but never declared are ignored.\n        }\n      }\n    } else if (parent.getParent().isScript() && !parent.isCatch()) {\n      // hack: ignore implied global functions defined in goog.scope if they don't assign to a\n      // variable.\n      // If there is another \"var g = xxxx;\" statement in a section, then the function isn't\n      // an implied global.\n      if (!n.isFunction() || NodeUtil.isFunctionExpression(n) || NodeUtil.isBleedingFunctionExpression(n)) {\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      }\n    } else {\n      // TODO(robbyw): Support using locals for private variables.\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..b1488720 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,56 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+    if (parent.isVar() && parent.getParent().isFunction()) {\n+      String name = n.getString();\n+      Var aliasVar = scope.getVar(name);\n+      if (aliasVar.getInitialValue() != null && aliasVar.getInitialValue().isQualifiedName()) {\n+        aliases.put(name, aliasVar);\n+    \n+        String qualifiedName =\n+            aliasVar.getInitialValue().getQualifiedName();\n+        transformation.addAlias(name, qualifiedName);\n+      } else {\n+        // Bleeding functions already get a BAD_PARAMETERS error, so just\n+        // do nothing.\n+        // Parameters of the scope function also get a BAD_PARAMETERS\n+        // error.\n+      }\n+    } else if (parent.isVar() && parent.getParent().isObjectLit()) {\n+      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+        String name = n.getString();\n+        Var aliasVar = scope.getVar(name);\n+        aliases.put(name, aliasVar);\n+\n+        Node aliasInit = aliasVar.getInitialValue();\n+        if (aliasInit == null) {\n+          // Do nothing.\n+        } else if (aliasInit.isQualifiedName()) {\n+          String qualifiedName = aliasInit.getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n         } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+          // Variables that are aliased but never declared are ignored.\n         }\n       }\n+    } else if (parent.getParent().isScript() && !parent.isCatch()) {\n+      // hack: ignore implied global functions defined in goog.scope if they don't assign to a\n+      // variable.\n+      // If there is another \"var g = xxxx;\" statement in a section, then the function isn't\n+      // an implied global.\n+      if (!n.isFunction() || NodeUtil.isFunctionExpression(n) || NodeUtil.isBleedingFunctionExpression(n)) {\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+      }\n+    } else {\n+      // TODO(robbyw): Support using locals for private variables.\n+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}