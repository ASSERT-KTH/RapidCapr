{
    "patch": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException {\n    // Check if start and end are not null\n    if (start == null || end == null) {\n        throw new IllegalArgumentException(\"Start or end is null.\");\n    }\n    // Check if start is before or equal to end\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\"Start is after end.\");\n    }\n    // Get the index of start and end\n    int startIndex = getIndex(start);\n    int endIndex = getIndex(end);\n    if (startIndex < 0) {\n        // If start index is negative, get the insertion point\n        startIndex = -(startIndex + 1);\n        if (startIndex >= this.data.size()) {\n            // If start index is greater than or equal to the size of data, return an empty series\n            return new TimeSeries(getDomainDescription());\n        }\n    }\n    if (endIndex < 0) {\n        // If end index is negative, get the insertion point and decrement\n        endIndex = -(endIndex + 1) - 1;\n        if (endIndex < 0) {\n            // If end index is less than 0, return an empty series\n            return new TimeSeries(getDomainDescription());\n        }\n    }\n    // Check if start index is not greater than or equal to the size of data and end index is not less than start index\n    if (startIndex < this.data.size() && endIndex >= startIndex) {\n        return createCopy(startIndex, endIndex);\n    } else {\n        // Return an empty series\n        return new TimeSeries(getDomainDescription());\n    }\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 4067e3e..7d246ef 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -915,45 +915,42 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n      *\n      * @throws CloneNotSupportedException if there is a cloning problem.\n      */\n-    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n-        throws CloneNotSupportedException {\n-\n-        if (start == null) {\n-            throw new IllegalArgumentException(\"Null 'start' argument.\");\n-        }\n-        if (end == null) {\n-            throw new IllegalArgumentException(\"Null 'end' argument.\");\n-        }\n-        if (start.compareTo(end) > 0) {\n-            throw new IllegalArgumentException(\n-                    \"Requires start on or before end.\");\n-        }\n-        boolean emptyRange = false;\n-        int startIndex = getIndex(start);\n-        if (startIndex < 0) {\n-            startIndex = -(startIndex + 1);\n-            if (startIndex == this.data.size()) {\n-                emptyRange = true;  // start is after last data item\n-            }\n-        }\n-        int endIndex = getIndex(end);\n-        if (endIndex < 0) {             // end period is not in original series\n-            endIndex = -(endIndex + 1); // this is first item AFTER end period\n-            endIndex = endIndex - 1;    // so this is last item BEFORE end\n-        }\n-        if (endIndex < 0) {\n-            emptyRange = true;\n-        }\n-        if (emptyRange) {\n-            TimeSeries copy = (TimeSeries) super.clone();\n-            copy.data = new java.util.ArrayList();\n-            return copy;\n-        }\n-        else {\n-            return createCopy(startIndex, endIndex);\n-        }\n-\n-    }\n+public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException {\n+    // Check if start and end are not null\n+    if (start == null || end == null) {\n+        throw new IllegalArgumentException(\"Start or end is null.\");\n+    }\n+    // Check if start is before or equal to end\n+    if (start.compareTo(end) > 0) {\n+        throw new IllegalArgumentException(\"Start is after end.\");\n+    }\n+    // Get the index of start and end\n+    int startIndex = getIndex(start);\n+    int endIndex = getIndex(end);\n+    if (startIndex < 0) {\n+        // If start index is negative, get the insertion point\n+        startIndex = -(startIndex + 1);\n+        if (startIndex >= this.data.size()) {\n+            // If start index is greater than or equal to the size of data, return an empty series\n+            return new TimeSeries(getDomainDescription());\n+        }\n+    }\n+    if (endIndex < 0) {\n+        // If end index is negative, get the insertion point and decrement\n+        endIndex = -(endIndex + 1) - 1;\n+        if (endIndex < 0) {\n+            // If end index is less than 0, return an empty series\n+            return new TimeSeries(getDomainDescription());\n+        }\n+    }\n+    // Check if start index is not greater than or equal to the size of data and end index is not less than start index\n+    if (startIndex < this.data.size() && endIndex >= startIndex) {\n+        return createCopy(startIndex, endIndex);\n+    } else {\n+        // Return an empty series\n+        return new TimeSeries(getDomainDescription());\n+    }\n+}\n \n     /**\n      * Tests the series for equality with an arbitrary object.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}