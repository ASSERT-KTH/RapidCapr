{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int MAX_ROWS_COLS = 10000;\n    final int rows = m.getRowDimension();\n    final int cols = m.getColumnDimension();\n\n    if (rows > MAX_ROWS_COLS || cols > MAX_ROWS_COLS) {\n        throw new RuntimeException(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n    }\n\n    final long maxElements = (Runtime.getRuntime().maxMemory() - (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory())) / 8;\n    if ((long) rows * cols > maxElements) {\n        final double factor = Math.sqrt((double) maxElements / (rows * cols));\n        m = m.scalarMultiply(factor);\n    }\n\n    final EigenDecomposition dec;\n    try {\n        dec = new EigenDecomposition(m);\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Matrix is not positive definite\", e);\n    }\n\n    final double[] eigenvalues = getSqrtArray(getPositiveEigenvalues(dec));\n    final RealMatrix sqrtDiag = MatrixUtils.createRealDiagonalMatrix(eigenvalues);\n\n    return dec.getV().multiply(sqrtDiag).multiply(dec.getVT());\n}\n\nprivate double[] getSqrtArray(double[] ar) {\n    double[] result = new double[ar.length];\n    for (int i = 0; i < ar.length; i++) {\n        result[i] = Math.sqrt(Math.abs(ar[i])); // Take the absolute value to avoid NaN results from negative eigenvalues\n    }\n    return result;\n}\n\nprivate double[] getPositiveEigenvalues(EigenDecomposition dec) {\n    final int dim = dec.getRealEigenvalues().length;\n    final double[] eigenvalues = new double[dim];\n    for (int i = 0; i < dim; i++) {\n        eigenvalues[i] = Math.max(dec.getRealEigenvalue(i), 0); // Force non-negative eigenvalues\n    }\n    return eigenvalues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b256cab61 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,48 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int MAX_ROWS_COLS = 10000;\n+    final int rows = m.getRowDimension();\n+    final int cols = m.getColumnDimension();\n+\n+    if (rows > MAX_ROWS_COLS || cols > MAX_ROWS_COLS) {\n+        throw new RuntimeException(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n+    }\n+\n+    final long maxElements = (Runtime.getRuntime().maxMemory() - (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory())) / 8;\n+    if ((long) rows * cols > maxElements) {\n+        final double factor = Math.sqrt((double) maxElements / (rows * cols));\n+        m = m.scalarMultiply(factor);\n+    }\n+\n+    final EigenDecomposition dec;\n+    try {\n+        dec = new EigenDecomposition(m);\n+    } catch (Exception e) {\n+        throw new IllegalArgumentException(\"Matrix is not positive definite\", e);\n+    }\n+\n+    final double[] eigenvalues = getSqrtArray(getPositiveEigenvalues(dec));\n+    final RealMatrix sqrtDiag = MatrixUtils.createRealDiagonalMatrix(eigenvalues);\n+\n+    return dec.getV().multiply(sqrtDiag).multiply(dec.getVT());\n+}\n+\n+private double[] getSqrtArray(double[] ar) {\n+    double[] result = new double[ar.length];\n+    for (int i = 0; i < ar.length; i++) {\n+        result[i] = Math.sqrt(Math.abs(ar[i])); // Take the absolute value to avoid NaN results from negative eigenvalues\n     }\n+    return result;\n+}\n+\n+private double[] getPositiveEigenvalues(EigenDecomposition dec) {\n+    final int dim = dec.getRealEigenvalues().length;\n+    final double[] eigenvalues = new double[dim];\n+    for (int i = 0; i < dim; i++) {\n+        eigenvalues[i] = Math.max(dec.getRealEigenvalue(i), 0); // Force non-negative eigenvalues\n+    }\n+    return eigenvalues;\n+}\n }",
    "result_reason": "java.lang.RuntimeException: Matrix size exceeds maximum limit. Please use a smaller matrix.",
    "test_result": "FAIL"
}