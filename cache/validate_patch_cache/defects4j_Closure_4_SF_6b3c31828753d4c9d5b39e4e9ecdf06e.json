{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolvedRegistry = resolveViaRegistry(t, enclosing);\n    boolean cycleDetected = detectImplicitPrototypeCycle();\n\n    if (resolvedRegistry && !cycleDetected) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    if (cycleDetected) {\n      handleTypeCycle(t);\n      resolvedRegistry = resolveViaRegistry(t, enclosing);\n      cycleDetected = detectImplicitPrototypeCycle();\n      if (resolvedRegistry && !cycleDetected) {\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ?\n            getReferencedType() : this;\n      } else if (cycleDetected || !resolveViaProperties(t, enclosing)) {\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n        return this;\n      }\n    } else if (!resolvedRegistry && resolveViaProperties(t, enclosing)) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return isResolved() ? this : registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..671f38e1 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,40 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    boolean resolvedRegistry = resolveViaRegistry(t, enclosing);\n+    boolean cycleDetected = detectImplicitPrototypeCycle();\n \n-    if (resolved) {\n+    if (resolvedRegistry && !cycleDetected) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n       return registry.isLastGeneration() ?\n           getReferencedType() : this;\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+    if (cycleDetected) {\n       handleTypeCycle(t);\n+      resolvedRegistry = resolveViaRegistry(t, enclosing);\n+      cycleDetected = detectImplicitPrototypeCycle();\n+      if (resolvedRegistry && !cycleDetected) {\n+        super.resolveInternal(t, enclosing);\n+        finishPropertyContinuations();\n+        return registry.isLastGeneration() ?\n+            getReferencedType() : this;\n+      } else if (cycleDetected || !resolveViaProperties(t, enclosing)) {\n+        super.resolveInternal(t, enclosing);\n+        finishPropertyContinuations();\n+        return this;\n+      }\n+    } else if (!resolvedRegistry && resolveViaProperties(t, enclosing)) {\n+      super.resolveInternal(t, enclosing);\n+      finishPropertyContinuations();\n+      return isResolved() ? this : registry.isLastGeneration() ?\n+          getReferencedType() : this;\n     }\n \n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    finishPropertyContinuations();\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}