{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    }\n    Separator sep = null;\n    boolean rangeFound = false;\n    int rangeStart = -1;\n    int size = elementPairs.size();\n\n    for (int i = 0; i < size; i++) {\n        if (elementPairs.get(i) instanceof Separator) {\n            sep = (Separator) elementPairs.get(i);\n            rangeStart = i + 1;\n            rangeFound = true;\n            break;\n        }\n    }\n    if (!rangeFound) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n    int rangeEnd = rangeStart;\n    int depth = 1;\n    boolean hasRangePair = false;\n    for (int i = rangeStart; i < size; i++) {\n        Object current = elementPairs.get(i);\n        if (current instanceof Separator) {\n            depth++;\n        } else if (current instanceof PeriodFormatterBuilder) {\n            depth++;\n        } else {\n            depth--;\n            if (depth == 0 && current instanceof PeriodFormatterBuilder.RangeElement) {\n                rangeEnd = i;\n                hasRangePair = true;\n                break;\n            }\n        }\n    }\n    if (!hasRangePair) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n    List<Object> rangeList = new ArrayList<>();\n    for (int i = rangeStart; i <= rangeEnd; i++) {\n        rangeList.add(elementPairs.get(i));\n    }\n    sep = sep.finish(toFormatter(rangeList, false, false).getPrinter(), toFormatter(rangeList, false, false).getParser());\n    List<Object> remains = new ArrayList<>();\n    remains.addAll(elementPairs.subList(0, rangeStart - 1));\n    remains.add(sep);\n    remains.addAll(elementPairs.subList(rangeEnd + 1, size));\n\n    return toFormatter(remains, false, false).withPrefix(toFormatter(rangeList, true, false)).withSuffix(toFormatter(rangeList, false, true));\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..96402634 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,65 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    }\n+    Separator sep = null;\n+    boolean rangeFound = false;\n+    int rangeStart = -1;\n+    int size = elementPairs.size();\n+\n+    for (int i = 0; i < size; i++) {\n+        if (elementPairs.get(i) instanceof Separator) {\n+            sep = (Separator) elementPairs.get(i);\n+            rangeStart = i + 1;\n+            rangeFound = true;\n+            break;\n+        }\n+    }\n+    if (!rangeFound) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+    int rangeEnd = rangeStart;\n+    int depth = 1;\n+    boolean hasRangePair = false;\n+    for (int i = rangeStart; i < size; i++) {\n+        Object current = elementPairs.get(i);\n+        if (current instanceof Separator) {\n+            depth++;\n+        } else if (current instanceof PeriodFormatterBuilder) {\n+            depth++;\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            depth--;\n+            if (depth == 0 && current instanceof PeriodFormatterBuilder.RangeElement) {\n+                rangeEnd = i;\n+                hasRangePair = true;\n+                break;\n+            }\n         }\n     }\n+    if (!hasRangePair) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+    List<Object> rangeList = new ArrayList<>();\n+    for (int i = rangeStart; i <= rangeEnd; i++) {\n+        rangeList.add(elementPairs.get(i));\n+    }\n+    sep = sep.finish(toFormatter(rangeList, false, false).getPrinter(), toFormatter(rangeList, false, false).getParser());\n+    List<Object> remains = new ArrayList<>();\n+    remains.addAll(elementPairs.subList(0, rangeStart - 1));\n+    remains.add(sep);\n+    remains.addAll(elementPairs.subList(rangeEnd + 1, size));\n+\n+    return toFormatter(remains, false, false).withPrefix(toFormatter(rangeList, true, false)).withSuffix(toFormatter(rangeList, false, true));\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}