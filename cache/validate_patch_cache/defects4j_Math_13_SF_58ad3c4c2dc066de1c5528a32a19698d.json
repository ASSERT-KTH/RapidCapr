{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int blockSize = 1000;\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(blockSize);\n    RealMatrix sqrt = new Array2DRowRealMatrix(n, n);\n    for (int i = 0; i < n; i += blockSize) {\n        int end = Math.min(i + blockSize, n);\n        RealMatrix submatrix = m.getSubMatrix(i, end - 1, i, end - 1);\n        EigenDecomposition subDec = dec.decompose(submatrix);\n        RealMatrix subSqrt = subDec.getSquareRoot();\n        sqrt.setSubMatrix(subSqrt.getData(), i, i);\n    }\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a3e8bf6c2 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int blockSize = 1000;\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(blockSize);\n+    RealMatrix sqrt = new Array2DRowRealMatrix(n, n);\n+    for (int i = 0; i < n; i += blockSize) {\n+        int end = Math.min(i + blockSize, n);\n+        RealMatrix submatrix = m.getSubMatrix(i, end - 1, i, end - 1);\n+        EigenDecomposition subDec = dec.decompose(submatrix);\n+        RealMatrix subSqrt = subDec.getSquareRoot();\n+        sqrt.setSubMatrix(subSqrt.getData(), i, i);\n     }\n+    return sqrt;\n+}\n }",
    "result_reason": "error: no suitable constructor found for EigenDecomposition(int)",
    "test_result": "ERROR"
}