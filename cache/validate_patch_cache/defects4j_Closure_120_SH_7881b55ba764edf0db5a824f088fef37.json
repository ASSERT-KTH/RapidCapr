{
    "patch": "        if (block.isFunction) {\n          // Look for a reassignment to the variable.\n          boolean seenAssignment = false;\n          for (Reference reference : block.getReferences()) {\n            if (reference == ref) {\n              seenAssignment = true;\n            } else if (seenAssignment && reference.isDeclaration()) {\n              // Another assignment was found later in the function, so this\n              // variable is assigned more than once.\n              return false;\n            } else if (seenAssignment && reference.isAssignmentTo()) {\n              // Another assignment was found later in the block, so this\n              // variable is assigned more than once.\n              return false;\n            }\n          }\n          break;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..444b4694 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,24 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          // Look for a reassignment to the variable.\n+          boolean seenAssignment = false;\n+          for (Reference reference : block.getReferences()) {\n+            if (reference == ref) {\n+              seenAssignment = true;\n+            } else if (seenAssignment && reference.isDeclaration()) {\n+              // Another assignment was found later in the function, so this\n+              // variable is assigned more than once.\n+              return false;\n+            } else if (seenAssignment && reference.isAssignmentTo()) {\n+              // Another assignment was found later in the block, so this\n+              // variable is assigned more than once.\n+              return false;\n+            }\n+          }\n+          break;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}