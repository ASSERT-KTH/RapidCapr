{
    "patch": "            // alter base year for parsing if first field is weekyear\n            if (savedFields[0].iField.getType() == DateTimeFieldType.weekyear()) {\n                int year = savedFields[0].iValue;\n                int weekOfWeekyear = 0;\n                if (count > 1 && savedFields[1].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {\n                    weekOfWeekyear = savedFields[1].iValue;\n                }\n                millis = iChrono.yearOfWeekyear().set(0, year, weekOfWeekyear);\n                savedFields[0].iField = DateTimeFieldType.year();\n                savedFields[0].iValue = millis / DateTimeConstants.MILLIS_PER_SECOND;\n                count -= 1;\n                System.arraycopy(savedFields, 1, savedFields, 0, count);\n                // we have to sort the array here as moving the week fields down\n                // may have moved an upper field to a lower index position\n                sort(savedFields, count);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..07a3e62b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,22 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            // alter base year for parsing if first field is weekyear\n+            if (savedFields[0].iField.getType() == DateTimeFieldType.weekyear()) {\n+                int year = savedFields[0].iValue;\n+                int weekOfWeekyear = 0;\n+                if (count > 1 && savedFields[1].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {\n+                    weekOfWeekyear = savedFields[1].iValue;\n+                }\n+                millis = iChrono.yearOfWeekyear().set(0, year, weekOfWeekyear);\n+                savedFields[0].iField = DateTimeFieldType.year();\n+                savedFields[0].iValue = millis / DateTimeConstants.MILLIS_PER_SECOND;\n+                count -= 1;\n+                System.arraycopy(savedFields, 1, savedFields, 0, count);\n+                // we have to sort the array here as moving the week fields down\n+                // may have moved an upper field to a lower index position\n+                sort(savedFields, count);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}