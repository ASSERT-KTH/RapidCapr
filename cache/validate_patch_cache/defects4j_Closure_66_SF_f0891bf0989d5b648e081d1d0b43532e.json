{
    "patch": "public double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<List<Item>>(){}.getType();\n    List<Item> items = gson.fromJson(json, type);\n\n    int total = 0;\n    int typed = 0;\n\n    for (Item item : items) {\n        total++;\n        if (item.getType() != null) {\n            typed++;\n        }\n    }\n\n    if (total == 0) {\n        return 0;\n    } else {\n        return ((double) typed / total) * 100.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..24f7f6b9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<List<Item>>(){}.getType();\n+    List<Item> items = gson.fromJson(json, type);\n+\n+    int total = 0;\n+    int typed = 0;\n+\n+    for (Item item : items) {\n+        total++;\n+        if (item.getType() != null) {\n+            typed++;\n+        }\n+    }\n+\n+    if (total == 0) {\n+        return 0;\n+    } else {\n+        return ((double) typed / total) * 100.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}