{
    "patch": "JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosing, boolean useRegistry) {\n    JSType resolvedType = null;\n    if (useRegistry) {\n        resolvedType = resolveViaRegistry(errorReporter, enclosing);\n    } else {\n        resolvedType = resolveViaProperties(errorReporter, enclosing);\n    }\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(errorReporter);\n    }\n    if (resolvedType != null) {\n        super.resolveInternal(errorReporter, enclosing);\n        finishPropertyContinuations();\n        return getReferencedType();\n    }\n    if (isResolved()) {\n        super.resolveInternal(errorReporter, enclosing);\n        finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ? getReferencedType() : this;\n}\n\nJSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosing) {\n    boolean useRegistry = true;\n    JSType resolvedType = null;\n    int maxTraversals = 10;\n    while (resolvedType == null && maxTraversals > 0) {\n        resolvedType = resolveInternal(errorReporter, enclosing, useRegistry);\n        useRegistry = !useRegistry;\n        maxTraversals--;\n    }\n    return resolvedType;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..724d1bc3 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,39 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosing, boolean useRegistry) {\n+    JSType resolvedType = null;\n+    if (useRegistry) {\n+        resolvedType = resolveViaRegistry(errorReporter, enclosing);\n+    } else {\n+        resolvedType = resolveViaProperties(errorReporter, enclosing);\n+    }\n     if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+        handleTypeCycle(errorReporter);\n     }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    if (resolvedType != null) {\n+        super.resolveInternal(errorReporter, enclosing);\n+        finishPropertyContinuations();\n+        return getReferencedType();\n     }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    if (isResolved()) {\n+        super.resolveInternal(errorReporter, enclosing);\n+        finishPropertyContinuations();\n     }\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosing) {\n+    boolean useRegistry = true;\n+    JSType resolvedType = null;\n+    int maxTraversals = 10;\n+    while (resolvedType == null && maxTraversals > 0) {\n+        resolvedType = resolveInternal(errorReporter, enclosing, useRegistry);\n+        useRegistry = !useRegistry;\n+        maxTraversals--;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    return resolvedType;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}