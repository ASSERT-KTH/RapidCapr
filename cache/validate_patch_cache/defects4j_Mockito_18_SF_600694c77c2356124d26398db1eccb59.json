{
    "patch": "public Iterable<User> filterUsersByLocation(Iterable<User> users, String location) {\n    List<User> filteredUsers = new ArrayList<>();\n    for (User user : users) {\n        if (location.equals(user.getLocation())) {\n            filteredUsers.add(user);\n        }\n    }\n    return filteredUsers;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..f59fb1cb6 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,15 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public Iterable<User> filterUsersByLocation(Iterable<User> users, String location) {\n+    List<User> filteredUsers = new ArrayList<>();\n+    for (User user : users) {\n+        if (location.equals(user.getLocation())) {\n+            filteredUsers.add(user);\n+        }\n+    }\n+    return filteredUsers;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}