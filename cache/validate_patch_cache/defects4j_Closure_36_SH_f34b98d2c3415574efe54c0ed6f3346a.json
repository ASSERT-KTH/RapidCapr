{
    "patch": "Node callNode = reference.getParent();\nif (reference.getParent().isCall()) {\n  CodingConvention convention = compiler.getCodingConvention();\n  // Bug 2388531: Don't inline subclass definitions into class defining\n  // calls as this confused class removing logic.\n  SubclassRelationship relationship =\n      convention.getClassesDefinedByCall(callNode);\n  if (relationship != null) {\n    return false;\n  }\n\n  Node target = callNode.getFirstChild();\n  Preconditions.checkState(reference.getNode() == target ||\n      (reference.isQualifiedName() && target.isGetProp()));\n  // Do not inline the call if it is a singleton getter\n  // that means a getter method that creates a property on its first call\n  // and uses and returns the same property during all subsequent calls.\n  if (convention.isSingletonGetter(target)) {\n    return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..964f160b 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,27 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+Node callNode = reference.getParent();\n+if (reference.getParent().isCall()) {\n+  CodingConvention convention = compiler.getCodingConvention();\n+  // Bug 2388531: Don't inline subclass definitions into class defining\n+  // calls as this confused class removing logic.\n+  SubclassRelationship relationship =\n+      convention.getClassesDefinedByCall(callNode);\n+  if (relationship != null) {\n+    return false;\n+  }\n+\n+  Node target = callNode.getFirstChild();\n+  Preconditions.checkState(reference.getNode() == target ||\n+      (reference.isQualifiedName() && target.isGetProp()));\n+  // Do not inline the call if it is a singleton getter\n+  // that means a getter method that creates a property on its first call\n+  // and uses and returns the same property during all subsequent calls.\n+  if (convention.isSingletonGetter(target)) {\n+    return false;\n+  }\n+}\n         }\n       }\n ",
    "result_reason": "error: variable callNode is already defined in method canInline(Reference,Reference,Reference)",
    "test_result": "ERROR"
}