{
    "patch": "public static int modp(int n, int p) {\n    if (n < 0 || p <= 0) {\n        throw new IllegalArgumentException(\"n must be non-negative and p must be greater than 0\");\n    }\n    int result = 1;\n    while (n > 0) {\n        if ((n & 1) == 1) {\n            result = (result * 2) % p;\n        }\n        n >>= 1;\n        if (n > 0) {\n            int temp = (2 * temp) % p;\n            if (temp > p / 2) {\n                temp = temp - p;\n            }\n        }  \n    }\n    if (result < 0) {\n        result += p;\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/MODP.java b/src/main/java/humaneval/buggy/MODP.java\nindex a8f7394..3329c13 100644\n--- a/src/main/java/humaneval/buggy/MODP.java\n+++ b/src/main/java/humaneval/buggy/MODP.java\n@@ -13,11 +13,26 @@ package humaneval.buggy;\n 1 */\n \n public class MODP {\n-    public static int modp(int n, int p) {\n-        int result = 1;\n-        for (int i = 0; i < n; i += 1){\n-            result = 2 * result;\n+public static int modp(int n, int p) {\n+    if (n < 0 || p <= 0) {\n+        throw new IllegalArgumentException(\"n must be non-negative and p must be greater than 0\");\n+    }\n+    int result = 1;\n+    while (n > 0) {\n+        if ((n & 1) == 1) {\n+            result = (result * 2) % p;\n         }\n-        return result % p;\n+        n >>= 1;\n+        if (n > 0) {\n+            int temp = (2 * temp) % p;\n+            if (temp > p / 2) {\n+                temp = temp - p;\n+            }\n+        }  \n+    }\n+    if (result < 0) {\n+        result += p;\n     }\n+    return result;\n+}\n }",
    "result_reason": " /tmp/humaneval-MODP/src/main/java/humaneval/buggy/MODP.java:[27,29] variable temp might not have been initialized",
    "test_result": "ERROR"
}