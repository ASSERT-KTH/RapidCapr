{
    "patch": "@Test\npublic void testEscapeRegexNullRegex() {\n    assertEquals(\"\\\\s*+abc\\\\s*+1\\\\[\\\\]\\\\s*+\", escapeRegex(null, \"  abc 1[] \", false).toString());\n}\n\n@Test\npublic void testEscapeRegexNonNullRegex() {\n    StringBuilder regex = new StringBuilder();\n    StringBuilder expected = new StringBuilder(\"\\\\s*+abc\\\\s*+1\\\\[\\\\]\\\\s*+\");\n    assertEquals(expected.toString(), escapeRegex(regex, \"  abc 1[] \", false).toString());\n    assertSame(expected, regex);\n}\n\n@Test\npublic void testEscapeRegexUnquote() {\n    StringBuilder regex = new StringBuilder();\n    assertEquals(\"(abbbc)\", escapeRegex(regex, \"'abbbc'\", true).toString());\n}\n\n@Test\npublic void testEscapeRegex() {\n    assertEquals(\"\\\\s*+\\\\*\\\\?\\\\[\\\\]\\\\{\\\\}\\\\(\\\\)\\\\^\\\\$\\\\+\\\\|\\\\*\\\\?\\\\s*+\", escapeRegex(null, \"*?[ ](){}|.+${}\", false).toString());\n}\n\n@Test\npublic void testEscapeRegexBackslash() {\n    assertEquals(\"\\\\s*+\\\\\\\\a\\\\s*+\", escapeRegex(null, \"\\\\a\", false).toString());\n}\n\n@Test\npublic void testEscapeRegexBackslashQuote() {\n    assertEquals(\"\\\\'\", escapeRegex(null, \"\\\\'\", false).toString());\n}\n\n@Test\npublic void testEscapeRegexBackslashSequence() {\n    assertEquals(\"\\\\s*+\\\\\\\\\\\\\\\\\" + \"a\" + \"\\\\s*+\", escapeRegex(null, \"\\\\\\\\a\", false).toString());\n}\n\n@Test\npublic void testEscapeRegexBackslashQuoteUnquote() {\n    assertEquals(\"(')\", escapeRegex(null, \"\\\\'\", true).toString());\n}\n\n@Test\npublic void testEscapeRegexTrailingWhiteSpace() {\n    assertEquals(\"\\\\s*+abc\\\\s*+\", escapeRegex(null, \" abc \", false).toString());\n}\n\n@Test\npublic void testEscapeRegexNonTrailingWhiteSpace() {\n    assertEquals(\"\\\\s*+abc\\\\s*+def\\\\s*+\", escapeRegex(null, \" abc def \", false).toString());\n}\n\n@Test\npublic void testEscapeRegexSquareBracketsUnquote() {\n    assertEquals(\"\\\\[\\\\]\", escapeRegex(null, \"'[]'\", true).toString());\n}\n\n@Test\npublic void testEscapeRegexSquareBrackets() {\n    assertEquals(\"\\\\s*+\\\\[\\\\]\\\\s*+\", escapeRegex(null, \" [] \", false).toString());\n}\n\n@Test\npublic void testEscapeRegexWithNonWhitespaceStartAndEnd() {\n    assertEquals(\"\\\\s*+abc\\\\s*+\", escapeRegex(null, \"abc\", false).toString());\n}\n\n@Test\npublic void testEscapeRegexWithoutNonWhitespaceStartAndEnd() {\n    assertEquals(\"\\\\s*+abc\\\\s*+\", escapeRegex(null, \" abc \", false).toString());\n}\n\n@Test\npublic void testEscapeRegexMultilineString() {\n    String inputString = \"line1 \\nline2\\n\\nline3\\n\";\n    String expectedRegex = \"\\\\s*+line1 \\\\nline2\\\\n\\\\nline3\\\\n\\\\s*+\";\n    assertEquals(expectedRegex, escapeRegex(null, inputString, false).toString());\n}\n\n@Test\npublic void testEscapeRegexLANG_831() {\n    String expected = \"\\\\s*+\\\\d+\\\\s*+[.,]?\\\\s*+\\\\d*\\\\s*+\";\n    String regex = escapeRegex(null, \"20.5\", false).toString();\n    assertTrue(regex, Pattern.compile(regex).matcher(\"20.5\").matches());\n    assertEquals(expected, regex);\n    regex = escapeRegex(null, \"20\", false).toString();\n    assertTrue(regex, Pattern.compile(regex).matcher(\"20\").matches());\n    assertEquals(expected, regex);\n}\n\n@Test\npublic void testEscapeRegexNonCapture() {\n    assertEquals(\"(abc)\", escapeRegex(null, \"abc\", true).toString());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..485a0c09 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,102 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n-        }\n-        return regex;\n-    }\n+@Test\n+public void testEscapeRegexNullRegex() {\n+    assertEquals(\"\\\\s*+abc\\\\s*+1\\\\[\\\\]\\\\s*+\", escapeRegex(null, \"  abc 1[] \", false).toString());\n+}\n+\n+@Test\n+public void testEscapeRegexNonNullRegex() {\n+    StringBuilder regex = new StringBuilder();\n+    StringBuilder expected = new StringBuilder(\"\\\\s*+abc\\\\s*+1\\\\[\\\\]\\\\s*+\");\n+    assertEquals(expected.toString(), escapeRegex(regex, \"  abc 1[] \", false).toString());\n+    assertSame(expected, regex);\n+}\n+\n+@Test\n+public void testEscapeRegexUnquote() {\n+    StringBuilder regex = new StringBuilder();\n+    assertEquals(\"(abbbc)\", escapeRegex(regex, \"'abbbc'\", true).toString());\n+}\n+\n+@Test\n+public void testEscapeRegex() {\n+    assertEquals(\"\\\\s*+\\\\*\\\\?\\\\[\\\\]\\\\{\\\\}\\\\(\\\\)\\\\^\\\\$\\\\+\\\\|\\\\*\\\\?\\\\s*+\", escapeRegex(null, \"*?[ ](){}|.+${}\", false).toString());\n+}\n+\n+@Test\n+public void testEscapeRegexBackslash() {\n+    assertEquals(\"\\\\s*+\\\\\\\\a\\\\s*+\", escapeRegex(null, \"\\\\a\", false).toString());\n+}\n+\n+@Test\n+public void testEscapeRegexBackslashQuote() {\n+    assertEquals(\"\\\\'\", escapeRegex(null, \"\\\\'\", false).toString());\n+}\n+\n+@Test\n+public void testEscapeRegexBackslashSequence() {\n+    assertEquals(\"\\\\s*+\\\\\\\\\\\\\\\\\" + \"a\" + \"\\\\s*+\", escapeRegex(null, \"\\\\\\\\a\", false).toString());\n+}\n+\n+@Test\n+public void testEscapeRegexBackslashQuoteUnquote() {\n+    assertEquals(\"(')\", escapeRegex(null, \"\\\\'\", true).toString());\n+}\n+\n+@Test\n+public void testEscapeRegexTrailingWhiteSpace() {\n+    assertEquals(\"\\\\s*+abc\\\\s*+\", escapeRegex(null, \" abc \", false).toString());\n+}\n+\n+@Test\n+public void testEscapeRegexNonTrailingWhiteSpace() {\n+    assertEquals(\"\\\\s*+abc\\\\s*+def\\\\s*+\", escapeRegex(null, \" abc def \", false).toString());\n+}\n+\n+@Test\n+public void testEscapeRegexSquareBracketsUnquote() {\n+    assertEquals(\"\\\\[\\\\]\", escapeRegex(null, \"'[]'\", true).toString());\n+}\n+\n+@Test\n+public void testEscapeRegexSquareBrackets() {\n+    assertEquals(\"\\\\s*+\\\\[\\\\]\\\\s*+\", escapeRegex(null, \" [] \", false).toString());\n+}\n+\n+@Test\n+public void testEscapeRegexWithNonWhitespaceStartAndEnd() {\n+    assertEquals(\"\\\\s*+abc\\\\s*+\", escapeRegex(null, \"abc\", false).toString());\n+}\n+\n+@Test\n+public void testEscapeRegexWithoutNonWhitespaceStartAndEnd() {\n+    assertEquals(\"\\\\s*+abc\\\\s*+\", escapeRegex(null, \" abc \", false).toString());\n+}\n+\n+@Test\n+public void testEscapeRegexMultilineString() {\n+    String inputString = \"line1 \\nline2\\n\\nline3\\n\";\n+    String expectedRegex = \"\\\\s*+line1 \\\\nline2\\\\n\\\\nline3\\\\n\\\\s*+\";\n+    assertEquals(expectedRegex, escapeRegex(null, inputString, false).toString());\n+}\n+\n+@Test\n+public void testEscapeRegexLANG_831() {\n+    String expected = \"\\\\s*+\\\\d+\\\\s*+[.,]?\\\\s*+\\\\d*\\\\s*+\";\n+    String regex = escapeRegex(null, \"20.5\", false).toString();\n+    assertTrue(regex, Pattern.compile(regex).matcher(\"20.5\").matches());\n+    assertEquals(expected, regex);\n+    regex = escapeRegex(null, \"20\", false).toString();\n+    assertTrue(regex, Pattern.compile(regex).matcher(\"20\").matches());\n+    assertEquals(expected, regex);\n+}\n+\n+@Test\n+public void testEscapeRegexNonCapture() {\n+    assertEquals(\"(abc)\", escapeRegex(null, \"abc\", true).toString());\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}