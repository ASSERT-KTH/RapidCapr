{
    "patch": "public <T> void resetMock(T mock) {\n    Factory factory = null;\n    if (mock instanceof Factory) {\n        factory = (Factory) mock;\n    } else {\n        try {\n            // Use reflection to access the underlying CGLib factory object\n            Method getCallbacks = mock.getClass().getDeclaredMethod(\"getCallbacks\");\n            Callback[] callbacks = (Callback[]) getCallbacks.invoke(mock);\n            for (Callback callback : callbacks) {\n                if (callback instanceof Factory) {\n                    factory = (Factory) callback;\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to access CGLib factory\", e);\n        }\n    }\n    MethodInterceptorFilter filter = (MethodInterceptorFilter) factory.getCallback(0);\n    MockHandler<T> mockHandler = (MockHandler<T>) filter.getDelegate();\n    MockHandler<T> newMockHandler = new MockHandler<>(mockHandler.getSettings());\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, filter.getDefaultAnswer());\n    factory.setCallback(0, newFilter);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..1032adc93 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,32 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    Factory factory = null;\n+    if (mock instanceof Factory) {\n+        factory = (Factory) mock;\n+    } else {\n+        try {\n+            // Use reflection to access the underlying CGLib factory object\n+            Method getCallbacks = mock.getClass().getDeclaredMethod(\"getCallbacks\");\n+            Callback[] callbacks = (Callback[]) getCallbacks.invoke(mock);\n+            for (Callback callback : callbacks) {\n+                if (callback instanceof Factory) {\n+                    factory = (Factory) callback;\n+                    break;\n+                }\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to access CGLib factory\", e);\n+        }\n+    }\n+    MethodInterceptorFilter filter = (MethodInterceptorFilter) factory.getCallback(0);\n+    MockHandler<T> mockHandler = (MockHandler<T>) filter.getDelegate();\n+    MockHandler<T> newMockHandler = new MockHandler<>(mockHandler.getSettings());\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, filter.getDefaultAnswer());\n+    factory.setCallback(0, newFilter);\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}