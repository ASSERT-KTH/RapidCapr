{
    "patch": "        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            //This try-catch block is added to handle the Invalid local datetime string failure\n            //that happens inside the savedField.set() method when savedField.value is -1.\n            try {\n                millis = savedField.set(millis, resetFields);\n                if (millis < 0) {\n                    throw new IllegalFieldValueException(savedField.iField.getType(), Long.valueOf(millis), null, null);\n                }\n            }\n            catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }\n            catch (IllegalArgumentException e) {\n                if (text != null) {\n                    String message = \"Exception parsing \\\"\" + text + \"\\\" at position \" + (savedField.iPosition + savedField.iCharOffset);\n                    throw new IllegalArgumentException(message, e);\n                }\n                throw e;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..ffd8c19e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,30 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            //This try-catch block is added to handle the Invalid local datetime string failure\n+            //that happens inside the savedField.set() method when savedField.value is -1.\n+            try {\n+                millis = savedField.set(millis, resetFields);\n+                if (millis < 0) {\n+                    throw new IllegalFieldValueException(savedField.iField.getType(), Long.valueOf(millis), null, null);\n+                }\n+            }\n+            catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }\n+            catch (IllegalArgumentException e) {\n+                if (text != null) {\n+                    String message = \"Exception parsing \\\"\" + text + \"\\\" at position \" + (savedField.iPosition + savedField.iCharOffset);\n+                    throw new IllegalArgumentException(message, e);\n+                }\n+                throw e;\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}