{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node fnBody = NodeUtil.getFunctionBody(fnNode);\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // FUNCTIONS CALLED VIA 'CALL' AND 'APPLY' HAVE A THIS-OBJECT AS\n    // THE FIRST PARAMETER, BUT THIS IS NOT PART OF THE CALLED FUNCTION'S\n    // PARAMETER LIST.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode), callNode);\n      }\n    }\n\n    // FUNCTION NODE -> PARAM NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      String paramName = null;\n      // FOR EVERY CALL ARGUMENT CHECK FOR SIDE-EFFECTS, EVEN IF THERE\n      // ISN'T A NAMED PARAMETER TO MATCH.\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n\n      // FOR EACH NAMED PARAMETER CHECK IF A MUTABLE ARGUMENT IS USED MORE THAN ONCE.\n      if (fnParam != null) {\n        if (cArg != null) {\n          // NOTE: UNLIKE BLOCK INLINING, IT IS NOT POSSIBLE THAT A\n          // PARAMETER REFERENCE WILL BE IN A LOOP.\n          if (fnParam.isRest()) {\n            break;\n          }\n          paramName = fnParam.getString();\n        } else {\n          if (!fnParam.isOptionalArg()) {\n            break;\n          }\n        }\n\n        if (paramName != null &&\n            NodeUtil.getNameReferenceCount(fnBody, paramName) > 1 &&\n            NodeUtil.mayEffectMutableState(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n\n        // MOVE TO THE NEXT PARAMETER.\n        fnParam = fnParam.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..a21b8ffb 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,62 +686,66 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+  private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n-\n+    Node fnBody = NodeUtil.getFunctionBody(fnNode);\n \n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n+    // FUNCTIONS CALLED VIA 'CALL' AND 'APPLY' HAVE A THIS-OBJECT AS\n+    // THE FIRST PARAMETER, BUT THIS IS NOT PART OF THE CALLED FUNCTION'S\n+    // PARAMETER LIST.\n     if (!callNode.getFirstChild().isName()) {\n       if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n         if (cArg == null || !cArg.isThis()) {\n           return CanInlineResult.NO;\n         }\n         cArg = cArg.getNext();\n       } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode), callNode);\n       }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+    // FUNCTION NODE -> PARAM NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n+      String paramName = null;\n+      // FOR EVERY CALL ARGUMENT CHECK FOR SIDE-EFFECTS, EVEN IF THERE\n+      // ISN'T A NAMED PARAMETER TO MATCH.\n+      if (cArg != null) {\n+        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+          return CanInlineResult.NO;\n+        }\n+        cArg = cArg.getNext();\n+      }\n+\n+      // FOR EACH NAMED PARAMETER CHECK IF A MUTABLE ARGUMENT IS USED MORE THAN ONCE.\n       if (fnParam != null) {\n         if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n+          // NOTE: UNLIKE BLOCK INLINING, IT IS NOT POSSIBLE THAT A\n+          // PARAMETER REFERENCE WILL BE IN A LOOP.\n+          if (fnParam.isRest()) {\n+            break;\n+          }\n+          paramName = fnParam.getString();\n+        } else {\n+          if (!fnParam.isOptionalArg()) {\n+            break;\n           }\n         }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        if (paramName != null &&\n+            NodeUtil.getNameReferenceCount(fnBody, paramName) > 1 &&\n+            NodeUtil.mayEffectMutableState(cArg, compiler)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n+\n+        // MOVE TO THE NEXT PARAMETER.\n+        fnParam = fnParam.getNext();\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}