{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            int codePoint = Character.codePointAt(input, pos);\n            writeCodePoint(codePoint, out);\n            pos += Character.charCount(codePoint);\n        } else {\n            for (int i = pos; i < pos + consumed; i++) {\n                int codePoint = Character.codePointAt(input, i);\n                writeCodePoint(codePoint, out);\n            }\n            pos += consumed;\n        }\n    }\n}\n\nprivate void writeCodePoint(int codePoint, Writer out) throws IOException {\n    if (codePoint < 0 || codePoint > 0x10FFFF) {\n        throw new IllegalArgumentException(\"Invalid code point: \" + codePoint);\n    }\n    if (codePoint == '\\b') {\n        out.write(\"\\\\b\");\n    } else if (codePoint == '\\n') {\n        out.write(\"\\\\n\");\n    } else if (codePoint == '\\r') {\n        out.write(\"\\\\r\");\n    } else if (codePoint == '\\t') {\n        out.write(\"\\\\t\");\n    } else if (Character.isISOControl(codePoint)) {\n        out.write(\"\\\\u\" + String.format(\"%04x\", codePoint));\n    } else if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\n        out.write(\"\\\\u\" + String.format(\"%04x\", codePoint));\n    } else if (codePoint > 0xFFFF) {\n        out.write(\"\\\\u\" + String.format(\"%04x\", (codePoint >> 16)) + \"\\\\u\" + String.format(\"%04x\", (codePoint & 0xFFFF)));\n    } else {\n        out.write(codePoint);\n    }\n}\n",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..1f5a7cc7 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,54 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int consumed = translate(input, pos, out);\n+        if (consumed == 0) {\n+            int codePoint = Character.codePointAt(input, pos);\n+            writeCodePoint(codePoint, out);\n+            pos += Character.charCount(codePoint);\n+        } else {\n+            for (int i = pos; i < pos + consumed; i++) {\n+                int codePoint = Character.codePointAt(input, i);\n+                writeCodePoint(codePoint, out);\n             }\n+            pos += consumed;\n         }\n     }\n+}\n+\n+private void writeCodePoint(int codePoint, Writer out) throws IOException {\n+    if (codePoint < 0 || codePoint > 0x10FFFF) {\n+        throw new IllegalArgumentException(\"Invalid code point: \" + codePoint);\n+    }\n+    if (codePoint == '\\b') {\n+        out.write(\"\\\\b\");\n+    } else if (codePoint == '\\n') {\n+        out.write(\"\\\\n\");\n+    } else if (codePoint == '\\r') {\n+        out.write(\"\\\\r\");\n+    } else if (codePoint == '\\t') {\n+        out.write(\"\\\\t\");\n+    } else if (Character.isISOControl(codePoint)) {\n+        out.write(\"\\\\u\" + String.format(\"%04x\", codePoint));\n+    } else if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\n+        out.write(\"\\\\u\" + String.format(\"%04x\", codePoint));\n+    } else if (codePoint > 0xFFFF) {\n+        out.write(\"\\\\u\" + String.format(\"%04x\", (codePoint >> 16)) + \"\\\\u\" + String.format(\"%04x\", (codePoint & 0xFFFF)));\n+    } else {\n+        out.write(codePoint);\n+    }\n+}\n+\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "junit.framework.AssertionFailedError: unescape(String) failed: expected '\\n\\ntest\\b\\b' actual '\\n\\n\\\\\\ntest\\b\\b\\\\\\b' expected:<",
    "test_result": "FAIL"
}