{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    ListMultimap<String, Ref> refsByBaseName = collectRefsByBaseName(namespace);\n    Set<Name> candidateNames = collectCandidateNames(namespace, refsByBaseName);\n\n    for (Name name : candidateNames) {\n        if (name.getGlobalSets() == 1 && name.getLocalSets() == 0 && name.getAliasCount() > 0) {\n            // Try to inline nonlocal alias.\n            inlineNonlocalAliasIfPossible(name);\n\n        } else if (name.getGlobalSets() == 1 && name.getLocalSets() == 0 && name.getAliasCount() == 0 &&\n                name.getProps() != null && name.getProps().size() == 1) {\n            // Try to inline local alias.\n            Name prop = Iterables.getOnlyElement(name.getProps());\n            List<Ref> aliasRefs = refsByBaseName.get(prop.getBaseName());\n            if (aliasRefs.size() == 1 && aliasRefs.get(0).getScope().isLocal()) {\n                inlineLocalAliasIfPossible(name, prop, aliasRefs.get(0));\n            }\n\n        } else if (name.getGlobalSets() == 1 && name.getLocalSets() == 0 && name.getAliasCount() == 0 &&\n                name.getProps() == null) {\n            // Try to inline qualified name.\n            inlineQualifiedNameIfPossible(name, refsByBaseName);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..dbad3759 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,31 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n-    while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n-      }\n-\n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+private void inlineAliases(GlobalNamespace namespace) {\n+    ListMultimap<String, Ref> refsByBaseName = collectRefsByBaseName(namespace);\n+    Set<Name> candidateNames = collectCandidateNames(namespace, refsByBaseName);\n+\n+    for (Name name : candidateNames) {\n+        if (name.getGlobalSets() == 1 && name.getLocalSets() == 0 && name.getAliasCount() > 0) {\n+            // Try to inline nonlocal alias.\n+            inlineNonlocalAliasIfPossible(name);\n+\n+        } else if (name.getGlobalSets() == 1 && name.getLocalSets() == 0 && name.getAliasCount() == 0 &&\n+                name.getProps() != null && name.getProps().size() == 1) {\n+            // Try to inline local alias.\n+            Name prop = Iterables.getOnlyElement(name.getProps());\n+            List<Ref> aliasRefs = refsByBaseName.get(prop.getBaseName());\n+            if (aliasRefs.size() == 1 && aliasRefs.get(0).getScope().isLocal()) {\n+                inlineLocalAliasIfPossible(name, prop, aliasRefs.get(0));\n             }\n-          }\n-        }\n-      }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n+        } else if (name.getGlobalSets() == 1 && name.getLocalSets() == 0 && name.getAliasCount() == 0 &&\n+                name.getProps() == null) {\n+            // Try to inline qualified name.\n+            inlineQualifiedNameIfPossible(name, refsByBaseName);\n+        }\n     }\n-  }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}