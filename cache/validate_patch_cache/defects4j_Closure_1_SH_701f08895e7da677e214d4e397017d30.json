{
    "patch": "// Remove any parameters that are not referenced in the function body.\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n\n  boolean modifyCallers = modifyCallSites\n      && callSiteOptimizer.canModifyCallers(function);\n\n  if (!modifyCallers) {\n    Node currArg = argList.getFirstChild();\n\n    while (currArg != null) {\n      Node nextArg = currArg.getNext();\n\n      String paramName = currArg.getString();\n      Var var = fnScope.getVar(paramName);\n\n      if (var == null || !referenced.contains(var)) {\n        // The argument is not used, remove it.\n        argList.removeChild(currArg);\n        compiler.reportCodeChange();\n      }\n\n      currArg = nextArg;\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d9c3e3e1 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,42 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Remove any parameters that are not referenced in the function body.\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  Node function = fnScope.getRootNode();\n+  Preconditions.checkState(function.isFunction());\n+\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+\n+  boolean modifyCallers = modifyCallSites\n+      && callSiteOptimizer.canModifyCallers(function);\n+\n+  if (!modifyCallers) {\n+    Node currArg = argList.getFirstChild();\n+\n+    while (currArg != null) {\n+      Node nextArg = currArg.getNext();\n+\n+      String paramName = currArg.getString();\n+      Var var = fnScope.getVar(paramName);\n+\n+      if (var == null || !referenced.contains(var)) {\n+        // The argument is not used, remove it.\n+        argList.removeChild(currArg);\n+        compiler.reportCodeChange();\n+      }\n+\n+      currArg = nextArg;\n+    }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}