{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex = expanded.getPoint();\n            } else {\n                // accept the reflected simplex\n                simplex = reflected.getPoint();\n            }\n\n            return;\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contracted.getPoint();\n            } else {\n                // shrink the simplex\n                shrink();\n\n            }\n\n        }\n\n        // check convergence\n        final double d1 = original[0].getValue();\n        final double[] xSmallest = simplex[0].getPoint();\n        double[] xBiggest = xSmallest.clone();\n        for (int i = 1; i < simplex.length; i++) {\n            final double[] xi = simplex[i].getPoint();\n            for (int j = 0; j < getDimension(); j++) {\n                xSmallest[j] += xi[j];\n                xBiggest[j] += xi[j] * xi[j];\n            }\n            final double yi = simplex[i].getValue();\n            if (Double.compare(yi, d1) < 0) {\n                // the newly found point is better than the previous best\n                d1 = yi;\n            }\n        }\n        final double scaling = 1.0 / getDimension();\n        for (int j = 0; j < getDimension(); j++) {\n            xSmallest[j] *= scaling;\n            xBiggest[j] = xBiggest[j] * scaling - xSmallest[j] * xSmallest[j];\n        }\n        final double[] stddev = new double[getDimension()];\n        for (int i = 0; i < simplex.length; i++) {\n            final double[] x = simplex[i].getPoint();\n            for (int j = 0; j < getDimension(); j++) {\n                final double delta = x[j] - xSmallest[j];\n                stddev[j] += delta * delta;\n            }\n        }\n        for (int j = 0; j < getDimension(); j++) {\n            stddev[j] = Math.sqrt(stddev[j] * scaling);\n        }\n        final double y = simplex[0].getValue();\n        boolean converged = true;\n        for (int i = 1; i < simplex.length; i++) {\n            if (Math.abs(simplex[i].getValue() - y) > functionValueAccuracy) {\n                converged = false;\n                break;\n            }\n        }\n        if (converged) {\n            if (isMinimizing() ? (y >= getCostRelativeTolerance() * Math.abs(d1))\n                    : (y <= getCostRelativeTolerance() * d1)) {\n                setResult(new RealPointValuePair(xSmallest, y));\n                return;\n            }\n        }\n\n        if (getIterations() >= getMaxIterations()) {\n            throw new OptimizationException(LocalizedFormats.OPTIMIZATION_ITERATIONS_EXCEEDED,\n                    getMaxIterations());\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..8ffaab435 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,103 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                // accept the expanded simplex\n+                simplex = expanded.getPoint();\n+            } else {\n+                // accept the reflected simplex\n+                simplex = reflected.getPoint();\n+            }\n \n-                return;\n+            return;\n \n-            }\n+        } else {\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = contracted.getPoint();\n+            } else {\n+                // shrink the simplex\n+                shrink();\n \n-            // check convergence\n-                return;\n             }\n \n         }\n \n+        // check convergence\n+        final double d1 = original[0].getValue();\n+        final double[] xSmallest = simplex[0].getPoint();\n+        double[] xBiggest = xSmallest.clone();\n+        for (int i = 1; i < simplex.length; i++) {\n+            final double[] xi = simplex[i].getPoint();\n+            for (int j = 0; j < getDimension(); j++) {\n+                xSmallest[j] += xi[j];\n+                xBiggest[j] += xi[j] * xi[j];\n+            }\n+            final double yi = simplex[i].getValue();\n+            if (Double.compare(yi, d1) < 0) {\n+                // the newly found point is better than the previous best\n+                d1 = yi;\n+            }\n+        }\n+        final double scaling = 1.0 / getDimension();\n+        for (int j = 0; j < getDimension(); j++) {\n+            xSmallest[j] *= scaling;\n+            xBiggest[j] = xBiggest[j] * scaling - xSmallest[j] * xSmallest[j];\n+        }\n+        final double[] stddev = new double[getDimension()];\n+        for (int i = 0; i < simplex.length; i++) {\n+            final double[] x = simplex[i].getPoint();\n+            for (int j = 0; j < getDimension(); j++) {\n+                final double delta = x[j] - xSmallest[j];\n+                stddev[j] += delta * delta;\n+            }\n+        }\n+        for (int j = 0; j < getDimension(); j++) {\n+            stddev[j] = Math.sqrt(stddev[j] * scaling);\n+        }\n+        final double y = simplex[0].getValue();\n+        boolean converged = true;\n+        for (int i = 1; i < simplex.length; i++) {\n+            if (Math.abs(simplex[i].getValue() - y) > functionValueAccuracy) {\n+                converged = false;\n+                break;\n+            }\n+        }\n+        if (converged) {\n+            if (isMinimizing() ? (y >= getCostRelativeTolerance() * Math.abs(d1))\n+                    : (y <= getCostRelativeTolerance() * d1)) {\n+                setResult(new RealPointValuePair(xSmallest, y));\n+                return;\n+            }\n+        }\n+\n+        if (getIterations() >= getMaxIterations()) {\n+            throw new OptimizationException(LocalizedFormats.OPTIMIZATION_ITERATIONS_EXCEEDED,\n+                    getMaxIterations());\n+        }\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}