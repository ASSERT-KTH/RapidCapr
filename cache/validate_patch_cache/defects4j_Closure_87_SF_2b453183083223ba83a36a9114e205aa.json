{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n\n        if (NodeUtil.isExpressionNode(maybeExpr) &&\n            !NodeUtil.isFunctionExpression(maybeExpr) &&\n            maybeExpr.getType() != Token.OBJECTLIT &&\n            maybeExpr.getType() != Token.FUNCTION &&\n            maybeExpr.getType() != Token.REGEXP) {\n\n          Node parent = n.getParent();\n          if (parent.getType() == Token.EXPR_RESULT) {\n            Node grandparent = parent.getParent();\n            if (grandparent == null ||\n                grandparent.getType() != Token.IF ||\n                grandparent.getChildCount() > 2 ||\n                parent.getNext() != null) {\n              Node stmt = parent.getFirstChild();\n              if (stmt.getType() == Token.CALL) {\n                Node target = stmt.getFirstChild();\n                if (target.getType() == Token.GETPROP) {\n                  Node method = target.getLastChild();\n                  if (method.getType() == Token.STRING) {\n                    String methodName = method.getString();\n                    if (methodName.equals(\"apply\") || methodName.equals(\"call\")) {\n                      return false;\n                    }\n                  }\n                }\n              }\n\n              return true;\n            }\n          }\n        }\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..7b582db8 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,45 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n \n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n+        if (NodeUtil.isExpressionNode(maybeExpr) &&\n+            !NodeUtil.isFunctionExpression(maybeExpr) &&\n+            maybeExpr.getType() != Token.OBJECTLIT &&\n+            maybeExpr.getType() != Token.FUNCTION &&\n+            maybeExpr.getType() != Token.REGEXP) {\n+\n+          Node parent = n.getParent();\n+          if (parent.getType() == Token.EXPR_RESULT) {\n+            Node grandparent = parent.getParent();\n+            if (grandparent == null ||\n+                grandparent.getType() != Token.IF ||\n+                grandparent.getChildCount() > 2 ||\n+                parent.getNext() != null) {\n+              Node stmt = parent.getFirstChild();\n+              if (stmt.getType() == Token.CALL) {\n+                Node target = stmt.getFirstChild();\n+                if (target.getType() == Token.GETPROP) {\n+                  Node method = target.getLastChild();\n+                  if (method.getType() == Token.STRING) {\n+                    String methodName = method.getString();\n+                    if (methodName.equals(\"apply\") || methodName.equals(\"call\")) {\n+                      return false;\n+                    }\n+                  }\n+                }\n+              }\n \n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+              return true;\n+            }\n+          }\n+        }\n     }\n \n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}