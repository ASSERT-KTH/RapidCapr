{
    "patch": "            Type actualTypeArgument;\n            if (typeVariable instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) typeVariable;\n                Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n                for (int i = 0; i < actualTypeArguments.length; i++) {\n                    Type actualType = actualTypeArguments[i];\n                    TypeVariable<?>[] typeVariables = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n                    if (typeVariables[i].getName().equals(typeVariable.getTypeName())) {\n                        actualTypeArgument = actualType;\n                        registerTypeVariablesOn(actualTypeArgument);\n                        return;\n                    }\n                }\n            } else {\n                actualTypeArgument = typeVariable;\n                registerTypeVariablesOn(actualTypeArgument);\n            }\n        }    ",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..b13733319 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,29 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+            Type actualTypeArgument;\n+            if (typeVariable instanceof ParameterizedType) {\n+                ParameterizedType parameterizedType = (ParameterizedType) typeVariable;\n+                Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+                for (int i = 0; i < actualTypeArguments.length; i++) {\n+                    Type actualType = actualTypeArguments[i];\n+                    TypeVariable<?>[] typeVariables = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+                    if (typeVariables[i].getName().equals(typeVariable.getTypeName())) {\n+                        actualTypeArgument = actualType;\n+                        registerTypeVariablesOn(actualTypeArgument);\n+                        return;\n+                    }\n+                }\n+            } else {\n+                actualTypeArgument = typeVariable;\n+                registerTypeVariablesOn(actualTypeArgument);\n+            }\n+        }    \n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}