{
    "patch": "    Node fnRoot = fnScope.getRootNode();\n    if (NodeUtil.isGetOrSetKey(fnRoot.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(fnRoot);\n    List<Node> unusedArgs = new ArrayList<>();\n\n    Node currArg = argList.getFirstChild();\n    int argsToRemove = 0;\n\n    while (currArg != null) {\n      String argName = currArg.getString();\n      if (!referenced.contains(fnScope.getVar(argName))) {\n        // Remove this arg, and add it to the list of unused args.\n        unusedArgs.add(currArg);\n        argsToRemove++;\n\n        if (modifyCallSites) {\n          callSiteOptimizer.removeCallerArg(fnScope, argName);\n        }\n      } else if (argsToRemove > 0) {\n        // This is a referenced arg and we previously found some unused args.\n        // That means we need to remove those unused args before this arg.\n        for (int i = 0; i < argsToRemove; i++) {\n          argList.removeChild(unusedArgs.get(i));\n        }\n        argsToRemove = 0;\n        unusedArgs.clear();\n      }\n      currArg = currArg.getNext();\n    }\n\n    // Remove any unused args at the end of the arg list.\n    for (int i = 0; i < argsToRemove; i++) {\n      argList.removeChild(unusedArgs.get(i));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8137bb33 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,43 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node fnRoot = fnScope.getRootNode();\n+    if (NodeUtil.isGetOrSetKey(fnRoot.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(fnRoot);\n+    List<Node> unusedArgs = new ArrayList<>();\n+\n+    Node currArg = argList.getFirstChild();\n+    int argsToRemove = 0;\n+\n+    while (currArg != null) {\n+      String argName = currArg.getString();\n+      if (!referenced.contains(fnScope.getVar(argName))) {\n+        // Remove this arg, and add it to the list of unused args.\n+        unusedArgs.add(currArg);\n+        argsToRemove++;\n+\n+        if (modifyCallSites) {\n+          callSiteOptimizer.removeCallerArg(fnScope, argName);\n+        }\n+      } else if (argsToRemove > 0) {\n+        // This is a referenced arg and we previously found some unused args.\n+        // That means we need to remove those unused args before this arg.\n+        for (int i = 0; i < argsToRemove; i++) {\n+          argList.removeChild(unusedArgs.get(i));\n+        }\n+        argsToRemove = 0;\n+        unusedArgs.clear();\n+      }\n+      currArg = currArg.getNext();\n+    }\n+\n+    // Remove any unused args at the end of the arg list.\n+    for (int i = 0; i < argsToRemove; i++) {\n+      argList.removeChild(unusedArgs.get(i));\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}