{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int len = str.length();\n    final int searchLen = searchChars.length;\n    final int csLen = len + searchLen;\n    final char[] chars = new char[csLen];\n    str.getChars(0, len, chars, 0);\n    System.arraycopy(searchChars, 0, chars, len, searchLen);\n    final boolean[] contains = new boolean[Character.MAX_VALUE];\n    for (int i = 0; i < csLen; i++) {\n        contains[chars[i]] = true;\n    }\n    for (int i = 0; i < searchLen; i++) {\n        if (Character.isHighSurrogate(searchChars[i])) {\n            if (i < searchLen - 1 && Character.isLowSurrogate(searchChars[i + 1])) {\n                final int codePoint = Character.toCodePoint(searchChars[i], searchChars[i + 1]);\n                if (contains[codePoint]) {\n                    return true;\n                }\n            }\n        } else {\n            if (contains[searchChars[i]]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..3345ddea 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,36 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int len = str.length();\n+    final int searchLen = searchChars.length;\n+    final int csLen = len + searchLen;\n+    final char[] chars = new char[csLen];\n+    str.getChars(0, len, chars, 0);\n+    System.arraycopy(searchChars, 0, chars, len, searchLen);\n+    final boolean[] contains = new boolean[Character.MAX_VALUE];\n+    for (int i = 0; i < csLen; i++) {\n+        contains[chars[i]] = true;\n+    }\n+    for (int i = 0; i < searchLen; i++) {\n+        if (Character.isHighSurrogate(searchChars[i])) {\n+            if (i < searchLen - 1 && Character.isLowSurrogate(searchChars[i + 1])) {\n+                final int codePoint = Character.toCodePoint(searchChars[i], searchChars[i + 1]);\n+                if (contains[codePoint]) {\n+                    return true;\n+                }\n+            }\n+        } else {\n+            if (contains[searchChars[i]]) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}