{
    "patch": "    if (n.getType() == Token.FUNCTION) {\n      if (parent.getType() == Token.NAME || parent.getType() == Token.ASSIGN) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n    }\n    if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n      handleFunctionInputs(parent);\n      return;\n    }\n    if (n.getType() == Token.CATCH) {\n      defineCatch(n, parent);\n      return;\n    }\n    if (n.getType() == Token.VAR || n.getType() == Token.CONST || n.getType() == Token.LET) {\n      defineVar(n, parent);\n      return;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..d9fecafb 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,24 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+    if (n.getType() == Token.FUNCTION) {\n+      if (parent.getType() == Token.NAME || parent.getType() == Token.ASSIGN) {\n+        return;\n       }\n+      defineDeclaredFunction(n, parent);\n+    }\n+    if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+      handleFunctionInputs(parent);\n+      return;\n+    }\n+    if (n.getType() == Token.CATCH) {\n+      defineCatch(n, parent);\n+      return;\n+    }\n+    if (n.getType() == Token.VAR || n.getType() == Token.CONST || n.getType() == Token.LET) {\n+      defineVar(n, parent);\n+      return;\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}