{
    "patch": "    if (token.getType() == JsDocToken.Type.IDENTIFIER) {\n      return parseTypeName(token);\n    } else if (token.getType() == JsDocToken.Type.LBRACKET) {\n      return parseArrayTypeExpression(token);\n    } else {\n      throw new IllegalStateException(\"Unexpected token: \" + token.getType());\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..a80456e0 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,13 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+    if (token.getType() == JsDocToken.Type.IDENTIFIER) {\n+      return parseTypeName(token);\n+    } else if (token.getType() == JsDocToken.Type.LBRACKET) {\n+      return parseArrayTypeExpression(token);\n+    } else {\n+      throw new IllegalStateException(\"Unexpected token: \" + token.getType());\n+    }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}