{
    "patch": "            Object[] captureArgs = invocation.getRawArguments();\n            int startPos = matchers.size() - captureArgs.length;\n            for (int position = 0; position < captureArgs.length; position++) {\n                int index = startPos + position;\n                Matcher m = matchers.get(index);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(captureArgs[position]);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..ae85d7e30 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,15 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object[] captureArgs = invocation.getRawArguments();\n+            int startPos = matchers.size() - captureArgs.length;\n+            for (int position = 0; position < captureArgs.length; position++) {\n+                int index = startPos + position;\n+                Matcher m = matchers.get(index);\n+                if (m instanceof CapturesArguments) {\n+                    ((CapturesArguments) m).captureFrom(captureArgs[position]);\n+                }\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: -1",
    "test_result": "FAIL"
}