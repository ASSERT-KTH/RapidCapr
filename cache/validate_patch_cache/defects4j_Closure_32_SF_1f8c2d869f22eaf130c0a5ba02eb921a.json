{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n    StringBuilder builder = new StringBuilder();\n    boolean ignoreStar = false;\n\n    do {\n        switch (token) {\n            case STAR:\n                if (ignoreStar) {\n                    // Mark the position after the star as the new start of the line.\n                } else {\n                    // The star is part of the comment.\n                    if (builder.length() > 0) {\n                        builder.append(' ');\n                    }\n                    builder.append('*');\n                }\n                token = next();\n                continue;\n\n            case EOL:\n                if (option != WhitespaceOption.SINGLE_LINE) {\n                    builder.append('\\n');\n                }\n                ignoreStar = true;\n                token = next();\n                continue;\n\n            case EOF:\n            case EOC:\n                String multilineText = builder.toString();\n                if (option != WhitespaceOption.PRESERVE) {\n                    multilineText = multilineText.trim();\n                }\n                if (multilineText.endsWith(\"* \")) {\n                    //remove any trailing white space and asterisks\n                    multilineText = multilineText.substring(0, multilineText.length() - 2);\n                }\n                int endLineno = stream.getLineno();\n                int endCharno = stream.getCharno();\n                if (multilineText.length() > 0) {\n                    jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n                }\n                if (multilineText.contains(\"@deprecated\")) {\n                    // Check if the DEPRECATED string is already included in the multiline text\n                    boolean alreadyDeprecated = false;\n                    StringBuilder tempBuilder = new StringBuilder(multilineText);\n                    while (tempBuilder.indexOf(\"@deprecated\") >= 0) {\n                        tempBuilder.delete(tempBuilder.indexOf(\"@deprecated\"), tempBuilder.indexOf(\"@deprecated\") + \"@deprecated\".length());\n                    }\n                    String temp = tempBuilder.toString().trim();\n                    if (temp.endsWith(\"*\") || temp.endsWith(\"*\\n\")) {\n                        temp = temp.substring(0, temp.length()-1).trim();\n                    }\n                    if (temp.endsWith(\"*\")) {\n                        temp = temp.substring(0, temp.length()-1).trim();\n                    }\n                    String[] lines = temp.split(\"\\n\");\n                    for (String line : lines) {\n                        if (line.trim().startsWith(\"* \")) {\n                            line = line.substring(2).trim();\n                        }\n                        if (line.trim().startsWith(\"@deprecated\")) {\n                            alreadyDeprecated = true;\n                            break;\n                        }\n                    }\n                    \n                    if (!alreadyDeprecated) {\n                        // Append the DEPRECATED string to the multiline text\n                        if (option == WhitespaceOption.SINGLE_LINE) {\n                            multilineText += \" @deprecated\";\n                        } else {\n                            multilineText += \"\\n * @deprecated\";\n                        }\n                    }\n                }\n                return new ExtractionInfo(multilineText, token);\n\n            default:\n                ignoreStar = false;\n                if (builder.length() > 0) {\n                    builder.append(' ');\n                }\n                builder.append(toString(token));\n                token = next();\n        }\n    } while (true);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..31abaec1 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,107 +1326,97 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n-\n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n-    }\n-\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n     stream.update();\n     int startLineno = stream.getLineno();\n     int startCharno = stream.getCharno() + 1;\n-\n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n-    if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n-    }\n-\n     StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n-\n-    state = State.SEARCHING_ANNOTATION;\n-    token = next();\n-\n     boolean ignoreStar = false;\n \n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n-\n     do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n-\n-            builder.append('*');\n-          }\n-\n-          token = next();\n-          continue;\n-\n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n-\n-          ignoreStar = true;\n-          token = next();\n-          continue;\n-\n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n-\n-              // All tokens must be separated by a space.\n-\n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n-\n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n-\n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n-\n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n-\n-            return new ExtractionInfo(multilineText, token);\n-          }\n-\n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n-\n-          line = stream.getRemainingJSDocLine();\n-\n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n-\n-          builder.append(line);\n-          token = next();\n-      }\n+        switch (token) {\n+            case STAR:\n+                if (ignoreStar) {\n+                    // Mark the position after the star as the new start of the line.\n+                } else {\n+                    // The star is part of the comment.\n+                    if (builder.length() > 0) {\n+                        builder.append(' ');\n+                    }\n+                    builder.append('*');\n+                }\n+                token = next();\n+                continue;\n+\n+            case EOL:\n+                if (option != WhitespaceOption.SINGLE_LINE) {\n+                    builder.append('\\n');\n+                }\n+                ignoreStar = true;\n+                token = next();\n+                continue;\n+\n+            case EOF:\n+            case EOC:\n+                String multilineText = builder.toString();\n+                if (option != WhitespaceOption.PRESERVE) {\n+                    multilineText = multilineText.trim();\n+                }\n+                if (multilineText.endsWith(\"* \")) {\n+                    //remove any trailing white space and asterisks\n+                    multilineText = multilineText.substring(0, multilineText.length() - 2);\n+                }\n+                int endLineno = stream.getLineno();\n+                int endCharno = stream.getCharno();\n+                if (multilineText.length() > 0) {\n+                    jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n+                }\n+                if (multilineText.contains(\"@deprecated\")) {\n+                    // Check if the DEPRECATED string is already included in the multiline text\n+                    boolean alreadyDeprecated = false;\n+                    StringBuilder tempBuilder = new StringBuilder(multilineText);\n+                    while (tempBuilder.indexOf(\"@deprecated\") >= 0) {\n+                        tempBuilder.delete(tempBuilder.indexOf(\"@deprecated\"), tempBuilder.indexOf(\"@deprecated\") + \"@deprecated\".length());\n+                    }\n+                    String temp = tempBuilder.toString().trim();\n+                    if (temp.endsWith(\"*\") || temp.endsWith(\"*\\n\")) {\n+                        temp = temp.substring(0, temp.length()-1).trim();\n+                    }\n+                    if (temp.endsWith(\"*\")) {\n+                        temp = temp.substring(0, temp.length()-1).trim();\n+                    }\n+                    String[] lines = temp.split(\"\\n\");\n+                    for (String line : lines) {\n+                        if (line.trim().startsWith(\"* \")) {\n+                            line = line.substring(2).trim();\n+                        }\n+                        if (line.trim().startsWith(\"@deprecated\")) {\n+                            alreadyDeprecated = true;\n+                            break;\n+                        }\n+                    }\n+                    \n+                    if (!alreadyDeprecated) {\n+                        // Append the DEPRECATED string to the multiline text\n+                        if (option == WhitespaceOption.SINGLE_LINE) {\n+                            multilineText += \" @deprecated\";\n+                        } else {\n+                            multilineText += \"\\n * @deprecated\";\n+                        }\n+                    }\n+                }\n+                return new ExtractionInfo(multilineText, token);\n+\n+            default:\n+                ignoreStar = false;\n+                if (builder.length() > 0) {\n+                    builder.append(' ');\n+                }\n+                builder.append(toString(token));\n+                token = next();\n+        }\n     } while (true);\n-  }\n+}\n \n \n   /**",
    "result_reason": "junit.framework.AssertionFailedError: Variable f has been deprecated: @deprecated @deprecated",
    "test_result": "FAIL"
}