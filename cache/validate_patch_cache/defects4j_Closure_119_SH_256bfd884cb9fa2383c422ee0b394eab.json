{
    "patch": "              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n                  return;\n                }\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              case Token.REGEXP:\n                return;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                } else {\n                  return;\n                }\n            }\n          }\n          name = n.getString();\n          break;\n        case Token.HOOK:\n          collect(module, scope, n.getFirstChild());\n          collect(module, scope, n.getFirstChild().getNext());\n          collect(module, scope, n.getLastChild());\n          return;\n        default:\n          if (NodeUtil.isExpressionNode(parent)) {\n            return;\n          }\n          name = n.getQualifiedName();\n          if (name == null) {\n            return;\n          }\n          switch (n.getType()) {\n            case Token.TEMPLATELIT:\n              return;\n            case Token.GETPROP:\n              if (parent.getType() == Token.ASSIGN &&\n                  parent.getFirstChild() == n) {\n                    isPropAssign = true;\n              }\n              break;\n          }\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..d0d62502 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,58 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+              case Token.FUNCTION:\n+                Node gramps = parent.getParent();\n+                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n+                  return;\n+                }\n+                isSet = true;\n+                type = Name.Type.FUNCTION;\n+                break;\n+              case Token.INC:\n+              case Token.DEC:\n+                isSet = true;\n+                type = Name.Type.OTHER;\n+                break;\n+              case Token.REGEXP:\n+                return;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                } else {\n+                  return;\n+                }\n+            }\n+          }\n+          name = n.getString();\n+          break;\n+        case Token.HOOK:\n+          collect(module, scope, n.getFirstChild());\n+          collect(module, scope, n.getFirstChild().getNext());\n+          collect(module, scope, n.getLastChild());\n+          return;\n+        default:\n+          if (NodeUtil.isExpressionNode(parent)) {\n+            return;\n+          }\n+          name = n.getQualifiedName();\n+          if (name == null) {\n+            return;\n+          }\n+          switch (n.getType()) {\n+            case Token.TEMPLATELIT:\n+              return;\n+            case Token.GETPROP:\n+              if (parent.getType() == Token.ASSIGN &&\n+                  parent.getFirstChild() == n) {\n+                    isPropAssign = true;\n+              }\n+              break;\n+          }\n+          break;\n+      }\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: orphaned case",
    "test_result": "ERROR"
}