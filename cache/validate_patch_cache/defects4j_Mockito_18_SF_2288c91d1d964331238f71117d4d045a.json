{
    "patch": "public Iterable getValues(ValueHolder values) {\n    if (values == null) {\n        return Collections.EMPTY_LIST;\n    } else {\n        Object value = values.returnValueFor(Object.class);\n        if (value instanceof Iterable) {\n            return (Iterable) value;\n        } else if (value instanceof Object[]) {\n            return Arrays.asList((Object[]) value);\n        } else {\n            return Collections.singletonList(value);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..8fa6e7c15 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,20 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public Iterable getValues(ValueHolder values) {\n+    if (values == null) {\n+        return Collections.EMPTY_LIST;\n+    } else {\n+        Object value = values.returnValueFor(Object.class);\n+        if (value instanceof Iterable) {\n+            return (Iterable) value;\n+        } else if (value instanceof Object[]) {\n+            return Arrays.asList((Object[]) value);\n+        } else {\n+            return Collections.singletonList(value);\n+        }\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}