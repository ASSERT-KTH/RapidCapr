{
    "patch": "Object[] args = invocation.getRawArguments();\nfor (int position = 0; position < matchers.size(); position++) {\n    Matcher m = matchers.get(position);\n    if (m instanceof CapturesArguments) {\n        if (m instanceof VarargMatcher) {\n            Object varargArray = null;\n            Class<?> parameterType = invocation.getMethod().getParameterTypes()[position];\n            if (args.length > position && parameterType.isArray()) {\n                varargArray = args[position];\n            } else if (position == matchers.size() - 1 && args.length == position + 1 && parameterType.isArray()) {\n                varargArray = Array.newInstance(parameterType.getComponentType(), 0);\n            }\n            if (varargArray != null) {\n                for (int i = 0; i < Array.getLength(varargArray); i++) {\n                    Object vararg = Array.get(varargArray, i);\n                    ((CapturesArguments) m).captureFrom(vararg);\n                }\n            }\n        } else {\n            if (position < args.length) {\n                Object arg = args[position];\n                ((CapturesArguments) m).captureFrom(arg);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..288de87a1 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,32 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+Object[] args = invocation.getRawArguments();\n+for (int position = 0; position < matchers.size(); position++) {\n+    Matcher m = matchers.get(position);\n+    if (m instanceof CapturesArguments) {\n+        if (m instanceof VarargMatcher) {\n+            Object varargArray = null;\n+            Class<?> parameterType = invocation.getMethod().getParameterTypes()[position];\n+            if (args.length > position && parameterType.isArray()) {\n+                varargArray = args[position];\n+            } else if (position == matchers.size() - 1 && args.length == position + 1 && parameterType.isArray()) {\n+                varargArray = Array.newInstance(parameterType.getComponentType(), 0);\n+            }\n+            if (varargArray != null) {\n+                for (int i = 0; i < Array.getLength(varargArray); i++) {\n+                    Object vararg = Array.get(varargArray, i);\n+                    ((CapturesArguments) m).captureFrom(vararg);\n+                }\n+            }\n+        } else {\n+            if (position < args.length) {\n+                Object arg = args[position];\n+                ((CapturesArguments) m).captureFrom(arg);\n+            }\n+        }\n+    }\n+}\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}