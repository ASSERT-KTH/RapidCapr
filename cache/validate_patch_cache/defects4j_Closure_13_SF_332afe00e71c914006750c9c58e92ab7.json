{
    "patch": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node) || node.isVisited()) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      node.setVisited(true);\n      Node c = node.getFirstChild();\n      while(c != null) {\n        traverse(c);\n        Node next = c.getNext();\n        c = next;\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many interations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..6b19fc35 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -115,12 +115,13 @@ class PeepholeOptimizationsPass\n     // the entire AST to catch newly created opportunities.\n     // So we track whether a \"unit of code\" has changed,\n     // and revisit immediately.\n-    if (!shouldVisit(node)) {\n+    if (!shouldVisit(node) || node.isVisited()) {\n       return;\n     }\n \n     int visits = 0;\n     do {\n+      node.setVisited(true);\n       Node c = node.getFirstChild();\n       while(c != null) {\n         traverse(c);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}