{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (n.isMemberFunctionDef() &&\n          n.getParent().getLastChild() != n &&\n          n.getNext().isArrayPattern() &&\n          n.getNext().getFirstChild().isName() &&\n          n.getNext().getFirstChild().getString().equals(\"_\")) {\n        return false;\n      }\n      if (NodeUtil.isPrototypeProperty(parent, n)) {\n        return false;\n      }\n      if (parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..8fa1808e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,31 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (n.isMemberFunctionDef() &&\n+          n.getParent().getLastChild() != n &&\n+          n.getNext().isArrayPattern() &&\n+          n.getNext().getFirstChild().isName() &&\n+          n.getNext().getFirstChild().getString().equals(\"_\")) {\n+        return false;\n+      }\n+      if (NodeUtil.isPrototypeProperty(parent, n)) {\n+        return false;\n+      }\n+      if (parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        if (NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}