{
    "patch": "        if (m.getRowDimension() > 300) {\n            final SingularValueDecomposition svdDecomposition = new SingularValueDecomposition(m);\n            final RealMatrix u = svdDecomposition.getU();\n            final RealMatrix s = svdDecomposition.getS();\n            s.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {\n                @Override\n                public double visit(int row, int column, double value) {\n                    return FastMath.sqrt(value);\n                }\n            });\n            return u.multiply(s).multiply(u.transpose());\n        } else {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b04852371 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n+        if (m.getRowDimension() > 300) {\n+            final SingularValueDecomposition svdDecomposition = new SingularValueDecomposition(m);\n+            final RealMatrix u = svdDecomposition.getU();\n+            final RealMatrix s = svdDecomposition.getS();\n+            s.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {\n+                @Override\n+                public double visit(int row, int column, double value) {\n+                    return FastMath.sqrt(value);\n+                }\n+            });\n+            return u.multiply(s).multiply(u.transpose());\n+        } else {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n-    }\n+        }\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}