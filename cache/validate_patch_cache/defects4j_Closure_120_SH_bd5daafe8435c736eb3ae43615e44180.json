{
    "patch": "      if (block.isFunction) {\n        // Check whether there are any other assignments to the variable\n        for (int i = ref.getIndex() + 1; i < references.size(); i++) {\n          Reference assignment = references.get(i);\n          if (assignment.matchesName(ref) && assignment.isAssignmentToName()) {\n            return false;\n          }\n        }\n        return true;\n      } else if (block.isLoop) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..b2e1fd17 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        // Check whether there are any other assignments to the variable\n+        for (int i = ref.getIndex() + 1; i < references.size(); i++) {\n+          Reference assignment = references.get(i);\n+          if (assignment.matchesName(ref) && assignment.isAssignmentToName()) {\n+            return false;\n+          }\n+        }\n+        return true;\n+      } else if (block.isLoop) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}