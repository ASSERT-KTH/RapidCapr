{
    "patch": "protected BasePeriod(long duration) {\n    super();\n    iPeriodType = null;\n    iValues = new int[PERIOD_FIELD_COUNT];\n    setDuration(duration);\n}\n\nprotected void setDuration(long duration) {\n    iValues = new int[PERIOD_FIELD_COUNT];\n    long millis = duration;\n    millis += (duration >= 0 ? 500 : -500);\n    iValues[INDEX_MILLI] = ISOChronology.getInstanceUTC().millisOfDay().get(millis);\n    millis -= iValues[INDEX_MILLI];\n    if (millis != 0) {\n        iValues[INDEX_WEEK] = FieldUtils.safeToInt(millis / DateUtils.MILLIS_PER_WEEK);\n        millis -= (long) iValues[INDEX_WEEK] * DateUtils.MILLIS_PER_WEEK;\n    }\n    if (millis != 0) {\n        iValues[INDEX_DAY] = FieldUtils.safeToInt(millis / DateUtils.MILLIS_PER_DAY);\n        millis -= (long) iValues[INDEX_DAY] * DateUtils.MILLIS_PER_DAY;\n    }\n    if (millis != 0) {\n        iValues[INDEX_HOUR] = FieldUtils.safeToInt(millis / DateUtils.MILLIS_PER_HOUR);\n        millis -= (long) iValues[INDEX_HOUR] * DateUtils.MILLIS_PER_HOUR;\n    }\n    if (millis != 0) {\n        iValues[INDEX_MINUTE] = FieldUtils.safeToInt(millis / DateUtils.MILLIS_PER_MINUTE);\n        millis -= (long) iValues[INDEX_MINUTE] * DateUtils.MILLIS_PER_MINUTE;\n    }\n    if (millis != 0) {\n        iValues[INDEX_SECOND] = FieldUtils.safeToInt(millis / DateUtils.MILLIS_PER_SECOND);\n        millis -= (long) iValues[INDEX_SECOND] * DateUtils.MILLIS_PER_SECOND;\n    }\n    if (millis != 0) {\n        iValues[INDEX_MILLI] = FieldUtils.safeToInt(millis);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..bb154f8b 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,43 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+protected BasePeriod(long duration) {\n+    super();\n+    iPeriodType = null;\n+    iValues = new int[PERIOD_FIELD_COUNT];\n+    setDuration(duration);\n+}\n+\n+protected void setDuration(long duration) {\n+    iValues = new int[PERIOD_FIELD_COUNT];\n+    long millis = duration;\n+    millis += (duration >= 0 ? 500 : -500);\n+    iValues[INDEX_MILLI] = ISOChronology.getInstanceUTC().millisOfDay().get(millis);\n+    millis -= iValues[INDEX_MILLI];\n+    if (millis != 0) {\n+        iValues[INDEX_WEEK] = FieldUtils.safeToInt(millis / DateUtils.MILLIS_PER_WEEK);\n+        millis -= (long) iValues[INDEX_WEEK] * DateUtils.MILLIS_PER_WEEK;\n+    }\n+    if (millis != 0) {\n+        iValues[INDEX_DAY] = FieldUtils.safeToInt(millis / DateUtils.MILLIS_PER_DAY);\n+        millis -= (long) iValues[INDEX_DAY] * DateUtils.MILLIS_PER_DAY;\n+    }\n+    if (millis != 0) {\n+        iValues[INDEX_HOUR] = FieldUtils.safeToInt(millis / DateUtils.MILLIS_PER_HOUR);\n+        millis -= (long) iValues[INDEX_HOUR] * DateUtils.MILLIS_PER_HOUR;\n     }\n+    if (millis != 0) {\n+        iValues[INDEX_MINUTE] = FieldUtils.safeToInt(millis / DateUtils.MILLIS_PER_MINUTE);\n+        millis -= (long) iValues[INDEX_MINUTE] * DateUtils.MILLIS_PER_MINUTE;\n+    }\n+    if (millis != 0) {\n+        iValues[INDEX_SECOND] = FieldUtils.safeToInt(millis / DateUtils.MILLIS_PER_SECOND);\n+        millis -= (long) iValues[INDEX_SECOND] * DateUtils.MILLIS_PER_SECOND;\n+    }\n+    if (millis != 0) {\n+        iValues[INDEX_MILLI] = FieldUtils.safeToInt(millis);\n+    }\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}