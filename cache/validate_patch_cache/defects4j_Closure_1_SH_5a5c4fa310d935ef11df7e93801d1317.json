{
    "patch": "Set<String> referenced = getReferencedVars(fnScope);\nSet<String> removable = Sets.newHashSet(referenced);\n\nfor (Var var : fnScope.getVarIterable(false)) {\n    removable.remove(var.getName());\n}\n\n// Removing arguments breaks getter/setter function's signatures\nif (!NodeUtil.doesFunctionModifyArguments(fnScope.getRootNode())) {\n    Node argList = NodeUtil.getFunctionParameters(fnScope.getRootNode());\n    Node l = argList.getLastChild();\n    while (l != null) {\n        Node n = l;\n        l = l.getPrevious();\n        if (removable.contains(n.getString())) {\n            argList.removeChild(n);\n            compiler.reportCodeChange();\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9350bc34 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,26 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Set<String> referenced = getReferencedVars(fnScope);\n+Set<String> removable = Sets.newHashSet(referenced);\n+\n+for (Var var : fnScope.getVarIterable(false)) {\n+    removable.remove(var.getName());\n+}\n+\n+// Removing arguments breaks getter/setter function's signatures\n+if (!NodeUtil.doesFunctionModifyArguments(fnScope.getRootNode())) {\n+    Node argList = NodeUtil.getFunctionParameters(fnScope.getRootNode());\n+    Node l = argList.getLastChild();\n+    while (l != null) {\n+        Node n = l;\n+        l = l.getPrevious();\n+        if (removable.contains(n.getString())) {\n+            argList.removeChild(n);\n+            compiler.reportCodeChange();\n+        }\n+    }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}