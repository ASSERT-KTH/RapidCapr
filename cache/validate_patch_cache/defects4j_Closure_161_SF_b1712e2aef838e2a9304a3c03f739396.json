{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    if (elem == null) {\n      Node initialElem = NodeUtil.newUndefinedNode(left);\n      for (int i = (int) left.getDouble(); i < intIndex; i++) {\n        Node temp = NodeUtil.newUndefinedNode(left);\n        initialElem.setIsArrayElement(true);\n        initialElem.setJSType(left.getJSType().getElementType());\n        initialElem.addChildAfter(temp, initialElem.getLastChild());\n        initialElem = temp;\n      }\n      Node indexNode = NodeUtil.newNumberNode(intIndex, parent);\n      indexNode.setIsArrayIndex(true);\n      indexNode.setJSType(JSType.NUMBER);\n      initialElem.setIsArrayElement(true);\n      initialElem.setJSType(left.getJSType().getElementType());\n      initialElem.addChildAfter(indexNode, initialElem.getLastChild());\n      left.addChildToBack(initialElem);\n      elem = initialElem;\n    }\n\n    if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..ef26ece1 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1275,7 +1275,7 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n@@ -1305,8 +1305,22 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n \n     if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+      Node initialElem = NodeUtil.newUndefinedNode(left);\n+      for (int i = (int) left.getDouble(); i < intIndex; i++) {\n+        Node temp = NodeUtil.newUndefinedNode(left);\n+        initialElem.setIsArrayElement(true);\n+        initialElem.setJSType(left.getJSType().getElementType());\n+        initialElem.addChildAfter(temp, initialElem.getLastChild());\n+        initialElem = temp;\n+      }\n+      Node indexNode = NodeUtil.newNumberNode(intIndex, parent);\n+      indexNode.setIsArrayIndex(true);\n+      indexNode.setJSType(JSType.NUMBER);\n+      initialElem.setIsArrayElement(true);\n+      initialElem.setJSType(left.getJSType().getElementType());\n+      initialElem.addChildAfter(indexNode, initialElem.getLastChild());\n+      left.addChildToBack(initialElem);\n+      elem = initialElem;\n     }\n \n     if (elem.getType() == Token.EMPTY) {\n@@ -1319,7 +1333,7 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n-  }\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}