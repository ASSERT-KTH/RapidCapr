{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid input argument values\");\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    double p = 0.0;\n    double prevP = Double.NaN;\n    double term = a * Math.log(x) - x - logGamma(a + 1.0);\n    double sum = Math.exp(term);\n\n    for (int n = 1; n < maxIterations; n++) {\n        term += Math.log(x / (a + n));\n        p = sum * term;\n        sum += p;\n\n        if (Math.abs(p / sum - prevP / (sum - p)) < epsilon) {\n            return sum;\n        }\n\n        prevP = p;\n    }\n\n    throw new RuntimeException(\"Maximum number of iterations exceeded\");\n}\n\npublic static double regularizedGammaP(double a, double x) {\n    return regularizedGammaP(a, x, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);\n}\n\nprivate static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + GAMMA_X) - x - GAMMA_X;\n\n    double sum = 0.0;\n    for (int i = 0; i < GAMMA_SERIES.length; i++) {\n        sum += GAMMA_SERIES[i] / (x + (double) i);\n    }\n\n    return tmp + Math.log(GAMMA_SQRT_TWO_PI * sum / x);\n}\n\nprivate static final double GAMMA_X = 2.0;\nprivate static final double[] GAMMA_SERIES = {\n        0.0006784376,\n        -0.0003198361,\n        0.0001247571,\n        -0.0000440825,\n        0.0000149723,\n        -4.497643e-6,\n        1.188146e-6,\n        -2.871446e-7,\n        6.338316e-8,\n        -1.302458e-8,\n        2.528582e-9,\n        -4.715806e-10,\n        8.374166e-11,\n        -1.428491e-11\n};\nprivate static final double GAMMA_SQRT_TWO_PI = Math.sqrt(2.0 * Math.PI);\nprivate static final double DEFAULT_EPSILON = 10e-9;\nprivate static final int DEFAULT_MAX_ITERATIONS = 100000;",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..7df6cb692 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,70 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid input argument values\");\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    double p = 0.0;\n+    double prevP = Double.NaN;\n+    double term = a * Math.log(x) - x - logGamma(a + 1.0);\n+    double sum = Math.exp(term);\n+\n+    for (int n = 1; n < maxIterations; n++) {\n+        term += Math.log(x / (a + n));\n+        p = sum * term;\n+        sum += p;\n+\n+        if (Math.abs(p / sum - prevP / (sum - p)) < epsilon) {\n+            return sum;\n+        }\n+\n+        prevP = p;\n+    }\n+\n+    throw new RuntimeException(\"Maximum number of iterations exceeded\");\n+}\n+\n+public static double regularizedGammaP(double a, double x) {\n+    return regularizedGammaP(a, x, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);\n+}\n+\n+private static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + GAMMA_X) - x - GAMMA_X;\n+\n+    double sum = 0.0;\n+    for (int i = 0; i < GAMMA_SERIES.length; i++) {\n+        sum += GAMMA_SERIES[i] / (x + (double) i);\n+    }\n+\n+    return tmp + Math.log(GAMMA_SQRT_TWO_PI * sum / x);\n+}\n+\n+private static final double GAMMA_X = 2.0;\n+private static final double[] GAMMA_SERIES = {\n+        0.0006784376,\n+        -0.0003198361,\n+        0.0001247571,\n+        -0.0000440825,\n+        0.0000149723,\n+        -4.497643e-6,\n+        1.188146e-6,\n+        -2.871446e-7,\n+        6.338316e-8,\n+        -1.302458e-8,\n+        2.528582e-9,\n+        -4.715806e-10,\n+        8.374166e-11,\n+        -1.428491e-11\n+};\n+private static final double GAMMA_SQRT_TWO_PI = Math.sqrt(2.0 * Math.PI);\n+private static final double DEFAULT_EPSILON = 10e-9;\n+private static final int DEFAULT_MAX_ITERATIONS = 100000;\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}