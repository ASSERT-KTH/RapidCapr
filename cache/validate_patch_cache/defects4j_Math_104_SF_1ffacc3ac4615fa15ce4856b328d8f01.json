{
    "patch": "   \npublic static double regularizedGammaP(double a, double x) {\n    final double eps = 10e-14; // set the precision for the calculation\n    double sum = 1 / a;\n    double term = sum; // initialize term to the first term in the summation\n    int n = 1;\n\n    while (Math.abs(term) > eps * Math.abs(sum) && n < 1000) {\n        term *= x / (a + n);\n        sum += term;\n        n++;\n    }\n\n    if (n >= 1000) {\n        throw new RuntimeException(\"Failed to converge within 1000 iterations\");\n    }\n\n    return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..797f74752 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,25 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+   \n+public static double regularizedGammaP(double a, double x) {\n+    final double eps = 10e-14; // set the precision for the calculation\n+    double sum = 1 / a;\n+    double term = sum; // initialize term to the first term in the summation\n+    int n = 1;\n+\n+    while (Math.abs(term) > eps * Math.abs(sum) && n < 1000) {\n+        term *= x / (a + n);\n+        sum += term;\n+        n++;\n+    }\n+\n+    if (n >= 1000) {\n+        throw new RuntimeException(\"Failed to converge within 1000 iterations\");\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n+ }\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}