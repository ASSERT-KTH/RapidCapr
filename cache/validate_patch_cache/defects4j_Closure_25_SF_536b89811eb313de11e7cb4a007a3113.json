{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n\n    // The type of the constructor\n    FunctionType ft = null;\n\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n\n        if (constructorType.isUnknownType()) {\n            type = UnknownType.getInstance();\n        } else if (constructorType.isFunctionType()) {\n            ft = constructorType.toMaybeFunctionType();\n            if (ft.isConstructor()) {\n                type = ft.getPrototype();\n            }\n        }\n    }\n\n    n.setJSType(type);\n\n    // Traverse the arguments, type checking them against the type of constructor parameters.\n    if (ft != null) {\n        FunctionType.IParameterTypeIter parameterTypes = ft.getParameterTypeIter();\n        Node arg = constructor.getNext();\n        while (parameterTypes.hasNext() && arg != null) {\n            JSType expectedArgumentType = parameterTypes.next();\n\n            // If constructor parameter is of type \"undefined\" then mark the arg node as having \"unknown\" type\n            if (expectedArgumentType.isVoidType()) {\n                arg.setJSType(UnknownType.getInstance());\n            } else {\n                JSType actualArgumentType = arg.getJSType();\n                if (!actualArgumentType.isSubtypeOf(expectedArgumentType)) {\n                    warningAtNode(JSC_TYPE_MISMATCH, arg,\n                            \"inconsistent return type\\nrequires: \" + expectedArgumentType\n                                    + \"\\nfound   : \" + actualArgumentType);\n                }\n            }\n            scope = traverse(arg, scope);\n            arg = arg.getNext();\n        }\n    }\n\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..be5df282 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,56 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n+\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n+\n+    // The type of the constructor\n+    FunctionType ft = null;\n+\n     if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+        constructorType = constructorType.restrictByNotNullOrUndefined();\n+\n+        if (constructorType.isUnknownType()) {\n+            type = UnknownType.getInstance();\n+        } else if (constructorType.isFunctionType()) {\n+            ft = constructorType.toMaybeFunctionType();\n+            if (ft.isConstructor()) {\n+                type = ft.getPrototype();\n+            }\n         }\n-      }\n     }\n+\n     n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+\n+    // Traverse the arguments, type checking them against the type of constructor parameters.\n+    if (ft != null) {\n+        FunctionType.IParameterTypeIter parameterTypes = ft.getParameterTypeIter();\n+        Node arg = constructor.getNext();\n+        while (parameterTypes.hasNext() && arg != null) {\n+            JSType expectedArgumentType = parameterTypes.next();\n+\n+            // If constructor parameter is of type \"undefined\" then mark the arg node as having \"unknown\" type\n+            if (expectedArgumentType.isVoidType()) {\n+                arg.setJSType(UnknownType.getInstance());\n+            } else {\n+                JSType actualArgumentType = arg.getJSType();\n+                if (!actualArgumentType.isSubtypeOf(expectedArgumentType)) {\n+                    warningAtNode(JSC_TYPE_MISMATCH, arg,\n+                            \"inconsistent return type\\nrequires: \" + expectedArgumentType\n+                                    + \"\\nfound   : \" + actualArgumentType);\n+                }\n+            }\n+            scope = traverse(arg, scope);\n+            arg = arg.getNext();\n+        }\n     }\n+\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}