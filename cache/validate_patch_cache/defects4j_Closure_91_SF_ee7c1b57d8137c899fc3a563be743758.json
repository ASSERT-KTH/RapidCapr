{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface()\n        || jsDoc.hasThisType() || jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally be able to have a\n    // @this annotation associated with them.\n    if (!canFunctionHaveAnyThisType(n)) {\n      return false;\n    }\n    \n    if (parent.isGetProp()) {\n      Node target = parent.getFirstChild();\n      if (target.isGetProp() && \"prototype\".equals(target.getLastChild().getString())) {\n        return false;\n      }\n    }\n  } else if (parent != null && parent.isAssign()) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle nested\n      // assignments properly (e.g., (a = this).property = c;), assignLhsChild\n      // should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype\n      // property or subproperty.\n      if (NodeUtil.isGet(lhs) && isPrototypeProperty(lhs)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nprivate boolean isPrototypeProperty(Node get) {\n  if (get.getType() == Token.GETPROP) {\n    Node target = get.getFirstChild();\n    if (target.getType() == Token.GETPROP && \"prototype\".equals(target.getLastChild().getString())) {\n      return true;\n    }\n  }\n  return false;\n}\n\nprivate boolean canFunctionHaveAnyThisType(Node functionNode) {\n  Node parent = functionNode.getParent();\n  return parent == null || parent.isExprResult() || parent.isReturn()\n      || parent.isBlock() || parent.isScript() || parent.isSwitchCase();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..360bf718 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,71 +79,64 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  if (n.getType() == Token.FUNCTION) {\n+    // Don't traverse functions that are constructors or have the @this\n+    // or @override annotation.\n+    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+    if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface()\n+        || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+      return false;\n+    }\n \n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+    // Don't traverse functions unless they would normally be able to have a\n+    // @this annotation associated with them.\n+    if (!canFunctionHaveAnyThisType(n)) {\n+      return false;\n+    }\n+    \n+    if (parent.isGetProp()) {\n+      Node target = parent.getFirstChild();\n+      if (target.isGetProp() && \"prototype\".equals(target.getLastChild().getString())) {\n         return false;\n       }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+    }\n+  } else if (parent != null && parent.isAssign()) {\n+    Node lhs = parent.getFirstChild();\n+    Node rhs = lhs.getNext();\n+    if (n == lhs) {\n+      // Always traverse the left side of the assignment. To handle nested\n+      // assignments properly (e.g., (a = this).property = c;), assignLhsChild\n+      // should not be overridden.\n+      if (assignLhsChild == null) {\n+        assignLhsChild = lhs;\n+      }\n+    } else {\n+      // Only traverse the right side if it's not an assignment to a prototype\n+      // property or subproperty.\n+      if (NodeUtil.isGet(lhs) && isPrototypeProperty(lhs)) {\n         return false;\n       }\n-\n-      // Don't traverse functions that are getting lent to a prototype.\n     }\n+  }\n+  return true;\n+}\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-        }\n-      }\n+private boolean isPrototypeProperty(Node get) {\n+  if (get.getType() == Token.GETPROP) {\n+    Node target = get.getFirstChild();\n+    if (target.getType() == Token.GETPROP && \"prototype\".equals(target.getLastChild().getString())) {\n+      return true;\n     }\n-\n-    return true;\n   }\n+  return false;\n+}\n+\n+private boolean canFunctionHaveAnyThisType(Node functionNode) {\n+  Node parent = functionNode.getParent();\n+  return parent == null || parent.isExprResult() || parent.isReturn()\n+      || parent.isBlock() || parent.isScript() || parent.isSwitchCase();\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}