{
    "patch": "                // we are in a DST overlap\n                // choose the offset that has the smallest total adjustment\n                int diff = offsetLocal - offsetAdjusted;\n                if (diff > 0) {\n                    long prev = previousTransition(instantAdjusted);\n                    if (prev == instantAdjusted - offsetLocal) {\n                        // fall-back to the previous offset\n                        return offsetLocal;\n                    }\n                } else if (diff < 0) {\n                    long next = nextTransition(instantAdjusted);\n                    if (next == instantAdjusted - offsetLocal) {\n                        // advance to the next offset\n                        return offsetLocal;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..179fbe90 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // we are in a DST overlap\n+                // choose the offset that has the smallest total adjustment\n+                int diff = offsetLocal - offsetAdjusted;\n+                if (diff > 0) {\n+                    long prev = previousTransition(instantAdjusted);\n+                    if (prev == instantAdjusted - offsetLocal) {\n+                        // fall-back to the previous offset\n+                        return offsetLocal;\n+                    }\n+                } else if (diff < 0) {\n+                    long next = nextTransition(instantAdjusted);\n+                    if (next == instantAdjusted - offsetLocal) {\n+                        // advance to the next offset\n+                        return offsetLocal;\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}