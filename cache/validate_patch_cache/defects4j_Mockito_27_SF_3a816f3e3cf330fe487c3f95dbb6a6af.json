{
    "patch": "public <T> T resetMock(T mock) {\n    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n    MethodInterceptorFilter filter = new MethodInterceptorFilter(newHandler,\n      (MockSettingsImpl) org.mockito.Mockito.withSettings()\n              .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    MockUtil mockUtil = new MockUtil();\n    Object mockInstance = mockUtil.unwrapProxy(mock);\n    try {\n      ((Factory) mockInstance).setCallback(0, filter);\n    } catch (Exception e) {\n      // the object is not a mock, probably a spy\n      fieldSetter.setField(mockUtil.getMock(mock), \"CGLIB$CALLBACK_0\", filter);\n    }\n    return mock;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..e38e25a87 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,23 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> T resetMock(T mock) {\n+    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n+    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n+    MethodInterceptorFilter filter = new MethodInterceptorFilter(newHandler,\n+      (MockSettingsImpl) org.mockito.Mockito.withSettings()\n+              .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    MockUtil mockUtil = new MockUtil();\n+    Object mockInstance = mockUtil.unwrapProxy(mock);\n+    try {\n+      ((Factory) mockInstance).setCallback(0, filter);\n+    } catch (Exception e) {\n+      // the object is not a mock, probably a spy\n+      fieldSetter.setField(mockUtil.getMock(mock), \"CGLIB$CALLBACK_0\", filter);\n+    }\n+    return mock;\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}