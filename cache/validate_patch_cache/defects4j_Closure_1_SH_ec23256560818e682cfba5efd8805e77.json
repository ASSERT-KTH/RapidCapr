{
    "patch": "  Node function = fnScope.getRootNode();\n\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n\n  int i = 0;\n  Node arg = argList.getFirstChild();\n  while (arg != null) {\n    if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n      Node nextNode = arg.getNext();\n      boolean remove = true;\n\n      // Functions with default parameters cannot have unreferenced params removed, since\n      // those parameters may be filled by the default even if no arguments are provided.\n      checkNext:\n      for (Node n : NodeUtil.preOrderIterable(function)) {\n        if (n == argList) {\n          break;\n        } else if (n.isDefaultValue() && (NodeUtil.getFunctionParameters(n.getParent()) == argList)) {\n          remove = false;\n          break;\n        } else if (n == arg) {\n          break checkNext;\n        }\n      }\n\n      if (remove) {\n        arg.detach();\n        compiler.reportCodeChange();\n      } else {\n        // We cannot remove any more arguments so we end the loop.\n        break;\n      }\n    }\n    ++i;\n    arg = arg.getNext();\n  }\n\n  if (modifyCallSites) {\n    callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..bf8450e9 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,51 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  Node function = fnScope.getRootNode();\n+\n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+\n+  int i = 0;\n+  Node arg = argList.getFirstChild();\n+  while (arg != null) {\n+    if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+      Node nextNode = arg.getNext();\n+      boolean remove = true;\n+\n+      // Functions with default parameters cannot have unreferenced params removed, since\n+      // those parameters may be filled by the default even if no arguments are provided.\n+      checkNext:\n+      for (Node n : NodeUtil.preOrderIterable(function)) {\n+        if (n == argList) {\n+          break;\n+        } else if (n.isDefaultValue() && (NodeUtil.getFunctionParameters(n.getParent()) == argList)) {\n+          remove = false;\n+          break;\n+        } else if (n == arg) {\n+          break checkNext;\n+        }\n+      }\n+\n+      if (remove) {\n+        arg.detach();\n+        compiler.reportCodeChange();\n+      } else {\n+        // We cannot remove any more arguments so we end the loop.\n+        break;\n+      }\n+    }\n+    ++i;\n+    arg = arg.getNext();\n+  }\n+\n+  if (modifyCallSites) {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}