{
    "patch": "public static boolean is_sorted(int[] lst) {\n    if (lst == null || lst.length < 2) {\n        return true;\n    }\n    int[] count = new int[1001]; // assuming values <= 1000\n    for (int num : lst) {\n        count[num]++;\n        if (count[num] > 2) {\n            return false;\n        }\n    }\n    for (int i = 0; i < lst.length - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/IS_SORTED.java b/src/main/java/humaneval/buggy/IS_SORTED.java\nindex 173398c..b10a6ef 100644\n--- a/src/main/java/humaneval/buggy/IS_SORTED.java\n+++ b/src/main/java/humaneval/buggy/IS_SORTED.java\n@@ -19,20 +19,22 @@ import java.util.HashMap;\n  */\n \n public class IS_SORTED {\n-    public static boolean is_sorted(int[] lst) {\n-        HashMap<Integer, Integer> count_num = new HashMap<>();\n-        for(int i = 0; i < lst.length; i++) {\n-            count_num.put(lst[i], 0);\n-        }\n-        for(int i = 0; i < lst.length; i++) {\n-            count_num.put(lst[i], count_num.get(lst[i]) + 1);\n-        }\n-        for(int i = 0; i < lst.length; i++) {\n-            if(count_num.get(lst[i]) > 2) return false;\n+public static boolean is_sorted(int[] lst) {\n+    if (lst == null || lst.length < 2) {\n+        return true;\n+    }\n+    int[] count = new int[1001]; // assuming values <= 1000\n+    for (int num : lst) {\n+        count[num]++;\n+        if (count[num] > 2) {\n+            return false;\n         }\n-        for(int i = 0; i < lst.length - 1; i++) {\n-            if(lst[i] <= lst[i + 1]) return false;\n+    }\n+    for (int i = 0; i < lst.length - 1; i++) {\n+        if (lst[i] > lst[i + 1]) {\n+            return false;\n         }\n-        return true;\n     }\n+    return true;\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}