{
    "patch": "public double getTypedPercent(String json) {\n    int total = 0;\n    int typed = 0;\n    JsonElement element = new JsonParser().parse(json);\n    JsonObject jsonObject = element.getAsJsonObject();\n    JsonArray array = jsonObject.getAsJsonArray(\"fields\");\n    for (int i = 0; i < array.size(); i++) {\n        JsonObject object = array.get(i).getAsJsonObject();\n        if (object.has(\"typed\")) {\n            typed += object.get(\"typed\").getAsInt();\n        }\n        total += object.get(\"total\").getAsInt();\n    }\n    return (double) typed / total * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..c903116b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json) {\n+    int total = 0;\n+    int typed = 0;\n+    JsonElement element = new JsonParser().parse(json);\n+    JsonObject jsonObject = element.getAsJsonObject();\n+    JsonArray array = jsonObject.getAsJsonArray(\"fields\");\n+    for (int i = 0; i < array.size(); i++) {\n+        JsonObject object = array.get(i).getAsJsonObject();\n+        if (object.has(\"typed\")) {\n+            typed += object.get(\"typed\").getAsInt();\n+        }\n+        total += object.get(\"total\").getAsInt();\n+    }\n+    return (double) typed / total * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}