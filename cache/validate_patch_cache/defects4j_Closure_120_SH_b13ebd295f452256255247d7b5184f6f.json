{
    "patch": "        if (block.isFunction) {\n          if (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0)) {\n            return true;\n          } else if (getInitializingReference() != null && ref.getNode() == getInitializingReference().getNode()) {\n            if (ref.getParent() instanceof NodeUtil.CallAndNewCollector) {\n              Node grandParent = ref.getParent().getParent();\n              if (grandParent.isCall()) {\n                return isCallArgument(grandParent, ref.getParent().getIndex());\n              }\n            }\n            return true;\n          } else {\n            // This is not a one-time reassignment.\n            return false;\n          }\n        } else if (block.isLoop) {\n          // loop assignment is not ok since it may execute multiple times\n          return false;\n        } else {\n          // Continue traversing up the chain.\n          block = block.getParent();\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..e481debe 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,28 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          if (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0)) {\n+            return true;\n+          } else if (getInitializingReference() != null && ref.getNode() == getInitializingReference().getNode()) {\n+            if (ref.getParent() instanceof NodeUtil.CallAndNewCollector) {\n+              Node grandParent = ref.getParent().getParent();\n+              if (grandParent.isCall()) {\n+                return isCallArgument(grandParent, ref.getParent().getIndex());\n+              }\n+            }\n+            return true;\n+          } else {\n+            // This is not a one-time reassignment.\n+            return false;\n+          }\n+        } else if (block.isLoop) {\n+          // loop assignment is not ok since it may execute multiple times\n+          return false;\n+        } else {\n+          // Continue traversing up the chain.\n+          block = block.getParent();\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}