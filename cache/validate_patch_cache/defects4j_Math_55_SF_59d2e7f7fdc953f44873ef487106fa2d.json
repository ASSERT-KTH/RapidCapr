{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      final double tolerance = 1e-10;\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n\n      double s1 = v1.getNorm();\n      double s2 = v2.getNorm();\n\n      if (s1 == 0 || s2 == 0) {\n          return new Vector3D(0, 0, 0);\n      }\n\n      if (s1 < tolerance || s2 < tolerance) {\n          return new Vector3D(0, 0, 0);\n      }\n\n      final double vh = v1.dotProduct(v2) / (s1 * s2);\n      final double eps = 1e-3;\n      if (Math.abs(vh - 1) < eps || Math.abs(vh + 1) < eps) {\n\n          // v1 and v2 are almost parallel\n          // find a vector orthogonal to v1\n          final double maxComponent = Math.max(Math.abs(v1.getX()), Math.max(Math.abs(v1.getY()), Math.abs(v1.getZ())));\n          final Vector3D tmp = maxComponent == Math.abs(v1.getX()) ? new Vector3D(0, v1.getZ(), -v1.getY())\n                                                                             : maxComponent == Math.abs(v1.getY()) ? new Vector3D(v1.getZ(), 0, -v1.getX())\n                                                                                                                   : new Vector3D(v1.getY(), -v1.getX(), 0);\n          return crossProduct(tmp, v2);\n\n      } else {\n\n          // we reduce cancellation errors by preconditioning,\n          // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n          // v3 without loss of precision. See Kahan lecture\n          // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n          // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n          // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n          final double rho = FastMath.rint(vh * (1 << 8)) / (1 << 8);\n          final Vector3D  v3  = new Vector3D(v1.x - rho * v2.x,\n                                              v1.y - rho * v2.y,\n                                              v1.z - rho * v2.z);\n\n          // compute cross product from v3 and v2 instead of v1 and v2\n          return new Vector3D(v3.y * v2.z - v3.z * v2.y,\n                                v3.z * v2.x - v3.x * v2.z,\n                                v3.x * v2.y - v3.y * v2.x);\n\n      }\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..395a3c186 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,21 +456,54 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+      final double tolerance = 1e-10;\n \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n \n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+      double s1 = v1.getNorm();\n+      double s2 = v2.getNorm();\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+      if (s1 == 0 || s2 == 0) {\n+          return new Vector3D(0, 0, 0);\n+      }\n+\n+      if (s1 < tolerance || s2 < tolerance) {\n+          return new Vector3D(0, 0, 0);\n+      }\n \n+      final double vh = v1.dotProduct(v2) / (s1 * s2);\n+      final double eps = 1e-3;\n+      if (Math.abs(vh - 1) < eps || Math.abs(vh + 1) < eps) {\n+\n+          // v1 and v2 are almost parallel\n+          // find a vector orthogonal to v1\n+          final double maxComponent = Math.max(Math.abs(v1.getX()), Math.max(Math.abs(v1.getY()), Math.abs(v1.getZ())));\n+          final Vector3D tmp = maxComponent == Math.abs(v1.getX()) ? new Vector3D(0, v1.getZ(), -v1.getY())\n+                                                                             : maxComponent == Math.abs(v1.getY()) ? new Vector3D(v1.getZ(), 0, -v1.getX())\n+                                                                                                                   : new Vector3D(v1.getY(), -v1.getX(), 0);\n+          return crossProduct(tmp, v2);\n+\n+      } else {\n+\n+          // we reduce cancellation errors by preconditioning,\n+          // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+          // v3 without loss of precision. See Kahan lecture\n+          // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+          // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+          // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+          final double rho = FastMath.rint(vh * (1 << 8)) / (1 << 8);\n+          final Vector3D  v3  = new Vector3D(v1.x - rho * v2.x,\n+                                              v1.y - rho * v2.y,\n+                                              v1.z - rho * v2.z);\n+\n+          // compute cross product from v3 and v2 instead of v1 and v2\n+          return new Vector3D(v3.y * v2.z - v3.z * v2.y,\n+                                v3.z * v2.x - v3.x * v2.z,\n+                                v3.x * v2.y - v3.y * v2.x);\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      }\n \n   }\n ",
    "result_reason": "error: method dotProduct in class Vector3D cannot be applied to given types;",
    "test_result": "ERROR"
}