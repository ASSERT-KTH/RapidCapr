{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid arguments!\");\n    }\n    if (x == 0) {\n        return 0.0;\n    }\n    if (x > a + 1.0) {\n        double incompleteGammaC = regularizedGammaQ(a, x);\n        return 1.0 - incompleteGammaC;\n    }\n    double gammaSum = 0.0;\n    double item = 1.0 / a;\n    double coef = item;\n    double tol = 10e-15;\n    while (Math.abs(item / gammaSum) > tol) {\n        gammaSum += item;\n        coef *= x / ++a;\n        item = coef / (a);\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * gammaSum;\n}\n\npublic static double logGamma(double x) {\n    double[] coff = {76.18009172947146, -86.50532032941677, 24.01409824083091,\n            -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5};\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0;\n    for (int j = 0; j <= 5; j++) {\n        ser += coff[j] / (x + j + 1.0);\n    }\n    return tmp + Math.log(2.5066282746310007 * ser / x);\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    double gammaSum = 0.0;\n    double item = 1.0 / a;\n    double coef = item;\n    double tol = 10e-15;\n    while (Math.abs(item / gammaSum) > tol) {\n        gammaSum += item;\n        coef *= x / ++a;\n        item = coef / (a);\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * gammaSum;\n} ",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..f28084558 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,52 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid arguments!\");\n+    }\n+    if (x == 0) {\n+        return 0.0;\n+    }\n+    if (x > a + 1.0) {\n+        double incompleteGammaC = regularizedGammaQ(a, x);\n+        return 1.0 - incompleteGammaC;\n+    }\n+    double gammaSum = 0.0;\n+    double item = 1.0 / a;\n+    double coef = item;\n+    double tol = 10e-15;\n+    while (Math.abs(item / gammaSum) > tol) {\n+        gammaSum += item;\n+        coef *= x / ++a;\n+        item = coef / (a);\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * gammaSum;\n+}\n+\n+public static double logGamma(double x) {\n+    double[] coff = {76.18009172947146, -86.50532032941677, 24.01409824083091,\n+            -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5};\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0;\n+    for (int j = 0; j <= 5; j++) {\n+        ser += coff[j] / (x + j + 1.0);\n+    }\n+    return tmp + Math.log(2.5066282746310007 * ser / x);\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    double gammaSum = 0.0;\n+    double item = 1.0 / a;\n+    double coef = item;\n+    double tol = 10e-15;\n+    while (Math.abs(item / gammaSum) > tol) {\n+        gammaSum += item;\n+        coef *= x / ++a;\n+        item = coef / (a);\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * gammaSum;\n+} \n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}