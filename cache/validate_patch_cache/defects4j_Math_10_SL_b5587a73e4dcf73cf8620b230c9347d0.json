{
    "patch": "// fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\nif (Double.isNaN(result[resultOffset])) {\n    if (x[xOffset] == 0.0 && y[yOffset] == 0.0) {\n        result[resultOffset] = 0.0;\n    } else if (Double.isInfinite(y[yOffset])) {\n        result[resultOffset] = (y[yOffset] > 0.0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0;\n    } else if (Double.isInfinite(x[xOffset])) {\n        result[resultOffset] = (x[xOffset] > 0.0) ? 0.0 : FastMath.PI;\n    } else {\n        result[resultOffset] = (y[yOffset] >= 0.0) ? FastMath.PI : -FastMath.PI;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..df076669f 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,18 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+// fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+if (Double.isNaN(result[resultOffset])) {\n+    if (x[xOffset] == 0.0 && y[yOffset] == 0.0) {\n+        result[resultOffset] = 0.0;\n+    } else if (Double.isInfinite(y[yOffset])) {\n+        result[resultOffset] = (y[yOffset] > 0.0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0;\n+    } else if (Double.isInfinite(x[xOffset])) {\n+        result[resultOffset] = (x[xOffset] > 0.0) ? 0.0 : FastMath.PI;\n+    } else {\n+        result[resultOffset] = (y[yOffset] >= 0.0) ? FastMath.PI : -FastMath.PI;\n+    }\n+}\n \n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<0.0>",
    "test_result": "FAIL"
}