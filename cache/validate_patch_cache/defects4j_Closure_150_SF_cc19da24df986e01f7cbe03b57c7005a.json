{
    "patch": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n == scope.getRootNode()) {\n            return;\n        }\n        if (n.getType() == Token.FUNCTION) {\n            if (NodeUtil.isFunctionExpression(n) || parent.getType() == Token.ASSIGN ||\n                parent.getType() == Token.NAME) {\n                return;\n            }\n            defineDeclaredFunction(n, parent);\n        } else if (n.getType() == Token.NAME || n.getType() == Token.VAR) {\n            defineVar(n, parent);\n        } else if (n.getType() == Token.CATCH) {\n            defineCatch(n, parent);\n        } else if (n.getType() == Token.LP) {\n            if (isCallOrNew(parent) || isFunctionAsIdentifier(parent)) {\n                handleFunctionInputs(parent);\n            }\n        }\n        attachLiteralTypes(n);\n    }\n\n    /**\n     * Check if a node is being used as the function identifier inside a function expression.\n     */\n    private static boolean isFunctionAsIdentifier(Node n) {\n        return NodeUtil.isFunctionExpression(n.getParent()) &&\n                n == n.getParent().getFirstChild();\n    }\n\n    /**\n     * Check if a node is being used as arguments to a CALL or NEW.\n     */\n    private static boolean isCallOrNew(Node n) {\n        return parentIs(n, Token.CALL) || parentIs(n, Token.NEW);\n    }\n\n    /**\n     * NodeUtil.getParentOfType() without closing over NodeUtil.\n     */\n    private static boolean parentIs(Node n, Token type) {\n        return NodeUtil.getParentOfType(n, type) != null;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..232007c5 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,29 +1440,49 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n == scope.getRootNode()) {\n+            return;\n+        }\n+        if (n.getType() == Token.FUNCTION) {\n+            if (NodeUtil.isFunctionExpression(n) || parent.getType() == Token.ASSIGN ||\n+                parent.getType() == Token.NAME) {\n+                return;\n+            }\n+            defineDeclaredFunction(n, parent);\n+        } else if (n.getType() == Token.NAME || n.getType() == Token.VAR) {\n+            defineVar(n, parent);\n+        } else if (n.getType() == Token.CATCH) {\n+            defineCatch(n, parent);\n+        } else if (n.getType() == Token.LP) {\n+            if (isCallOrNew(parent) || isFunctionAsIdentifier(parent)) {\n+                handleFunctionInputs(parent);\n+            }\n+        }\n+        attachLiteralTypes(n);\n+    }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+    /**\n+     * Check if a node is being used as the function identifier inside a function expression.\n+     */\n+    private static boolean isFunctionAsIdentifier(Node n) {\n+        return NodeUtil.isFunctionExpression(n.getParent()) &&\n+                n == n.getParent().getFirstChild();\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    /**\n+     * Check if a node is being used as arguments to a CALL or NEW.\n+     */\n+    private static boolean isCallOrNew(Node n) {\n+        return parentIs(n, Token.CALL) || parentIs(n, Token.NEW);\n+    }\n+\n+    /**\n+     * NodeUtil.getParentOfType() without closing over NodeUtil.\n+     */\n+    private static boolean parentIs(Node n, Token type) {\n+        return NodeUtil.getParentOfType(n, type) != null;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: Illegal static declaration in inner class TypedScopeCreator.LocalScopeBuilder",
    "test_result": "ERROR"
}