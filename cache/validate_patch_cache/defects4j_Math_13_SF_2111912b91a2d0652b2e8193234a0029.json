{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    // perform LU decomposition\n    LUDecomposition lu = new LUDecomposition(m);\n    RealMatrix l = lu.getL();\n    RealMatrix u = lu.getU();\n        \n    // compute square root of U\n    int n = m.getRowDimension();\n    RealMatrix sqrtU = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        sqrtU.setEntry(i, i, Math.sqrt(u.getEntry(i, i)));\n        for (int j = i + 1; j < n; j++) {\n            sqrtU.setEntry(i, j, u.getEntry(i, j) / sqrtU.getEntry(i, i));\n        }\n    }\n        \n    // compute square root of m\n    RealMatrix sqrtM = l.multiply(sqrtU).multiply(l.transpose());\n        \n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..609bcccea 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    // perform LU decomposition\n+    LUDecomposition lu = new LUDecomposition(m);\n+    RealMatrix l = lu.getL();\n+    RealMatrix u = lu.getU();\n+        \n+    // compute square root of U\n+    int n = m.getRowDimension();\n+    RealMatrix sqrtU = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        sqrtU.setEntry(i, i, Math.sqrt(u.getEntry(i, i)));\n+        for (int j = i + 1; j < n; j++) {\n+            sqrtU.setEntry(i, j, u.getEntry(i, j) / sqrtU.getEntry(i, i));\n+        }\n     }\n+        \n+    // compute square root of m\n+    RealMatrix sqrtM = l.multiply(sqrtU).multiply(l.transpose());\n+        \n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}