{
    "patch": "public ReturnValue handle(Method method, List<Throwable> errors) {\n    if (method.getReturnType().equals(Void.TYPE)) {\n        return ReturnValue.forVoid();\n    }\n    if (method.getReturnType().equals(Optional.class)) {\n        return ReturnValue.forValue(Optional.empty());\n    }\n    if (Iterable.class.isAssignableFrom(method.getReturnType())) {\n        return ReturnValue.forValue(Collections.emptyList());\n    }\n    if (method.getReturnType().equals(String.class)) {\n        return ReturnValue.forValue(\"\");\n    }\n    if (method.getReturnType().isPrimitive()) {\n        return ReturnValue.forPrimitive(method.getReturnType());\n    }\n    return ReturnValue.forValue(null);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}