{
    "patch": "            // adjust instantLocal using the estimate and recalc the offset\n            final long instantAdjusted = instantLocal - offsetLocal;\n            final int offsetAdjusted = getOffset(instantAdjusted);\n            if (offsetLocal != offsetAdjusted) {\n                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                int diff = offsetLocal - offsetAdjusted;\n                if (diff < 0) {\n                    long transition = nextTransition(instantAdjusted);\n                    if (transition == instantAdjusted) {\n                        transition = nextTransition(instantAdjusted + 1);\n                    }\n                    int postTransitionOffset = getOffset(transition);\n                    if (offsetLocal != postTransitionOffset) {\n                        return offsetLocal;\n                    }\n                    return offsetAdjusted;\n                } else {\n                    // positive diff, check if it happens across a DST interval\n                    long transition = nextTransition(instantLocal - offsetAdjusted + 1);\n                    long prevTransition = previousTransition(instantAdjusted);\n                    if (prevTransition >= transition) {\n                        return offsetLocal; // should not happen, but be safe\n                    }\n                    if (getOffset(prevTransition) == offsetLocal) {\n                        return offsetLocal;\n                    }\n                    return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1072b892 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,34 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // adjust instantLocal using the estimate and recalc the offset\n+            final long instantAdjusted = instantLocal - offsetLocal;\n+            final int offsetAdjusted = getOffset(instantAdjusted);\n+            if (offsetLocal != offsetAdjusted) {\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                int diff = offsetLocal - offsetAdjusted;\n+                if (diff < 0) {\n+                    long transition = nextTransition(instantAdjusted);\n+                    if (transition == instantAdjusted) {\n+                        transition = nextTransition(instantAdjusted + 1);\n+                    }\n+                    int postTransitionOffset = getOffset(transition);\n+                    if (offsetLocal != postTransitionOffset) {\n+                        return offsetLocal;\n+                    }\n+                    return offsetAdjusted;\n+                } else {\n+                    // positive diff, check if it happens across a DST interval\n+                    long transition = nextTransition(instantLocal - offsetAdjusted + 1);\n+                    long prevTransition = previousTransition(instantAdjusted);\n+                    if (prevTransition >= transition) {\n+                        return offsetLocal; // should not happen, but be safe\n+                    }\n+                    if (getOffset(prevTransition) == offsetLocal) {\n+                        return offsetLocal;\n+                    }\n+                    return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}