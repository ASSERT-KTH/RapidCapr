{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n            // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n\n            // need to adjust for end of month if necessary\n            if (partial.size() == 3 && partial.getFieldType(1).getField(iChronology).getUnitMillis() >= DateTimeConstants.MILLIS_PER_DAY) {\n                int year = iChronology.year().get(instant);\n                int month = iChronology.monthOfYear().get(instant);\n                int day = iChronology.dayOfMonth().get(instant);\n                int maxDay = iChronology.dayOfMonth().getMaximumValue(year, month);\n                if (day > maxDay) {\n                    instant = iChronology.dayOfMonth().set(instant, maxDay);\n                }\n            }\n\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..faca3ae5 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -213,6 +213,18 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);\n+\n+            // need to adjust for end of month if necessary\n+            if (partial.size() == 3 && partial.getFieldType(1).getField(iChronology).getUnitMillis() >= DateTimeConstants.MILLIS_PER_DAY) {\n+                int year = iChronology.year().get(instant);\n+                int month = iChronology.monthOfYear().get(instant);\n+                int day = iChronology.dayOfMonth().get(instant);\n+                int maxDay = iChronology.dayOfMonth().getMaximumValue(year, month);\n+                if (day > maxDay) {\n+                    instant = iChronology.dayOfMonth().set(instant, maxDay);\n+                }\n+            }\n+\n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}