{
    "patch": "            Matcher lastMatcher = matchers.get(indexOfVararg);\n            int varargLength = invocation.getRawArguments().length - indexOfVararg;\n            Object[] varargValues = new Object[varargLength];\n            System.arraycopy(invocation.getRawArguments(), indexOfVararg, varargValues, 0, varargLength);\n            List<Object> capturedVarargs = new ArrayList<>();\n            for (Object obj : varargValues) {\n                if (lastMatcher.matches(obj)) {\n                    capturedVarargs.add(obj);\n                }\n            }\n            ((CapturesArguments) lastMatcher).captureFrom(capturedVarargs.toArray());",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..700d99cba 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,17 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Matcher lastMatcher = matchers.get(indexOfVararg);\n+            int varargLength = invocation.getRawArguments().length - indexOfVararg;\n+            Object[] varargValues = new Object[varargLength];\n+            System.arraycopy(invocation.getRawArguments(), indexOfVararg, varargValues, 0, varargLength);\n+            List<Object> capturedVarargs = new ArrayList<>();\n+            for (Object obj : varargValues) {\n+                if (lastMatcher.matches(obj)) {\n+                    capturedVarargs.add(obj);\n+                }\n+            }\n+            ((CapturesArguments) lastMatcher).captureFrom(capturedVarargs.toArray());\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}