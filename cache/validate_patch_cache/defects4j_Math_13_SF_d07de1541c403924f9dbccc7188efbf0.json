{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n    final RealMatrix u = svd.getU();\n    final RealVector s = svd.getSingularValues();\n    final int n = m.getRowDimension();\n    final RealMatrix sRoot = MatrixUtils.createRealDiagonalMatrix(\n            IntStream.range(0, n)\n                    .mapToDouble(i -> FastMath.sqrt(s.getEntry(i)))\n                    .toArray());\n    return u.multiply(sRoot).multiply(u.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f359fa898 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,15 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+    final RealMatrix u = svd.getU();\n+    final RealVector s = svd.getSingularValues();\n+    final int n = m.getRowDimension();\n+    final RealMatrix sRoot = MatrixUtils.createRealDiagonalMatrix(\n+            IntStream.range(0, n)\n+                    .mapToDouble(i -> FastMath.sqrt(s.getEntry(i)))\n+                    .toArray());\n+    return u.multiply(sRoot).multiply(u.transpose());\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}