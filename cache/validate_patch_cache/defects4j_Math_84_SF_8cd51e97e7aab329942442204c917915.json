{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        incrementIterationsCounter();\n\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // Perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, ReflectionCoefficient.EXPANSION_COEFFICIENT.getValue(), comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex = reflectedSimplex;\n            } else {\n                simplex = evaluateNewSimplex(original, ReflectionCoefficient.CONTRACTION_COEFFICIENT.getValue(), comparator);\n            }\n        } else {\n            simplex = evaluateNewSimplex(original, ReflectionCoefficient.CONTRACTION_COEFFICIENT.getValue(), comparator);\n        }\n\n        final RealPointValuePair newBest = simplex[0];\n        if (Math.abs(best.getValue() - newBest.getValue()) < getTerminationRelativeTolerance() * (Math.abs(best.getValue()) + getTerminationAbsoluteTolerance()) ||\n            comparator.compare(newBest, best) == 0) {\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..aa40667f3 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,36 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+    while (true) {\n+        incrementIterationsCounter();\n+\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // Perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, ReflectionCoefficient.EXPANSION_COEFFICIENT.getValue(), comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex = reflectedSimplex;\n+            } else {\n+                simplex = evaluateNewSimplex(original, ReflectionCoefficient.CONTRACTION_COEFFICIENT.getValue(), comparator);\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n-\n+        } else {\n+            simplex = evaluateNewSimplex(original, ReflectionCoefficient.CONTRACTION_COEFFICIENT.getValue(), comparator);\n         }\n \n+        final RealPointValuePair newBest = simplex[0];\n+        if (Math.abs(best.getValue() - newBest.getValue()) < getTerminationRelativeTolerance() * (Math.abs(best.getValue()) + getTerminationAbsoluteTolerance()) ||\n+            comparator.compare(newBest, best) == 0) {\n+            return;\n+        }\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: package ReflectionCoefficient does not exist",
    "test_result": "ERROR"
}