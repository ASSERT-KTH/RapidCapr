{
    "patch": "if (n.isFunction()) {\n  Node parentSibling = parent.getNext();\n  boolean isNameDeclaration = NodeUtil.isNameDeclaration(parent);\n  if (parentSibling != n) {\n    attachLiteralTypes(n);\n    defineDeclaredFunction(n, isNameDeclaration ? parent : parent.getParent());\n    // Must handle inputs in parent if the function was added to allow destructuring\n    if (isNameDeclaration && parent.getParent().isDestructuringLhs()) {\n      handleFunctionInputs(parent);\n    }\n  } else if (isNameDeclaration) {\n    attachLiteralTypes(n.getFirstChild());\n    defineDeclaredFunction(n.getFirstChild(), n);\n  } else {\n    attachLiteralTypes(n.getFirstChild());\n    defineDeclaredFunction(n.getFirstChild(), parent);\n  }\n} else {\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.NAME) {\n        defineVar(n.getFirstChild(), n);\n      }\n      break;\n  }\n}\nif (n.getType() == Token.LP && parent == scope.getRootNode()) {\n  handleFunctionInputs(parent);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..88390c01 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,39 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+if (n.isFunction()) {\n+  Node parentSibling = parent.getNext();\n+  boolean isNameDeclaration = NodeUtil.isNameDeclaration(parent);\n+  if (parentSibling != n) {\n+    attachLiteralTypes(n);\n+    defineDeclaredFunction(n, isNameDeclaration ? parent : parent.getParent());\n+    // Must handle inputs in parent if the function was added to allow destructuring\n+    if (isNameDeclaration && parent.getParent().isDestructuringLhs()) {\n+      handleFunctionInputs(parent);\n+    }\n+  } else if (isNameDeclaration) {\n+    attachLiteralTypes(n.getFirstChild());\n+    defineDeclaredFunction(n.getFirstChild(), n);\n+  } else {\n+    attachLiteralTypes(n.getFirstChild());\n+    defineDeclaredFunction(n.getFirstChild(), parent);\n+  }\n+} else {\n+  attachLiteralTypes(n);\n+  switch (n.getType()) {\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.VAR:\n+      if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.NAME) {\n+        defineVar(n.getFirstChild(), n);\n       }\n+      break;\n+  }\n+}\n+if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+  handleFunctionInputs(parent);\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}