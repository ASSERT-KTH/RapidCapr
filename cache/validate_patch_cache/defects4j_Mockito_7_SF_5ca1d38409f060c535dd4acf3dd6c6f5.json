{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    \n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    \n    if (typeVariable.getGenericDeclaration() instanceof Class) {\n        Type superType = ((Class<?>) typeVariable.getGenericDeclaration()).getGenericSuperclass();\n        if (superType instanceof ParameterizedType) {\n            TypeVariable<?>[] superTypeVariables = ((Class<?>) typeVariable.getGenericDeclaration()).getTypeParameters();\n            Type[] actualTypeArguments = ((ParameterizedType) superType).getActualTypeArguments();\n            for (int i = 0; i < superTypeVariables.length; i++) {\n                if (superTypeVariables[i].equals(typeVariable)) {\n                    registerTypeVariablesOn(actualTypeArguments[i]);\n                    break;\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..0a66d99ba 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,30 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    \n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    \n+    if (typeVariable.getGenericDeclaration() instanceof Class) {\n+        Type superType = ((Class<?>) typeVariable.getGenericDeclaration()).getGenericSuperclass();\n+        if (superType instanceof ParameterizedType) {\n+            TypeVariable<?>[] superTypeVariables = ((Class<?>) typeVariable.getGenericDeclaration()).getTypeParameters();\n+            Type[] actualTypeArguments = ((ParameterizedType) superType).getActualTypeArguments();\n+            for (int i = 0; i < superTypeVariables.length; i++) {\n+                if (superTypeVariables[i].equals(typeVariable)) {\n+                    registerTypeVariablesOn(actualTypeArguments[i]);\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}