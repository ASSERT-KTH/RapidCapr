{
    "patch": "      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        boolean isFunctionAssignmentToPrototype = n.getType() == Token.FUNCTION && NodeUtil.isGet(lhs) &&\n                                                  lhs.getType() == Token.GETPROP &&\n                                                  lhs.getLastChild().getString().equals(\"prototype\");\n\n        if (isFunctionAssignmentToPrototype) {\n          return false;\n        } else if (NodeUtil.isFunctionExpression(n) && !NodeUtil.isGet(lhs)) {\n          // Don't traverse function expressions that are not assigned to an object\n          return false;\n        } else if (NodeUtil.isGet(lhs)) {\n          // Only traverse assignments to a prototype property or an object literal\n          Node ancestor = n;\n          boolean isPrototypeAssignment = false;\n          boolean isObjectLiteralAssignment = false;\n\n          while (ancestor.getParent() != null && ancestor.getParent() != lhs) {\n            ancestor = ancestor.getParent();\n          }\n\n          if (ancestor.getParent() == lhs) {\n            if (lhs.getLastChild().getString().equals(\"prototype\")) {\n              isPrototypeAssignment = true;\n            } else if (lhs.getType() != Token.OBJECTLIT) {\n              // Don't traverse assignments to anything other than a prototype property or an object literal\n              return false;\n            } else {\n              isObjectLiteralAssignment = true;\n            }\n          }\n\n          if (isPrototypeAssignment) {\n            for (Node child : NodeUtil.preOrderTraversal(rhs)) {\n              if (child.isThis()) {\n                return false;\n              }\n            }\n            return true;\n          } else if (isObjectLiteralAssignment) {\n            return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..8218b2fb 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,49 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        boolean isFunctionAssignmentToPrototype = n.getType() == Token.FUNCTION && NodeUtil.isGet(lhs) &&\n+                                                  lhs.getType() == Token.GETPROP &&\n+                                                  lhs.getLastChild().getString().equals(\"prototype\");\n+\n+        if (isFunctionAssignmentToPrototype) {\n+          return false;\n+        } else if (NodeUtil.isFunctionExpression(n) && !NodeUtil.isGet(lhs)) {\n+          // Don't traverse function expressions that are not assigned to an object\n+          return false;\n+        } else if (NodeUtil.isGet(lhs)) {\n+          // Only traverse assignments to a prototype property or an object literal\n+          Node ancestor = n;\n+          boolean isPrototypeAssignment = false;\n+          boolean isObjectLiteralAssignment = false;\n+\n+          while (ancestor.getParent() != null && ancestor.getParent() != lhs) {\n+            ancestor = ancestor.getParent();\n+          }\n+\n+          if (ancestor.getParent() == lhs) {\n+            if (lhs.getLastChild().getString().equals(\"prototype\")) {\n+              isPrototypeAssignment = true;\n+            } else if (lhs.getType() != Token.OBJECTLIT) {\n+              // Don't traverse assignments to anything other than a prototype property or an object literal\n+              return false;\n+            } else {\n+              isObjectLiteralAssignment = true;\n+            }\n+          }\n+\n+          if (isPrototypeAssignment) {\n+            for (Node child : NodeUtil.preOrderTraversal(rhs)) {\n+              if (child.isThis()) {\n+                return false;\n+              }\n+            }\n+            return true;\n+          } else if (isObjectLiteralAssignment) {\n+            return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}