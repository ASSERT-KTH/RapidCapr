{
    "patch": "        // Make sure the function containing the assignment is not nested.\n        Function containingFunction = ref.getBasicBlock().getContainingFunction();\n        Function currentFunction = containingFunction;\n        BasicBlock currentBlock = containingFunction.getEntryBlock();\n        while (currentBlock != null) {\n          if (currentBlock.equals(ref.getBasicBlock())) {\n            return true;\n          }\n          if (currentBlock.isFunction) {\n            currentFunction = currentBlock.getFunction();\n          }\n          if (currentFunction.equals(containingFunction)) {\n            currentBlock = currentBlock.getSuccessors().isEmpty() ? null : currentBlock.getSuccessors().get(0);\n          } else {\n            currentBlock = null;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..e9e5ef1e 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,22 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        // Make sure the function containing the assignment is not nested.\n+        Function containingFunction = ref.getBasicBlock().getContainingFunction();\n+        Function currentFunction = containingFunction;\n+        BasicBlock currentBlock = containingFunction.getEntryBlock();\n+        while (currentBlock != null) {\n+          if (currentBlock.equals(ref.getBasicBlock())) {\n+            return true;\n+          }\n+          if (currentBlock.isFunction) {\n+            currentFunction = currentBlock.getFunction();\n+          }\n+          if (currentFunction.equals(containingFunction)) {\n+            currentBlock = currentBlock.getSuccessors().isEmpty() ? null : currentBlock.getSuccessors().get(0);\n+          } else {\n+            currentBlock = null;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}