{
    "patch": "        // catch cases where endpoints do not bracket the root, or if any input value is infinite or NaN\n        if ((!Double.isFinite(min) || !Double.isFinite(max) || !Double.isFinite(initial) || !Double.isFinite(yInitial) || !Double.isFinite(yMin) || !Double.isFinite(yMax))\n                || (yMin >=",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..724bdfb2c 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,9 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // catch cases where endpoints do not bracket the root, or if any input value is infinite or NaN\n+        if ((!Double.isFinite(min) || !Double.isFinite(max) || !Double.isFinite(initial) || !Double.isFinite(yInitial) || !Double.isFinite(yMin) || !Double.isFinite(yMax))\n+                || (yMin >=\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}