{
    "patch": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    int resultIdx = 0;\n\n    int[] evens = Arrays.stream(l)\n            .filter(num -> num % 2 == 0)\n            .sorted()\n            .toArray();\n\n    for (int num : l) {\n        if (num % 2 == 0) {\n            result[resultIdx++] = evens[0];\n            evens = Arrays.copyOfRange(evens, 1, evens.length);\n        } else {\n            result[resultIdx++] = num;\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/SORT_EVEN.java b/src/main/java/humaneval/buggy/SORT_EVEN.java\nindex cce3d2a..2607a53 100644\n--- a/src/main/java/humaneval/buggy/SORT_EVEN.java\n+++ b/src/main/java/humaneval/buggy/SORT_EVEN.java\n@@ -3,21 +3,23 @@ package humaneval.buggy;\n import java.util.Arrays;\n \n public class SORT_EVEN {\n-    public static int[] sort_even(int[] l) {\n-        int[] result = new int[l.length];\n+public static int[] sort_even(int[] l) {\n+    int[] result = new int[l.length];\n+    int resultIdx = 0;\n \n-        int[] evens = new int[1 + (int) (l.length / 2.)];\n-        for (int i = 0; i < l.length; i += 2) {\n-            evens[(int) i / 2] = l[i];\n-        }\n-        Arrays.sort(evens);\n-        for (int i = 0; i < l.length; i += 1) {\n-            if (i % 2 == 0){\n-                result[i] = evens[(int) i / 2];\n-            } else{\n-                result[i] = l[i];\n-            }\n+    int[] evens = Arrays.stream(l)\n+            .filter(num -> num % 2 == 0)\n+            .sorted()\n+            .toArray();\n+\n+    for (int num : l) {\n+        if (num % 2 == 0) {\n+            result[resultIdx++] = evens[0];\n+            evens = Arrays.copyOfRange(evens, 1, evens.length);\n+        } else {\n+            result[resultIdx++] = num;\n         }\n-        return result;\n     }\n+    return result;\n+}\n }",
    "result_reason": "   TEST_SORT_EVEN.test_1:21",
    "test_result": "FAIL"
}