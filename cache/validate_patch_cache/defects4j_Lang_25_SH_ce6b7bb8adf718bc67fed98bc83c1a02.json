{
    "patch": "public static String unescape(String s) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n        case '\\\\':  c = s.charAt(++i);\n                    switch(c) {\n                    case '\"': sb.append('\"'); break;\n                    case '\\'': sb.append('\\''); break;\n                    case '\\\\': sb.append('\\\\'); break;\n                    case 'n':  sb.append('\\n'); break;\n                    case 'r':  sb.append('\\r'); break;\n                    case 't':  sb.append('\\t'); break;\n                    case 'b':  sb.append('\\b'); break;\n                    case 'f':  sb.append('\\f'); break;\n                    case 'u': sb.append((char) Integer.parseInt(s.substring(i+1, i+5), 16));\n                              i += 4;\n                              break;\n                    case 'x': sb.append((char) Integer.parseInt(s.substring(i+1, i+3), 16));\n                              i += 2;\n                              break;\n                    case '0': case '1': case '2': case '3': // octal\n                              int octIndex = i;\n                              char octChar = c;\n                              int code = octChar - '0';\n                              if (i+1 < s.length()) {\n                                  c = s.charAt(i+1);\n                                  if ('0' <= c && c <= '7') {\n                                      octChar = c;\n                                      code = code*8 + (octChar - '0');\n                                      i++;\n                                  }\n                              }\n                              if (i+1 < s.length()) {\n                                  c = s.charAt(i+1);\n                                  if ('0' <= c && c <= '7' && octChar <= '3') {\n                                      octChar = c;\n                                      code = code*8 + (octChar - '0');\n                                      i++;\n                                  }\n                              }\n                              sb.append((char) code);\n                              break;\n                    case 'u{': // Unicode code point escape\n                        int j = s.indexOf('}', i+3);\n                        if (j == -1) {\n                            // No matching closing brace\n                            sb.append('\\\\').append('u').append('{');\n                            break;\n                        }\n                        try {\n                            int codePoint = Integer.parseInt(s.substring(i+3, j), 16);\n                            if (codePoint > Character.MAX_CODE_POINT) {\n                                // Invalid Unicode code point\n                                sb.append('\\\\').append('u').append(s.substring(i+1, j+1));\n                                break;\n                            }\n                            sb.append(Character.toChars(codePoint));\n                            i = j;\n                        } catch (NumberFormatException e) {\n                            // Invalid Unicode code point\n                            sb.append('\\\\').append('u').append(s.substring(i+1, j+1));\n                        }\n                        break;\n                    default: sb.append('\\\\').append(c); break;\n                    }\n                    break;\n        default:    sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}