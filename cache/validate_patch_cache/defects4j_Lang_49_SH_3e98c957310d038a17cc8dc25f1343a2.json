{
    "patch": "public class Fraction {\n    \n    private int numerator;\n    private int denominator;\n    \n    public Fraction(int numerator, int denominator) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n    }\n    \n    public Fraction reduce() {\n        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n        if (gcd == denominator) {\n            return Fraction.getFraction(numerator / denominator, 1);\n        } else if (gcd != 1 && denominator != 0) {\n            return Fraction.getFraction(numerator / gcd, denominator / gcd);\n        }\n        return this;\n    }\n    \n    public int greatestCommonDivisor(int a, int b) {\n        while (b > 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n    \n    public static Fraction getFraction(int numerator, int denominator) {\n        return new Fraction(numerator, denominator);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..5fb50b55 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,39 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+public class Fraction {\n+    \n+    private int numerator;\n+    private int denominator;\n+    \n+    public Fraction(int numerator, int denominator) {\n+        this.numerator = numerator;\n+        this.denominator = denominator;\n+    }\n+    \n+    public Fraction reduce() {\n+        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n+        if (gcd == denominator) {\n+            return Fraction.getFraction(numerator / denominator, 1);\n+        } else if (gcd != 1 && denominator != 0) {\n+            return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+        }\n+        return this;\n+    }\n+    \n+    public int greatestCommonDivisor(int a, int b) {\n+        while (b > 0) {\n+            int temp = b;\n+            b = a % b;\n+            a = temp;\n+        }\n+        return a;\n+    }\n+    \n+    public static Fraction getFraction(int numerator, int denominator) {\n+        return new Fraction(numerator, denominator);\n+    }\n+}\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}