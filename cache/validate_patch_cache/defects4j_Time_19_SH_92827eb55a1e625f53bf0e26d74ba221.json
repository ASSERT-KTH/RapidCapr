{
    "patch": "if (offsetLocal >= 0 && offsetAdjusted >= 0 && offsetLocal == offsetAdjusted) {\n     return offsetLocal;\n } else if (offsetLocal < 0 && offsetAdjusted < 0 && offsetLocal > offsetAdjusted) {\n     long prev = previousTransition(instantAdjusted);\n     if (instantLocal - prev < 0) {\n         return getOffset(prev);\n     } else {\n         return offsetLocal;\n     }\n } else {\n     long nextLocal = nextTransition(instantAdjusted);\n     long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n     if (nextLocal == nextAdjusted) {\n         return offsetAdjusted;\n     } else if (offsetLocal == 0 && offsetAdjusted < 0 && nextLocal < instantLocal) {\n         return 0;\n     } else {\n         int offsetNext = getOffset(nextLocal);\n         int diff = offsetNext - offsetLocal;\n         if ((diff < 0 ? -diff : diff) >= 7 * MILLIS_PER_DAY) {\n             if (offsetLocal < offsetNext) {\n                 return offsetLocal;\n             } else {\n                 return offsetNext;\n             }\n         }\n         prev = previousTransition(instantAdjusted);\n         if (prev < instantAdjusted - (MILLIS_PER_DAY * 28)) {\n             return offsetLocal;\n         } else {\n             int offsetPrev = getOffset(prev);\n             diff = offsetPrev - offsetLocal;\n             if (instantAdjusted - prev >= diff) {\n                 return offsetPrev;\n             } else {\n                 return offsetLocal;\n             }\n         }\n     }\n }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..9c7b5fb8 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,46 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+if (offsetLocal >= 0 && offsetAdjusted >= 0 && offsetLocal == offsetAdjusted) {\n+     return offsetLocal;\n+ } else if (offsetLocal < 0 && offsetAdjusted < 0 && offsetLocal > offsetAdjusted) {\n+     long prev = previousTransition(instantAdjusted);\n+     if (instantLocal - prev < 0) {\n+         return getOffset(prev);\n+     } else {\n+         return offsetLocal;\n+     }\n+ } else {\n+     long nextLocal = nextTransition(instantAdjusted);\n+     long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+     if (nextLocal == nextAdjusted) {\n+         return offsetAdjusted;\n+     } else if (offsetLocal == 0 && offsetAdjusted < 0 && nextLocal < instantLocal) {\n+         return 0;\n+     } else {\n+         int offsetNext = getOffset(nextLocal);\n+         int diff = offsetNext - offsetLocal;\n+         if ((diff < 0 ? -diff : diff) >= 7 * MILLIS_PER_DAY) {\n+             if (offsetLocal < offsetNext) {\n+                 return offsetLocal;\n+             } else {\n+                 return offsetNext;\n+             }\n+         }\n+         prev = previousTransition(instantAdjusted);\n+         if (prev < instantAdjusted - (MILLIS_PER_DAY * 28)) {\n+             return offsetLocal;\n+         } else {\n+             int offsetPrev = getOffset(prev);\n+             diff = offsetPrev - offsetLocal;\n+             if (instantAdjusted - prev >= diff) {\n+                 return offsetPrev;\n+             } else {\n+                 return offsetLocal;\n+             }\n+         }\n+     }\n+ }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}