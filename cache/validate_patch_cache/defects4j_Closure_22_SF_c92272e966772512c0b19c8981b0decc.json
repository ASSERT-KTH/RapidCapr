{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n.isEmpty() || n.isComma() || n.isBlock() || NodeUtil.isStatementBlock(n)) {\n    return;\n  }\n\n  if (!isRemovable(n, parent, t.getCompiler())) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n  if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    } else if (n.isExprResult()) {\n      return;\n    }\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n          \"' operator is not being used.\";\n    }\n    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}\n\nprivate boolean isRemovable(Node n, Node parent, Compiler compiler) {\n  if (parent != null) {\n    if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.BLOCK || parent.getType() == Token.FOR || parent.getType() == Token.WHILE) {\n      return false;\n    }\n    if (parent.getType() == Token.COMMA) {\n      Node grandParent = parent.getParent();\n      if (grandParent.isCall() && parent == grandParent.getFirstChild() && grandParent.getParent().getType() != Token.EXPR_RESULT) {\n        // Do not remove statements of the form `(0, fn)()`.\n        Node firstGrandChild = grandParent.getFirstChild();\n        if (!firstGrandChild.isNumber() || firstGrandChild.getDouble() != 0) {\n          return false;\n        }\n      }\n    }\n    if (n.isName() && parent.isForIn() && parent.getFirstChild() == n) {\n      Node declaredType = parent.getNext().getFirstChild();\n      return declaredType == null || !declaredType.getBooleanProp(Node.IS_CONSTANT_NAME);\n    }\n    if (parent.isCall() && NodeUtil.isGet(parent.getFirstChild())) {\n      Property prop = parent.getFirstFirstChild().getPropInferredType().getProperty(parent.getSecondChild().getString());\n      if (prop != null) {\n        JSType type = prop.getType().restrictByNotNullOrUndefined();\n        if (type.isFunctionType() || type.isUnknownType()) {\n          return false;\n        }\n      }\n    }\n  }\n  return !NodeUtil.mayHaveSideEffects(n, compiler);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..a5ffafd5 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,78 +81,69 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n.isEmpty() || n.isComma() || n.isBlock() || NodeUtil.isStatementBlock(n)) {\n+    return;\n+  }\n \n-    if (parent == null) {\n-      return;\n-    }\n+  if (!isRemovable(n, parent, t.getCompiler())) {\n+    return;\n+  }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (parent.getType() == Token.COMMA) {\n-      Node gramps = parent.getParent();\n-      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n+  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n+  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n+\n+  if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n+    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+      return;\n+    } else if (n.isExprResult()) {\n       return;\n-        }\n     }\n+    String msg = \"This code lacks side-effects. Is there a bug?\";\n+    if (n.isString()) {\n+      msg = \"Is there a missing '+' on the previous line?\";\n+    } else if (isSimpleOp) {\n+      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n+          \"' operator is not being used.\";\n+    }\n+    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+    if (!NodeUtil.isStatement(n)) {\n+      problemNodes.add(n);\n+    }\n+  }\n+}\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n+private boolean isRemovable(Node n, Node parent, Compiler compiler) {\n+  if (parent != null) {\n+    if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.BLOCK || parent.getType() == Token.FOR || parent.getType() == Token.WHILE) {\n+      return false;\n+    }\n+    if (parent.getType() == Token.COMMA) {\n+      Node grandParent = parent.getParent();\n+      if (grandParent.isCall() && parent == grandParent.getFirstChild() && grandParent.getParent().getType() != Token.EXPR_RESULT) {\n+        // Do not remove statements of the form `(0, fn)()`.\n+        Node firstGrandChild = grandParent.getFirstChild();\n+        if (!firstGrandChild.isNumber() || firstGrandChild.getDouble() != 0) {\n+          return false;\n         }\n       }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n-      } else {\n-      return;\n-      }\n     }\n-\n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-        return;\n-      } else if (n.isExprResult()) {\n-        return;\n-      }\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n-\n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n+    if (n.isName() && parent.isForIn() && parent.getFirstChild() == n) {\n+      Node declaredType = parent.getNext().getFirstChild();\n+      return declaredType == null || !declaredType.getBooleanProp(Node.IS_CONSTANT_NAME);\n+    }\n+    if (parent.isCall() && NodeUtil.isGet(parent.getFirstChild())) {\n+      Property prop = parent.getFirstFirstChild().getPropInferredType().getProperty(parent.getSecondChild().getString());\n+      if (prop != null) {\n+        JSType type = prop.getType().restrictByNotNullOrUndefined();\n+        if (type.isFunctionType() || type.isUnknownType()) {\n+          return false;\n+        }\n       }\n     }\n   }\n+  return !NodeUtil.mayHaveSideEffects(n, compiler);\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}