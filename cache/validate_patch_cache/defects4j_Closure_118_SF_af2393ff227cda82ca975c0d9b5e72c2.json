{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        // Maybe STRING, GET, SET\n\n        // Do not rename computed properties.\n        if (child.isComputedProp()) {\n          continue;\n        }\n\n        // We should never see a mix of numbers and strings.\n        String name = null;\n        if (child.isString()) {\n          name = child.getString();\n        } else {\n          TypeI type = typeSystem.getType(getScope(), n);\n          JSType subtype = Preconditions.checkNotNull(\n              type, \"Type of %s was null\", child.toString(internals()));\n          if (subtype.isEnumType()) {\n            nodeToEnumName.put(child, enumNameFromNode(child));\n            enumToProcessedName.put(nodeToEnumName.get(child), child.getString());\n          }\n          continue;\n        }\n\n        T type = typeSystem.getType(getScope(), n, name);\n        Property prop = getProperty(name);\n\n        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..a93953b9 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -488,18 +488,33 @@ class DisambiguateProperties<T> implements CompilerPass {\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n         // Maybe STRING, GET, SET\n \n+        // Do not rename computed properties.\n+        if (child.isComputedProp()) {\n+          continue;\n+        }\n+\n         // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n+        String name = null;\n+        if (child.isString()) {\n+          name = child.getString();\n+        } else {\n+          TypeI type = typeSystem.getType(getScope(), n);\n+          JSType subtype = Preconditions.checkNotNull(\n+              type, \"Type of %s was null\", child.toString(internals()));\n+          if (subtype.isEnumType()) {\n+            nodeToEnumName.put(child, enumNameFromNode(child));\n+            enumToProcessedName.put(nodeToEnumName.get(child), child.getString());\n+          }\n+          continue;\n+        }\n \n+        T type = typeSystem.getType(getScope(), n, name);\n         Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n+\n+        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n           // TODO(user): It doesn't look like the user can do much in this\n           // case right now.\n           if (propertiesToErrorFor.containsKey(name)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}