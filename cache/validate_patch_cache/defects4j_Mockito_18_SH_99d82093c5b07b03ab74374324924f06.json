{
    "patch": "@Test\npublic void should_return_empty_iterable() throws Exception {\n    MyClassUnderTest myObject = new MyClassUnderTest();\n    MethodInvocation values = mockMethodInvocation(myObject, \"myMethodUnderTest\");\n    when(values.getMethod()).thenReturn(MyClassUnderTest.class.getMethod(\"myMethodUnderTest\"));\n\n    Object returnValue = values.getMocker().getMockControl().returnValueFor(Object.class);\n    when(values.getMocker().returnValue()).thenReturn(returnValue);\n\n    Iterable iterable = (Iterable) values.returnValueFor(Iterable.class);\n\n    // Check if null, then check if empty\n    assertNotNull(iterable);\n    assertFalse(iterable.iterator().hasNext());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}