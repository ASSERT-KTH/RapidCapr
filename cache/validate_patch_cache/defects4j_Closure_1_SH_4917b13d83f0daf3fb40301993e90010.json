{
    "patch": "    \n    Preconditions.checkState(function.isFunction());\n\n    // Check if the function has more than one argument\n    Node argList = getFunctionArgList(function);\n    if (argList.getChildCount() <= 1) {\n        return;\n    }\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        boolean isReferenced = false;\n        for (Ref ref : getReferences(fnScope, lastArg.getString())) {\n          if (!ref.isLocal()) {\n            isReferenced = true;\n            break;\n          }\n        }\n        if (!isReferenced) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..38299240 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,34 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    Preconditions.checkState(function.isFunction());\n+\n+    // Check if the function has more than one argument\n+    Node argList = getFunctionArgList(function);\n+    if (argList.getChildCount() <= 1) {\n+        return;\n+    }\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        boolean isReferenced = false;\n+        for (Ref ref : getReferences(fnScope, lastArg.getString())) {\n+          if (!ref.isLocal()) {\n+            isReferenced = true;\n+            break;\n+          }\n+        }\n+        if (!isReferenced) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}