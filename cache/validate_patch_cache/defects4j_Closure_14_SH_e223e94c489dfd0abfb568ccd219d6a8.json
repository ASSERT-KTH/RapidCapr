{
    "patch": "if (cfa != null) {\n    List<Node> finallyNodes = cfa.finallyMap.get(parent);\n    if (finallyNodes != null) {\n        for (Node currentFinallyNode : finallyNodes) {\n            if (currentFinallyNode != null) {\n                cfa.createEdge(fromNode, Branch.UNCOND, currentFinallyNode);\n            }\n        }\n    }\n}\nreturn computeFollowNode(fromNode, parent, cfa);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..10febec4 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,17 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+    List<Node> finallyNodes = cfa.finallyMap.get(parent);\n+    if (finallyNodes != null) {\n+        for (Node currentFinallyNode : finallyNodes) {\n+            if (currentFinallyNode != null) {\n+                cfa.createEdge(fromNode, Branch.UNCOND, currentFinallyNode);\n+            }\n+        }\n+    }\n+}\n+return computeFollowNode(fromNode, parent, cfa);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}