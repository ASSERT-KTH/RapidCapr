{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.getType() == Token.LABEL) {\n        Node labelFirstChild = n.getFirstChild();\n        // Check if label has an empty statement\n        if (labelFirstChild.getType() == Token.EMPTY && labelFirstChild.getNext() != null) {\n            int type = labelFirstChild.getNext().getType();\n            return (type == Token.FUNCTION || type == Token.DO);\n        }\n    } else if (n.getType() == Token.BLOCK) {\n        int numOfChildren = 0;\n        Node child = n.getFirstChild();\n        while (child != null) {\n            if (child.getType() != Token.EMPTY) {\n                numOfChildren++;\n            }\n            if (numOfChildren > 1) {\n                return false;\n            }\n            child = child.getNext();\n        }\n        return numOfChildren == 1 && isOneExactlyFunctionOrDo(n.getFirstChild());\n    }\n    return n.getType() == Token.FUNCTION || n.getType() == Token.DO;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..2beb79dc 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,30 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    if (n.getType() == Token.LABEL) {\n+        Node labelFirstChild = n.getFirstChild();\n+        // Check if label has an empty statement\n+        if (labelFirstChild.getType() == Token.EMPTY && labelFirstChild.getNext() != null) {\n+            int type = labelFirstChild.getNext().getType();\n+            return (type == Token.FUNCTION || type == Token.DO);\n+        }\n+    } else if (n.getType() == Token.BLOCK) {\n+        int numOfChildren = 0;\n+        Node child = n.getFirstChild();\n+        while (child != null) {\n+            if (child.getType() != Token.EMPTY) {\n+                numOfChildren++;\n+            }\n+            if (numOfChildren > 1) {\n+                return false;\n+            }\n+            child = child.getNext();\n+        }\n+        return numOfChildren == 1 && isOneExactlyFunctionOrDo(n.getFirstChild());\n+    }\n+    return n.getType() == Token.FUNCTION || n.getType() == Token.DO;\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "junit.framework.ComparisonFailure: expected:<if(e1)[{A:function goo(){return true}]}> but was:<if(e1)[A:function goo(){return true]}>",
    "test_result": "FAIL"
}