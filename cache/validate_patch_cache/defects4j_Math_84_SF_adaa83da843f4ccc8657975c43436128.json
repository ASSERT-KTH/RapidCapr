{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        // Gets the number of search parameters:\n        final int n = simplex[0].getPoint().length;\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex.clone();\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // check if we are close to the target\n                final double previousBest = best.getValue();\n                final double currentBest = reflected.getValue();\n                final double[] previous = best.getPoint();\n                final double[] reflectedArray = reflected.getPoint();\n                final double delta = FastMath.abs(currentBest - previousBest);\n\n                if (delta <= functionRelativeTolerance * (FastMath.abs(previousBest) + FastMath.abs(currentBest)) * 0.5 + this.relativeThreshold) {\n                    simplex = original;\n                    return;\n                }\n\n                // expansion\n                RealPointValuePair extended;\n                final double[] reflected2 = reflectedArray.clone();\n                for (int i = 0; i < n; i++) {\n                    reflected2[i] = centroid[i] + K * (reflected2[i] - centroid[i]);\n                }\n                extended = new RealPointValuePair(reflected2, computeObjectiveValue(reflected2));\n                if (comparator.compare(extended, reflected) < 0) {\n                    simplex = replaceWorst(original, extended, comparator);\n                    continue;\n                }\n            }\n\n            RealPointValuePair contracted;\n            // check for a contraction\n            if (comparator.compare(reflected, worst) >= 0) {\n                final double[] reflectedArray = reflected.getPoint();\n                boolean inside = true;\n                for (int i = 0; i < n; i++) {\n                    inside &= (reflectedArray[i] >= lowerDifference[i]) &&\n                            (reflectedArray[i] <= upperDifference[i]);\n                }\n                if (inside) {\n                    contracted = new RealPointValuePair(reflectedArray,\n                                                         computeObjectiveValue(reflectedArray));\n                } else {\n                    contracted = best;\n                }\n            } else {\n                final double[] bestArray = best.getPoint();\n                contracted = new RealPointValuePair(bestArray, computeObjectiveValue(bestArray));\n            }\n            if (comparator.compare(contracted, best) < 0) {\n                simplex = replaceWorst(original, contracted, comparator);\n                continue;\n            }\n\n            // Perform a shrink\n            simplex = shrink(original, comparator);\n\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..a5d866ac2 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,44 +58,76 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+        // Gets the number of search parameters:\n+        final int n = simplex[0].getPoint().length;\n \n         while (true) {\n \n             incrementIterationsCounter();\n \n             // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n+            final RealPointValuePair[] original = simplex.clone();\n             final RealPointValuePair best = original[0];\n \n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n             if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+                // check if we are close to the target\n+                final double previousBest = best.getValue();\n+                final double currentBest = reflected.getValue();\n+                final double[] previous = best.getPoint();\n+                final double[] reflectedArray = reflected.getPoint();\n+                final double delta = FastMath.abs(currentBest - previousBest);\n \n-                return;\n+                if (delta <= functionRelativeTolerance * (FastMath.abs(previousBest) + FastMath.abs(currentBest)) * 0.5 + this.relativeThreshold) {\n+                    simplex = original;\n+                    return;\n+                }\n \n+                // expansion\n+                RealPointValuePair extended;\n+                final double[] reflected2 = reflectedArray.clone();\n+                for (int i = 0; i < n; i++) {\n+                    reflected2[i] = centroid[i] + K * (reflected2[i] - centroid[i]);\n+                }\n+                extended = new RealPointValuePair(reflected2, computeObjectiveValue(reflected2));\n+                if (comparator.compare(extended, reflected) < 0) {\n+                    simplex = replaceWorst(original, extended, comparator);\n+                    continue;\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            RealPointValuePair contracted;\n+            // check for a contraction\n+            if (comparator.compare(reflected, worst) >= 0) {\n+                final double[] reflectedArray = reflected.getPoint();\n+                boolean inside = true;\n+                for (int i = 0; i < n; i++) {\n+                    inside &= (reflectedArray[i] >= lowerDifference[i]) &&\n+                            (reflectedArray[i] <= upperDifference[i]);\n+                }\n+                if (inside) {\n+                    contracted = new RealPointValuePair(reflectedArray,\n+                                                         computeObjectiveValue(reflectedArray));\n+                } else {\n+                    contracted = best;\n+                }\n+            } else {\n+                final double[] bestArray = best.getPoint();\n+                contracted = new RealPointValuePair(bestArray, computeObjectiveValue(bestArray));\n+            }\n             if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex = replaceWorst(original, contracted, comparator);\n+                continue;\n             }\n \n-        }\n+            // Perform a shrink\n+            simplex = shrink(original, comparator);\n \n+        }\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}