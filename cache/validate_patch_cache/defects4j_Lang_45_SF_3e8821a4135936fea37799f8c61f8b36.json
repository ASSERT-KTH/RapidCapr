{
    "patch": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    // Initial parameter checks\n    if (str == null) {\n        return null;\n    }\n    if (str.length() == 0) {\n        return \"\";\n    }\n\n    int strLength = str.length();\n\n    // Set upper limit to string length if it's -1 or greater than string length\n    if (upper == -1 || upper > strLength) {\n        upper = strLength;\n    }\n\n    // Raise upper limit to lower if it's less than lower\n    if (upper < lower) {\n        upper = lower;\n    }\n\n    // Return full string if lower is greater than or equal to string length\n    if (lower >= strLength) {\n        return str;\n    }\n\n    int endIndex = -1;\n    int abbreviatedLength = upper - lower;\n\n    // Look for index of space after lower index\n    for (int i = lower; i < upper; i++) {\n        if (str.charAt(i) == ' ') {\n            endIndex = i;\n            break;\n        }\n    }\n\n    // If no space is found, use upper index as the end of the substring\n    if (endIndex == -1) {\n        endIndex = upper;\n    }\n\n    // Create abbreviated substring and append appendToEnd\n    String abbreviated = str.substring(lower, endIndex);\n    if (upper < strLength) {\n        abbreviated += appendToEnd;\n    }\n\n    return abbreviated;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..7c8d3d8a 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -602,43 +602,55 @@ public class WordUtils {\n      * @return the abbreviated String.\n      * @since 2.4\n      */\n-    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n-        // initial parameter checks\n-        if (str == null) {\n-            return null;\n-        }\n-        if (str.length() == 0) {\n-            return StringUtils.EMPTY;\n-        }\n+public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n+    // Initial parameter checks\n+    if (str == null) {\n+        return null;\n+    }\n+    if (str.length() == 0) {\n+        return \"\";\n+    }\n \n-        // if the lower value is greater than the length of the string,\n-        // set to the length of the string\n-        // if the upper value is -1 (i.e. no limit) or is greater\n-        // than the length of the string, set to the length of the string\n-        if (upper == -1 || upper > str.length()) {\n-            upper = str.length();\n-        }\n-        // if upper is less than lower, raise it to lower\n-        if (upper < lower) {\n-            upper = lower;\n-        }\n+    int strLength = str.length();\n \n-        StringBuffer result = new StringBuffer();\n-        int index = StringUtils.indexOf(str, \" \", lower);\n-        if (index == -1) {\n-            result.append(str.substring(0, upper));\n-            // only if abbreviation has occured do we append the appendToEnd value\n-            if (upper != str.length()) {\n-                result.append(StringUtils.defaultString(appendToEnd));\n-            }\n-        } else if (index > upper) {\n-            result.append(str.substring(0, upper));\n-            result.append(StringUtils.defaultString(appendToEnd));\n-        } else {\n-            result.append(str.substring(0, index));\n-            result.append(StringUtils.defaultString(appendToEnd));\n+    // Set upper limit to string length if it's -1 or greater than string length\n+    if (upper == -1 || upper > strLength) {\n+        upper = strLength;\n+    }\n+\n+    // Raise upper limit to lower if it's less than lower\n+    if (upper < lower) {\n+        upper = lower;\n+    }\n+\n+    // Return full string if lower is greater than or equal to string length\n+    if (lower >= strLength) {\n+        return str;\n+    }\n+\n+    int endIndex = -1;\n+    int abbreviatedLength = upper - lower;\n+\n+    // Look for index of space after lower index\n+    for (int i = lower; i < upper; i++) {\n+        if (str.charAt(i) == ' ') {\n+            endIndex = i;\n+            break;\n         }\n-        return result.toString();\n     }\n \n+    // If no space is found, use upper index as the end of the substring\n+    if (endIndex == -1) {\n+        endIndex = upper;\n+    }\n+\n+    // Create abbreviated substring and append appendToEnd\n+    String abbreviated = str.substring(lower, endIndex);\n+    if (upper < strLength) {\n+        abbreviated += appendToEnd;\n+    }\n+\n+    return abbreviated;\n+}\n+\n }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[01234]> but was:<[]>",
    "test_result": "FAIL"
}