{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n    RealMatrix L = cholesky.getL();\n    int size = m.getRowDimension();\n    RealMatrix diagonal = MatrixUtils.createRealIdentityMatrix(size);\n    \n    for (int i = 0; i < size; i++) {\n        double diagonalValue = L.getEntry(i, i);\n        if (diagonalValue < 0) {\n            throw new IllegalArgumentException(\"Matrix must be positive semi-definite.\");\n        } else if (diagonalValue > 0) {\n            diagonal.setEntry(i, i, Math.sqrt(diagonalValue));\n        }\n    }\n    \n    return L.multiply(diagonal).multiply(L.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5edbc9fa3 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n+    RealMatrix L = cholesky.getL();\n+    int size = m.getRowDimension();\n+    RealMatrix diagonal = MatrixUtils.createRealIdentityMatrix(size);\n+    \n+    for (int i = 0; i < size; i++) {\n+        double diagonalValue = L.getEntry(i, i);\n+        if (diagonalValue < 0) {\n+            throw new IllegalArgumentException(\"Matrix must be positive semi-definite.\");\n+        } else if (diagonalValue > 0) {\n+            diagonal.setEntry(i, i, Math.sqrt(diagonalValue));\n+        }\n     }\n+    \n+    return L.multiply(diagonal).multiply(L.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}