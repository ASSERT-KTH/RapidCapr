{
    "patch": "Calendar c = Calendar.getInstance();\nc.setTimeZone(mTimeZone);\nc.setTime(date);\nc.setMinimalDaysInFirstWeek(4);\nc.setFirstDayOfWeek(Calendar.MONDAY);\nint year = c.get(Calendar.YEAR);\nint weekOfYear = c.get(Calendar.WEEK_OF_YEAR);\nif (c.get(Calendar.DAY_OF_WEEK) != Calendar.MONDAY && (weekOfYear == 1 || weekOfYear > 51)) {\n    int dow = c.get(Calendar.DAY_OF_WEEK) - 1;\n    int delta = (dow < 0 ? 7 : 0) - dow;\n    c.add(Calendar.DAY_OF_YEAR, delta);\n    weekOfYear = c.get(Calendar.WEEK_OF_YEAR);\n    year = c.get(Calendar.YEAR);\n}\nc.set(Calendar.YEAR, year);\nc.set(Calendar.WEEK_OF_YEAR, weekOfYear);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex e30da2a5..0d0bc5d2 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -817,7 +817,22 @@ public class FastDateFormat extends Format {\n      * @return the formatted string\n      */\n     public String format(Date date) {\n-        Calendar c = new GregorianCalendar(mTimeZone);\n+Calendar c = Calendar.getInstance();\n+c.setTimeZone(mTimeZone);\n+c.setTime(date);\n+c.setMinimalDaysInFirstWeek(4);\n+c.setFirstDayOfWeek(Calendar.MONDAY);\n+int year = c.get(Calendar.YEAR);\n+int weekOfYear = c.get(Calendar.WEEK_OF_YEAR);\n+if (c.get(Calendar.DAY_OF_WEEK) != Calendar.MONDAY && (weekOfYear == 1 || weekOfYear > 51)) {\n+    int dow = c.get(Calendar.DAY_OF_WEEK) - 1;\n+    int delta = (dow < 0 ? 7 : 0) - dow;\n+    c.add(Calendar.DAY_OF_YEAR, delta);\n+    weekOfYear = c.get(Calendar.WEEK_OF_YEAR);\n+    year = c.get(Calendar.YEAR);\n+}\n+c.set(Calendar.YEAR, year);\n+c.set(Calendar.WEEK_OF_YEAR, weekOfYear);\n         c.setTime(date);\n         return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n     }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}