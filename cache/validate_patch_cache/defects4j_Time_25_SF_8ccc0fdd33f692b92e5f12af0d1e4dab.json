{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    long instantAdjusted = instantLocal - initialOffset;\n    final int offsetAfterAdjustment = getOffset(instantAdjusted);\n    \n    if (initialOffset == offsetAfterAdjustment) {\n        return initialOffset;\n    }\n\n    long nextTransition = nextTransition(instantAdjusted);\n    if (nextTransition == instantAdjusted - (long) initialOffset) {\n        // We are exactly at the DST transition point, and need to check if we are in a gap or overlap\n        int offsetAtNextTransition = getOffset(nextTransition);\n        int offsetAtNextInstant = getOffset(nextTransition - 1);\n        if(offsetAtNextTransition > offsetAtNextInstant){\n            // We are in a gap, meaning we need to advance our time to the next offset\n            instantAdjusted = nextTransition + 1;\n        }else if(offsetAtNextTransition < offsetAtNextInstant){\n            // We are in an overlap, meaning we need to rewind our time to the start of the overlap\n            instantAdjusted = nextTransition - 1;\n        } else {\n            // Both of these points have the same offset and we can return the current offset\n            return offsetAfterAdjustment;\n        }\n    }\n    \n    // We want to find the next transition point and check if the offset there matches the current offset \n    long nextTransition = nextTransition(instantAdjusted);\n    long nextInstantAdjusted = nextTransition - initialOffset;\n\n    if (nextTransition == instantAdjusted || nextInstantAdjusted > instantLocal) {\n        // We cannot find the next transition point or it is later than our target time, \n        // we return the current adjusted offset\n        return offsetAfterAdjustment;\n    }\n    \n    int nextOffset = getOffset(nextInstantAdjusted);\n    if (nextOffset == offsetAfterAdjustment) {\n        // The offset at the next transition matches the current adjusted offset, so we return it\n        return offsetAfterAdjustment;\n    } else {\n        // The offset at the next transition doesn't match the current adjusted offset, so we need to \n        // go back to the original offset \n        return initialOffset;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..38cf5cb3 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,52 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    long instantAdjusted = instantLocal - initialOffset;\n+    final int offsetAfterAdjustment = getOffset(instantAdjusted);\n+    \n+    if (initialOffset == offsetAfterAdjustment) {\n+        return initialOffset;\n+    }\n+\n+    long nextTransition = nextTransition(instantAdjusted);\n+    if (nextTransition == instantAdjusted - (long) initialOffset) {\n+        // We are exactly at the DST transition point, and need to check if we are in a gap or overlap\n+        int offsetAtNextTransition = getOffset(nextTransition);\n+        int offsetAtNextInstant = getOffset(nextTransition - 1);\n+        if(offsetAtNextTransition > offsetAtNextInstant){\n+            // We are in a gap, meaning we need to advance our time to the next offset\n+            instantAdjusted = nextTransition + 1;\n+        }else if(offsetAtNextTransition < offsetAtNextInstant){\n+            // We are in an overlap, meaning we need to rewind our time to the start of the overlap\n+            instantAdjusted = nextTransition - 1;\n+        } else {\n+            // Both of these points have the same offset and we can return the current offset\n+            return offsetAfterAdjustment;\n         }\n-        return offsetAdjusted;\n     }\n+    \n+    // We want to find the next transition point and check if the offset there matches the current offset \n+    long nextTransition = nextTransition(instantAdjusted);\n+    long nextInstantAdjusted = nextTransition - initialOffset;\n+\n+    if (nextTransition == instantAdjusted || nextInstantAdjusted > instantLocal) {\n+        // We cannot find the next transition point or it is later than our target time, \n+        // we return the current adjusted offset\n+        return offsetAfterAdjustment;\n+    }\n+    \n+    int nextOffset = getOffset(nextInstantAdjusted);\n+    if (nextOffset == offsetAfterAdjustment) {\n+        // The offset at the next transition matches the current adjusted offset, so we return it\n+        return offsetAfterAdjustment;\n+    } else {\n+        // The offset at the next transition doesn't match the current adjusted offset, so we need to \n+        // go back to the original offset \n+        return initialOffset;\n+    }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: variable nextTransition is already defined in method getOffsetFromLocal(long)",
    "test_result": "ERROR"
}