{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n\n    int totalDays = getDays();\n    totalDays += getWeeks() * 7;\n\n    int months = 0;\n    int years = 0;\n\n    if (type.isSupported(DurationFieldType.months())) {\n        months = (getYears() * 12) + getMonths();\n\n        if (type.isSupported(DurationFieldType.weeks())) {\n            totalDays += (months * 30) + getDays();\n            months = 0;\n            years = totalDays / 365;\n            totalDays %= 365;\n\n            if (totalDays > 30) {\n                int estimation = totalDays / 30;\n                months += estimation;\n                totalDays = totalDays - estimation * 30;\n            }\n        } else {\n            years = months / 12;\n            months %= 12;\n        }\n    } else if (type.isSupported(DurationFieldType.weeks())) {\n        totalDays += getYears() * 365;\n        years = totalDays / 365;\n        totalDays %= 365;\n        months = totalDays / 30;\n        totalDays %= 30;\n    } else {\n        years = totalDays / 365;\n        totalDays %= 365;\n        months = totalDays / 30;\n        totalDays %= 30;\n    }\n\n    int weeks = totalDays / 7;\n    int remainingDays = totalDays % 7;\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC())\n            .withYears(years)\n            .withMonths(months)\n            .withWeeks(weeks)\n            .withDays(remainingDays);\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..85f062d6 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,61 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    long millis = getMillis();\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+\n+    int totalDays = getDays();\n+    totalDays += getWeeks() * 7;\n+\n+    int months = 0;\n+    int years = 0;\n+\n+    if (type.isSupported(DurationFieldType.months())) {\n+        months = (getYears() * 12) + getMonths();\n+\n+        if (type.isSupported(DurationFieldType.weeks())) {\n+            totalDays += (months * 30) + getDays();\n+            months = 0;\n+            years = totalDays / 365;\n+            totalDays %= 365;\n+\n+            if (totalDays > 30) {\n+                int estimation = totalDays / 30;\n+                months += estimation;\n+                totalDays = totalDays - estimation * 30;\n             }\n+        } else {\n+            years = months / 12;\n+            months %= 12;\n         }\n-        return result;\n-    }\n+    } else if (type.isSupported(DurationFieldType.weeks())) {\n+        totalDays += getYears() * 365;\n+        years = totalDays / 365;\n+        totalDays %= 365;\n+        months = totalDays / 30;\n+        totalDays %= 30;\n+    } else {\n+        years = totalDays / 365;\n+        totalDays %= 365;\n+        months = totalDays / 30;\n+        totalDays %= 30;\n+    }\n+\n+    int weeks = totalDays / 7;\n+    int remainingDays = totalDays % 7;\n+\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC())\n+            .withYears(years)\n+            .withMonths(months)\n+            .withWeeks(weeks)\n+            .withDays(remainingDays);\n+\n+    return result;\n+}\n \n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P2W5D> but was:<P1M1D>",
    "test_result": "FAIL"
}