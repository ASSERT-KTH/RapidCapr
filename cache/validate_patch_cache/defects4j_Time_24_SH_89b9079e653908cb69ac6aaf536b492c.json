{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n\n        // adjust base year for computing the millis if the first field is month or day\n        DateTimeField firstField = savedFields[0].iField;\n        if (i == 0 && (firstField.getType().equals(DateTimeFieldType.monthOfYear())\n                || firstField.getType().equals(DateTimeFieldType.dayOfMonth()))) {\n            int yearToUse = Math.max(0, iDefaultYear - 1);\n            long newMillis = setYear(millis, yearToUse);\n            if (newMillis == millis) {\n                newMillis = setYear(millis, iDefaultYear);\n            }\n            millis = newMillis;\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n\n    // adjust base year for computing the millis if the first field is year or weekyear\n    DateTimeField firstField = savedFields[0].iField;\n    if (iSavedFieldsCount > 0 && (firstField.getType().equals(DateTimeFieldType.year())\n            || firstField.getType().equals(DateTimeFieldType.weekyear()))) {\n        int yearToUse = Math.max(0, iDefaultYear - 1);\n        long newMillis = setYear(millis, yearToUse);\n        if (newMillis == millis) {\n            newMillis = setYear(millis, iDefaultYear);\n        }\n        millis = newMillis;\n        \n        for (int i = 0; i < count; i++) {\n            if (savedFields[i].iField.getType().equals(DateTimeFieldType.weekyear())) {\n                millis = savedFields[i].set(millis, resetFields);\n                break;\n            }\n        }\n    } else {\n        throw e;\n    }\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n        throw new IllegalArgumentException(message, e);\n    }\n    throw e;\n}\n\n// Helper method to set the year without changing other fields\nprivate long setYear(long millis, int year) {\n    int millisOfFirst = DateTimeUtils.getChronology(iChrono).dayOfYear().\n            get(millis, DateTimeUtils.getChronology(iChrono).year().get(millis));\n    int millisOfNewYear = DateTimeUtils.getChronology(iChrono).dayOfYear().\n            set(year, 1, 1);\n    return millis + (millisOfNewYear - millisOfFirst);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..74c4f328 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,63 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+\n+        // adjust base year for computing the millis if the first field is month or day\n+        DateTimeField firstField = savedFields[0].iField;\n+        if (i == 0 && (firstField.getType().equals(DateTimeFieldType.monthOfYear())\n+                || firstField.getType().equals(DateTimeFieldType.dayOfMonth()))) {\n+            int yearToUse = Math.max(0, iDefaultYear - 1);\n+            long newMillis = setYear(millis, yearToUse);\n+            if (newMillis == millis) {\n+                newMillis = setYear(millis, iDefaultYear);\n+            }\n+            millis = newMillis;\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+\n+    // adjust base year for computing the millis if the first field is year or weekyear\n+    DateTimeField firstField = savedFields[0].iField;\n+    if (iSavedFieldsCount > 0 && (firstField.getType().equals(DateTimeFieldType.year())\n+            || firstField.getType().equals(DateTimeFieldType.weekyear()))) {\n+        int yearToUse = Math.max(0, iDefaultYear - 1);\n+        long newMillis = setYear(millis, yearToUse);\n+        if (newMillis == millis) {\n+            newMillis = setYear(millis, iDefaultYear);\n+        }\n+        millis = newMillis;\n+        \n+        for (int i = 0; i < count; i++) {\n+            if (savedFields[i].iField.getType().equals(DateTimeFieldType.weekyear())) {\n+                millis = savedFields[i].set(millis, resetFields);\n+                break;\n+            }\n+        }\n+    } else {\n+        throw e;\n+    }\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        String message = \"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage();\n+        throw new IllegalArgumentException(message, e);\n+    }\n+    throw e;\n+}\n+\n+// Helper method to set the year without changing other fields\n+private long setYear(long millis, int year) {\n+    int millisOfFirst = DateTimeUtils.getChronology(iChrono).dayOfYear().\n+            get(millis, DateTimeUtils.getChronology(iChrono).year().get(millis));\n+    int millisOfNewYear = DateTimeUtils.getChronology(iChrono).dayOfYear().\n+            set(year, 1, 1);\n+    return millis + (millisOfNewYear - millisOfFirst);\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}