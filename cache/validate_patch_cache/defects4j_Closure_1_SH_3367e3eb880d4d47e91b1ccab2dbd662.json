{
    "patch": "    if (NodeUtil.getFunctionBody(function).hasChildren()) {\n      // Build a map of args which are referenced by name.\n      Map<String, Var> referenced = Maps.newLinkedHashMap();\n      NodeTraversal.traverse(compiler, function, new AbstractShallowCallback() {\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && NodeUtil.isLhsOfAssign(parent)) {\n            Scope scope = t.getScope();\n            Var var = scope.getVar(n.getString());\n            if (var != null && var.getScope().getRootNode() == function) {\n              FunctionTypeI functionType = var.getType().toMaybeFunctionType();\n              if (functionType != null) {\n                for (Node arg : getFunctionArgList(functionType).children()) {\n                  String argName = arg.getString();\n                  if (n.getString().equals(argName)) {\n                    referenced.put(argName, var);\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n      });",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..164edbfa 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,30 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    if (NodeUtil.getFunctionBody(function).hasChildren()) {\n+      // Build a map of args which are referenced by name.\n+      Map<String, Var> referenced = Maps.newLinkedHashMap();\n+      NodeTraversal.traverse(compiler, function, new AbstractShallowCallback() {\n+        @Override\n+        public void visit(NodeTraversal t, Node n, Node parent) {\n+          if (n.isName() && NodeUtil.isLhsOfAssign(parent)) {\n+            Scope scope = t.getScope();\n+            Var var = scope.getVar(n.getString());\n+            if (var != null && var.getScope().getRootNode() == function) {\n+              FunctionTypeI functionType = var.getType().toMaybeFunctionType();\n+              if (functionType != null) {\n+                for (Node arg : getFunctionArgList(functionType).children()) {\n+                  String argName = arg.getString();\n+                  if (n.getString().equals(argName)) {\n+                    referenced.put(argName, var);\n+                    break;\n+                  }\n+                }\n+              }\n+            }\n+          }\n+        }\n+      });\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}