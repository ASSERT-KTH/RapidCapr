{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n      // Strip unreferenced arguments from function calls.\n      Node functionBody = function.getLastChild();\n      while (functionBody != null) {\n        if (NodeUtil.isFunctionCall(functionBody)) {\n          Node callArgList = functionBody.getFirstChild().getNext();\n          if (callArgList != null) {\n            // This function call has arguments.\n            for (Node currentArg = callArgList.getFirstChild(); currentArg != null; currentArg = currentArg.getNext()) {\n              if (NodeUtil.isName(currentArg)) {\n                Var callArgVar = fnScope.getVar(currentArg.getString());\n                if (!referenced.contains(callArgVar)) {\n                  callArgList.removeChild(currentArg);\n                  compiler.reportCodeChange();\n                }\n              }\n            }\n          }\n        }\n        functionBody = functionBody.getPrevious();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..fc8bc7c7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,52 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+      // Strip unreferenced arguments from function calls.\n+      Node functionBody = function.getLastChild();\n+      while (functionBody != null) {\n+        if (NodeUtil.isFunctionCall(functionBody)) {\n+          Node callArgList = functionBody.getFirstChild().getNext();\n+          if (callArgList != null) {\n+            // This function call has arguments.\n+            for (Node currentArg = callArgList.getFirstChild(); currentArg != null; currentArg = currentArg.getNext()) {\n+              if (NodeUtil.isName(currentArg)) {\n+                Var callArgVar = fnScope.getVar(currentArg.getString());\n+                if (!referenced.contains(callArgVar)) {\n+                  callArgList.removeChild(currentArg);\n+                  compiler.reportCodeChange();\n+                }\n+              }\n+            }\n+          }\n+        }\n+        functionBody = functionBody.getPrevious();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}