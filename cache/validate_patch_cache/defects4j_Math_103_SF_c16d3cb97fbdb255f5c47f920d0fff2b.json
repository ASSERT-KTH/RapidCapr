{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        throw new MathException(LocalizedFormats.CANNOT_COMPUTE_NORM_CUM_PROBABILITY_AT_NAN,\n                null);\n    }\n    if (x == Double.NEGATIVE_INFINITY) {\n        return 0.0;\n    }\n    if (x == Double.POSITIVE_INFINITY) {\n        return 1.0;\n    }\n    final double diff = x - mean;\n    final double deviation = standardDeviation * SQRT2;\n    if (FastMath.abs(diff) > deviation) {\n        return diff < 0 ? distribution.cumulativeProbability(x) :\n                1.0 - distribution.cumulativeProbability(x);\n    }\n    return 0.5 * Erf.erfc(-diff / (standardDeviation * ROOT2));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..480f9cfcd 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,25 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        throw new MathException(LocalizedFormats.CANNOT_COMPUTE_NORM_CUM_PROBABILITY_AT_NAN,\n+                null);\n     }\n+    if (x == Double.NEGATIVE_INFINITY) {\n+        return 0.0;\n+    }\n+    if (x == Double.POSITIVE_INFINITY) {\n+        return 1.0;\n+    }\n+    final double diff = x - mean;\n+    final double deviation = standardDeviation * SQRT2;\n+    if (FastMath.abs(diff) > deviation) {\n+        return diff < 0 ? distribution.cumulativeProbability(x) :\n+                1.0 - distribution.cumulativeProbability(x);\n+    }\n+    return 0.5 * Erf.erfc(-diff / (standardDeviation * ROOT2));\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}