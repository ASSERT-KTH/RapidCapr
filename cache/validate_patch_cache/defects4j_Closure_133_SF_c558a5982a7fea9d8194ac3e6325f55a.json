{
    "patch": "private String getRemainingJSDocLine() {\n    try {\n        String result = stream.getRemainingJSDocLine();\n        if (result == null || result.trim().isEmpty()) {\n            throw new IllegalStateException(\"Recorded bad position information\");\n        }\n        return result.trim();\n    } catch (NullPointerException e) {\n        throw new IllegalStateException(\"Recorded bad position information\", e);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..6e3afc1d 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,17 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n-    String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+private String getRemainingJSDocLine() {\n+    try {\n+        String result = stream.getRemainingJSDocLine();\n+        if (result == null || result.trim().isEmpty()) {\n+            throw new IllegalStateException(\"Recorded bad position information\");\n+        }\n+        return result.trim();\n+    } catch (NullPointerException e) {\n+        throw new IllegalStateException(\"Recorded bad position information\", e);\n+    }\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "java.lang.RuntimeException: java.lang.IllegalStateException: Recorded bad position information",
    "test_result": "FAIL"
}