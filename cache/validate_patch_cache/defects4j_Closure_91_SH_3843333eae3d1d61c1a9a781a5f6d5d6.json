{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGet(parent) &&\n          parent.getType() == Token.GETPROP &&\n          \"prototype\".equals(parent.getLastChild().getString())) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to $jscomp.scope.\n      if (NodeUtil.isGet(parent) &&\n          parent.getType() == Token.GETPROP &&\n          \"$jscomp\".equals(parent.getFirstChild().getQualifiedName()) &&\n          \"scope\".equals(parent.getLastChild().getString())) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting templatized.\n      if (NodeUtil.isGet(parent) &&\n          parent.getParent() != null &&\n          NodeUtil.isCall(parent.getParent()) &&\n          parent.getParent().getFirstChild() == parent &&\n          parent.getNext() != null &&\n          \"templatize\".equals(parent.getNext().getString())) {\n        return true;\n      }\n\n      return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..39af6567 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,33 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent) &&\n+          parent.getType() == Token.GETPROP &&\n+          \"prototype\".equals(parent.getLastChild().getString())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to $jscomp.scope.\n+      if (NodeUtil.isGet(parent) &&\n+          parent.getType() == Token.GETPROP &&\n+          \"$jscomp\".equals(parent.getFirstChild().getQualifiedName()) &&\n+          \"scope\".equals(parent.getLastChild().getString())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting templatized.\n+      if (NodeUtil.isGet(parent) &&\n+          parent.getParent() != null &&\n+          NodeUtil.isCall(parent.getParent()) &&\n+          parent.getParent().getFirstChild() == parent &&\n+          parent.getNext() != null &&\n+          \"templatize\".equals(parent.getNext().getString())) {\n+        return true;\n+      }\n+\n+      return true;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}