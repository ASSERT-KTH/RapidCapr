{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n\n    for (int i = 0; i < input.length(); i++) {\n        char c = input.charAt(i);\n\n        if (Character.isSurrogate(c)) {\n            // If we encounter a surrogate character, we can try to consume\n            // the next character to form a valid surrogate pair\n            if (i == input.length() - 1) {\n                // We've reached the end of the input, so just write out the\n                // surrogate character as-is\n                out.write(c);\n            } else {\n                char c2 = input.charAt(i + 1);\n                if (Character.isSurrogate(c2)) {\n                    // We have a valid surrogate pair, so write it out using the\n                    // appropriate escape sequence\n                    int codePoint = Character.toCodePoint(c, c2);\n                    out.write(String.format(\"&#x%X;\", codePoint));\n                    i++;\n                } else {\n                    // We have an invalid surrogate pair; just write out the\n                    // first character as-is and let the next iteration handle\n                    // the second character\n                    out.write(c);\n                }\n            }\n        } else {\n            // If the current character isn't a surrogate, just write it out\n            out.write(c);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..a7896730 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,45 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+\n+    for (int i = 0; i < input.length(); i++) {\n+        char c = input.charAt(i);\n+\n+        if (Character.isSurrogate(c)) {\n+            // If we encounter a surrogate character, we can try to consume\n+            // the next character to form a valid surrogate pair\n+            if (i == input.length() - 1) {\n+                // We've reached the end of the input, so just write out the\n+                // surrogate character as-is\n                 out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+            } else {\n+                char c2 = input.charAt(i + 1);\n+                if (Character.isSurrogate(c2)) {\n+                    // We have a valid surrogate pair, so write it out using the\n+                    // appropriate escape sequence\n+                    int codePoint = Character.toCodePoint(c, c2);\n+                    out.write(String.format(\"&#x%X;\", codePoint));\n+                    i++;\n+                } else {\n+                    // We have an invalid surrogate pair; just write out the\n+                    // first character as-is and let the next iteration handle\n+                    // the second character\n+                    out.write(c);\n+                }\n             }\n+        } else {\n+            // If the current character isn't a surrogate, just write it out\n+            out.write(c);\n         }\n     }\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}