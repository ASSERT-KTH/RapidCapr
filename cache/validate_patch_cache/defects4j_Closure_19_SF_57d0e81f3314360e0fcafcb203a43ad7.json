{
    "patch": "protected void declareNameInScope(FlowScope scope, Node node, JSType type) {\n    switch (node.getToken()) {\n      case NAME:\n        if (node.getParent() != null && node.getParent().isCatch()) {\n          scope.inferSlotType(node.getString(), type, false, DISSALOW_CONSTANT_REASSIGNMENT);\n        } else {\n          if (node.isVar() || scope.isKnownFunctionType(node.getString())\n              || node.getParent().isLet()) {\n            scope.inferSlotType(node.getString(), type);\n          } else {\n            scope.inferSlotType(node.getString(), type, true);\n          }\n        }\n        break;\n\n      case GETPROP:\n        String qualifiedName = node.getQualifiedName();\n        Preconditions.checkNotNull(\n            qualifiedName, \"getting qualified names requires a qualified name\");\n        JSType origType = node.getJSType();\n        origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;\n        scope.inferQualifiedSlot(node, qualifiedName, origType, type);\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n            node.toStringTree());\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0345c855..6e2351e1 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -154,23 +154,30 @@ public abstract class ChainableReverseAbstractInterpreter\n    * {@code node}. It must be possible to refine the type of the given node in\n    * the given scope, as determined by {@link #getTypeIfRefinable}.\n    */\n-  protected void declareNameInScope(FlowScope scope, Node node, JSType type) {\n-    switch (node.getType()) {\n-      case Token.NAME:\n-        scope.inferSlotType(node.getString(), type);\n+protected void declareNameInScope(FlowScope scope, Node node, JSType type) {\n+    switch (node.getToken()) {\n+      case NAME:\n+        if (node.getParent() != null && node.getParent().isCatch()) {\n+          scope.inferSlotType(node.getString(), type, false, DISSALOW_CONSTANT_REASSIGNMENT);\n+        } else {\n+          if (node.isVar() || scope.isKnownFunctionType(node.getString())\n+              || node.getParent().isLet()) {\n+            scope.inferSlotType(node.getString(), type);\n+          } else {\n+            scope.inferSlotType(node.getString(), type, true);\n+          }\n+        }\n         break;\n \n-      case Token.GETPROP:\n+      case GETPROP:\n         String qualifiedName = node.getQualifiedName();\n-        Preconditions.checkNotNull(qualifiedName);\n-\n+        Preconditions.checkNotNull(\n+            qualifiedName, \"getting qualified names requires a qualified name\");\n         JSType origType = node.getJSType();\n         origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;\n         scope.inferQualifiedSlot(node, qualifiedName, origType, type);\n         break;\n \n-        // \"this\" references aren't currently modeled in the CFG.\n-\n       default:\n         throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n             node.toStringTree());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}