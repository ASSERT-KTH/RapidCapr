{
    "patch": "        try {\n            for (int i = 0; i < count; i++) {\n                long newMillis = savedFields[i].set(millis, resetFields);\n                if (newMillis == millis) { // Check if fields have actually changed the value of millis\n                    continue;\n                }\n                if (resetFields && i > 0 && canBeLeapYear(iSavedFields[i-1], savedFields[i])) {\n                    int year = savedFields[0].iField.getType().getField(getChronology()).get(newMillis);\n                    int leapYears = getChronology().getLeapYears(year);\n                    int daysInYear = leapYears == 366 ? 366 : 365;\n                    int millisInYear = daysInYear * ISOChronology.MILLIS_PER_DAY;\n                    if (millisInYear < millis % millisInYear) { // Roll back the year\n                        newMillis = savedFields[i].set(newMillis - filler(year, leapYears), false);\n                    }\n                }\n                millis = newMillis;\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..0893c186 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,29 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                long newMillis = savedFields[i].set(millis, resetFields);\n+                if (newMillis == millis) { // Check if fields have actually changed the value of millis\n+                    continue;\n+                }\n+                if (resetFields && i > 0 && canBeLeapYear(iSavedFields[i-1], savedFields[i])) {\n+                    int year = savedFields[0].iField.getType().getField(getChronology()).get(newMillis);\n+                    int leapYears = getChronology().getLeapYears(year);\n+                    int daysInYear = leapYears == 366 ? 366 : 365;\n+                    int millisInYear = daysInYear * ISOChronology.MILLIS_PER_DAY;\n+                    if (millisInYear < millis % millisInYear) { // Roll back the year\n+                        newMillis = savedFields[i].set(newMillis - filler(year, leapYears), false);\n+                    }\n+                }\n+                millis = newMillis;\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}