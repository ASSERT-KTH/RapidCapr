{
    "patch": "import org.json.*;\nimport java.util.*;\n\npublic class TypedObjectCounter {\n\n    public double getTypedPercent(String json) {\n        List<Map<String, String>> objectList = new ArrayList<>();\n        int typedObjectsCount = 0;\n        int totalObjectsCount = 0;\n\n        try {\n            JSONArray jsonArray = new JSONArray(json);\n\n            for (int i=0; i<jsonArray.length(); i++) {\n                JSONObject object = jsonArray.getJSONObject(i);\n                Map<String, String> objectMap = new HashMap<>();\n\n                for (String key : object.keySet()) {\n                    String value = object.getString(key);\n                    objectMap.put(key, value);\n                }\n\n                objectList.add(objectMap);\n            }\n\n            for (Map<String, String> object : objectList) {\n                if (object.containsKey(\"type\")) {\n                    String type = object.get(\"type\");\n                    if (!type.trim().isEmpty()) {\n                        typedObjectsCount++;\n                    }\n                }\n                totalObjectsCount++;\n            }\n\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n\n        return totalObjectsCount == 0 ? 0 : (double) typedObjectsCount * 100 / totalObjectsCount;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..aa280c0c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,48 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import org.json.*;\n+import java.util.*;\n+\n+public class TypedObjectCounter {\n+\n+    public double getTypedPercent(String json) {\n+        List<Map<String, String>> objectList = new ArrayList<>();\n+        int typedObjectsCount = 0;\n+        int totalObjectsCount = 0;\n+\n+        try {\n+            JSONArray jsonArray = new JSONArray(json);\n+\n+            for (int i=0; i<jsonArray.length(); i++) {\n+                JSONObject object = jsonArray.getJSONObject(i);\n+                Map<String, String> objectMap = new HashMap<>();\n+\n+                for (String key : object.keySet()) {\n+                    String value = object.getString(key);\n+                    objectMap.put(key, value);\n+                }\n+\n+                objectList.add(objectMap);\n+            }\n+\n+            for (Map<String, String> object : objectList) {\n+                if (object.containsKey(\"type\")) {\n+                    String type = object.get(\"type\");\n+                    if (!type.trim().isEmpty()) {\n+                        typedObjectsCount++;\n+                    }\n+                }\n+                totalObjectsCount++;\n+            }\n+\n+        } catch (JSONException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return totalObjectsCount == 0 ? 0 : (double) typedObjectsCount * 100 / totalObjectsCount;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}