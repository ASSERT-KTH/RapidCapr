{
    "patch": "                if (offsetLocal < offsetAdjusted) {\n                    // we need to adjust instantLocal to be within\n                    // the gap, before calling getOffset again\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantAdjusted - 1);\n                    if (nextLocal == nextAdjusted) {\n                        // dst gap is continuous, we step out of it\n                        return offsetLocal;\n                    } else {\n                        // dst gap is not continuous, we need to adjust instantLocal\n                        long diff = nextLocal - instantAdjusted;\n                        return getOffset(instantLocal - diff);\n                    }\n                } else {\n                    // we need to check if instantLocal is within a dst overlap\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        // not overlap, we return the adjusted offset\n                        return offsetAdjusted;\n                    } else {\n                        // overlap, we return the non-dst offset\n                        return offsetLocal;\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5a45a3b2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,31 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if (offsetLocal < offsetAdjusted) {\n+                    // we need to adjust instantLocal to be within\n+                    // the gap, before calling getOffset again\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantAdjusted - 1);\n+                    if (nextLocal == nextAdjusted) {\n+                        // dst gap is continuous, we step out of it\n+                        return offsetLocal;\n+                    } else {\n+                        // dst gap is not continuous, we need to adjust instantLocal\n+                        long diff = nextLocal - instantAdjusted;\n+                        return getOffset(instantLocal - diff);\n+                    }\n+                } else {\n+                    // we need to check if instantLocal is within a dst overlap\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        // not overlap, we return the adjusted offset\n+                        return offsetAdjusted;\n+                    } else {\n+                        // overlap, we return the non-dst offset\n+                        return offsetLocal;\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}