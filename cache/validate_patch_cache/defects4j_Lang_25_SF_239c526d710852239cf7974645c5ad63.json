{
    "patch": "public String escapeHtml4(String input) {\n    if (input == null) {\n        return null;\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < input.length(); i++) {\n        char ch = input.charAt(i);\n        switch (ch) {\n            case '<':\n                sb.append(\"&lt;\");\n                break;\n            case '>':\n                sb.append(\"&gt;\");\n                break;\n            case '&':\n                sb.append(\"&amp;\");\n                break;\n            case '\"':\n                sb.append(\"&quot;\");\n                break;\n            case '\\'':\n                sb.append(\"&#x27;\");\n                break;\n            case '/':\n                sb.append(\"&#x2f;\");\n                break;\n            default:\n                if (ch > 0x7F) {\n                    sb.append(\"&#\");\n                    sb.append(Integer.toString(ch, 10));\n                    sb.append(';');\n                } else {\n                    sb.append(ch);\n                }\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..831d1d2d 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,44 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public String escapeHtml4(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    StringBuilder sb = new StringBuilder();\n+    for (int i = 0; i < input.length(); i++) {\n+        char ch = input.charAt(i);\n+        switch (ch) {\n+            case '<':\n+                sb.append(\"&lt;\");\n+                break;\n+            case '>':\n+                sb.append(\"&gt;\");\n+                break;\n+            case '&':\n+                sb.append(\"&amp;\");\n+                break;\n+            case '\"':\n+                sb.append(\"&quot;\");\n+                break;\n+            case '\\'':\n+                sb.append(\"&#x27;\");\n+                break;\n+            case '/':\n+                sb.append(\"&#x2f;\");\n+                break;\n+            default:\n+                if (ch > 0x7F) {\n+                    sb.append(\"&#\");\n+                    sb.append(Integer.toString(ch, 10));\n+                    sb.append(';');\n+                } else {\n+                    sb.append(ch);\n+                }\n+        }\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}