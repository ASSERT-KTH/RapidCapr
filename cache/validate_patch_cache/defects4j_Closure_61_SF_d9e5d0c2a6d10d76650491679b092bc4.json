{
    "patch": "static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {\n    if (callNode == null || callNode.getType() != Token.CALL || callNode.isNoSideEffectsCall()) {\n        return false;\n    }\n    \n    Node nameNode = callNode.getFirstChild();\n    if (nameNode == null) {\n        return false;\n    }\n\n    // Check if the function call is a built-in function with no side effects.\n    if (nameNode.getType() == Token.NAME && BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString())) {\n        return false;\n    }\n\n    // Check if the function call is a property access of an object with methods without side effects.\n    if (nameNode.getType() == Token.GETPROP && nameNode.getLastChild().getType() == Token.STRING) {\n        String propName = nameNode.getLastChild().getString();\n        if (callNode.hasOneChild() && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(propName)) {\n            return false;\n        }\n\n        if (callNode.isOnlyModifiesThisCall() && evaluatesToLocalValue(nameNode.getFirstChild())) {\n            return false;\n        }\n\n        if (nameNode.getFirstChild().getType() == Token.NAME && \"Math\".equals(nameNode.getFirstChild().getString())) {\n            return false;\n        }\n\n        if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n            if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(propName)) {\n                return false;\n            } else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(propName)) {\n                Iterator<Node> childrenIt = nameNode.children().iterator();\n                childrenIt.next(); // skip the object\n                while (childrenIt.hasNext()) {\n                    Node child = childrenIt.next();\n                    if (child.getType() == Token.STRING || child.getType() == Token.REGEXP) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..c321b7b7 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -923,57 +923,54 @@ public final class NodeUtil {\n    * @param compiler A compiler object to provide program state changing\n    *     context information. Can be null.\n    */\n-  static boolean functionCallHasSideEffects(\n-      Node callNode, @Nullable AbstractCompiler compiler) {\n-    if (callNode.getType() != Token.CALL) {\n-      throw new IllegalStateException(\n-          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n+static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {\n+    if (callNode == null || callNode.getType() != Token.CALL || callNode.isNoSideEffectsCall()) {\n+        return false;\n+    }\n+    \n+    Node nameNode = callNode.getFirstChild();\n+    if (nameNode == null) {\n+        return false;\n     }\n \n-    if (callNode.isNoSideEffectsCall()) {\n-      return false;\n+    // Check if the function call is a built-in function with no side effects.\n+    if (nameNode.getType() == Token.NAME && BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(nameNode.getString())) {\n+        return false;\n     }\n \n-    Node nameNode = callNode.getFirstChild();\n+    // Check if the function call is a property access of an object with methods without side effects.\n+    if (nameNode.getType() == Token.GETPROP && nameNode.getLastChild().getType() == Token.STRING) {\n+        String propName = nameNode.getLastChild().getString();\n+        if (callNode.hasOneChild() && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(propName)) {\n+            return false;\n+        }\n \n-    // Built-in functions with no side effects.\n-    if (nameNode.getType() == Token.NAME) {\n-      String name = nameNode.getString();\n-      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n-        return false;\n-      }\n-    } else if (nameNode.getType() == Token.GETPROP) {\n-      if (callNode.hasOneChild()\n-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n-                nameNode.getLastChild().getString())) {\n-        return false;\n-      }\n+        if (callNode.isOnlyModifiesThisCall() && evaluatesToLocalValue(nameNode.getFirstChild())) {\n+            return false;\n+        }\n \n-      if (callNode.isOnlyModifiesThisCall()\n-          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n-        return false;\n-      }\n+        if (nameNode.getFirstChild().getType() == Token.NAME && \"Math\".equals(nameNode.getFirstChild().getString())) {\n+            return false;\n+        }\n \n-      // Functions in the \"Math\" namespace have no side effects.\n-\n-      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n-        if (nameNode.getFirstChild().getType() == Token.REGEXP\n-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n-          return false;\n-        } else if (nameNode.getFirstChild().getType() == Token.STRING\n-            && STRING_REGEXP_METHODS.contains(\n-                nameNode.getLastChild().getString())) {\n-          Node param = nameNode.getNext();\n-          if (param != null &&\n-              (param.getType() == Token.STRING\n-                  || param.getType() == Token.REGEXP))\n-          return false;\n+        if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n+            if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(propName)) {\n+                return false;\n+            } else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(propName)) {\n+                Iterator<Node> childrenIt = nameNode.children().iterator();\n+                childrenIt.next(); // skip the object\n+                while (childrenIt.hasNext()) {\n+                    Node child = childrenIt.next();\n+                    if (child.getType() == Token.STRING || child.getType() == Token.REGEXP) {\n+                        return false;\n+                    }\n+                }\n+            }\n         }\n-      }\n     }\n \n     return true;\n-  }\n+}\n \n   /**\n    * @return Whether the call has a local result.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}