{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    \n    if (mock instanceof Factory) {\n        Factory factory = (Factory) mock;\n        Callback[] callbacks = factory.getCallbacks();\n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof MethodInterceptorFilter) {\n                callbacks[i] = newFilter;\n                return;\n            }\n        }\n        Callback[] newCallbacks = Arrays.copyOf(callbacks, callbacks.length + 1);\n        newCallbacks[0] = newFilter;\n        factory.setCallbacks(newCallbacks);\n    } else {\n        SpiedInstance spiedInstance = Mockito.mockingDetails(mock).getMockCreationSettings().get().getSpiedInstance();\n        if (spiedInstance != null) {\n            try {\n                Field field = spiedInstance.getActualObject().getClass().getDeclaredField(spiedInstance.getFieldName());\n                field.setAccessible(true);\n                Object spiedObject = field.get(spiedInstance.getProxy());\n                Mockito.reset(spiedObject);\n                Mockito.doReturn(newFilter).when(mockitoSpyClass, \"getInterceptor\", spiedInstance.getProxy());\n            } catch (Exception e) {\n                throw new RuntimeException(\"Error resetting spy\", e);\n            }\n        } else {\n            throw new IllegalArgumentException(\"Invalid mock object type: \" + mock.getClass().getName());\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..d25a4f81c 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,42 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    \n+    if (mock instanceof Factory) {\n+        Factory factory = (Factory) mock;\n+        Callback[] callbacks = factory.getCallbacks();\n+        for (int i = 0; i < callbacks.length; i++) {\n+            if (callbacks[i] instanceof MethodInterceptorFilter) {\n+                callbacks[i] = newFilter;\n+                return;\n+            }\n+        }\n+        Callback[] newCallbacks = Arrays.copyOf(callbacks, callbacks.length + 1);\n+        newCallbacks[0] = newFilter;\n+        factory.setCallbacks(newCallbacks);\n+    } else {\n+        SpiedInstance spiedInstance = Mockito.mockingDetails(mock).getMockCreationSettings().get().getSpiedInstance();\n+        if (spiedInstance != null) {\n+            try {\n+                Field field = spiedInstance.getActualObject().getClass().getDeclaredField(spiedInstance.getFieldName());\n+                field.setAccessible(true);\n+                Object spiedObject = field.get(spiedInstance.getProxy());\n+                Mockito.reset(spiedObject);\n+                Mockito.doReturn(newFilter).when(mockitoSpyClass, \"getInterceptor\", spiedInstance.getProxy());\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Error resetting spy\", e);\n+            }\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid mock object type: \" + mock.getClass().getName());\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}