{
    "patch": "    LinkedHashSet<Node> referenced = Sets.newLinkedHashSet();\n    AbstractCompiler compiler = fnScope.getCompiler();\n    if (fnScope.isGlobal()) {\n      // Parameters of global functions cannot be removed because they can be\n      // accessed from functions defined outside the compilation unit.\n      return;\n    }\n    Node astRoot = compiler.getJsRoot();\n    NodeTraversal.traverse(compiler, astRoot,\n        new GatherReferencesToScope(fnScope, referenced, true));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..afe842ed 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,16 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    LinkedHashSet<Node> referenced = Sets.newLinkedHashSet();\n+    AbstractCompiler compiler = fnScope.getCompiler();\n+    if (fnScope.isGlobal()) {\n+      // Parameters of global functions cannot be removed because they can be\n+      // accessed from functions defined outside the compilation unit.\n+      return;\n+    }\n+    Node astRoot = compiler.getJsRoot();\n+    NodeTraversal.traverse(compiler, astRoot,\n+        new GatherReferencesToScope(fnScope, referenced, true));\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}