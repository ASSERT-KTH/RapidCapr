{
    "patch": "public static double getTypedPercent(String jsonData) {\n    double totalCount = 0.0;\n    double typedCount = 0.0;\n    try {\n        JSONObject root = new JSONObject(jsonData);\n        JSONArray rows = root.getJSONObject(\"data\").getJSONArray(\"rows\");\n        for (int i = 0; i < rows.length(); i++) {\n            JSONObject row = rows.getJSONObject(i);\n            String label = row.optString(\"label\", null);\n            double count = row.optDouble(\"count\", 0.0);\n            totalCount += count;\n            if (label != null && label.equals(\"typed\")) {\n                typedCount += count;\n            }\n        }\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n    if (totalCount == 0.0) {\n        return 100.0;\n    }\n    return typedCount / totalCount * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..2de56299 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonData) {\n+    double totalCount = 0.0;\n+    double typedCount = 0.0;\n+    try {\n+        JSONObject root = new JSONObject(jsonData);\n+        JSONArray rows = root.getJSONObject(\"data\").getJSONArray(\"rows\");\n+        for (int i = 0; i < rows.length(); i++) {\n+            JSONObject row = rows.getJSONObject(i);\n+            String label = row.optString(\"label\", null);\n+            double count = row.optDouble(\"count\", 0.0);\n+            totalCount += count;\n+            if (label != null && label.equals(\"typed\")) {\n+                typedCount += count;\n+            }\n+        }\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+    if (totalCount == 0.0) {\n+        return 100.0;\n+    }\n+    return typedCount / totalCount * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}