{
    "patch": "      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets == 0 && name.props != null &&\n          !name.isTopLevel()) {\n        // Inline `name` if its value is a literal and removing `name` will\n        // result in shorter code. Don't inline top-level names. Top-level\n        // names should be defined in a single place to reduce the reader's\n        // cognitive load.\n        Ref ref = Iterables.getOnlyElement(name.getRefs());\n        if (ref.type == Ref.Type.DECLARATION ||\n            (ref.type == Ref.Type.ASSIGN && name.canEliminate())) {\n          inlineLiteralValue(ref);\n          name.removeRef(ref);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..da08bb5a 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -170,6 +170,19 @@ class CollapseProperties implements CompilerPass {\n       }\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliasingGets == 0 && name.props != null &&\n+          !name.isTopLevel()) {\n+        // Inline `name` if its value is a literal and removing `name` will\n+        // result in shorter code. Don't inline top-level names. Top-level\n+        // names should be defined in a single place to reduce the reader's\n+        // cognitive load.\n+        Ref ref = Iterables.getOnlyElement(name.getRefs());\n+        if (ref.type == Ref.Type.DECLARATION ||\n+            (ref.type == Ref.Type.ASSIGN && name.canEliminate())) {\n+          inlineLiteralValue(ref);\n+          name.removeRef(ref);\n+        }\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}