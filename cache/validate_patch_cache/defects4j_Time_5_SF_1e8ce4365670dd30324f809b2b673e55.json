{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n        Chronology chrono = ISOChronology.getInstanceUTC();\n\n        // create a copy of the current period\n        // which will be used to extract the values\n        Period result = new Period(this);\n\n        // extract the period values as years and months\n        int years = result.getYears();\n        int months = result.getMonths();\n\n        // extract the period duration in milliseconds\n        Duration duration = result.toDurationFrom(chrono);\n\n        // normalize the duration\n        Duration normalizedDuration = duration.normalizedStandard(PeriodType.standard());\n\n        // if the resulting duration is zero, then\n        // return a period of zero length and specified type\n        if (normalizedDuration.equals(Duration.ZERO)) {\n            return new Period(0, type);\n        }\n\n        // convert the normalized duration back to a period\n        result = normalizedDuration.toPeriodFrom(chrono);\n\n        // add the years and months to the resulting period\n        result = result.plusYears(years).plusMonths(months);\n\n        // normalize the resulting period to the specified type\n        result = result.normalizedStandard(type);\n\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..17962759 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1615,25 +1615,44 @@ public final class Period\n      */\n     public Period normalizedStandard(PeriodType type) {\n         type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+        long millis = getMillis();\n         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+\n+        Chronology chrono = ISOChronology.getInstanceUTC();\n+\n+        // create a copy of the current period\n+        // which will be used to extract the values\n+        Period result = new Period(this);\n+\n+        // extract the period values as years and months\n+        int years = result.getYears();\n+        int months = result.getMonths();\n+\n+        // extract the period duration in milliseconds\n+        Duration duration = result.toDurationFrom(chrono);\n+\n+        // normalize the duration\n+        Duration normalizedDuration = duration.normalizedStandard(PeriodType.standard());\n+\n+        // if the resulting duration is zero, then\n+        // return a period of zero length and specified type\n+        if (normalizedDuration.equals(Duration.ZERO)) {\n+            return new Period(0, type);\n         }\n+\n+        // convert the normalized duration back to a period\n+        result = normalizedDuration.toPeriodFrom(chrono);\n+\n+        // add the years and months to the resulting period\n+        result = result.plusYears(years).plusMonths(months);\n+\n+        // normalize the resulting period to the specified type\n+        result = result.normalizedStandard(type);\n+\n         return result;\n     }\n ",
    "result_reason": "error: method toDurationFrom in class BasePeriod cannot be applied to given types;",
    "test_result": "ERROR"
}