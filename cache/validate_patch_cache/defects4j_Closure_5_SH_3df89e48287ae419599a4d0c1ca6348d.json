{
    "patch": "    static boolean canRewriteFunction(NodeTraversal t, Node fn) {\n      if (!fn.isFunction()) {\n        return false;\n      }\n\n      if (!NodeUtil.isFunctionExpression(fn)) {\n        return false;\n      }\n\n      // Ensure that the enclosing block does not contain a 'return' statement.\n      // This check is only necessary if 'minimize_exit_points' flag is set.\n      if (MINIMIZE_EXIT_POINTS) {\n        Node enclosingBlock = NodeUtil.getEnclosingBlock(fn);\n        if (NodeUtil.has(body, NodeUtil.MATCH_RETURN_STATEMENT)) {\n          return false;\n        }\n      }\n\n      return NodeUtil.getDeclaredVars(fn.getParent()).length == 0;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..9f386500 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,26 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+    static boolean canRewriteFunction(NodeTraversal t, Node fn) {\n+      if (!fn.isFunction()) {\n+        return false;\n+      }\n+\n+      if (!NodeUtil.isFunctionExpression(fn)) {\n+        return false;\n+      }\n+\n+      // Ensure that the enclosing block does not contain a 'return' statement.\n+      // This check is only necessary if 'minimize_exit_points' flag is set.\n+      if (MINIMIZE_EXIT_POINTS) {\n+        Node enclosingBlock = NodeUtil.getEnclosingBlock(fn);\n+        if (NodeUtil.has(body, NodeUtil.MATCH_RETURN_STATEMENT)) {\n+          return false;\n+        }\n+      }\n+\n+      return NodeUtil.getDeclaredVars(fn.getParent()).length == 0;\n+    }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}