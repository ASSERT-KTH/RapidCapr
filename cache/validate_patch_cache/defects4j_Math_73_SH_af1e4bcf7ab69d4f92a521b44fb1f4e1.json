{
    "patch": "        // check if function values at endpoints have different signs\n        boolean bracketing = (yMin < 0 && yMax > 0) || (yMin > 0 && yMax < 0);\n        if (!bracketing) {\n            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yMax + \"]\");\n        }\n\n        // check if initial guess is NaN or infinite\n        if (!Double.isFinite(yInitial)) {\n            throw new IllegalArgumentException(\"Initial guess is NaN or infinite. Initial guess value: \" + yInitial);\n        }\n\n        // full Brent algorithm starting with provided initial guess\n        return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..a6a3f9d7a 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,19 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // check if function values at endpoints have different signs\n+        boolean bracketing = (yMin < 0 && yMax > 0) || (yMin > 0 && yMax < 0);\n+        if (!bracketing) {\n+            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yMax + \"]\");\n+        }\n+\n+        // check if initial guess is NaN or infinite\n+        if (!Double.isFinite(yInitial)) {\n+            throw new IllegalArgumentException(\"Initial guess is NaN or infinite. Initial guess value: \" + yInitial);\n+        }\n+\n+        // full Brent algorithm starting with provided initial guess\n+        return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}