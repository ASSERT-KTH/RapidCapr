{
    "patch": "    @Test\n    public void testSingleVariableAndConstraint() throws SimplexSolver.SingularMatrixException, UnboundedSolutionException,\n            NoFeasibleSolutionException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 7 },\n                0);\n        Collection<LinearConstraint> constraints = new ArrayList<>();\n        constraints.add(new LinearConstraint(new double[] { 2 }, Relationship.GEQ, 4));\n        constraints.add(new LinearConstraint(new double[] { 2 }, Relationship.LEQ, 5));\n        constraints.add(new LinearConstraint(new double[] { -1 }, Relationship.GEQ, -10));\n        constraints.add(new LinearConstraint(new double[] { -1 }, Relationship.LEQ, -7));\n        SimplexSolver solver = new SimplexSolver();\n        PointValuePair solution = solver.optimize(new MaxIter(100), f, new LinearConstraintSet(constraints),\n                GoalType.MINIMIZE, new NonNegativeConstraint(true));\n        Assert.assertEquals(0.0, solution.getPoint()[0], 0.0);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 0ab790cd6..95222160d 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -269,18 +269,20 @@ class SimplexTableau implements Serializable {\n      * @param col index of the column to check\n      * @return the row that the variable is basic in.  null if the column is not basic\n      */\n-    private Integer getBasicRow(final int col) {\n-        Integer row = null;\n-        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n-                if (row == null) {\n-                row = i;\n-                } else {\n-                return null;\n-                }\n-            }\n-        }\n-        return row;\n+    @Test\n+    public void testSingleVariableAndConstraint() throws SimplexSolver.SingularMatrixException, UnboundedSolutionException,\n+            NoFeasibleSolutionException {\n+        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 7 },\n+                0);\n+        Collection<LinearConstraint> constraints = new ArrayList<>();\n+        constraints.add(new LinearConstraint(new double[] { 2 }, Relationship.GEQ, 4));\n+        constraints.add(new LinearConstraint(new double[] { 2 }, Relationship.LEQ, 5));\n+        constraints.add(new LinearConstraint(new double[] { -1 }, Relationship.GEQ, -10));\n+        constraints.add(new LinearConstraint(new double[] { -1 }, Relationship.LEQ, -7));\n+        SimplexSolver solver = new SimplexSolver();\n+        PointValuePair solution = solver.optimize(new MaxIter(100), f, new LinearConstraintSet(constraints),\n+                GoalType.MINIMIZE, new NonNegativeConstraint(true));\n+        Assert.assertEquals(0.0, solution.getPoint()[0], 0.0);\n     }\n \n     /**",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}