{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException,\n            OptimizationException, IllegalArgumentException {\n        while (true) {\n            incrementIterationsCounter();\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    simplex = reflectedSimplex;\n                }\n                return;\n            }\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, original[original.length - 1]) >= 0) {\n                final RealPointValuePair contractedSimplex[] = contractInside(original, sigma, comparator);\n                if (comparator.compare(contractedSimplex[contractedSimplex.length - 1], original[original.length - 1]) >= 0) {\n                    simplex = shrink(original, comparator);\n                    return;\n                }\n                simplex = contractedSimplex;\n            } else {\n                simplex = replaceWorstPoint(original, contracted, comparator);\n            }\n        }\n    }\n    \n    private RealPointValuePair[] contractInside(final RealPointValuePair[] original,\n            final double contractCoefficient,\n            final Comparator<RealPointValuePair> comparator) {\n        RealPointValuePair contracted[] = new RealPointValuePair[original.length];\n        RealPointValuePair best = original[0];\n        for (int i = 0; i < original.length - 1; i++) {\n            double[] x = new double[original[i].getPoint().length];\n            for (int j = 0; j < x.length; j++) {\n                x[j] = best.getPoint()[j] + contractCoefficient * (original[i].getPoint()[j] - best.getPoint()[j]);\n            }\n            contracted[i] = new RealPointValuePair(x, -1.0);\n        }\n        contracted[contracted.length - 1] = best;\n        Arrays.sort(contracted, comparator);\n        return contracted;\n    }\n\n    private RealPointValuePair[] shrink(final RealPointValuePair[] simplex, final Comparator<RealPointValuePair> comparator) {\n        RealPointValuePair best = simplex[0];\n        RealPointValuePair shrinked[] = new RealPointValuePair[simplex.length];\n        for (int i = 1; i < simplex.length; i++) {\n            double[] x = new double[simplex[i].getPoint().length];\n            for (int j = 0; j < x.length; j++) {\n                x[j] = best.getPoint()[j] + delta * (simplex[i].getPoint()[j] - best.getPoint()[j]);\n            }\n            shrinked[i] = new RealPointValuePair(x, -1.0);\n        }\n        shrinked[0] = best;\n        Arrays.sort(shrinked, comparator);\n        return shrinked;\n    }\n\n    private RealPointValuePair[] replaceWorstPoint(final RealPointValuePair[] simplex,\n            final RealPointValuePair contracted,\n            final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair[] next = new RealPointValuePair[simplex.length];\n        for (int i = 0; i < next.length - 1; i++) {\n            next[i] = simplex[i + 1];\n        }\n        next[next.length - 1] = contracted;\n        Arrays.sort(next, comparator);\n        return next;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..783a2a846 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,44 +58,77 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n+    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException,\n+            OptimizationException, IllegalArgumentException {\n         while (true) {\n-\n             incrementIterationsCounter();\n-\n-            // save the original vertex\n             final RealPointValuePair[] original = simplex;\n             final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n             if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                 if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n-\n                 return;\n-\n             }\n-\n-            // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+            if (comparator.compare(contracted, original[original.length - 1]) >= 0) {\n+                final RealPointValuePair contractedSimplex[] = contractInside(original, sigma, comparator);\n+                if (comparator.compare(contractedSimplex[contractedSimplex.length - 1], original[original.length - 1]) >= 0) {\n+                    simplex = shrink(original, comparator);\n+                    return;\n+                }\n+                simplex = contractedSimplex;\n+            } else {\n+                simplex = replaceWorstPoint(original, contracted, comparator);\n             }\n+        }\n+    }\n+    \n+    private RealPointValuePair[] contractInside(final RealPointValuePair[] original,\n+            final double contractCoefficient,\n+            final Comparator<RealPointValuePair> comparator) {\n+        RealPointValuePair contracted[] = new RealPointValuePair[original.length];\n+        RealPointValuePair best = original[0];\n+        for (int i = 0; i < original.length - 1; i++) {\n+            double[] x = new double[original[i].getPoint().length];\n+            for (int j = 0; j < x.length; j++) {\n+                x[j] = best.getPoint()[j] + contractCoefficient * (original[i].getPoint()[j] - best.getPoint()[j]);\n+            }\n+            contracted[i] = new RealPointValuePair(x, -1.0);\n+        }\n+        contracted[contracted.length - 1] = best;\n+        Arrays.sort(contracted, comparator);\n+        return contracted;\n+    }\n \n+    private RealPointValuePair[] shrink(final RealPointValuePair[] simplex, final Comparator<RealPointValuePair> comparator) {\n+        RealPointValuePair best = simplex[0];\n+        RealPointValuePair shrinked[] = new RealPointValuePair[simplex.length];\n+        for (int i = 1; i < simplex.length; i++) {\n+            double[] x = new double[simplex[i].getPoint().length];\n+            for (int j = 0; j < x.length; j++) {\n+                x[j] = best.getPoint()[j] + delta * (simplex[i].getPoint()[j] - best.getPoint()[j]);\n+            }\n+            shrinked[i] = new RealPointValuePair(x, -1.0);\n         }\n+        shrinked[0] = best;\n+        Arrays.sort(shrinked, comparator);\n+        return shrinked;\n+    }\n \n+    private RealPointValuePair[] replaceWorstPoint(final RealPointValuePair[] simplex,\n+            final RealPointValuePair contracted,\n+            final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair[] next = new RealPointValuePair[simplex.length];\n+        for (int i = 0; i < next.length - 1; i++) {\n+            next[i] = simplex[i + 1];\n+        }\n+        next[next.length - 1] = contracted;\n+        Arrays.sort(next, comparator);\n+        return next;\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}