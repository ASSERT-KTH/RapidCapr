{
    "patch": "            if (offsetLocal > 0 && offsetAdjusted < 0 && instantLocal + offsetLocal < 0) {\n                return offsetLocal;\n            }\n            if (offsetLocal < offsetAdjusted) {\n                if (offsetLocal < 0 && offsetAdjusted == 0) {\n                    long prevLocal = previousTransition(instantAdjusted);\n                    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n                    if (prevLocal != prevAdjusted) {\n                        return offsetLocal;\n                    }\n                }\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            } else {\n                if (offsetLocal < 0 && offsetLocal - offsetAdjusted < 0) {\n                    long prevTransition = previousTransition(instantAdjusted);\n                    long nextTransition = nextTransition(instantAdjusted);\n                    if (nextTransition == instantLocal - offsetLocal) {\n                        return offsetAdjusted;\n                    } else if (prevTransition == instantLocal - offsetLocal) {\n                        return offsetLocal;\n                    } else {\n                        throw new IllegalArgumentException(\"Switching time zone boundaries not well-defined in this case.\");\n                    }\n                }\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if (prevLocal != prevAdjusted) {\n                    return offsetLocal;\n                }\n            }\n            final long nextLocal = nextTransition(instantAdjusted);\n            final int offsetNext = getOffset(nextLocal);\n            if (offsetLocal != offsetNext && offsetAdjusted == offsetNext) {\n                return offsetLocal;\n            }\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                // find when the new offset comes into effect\n                long transition = previousTransition(instantAdjusted);\n                if ((instantAdjusted - transition) == (offsetAdjusted - offsetLocal)) {\n                    // we are on a wall inside a gap\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        return offsetLocal;\n                    } else {\n                        return offsetAdjusted;\n                    }\n                } else if ((instantAdjusted - transition) < (offsetAdjusted - offsetLocal)) {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..48d02e34 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,58 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal > 0 && offsetAdjusted < 0 && instantLocal + offsetLocal < 0) {\n+                return offsetLocal;\n+            }\n+            if (offsetLocal < offsetAdjusted) {\n+                if (offsetLocal < 0 && offsetAdjusted == 0) {\n+                    long prevLocal = previousTransition(instantAdjusted);\n+                    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+                    if (prevLocal != prevAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                }\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                if (offsetLocal < 0 && offsetLocal - offsetAdjusted < 0) {\n+                    long prevTransition = previousTransition(instantAdjusted);\n+                    long nextTransition = nextTransition(instantAdjusted);\n+                    if (nextTransition == instantLocal - offsetLocal) {\n+                        return offsetAdjusted;\n+                    } else if (prevTransition == instantLocal - offsetLocal) {\n+                        return offsetLocal;\n+                    } else {\n+                        throw new IllegalArgumentException(\"Switching time zone boundaries not well-defined in this case.\");\n+                    }\n+                }\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if (prevLocal != prevAdjusted) {\n+                    return offsetLocal;\n+                }\n+            }\n+            final long nextLocal = nextTransition(instantAdjusted);\n+            final int offsetNext = getOffset(nextLocal);\n+            if (offsetLocal != offsetNext && offsetAdjusted == offsetNext) {\n+                return offsetLocal;\n+            }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // find when the new offset comes into effect\n+                long transition = previousTransition(instantAdjusted);\n+                if ((instantAdjusted - transition) == (offsetAdjusted - offsetLocal)) {\n+                    // we are on a wall inside a gap\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        return offsetLocal;\n+                    } else {\n+                        return offsetAdjusted;\n+                    }\n+                } else if ((instantAdjusted - transition) < (offsetAdjusted - offsetLocal)) {\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}