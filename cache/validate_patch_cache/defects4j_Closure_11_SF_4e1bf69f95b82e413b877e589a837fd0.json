{
    "patch": "public void testGetprop4() {\n    // Assign\n    Properties testProp = new Properties();\n    testProp.setProperty(\"test1\", \"value1\");\n    testProp.setProperty(\"test2\", \"value2\");\n    \n    // Act\n    String[] warnings = getProps(testProp, new String[]{\"test3\"});\n    \n    // Assert\n    assertTrue(\"expected a warning\", warnings.length > 0);\n    assertEquals(\"test3 property not found\", warnings[0]);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2439be89 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() {\n+    // Assign\n+    Properties testProp = new Properties();\n+    testProp.setProperty(\"test1\", \"value1\");\n+    testProp.setProperty(\"test2\", \"value2\");\n+    \n+    // Act\n+    String[] warnings = getProps(testProp, new String[]{\"test3\"});\n+    \n+    // Assert\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+    assertEquals(\"test3 property not found\", warnings[0]);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}