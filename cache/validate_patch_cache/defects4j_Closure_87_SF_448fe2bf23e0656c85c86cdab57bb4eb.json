{
    "patch": "    if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n      return false;\n    }\n\n    Node maybeExpr = n.getFirstChild();\n\n    // Don't fold if the parent node is an EXPR_RESULT\n    if (maybeExpr.getParent() != null && maybeExpr.getParent().getType() == Token.EXPR_RESULT) {\n      return false;\n    }\n\n    // Don't fold if the parent node is a CALL or NEW node\n    Node parent = maybeExpr.getParent();\n    if (parent != null && (parent.getType() == Token.CALL || parent.getType() == Token.NEW)) {\n      return false;\n    }\n\n    if (NodeUtil.isFunctionExpression(maybeExpr) || NodeUtil.isFunctionDeclaration(maybeExpr)) {\n      return false;\n    }\n\n    // IE has a bug where event handlers behave differently when\n    // their return value is used vs. when their return value is in\n    // an EXPR_RESULT. It's pretty freaking weird. See:\n    // https://github.com/google/closure-compiler/issues/1093\n    // We try to detect this case, and not fold EXPR_RESULTs\n    // into other expressions.\n    if (maybeExpr.getType() == Token.IF && maybeExpr.getChildCount() == 2) {\n      Node ifBlock = maybeExpr.getLastChild();\n\n      // Check if the if block contains only one child that is an expression\n      if (ifBlock.getChildCount() == 1 && NodeUtil.isExpressionNode(ifBlock.getFirstChild())) {\n        return false;\n      }\n    }\n\n    return NodeUtil.isExpressionNode(maybeExpr);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..7295d0f9 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,43 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+    if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n+      return false;\n+    }\n+\n+    Node maybeExpr = n.getFirstChild();\n+\n+    // Don't fold if the parent node is an EXPR_RESULT\n+    if (maybeExpr.getParent() != null && maybeExpr.getParent().getType() == Token.EXPR_RESULT) {\n+      return false;\n+    }\n+\n+    // Don't fold if the parent node is a CALL or NEW node\n+    Node parent = maybeExpr.getParent();\n+    if (parent != null && (parent.getType() == Token.CALL || parent.getType() == Token.NEW)) {\n+      return false;\n+    }\n+\n+    if (NodeUtil.isFunctionExpression(maybeExpr) || NodeUtil.isFunctionDeclaration(maybeExpr)) {\n+      return false;\n+    }\n+\n+    // IE has a bug where event handlers behave differently when\n+    // their return value is used vs. when their return value is in\n+    // an EXPR_RESULT. It's pretty freaking weird. See:\n+    // https://github.com/google/closure-compiler/issues/1093\n+    // We try to detect this case, and not fold EXPR_RESULTs\n+    // into other expressions.\n+    if (maybeExpr.getType() == Token.IF && maybeExpr.getChildCount() == 2) {\n+      Node ifBlock = maybeExpr.getLastChild();\n+\n+      // Check if the if block contains only one child that is an expression\n+      if (ifBlock.getChildCount() == 1 && NodeUtil.isExpressionNode(ifBlock.getFirstChild())) {\n+        return false;\n       }\n     }\n \n-    return false;\n-  }\n+    return NodeUtil.isExpressionNode(maybeExpr);\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}