{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n  // Check whether constraintObj is a FunctionType\n  if (constraintObj.isUnknownType() || constraintObj.getDisplayName() == null\n      || !constraintObj.getDisplayName().startsWith(\"{\")) {\n    return;\n  }\n\n  // Handle the case where the constraint object is a record type.\n  //\n  // param constraintObj {{prop: (number|undefined)}}\n  // function f(constraintObj) {}\n  // f({});\n  //\n  // We want to modify the object literal to match the constraint, by\n  // taking any each property on the record and trying to match\n  // properties on this object.\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n          ObjectType objType = ObjectType.cast(getJSType());\n          if (objType != null && objType.isNominalType()) {\n            Property propDef = objType.getPropertyDefinition(prop);\n            if (propDef != null) {\n              JSType propUnion = getNativeType(VOID_TYPE)\n                  .getLeastSupertype(propDef.getType());\n              if (propUnion.isUnknownType()) {\n                propUnion = propType;\n              } else {\n                propUnion = propType.getLeastSupertype(propUnion);\n              }\n              typeToInfer = propUnion;\n            }\n          }\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..600ad8da 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,46 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n+public void matchConstraint(ObjectType constraintObj) {\n+  // Check whether constraintObj is a FunctionType\n+  if (constraintObj.isUnknownType() || constraintObj.getDisplayName() == null\n+      || !constraintObj.getDisplayName().startsWith(\"{\")) {\n+    return;\n+  }\n+\n+  // Handle the case where the constraint object is a record type.\n+  //\n+  // param constraintObj {{prop: (number|undefined)}}\n+  // function f(constraintObj) {}\n+  // f({});\n+  //\n+  // We want to modify the object literal to match the constraint, by\n+  // taking any each property on the record and trying to match\n+  // properties on this object.\n+  if (constraintObj.isRecordType()) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!isPropertyTypeDeclared(prop)) {\n+        JSType typeToInfer = propType;\n+        if (!hasProperty(prop)) {\n+          ObjectType objType = ObjectType.cast(getJSType());\n+          if (objType != null && objType.isNominalType()) {\n+            Property propDef = objType.getPropertyDefinition(prop);\n+            if (propDef != null) {\n+              JSType propUnion = getNativeType(VOID_TYPE)\n+                  .getLeastSupertype(propDef.getType());\n+              if (propUnion.isUnknownType()) {\n+                propUnion = propType;\n+              } else {\n+                propUnion = propType.getLeastSupertype(propUnion);\n+              }\n+              typeToInfer = propUnion;\n+            }\n           }\n-          defineInferredProperty(prop, typeToInfer, null);\n         }\n+        defineInferredProperty(prop, typeToInfer, null);\n       }\n     }\n   }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}