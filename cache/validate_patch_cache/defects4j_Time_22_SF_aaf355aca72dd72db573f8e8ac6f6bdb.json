{
    "patch": "public int getWeeks() {\n    long millis = getMillis();\n    int durationWeeks = (int) (millis / DateTimeConstants.MILLIS_PER_WEEK);\n    int weeksPart = iWeeks < 0 ? -1 : (iWeeks == 0 ? 0 : 1);\n    int weeklessMillisPart = (int) Math.abs(millis - (durationWeeks * DateTimeConstants.MILLIS_PER_WEEK));\n    int daysInWeekPart = weeklessMillisPart <= 0 ? 0 : (weeklessMillisPart < DateTimeConstants.MILLIS_PER_DAY ? 1 : (int) (weeklessMillisPart / DateTimeConstants.MILLIS_PER_DAY));\n    int weeksInDaysPart = weeksPart * 7;\n    return weeksInDaysPart + daysInWeekPart;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..714834b3 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,15 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+public int getWeeks() {\n+    long millis = getMillis();\n+    int durationWeeks = (int) (millis / DateTimeConstants.MILLIS_PER_WEEK);\n+    int weeksPart = iWeeks < 0 ? -1 : (iWeeks == 0 ? 0 : 1);\n+    int weeklessMillisPart = (int) Math.abs(millis - (durationWeeks * DateTimeConstants.MILLIS_PER_WEEK));\n+    int daysInWeekPart = weeklessMillisPart <= 0 ? 0 : (weeklessMillisPart < DateTimeConstants.MILLIS_PER_DAY ? 1 : (int) (weeklessMillisPart / DateTimeConstants.MILLIS_PER_DAY));\n+    int weeksInDaysPart = weeksPart * 7;\n+    return weeksInDaysPart + daysInWeekPart;\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}