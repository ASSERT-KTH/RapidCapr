{
    "patch": "if (ref != null && !ref.isSimpleAssignmentToName()) {\n    return false;\n}\n// We assume variables inside functions can be assigned multiple times\nif (block.isFunction) {\n    if (getInitializingReference() != null && getInitializingReference().getBasicBlock().equals(block)) {\n        return ref.equals(getInitializingReference());\n    }\n    return getOneAndOnlyAssignment() != null && getOneAndOnlyAssignment().equals(ref);\n} else if (block.isLoop) {\n    return false;\n}\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..f7b0673e 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (ref != null && !ref.isSimpleAssignmentToName()) {\n+    return false;\n+}\n+// We assume variables inside functions can be assigned multiple times\n+if (block.isFunction) {\n+    if (getInitializingReference() != null && getInitializingReference().getBasicBlock().equals(block)) {\n+        return ref.equals(getInitializingReference());\n+    }\n+    return getOneAndOnlyAssignment() != null && getOneAndOnlyAssignment().equals(ref);\n+} else if (block.isLoop) {\n+    return false;\n+}\n+return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}