{
    "patch": "if (!NodeUtil.isFunctionExpression(n)) {\n  return false;\n}\n\nNode parent = n.getParent();\nif (parent == null) {\n  return false;\n}\n\nint parentType = parent.getType();\nif (parentType == Token.CALL || parentType == Token.NEW || parentType == Token.OBJECTLIT) {\n  return false;\n} else if (parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN || parentType == Token.VAR ||\n           parentType == Token.RETURN || parentType == Token.TYPEOF || parentType == Token.INSTANCEOF) {\n  return true;\n} else if (parentType == Token.BLOCK && parent.getParent() != null &&\n           parent.getParent().getType() == Token.FUNCTION) {\n  Node grandParent = parent.getParent();\n  int grandParentType = grandParent.getType();\n  return grandParentType != Token.OBJECTLIT && grandParentType != Token.BLOCK;\n} else {\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..9257aa94 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,29 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+if (!NodeUtil.isFunctionExpression(n)) {\n+  return false;\n+}\n+\n+Node parent = n.getParent();\n+if (parent == null) {\n+  return false;\n+}\n+\n+int parentType = parent.getType();\n+if (parentType == Token.CALL || parentType == Token.NEW || parentType == Token.OBJECTLIT) {\n+  return false;\n+} else if (parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN || parentType == Token.VAR ||\n+           parentType == Token.RETURN || parentType == Token.TYPEOF || parentType == Token.INSTANCEOF) {\n+  return true;\n+} else if (parentType == Token.BLOCK && parent.getParent() != null &&\n+           parent.getParent().getType() == Token.FUNCTION) {\n+  Node grandParent = parent.getParent();\n+  int grandParentType = grandParent.getType();\n+  return grandParentType != Token.OBJECTLIT && grandParentType != Token.BLOCK;\n+} else {\n+  return false;\n+}\n   }\n \n   /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}