{
    "patch": "  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n\n  // The parameters object literal setters can not be removed.\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    return;\n  }\n  \n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n  \n  if (!modifyCallers) {\n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg = argList.getLastChild();\n    while (lastArg != null) {\n      Node prev = lastArg.getPrevious();\n      if (lastArg.isUnusedParameter()) { // remove unused parameters\n        referenceMap.removeAllReferences(lastArg.getString());\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n      lastArg = prev;\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0aa9f54e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,33 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  Node function = fnScope.getRootNode();\n+  Preconditions.checkState(function.isFunction());\n+\n+  // The parameters object literal setters can not be removed.\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    return;\n+  }\n+  \n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+  \n+  if (!modifyCallers) {\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg = argList.getLastChild();\n+    while (lastArg != null) {\n+      Node prev = lastArg.getPrevious();\n+      if (lastArg.isUnusedParameter()) { // remove unused parameters\n+        referenceMap.removeAllReferences(lastArg.getString());\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n+      lastArg = prev;\n+    }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}