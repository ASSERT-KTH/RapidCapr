{
    "patch": "if (finallyNode.getType() == Token.TRY) {\n    Node tryStmt = finallyNode;\n    finallyNode = finallyNode.getFirstChild().getNext();\n    Node finallyStmt = finallyNode_;\n    if (finallyStmt == null) {\n        cfa.createEdge(fromNode, Branch.UNCOND, tryStmt);\n    } else {\n        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n        cfa.createEdge(tryStmt.getLastChild(), Branch.UNCOND, finallyStmt);\n    }\n} else {\n    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..b4b9f3ee 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,19 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (finallyNode.getType() == Token.TRY) {\n+    Node tryStmt = finallyNode;\n+    finallyNode = finallyNode.getFirstChild().getNext();\n+    Node finallyStmt = finallyNode_;\n+    if (finallyStmt == null) {\n+        cfa.createEdge(fromNode, Branch.UNCOND, tryStmt);\n+    } else {\n+        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+        cfa.createEdge(tryStmt.getLastChild(), Branch.UNCOND, finallyStmt);\n+    }\n+} else {\n+    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}