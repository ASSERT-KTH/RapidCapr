{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructorNode = n.getFirstChild();\n  JSType constructorType = constructorNode.getJSType();\n  if (constructorType != null && constructorType.isFunctionType()) {\n    FunctionType constructorFunction = constructorType.toMaybeFunctionType();\n    if (constructorFunction.isConstructor()) {\n      JSType instanceType = constructorFunction.getInstanceType();\n      // Compute the expected number of arguments for the constructor.\n      int expectedArgsCount = constructorFunction.getParameterCount();\n      // Traverse all of the arguments to the constructor function\n      // and populate their inferred types in the scope.\n      scope = traverseChildren(constructorNode.getNext(), expectedArgsCount, scope);\n      // Check if the constructor invoked has a return type.\n      if (instanceType != null) {\n        n.setJSType(instanceType);\n        return scope;\n      }\n    }\n  }\n  // Set the default JSType of the object node, as UNKNOWN_TYPE.\n  n.setJSType(getNativeType(UNKNOWN_TYPE));\n  // Traverse all of the arguments to the constructor function\n  // and populate their inferred types in the scope.\n  scope = traverseChildren(constructorNode.getNext(), 0, scope);\n  return scope;\n}\n\nprivate FlowScope traverseChildren(Node node, int expectedArgsCount, FlowScope scope) {\n  int actualArgsCount = 0;\n  while (node != null) {\n    scope = traverse(node, scope);\n    actualArgsCount += 1;\n    node = node.getNext();\n  }\n  if (actualArgsCount != expectedArgsCount) {\n    // If the number of inferred arguments is not equal to the expected number,\n    // add unknown types to the scope for the missing parameters.\n    for (int i = actualArgsCount; i < expectedArgsCount; i++) {\n      scope = scope.inferSlot(\"?\", getNativeType(UNKNOWN_TYPE), null);\n    }\n  }\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..85187f05 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,49 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructorNode = n.getFirstChild();\n+  JSType constructorType = constructorNode.getJSType();\n+  if (constructorType != null && constructorType.isFunctionType()) {\n+    FunctionType constructorFunction = constructorType.toMaybeFunctionType();\n+    if (constructorFunction.isConstructor()) {\n+      JSType instanceType = constructorFunction.getInstanceType();\n+      // Compute the expected number of arguments for the constructor.\n+      int expectedArgsCount = constructorFunction.getParameterCount();\n+      // Traverse all of the arguments to the constructor function\n+      // and populate their inferred types in the scope.\n+      scope = traverseChildren(constructorNode.getNext(), expectedArgsCount, scope);\n+      // Check if the constructor invoked has a return type.\n+      if (instanceType != null) {\n+        n.setJSType(instanceType);\n+        return scope;\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+  }\n+  // Set the default JSType of the object node, as UNKNOWN_TYPE.\n+  n.setJSType(getNativeType(UNKNOWN_TYPE));\n+  // Traverse all of the arguments to the constructor function\n+  // and populate their inferred types in the scope.\n+  scope = traverseChildren(constructorNode.getNext(), 0, scope);\n+  return scope;\n+}\n+\n+private FlowScope traverseChildren(Node node, int expectedArgsCount, FlowScope scope) {\n+  int actualArgsCount = 0;\n+  while (node != null) {\n+    scope = traverse(node, scope);\n+    actualArgsCount += 1;\n+    node = node.getNext();\n+  }\n+  if (actualArgsCount != expectedArgsCount) {\n+    // If the number of inferred arguments is not equal to the expected number,\n+    // add unknown types to the scope for the missing parameters.\n+    for (int i = actualArgsCount; i < expectedArgsCount; i++) {\n+      scope = scope.inferSlot(\"?\", getNativeType(UNKNOWN_TYPE), null);\n     }\n-    return scope;\n   }\n+  return scope;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}