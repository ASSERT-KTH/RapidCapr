{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix sqrt = dec.getV().multiply(dec.getD().sqrt()).multiply(dec.getV().transpose());\n\n    // Iterate until convergence\n    double eps = 1e-10;\n    while (true) {\n        RealMatrix next = sqrt.add(multiplyByInverse(sqrt, m)).scalarMultiply(0.5);\n        double diff = norm(next.subtract(sqrt));\n        if (diff < eps) {\n            sqrt = next;\n            break;\n        }\n        sqrt = next;\n    }\n\n    return sqrt;\n}\n\nprivate RealMatrix multiplyByInverse(RealMatrix a, RealMatrix b) {\n    // Calculate the inverse of b\n    RealMatrix inverse = new LUDecomposition(b).getSolver().getInverse();\n    return a.multiply(inverse);\n}\n\nprivate double norm(RealMatrix m) {\n    return m.getFrobeniusNorm();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..e88cf3a54 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,32 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix sqrt = dec.getV().multiply(dec.getD().sqrt()).multiply(dec.getV().transpose());\n+\n+    // Iterate until convergence\n+    double eps = 1e-10;\n+    while (true) {\n+        RealMatrix next = sqrt.add(multiplyByInverse(sqrt, m)).scalarMultiply(0.5);\n+        double diff = norm(next.subtract(sqrt));\n+        if (diff < eps) {\n+            sqrt = next;\n+            break;\n+        }\n+        sqrt = next;\n     }\n+\n+    return sqrt;\n+}\n+\n+private RealMatrix multiplyByInverse(RealMatrix a, RealMatrix b) {\n+    // Calculate the inverse of b\n+    RealMatrix inverse = new LUDecomposition(b).getSolver().getInverse();\n+    return a.multiply(inverse);\n+}\n+\n+private double norm(RealMatrix m) {\n+    return m.getFrobeniusNorm();\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}