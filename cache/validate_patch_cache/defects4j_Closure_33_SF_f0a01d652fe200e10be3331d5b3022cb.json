{
    "patch": "/**\n * Matches the constraint object to the object type and infers missing types for properties that are not already declared.\n *\n * @param constraintObj The constraint object.\n */\npublic void matchConstraint(ObjectType constraintObj) {\n  if (constraintObj == null || constraintObj.getDisplayName() == null || !constraintObj.getDisplayName().startsWith(\"{\")) {\n    return;\n  }\n\n  // Handle the case where the constraint object is a record type.\n  //\n  // For example, given the JSDoc comment:\n  //   * @param {Object<string,number>} constraintObj\n  //   * @param {string} key\n  //   * @return {!Promise<number>}\n  //   * function getProperty(constraintObj, key) { return Promise.resolve(constraintObj[key]); }\n  //\n  // We want to modify the object literal to match the constraint by iterating over each property on the record and\n  // inferring types for any undeclared properties.\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (propType != null && !propType.isUnknownType() && !isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..0a5aa047 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,37 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n+/**\n+ * Matches the constraint object to the object type and infers missing types for properties that are not already declared.\n+ *\n+ * @param constraintObj The constraint object.\n+ */\n+public void matchConstraint(ObjectType constraintObj) {\n+  if (constraintObj == null || constraintObj.getDisplayName() == null || !constraintObj.getDisplayName().startsWith(\"{\")) {\n+    return;\n+  }\n+\n+  // Handle the case where the constraint object is a record type.\n+  //\n+  // For example, given the JSDoc comment:\n+  //   * @param {Object<string,number>} constraintObj\n+  //   * @param {string} key\n+  //   * @return {!Promise<number>}\n+  //   * function getProperty(constraintObj, key) { return Promise.resolve(constraintObj[key]); }\n+  //\n+  // We want to modify the object literal to match the constraint by iterating over each property on the record and\n+  // inferring types for any undeclared properties.\n+  if (constraintObj.isRecordType()) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (propType != null && !propType.isUnknownType() && !isPropertyTypeDeclared(prop)) {\n+        JSType typeToInfer = propType;\n+        if (!hasProperty(prop)) {\n+          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n         }\n+        defineInferredProperty(prop, typeToInfer, null);\n       }\n     }\n   }\n }\n+}",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...arameter",
    "test_result": "FAIL"
}