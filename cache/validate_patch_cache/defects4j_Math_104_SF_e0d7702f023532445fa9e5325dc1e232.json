{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.Precision;\n\npublic class GammaFunction {\n\n    private GammaFunction() {}\n\n    /**\n     * The gamma function.\n     *\n     * @param x Argument.\n     * @return &gamma;(x)\n     * @throws IllegalArgumentException if x &le; 0 <em>and</em> x is an integer.\n     * @throws ArithmeticException if the result is too large to be represented by a {@code double}.\n     */\n    public static double gamma(double x)\n            throws IllegalArgumentException, ArithmeticException {\n        if (Double.isNaN(x)) {\n            return x;\n        }\n\n        double ret;\n        boolean negative = false;\n\n        if (x <= 0.0) {\n            if (x == Math.floor(x)) {\n                throw new IllegalArgumentException(\"MathUtils.gamma function does not support negative integers\");\n            }\n            double sinPx = Math.PI * FastMath.sin(Math.PI * x);\n            if (sinPx == 0.0) {\n                return Double.NaN;\n            }\n            negative = (sinPx < 0);\n            x = -x;\n        }\n\n        if (x < 1.0) {\n            double t = x;\n            double fact = 1d + x;\n            while (t < 1.5) {\n                fact *= t;\n                t++;\n            }\n            ret = 1.0 / (fact * (1.0 + 0.5772156649015329 * t) * (1.0 + 0.6558780715202538 * t));\n            while (t < x) {\n                t++;\n                ret *= t;\n            }\n        } else {\n            double p = {0.9999999999998099, 676.5203681218851, -1259.1392167224028, 771.3234287776531,\n                    -176.6150291621406, 12.507343278686905, -0.13857109526572012, 9.984369578019571e-6,\n                    1.5056327351493116e-7};\n            double q = {0.0, 0.0, 0.0, 0.0, 0.0, 1.000000000190015, 76.18009172947146, -86.50532032941677,\n                    24.01409824083091, -1.231739572450155, 0.001208650973866179, -5.395239384953E-06};\n\n            double z = x - 1.0;\n            double fact = p[0];\n            for (int i = 1; i < p.length; i++) {\n                fact += p[i] / (z + i);\n            }\n            double tmp = z + p.length - 0.5;\n            ret = Math.sqrt(2.0 * Math.PI) * FastMath.pow(tmp, z + 0.5) * FastMath.exp(-tmp) * fact;\n\n        }\n\n        if (negative) {\n            ret = -ret;\n        }\n\n        if (Double.isNaN(ret)) {\n            throw new ArithmeticException(\"gamma returned NaN\");\n        }\n\n        if (Double.isInfinite(ret)) {\n            throw new ArithmeticException(\"gamma returned Infinity\");\n        }\n\n        return ret;\n    }\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..04df43d3c 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,89 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.MathUtils;\n+import org.apache.commons.math3.util.Precision;\n+\n+public class GammaFunction {\n+\n+    private GammaFunction() {}\n+\n+    /**\n+     * The gamma function.\n+     *\n+     * @param x Argument.\n+     * @return &gamma;(x)\n+     * @throws IllegalArgumentException if x &le; 0 <em>and</em> x is an integer.\n+     * @throws ArithmeticException if the result is too large to be represented by a {@code double}.\n+     */\n+    public static double gamma(double x)\n+            throws IllegalArgumentException, ArithmeticException {\n+        if (Double.isNaN(x)) {\n+            return x;\n+        }\n+\n+        double ret;\n+        boolean negative = false;\n+\n+        if (x <= 0.0) {\n+            if (x == Math.floor(x)) {\n+                throw new IllegalArgumentException(\"MathUtils.gamma function does not support negative integers\");\n+            }\n+            double sinPx = Math.PI * FastMath.sin(Math.PI * x);\n+            if (sinPx == 0.0) {\n+                return Double.NaN;\n+            }\n+            negative = (sinPx < 0);\n+            x = -x;\n+        }\n+\n+        if (x < 1.0) {\n+            double t = x;\n+            double fact = 1d + x;\n+            while (t < 1.5) {\n+                fact *= t;\n+                t++;\n+            }\n+            ret = 1.0 / (fact * (1.0 + 0.5772156649015329 * t) * (1.0 + 0.6558780715202538 * t));\n+            while (t < x) {\n+                t++;\n+                ret *= t;\n+            }\n+        } else {\n+            double p = {0.9999999999998099, 676.5203681218851, -1259.1392167224028, 771.3234287776531,\n+                    -176.6150291621406, 12.507343278686905, -0.13857109526572012, 9.984369578019571e-6,\n+                    1.5056327351493116e-7};\n+            double q = {0.0, 0.0, 0.0, 0.0, 0.0, 1.000000000190015, 76.18009172947146, -86.50532032941677,\n+                    24.01409824083091, -1.231739572450155, 0.001208650973866179, -5.395239384953E-06};\n+\n+            double z = x - 1.0;\n+            double fact = p[0];\n+            for (int i = 1; i < p.length; i++) {\n+                fact += p[i] / (z + i);\n+            }\n+            double tmp = z + p.length - 0.5;\n+            ret = Math.sqrt(2.0 * Math.PI) * FastMath.pow(tmp, z + 0.5) * FastMath.exp(-tmp) * fact;\n+\n+        }\n+\n+        if (negative) {\n+            ret = -ret;\n+        }\n+\n+        if (Double.isNaN(ret)) {\n+            throw new ArithmeticException(\"gamma returned NaN\");\n+        }\n+\n+        if (Double.isInfinite(ret)) {\n+            throw new ArithmeticException(\"gamma returned Infinity\");\n+        }\n+\n+        return ret;\n+    }\n+\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}