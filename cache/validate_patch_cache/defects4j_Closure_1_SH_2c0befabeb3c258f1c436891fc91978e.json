{
    "patch": "Node function = fnScope.getRootNode();\n\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n}\n\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites\n    && callSiteOptimizer.canModifyCallers(function);\nif (!modifyCallers) {\n    boolean canRemove = true;\n    for (Node arg : argList.children()) {\n        if (canRemove) {\n            Var var = fnScope.getVar(arg.getString());\n            // if it's not referenced and it's an immutable binding, like @const, go on, otherwise we can't.\n            if (!referenced.contains(var) && (NodeUtil.getBestJSDocInfo(arg).isTypeImmutable() || !NodeUtil.isImmutableValue(arg, /* checkConst */ true))) {\n                arg.detach();\n                compiler.reportCodeChange();\n            } else {\n                canRemove = false;\n            }\n        }\n    }\n} else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..68f3dadb 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,34 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites\n+    && callSiteOptimizer.canModifyCallers(function);\n+if (!modifyCallers) {\n+    boolean canRemove = true;\n+    for (Node arg : argList.children()) {\n+        if (canRemove) {\n+            Var var = fnScope.getVar(arg.getString());\n+            // if it's not referenced and it's an immutable binding, like @const, go on, otherwise we can't.\n+            if (!referenced.contains(var) && (NodeUtil.getBestJSDocInfo(arg).isTypeImmutable() || !NodeUtil.isImmutableValue(arg, /* checkConst */ true))) {\n+                arg.detach();\n+                compiler.reportCodeChange();\n+            } else {\n+                canRemove = false;\n+            }\n+        }\n+    }\n+} else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}