{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (candidate != null) {\n    Class<?> fieldType = field.getType();\n    if (fieldType.isAssignableFrom(candidate.getClass()) ||\n            fieldType.isPrimitive() && isWrapperTypeAssignable(field, candidate)) {\n        field.setAccessible(true);\n        try {\n            field.set(fieldInstance, candidate);\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    } else {\n        throw new IllegalArgumentException(String.format(\"Cannot inject %s into %s. Incompatible types: %s and %s\",\n                candidate, awaitingInjectionClazz.getSimpleName(), fieldType.getSimpleName(),\n                candidate.getClass().getSimpleName()));\n    }\n}\n\n// helper method to check primitive and wrapper type compatibility\nprivate boolean isWrapperTypeAssignable(Field field, Object candidate) {\n    return field.getType() == int.class && candidate instanceof Integer ||\n            field.getType() == long.class && candidate instanceof Long ||\n            field.getType() == float.class && candidate instanceof Float ||\n            field.getType() == double.class && candidate instanceof Double ||\n            field.getType() == boolean.class && candidate instanceof Boolean ||\n            field.getType() == char.class && candidate instanceof Character ||\n            field.getType() == short.class && candidate instanceof Short ||\n            field.getType() == byte.class && candidate instanceof Byte;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..b2eae8b78 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,38 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (candidate != null) {\n+    Class<?> fieldType = field.getType();\n+    if (fieldType.isAssignableFrom(candidate.getClass()) ||\n+            fieldType.isPrimitive() && isWrapperTypeAssignable(field, candidate)) {\n+        field.setAccessible(true);\n+        try {\n+            field.set(fieldInstance, candidate);\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+        }\n+    } else {\n+        throw new IllegalArgumentException(String.format(\"Cannot inject %s into %s. Incompatible types: %s and %s\",\n+                candidate, awaitingInjectionClazz.getSimpleName(), fieldType.getSimpleName(),\n+                candidate.getClass().getSimpleName()));\n+    }\n+}\n+\n+// helper method to check primitive and wrapper type compatibility\n+private boolean isWrapperTypeAssignable(Field field, Object candidate) {\n+    return field.getType() == int.class && candidate instanceof Integer ||\n+            field.getType() == long.class && candidate instanceof Long ||\n+            field.getType() == float.class && candidate instanceof Float ||\n+            field.getType() == double.class && candidate instanceof Double ||\n+            field.getType() == boolean.class && candidate instanceof Boolean ||\n+            field.getType() == char.class && candidate instanceof Character ||\n+            field.getType() == short.class && candidate instanceof Short ||\n+            field.getType() == byte.class && candidate instanceof Byte;\n+}\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}