{
    "patch": "                if ((offsetLocal - offsetAdjusted) < 0) {\n                    // We need to ensure that time is always after the DST gap\n                    boolean dstGapFound = false;\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        dstGapFound = true;\n                    } else {\n                        long prevLocal = previousTransition(instantAdjusted);\n                        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                        if (prevLocal != prevAdjusted) {\n                            dstGapFound = true;\n                            nextLocal = prevLocal;\n                            nextAdjusted = prevAdjusted;\n                        }\n                    }\n                    if (dstGapFound) {\n                        long diff = nextAdjusted - instantLocal;\n                        if (diff > 0) {\n                            return offsetLocal;\n                        } else {\n                            return getOffset(nextLocal);\n                        }\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..98bbedf3 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,30 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if ((offsetLocal - offsetAdjusted) < 0) {\n+                    // We need to ensure that time is always after the DST gap\n+                    boolean dstGapFound = false;\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        dstGapFound = true;\n+                    } else {\n+                        long prevLocal = previousTransition(instantAdjusted);\n+                        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                        if (prevLocal != prevAdjusted) {\n+                            dstGapFound = true;\n+                            nextLocal = prevLocal;\n+                            nextAdjusted = prevAdjusted;\n+                        }\n+                    }\n+                    if (dstGapFound) {\n+                        long diff = nextAdjusted - instantLocal;\n+                        if (diff > 0) {\n+                            return offsetLocal;\n+                        } else {\n+                            return getOffset(nextLocal);\n+                        }\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}