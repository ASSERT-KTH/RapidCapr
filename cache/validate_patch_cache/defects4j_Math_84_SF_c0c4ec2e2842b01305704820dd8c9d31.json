{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // Save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // Perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // Compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // Accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                // Accept the reflected point\n                simplex[0] = reflected;\n            }\n            return;\n        }\n\n        // Compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // Accept the contracted simplex\n            final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n            contractedSimplex[0] = best;\n            for (int i = 1; i < original.length; i++) {\n                final double[] contractedPoint = new double[original[i].getPoint().length];\n                for (int j = 0; j < contractedPoint.length; j++) {\n                    contractedPoint[j] = rho * original[i].getPoint()[j] + (1 - rho) * best.getPoint()[j];\n                }\n                contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n            }\n            final RealPointValuePair contractedReflected = evaluateNewSimplex(contractedSimplex, 1.0, comparator);\n            if (comparator.compare(contractedReflected, contracted) < 0) {\n                simplex = contractedSimplex;\n            } else {\n                simplex = evaluateNewSimplex(original, sigma, comparator);\n            }\n        } else {\n            // Perform a shrinking step\n            final RealPointValuePair[] shrinked = new RealPointValuePair[original.length];\n            shrinked[0] = best;\n            for (int i = 1; i < original.length; i++) {\n                final double[] shrinkedPoint = new double[original[i].getPoint().length];\n                for (int j = 0; j < shrinkedPoint.length; j++) {\n                    shrinkedPoint[j] = sigma * original[i].getPoint()[j] + (1 - sigma) * best.getPoint()[j];\n                }\n                shrinked[i] = new RealPointValuePair(shrinkedPoint, Double.NaN);\n            }\n            simplex = shrinked;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..ff39145fc 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,67 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+    while (true) {\n+\n+        incrementIterationsCounter();\n+\n+        // Save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // Perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            // Compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // Accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // Accept the reflected point\n+                simplex[0] = reflected;\n+            }\n+            return;\n+        }\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+        // Compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            // Accept the contracted simplex\n+            final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+            contractedSimplex[0] = best;\n+            for (int i = 1; i < original.length; i++) {\n+                final double[] contractedPoint = new double[original[i].getPoint().length];\n+                for (int j = 0; j < contractedPoint.length; j++) {\n+                    contractedPoint[j] = rho * original[i].getPoint()[j] + (1 - rho) * best.getPoint()[j];\n                 }\n-\n-                return;\n-\n+                contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+            final RealPointValuePair contractedReflected = evaluateNewSimplex(contractedSimplex, 1.0, comparator);\n+            if (comparator.compare(contractedReflected, contracted) < 0) {\n+                simplex = contractedSimplex;\n+            } else {\n+                simplex = evaluateNewSimplex(original, sigma, comparator);\n             }\n-\n+        } else {\n+            // Perform a shrinking step\n+            final RealPointValuePair[] shrinked = new RealPointValuePair[original.length];\n+            shrinked[0] = best;\n+            for (int i = 1; i < original.length; i++) {\n+                final double[] shrinkedPoint = new double[original[i].getPoint().length];\n+                for (int j = 0; j < shrinkedPoint.length; j++) {\n+                    shrinkedPoint[j] = sigma * original[i].getPoint()[j] + (1 - sigma) * best.getPoint()[j];\n+                }\n+                shrinked[i] = new RealPointValuePair(shrinkedPoint, Double.NaN);\n+            }\n+            simplex = shrinked;\n         }\n-\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}