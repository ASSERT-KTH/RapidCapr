{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandlerInterface<T> newMockHandler = new MockHandler<T>(oldMockHandler) {\n        @Override\n        public Object handle(MockInvocation mockInvocation) throws Throwable {\n            Object result = mockInvocation.callRealMethod();\n            if (invocationListener != null) {\n                invocationListener.reportInvocation(new MethodInvocationReport<T>(mockInvocation, result));\n            }\n            return result;\n        }\n    };\n    ((MockAccess) mock).setMockitoInterceptor(new InterceptingMockHandler(newMockHandler));\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..c0eb73401 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,21 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandlerInterface<T> newMockHandler = new MockHandler<T>(oldMockHandler) {\n+        @Override\n+        public Object handle(MockInvocation mockInvocation) throws Throwable {\n+            Object result = mockInvocation.callRealMethod();\n+            if (invocationListener != null) {\n+                invocationListener.reportInvocation(new MethodInvocationReport<T>(mockInvocation, result));\n+            }\n+            return result;\n+        }\n+    };\n+    ((MockAccess) mock).setMockitoInterceptor(new InterceptingMockHandler(newMockHandler));\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}