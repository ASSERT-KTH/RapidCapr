{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  if (joinString == null) {\n    return;\n  }\n\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = new StringBuilder();\n  int foldedSize = 0;\n\n  Node elem = arrayNode.getFirstChild();\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      String s = NodeUtil.getStringValue(elem);\n      if (s != null) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(s);\n      } else {\n        sb.setLength(0);\n      }\n    } else {\n      if (sb.length() > 0) {\n        if (!sb.toString().equals(joinString)) {\n          foldedSize += sb.length() + joinString.length();\n        }\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb = new StringBuilder();\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem.cloneTree());\n    }\n    elem = elem.getNext();\n  }\n\n  if (sb.length() > 0) {\n    if (!sb.toString().equals(joinString)) {\n      foldedSize += sb.length() + joinString.length();\n    }\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n\n  foldedSize += joinString.length() * (arrayFoldedChildren.size() - 1);\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  if (originalSize < 0) {\n    return;\n  }\n\n  if (foldedSize >= originalSize) {\n    return;\n  }\n\n  Node joined;\n\n  if (arrayFoldedChildren.size() == 1) {\n    joined = arrayFoldedChildren.get(0);\n  } else {\n    joined = new Node(Token.ADD);\n    boolean firstString = true;\n    for (Node node : arrayFoldedChildren) {\n      if (node.getType() != Token.STRING) {\n        Node replacement = new Node(Token.ADD, Node.newString(\"\"), node.cloneTree());\n        node = replacement;\n        firstString = true;\n      }\n      if (firstString) {\n        firstString = false;\n      } else {\n        joined.addChildToBack(Node.newString(joinString));\n      }\n      joined.addChildToBack(node);\n    }\n  }\n\n  parent.replaceChild(n, joined);\n  t.getCompiler().reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..271b6d10 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,96 +1458,97 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = left.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+  if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n+    return;\n+  }\n+\n+  String joinString = NodeUtil.getStringValue(right);\n+  if (joinString == null) {\n+    return;\n+  }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n+  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+  StringBuilder sb = new StringBuilder();\n+  int foldedSize = 0;\n+\n+  Node elem = arrayNode.getFirstChild();\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      String s = NodeUtil.getStringValue(elem);\n+      if (s != null) {\n         if (sb.length() > 0) {\n           sb.append(joinString);\n         }\n-        sb.append(NodeUtil.getStringValue(elem));\n+        sb.append(s);\n       } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+        sb.setLength(0);\n+      }\n+    } else {\n+      if (sb.length() > 0) {\n+        if (!sb.toString().equals(joinString)) {\n+          foldedSize += sb.length() + joinString.length();\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+        arrayFoldedChildren.add(Node.newString(sb.toString()));\n+        sb = new StringBuilder();\n       }\n-      elem = elem.getNext();\n+      foldedSize += InlineCostEstimator.getCost(elem);\n+      arrayFoldedChildren.add(elem.cloneTree());\n     }\n+    elem = elem.getNext();\n+  }\n \n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+  if (sb.length() > 0) {\n+    if (!sb.toString().equals(joinString)) {\n+      foldedSize += sb.length() + joinString.length();\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+    arrayFoldedChildren.add(Node.newString(sb.toString()));\n+  }\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+  foldedSize += joinString.length() * (arrayFoldedChildren.size() - 1);\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  int originalSize = InlineCostEstimator.getCost(n);\n+  if (originalSize < 0) {\n+    return;\n+  }\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+  if (foldedSize >= originalSize) {\n+    return;\n+  }\n+\n+  Node joined;\n+\n+  if (arrayFoldedChildren.size() == 1) {\n+    joined = arrayFoldedChildren.get(0);\n+  } else {\n+    joined = new Node(Token.ADD);\n+    boolean firstString = true;\n+    for (Node node : arrayFoldedChildren) {\n+      if (node.getType() != Token.STRING) {\n+        Node replacement = new Node(Token.ADD, Node.newString(\"\"), node.cloneTree());\n+        node = replacement;\n+        firstString = true;\n+      }\n+      if (firstString) {\n+        firstString = false;\n+      } else {\n+        joined.addChildToBack(Node.newString(joinString));\n+      }\n+      joined.addChildToBack(node);\n     }\n-    t.getCompiler().reportCodeChange();\n   }\n \n+  parent.replaceChild(n, joined);\n+  t.getCompiler().reportCodeChange();\n+}\n+\n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}