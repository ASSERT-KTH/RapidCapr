{
    "patch": "public Fraction reduce() {\n    int num = numerator;\n    int den = denominator;\n\n    // If numerator is zero, fraction is already in reduced form\n    if (num == 0) {\n        return Fraction.ZERO;\n    }\n\n    // Simplify negative signs\n    if (den < 0) {\n        num = -num;\n        den = -den;\n    }\n\n    // Compute GCD of absolute values of numerator and denominator\n    int gcd = greatestCommonDivisor(Math.abs(num), Math.abs(den));\n\n    // If GCD is 1, fraction is already in reduced form\n    if (gcd == 1) {\n        return new Fraction(num, den);\n    }\n\n    // Compute simplified numerator and denominator\n    int newNum = num / gcd;\n    int newDen = den / gcd;\n\n    // If denominator is negative, move the negative sign to the numerator\n    if (newDen < 0) {\n        newNum = -newNum;\n        newDen = -newDen;\n    }\n\n    return new Fraction(newNum, newDen);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..5c82d5ff 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,14 +462,42 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+public Fraction reduce() {\n+    int num = numerator;\n+    int den = denominator;\n+\n+    // If numerator is zero, fraction is already in reduced form\n+    if (num == 0) {\n+        return Fraction.ZERO;\n     }\n \n+    // Simplify negative signs\n+    if (den < 0) {\n+        num = -num;\n+        den = -den;\n+    }\n+\n+    // Compute GCD of absolute values of numerator and denominator\n+    int gcd = greatestCommonDivisor(Math.abs(num), Math.abs(den));\n+\n+    // If GCD is 1, fraction is already in reduced form\n+    if (gcd == 1) {\n+        return new Fraction(num, den);\n+    }\n+\n+    // Compute simplified numerator and denominator\n+    int newNum = num / gcd;\n+    int newDen = den / gcd;\n+\n+    // If denominator is negative, move the negative sign to the numerator\n+    if (newDen < 0) {\n+        newNum = -newNum;\n+        newDen = -newDen;\n+    }\n+\n+    return new Fraction(newNum, newDen);\n+}\n+\n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>\n      * ",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<-2/3> was not:<-2/3>",
    "test_result": "FAIL"
}