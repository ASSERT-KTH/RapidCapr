{
    "patch": "      boolean canRemove = true;\n      for (Node child : argList.children()) {\n        Var var = fnScope.getVar(child.getString());\n        if (!referenced.contains(var)) {\n          if (canRemove) {\n            argList.removeChild(child);\n            compiler.reportCodeChange();\n          } else {\n            break;\n          }\n        } else {\n          canRemove = false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8ca50fee 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,18 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      boolean canRemove = true;\n+      for (Node child : argList.children()) {\n+        Var var = fnScope.getVar(child.getString());\n+        if (!referenced.contains(var)) {\n+          if (canRemove) {\n+            argList.removeChild(child);\n+            compiler.reportCodeChange();\n+          } else {\n+            break;\n+          }\n+        } else {\n+          canRemove = false;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}