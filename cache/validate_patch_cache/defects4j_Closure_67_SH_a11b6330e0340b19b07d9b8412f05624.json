{
    "patch": ") {\n        Node lhs = n.getFirstChild();\n        if (lhs != null && lhs.getType() == Token.GETPROP) {\n          lhs = lhs.getFirstChild(); // Look at the leftmost child.\n        }\n\n        if (lhs != null && lhs.getType() == Token.NAME) {\n          String propName = n.getLastChild().getString();\n          if (propName.equals(\"prototype\") &&\n              // Ensure no computed properties\n              !n.getLastChild().isComputed()) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..2c4b2c34 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,23 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+) {\n+        Node lhs = n.getFirstChild();\n+        if (lhs != null && lhs.getType() == Token.GETPROP) {\n+          lhs = lhs.getFirstChild(); // Look at the leftmost child.\n+        }\n+\n+        if (lhs != null && lhs.getType() == Token.NAME) {\n+          String propName = n.getLastChild().getString();\n+          if (propName.equals(\"prototype\") &&\n+              // Ensure no computed properties\n+              !n.getLastChild().isComputed()) {\n+            return true;\n+          }\n+        }\n+      }\n+      return false;\n+    }\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}