{
    "patch": "    // Remove function arguments that are not referenced.\n    Node function = fnScope.getRootNode();\n    Node argList = getFunctionArgList(function);\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Remove arguments that are not referenced.\n      Node currentNode = argList.getFirstChild();\n      while (currentNode != null) {\n        Node nextNode = currentNode.getNext();\n        String paramName = currentNode.getString();\n        if (!referenced.contains(fnScope.getVar(paramName))) {\n          argList.removeChild(currentNode);\n          compiler.reportCodeChange();\n        }\n        currentNode = nextNode;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5392eb64 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,28 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Remove function arguments that are not referenced.\n+    Node function = fnScope.getRootNode();\n+    Node argList = getFunctionArgList(function);\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Remove arguments that are not referenced.\n+      Node currentNode = argList.getFirstChild();\n+      while (currentNode != null) {\n+        Node nextNode = currentNode.getNext();\n+        String paramName = currentNode.getString();\n+        if (!referenced.contains(fnScope.getVar(paramName))) {\n+          argList.removeChild(currentNode);\n+          compiler.reportCodeChange();\n+        }\n+        currentNode = nextNode;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}