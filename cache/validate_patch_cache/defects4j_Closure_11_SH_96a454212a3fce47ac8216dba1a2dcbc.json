{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // Only look at an IN operator if its right operand is a string literal.\n  if (n.isIn()) {\n    Node rightOperand = n.getLastChild();\n    if (!rightOperand.isString()) {\n      t.report(rightOperand, ONLY_STRINGS_ALLOWED);\n      return;\n    }\n  }\n\n  // Warn about foo.__proto__ and new Foo().__proto__.\n  if (n.isGetProp() && n.getLastChild().getString().equals(\"prototype\")) {\n    if (NodeUtil.isLValue(n)) {\n      return;\n    } else {\n      t.report(n, UNSAFE_PROTOTYPE_PROP);\n      return;\n    }\n  }\n\n  // Only iterate over objects or arrays\n  if (n.isVanillaFor()) {\n    Node iterable = NodeUtil.getConditionExpression(n);\n    if (!mayLoopNormally(iterable)) {\n      t.report(iterable, LOOP_CONDITION_ALWAYS_FALSE);\n      return;\n    }\n    Node body = NodeUtil.getLoopCodeBlock(n);\n    ControlFlowGraph<Node> cfg = NodeUtil.getCFG(body, n.getSourceFileName());\n    if (!mayContainKeyBreakOrContinue(cfg)) {\n      t.report(body, USELESS_LOOP);\n      return;\n    }\n  }\n\n  // Warn about i++ in a for-in loop.\n  if (n.isForIn()) {\n    Node lhs = n.getFirstChild();\n    Node rhs = lhs.getNext();\n    if (lhs.isVar() || !rhs.isName()) {\n      t.report(rhs, FORIN_EXPECTS_IDENTIFIER_KEY);\n      return;\n    }\n    Node stmts = n.getLastChild();\n    if (containsIncrementOp(stmts, rhs.getString())) {\n      t.report(stmts, INC_OP_IN_FORIN_LOOP);\n      return;\n    }\n  }\n\n  // Warn about import * statements and imports of non-module scripts.\n  if (n.isImport()) {\n    if (!n.hasChildren() || !n.getFirstChild().isString()) {\n      t.report(n, INVALID_IMPORT_DECLARATION);\n      return;\n    }\n    Node imported = n.getFirstChild();\n    if (imported.getString().equals(\"*\")) {\n      t.report(imported, STAR_IMPORT_NOT_ALLOWED);\n      return;\n    }\n    if (!isModuleFile(t.getInput().getAstRoot(compiler))) {\n      t.report(n, NON_MODULE_IMPORT);\n      return;\n    }\n  }\n\n  // Check that functions using rest parameters are not marked as non-varargs.\n  if (n.isFunction()) {\n    if (n.hasOneChild()) {\n      Node params = n.getFirstChild();\n      if (params.isParamList() && params.hasChildren()) {\n        Node lastParam = params.getLastChild();\n        if (lastParam.isRest()) {\n          JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n          if (info != null && info.isVarArgs()) {\n            t.report(info.getAstNode(), NON_VARARGS_REST_PARAMETER);\n          }\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}