{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n    // For labels with block children, check if the block contains only a single FUNCTION or DO node.\n    if (n.getType() == Token.LABEL && first != last && first.getNext() == last) {\n        return isOneExactlyFunctionOrDo(first.getNext());\n    }\n    if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {\n        return true;\n    }\n    // Check if the block contains only a single child node, and recursively examine the child.\n    if (n.getType() == Token.BLOCK && first != last && first.getNext() == last) {\n        return isOneExactlyFunctionOrDo(first.getNext());\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..9db16412 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,22 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    Node first = n.getFirstChild();\n+    Node last = n.getLastChild();\n+    // For labels with block children, check if the block contains only a single FUNCTION or DO node.\n+    if (n.getType() == Token.LABEL && first != last && first.getNext() == last) {\n+        return isOneExactlyFunctionOrDo(first.getNext());\n+    }\n+    if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {\n+        return true;\n+    }\n+    // Check if the block contains only a single child node, and recursively examine the child.\n+    if (n.getType() == Token.BLOCK && first != last && first.getNext() == last) {\n+        return isOneExactlyFunctionOrDo(first.getNext());\n+    }\n+    return false;\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}