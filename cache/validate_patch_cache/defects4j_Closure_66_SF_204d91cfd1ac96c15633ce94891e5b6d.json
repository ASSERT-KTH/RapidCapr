{
    "patch": "public static double getTypedPercent(JSONObject json) {\n    int totalCount = json.getInt(\"totalCount\");\n    int typedCount = 0;\n\n    JSONArray items = json.getJSONArray(\"items\");\n    for (int i = 0; i < items.length(); i++) {\n        JSONObject item = items.getJSONObject(i);\n        if (item.getBoolean(\"typed\")) {\n            typedCount++;\n        }\n    }\n\n    if (totalCount > 0) {\n        return ((double) typedCount / totalCount) * 100;\n    } else {\n        return 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..6b8067af 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject json) {\n+    int totalCount = json.getInt(\"totalCount\");\n+    int typedCount = 0;\n+\n+    JSONArray items = json.getJSONArray(\"items\");\n+    for (int i = 0; i < items.length(); i++) {\n+        JSONObject item = items.getJSONObject(i);\n+        if (item.getBoolean(\"typed\")) {\n+            typedCount++;\n+        }\n+    }\n+\n+    if (totalCount > 0) {\n+        return ((double) typedCount / totalCount) * 100;\n+    } else {\n+        return 0.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}