{
    "patch": "/**\n * Tries to minimize an \"IF\" statement, if possible.\n *\n * @param n An IF statement.\n * @return Node The replacement node, or the original node if no change was made.\n */\nprivate Node tryMinimizeIf(Node n) {\n  Node parent = n.getParent();\n  Node cond = n.getFirstChild();\n  Node thenBranch = cond.getNext();\n  Node elseBranch = thenBranch.getNext();\n\n  // if it has an ELSE and there are no further nodes, then remove the ELSE\n  if (elseBranch == null) {\n    if (isFoldableExpressBlock(thenBranch)) {\n      // if(x)foo(); -> x&&foo();\n      if (cond.isAnd()) {\n        Node expr = getBlockExpression(thenBranch);\n        Node newExpr = IR.exprResult(expr.removeFirstChild()).srcref(n);\n        parent.replaceChild(n, newExpr);\n        reportCodeChange();\n        return newExpr;\n\n      // if(!x)bar(); -> x||bar();\n      } else if (cond.isNot() && isPropertyAssignmentInExpression(getBlockExpression(thenBranch))) {\n        Node or = IR.or(cond.removeFirstChild(), getBlockExpression(thenBranch).removeFirstChild()).srcref(n);\n        Node newExpr = NodeUtil.newExpr(or);\n        parent.replaceChild(n, newExpr);\n        reportCodeChange();\n        return newExpr;\n\n      // if(x)foo(); -> x&&foo();\n      } else if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n                 isLowerPrecedenceInExpression(getBlockExpression(thenBranch).getFirstChild(), AND_PRECEDENCE)) {\n        Node and = IR.and(con",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..10ab188b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,41 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+/**\n+ * Tries to minimize an \"IF\" statement, if possible.\n+ *\n+ * @param n An IF statement.\n+ * @return Node The replacement node, or the original node if no change was made.\n+ */\n+private Node tryMinimizeIf(Node n) {\n+  Node parent = n.getParent();\n+  Node cond = n.getFirstChild();\n+  Node thenBranch = cond.getNext();\n+  Node elseBranch = thenBranch.getNext();\n+\n+  // if it has an ELSE and there are no further nodes, then remove the ELSE\n+  if (elseBranch == null) {\n+    if (isFoldableExpressBlock(thenBranch)) {\n+      // if(x)foo(); -> x&&foo();\n+      if (cond.isAnd()) {\n+        Node expr = getBlockExpression(thenBranch);\n+        Node newExpr = IR.exprResult(expr.removeFirstChild()).srcref(n);\n+        parent.replaceChild(n, newExpr);\n+        reportCodeChange();\n+        return newExpr;\n+\n+      // if(!x)bar(); -> x||bar();\n+      } else if (cond.isNot() && isPropertyAssignmentInExpression(getBlockExpression(thenBranch))) {\n+        Node or = IR.or(cond.removeFirstChild(), getBlockExpression(thenBranch).removeFirstChild()).srcref(n);\n+        Node newExpr = NodeUtil.newExpr(or);\n+        parent.replaceChild(n, newExpr);\n+        reportCodeChange();\n+        return newExpr;\n+\n+      // if(x)foo(); -> x&&foo();\n+      } else if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n+                 isLowerPrecedenceInExpression(getBlockExpression(thenBranch).getFirstChild(), AND_PRECEDENCE)) {\n+        Node and = IR.and(con\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}