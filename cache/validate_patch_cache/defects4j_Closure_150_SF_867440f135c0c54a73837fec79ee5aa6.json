{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n        return;\n    }\n\n    switch (n.getType()) {\n        case Token.LP:\n            // Handle function inputs\n            if (parent.getType() == Token.NAME) {\n                Node grandparent = parent.getParent();\n                if (grandparent.getType() == Token.SCRIPT) {\n                    handleFunctionInputs(n);\n                }\n            }\n            break;\n        case Token.FUNCTION:\n            // Define declared function\n            if (isDeclaredFunction(n, parent)) {\n                Node grandparent = parent.getParent();\n                if (grandparent.getType() == Token.SCRIPT) {\n                    defineDeclaredFunction(n, grandparent);\n                } else {\n                    defineDeclaredFunction(n, parent);\n                }\n            }\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        default:\n            attachLiteralTypes(n);\n            break;\n    }\n}\n\n// Helper method to check if a function is declared\nprivate boolean isDeclaredFunction(Node n, Node parent) {\n    return parent.getType() == Token.EXPR_RESULT &&\n            parent.getParent().getType() == Token.BLOCK &&\n            parent.getParent().getParent().getType() == Token.SCRIPT &&\n            parent.getFirstChild() == n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..c9b3ec12 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,52 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+    switch (n.getType()) {\n+        case Token.LP:\n+            // Handle function inputs\n+            if (parent.getType() == Token.NAME) {\n+                Node grandparent = parent.getParent();\n+                if (grandparent.getType() == Token.SCRIPT) {\n+                    handleFunctionInputs(n);\n+                }\n+            }\n+            break;\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            // Define declared function\n+            if (isDeclaredFunction(n, parent)) {\n+                Node grandparent = parent.getParent();\n+                if (grandparent.getType() == Token.SCRIPT) {\n+                    defineDeclaredFunction(n, grandparent);\n+                } else {\n+                    defineDeclaredFunction(n, parent);\n+                }\n+            }\n+            break;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineVar(n, parent);\n+            break;\n+        case Token.CATCH:\n+            defineCatch(n, parent);\n+            break;\n+        default:\n+            attachLiteralTypes(n);\n+            break;\n     }\n+}\n+\n+// Helper method to check if a function is declared\n+private boolean isDeclaredFunction(Node n, Node parent) {\n+    return parent.getType() == Token.EXPR_RESULT &&\n+            parent.getParent().getType() == Token.BLOCK &&\n+            parent.getParent().getParent().getType() == Token.SCRIPT &&\n+            parent.getFirstChild() == n;\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}