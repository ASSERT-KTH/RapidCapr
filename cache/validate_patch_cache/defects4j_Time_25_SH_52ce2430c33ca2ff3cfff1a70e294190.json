{
    "patch": "            if (offsetAdjusted >=0) {\n                return offsetAdjusted;\n            }\n            long prevLocal = previousTransition(instantAdjusted);\n            if (prevLocal == instantAdjusted) {\n                // if we are exactly on a transition, need to work out which side to use\n                // rely on fact that both zones will have same name keys\n                DateTimeZone zone = DateTimeZone.forOffsetMillis(offsetLocal);\n                if (zone.getStandardOffset(instantAdjusted) < offsetLocal) {\n                    return offsetLocal;\n                }\n                return offsetAdjusted;\n            }\n            long prevAdjusted = nextTransition(instantLocal - offsetLocal);\n            if (prevAdjusted <= instantAdjusted) {\n                return offsetAdjusted;\n            }\n            return offsetLocal;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5b1ea5f5 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetAdjusted >=0) {\n+                return offsetAdjusted;\n+            }\n+            long prevLocal = previousTransition(instantAdjusted);\n+            if (prevLocal == instantAdjusted) {\n+                // if we are exactly on a transition, need to work out which side to use\n+                // rely on fact that both zones will have same name keys\n+                DateTimeZone zone = DateTimeZone.forOffsetMillis(offsetLocal);\n+                if (zone.getStandardOffset(instantAdjusted) < offsetLocal) {\n+                    return offsetLocal;\n+                }\n+                return offsetAdjusted;\n+            }\n+            long prevAdjusted = nextTransition(instantLocal - offsetLocal);\n+            if (prevAdjusted <= instantAdjusted) {\n+                return offsetAdjusted;\n+            }\n+            return offsetLocal;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}