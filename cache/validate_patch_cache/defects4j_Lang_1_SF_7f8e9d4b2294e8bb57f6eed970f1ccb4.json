{
    "patch": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null || str.isEmpty()) {\n        throw new NumberFormatException(\"null or empty string is not a valid number\");\n    }\n\n    String trimmed = StringUtils.deleteWhitespace(str);\n    if (trimmed == null || trimmed.isEmpty()) {\n        throw new NumberFormatException(\"null or empty string is not a valid number\");\n    }\n\n    // Hex number\n    boolean isHex = false;\n    if (trimmed.length() > 1 && trimmed.charAt(0) == '0' && trimmed.charAt(1) == 'x') {\n        isHex = true;\n        for (int i = 2; i < trimmed.length(); i++) {\n            char c = trimmed.charAt(i);\n            if ((c < '0' || c > '9') && (c < 'a' || c > 'f') && (c < 'A' || c > 'F')) {\n                isHex = false;\n                break;\n            }\n        }\n    }\n\n    if (isHex) {\n        final int hexDigits = trimmed.length() - 2;\n        if (hexDigits > 16) { // too many for Long\n            return createBigInteger(trimmed);\n        }\n        if (hexDigits > 8) { // too many for an int\n            return createLong(trimmed);\n        }\n        return createInteger(trimmed);\n    }\n\n    char lastChar = trimmed.charAt(trimmed.length() - 1);\n\n    if (lastChar == 'f' || lastChar == 'F') {\n        try {\n            Float f = Float.parseFloat(trimmed);\n            if (!(f.isInfinite() || f == 0.0F)) {\n                return f;\n            }\n        } catch (NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n    }\n\n    if (lastChar == 'd' || lastChar == 'D' || trimmed.indexOf('.') != -1 || trimmed.indexOf('e') != -1 || trimmed.indexOf('E') != -1) {\n        try {\n            Double d = Double.parseDouble(trimmed);\n            if (!(d.isInfinite() || d == 0.0D)) {\n                if (trimmed.indexOf('.') != -1 || trimmed.toLowerCase().contains(\"e\")) {\n                    if (trimmed.length() <= 14) {// If number has 7 or fewer digits past the decimal point, convert it to a float\n                        return d.floatValue();\n                    } else {\n                        return BigDecimal.valueOf(d);\n                    }\n                } else {\n                    return d;\n                }\n            }\n        } catch (NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n    } else {// integer\n        try {\n            if (trimmed.charAt(0) == '+' || trimmed.charAt(0) == '-') {\n                // integer part needs to be at least 1 character\n                if (trimmed.length() == 1) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                return createInteger(trimmed);\n            } else {\n                // integer part needs to be at least 1 character\n                if (trimmed.length() == 0) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                if (trimmed.length() <= 9) {\n                    return createInteger(trimmed);\n                } else {\n                    return createLong(trimmed);\n                }\n            }\n        } catch (NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n    }\n\n    throw new NumberFormatException(str + \" is not a valid number.\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 1e6ccdc0..a340177e 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -447,172 +447,97 @@ public class NumberUtils {\n      * @return Number created from the string (or null if the input is null)\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(final String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }\n-        // Need to deal with all possible hex prefixes here\n-        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n-        int pfxLen = 0;\n-        for(final String pfx : hex_prefixes) {\n-            if (str.startsWith(pfx)) {\n-                pfxLen += pfx.length();\n+public static Number createNumber(final String str) throws NumberFormatException {\n+    if (str == null || str.isEmpty()) {\n+        throw new NumberFormatException(\"null or empty string is not a valid number\");\n+    }\n+\n+    String trimmed = StringUtils.deleteWhitespace(str);\n+    if (trimmed == null || trimmed.isEmpty()) {\n+        throw new NumberFormatException(\"null or empty string is not a valid number\");\n+    }\n+\n+    // Hex number\n+    boolean isHex = false;\n+    if (trimmed.length() > 1 && trimmed.charAt(0) == '0' && trimmed.charAt(1) == 'x') {\n+        isHex = true;\n+        for (int i = 2; i < trimmed.length(); i++) {\n+            char c = trimmed.charAt(i);\n+            if ((c < '0' || c > '9') && (c < 'a' || c > 'f') && (c < 'A' || c > 'F')) {\n+                isHex = false;\n                 break;\n             }\n         }\n-        if (pfxLen > 0) { // we have a hex number\n-            final int hexDigits = str.length() - pfxLen;\n-            if (hexDigits > 16) { // too many for Long\n-                return createBigInteger(str);\n-            }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n-            }\n-            return createInteger(str);\n+    }\n+\n+    if (isHex) {\n+        final int hexDigits = trimmed.length() - 2;\n+        if (hexDigits > 16) { // too many for Long\n+            return createBigInteger(trimmed);\n         }\n-        final char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        final int decPos = str.indexOf('.');\n-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n-\n-        int numDecimals = 0; // Check required precision (LANG-693)\n-        if (decPos > -1) { // there is a decimal point\n-\n-            if (expPos > -1) { // there is an exponent\n-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n-            mant = str.substring(0, decPos);\n-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n-        } else {\n-            if (expPos > -1) {\n-                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n-            dec = null;\n+        if (hexDigits > 8) { // too many for an int\n+            return createLong(trimmed);\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            final String numeric = str.substring(0, str.length() - 1);\n-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (final NumberFormatException nfe) { // NOPMD\n-                            // Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n+        return createInteger(trimmed);\n+    }\n \n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        final Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        final Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (final NumberFormatException e) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+    char lastChar = trimmed.charAt(trimmed.length() - 1);\n \n+    if (lastChar == 'f' || lastChar == 'F') {\n+        try {\n+            Float f = Float.parseFloat(trimmed);\n+            if (!(f.isInfinite() || f == 0.0F)) {\n+                return f;\n             }\n+        } catch (NumberFormatException nfe) { // NOPMD\n+            // ignore the bad number\n         }\n-        //User doesn't have a preference on the return type, so let's start\n-        //small and go from there...\n-        if (expPos > -1 && expPos < str.length() - 1) {\n-            exp = str.substring(expPos + 1, str.length());\n-        } else {\n-            exp = null;\n-        }\n-        if (dec == null && exp == null) { // no decimal point and no exponent\n-            //Must be an Integer, Long, Biginteger\n-            try {\n-                return createInteger(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            try {\n-                return createLong(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            return createBigInteger(str);\n-        }\n+    }\n \n-        //Must be a Float, Double, BigDecimal\n-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+    if (lastChar == 'd' || lastChar == 'D' || trimmed.indexOf('.') != -1 || trimmed.indexOf('e') != -1 || trimmed.indexOf('E') != -1) {\n         try {\n-            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n-                final Float f = createFloat(str);\n-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                    return f;\n+            Double d = Double.parseDouble(trimmed);\n+            if (!(d.isInfinite() || d == 0.0D)) {\n+                if (trimmed.indexOf('.') != -1 || trimmed.toLowerCase().contains(\"e\")) {\n+                    if (trimmed.length() <= 14) {// If number has 7 or fewer digits past the decimal point, convert it to a float\n+                        return d.floatValue();\n+                    } else {\n+                        return BigDecimal.valueOf(d);\n+                    }\n+                } else {\n+                    return d;\n                 }\n             }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n+        } catch (NumberFormatException nfe) { // NOPMD\n             // ignore the bad number\n         }\n+    } else {// integer\n         try {\n-            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n-                final Double d = createDouble(str);\n-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                    return d;\n+            if (trimmed.charAt(0) == '+' || trimmed.charAt(0) == '-') {\n+                // integer part needs to be at least 1 character\n+                if (trimmed.length() == 1) {\n+                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                }\n+                return createInteger(trimmed);\n+            } else {\n+                // integer part needs to be at least 1 character\n+                if (trimmed.length() == 0) {\n+                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                }\n+                if (trimmed.length() <= 9) {\n+                    return createInteger(trimmed);\n+                } else {\n+                    return createLong(trimmed);\n                 }\n             }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n+        } catch (NumberFormatException nfe) { // NOPMD\n             // ignore the bad number\n         }\n-\n-        return createBigDecimal(str);\n     }\n \n+    throw new NumberFormatException(str + \" is not a valid number.\");\n+}\n+\n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>\n      *",
    "result_reason": "junit.framework.AssertionFailedError: createNumber(String) 3 failed expected: java.lang.Double<1234.5> but was: java.lang.Float<1234.5>",
    "test_result": "FAIL"
}