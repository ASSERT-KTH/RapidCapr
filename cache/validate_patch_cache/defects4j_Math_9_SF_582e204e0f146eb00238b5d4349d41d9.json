{
    "patch": "import java.util.Objects;\n\npublic final class Line {\n    private final Point point1;\n    private final Point point2;\n\n    public Line(Point point1, Point point2) {\n        this.point1 = Objects.requireNonNull(point1);\n        this.point2 = Objects.requireNonNull(point2);\n    }\n\n    public Line revert() {\n        return new Line(point2, point1);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..aa0539747 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,21 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n+import java.util.Objects;\n+\n+public final class Line {\n+    private final Point point1;\n+    private final Point point2;\n+\n+    public Line(Point point1, Point point2) {\n+        this.point1 = Objects.requireNonNull(point1);\n+        this.point2 = Objects.requireNonNull(point2);\n+    }\n+\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n+        return new Line(point2, point1);\n     }\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}