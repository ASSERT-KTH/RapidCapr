{
    "patch": "public static boolean hasSameChars(String s1, String s2) {\n    if (s1.length() != s2.length()) {\n        return false;\n    } else {\n        char[] s1Array = s1.toCharArray();\n        Arrays.sort(s1Array);\n        char[] s2Array = s2.toCharArray();\n        Arrays.sort(s2Array);\n        return Arrays.equals(s1Array, s2Array);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..83ffccbae 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,17 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static boolean hasSameChars(String s1, String s2) {\n+    if (s1.length() != s2.length()) {\n+        return false;\n+    } else {\n+        char[] s1Array = s1.toCharArray();\n+        Arrays.sort(s1Array);\n+        char[] s2Array = s2.toCharArray();\n+        Arrays.sort(s2Array);\n+        return Arrays.equals(s1Array, s2Array);\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}