{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    List<Node> arguments = call.children().stream().skip(1).collect(Collectors.toList());\n    List<Node> parameters = new ArrayList<>(functionType.getParameters());\n\n    boolean varArgs = functionType.getMaxArguments() == Integer.MAX_VALUE;\n\n    int maxExpectedArgs = Math.max(parameters.size(), functionType.getMinArguments()) +\n            (varArgs && parameters.size() != 0 ? arguments.size() - parameters.size() : 0);\n\n    if (arguments.size() < functionType.getMinArguments() ||\n            (!varArgs && arguments.size() > functionType.getMaxArguments()) ||\n            (varArgs && arguments.size() < parameters.size())) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(arguments.size()), String.valueOf(functionType.getMinArguments()),\n                functionType.getMaxArguments() != Integer.MAX_VALUE ?\n                        \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n        return;\n    }\n\n    int ordinal = 0;\n    for (int i = 0; i < parameters.size(); i++) {\n        Node parameter = parameters.get(i);\n        Node argument = arguments.get(i);\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument,\n                getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    if (varArgs) {\n        for (int i = parameters.size(); i < arguments.size(); i++) {\n            Node argument = arguments.get(i);\n            ordinal++;\n            Node parameter = parameters.isEmpty() ? null : parameters.get(parameters.size() - 1);\n            validator.expectArgumentMatchesParameter(t, argument,\n                    getJSType(argument), getJSType(parameter), call, ordinal);\n        }\n    }\n\n    if (arguments.size() > maxExpectedArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(arguments.size()), String.valueOf(functionType.getMinArguments()),\n                functionType.getMaxArguments() != Integer.MAX_VALUE ?\n                        \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..185cd1c0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,53 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+    List<Node> arguments = call.children().stream().skip(1).collect(Collectors.toList());\n+    List<Node> parameters = new ArrayList<>(functionType.getParameters());\n+\n+    boolean varArgs = functionType.getMaxArguments() == Integer.MAX_VALUE;\n+\n+    int maxExpectedArgs = Math.max(parameters.size(), functionType.getMinArguments()) +\n+            (varArgs && parameters.size() != 0 ? arguments.size() - parameters.size() : 0);\n+\n+    if (arguments.size() < functionType.getMinArguments() ||\n+            (!varArgs && arguments.size() > functionType.getMaxArguments()) ||\n+            (varArgs && arguments.size() < parameters.size())) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(arguments.size()), String.valueOf(functionType.getMinArguments()),\n+                functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+                        \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n+        return;\n+    }\n \n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+    for (int i = 0; i < parameters.size(); i++) {\n+        Node parameter = parameters.get(i);\n+        Node argument = arguments.get(i);\n+        ordinal++;\n+        validator.expectArgumentMatchesParameter(t, argument,\n+                getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (varArgs) {\n+        for (int i = parameters.size(); i < arguments.size(); i++) {\n+            Node argument = arguments.get(i);\n+            ordinal++;\n+            Node parameter = parameters.isEmpty() ? null : parameters.get(parameters.size() - 1);\n+            validator.expectArgumentMatchesParameter(t, argument,\n+                    getJSType(argument), getJSType(parameter), call, ordinal);\n+        }\n     }\n-  }\n+\n+    if (arguments.size() > maxExpectedArgs) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(arguments.size()), String.valueOf(functionType.getMinArguments()),\n+                functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+                        \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n+    }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}