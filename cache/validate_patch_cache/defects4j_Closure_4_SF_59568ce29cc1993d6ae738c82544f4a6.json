{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    List<JSError> warnings = warningsCollector.getWarnings();\n    if (warnings != null && !warnings.isEmpty()) {\n      for (JSError warning : warnings) {\n        if (!expectedWarnings.contains(warning.getType())) {\n          throw new RuntimeException(\"unexpected warning(s): \" + warning.getDescription());\n        }\n      }\n    }\n\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    resolveViaProperties(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..dba8b0e2 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,15 +182,20 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n     boolean resolved = resolveViaRegistry(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n+    List<JSError> warnings = warningsCollector.getWarnings();\n+    if (warnings != null && !warnings.isEmpty()) {\n+      for (JSError warning : warnings) {\n+        if (!expectedWarnings.contains(warning.getType())) {\n+          throw new RuntimeException(\"unexpected warning(s): \" + warning.getDescription());\n+        }\n+      }\n+    }\n+\n     if (resolved) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}