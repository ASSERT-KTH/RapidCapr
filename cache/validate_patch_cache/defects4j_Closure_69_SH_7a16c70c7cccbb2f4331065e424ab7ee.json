{
    "patch": "      if (functionType.getTypeOfThis() != null) {\n        Node parent = n.getParent();\n        if (parent != null && parent.isGetProp()) {\n          return;\n        }\n        if (parent != null && parent.isGetElem() && parent.getLastChild() == n) {\n          Node grandparent = parent.getParent();\n          if (!grandparent.isExprResult()) {\n            return;\n          }\n        }\n        report(t, n, FUNCTION_WITHOUT_GETTER, childType.toString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..0a9c1988 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getTypeOfThis() != null) {\n+        Node parent = n.getParent();\n+        if (parent != null && parent.isGetProp()) {\n+          return;\n+        }\n+        if (parent != null && parent.isGetElem() && parent.getLastChild() == n) {\n+          Node grandparent = parent.getParent();\n+          if (!grandparent.isExprResult()) {\n+            return;\n+          }\n+        }\n+        report(t, n, FUNCTION_WITHOUT_GETTER, childType.toString());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}