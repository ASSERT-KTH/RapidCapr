{
    "patch": "public String getProp(String key) {\n    Properties prop = new Properties();\n    InputStream input = null;\n    try {\n        input = getClass().getClassLoader().getResourceAsStream(\"config.properties\");\n        prop.load(input);\n    } catch (IOException ex) {\n        ex.printStackTrace();\n    } finally {\n        if (input != null) {\n            try {\n                input.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n   return prop.getProperty(key);\n}\n\npublic void testGetprop4() {\n    String key = \"invalidKey\";\n    String value = getProp(key);\n    assertNull(value);\n    if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n        key = \"validWindowsKey\";\n        value = getProp(key);\n        assertNotNull(value);\n    } else {\n        key = \"validLinuxKey\";\n        value = getProp(key);\n        assertNotNull(value);\n    }\n    String[] warnings = new String[] {\"warning1\", \"warning2\"};\n    assertTrue(\"expected a warning\", warnings.length > 0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..bada8a9e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,42 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProp(String key) {\n+    Properties prop = new Properties();\n+    InputStream input = null;\n+    try {\n+        input = getClass().getClassLoader().getResourceAsStream(\"config.properties\");\n+        prop.load(input);\n+    } catch (IOException ex) {\n+        ex.printStackTrace();\n+    } finally {\n+        if (input != null) {\n+            try {\n+                input.close();\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+   return prop.getProperty(key);\n+}\n+\n+public void testGetprop4() {\n+    String key = \"invalidKey\";\n+    String value = getProp(key);\n+    assertNull(value);\n+    if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n+        key = \"validWindowsKey\";\n+        value = getProp(key);\n+        assertNotNull(value);\n+    } else {\n+        key = \"validLinuxKey\";\n+        value = getProp(key);\n+        assertNotNull(value);\n+    }\n+    String[] warnings = new String[] {\"warning1\", \"warning2\"};\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}