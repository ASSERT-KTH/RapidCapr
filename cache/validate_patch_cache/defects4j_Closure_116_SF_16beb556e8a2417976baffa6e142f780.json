{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n  \n  // Check for function side-effects\n  if (NodeUtil.mayHaveSideEffects(fnNode.getLastChild(), compiler)) {\n    return CanInlineResult.NO;\n  }\n  \n  // MAIN NODES: [ NAME, ARG1, ARG2, FUNCTION ]\n  Node functionNode = fnNode.getLastChild();\n  Node argumentsNode = callNode.getLastChild();\n\n  // Ensure function has a single return statement\n  if (!NodeUtil.hasOneChild(NodeUtil.getFunctionBody(functionNode), Token.RETURN)) {\n    return CanInlineResult.NO;\n  }\n\n  // Check the value returned by the function\n  Node returnValue = NodeUtil.getOnlyChild(NodeUtil.getFunctionBody(functionNode));\n  if (NodeUtil.isImmutableValue(returnValue)) {\n    return CanInlineResult.YES;\n  } else if (NodeUtil.isNameDeclaration(returnValue)) {\n    // Inlining functions with declared variables in the return statement is not supported.\n    return CanInlineResult.NO;\n  } else {\n    return CanInlineResult.NO;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..84d1f8c9 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,36 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n-\n-    Node block = fnNode.getLastChild();\n-\n-\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n-    }\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n+  \n+  // Check for function side-effects\n+  if (NodeUtil.mayHaveSideEffects(fnNode.getLastChild(), compiler)) {\n+    return CanInlineResult.NO;\n+  }\n+  \n+  // MAIN NODES: [ NAME, ARG1, ARG2, FUNCTION ]\n+  Node functionNode = fnNode.getLastChild();\n+  Node argumentsNode = callNode.getLastChild();\n+\n+  // Ensure function has a single return statement\n+  if (!NodeUtil.hasOneChild(NodeUtil.getFunctionBody(functionNode), Token.RETURN)) {\n+    return CanInlineResult.NO;\n+  }\n \n+  // Check the value returned by the function\n+  Node returnValue = NodeUtil.getOnlyChild(NodeUtil.getFunctionBody(functionNode));\n+  if (NodeUtil.isImmutableValue(returnValue)) {\n     return CanInlineResult.YES;\n+  } else if (NodeUtil.isNameDeclaration(returnValue)) {\n+    // Inlining functions with declared variables in the return statement is not supported.\n+    return CanInlineResult.NO;\n+  } else {\n+    return CanInlineResult.NO;\n   }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}