{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); // New version\n    long savedTime = instantLocal;\n\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(savedTime);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            savedTime, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    if (bucket.getOffsetInteger() != null) {\n        instantLocal = instantLocal - bucket.getOffsetInteger();\n    }\n    instant.setMillis(bucket.computeMillis(false, text));\n\n    if (bucket.getZone() != null && iZone != null) {\n        // Both are specified\n        DateTimeZone parsedZone = bucket.getZone();\n        if (!iZone.equals(parsedZone)) {\n            throw new IllegalArgumentException(\n                        \"DateTimeParserBucket and DateTimeFormatter must not specify \"\n                        + \"different zones\");\n        }\n    }\n    else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n        instant.setChronology(chrono);\n    } else if (iZone != null) {\n        instant.setZone(iZone);\n    }\n\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        chrono = chrono.withZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger()));\n        instant.setChronology(chrono);\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..9e855449 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,53 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); // New version\n+    long savedTime = instantLocal;\n+\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(savedTime);\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            savedTime, chrono, iLocale, iPivotYear, defaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    \n+    if (bucket.getOffsetInteger() != null) {\n+        instantLocal = instantLocal - bucket.getOffsetInteger();\n+    }\n+    instant.setMillis(bucket.computeMillis(false, text));\n+\n+    if (bucket.getZone() != null && iZone != null) {\n+        // Both are specified\n+        DateTimeZone parsedZone = bucket.getZone();\n+        if (!iZone.equals(parsedZone)) {\n+            throw new IllegalArgumentException(\n+                        \"DateTimeParserBucket and DateTimeFormatter must not specify \"\n+                        + \"different zones\");\n         }\n+    }\n+    else if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n+        instant.setChronology(chrono);\n+    } else if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+\n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        chrono = chrono.withZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger()));\n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n     }\n \n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2004-06-09T12:20:30.000+02:00> but was:<2004-06-09T11:20:30.000+01:00>",
    "test_result": "FAIL"
}