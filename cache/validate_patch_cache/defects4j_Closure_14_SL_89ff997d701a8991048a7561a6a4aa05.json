{
    "patch": "if (cfa != null && finallyNode != null) {\n    Node followNode = computeFollowNode(fromNode, finallyNode.getLastChild(), cfa);\n    if (followNode == null) {\n        followNode = computeFollowNode(fromNode, finallyNode, cfa);\n    }\n    if (followNode != null) {\n        cfa.createEdge(finallyNode, Branch.UNCOND, followNode);\n        if (node.getLastChild().isBlock()) {\n            // If the finally block contains a nested control structure that also\n            // contains a return statement, we need to create cross edges from the\n            // outer control structure nodes to the follow node\n            CrossScopeJumpCollector jumps = CrossScopeJumpCollector.collect(node.getLastChild());\n            for (CrossScopeJump site : jumps.getJumps()) {\n                if (site.getTarget().getType() == Token.RETURN) {\n                    Node outerControlStructure = ControlFlowAnalysis.getOwningControlStructure(site.getScope());\n                    cfa.createEdge(outerControlStructure, Branch.UNCOND, followNode);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..ba71cbd1 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,27 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null && finallyNode != null) {\n+    Node followNode = computeFollowNode(fromNode, finallyNode.getLastChild(), cfa);\n+    if (followNode == null) {\n+        followNode = computeFollowNode(fromNode, finallyNode, cfa);\n+    }\n+    if (followNode != null) {\n+        cfa.createEdge(finallyNode, Branch.UNCOND, followNode);\n+        if (node.getLastChild().isBlock()) {\n+            // If the finally block contains a nested control structure that also\n+            // contains a return statement, we need to create cross edges from the\n+            // outer control structure nodes to the follow node\n+            CrossScopeJumpCollector jumps = CrossScopeJumpCollector.collect(node.getLastChild());\n+            for (CrossScopeJump site : jumps.getJumps()) {\n+                if (site.getTarget().getType() == Token.RETURN) {\n+                    Node outerControlStructure = ControlFlowAnalysis.getOwningControlStructure(site.getScope());\n+                    cfa.createEdge(outerControlStructure, Branch.UNCOND, followNode);\n+                }\n+            }\n+        }\n+    }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}