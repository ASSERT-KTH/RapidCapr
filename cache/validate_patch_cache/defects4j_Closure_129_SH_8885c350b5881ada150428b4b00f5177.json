{
    "patch": "      // ignore cast nodes.\n      if (NodeUtil.isAstReferenceName(first)) {\n        Node var = getScope().getVar(first.getString());\n        if (var != null) {\n          // We only care that this is *likely* a getprop, not that it necessarily is.\n          // We don't want to consider a stray reference to an object's .call or .apply method\n          // as a context since it would indicate a lie in our type information.\n          if (!var.getBooleanProp(Node.IS_NAMESPACE)) {\n            n.putBooleanProp(Node.FREE_CALL, true);\n          }\n        } else {\n          n.putBooleanProp(Node.FREE_CALL, true);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..b138a5de 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,20 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      // ignore cast nodes.\n+      if (NodeUtil.isAstReferenceName(first)) {\n+        Node var = getScope().getVar(first.getString());\n+        if (var != null) {\n+          // We only care that this is *likely* a getprop, not that it necessarily is.\n+          // We don't want to consider a stray reference to an object's .call or .apply method\n+          // as a context since it would indicate a lie in our type information.\n+          if (!var.getBooleanProp(Node.IS_NAMESPACE)) {\n+            n.putBooleanProp(Node.FREE_CALL, true);\n+          }\n+        } else {\n+          n.putBooleanProp(Node.FREE_CALL, true);\n+        }\n+      }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}