{
    "patch": "            // adjust instantLocal using the estimate and recalc the offset\n            final long instantAdjusted = instantLocal - offsetLocal;\n            final int offsetAdjusted = getOffset(instantAdjusted);\n            // if the offsets differ, we must be near a DST boundary\n            if (offsetLocal != offsetAdjusted) {\n                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                if (offsetLocal < offsetAdjusted) {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                    if (nextLocal == nextAdjusted) {\n                        return offsetAdjusted;\n                    }\n                } else {\n                    long nextLocal = previousTransition(instantAdjusted);\n                    long nextAdjusted = previousTransition(instantLocal - offsetLocal);\n                    if (nextLocal >= instantAdjusted && nextAdjusted < instantAdjusted - offsetAdjusted) {\n                        return offsetAdjusted;\n                    }\n                }\n                return offsetLocal;\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..97001e06 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,31 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // adjust instantLocal using the estimate and recalc the offset\n+            final long instantAdjusted = instantLocal - offsetLocal;\n+            final int offsetAdjusted = getOffset(instantAdjusted);\n+            // if the offsets differ, we must be near a DST boundary\n+            if (offsetLocal != offsetAdjusted) {\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                if (offsetLocal < offsetAdjusted) {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+                    if (nextLocal == nextAdjusted) {\n+                        return offsetAdjusted;\n+                    }\n+                } else {\n+                    long nextLocal = previousTransition(instantAdjusted);\n+                    long nextAdjusted = previousTransition(instantLocal - offsetLocal);\n+                    if (nextLocal >= instantAdjusted && nextAdjusted < instantAdjusted - offsetAdjusted) {\n+                        return offsetAdjusted;\n+                    }\n+                }\n+                return offsetLocal;\n+            }\n+        }\n+        return offsetAdjusted;\n+    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}