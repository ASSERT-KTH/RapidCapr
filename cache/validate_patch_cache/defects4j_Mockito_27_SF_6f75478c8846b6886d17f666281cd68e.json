{
    "patch": "import org.mockito.internal.creation.bytebuddy.MockAccess;\n\nimport java.io.Serializable;\n\npublic class SerializableMockHandler<T> implements MockAccess, Serializable {\n    private final MockHandler<T> mockHandler;\n\n    public SerializableMockHandler(MockHandler<T> mockHandler) {\n        this.mockHandler = mockHandler;\n    }\n\n    public Object handle(MockInvocation mockInvocation) throws Throwable {\n        return mockHandler.handle(mockInvocation);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..c0ffee5af 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,22 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.internal.creation.bytebuddy.MockAccess;\n+\n+import java.io.Serializable;\n+\n+public class SerializableMockHandler<T> implements MockAccess, Serializable {\n+    private final MockHandler<T> mockHandler;\n+\n+    public SerializableMockHandler(MockHandler<T> mockHandler) {\n+        this.mockHandler = mockHandler;\n+    }\n+\n+    public Object handle(MockInvocation mockInvocation) throws Throwable {\n+        return mockHandler.handle(mockInvocation);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}