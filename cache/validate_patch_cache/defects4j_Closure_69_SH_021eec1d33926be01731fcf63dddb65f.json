{
    "patch": "ObjectType thisType = functionType.getTypeOfThis();\nif (thisType != null && !(NodeUtil.isGet(parent) || NodeUtil.isGetElem(parent))) {\n  report(t, n, FUNCTION_WITHOUT_GETTHIS, childType.toString());\n  ensureTyped(t, n);\n  return;\n} \n\nNode arguments = child.getNext();\nNode paramTypeItr = functionType.getParametersNode();\nwhile(paramTypeItr != null && arguments != null) {\n  JSType paramType = getJSType(paramTypeItr);\n  JSType argumentType = getJSType(arguments).restrictByNotNullOrUndefined();\n  if (!argumentType.isSubtype(paramType)) { \n    report(t, arguments, INVALID_ARGUMENT_TYPE,\n        paramType.toString(), argumentType.toString());\n  }\n\n  arguments = arguments.getNext();\n  paramTypeItr = paramTypeItr.getNext();\n}\n\nif (paramTypeItr != null || arguments != null) {\n  report(t, child.getNext(), INVALID_ARGUMENT_COUNT,\n    Integer.toString(functionType.getParameterCount()));\n}\n\nensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..9318a767 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+ObjectType thisType = functionType.getTypeOfThis();\n+if (thisType != null && !(NodeUtil.isGet(parent) || NodeUtil.isGetElem(parent))) {\n+  report(t, n, FUNCTION_WITHOUT_GETTHIS, childType.toString());\n+  ensureTyped(t, n);\n+  return;\n+} \n+\n+Node arguments = child.getNext();\n+Node paramTypeItr = functionType.getParametersNode();\n+while(paramTypeItr != null && arguments != null) {\n+  JSType paramType = getJSType(paramTypeItr);\n+  JSType argumentType = getJSType(arguments).restrictByNotNullOrUndefined();\n+  if (!argumentType.isSubtype(paramType)) { \n+    report(t, arguments, INVALID_ARGUMENT_TYPE,\n+        paramType.toString(), argumentType.toString());\n+  }\n+\n+  arguments = arguments.getNext();\n+  paramTypeItr = paramTypeItr.getNext();\n+}\n+\n+if (paramTypeItr != null || arguments != null) {\n+  report(t, child.getNext(), INVALID_ARGUMENT_COUNT,\n+    Integer.toString(functionType.getParameterCount()));\n+}\n+\n+ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}