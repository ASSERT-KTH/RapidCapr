{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException();\n    }\n\n    if (x == 0) {\n        return 0;\n    }\n\n    final double lgm = LanczosApproximation.logGamma(a);\n    final double tol = NumConstants.REL_TOL;\n    final double big = Double.MAX_VALUE * tol;\n    final double igamma = Math.exp(a * Math.log(x) - x - lgm) / a;\n\n    final ContinuedFraction fraction = new ContinuedFraction() {\n        @Override\n        protected double getA(int n, double x) {\n            double ret;\n            if (n % 2 == 0) {\n                ret = n / 2.0;\n            } else {\n                ret = -((a + n) / 2.0);\n            }\n            return ret;\n        }\n\n        @Override\n        protected double getB(int n, double x) {\n            return x;\n        }\n    };\n\n    fraction.setTolerance(tol);\n    double p = fraction.evaluate(a, x / a, big);\n\n    return igamma * p;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..492996de5 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,43 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException();\n+    }\n+\n+    if (x == 0) {\n+        return 0;\n+    }\n+\n+    final double lgm = LanczosApproximation.logGamma(a);\n+    final double tol = NumConstants.REL_TOL;\n+    final double big = Double.MAX_VALUE * tol;\n+    final double igamma = Math.exp(a * Math.log(x) - x - lgm) / a;\n+\n+    final ContinuedFraction fraction = new ContinuedFraction() {\n+        @Override\n+        protected double getA(int n, double x) {\n+            double ret;\n+            if (n % 2 == 0) {\n+                ret = n / 2.0;\n+            } else {\n+                ret = -((a + n) / 2.0);\n+            }\n+            return ret;\n+        }\n+\n+        @Override\n+        protected double getB(int n, double x) {\n+            return x;\n+        }\n+    };\n+\n+    fraction.setTolerance(tol);\n+    double p = fraction.evaluate(a, x / a, big);\n+\n+    return igamma * p;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}