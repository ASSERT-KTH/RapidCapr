{
    "patch": "public <T> void resetMock(T mock) {\n    if (mock instanceof MockitoSpy) {\n        MockitoSpy<?> spy = (MockitoSpy<?>) mock;\n        MockHandler<MockitoSpy<?>> oldHandler = spy.getMockitoInterceptor().getMockHandler();\n        MockHandler<MockitoSpy<?>> newHandler = new MockHandler<MockitoSpy<?>>(oldHandler);\n        MethodInterceptorFilter filter = new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        Invoker invocationHandler = new MockMethodInterceptor(filter, spy);\n\n        MockitoMockHandler<MockitoSpy<?>> mockitoMockHandler = new MockitoMockHandler<MockitoSpy<?>>(MockitoSession.mockingStarted().getDefaultAnswers().getMockHandler(), spy.getClass(), null);\n        MockHandler<MockitoSpy<?>> spyHandler = mockitoMockHandler.getMockHandler();\n        Field field = null;\n        try {\n            field = spyHandler.getClass().getDeclaredField(\"interceptor\");\n            field.setAccessible(true);\n            field.set(spyHandler, invocationHandler);\n        } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) {\n            e.printStackTrace(); // Handle the exception\n        }\n        spy.setMockitoInterceptor(new MockMethodInterceptor(spyHandler, spy));\n    } else if (mock instanceof Factory) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        ((Factory) mock).setCallback(0, newFilter);\n    } else {\n        throw new IllegalArgumentException(\"Unsupported type of mock object\");\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..b15f76e41 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,35 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (mock instanceof MockitoSpy) {\n+        MockitoSpy<?> spy = (MockitoSpy<?>) mock;\n+        MockHandler<MockitoSpy<?>> oldHandler = spy.getMockitoInterceptor().getMockHandler();\n+        MockHandler<MockitoSpy<?>> newHandler = new MockHandler<MockitoSpy<?>>(oldHandler);\n+        MethodInterceptorFilter filter = new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        Invoker invocationHandler = new MockMethodInterceptor(filter, spy);\n+\n+        MockitoMockHandler<MockitoSpy<?>> mockitoMockHandler = new MockitoMockHandler<MockitoSpy<?>>(MockitoSession.mockingStarted().getDefaultAnswers().getMockHandler(), spy.getClass(), null);\n+        MockHandler<MockitoSpy<?>> spyHandler = mockitoMockHandler.getMockHandler();\n+        Field field = null;\n+        try {\n+            field = spyHandler.getClass().getDeclaredField(\"interceptor\");\n+            field.setAccessible(true);\n+            field.set(spyHandler, invocationHandler);\n+        } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) {\n+            e.printStackTrace(); // Handle the exception\n+        }\n+        spy.setMockitoInterceptor(new MockMethodInterceptor(spyHandler, spy));\n+    } else if (mock instanceof Factory) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        ((Factory) mock).setCallback(0, newFilter);\n+    } else {\n+        throw new IllegalArgumentException(\"Unsupported type of mock object\");\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}