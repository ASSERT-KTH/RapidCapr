{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix realEigenvalues = dec.getRealEigenvalues();\n    final RealMatrix imagEigenvalues = dec.getImagEigenvalues();\n    final RealMatrix v = dec.getV();\n    final RealMatrix sqrtRealEigenvalues = MatrixUtils.createRealMatrix(n, n);\n    final RealMatrix sqrtImagEigenvalues = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        final double real = realEigenvalues.getEntry(i, 0);\n        final double imag = imagEigenvalues.getEntry(i, 0);\n        final double magnitude = FastMath.sqrt(real * real + imag * imag);\n        if (imag < 0) {\n            sqrtRealEigenvalues.setEntry(i, i, 0);\n            sqrtImagEigenvalues.setEntry(i, i, -FastMath.sqrt((magnitude - real) / 2));\n        } else {\n            sqrtRealEigenvalues.setEntry(i, i, FastMath.sqrt((magnitude + real) / 2));\n            sqrtImagEigenvalues.setEntry(i, i, FastMath.sqrt((magnitude - real) / 2));\n        }\n    }\n    final RealMatrix sqrtEigenvalues = v.multiply(sqrtRealEigenvalues).multiply(v.transpose()).add(v.multiply(sqrtImagEigenvalues).multiply(v.transpose()).scalarMultiply(1.0 / 2));\n    return sqrtEigenvalues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c2dd6911a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix realEigenvalues = dec.getRealEigenvalues();\n+    final RealMatrix imagEigenvalues = dec.getImagEigenvalues();\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix sqrtRealEigenvalues = MatrixUtils.createRealMatrix(n, n);\n+    final RealMatrix sqrtImagEigenvalues = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        final double real = realEigenvalues.getEntry(i, 0);\n+        final double imag = imagEigenvalues.getEntry(i, 0);\n+        final double magnitude = FastMath.sqrt(real * real + imag * imag);\n+        if (imag < 0) {\n+            sqrtRealEigenvalues.setEntry(i, i, 0);\n+            sqrtImagEigenvalues.setEntry(i, i, -FastMath.sqrt((magnitude - real) / 2));\n+        } else {\n+            sqrtRealEigenvalues.setEntry(i, i, FastMath.sqrt((magnitude + real) / 2));\n+            sqrtImagEigenvalues.setEntry(i, i, FastMath.sqrt((magnitude - real) / 2));\n+        }\n     }\n+    final RealMatrix sqrtEigenvalues = v.multiply(sqrtRealEigenvalues).multiply(v.transpose()).add(v.multiply(sqrtImagEigenvalues).multiply(v.transpose()).scalarMultiply(1.0 / 2));\n+    return sqrtEigenvalues;\n+}\n }",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}