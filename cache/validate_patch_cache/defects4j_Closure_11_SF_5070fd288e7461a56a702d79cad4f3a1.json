{
    "patch": "public static String[] getprop(String prop) {\n   try {\n       Process process = Runtime.getRuntime().exec(\"getprop \" + prop);\n       process.waitFor();\n       InputStream inputStream = process.getInputStream();\n       InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n       BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n       StringBuilder stringBuilder = new StringBuilder();\n       String line;\n       while ((line = bufferedReader.readLine()) != null) {\n           stringBuilder.append(line);\n       }\n       String[] lines = stringBuilder.toString().split(\"\\\\n\");\n       bufferedReader.close();\n       inputStreamReader.close();\n       inputStream.close();\n       return lines;\n   } catch (IOException e) {\n       String[] errorMsg = {\"IO Exception occurred\"};\n       return errorMsg;\n   } catch (InterruptedException e) {\n       String[] errorMsg = {\"Interrupted exception occurred\"};\n       return errorMsg;\n   }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..ac84ebbb 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,31 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String[] getprop(String prop) {\n+   try {\n+       Process process = Runtime.getRuntime().exec(\"getprop \" + prop);\n+       process.waitFor();\n+       InputStream inputStream = process.getInputStream();\n+       InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n+       BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n+       StringBuilder stringBuilder = new StringBuilder();\n+       String line;\n+       while ((line = bufferedReader.readLine()) != null) {\n+           stringBuilder.append(line);\n+       }\n+       String[] lines = stringBuilder.toString().split(\"\\\\n\");\n+       bufferedReader.close();\n+       inputStreamReader.close();\n+       inputStream.close();\n+       return lines;\n+   } catch (IOException e) {\n+       String[] errorMsg = {\"IO Exception occurred\"};\n+       return errorMsg;\n+   } catch (InterruptedException e) {\n+       String[] errorMsg = {\"Interrupted exception occurred\"};\n+       return errorMsg;\n+   }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}