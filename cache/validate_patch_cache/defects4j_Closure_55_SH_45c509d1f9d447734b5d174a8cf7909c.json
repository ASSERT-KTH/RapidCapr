{
    "patch": "if (!NodeUtil.isFunctionExpression(n)) {\n  return false;\n}\nNode parent = n.getParent();\nif (parent == null) {\n  return false;\n}\nint parentType = parent.getType();\n\nwhile ((parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN ||\n        parentType == Token.VAR || parentType == Token.RETURN) && parent.getParent() != null) {\n  parent = parent.getParent();\n  parentType = parent.getType();\n}\n\nif (parentType == Token.CALL || parentType == Token.NEW ||\n    parentType == Token.OBJECTLIT || parentType == Token.FUNCTION) {\n  return false;\n}\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..eaaa99c7 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,26 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+if (!NodeUtil.isFunctionExpression(n)) {\n+  return false;\n+}\n+Node parent = n.getParent();\n+if (parent == null) {\n+  return false;\n+}\n+int parentType = parent.getType();\n+\n+while ((parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN ||\n+        parentType == Token.VAR || parentType == Token.RETURN) && parent.getParent() != null) {\n+  parent = parent.getParent();\n+  parentType = parent.getType();\n+}\n+\n+if (parentType == Token.CALL || parentType == Token.NEW ||\n+    parentType == Token.OBJECTLIT || parentType == Token.FUNCTION) {\n+  return false;\n+}\n+return true;\n   }\n \n   /**",
    "result_reason": "java.lang.IllegalStateException: Expected function but was call Reference node CALL 4 [free_call: 1] [source_file: testcode]",
    "test_result": "FAIL"
}