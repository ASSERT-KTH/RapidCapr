{
    "patch": "public void testRevert() {\n    Line line = new Line(new Point3D(0.5, 1, -5), new Point3D(-3, -4.5, 2));\n    Line reverse = line.revert();\n    assertTrue(\"ERROR: reverse direction is not reversed\", reverse.getDirection().equals(line.getDirection().scale(-1)));\n    assertEquals(\"ERROR: reverse base point is not as expected\", line.pointAt(0), reverse.pointAt(1), 0.00001);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..88996c26b 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,12 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public void testRevert() {\n+    Line line = new Line(new Point3D(0.5, 1, -5), new Point3D(-3, -4.5, 2));\n+    Line reverse = line.revert();\n+    assertTrue(\"ERROR: reverse direction is not reversed\", reverse.getDirection().equals(line.getDirection().scale(-1)));\n+    assertEquals(\"ERROR: reverse base point is not as expected\", line.pointAt(0), reverse.pointAt(1), 0.00001);\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}