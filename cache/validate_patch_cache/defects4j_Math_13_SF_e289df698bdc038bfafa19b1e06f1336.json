{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    RealMatrix sqrt = null;\n    try {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        sqrt = dec.getSquareRoot();\n    } catch (Exception e) {\n        // Handle exception and return input matrix\n        System.err.println(\"Error computing square root: \" + e.getMessage());\n        return m;\n    }\n    \n    if (sqrt == null || sqrt.getColumnDimension() == 0 || sqrt.getRowDimension() == 0) {\n        // If sqrt is null or empty, return a matrix of zeros with the same dimensions as m\n        return MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n    } else {\n        // Round small values to zero to reduce memory usage\n        for (int i = 0; i < sqrt.getRowDimension(); i++) {\n            for (int j = 0; j < sqrt.getColumnDimension(); j++) {\n                if (FastMath.abs(sqrt.getEntry(i, j)) < 1e-16) {\n                    sqrt.setEntry(i, j, 0.0);\n                }\n            }\n        }\n        return sqrt;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..260b332f9 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,30 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    RealMatrix sqrt = null;\n+    try {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        sqrt = dec.getSquareRoot();\n+    } catch (Exception e) {\n+        // Handle exception and return input matrix\n+        System.err.println(\"Error computing square root: \" + e.getMessage());\n+        return m;\n     }\n+    \n+    if (sqrt == null || sqrt.getColumnDimension() == 0 || sqrt.getRowDimension() == 0) {\n+        // If sqrt is null or empty, return a matrix of zeros with the same dimensions as m\n+        return MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+    } else {\n+        // Round small values to zero to reduce memory usage\n+        for (int i = 0; i < sqrt.getRowDimension(); i++) {\n+            for (int j = 0; j < sqrt.getColumnDimension(); j++) {\n+                if (FastMath.abs(sqrt.getEntry(i, j)) < 1e-16) {\n+                    sqrt.setEntry(i, j, 0.0);\n+                }\n+            }\n+        }\n+        return sqrt;\n+    }\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}