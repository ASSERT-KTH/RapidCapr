{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        int[] newValues = Arrays.copyOf(values, values.length);\n        newValues[fieldIndex] += valueToAdd;\n\n        try {\n            long instant = iChronology.set(partial, newValues);\n            return iChronology.get(partial, instant);\n        } catch (IllegalFieldValueException e) {\n            if (e.getDateTimeFieldType() == DateTimeFieldType.dayOfMonth() && e.getIllegalNumberValue() == 29) {\n                // handle 29 Feb on leap year\n                int[] modifiedValues = Arrays.copyOf(newValues, newValues.length);\n                modifiedValues[1] = 3;\n                modifiedValues[2] = 1;\n                int[] resultValues = null;\n\n                try {\n                    long instant = iChronology.set(partial, modifiedValues);\n                    resultValues = iChronology.get(partial, instant);\n                } catch (IllegalFieldValueException i) {\n                    // handle year overflow\n                    if (i.getDateTimeFieldType() == DateTimeFieldType.year()) {\n                        int[] overflowValues = Arrays.copyOf(modifiedValues, modifiedValues.length);\n                        overflowValues[0] = iChronology.dayOfMonth().getMaximumValue(modifiedValues[0], modifiedValues[1]);\n                        instant = iChronology.set(partial, overflowValues);\n                        resultValues = iChronology.get(partial, instant);\n                    } else {\n                        throw i;\n                    }\n                }\n\n                return resultValues;\n            } else if (e.getDateTimeFieldType() == DateTimeFieldType.monthOfYear() && (e.getIllegalNumberValue() < 1 || e.getIllegalNumberValue() > 12)) {\n                // handle month overflow\n                int[] overflowValues = Arrays.copyOf(newValues, newValues.length);\n                int maxMonth = iChronology.monthOfYear().getMaximumValue(overflowValues[2]);\n                overflowValues[1] = (overflowValues[1] < 1) ? 12 : overflowValues[1] % maxMonth;\n                if (overflowValues[1] == 0) {\n                    overflowValues[0] += (overflowValues[1] / maxMonth);\n                    overflowValues[1] = maxMonth;\n                }\n                long instant = iChronology.set(partial, overflowValues);\n                return iChronology.get(partial, instant);\n            } else {\n                throw e;\n            }\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..3f49f6a2 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,63 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int[] newValues = Arrays.copyOf(values, values.length);\n+        newValues[fieldIndex] += valueToAdd;\n+\n+        try {\n+            long instant = iChronology.set(partial, newValues);\n             return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        } catch (IllegalFieldValueException e) {\n+            if (e.getDateTimeFieldType() == DateTimeFieldType.dayOfMonth() && e.getIllegalNumberValue() == 29) {\n+                // handle 29 Feb on leap year\n+                int[] modifiedValues = Arrays.copyOf(newValues, newValues.length);\n+                modifiedValues[1] = 3;\n+                modifiedValues[2] = 1;\n+                int[] resultValues = null;\n+\n+                try {\n+                    long instant = iChronology.set(partial, modifiedValues);\n+                    resultValues = iChronology.get(partial, instant);\n+                } catch (IllegalFieldValueException i) {\n+                    // handle year overflow\n+                    if (i.getDateTimeFieldType() == DateTimeFieldType.year()) {\n+                        int[] overflowValues = Arrays.copyOf(modifiedValues, modifiedValues.length);\n+                        overflowValues[0] = iChronology.dayOfMonth().getMaximumValue(modifiedValues[0], modifiedValues[1]);\n+                        instant = iChronology.set(partial, overflowValues);\n+                        resultValues = iChronology.get(partial, instant);\n+                    } else {\n+                        throw i;\n+                    }\n+                }\n+\n+                return resultValues;\n+            } else if (e.getDateTimeFieldType() == DateTimeFieldType.monthOfYear() && (e.getIllegalNumberValue() < 1 || e.getIllegalNumberValue() > 12)) {\n+                // handle month overflow\n+                int[] overflowValues = Arrays.copyOf(newValues, newValues.length);\n+                int maxMonth = iChronology.monthOfYear().getMaximumValue(overflowValues[2]);\n+                overflowValues[1] = (overflowValues[1] < 1) ? 12 : overflowValues[1] % maxMonth;\n+                if (overflowValues[1] == 0) {\n+                    overflowValues[0] += (overflowValues[1] / maxMonth);\n+                    overflowValues[1] = maxMonth;\n+                }\n+                long instant = iChronology.set(partial, overflowValues);\n+                return iChronology.get(partial, instant);\n+            } else {\n+                throw e;\n+            }\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}