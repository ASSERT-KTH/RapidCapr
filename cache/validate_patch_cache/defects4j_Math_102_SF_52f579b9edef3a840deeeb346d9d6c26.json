{
    "patch": "import org.apache.commons.math3.distribution.ChiSquaredDistribution;\n\npublic double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n    if (expected == null || observed == null || expected.length != observed.length) {\n        throw new IllegalArgumentException(\"Invalid inputs: expected and observed arrays must have the same length.\");\n    }\n\n    double chiSquareStatistic = 0.0;\n    for (int i = 0; i < observed.length; i++) {\n        if (expected[i] <= 0.0 || observed[i] < 0L) {\n            throw new IllegalArgumentException(\"Invalid inputs: expected counts must be positive and observed counts must be non-negative.\");\n        }\n        chiSquareStatistic += Math.pow(observed[i] - expected[i], 2) / expected[i];\n    }\n\n    ChiSquaredDistribution chiSquaredDistribution = new ChiSquaredDistribution(expected.length - 1);\n    double pValue = 1.0 - chiSquaredDistribution.cumulativeProbability(chiSquareStatistic);\n\n    return Math.round(pValue * 1e10) / 1e10; // round to 10 decimal places\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..3c47b9d15 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,25 +61,27 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n-        }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n-        }\n-        double sumSq = 0.0d;\n-        double dev = 0.0d;\n-        for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n+import org.apache.commons.math3.distribution.ChiSquaredDistribution;\n+\n+public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n+    if (expected == null || observed == null || expected.length != observed.length) {\n+        throw new IllegalArgumentException(\"Invalid inputs: expected and observed arrays must have the same length.\");\n+    }\n+\n+    double chiSquareStatistic = 0.0;\n+    for (int i = 0; i < observed.length; i++) {\n+        if (expected[i] <= 0.0 || observed[i] < 0L) {\n+            throw new IllegalArgumentException(\"Invalid inputs: expected counts must be positive and observed counts must be non-negative.\");\n         }\n-        return sumSq;\n+        chiSquareStatistic += Math.pow(observed[i] - expected[i], 2) / expected[i];\n     }\n \n+    ChiSquaredDistribution chiSquaredDistribution = new ChiSquaredDistribution(expected.length - 1);\n+    double pValue = 1.0 - chiSquaredDistribution.cumulativeProbability(chiSquareStatistic);\n+\n+    return Math.round(pValue * 1e10) / 1e10; // round to 10 decimal places\n+}\n+\n     /**\n      * {@inheritDoc}\n      * <p><strong>Note: </strong>This implementation rescales the ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}