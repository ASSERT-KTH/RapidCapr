{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n\n    if (!right.isNumber()) {\n        return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n\n    if (intIndex < 0 || (left.isArrayLit() && intIndex >= left.getChildCount())) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    // Case: arr[index] = value\n    if (n.isAssign()) {\n        Node parent = n.getParent();\n        if (!parent.isExprResult()) {\n            return n;\n        }\n\n        Node grandparent = parent.getParent();\n        if (!grandparent.isBlock()) {\n            return n;\n        }\n\n        Node value = n.getLastChild();\n        n.removeChild(value);\n        Node replacement = IR.setElem(left, Node.newNumber(intIndex), value);\n        grandparent.replaceChild(parent, replacement);\n        reportCodeChange();\n\n        return value;\n    }\n\n    // Case: arr[index]\n    if (left.isArrayLit()) {\n        Node elem = left.getChildAtIndex(intIndex);\n        if (elem.isEmpty()) {\n            elem = NodeUtil.newUndefinedNode(elem);\n        }\n        n.getParent().replaceChild(n, elem);\n        reportCodeChange();\n        return elem;\n    }\n\n    return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..4c255909 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,61 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     if (isAssignmentTarget(n)) {\n-      return n;\n+        return n;\n     }\n \n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+        return n;\n     }\n \n     double index = right.getDouble();\n     int intIndex = (int) index;\n     if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n     }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    if (intIndex < 0 || (left.isArrayLit() && intIndex >= left.getChildCount())) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n+    // Case: arr[index] = value\n+    if (n.isAssign()) {\n+        Node parent = n.getParent();\n+        if (!parent.isExprResult()) {\n+            return n;\n+        }\n \n-      current = current.getNext();\n-    }\n+        Node grandparent = parent.getParent();\n+        if (!grandparent.isBlock()) {\n+            return n;\n+        }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+        Node value = n.getLastChild();\n+        n.removeChild(value);\n+        Node replacement = IR.setElem(left, Node.newNumber(intIndex), value);\n+        grandparent.replaceChild(parent, replacement);\n+        reportCodeChange();\n+\n+        return value;\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+    // Case: arr[index]\n+    if (left.isArrayLit()) {\n+        Node elem = left.getChildAtIndex(intIndex);\n+        if (elem.isEmpty()) {\n+            elem = NodeUtil.newUndefinedNode(elem);\n+        }\n+        n.getParent().replaceChild(n, elem);\n+        reportCodeChange();\n+        return elem;\n     }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n-  }\n+    return n;\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}