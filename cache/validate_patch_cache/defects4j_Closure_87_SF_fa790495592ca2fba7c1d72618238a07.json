{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n    if (NodeUtil.isExpressionNode(maybeExpr) &&\n        !NodeUtil.isFunctionExpression(maybeExpr) &&\n        maybeExpr.getType() != Token.OBJECTLIT &&\n        maybeExpr.getType() != Token.FUNCTION &&\n        maybeExpr.getType() != Token.REGEXP) {\n      // Check for handler return values in IE.\n      if (NodeUtil.isName(maybeExpr) && maybeExpr.getString().equals(\"undefined\") &&\n          n.getParent() != null && n.getParent().getParent() != null &&\n          n.getParent().getParent().getType() == Token.IF) {\n        return false;\n      }\n      Node parent = n.getParent();\n      if (parent != null &&\n          parent.getType() == Token.EXPR_RESULT &&\n          parent.getFirstChild() == n) {\n        Node grandparent = parent.getParent();\n        if (grandparent != null &&\n            grandparent.getType() == Token.FOR &&\n            grandparent.getFirstChild() == parent) {\n          return false;\n        }\n        return !(grandparent != null &&\n                 grandparent.getType() == Token.LABEL &&\n                 parent.getNext() == null);\n      }\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..53c5b232 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,39 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+    if (NodeUtil.isExpressionNode(maybeExpr) &&\n+        !NodeUtil.isFunctionExpression(maybeExpr) &&\n+        maybeExpr.getType() != Token.OBJECTLIT &&\n+        maybeExpr.getType() != Token.FUNCTION &&\n+        maybeExpr.getType() != Token.REGEXP) {\n+      // Check for handler return values in IE.\n+      if (NodeUtil.isName(maybeExpr) && maybeExpr.getString().equals(\"undefined\") &&\n+          n.getParent() != null && n.getParent().getParent() != null &&\n+          n.getParent().getParent().getType() == Token.IF) {\n+        return false;\n+      }\n+      Node parent = n.getParent();\n+      if (parent != null &&\n+          parent.getType() == Token.EXPR_RESULT &&\n+          parent.getFirstChild() == n) {\n+        Node grandparent = parent.getParent();\n+        if (grandparent != null &&\n+            grandparent.getType() == Token.FOR &&\n+            grandparent.getFirstChild() == parent) {\n+          return false;\n+        }\n+        return !(grandparent != null &&\n+                 grandparent.getType() == Token.LABEL &&\n+                 parent.getNext() == null);\n       }\n+      return true;\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}