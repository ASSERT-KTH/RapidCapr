{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    Type actualTypeArgument = extractActualTypeArgument(typeVariable);\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}\n\nprivate Type extractActualTypeArgument(Type type) {\n    if (type instanceof ParameterizedType) {\n        return ((ParameterizedType) type).getActualTypeArguments()[0];\n    } else if (type instanceof TypeVariable) {\n        Type[] bounds = ((TypeVariable<?>) type).getBounds();\n        if (bounds.length > 0) {\n            return extractActualTypeArgument(bounds[0]);\n        } else {\n            return null;\n        }\n    } else if (type instanceof WildcardType) {\n        Type[] upperBounds = ((WildcardType) type).getUpperBounds();\n        if (upperBounds.length > 0) {\n            return extractActualTypeArgument(upperBounds[0]);\n        } else {\n            return null;\n        }\n    } else {\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..04ddbaec7 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,41 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    Type actualTypeArgument = extractActualTypeArgument(typeVariable);\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n+\n+private Type extractActualTypeArgument(Type type) {\n+    if (type instanceof ParameterizedType) {\n+        return ((ParameterizedType) type).getActualTypeArguments()[0];\n+    } else if (type instanceof TypeVariable) {\n+        Type[] bounds = ((TypeVariable<?>) type).getBounds();\n+        if (bounds.length > 0) {\n+            return extractActualTypeArgument(bounds[0]);\n+        } else {\n+            return null;\n+        }\n+    } else if (type instanceof WildcardType) {\n+        Type[] upperBounds = ((WildcardType) type).getUpperBounds();\n+        if (upperBounds.length > 0) {\n+            return extractActualTypeArgument(upperBounds[0]);\n+        } else {\n+            return null;\n+        }\n+    } else {\n+        return null;\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}