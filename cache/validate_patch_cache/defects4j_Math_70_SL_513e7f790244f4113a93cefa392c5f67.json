{
    "patch": "return (Double.isNaN(f.value(min)) || Double.isNaN(f.value(max))) ? Double.NaN :\n    (f.value(min) * f.value(max) > 0) ? Double.NaN :\n    BrentSolver.DEFAULT.solve(f, min, max);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..0c26bf869 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,9 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+return (Double.isNaN(f.value(min)) || Double.isNaN(f.value(max))) ? Double.NaN :\n+    (f.value(min) * f.value(max) > 0) ? Double.NaN :\n+    BrentSolver.DEFAULT.solve(f, min, max);\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}