{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n    // Don't traverse functions that are constructors or have the @this or @override annotation.\n    if (info.isConstructor() || info.hasThisType() || info.isOverride()) {\n      return false;\n    }\n    // Don't traverse functions unless they would normally be able to have a @this annotation associated with them.\n    switch (parent.getType()) {\n      case Token.BLOCK:\n      case Token.SCRIPT:\n      case Token.NAME:\n        return true;\n      case Token.ASSIGN:\n        Node grandparent = parent.getParent();\n        if (grandparent.getType() == Token.EXPR_RESULT) {\n          grandparent = grandparent.getParent();\n        }\n        // If the assignment is used as a call argument or return value, we can't drop the traversal.\n        return grandparent.getType() != Token.CALL &&\n            (grandparent.getType() != Token.RETURN || grandparent.getChildCount() == 1);\n      default:\n        return false;\n    }\n  }\n  // Don't traverse object properties or function calls outside of the global scope.\n  if (parent == null || parent.isFunction() || !t.getScope().isGlobal()) {\n    return true;\n  }\n  switch (parent.getType()) {\n    case Token.VAR:\n    case Token.LET:\n    case Token.CONST:\n      // Skip bound functions defined within a function.\n      return !NodeUtil.mayBeObjectLitKey(n);\n    case Token.ASSIGN:\n      return mayBePrototypeDeclaration(parent);\n    case Token.CALL:\n      Node callee = n.getFirstChild();\n      // Don't traverse an invocation of a known method on an object because those invocations\n      // should have been delegated to the object instead of called directly.\n      if (n.hasMoreThanOneChild() && callee.getType() == Token.GETPROP) {\n        String name = callee.getLastChild().getString();\n        if (name.equals(\"call\") || name.equals(\"apply\")) {\n          return true;\n        }\n        // Check whether the method being called exists and is not the constructor method.\n        Node receiver = callee.getFirstChild();\n        TypeI objectType = receiver.getTypeI();\n        if (objectType.isObject()) {\n          ObjectTypeI objType = (ObjectTypeI) objectType;\n          if (objType.hasOwnProperty(name) && !objType.isConstructor()) {\n            return false;\n          }\n        }\n      }\n      break;\n    default:\n      break;\n  }\n  return true;\n}\n\nprivate boolean mayBePrototypeDeclaration(Node n) {\n  return NodeUtil.mayBeObjectLitKey(n.getFirstChild()) &&\n      isPrototypeProperty(n.getFirstChild().getLastChild()) &&\n      n.getLastChild() != null &&\n      n.getLastChild().isFunction();\n}\n\nprivate boolean isPrototypeProperty(Node n) {\n  return n.getType() == Token.STRING && n.getString().equals(\"prototype\");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..937da697 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,79 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  if (n.getType() == Token.FUNCTION) {\n+    JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n+    // Don't traverse functions that are constructors or have the @this or @override annotation.\n+    if (info.isConstructor() || info.hasThisType() || info.isOverride()) {\n+      return false;\n+    }\n+    // Don't traverse functions unless they would normally be able to have a @this annotation associated with them.\n+    switch (parent.getType()) {\n+      case Token.BLOCK:\n+      case Token.SCRIPT:\n+      case Token.NAME:\n+        return true;\n+      case Token.ASSIGN:\n+        Node grandparent = parent.getParent();\n+        if (grandparent.getType() == Token.EXPR_RESULT) {\n+          grandparent = grandparent.getParent();\n+        }\n+        // If the assignment is used as a call argument or return value, we can't drop the traversal.\n+        return grandparent.getType() != Token.CALL &&\n+            (grandparent.getType() != Token.RETURN || grandparent.getChildCount() == 1);\n+      default:\n         return false;\n-      }\n     }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+  }\n+  // Don't traverse object properties or function calls outside of the global scope.\n+  if (parent == null || parent.isFunction() || !t.getScope().isGlobal()) {\n+    return true;\n+  }\n+  switch (parent.getType()) {\n+    case Token.VAR:\n+    case Token.LET:\n+    case Token.CONST:\n+      // Skip bound functions defined within a function.\n+      return !NodeUtil.mayBeObjectLitKey(n);\n+    case Token.ASSIGN:\n+      return mayBePrototypeDeclaration(parent);\n+    case Token.CALL:\n+      Node callee = n.getFirstChild();\n+      // Don't traverse an invocation of a known method on an object because those invocations\n+      // should have been delegated to the object instead of called directly.\n+      if (n.hasMoreThanOneChild() && callee.getType() == Token.GETPROP) {\n+        String name = callee.getLastChild().getString();\n+        if (name.equals(\"call\") || name.equals(\"apply\")) {\n+          return true;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+        // Check whether the method being called exists and is not the constructor method.\n+        Node receiver = callee.getFirstChild();\n+        TypeI objectType = receiver.getTypeI();\n+        if (objectType.isObject()) {\n+          ObjectTypeI objType = (ObjectTypeI) objectType;\n+          if (objType.hasOwnProperty(name) && !objType.isConstructor()) {\n             return false;\n           }\n+        }\n       }\n-    }\n-\n-    return true;\n+      break;\n+    default:\n+      break;\n   }\n+  return true;\n+}\n+\n+private boolean mayBePrototypeDeclaration(Node n) {\n+  return NodeUtil.mayBeObjectLitKey(n.getFirstChild()) &&\n+      isPrototypeProperty(n.getFirstChild().getLastChild()) &&\n+      n.getLastChild() != null &&\n+      n.getLastChild().isFunction();\n+}\n+\n+private boolean isPrototypeProperty(Node n) {\n+  return n.getType() == Token.STRING && n.getString().equals(\"prototype\");\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}