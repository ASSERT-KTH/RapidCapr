{
    "patch": "public static boolean containsAny(char[] str, char[] searchChars) {\n    if (str == null || searchChars == null) {\n        return false;\n    }\n    int strLength = str.length;\n    int searchLength = searchChars.length;\n    if (strLength == 0 || searchLength == 0) {\n        return false;\n    }\n    int[] searchCodePoints = toCodePoints(searchChars);\n    for (int i = 0; i < strLength; i++) {\n        int codePoint = Character.codePointAt(str, i);\n        if (Character.charCount(codePoint) == 2) {\n            i++;\n        }\n        if (contains(searchCodePoints, codePoint)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate static int[] toCodePoints(char[] chars) {\n    List<Integer> codePoints = new ArrayList<>();\n    int i = 0;\n    while (i < chars.length) {\n        int codePoint = Character.codePointAt(chars, i);\n        codePoints.add(codePoint);\n        i += Character.charCount(codePoint);\n    }\n    return codePoints.stream().mapToInt(Integer::intValue).toArray();\n}\n\nprivate static boolean contains(int[] arr, int key) {\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] == key) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..ddfea729 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,47 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(char[] str, char[] searchChars) {\n+    if (str == null || searchChars == null) {\n+        return false;\n+    }\n+    int strLength = str.length;\n+    int searchLength = searchChars.length;\n+    if (strLength == 0 || searchLength == 0) {\n+        return false;\n+    }\n+    int[] searchCodePoints = toCodePoints(searchChars);\n+    for (int i = 0; i < strLength; i++) {\n+        int codePoint = Character.codePointAt(str, i);\n+        if (Character.charCount(codePoint) == 2) {\n+            i++;\n+        }\n+        if (contains(searchCodePoints, codePoint)) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+private static int[] toCodePoints(char[] chars) {\n+    List<Integer> codePoints = new ArrayList<>();\n+    int i = 0;\n+    while (i < chars.length) {\n+        int codePoint = Character.codePointAt(chars, i);\n+        codePoints.add(codePoint);\n+        i += Character.charCount(codePoint);\n+    }\n+    return codePoints.stream().mapToInt(Integer::intValue).toArray();\n+}\n+\n+private static boolean contains(int[] arr, int key) {\n+    for (int i = 0; i < arr.length; i++) {\n+        if (arr[i] == key) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}