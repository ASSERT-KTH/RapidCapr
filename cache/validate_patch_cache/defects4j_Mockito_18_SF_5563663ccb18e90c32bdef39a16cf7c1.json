{
    "patch": "public <T> ReturnValueCallback<T> returnValueFor(Class<T> returnType) {\n    return () -> {\n        if (returnType.equals(Iterable.class)) {\n            return (T) Collections.emptyList();\n        } else if (returnType.isAssignableFrom(List.class)) {\n            return (T) Collections.emptyList();\n        } else if (returnType.isAssignableFrom(Set.class)) {\n            return (T) Collections.emptySet();\n        } else if (returnType.isAssignableFrom(Map.class)) {\n            return (T) Collections.emptyMap();\n        } else if (returnType.isAssignableFrom(String.class)) {\n            return (T) \"\";\n        } else if (returnType.isAssignableFrom(Integer.class) || returnType.equals(int.class)) {\n            return (T) new Integer(0);\n        } else if (returnType.isAssignableFrom(Double.class) || returnType.equals(double.class)) {\n            return (T) new Double(0.0d);\n        } else if (returnType.isAssignableFrom(Float.class) || returnType.equals(float.class)) {\n            return (T) new Float(0.0f);\n        } else if (returnType.isAssignableFrom(Boolean.class) || returnType.equals(boolean.class)) {\n            return (T) Boolean.FALSE;\n        } else if (returnType.isAssignableFrom(Long.class) || returnType.equals(long.class)) {\n            return (T) new Long(0L);\n        } else if (returnType.isAssignableFrom(Short.class) || returnType.equals(short.class)) {\n            return (T) Short.valueOf((short) 0);\n        } else if (returnType.isAssignableFrom(Byte.class) || returnType.equals(byte.class)) {\n            return (T) Byte.valueOf((byte) 0);\n        } else {\n            return null;\n        }\n    };\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..aa603feb1 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,37 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public <T> ReturnValueCallback<T> returnValueFor(Class<T> returnType) {\n+    return () -> {\n+        if (returnType.equals(Iterable.class)) {\n+            return (T) Collections.emptyList();\n+        } else if (returnType.isAssignableFrom(List.class)) {\n+            return (T) Collections.emptyList();\n+        } else if (returnType.isAssignableFrom(Set.class)) {\n+            return (T) Collections.emptySet();\n+        } else if (returnType.isAssignableFrom(Map.class)) {\n+            return (T) Collections.emptyMap();\n+        } else if (returnType.isAssignableFrom(String.class)) {\n+            return (T) \"\";\n+        } else if (returnType.isAssignableFrom(Integer.class) || returnType.equals(int.class)) {\n+            return (T) new Integer(0);\n+        } else if (returnType.isAssignableFrom(Double.class) || returnType.equals(double.class)) {\n+            return (T) new Double(0.0d);\n+        } else if (returnType.isAssignableFrom(Float.class) || returnType.equals(float.class)) {\n+            return (T) new Float(0.0f);\n+        } else if (returnType.isAssignableFrom(Boolean.class) || returnType.equals(boolean.class)) {\n+            return (T) Boolean.FALSE;\n+        } else if (returnType.isAssignableFrom(Long.class) || returnType.equals(long.class)) {\n+            return (T) new Long(0L);\n+        } else if (returnType.isAssignableFrom(Short.class) || returnType.equals(short.class)) {\n+            return (T) Short.valueOf((short) 0);\n+        } else if (returnType.isAssignableFrom(Byte.class) || returnType.equals(byte.class)) {\n+            return (T) Byte.valueOf((byte) 0);\n+        } else {\n+            return null;\n+        }\n+    };\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}