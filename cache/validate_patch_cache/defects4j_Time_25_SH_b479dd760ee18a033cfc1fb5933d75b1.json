{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    long targetTransition;\n    boolean isBackwards = offsetLocal < offsetAdjusted;\n    if (isBackwards) {\n        targetTransition = previousTransition(instantAdjusted);\n    } else {\n        targetTransition = nextTransition(instantAdjusted);\n    }\n    long instantTarget;\n    if (isBackwards) {\n        instantTarget = targetTransition + offsetLocal;\n    } else {\n        instantTarget = targetTransition + offsetAdjusted;\n    }\n    if ((isBackwards && instantLocal <= instantTarget) ||\n            (!isBackwards && instantLocal < instantTarget)) {\n        return offsetLocal;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4ca68eb9 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,26 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    long targetTransition;\n+    boolean isBackwards = offsetLocal < offsetAdjusted;\n+    if (isBackwards) {\n+        targetTransition = previousTransition(instantAdjusted);\n+    } else {\n+        targetTransition = nextTransition(instantAdjusted);\n+    }\n+    long instantTarget;\n+    if (isBackwards) {\n+        instantTarget = targetTransition + offsetLocal;\n+    } else {\n+        instantTarget = targetTransition + offsetAdjusted;\n+    }\n+    if ((isBackwards && instantLocal <= instantTarget) ||\n+            (!isBackwards && instantLocal < instantTarget)) {\n+        return offsetLocal;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}