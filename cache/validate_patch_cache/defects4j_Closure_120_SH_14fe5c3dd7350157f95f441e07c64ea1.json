{
    "patch": "        } else if (block.isLoop) {\n          return false;\n        }\n        boolean seenRef = false;\n        for (Ref ref : block.getOutgoingReferences()) {\n          if (!ref.isLoopHeaderPhi()) {\n            if (seenRef) {\n              return false;\n            }\n            seenRef = true;\n            Reference maybeAssignmentReference = (Reference) ref;\n            if (maybeAssignmentReference.isDeclaration() &&\n                maybeAssignmentReference.getNameNode().getType().isObject()) {\n              // Ignore declarations of object type, like function declarations.\n              maybeAssignmentReference = null;\n            }\n            if (maybeAssignmentReference != null &&\n                maybeAssignmentReference.getReferencedName().equals(getReferencedName())) {\n              return false;\n            }\n          }\n        }\n      }\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..f352c0c2 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,30 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n+        boolean seenRef = false;\n+        for (Ref ref : block.getOutgoingReferences()) {\n+          if (!ref.isLoopHeaderPhi()) {\n+            if (seenRef) {\n+              return false;\n+            }\n+            seenRef = true;\n+            Reference maybeAssignmentReference = (Reference) ref;\n+            if (maybeAssignmentReference.isDeclaration() &&\n+                maybeAssignmentReference.getNameNode().getType().isObject()) {\n+              // Ignore declarations of object type, like function declarations.\n+              maybeAssignmentReference = null;\n+            }\n+            if (maybeAssignmentReference != null &&\n+                maybeAssignmentReference.getReferencedName().equals(getReferencedName())) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n+      return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}