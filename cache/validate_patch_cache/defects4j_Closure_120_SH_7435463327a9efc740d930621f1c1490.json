{
    "patch": "      if (block.isFunction) {\n        // We assume that a function may assign to the variable for which this analysis is being done.\n        // TODO: If we maintain information about which variables are assigned in which functions,\n        // we could be more precise here.\n        if (ref != null && ref.getIndex() > 0) {\n          Reference decl = references.get(ref.getIndex() - 1);\n          if (decl.isVarDeclaration() && decl.getName().equals(ref.getName())) {\n            return true;\n          }\n        }\n      } else if (block.isLoop) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..d2e64766 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        // We assume that a function may assign to the variable for which this analysis is being done.\n+        // TODO: If we maintain information about which variables are assigned in which functions,\n+        // we could be more precise here.\n+        if (ref != null && ref.getIndex() > 0) {\n+          Reference decl = references.get(ref.getIndex() - 1);\n+          if (decl.isVarDeclaration() && decl.getName().equals(ref.getName())) {\n+            return true;\n+          }\n+        }\n+      } else if (block.isLoop) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}