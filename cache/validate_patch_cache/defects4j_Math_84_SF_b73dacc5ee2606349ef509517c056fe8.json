{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    while (true) {\n        incrementIterationsCounter();\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex = reflectedSimplex;\n            } else {\n                final RealPointValuePair[] expandedSimplex = simplex;\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    simplex = contracted;\n                } else {\n                    contractShrink(comparator, best);\n                }\n            }\n            return;\n        } else {\n            final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n            contractedSimplex[0] = best;\n            final double[] xSmallest = original[0].getPoint();\n            for (int i = 1; i < original.length; i++) {\n                final double[] x = original[i].getPoint();\n                final double[] contractedPoint = new double[x.length];\n                for (int j = 0; j < x.length; j++) {\n                    contractedPoint[j] = xSmallest[j] + sigma * (x[j] - xSmallest[j]);\n                }\n                contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n            }\n            final RealPointValuePair contracted = evaluateNewSimplex(contractedSimplex, 1.0, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                simplex = contractedSimplex;\n            } else {\n                contractShrink(comparator, best);\n            }\n        }\n    }\n}\n\nprivate void contractShrink(Comparator<RealPointValuePair> comparator,\n        RealPointValuePair best) throws FunctionEvaluationException {\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[simplex.length];\n    contractedSimplex[0] = best;\n    final double[] xSmallest = simplex[0].getPoint();\n    for (int i = 1; i < simplex.length; i++) {\n        final double[] x = simplex[i].getPoint();\n        final double[] contractedPoint = new double[x.length];\n        for (int j = 0; j < x.length; j++) {\n            contractedPoint[j] = xSmallest[j] + sigma * (x[j] - xSmallest[j]);\n        }\n        contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n    }\n    simplex = evaluateNewSimplex(contractedSimplex, 1.0, comparator).compareTo(best) < 0 ?\n            contractedSimplex :\n            shrink(simplex, xSmallest);\n}\n\nprivate RealPointValuePair[] shrink(RealPointValuePair[] points,\n        final double[] xSmallest) throws FunctionEvaluationException {\n    final RealPointValuePair[] out = new RealPointValuePair[points.length];\n    out[0] = points[0];\n    for (int i = 1; i < points.length; i++) {\n        final double[] x = points[i].getPoint();\n        final double[] contractedPoint = new double[x.length];\n        for (int j = 0; j < x.length; j++) {\n            contractedPoint[j] = xSmallest[j] + sigmaShrink * (x[j] - xSmallest[j]);\n        }\n        out[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n    }\n    return out;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..92e007796 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,82 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+    while (true) {\n+        incrementIterationsCounter();\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex = reflectedSimplex;\n+            } else {\n+                final RealPointValuePair[] expandedSimplex = simplex;\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    simplex = contracted;\n+                } else {\n+                    contractShrink(comparator, best);\n                 }\n-\n-                return;\n-\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            return;\n+        } else {\n+            final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+            contractedSimplex[0] = best;\n+            final double[] xSmallest = original[0].getPoint();\n+            for (int i = 1; i < original.length; i++) {\n+                final double[] x = original[i].getPoint();\n+                final double[] contractedPoint = new double[x.length];\n+                for (int j = 0; j < x.length; j++) {\n+                    contractedPoint[j] = xSmallest[j] + sigma * (x[j] - xSmallest[j]);\n+                }\n+                contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n+            }\n+            final RealPointValuePair contracted = evaluateNewSimplex(contractedSimplex, 1.0, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex = contractedSimplex;\n+            } else {\n+                contractShrink(comparator, best);\n             }\n+        }\n+    }\n+}\n \n+private void contractShrink(Comparator<RealPointValuePair> comparator,\n+        RealPointValuePair best) throws FunctionEvaluationException {\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[simplex.length];\n+    contractedSimplex[0] = best;\n+    final double[] xSmallest = simplex[0].getPoint();\n+    for (int i = 1; i < simplex.length; i++) {\n+        final double[] x = simplex[i].getPoint();\n+        final double[] contractedPoint = new double[x.length];\n+        for (int j = 0; j < x.length; j++) {\n+            contractedPoint[j] = xSmallest[j] + sigma * (x[j] - xSmallest[j]);\n         }\n+        contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n+    }\n+    simplex = evaluateNewSimplex(contractedSimplex, 1.0, comparator).compareTo(best) < 0 ?\n+            contractedSimplex :\n+            shrink(simplex, xSmallest);\n+}\n \n+private RealPointValuePair[] shrink(RealPointValuePair[] points,\n+        final double[] xSmallest) throws FunctionEvaluationException {\n+    final RealPointValuePair[] out = new RealPointValuePair[points.length];\n+    out[0] = points[0];\n+    for (int i = 1; i < points.length; i++) {\n+        final double[] x = points[i].getPoint();\n+        final double[] contractedPoint = new double[x.length];\n+        for (int j = 0; j < x.length; j++) {\n+            contractedPoint[j] = xSmallest[j] + sigmaShrink * (x[j] - xSmallest[j]);\n+        }\n+        out[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n     }\n+    return out;\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}