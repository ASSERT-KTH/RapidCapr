{
    "patch": "    // Check if node is a function expression with a single return statement\n    if (n.getToken() == Token.FUNCTION) {\n      List<Node> children = n.children();\n      if (children.size() > 1 && children.get(children.size() - 2).getToken() == Token.RETURN) {\n        return true;\n      }\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..7b16ef08 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,14 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    // Check if node is a function expression with a single return statement\n+    if (n.getToken() == Token.FUNCTION) {\n+      List<Node> children = n.children();\n+      if (children.size() > 1 && children.get(children.size() - 2).getToken() == Token.RETURN) {\n+        return true;\n+      }\n+    }\n+    return false;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}