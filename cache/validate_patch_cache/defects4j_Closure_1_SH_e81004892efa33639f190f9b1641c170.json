{
    "patch": "    // Collect referenced variable names in the arg list and the function body\n    Set<String> referencedInArgList = new HashSet<>();\n    Set<String> referencedInBody = new HashSet<>();\n    collectVarsInArgListAndBody(function, referencedInArgList, referencedInBody);\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referencedInArgList.contains(lastArg.getString()) &&\n            !referencedInBody.contains(lastArg.getString())) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }\n\n  private void collectVarsInArgListAndBody(\n      Node fnNode, Set<String> referencedInArgList, Set<String> referencedInBody) {\n    Node argList = getFunctionParameters(fnNode);\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      if (arg.isName()) {\n        referencedInArgList.add(arg.getString());\n      }\n    }\n\n    Node body = fnNode.getLastChild();\n    for (Node stmt = body.getFirstChild(); stmt != null; stmt = stmt.getNext()) {\n      collectVarsInNode(stmt, referencedInBody);\n    }\n  }\n\n  private void collectVarsInNode(Node node, Set<String> referencedVars) {\n    if (NodeUtil.isNameReference(node)) {\n      referencedVars.add(node.getString());\n    }\n\n    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n      collectVarsInNode(child, referencedVars);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ec3a2683 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,51 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Collect referenced variable names in the arg list and the function body\n+    Set<String> referencedInArgList = new HashSet<>();\n+    Set<String> referencedInBody = new HashSet<>();\n+    collectVarsInArgListAndBody(function, referencedInArgList, referencedInBody);\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referencedInArgList.contains(lastArg.getString()) &&\n+            !referencedInBody.contains(lastArg.getString())) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n+\n+  private void collectVarsInArgListAndBody(\n+      Node fnNode, Set<String> referencedInArgList, Set<String> referencedInBody) {\n+    Node argList = getFunctionParameters(fnNode);\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      if (arg.isName()) {\n+        referencedInArgList.add(arg.getString());\n+      }\n+    }\n+\n+    Node body = fnNode.getLastChild();\n+    for (Node stmt = body.getFirstChild(); stmt != null; stmt = stmt.getNext()) {\n+      collectVarsInNode(stmt, referencedInBody);\n+    }\n+  }\n+\n+  private void collectVarsInNode(Node node, Set<String> referencedVars) {\n+    if (NodeUtil.isNameReference(node)) {\n+      referencedVars.add(node.getString());\n+    }\n+\n+    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n+      collectVarsInNode(child, referencedVars);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}