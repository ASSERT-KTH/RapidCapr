{
    "patch": "    Set<String> referencedParams = new HashSet<>();\n    for (Var paramVar : referenced) {\n      referencedParams.add(paramVar.getName());\n    }\n    // Remove unreferenced params from the function declaration.\n    // Traverse args backwards so we can easily remove args from the arg list\n    // without affecting iteration.\n    Node argList = getFunctionParameters(fnScope);\n    Preconditions.checkState(argList.isParamList());\n    List<Node> argsToRemove = new ArrayList<>();\n    for (Node argNode = argList.getLastChild(); argNode != null;\n         argNode = argNode.getPrevious()) {\n      String argName = argNode.getString();\n      if (!referencedParams.contains(argName)) {\n        argsToRemove.add(argNode);\n      } else {\n        // Params are in reverse order; we've reached the final referenced parameter.\n        break;\n      }\n    }\n    for (Node argNode : argsToRemove) {\n      argList.removeChild(argNode);\n      compiler.reportCodeChange();\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1c20f6db 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,30 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Set<String> referencedParams = new HashSet<>();\n+    for (Var paramVar : referenced) {\n+      referencedParams.add(paramVar.getName());\n+    }\n+    // Remove unreferenced params from the function declaration.\n+    // Traverse args backwards so we can easily remove args from the arg list\n+    // without affecting iteration.\n+    Node argList = getFunctionParameters(fnScope);\n+    Preconditions.checkState(argList.isParamList());\n+    List<Node> argsToRemove = new ArrayList<>();\n+    for (Node argNode = argList.getLastChild(); argNode != null;\n+         argNode = argNode.getPrevious()) {\n+      String argName = argNode.getString();\n+      if (!referencedParams.contains(argName)) {\n+        argsToRemove.add(argNode);\n+      } else {\n+        // Params are in reverse order; we've reached the final referenced parameter.\n+        break;\n+      }\n+    }\n+    for (Node argNode : argsToRemove) {\n+      argList.removeChild(argNode);\n+      compiler.reportCodeChange();\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}