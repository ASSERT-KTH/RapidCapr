{
    "patch": "} else if (isInitializingAssignmentAt(i)) {\n    if (references.get(i).getBasicBlock() != references.get(i - 1).getBasicBlock()) {\n        return null;\n    }\n    return references.get(i);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..1cf6baf0 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,12 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+} else if (isInitializingAssignmentAt(i)) {\n+    if (references.get(i).getBasicBlock() != references.get(i - 1).getBasicBlock()) {\n+        return null;\n+    }\n+    return references.get(i);\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}