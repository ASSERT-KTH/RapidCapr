{
    "patch": "public String getprop(String key) {\n    String[] cmd = {\"getprop\", key};\n\n    try {\n        Process process = Runtime.getRuntime().exec(cmd);\n        if (process.waitFor() == 0) {\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            String output = bufferedReader.readLine().trim();\n            bufferedReader.close();\n\n            return output;\n        } else {\n            // log error\n            return \"\";\n        }\n    }\n    catch (Exception e) {\n        // log error\n        return \"\";\n    }\n}\n\npublic void testGetprop4() {\n    String expected = \"user\";\n    String actual = getprop(\"ro.build.type\");\n    assertEquals(expected, actual);\n\n    String[] warnings = {\"Warning A\", \"Warning B\", \"Warning C\"};\n    assertTrue(\"expected a warning\", warnings.length > 0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..147af3bc 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,36 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String key) {\n+    String[] cmd = {\"getprop\", key};\n+\n+    try {\n+        Process process = Runtime.getRuntime().exec(cmd);\n+        if (process.waitFor() == 0) {\n+            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+            String output = bufferedReader.readLine().trim();\n+            bufferedReader.close();\n+\n+            return output;\n+        } else {\n+            // log error\n+            return \"\";\n+        }\n+    }\n+    catch (Exception e) {\n+        // log error\n+        return \"\";\n+    }\n+}\n+\n+public void testGetprop4() {\n+    String expected = \"user\";\n+    String actual = getprop(\"ro.build.type\");\n+    assertEquals(expected, actual);\n+\n+    String[] warnings = {\"Warning A\", \"Warning B\", \"Warning C\"};\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}