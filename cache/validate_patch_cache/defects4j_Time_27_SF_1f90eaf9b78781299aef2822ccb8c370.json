{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n    if (size == 1) {\n        Object[] comp = createComposite(elementPairs);\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n    Separator sep = null;\n    int index = -1;\n    for (int i = 0; i < size; i++) {\n        if (elementPairs.get(i) instanceof Separator) {\n            index = i;\n            sep = (Separator) elementPairs.get(index);\n            break;\n        }\n    }\n    if (index == -1) {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        }\n        if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        }\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n    Object[] leftComp = createComposite(elementPairs.subList(0, index));\n    Object[] rightComp = createComposite(elementPairs.subList(index + 1, size));\n    PeriodPrinter printer = null;\n    if (!notPrinter) {\n        printer = sep.finish((PeriodPrinter) leftComp[0], (PeriodParser) rightComp[1]);\n    }\n    PeriodParser parser = null;\n    if (!notParser) {\n        parser = sep.finish((PeriodPrinter) rightComp[0], (PeriodParser) leftComp[1]);\n    }\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..6a442145 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,49 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    if (size == 1) {\n+        Object[] comp = createComposite(elementPairs);\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+    Separator sep = null;\n+    int index = -1;\n+    for (int i = 0; i < size; i++) {\n+        if (elementPairs.get(i) instanceof Separator) {\n+            index = i;\n+            sep = (Separator) elementPairs.get(index);\n+            break;\n         }\n+    }\n+    if (index == -1) {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n+        }\n+        if (notParser) {\n             return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+    Object[] leftComp = createComposite(elementPairs.subList(0, index));\n+    Object[] rightComp = createComposite(elementPairs.subList(index + 1, size));\n+    PeriodPrinter printer = null;\n+    if (!notPrinter) {\n+        printer = sep.finish((PeriodPrinter) leftComp[0], (PeriodParser) rightComp[1]);\n     }\n+    PeriodParser parser = null;\n+    if (!notParser) {\n+        parser = sep.finish((PeriodPrinter) rightComp[0], (PeriodParser) leftComp[1]);\n+    }\n+    return new PeriodFormatter(printer, parser);\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.IndexOutOfBoundsException: Index: 7, Size: 7",
    "test_result": "FAIL"
}