{
    "patch": "import java.io.UnsupportedEncodingException;\n\npublic class StringEncodingUtil {\n\n    public static boolean isEncodedInISO8859_1(String inputString) throws UnsupportedEncodingException {\n        byte[] isoBytes = inputString.getBytes(\"ISO-8859-1\");\n        String roundTrip = new String(isoBytes, \"ISO-8859-1\");\n        return inputString.equals(roundTrip);\n    }\n\n    public static String escapeISO8859_1(String inputString) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < inputString.length(); i++) {\n            char c = inputString.charAt(i);\n            if (c <= 255) {\n                result.append(c);\n            } else {\n                result.append(\"\\\\u\");\n                result.append(String.format(\"%04x\", (int) c));\n            }\n        }\n        return result.toString();\n    }\n\n    public static String unescapeISO8859_1(String inputString) {\n        StringBuilder result = new StringBuilder();\n        int i = 0;\n        while (i < inputString.length()) {\n            char c = inputString.charAt(i);\n            if (c == '\\\\' && i + 1 < inputString.length() && inputString.charAt(i + 1) == 'u') {\n                String hexStr = inputString.substring(i + 2, i + 6);\n                int hexVal = Integer.parseInt(hexStr, 16);\n                result.append((char) hexVal);\n                i += 6;\n            } else {\n                result.append(c);\n                i++;\n            }\n        }\n        return result.toString();\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..426983dd 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,49 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+import java.io.UnsupportedEncodingException;\n+\n+public class StringEncodingUtil {\n+\n+    public static boolean isEncodedInISO8859_1(String inputString) throws UnsupportedEncodingException {\n+        byte[] isoBytes = inputString.getBytes(\"ISO-8859-1\");\n+        String roundTrip = new String(isoBytes, \"ISO-8859-1\");\n+        return inputString.equals(roundTrip);\n+    }\n+\n+    public static String escapeISO8859_1(String inputString) {\n+        StringBuilder result = new StringBuilder();\n+        for (int i = 0; i < inputString.length(); i++) {\n+            char c = inputString.charAt(i);\n+            if (c <= 255) {\n+                result.append(c);\n+            } else {\n+                result.append(\"\\\\u\");\n+                result.append(String.format(\"%04x\", (int) c));\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n+    public static String unescapeISO8859_1(String inputString) {\n+        StringBuilder result = new StringBuilder();\n+        int i = 0;\n+        while (i < inputString.length()) {\n+            char c = inputString.charAt(i);\n+            if (c == '\\\\' && i + 1 < inputString.length() && inputString.charAt(i + 1) == 'u') {\n+                String hexStr = inputString.substring(i + 2, i + 6);\n+                int hexVal = Integer.parseInt(hexStr, 16);\n+                result.append((char) hexVal);\n+                i += 6;\n+            } else {\n+                result.append(c);\n+                i++;\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}