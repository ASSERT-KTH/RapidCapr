{
    "patch": "public double getTypedPercent(String jsonStr) {\n    Gson gson = new Gson();\n    Type listType = new TypeToken<List<TypeObj>>() {}.getType();\n    List<TypeObj> typedList = gson.fromJson(jsonStr, listType);\n    double typedCount = 0.0;\n    for(TypeObj obj : typedList) {\n        if(obj.getType() != null && !obj.getType().isEmpty() && obj.getValue() != null) {\n            typedCount++;\n        }\n    }\n    double totalCount = typedList.size();\n    if(totalCount == 0.0) {\n        return 0.0;\n    }\n    return (typedCount / totalCount) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..758e3b38 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String jsonStr) {\n+    Gson gson = new Gson();\n+    Type listType = new TypeToken<List<TypeObj>>() {}.getType();\n+    List<TypeObj> typedList = gson.fromJson(jsonStr, listType);\n+    double typedCount = 0.0;\n+    for(TypeObj obj : typedList) {\n+        if(obj.getType() != null && !obj.getType().isEmpty() && obj.getValue() != null) {\n+            typedCount++;\n+        }\n+    }\n+    double totalCount = typedList.size();\n+    if(totalCount == 0.0) {\n+        return 0.0;\n+    }\n+    return (typedCount / totalCount) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}