{
    "patch": "        // check that function values at endpoints have different signs and are finite\n        final double yMin = f.value(min);\n        if (!Double.isFinite(yMin)) {\n            throw new IllegalArgumentException(\"Function value at min is infinite or NaN: \" + yMin);\n        }\n        final double yMax = f.value(max);\n        if (!Double.isFinite(yMax)) {\n            throw new IllegalArgumentException(\"Function value at max is infinite or NaN: \" + yMax);\n        }\n        if (yMin * yMax >= 0) {\n            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs: [\" + yMin + \", \" + yMax + \"]\");\n        }\n\n        // check that initial guess is finite and does not equal endpoints\n        final double yInitial = f.value(initial);\n        if (!Double.isFinite(yInitial)) {\n            throw new IllegalArgumentException(\"Initial guess value is infinite or NaN: \" + yInitial);\n        }\n        if (initial == min || initial == max) {\n            throw new IllegalArgumentException(\"Initial guess equals an endpoint: \" + initial);\n        }\n\n        // full Brent algorithm starting with provided initial guess\n        return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..98c1f3215 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,30 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // check that function values at endpoints have different signs and are finite\n+        final double yMin = f.value(min);\n+        if (!Double.isFinite(yMin)) {\n+            throw new IllegalArgumentException(\"Function value at min is infinite or NaN: \" + yMin);\n+        }\n+        final double yMax = f.value(max);\n+        if (!Double.isFinite(yMax)) {\n+            throw new IllegalArgumentException(\"Function value at max is infinite or NaN: \" + yMax);\n+        }\n+        if (yMin * yMax >= 0) {\n+            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs: [\" + yMin + \", \" + yMax + \"]\");\n+        }\n+\n+        // check that initial guess is finite and does not equal endpoints\n+        final double yInitial = f.value(initial);\n+        if (!Double.isFinite(yInitial)) {\n+            throw new IllegalArgumentException(\"Initial guess value is infinite or NaN: \" + yInitial);\n+        }\n+        if (initial == min || initial == max) {\n+            throw new IllegalArgumentException(\"Initial guess equals an endpoint: \" + initial);\n+        }\n+\n+        // full Brent algorithm starting with provided initial guess\n+        return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: variable yMin is already defined in method solve(UnivariateRealFunction,double,double,double)",
    "test_result": "ERROR"
}