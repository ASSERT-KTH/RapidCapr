{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    for (Type bound : typeVariable.getBounds()) {\n        if (bound instanceof TypeVariable<?>) {\n            TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n            if (!visitedTypeVariables.contains(typeVar.getName())) {\n                visitedTypeVariables.add(typeVar.getName());\n                Type[] bounds = typeVar.getBounds();\n                for (Type subBound : bounds) {\n                    if (subBound instanceof TypeVariable<?>) {\n                        readTypeVariables(typeVar, visitedTypeVariables);\n                    } else {\n                        registerTypeVariablesOn(subBound);\n                    }\n                }\n            }\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..d6bbe7f0b 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,34 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    for (Type bound : typeVariable.getBounds()) {\n+        if (bound instanceof TypeVariable<?>) {\n+            TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n+            if (!visitedTypeVariables.contains(typeVar.getName())) {\n+                visitedTypeVariables.add(typeVar.getName());\n+                Type[] bounds = typeVar.getBounds();\n+                for (Type subBound : bounds) {\n+                    if (subBound instanceof TypeVariable<?>) {\n+                        readTypeVariables(typeVar, visitedTypeVariables);\n+                    } else {\n+                        registerTypeVariablesOn(subBound);\n+                    }\n+                }\n+            }\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}