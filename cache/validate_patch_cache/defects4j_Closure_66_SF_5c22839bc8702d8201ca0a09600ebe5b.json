{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    JsonObject jsonObject = new JsonParser().parse(jsonStr).getAsJsonObject();\n    int totalCount = jsonObject.get(\"count\").getAsInt();\n\n    int typedCount = 0;\n    JsonArray elements = jsonObject.getAsJsonArray(\"list\");\n    for (JsonElement element : elements) {\n        JsonObject item = element.getAsJsonObject();\n        if (item.get(\"type\").getAsString().equals(\"typed\")) {\n            typedCount++;\n        }\n    }\n\n    return (typedCount * 100.0) / totalCount;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..d55ef611 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    JsonObject jsonObject = new JsonParser().parse(jsonStr).getAsJsonObject();\n+    int totalCount = jsonObject.get(\"count\").getAsInt();\n+\n+    int typedCount = 0;\n+    JsonArray elements = jsonObject.getAsJsonArray(\"list\");\n+    for (JsonElement element : elements) {\n+        JsonObject item = element.getAsJsonObject();\n+        if (item.get(\"type\").getAsString().equals(\"typed\")) {\n+            typedCount++;\n+        }\n+    }\n+\n+    return (typedCount * 100.0) / totalCount;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}