{
    "patch": "    return !isRegexpType();\n  }\n\n  /**\n   * Print the object type recursively while handling recursive types.\n   *\n   * @param objectType the object type to print\n   * @param depth the current depth of the recursion\n   * @param printedTypes the set of object types that have been printed so far\n   * @return the string representation of the object type\n   */\n  private static String printRecursiveTypes(ObjectType objectType, int depth, Set<ObjectType> printedTypes) {\n    if (objectType == null) {\n      return \"\";\n    }\n\n    if (printedTypes.contains(objectType)) {\n      // Recursive object type detected, print \"...\".\n      return \"{...}\";\n    }\n\n    if (depth > MAX_RECURSION_DEPTH) {\n      // Recursion depth limit reached, print \"{...}\".\n      return \"{...}\";\n    }\n\n    printedTypes.add(objectType);\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n\n    int i = 0;\n    for (String property : objectType.getOwnPropertyNames()) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n\n      sb.append(property);\n      sb.append(\": \");\n\n      Object propertyType = objectType.getPropertyType(property);\n      if (propertyType instanceof ObjectType) {\n        sb.append(printRecursiveTypes((ObjectType) propertyType, depth + 1, printedTypes));\n      } else {\n        sb.append(propertyType.toString());\n      }\n\n      ++i;\n      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n        sb.append(\", ...\");\n        break;\n      }\n    }\n\n    sb.append(\"}\");\n\n    return sb.toString();\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(printRecursiveTypes(this, 1, new HashSet<ObjectType>()));\n      ",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..244886b8 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,56 +345,77 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n+    return !isRegexpType();\n   }\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n-      return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n+  /**\n+   * Print the object type recursively while handling recursive types.\n+   *\n+   * @param objectType the object type to print\n+   * @param depth the current depth of the recursion\n+   * @param printedTypes the set of object types that have been printed so far\n+   * @return the string representation of the object type\n+   */\n+  private static String printRecursiveTypes(ObjectType objectType, int depth, Set<ObjectType> printedTypes) {\n+    if (objectType == null) {\n+      return \"\";\n+    }\n \n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n+    if (printedTypes.contains(objectType)) {\n+      // Recursive object type detected, print \"...\".\n+      return \"{...}\";\n+    }\n \n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n+    if (depth > MAX_RECURSION_DEPTH) {\n+      // Recursion depth limit reached, print \"{...}\".\n+      return \"{...}\";\n+    }\n \n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n+    printedTypes.add(objectType);\n \n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"{\");\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n+    int i = 0;\n+    for (String property : objectType.getOwnPropertyNames()) {\n+      if (i > 0) {\n+        sb.append(\", \");\n       }\n \n-      sb.append(\"}\");\n+      sb.append(property);\n+      sb.append(\": \");\n \n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n+      Object propertyType = objectType.getPropertyType(property);\n+      if (propertyType instanceof ObjectType) {\n+        sb.append(printRecursiveTypes((ObjectType) propertyType, depth + 1, printedTypes));\n+      } else {\n+        sb.append(propertyType.toString());\n+      }\n+\n+      ++i;\n+      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+        sb.append(\", ...\");\n+        break;\n+      }\n     }\n+\n+    sb.append(\"}\");\n+\n+    return sb.toString();\n   }\n \n+  @Override\n+  String toStringHelper(boolean forAnnotations) {\n+    if (hasReferenceName()) {\n+      return getReferenceName();\n+    } else if (prettyPrint) {\n+      // Don't pretty print recursively.\n+      prettyPrint = false;\n+\n+      StringBuilder sb = new StringBuilder();\n+      sb.append(printRecursiveTypes(this, 1, new HashSet<ObjectType>()));\n+      \n+\n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;\n   }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}