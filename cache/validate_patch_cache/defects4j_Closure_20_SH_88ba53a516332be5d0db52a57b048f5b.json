{
    "patch": "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n    if (value != null) {\n      boolean isSafeToFoldToString = !NodeUtil.mayHaveSideEffects(n.getParent()) && !NodeUtil.mayHaveSideEffects(value);\n\n      if ((value.isString() || value.isNumber()) && isSafeToFoldToString) {\n        Node addition = IR.add(\n          IR.string(\"\").srcref(callTarget),\n          value.detachFromParent());\n\n        n.getParent().replaceChild(n, addition);\n        reportCodeChange();\n        return addition;\n      }\n    }\n  }\n\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..2f8bb745 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,28 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+private Node tryFoldSimpleFunctionCall(Node n) {\n+  Preconditions.checkState(n.isCall());\n+  Node callTarget = n.getFirstChild();\n+  if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) {\n+    Node value = callTarget.getNext();\n+    if (value != null) {\n+      boolean isSafeToFoldToString = !NodeUtil.mayHaveSideEffects(n.getParent()) && !NodeUtil.mayHaveSideEffects(value);\n+\n+      if ((value.isString() || value.isNumber()) && isSafeToFoldToString) {\n+        Node addition = IR.add(\n+          IR.string(\"\").srcref(callTarget),\n+          value.detachFromParent());\n+\n+        n.getParent().replaceChild(n, addition);\n+        reportCodeChange();\n+        return addition;\n+      }\n+    }\n+  }\n+\n+  return n;\n+}\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}