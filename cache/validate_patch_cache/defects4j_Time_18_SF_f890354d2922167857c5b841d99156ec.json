{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                    int hourOfDay, int minuteOfHour,\n                                    int secondOfMinute, int millisOfSecond)\n            throws IllegalArgumentException {\n        \n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        boolean isGregorianAfterCutover = year > 1582 || (year == 1582 && monthOfYear > 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth >= 15);\n        boolean isGregorianBeforeCutover = year < 1582 || (year == 1582 && monthOfYear < 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth < 15);\n\n        if (isGregorianAfterCutover) {\n            // Gregorian\n            try {\n                long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                return instant;\n            } catch (IllegalArgumentException e) {\n                // Date does not exist in Gregorian calendar\n                long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                if (julianInstant >= iCutoverMillis) {\n                    throw new IllegalArgumentException(\"Specified date does not exist\");\n                }\n                return julianInstant;\n            }\n\n        } else if (isGregorianBeforeCutover) {\n            // Julian\n            if (monthOfYear == 2 && dayOfMonth == 29 && !iJulianChronology.isLeapYear(year)) {\n                throw new IllegalArgumentException(\"Invalid leap year day\");\n            }\n            try {\n                long instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                return instant;\n            } catch (IllegalArgumentException e) {\n                // Date does not exist in Julian calendar\n                long gregorianInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                if (gregorianInstant < iCutoverMillis) {\n                    throw new IllegalArgumentException(\"Specified date does not exist\");\n                }\n                return gregorianInstant;\n            }\n        } else {\n            // Date is in the cutover period\n            return handleCutoverDate(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n    }\n\n    private long handleCutoverDate(int year, int monthOfYear, int dayOfMonth,\n                                           int hourOfDay, int minuteOfHour,\n                                           int secondOfMinute, int millisOfSecond) {\n        long gregorianInstant, julianInstant;\n        try {\n            // Try Gregorian first.\n            gregorianInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException e) {\n            // Maybe it's Julian.\n            try {\n                julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                gregorianInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            } catch (IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        }\n        if (julianInstant >= iCutoverMillis && gregorianInstant < iCutoverMillis) {\n            return julianInstant; // the instant falls in the cutover gap\n        }\n        if (gregorianInstant >= iCutoverMillis && julianInstant < iCutoverMillis) {\n            return gregorianInstant; // the instant is in the Gregorian calendar\n        }\n        // Date time is ambiguous, it exists in both calendars but is not in the cutover gap.\n        throw new IllegalArgumentException(\"Specified date is ambiguous\");",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..9e24fd92 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,35 +347,89 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+                                    int hourOfDay, int minuteOfHour,\n+                                    int secondOfMinute, int millisOfSecond)\n+            throws IllegalArgumentException {\n+        \n         Chronology base;\n         if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        }\n+\n+        boolean isGregorianAfterCutover = year > 1582 || (year == 1582 && monthOfYear > 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth >= 15);\n+        boolean isGregorianBeforeCutover = year < 1582 || (year == 1582 && monthOfYear < 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth < 15);\n+\n+        if (isGregorianAfterCutover) {\n+            // Gregorian\n+            try {\n+                long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+                return instant;\n+            } catch (IllegalArgumentException e) {\n+                // Date does not exist in Gregorian calendar\n+                long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+                if (julianInstant >= iCutoverMillis) {\n+                    throw new IllegalArgumentException(\"Specified date does not exist\");\n+                }\n+                return julianInstant;\n+            }\n+\n+        } else if (isGregorianBeforeCutover) {\n+            // Julian\n+            if (monthOfYear == 2 && dayOfMonth == 29 && !iJulianChronology.isLeapYear(year)) {\n+                throw new IllegalArgumentException(\"Invalid leap year day\");\n+            }\n+            try {\n+                long instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+                return instant;\n+            } catch (IllegalArgumentException e) {\n+                // Date does not exist in Julian calendar\n+                long gregorianInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+                if (gregorianInstant < iCutoverMillis) {\n+                    throw new IllegalArgumentException(\"Specified date does not exist\");\n+                }\n+                return gregorianInstant;\n+            }\n+        } else {\n+            // Date is in the cutover period\n+            return handleCutoverDate(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n         }\n+    }\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n+    private long handleCutoverDate(int year, int monthOfYear, int dayOfMonth,\n+                                           int hourOfDay, int minuteOfHour,\n+                                           int secondOfMinute, int millisOfSecond) {\n+        long gregorianInstant, julianInstant;\n+        try {\n+            // Try Gregorian first.\n+            gregorianInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                                                            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                                                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        } catch (IllegalArgumentException e) {\n             // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n+            try {\n+                julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                                                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+                gregorianInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                                                                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            } catch (IllegalArgumentException ex) {\n                 throw new IllegalArgumentException(\"Specified date does not exist\");\n             }\n         }\n-        return instant;\n-    }\n+        if (julianInstant >= iCutoverMillis && gregorianInstant < iCutoverMillis) {\n+            return julianInstant; // the instant falls in the cutover gap\n+        }\n+        if (gregorianInstant >= iCutoverMillis && julianInstant < iCutoverMillis) {\n+            return gregorianInstant; // the instant is in the Gregorian calendar\n+        }\n+        // Date time is ambiguous, it exists in both calendars but is not in the cutover gap.\n+        throw new IllegalArgumentException(\"Specified date is ambiguous\");\n \n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}