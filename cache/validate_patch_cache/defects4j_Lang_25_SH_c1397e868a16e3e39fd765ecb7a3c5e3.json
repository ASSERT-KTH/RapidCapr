{
    "patch": "for (int i = 0; i < length; i++) {\n    char c = in.charAt(i);\n\n    // check for unicode\n    if (c > 0xff) {\n        if (buf.length() > 0) {\n            out.write(StringUtils.getBytesIso8859_1(buf.toString()));\n            buf.setLength(0);\n        }\n        out.write(c);\n        continue;\n    }\n\n    // check for special characters\n    if (c == '\\n') {\n        out.write(StringUtils.getBytesIso8859_1(\"\\\\n\"));\n        continue;\n    } else if (c == '\\r') {\n        out.write(StringUtils.getBytesIso8859_1(\"\\\\r\"));\n        continue;\n    } else if (c == '\\t') {\n        out.write(StringUtils.getBytesIso8859_1(\"\\\\t\"));\n        continue;\n    } else if (c == escape) {\n        out.write(StringUtils.getBytesIso8859_1(\"\\\\\"));\n        out.write(escape);\n        continue;\n    }\n\n    // check if character must be escaped\n    if (indexOfISOControl(c) >= 0 || (specials.indexOf(c) >= 0 && c != escape)) {\n        if (buf.length() > 0) {\n            out.write(StringUtils.getBytesIso8859_1(buf.toString()));\n            buf.setLength(0);\n        }\n        out.write(charToHex(c));\n    } else {\n        buf.append(c);\n    }\n}\n\nif (buf.length() > 0) {\n    out.write(StringUtils.getBytesIso8859_1(buf.toString()));\n}\n\nassertTrue(\"One or more errors detected\", success);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}