{
    "patch": "public static double getTypedPercent(String json) {\n    int length = 0;\n    int typedLength = 0;\n\n    try {\n        JSONObject obj = new JSONObject(json);\n        JSONArray arr = obj.getJSONArray(\"employees\");\n\n        for (int i = 0; i < arr.length(); i++) {\n            JSONObject emp = arr.getJSONObject(i);\n            String type = emp.getString(\"type\");\n            length++;\n\n            if (type != null && !type.isEmpty()) {\n                typedLength++;\n            }\n        }\n    } catch (JSONException e) {\n        System.out.println(\"Error: \" + e.getMessage());\n    }\n\n    if (length == 0) {\n        return 0.0;\n    }\n\n    return (double) typedLength / length * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..059faef5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    int length = 0;\n+    int typedLength = 0;\n+\n+    try {\n+        JSONObject obj = new JSONObject(json);\n+        JSONArray arr = obj.getJSONArray(\"employees\");\n+\n+        for (int i = 0; i < arr.length(); i++) {\n+            JSONObject emp = arr.getJSONObject(i);\n+            String type = emp.getString(\"type\");\n+            length++;\n+\n+            if (type != null && !type.isEmpty()) {\n+                typedLength++;\n+            }\n+        }\n+    } catch (JSONException e) {\n+        System.out.println(\"Error: \" + e.getMessage());\n+    }\n+\n+    if (length == 0) {\n+        return 0.0;\n+    }\n+\n+    return (double) typedLength / length * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}