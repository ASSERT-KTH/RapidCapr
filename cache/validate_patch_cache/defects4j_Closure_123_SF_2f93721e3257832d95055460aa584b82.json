{
    "patch": "public static String fixCode(String code) {\n    int inIndex = code.indexOf(\" in \");\n    while (inIndex != -1) {\n        int openParenIndex = code.substring(0, inIndex).lastIndexOf(\"(\");\n        int closeParenIndex = findMatchingParen(code, openParenIndex);\n        \n        String before = code.substring(0, openParenIndex);\n        String after = code.substring(closeParenIndex + 1);\n        String inExpression = code.substring(openParenIndex, inIndex);\n        String loop = code.substring(inIndex);\n        loop = loop.replaceFirst(\" in \", \" : \");\n        code = before + inExpression + \"[\" + loop + \"]\" + after;\n        \n        inIndex = code.indexOf(\" in \");\n    }\n    return code;\n}\n\nprivate static int findMatchingParen(String code, int openParenIndex) {\n    int parenCount = 1;\n    int index = openParenIndex + 1;\n    while (parenCount > 0) {\n        char c = code.charAt(index);\n        if (c == '(') {\n            parenCount++;\n        } else if (c == ')') {\n            parenCount--;\n        }\n        index++;\n    }\n    return index - 1;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..096a17ed 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,38 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    int inIndex = code.indexOf(\" in \");\n+    while (inIndex != -1) {\n+        int openParenIndex = code.substring(0, inIndex).lastIndexOf(\"(\");\n+        int closeParenIndex = findMatchingParen(code, openParenIndex);\n+        \n+        String before = code.substring(0, openParenIndex);\n+        String after = code.substring(closeParenIndex + 1);\n+        String inExpression = code.substring(openParenIndex, inIndex);\n+        String loop = code.substring(inIndex);\n+        loop = loop.replaceFirst(\" in \", \" : \");\n+        code = before + inExpression + \"[\" + loop + \"]\" + after;\n+        \n+        inIndex = code.indexOf(\" in \");\n+    }\n+    return code;\n+}\n+\n+private static int findMatchingParen(String code, int openParenIndex) {\n+    int parenCount = 1;\n+    int index = openParenIndex + 1;\n+    while (parenCount > 0) {\n+        char c = code.charAt(index);\n+        if (c == '(') {\n+            parenCount++;\n+        } else if (c == ')') {\n+            parenCount--;\n+        }\n+        index++;\n+    }\n+    return index - 1;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}