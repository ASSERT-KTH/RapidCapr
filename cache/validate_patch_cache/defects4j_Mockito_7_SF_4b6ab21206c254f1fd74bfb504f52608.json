{
    "patch": "private void readTypeVariables() {\n    if (!(typeVariable.getGenericDeclaration() instanceof Class<?>)) {\n        // Skip type variables for non-class types\n        return;\n    }\n    Class<?> declaringClass = (Class<?>) typeVariable.getGenericDeclaration();\n    ParameterizedType parameterizedType = null;\n    for (Type type : declaringClass.getGenericInterfaces()) {\n        if (type instanceof ParameterizedType && ((ParameterizedType) type).getRawType().equals(declaringClass)) {\n            // Found parameterized type for declaring class\n            parameterizedType = (ParameterizedType) type;\n            break;\n        }\n    }\n    if (parameterizedType == null && declaringClass.getGenericSuperclass() instanceof ParameterizedType) {\n        // Use superclass if no interface\n        parameterizedType = (ParameterizedType) declaringClass.getGenericSuperclass();\n    }\n    if (parameterizedType != null) {\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        for (Type actualTypeArgument : actualTypeArguments) {\n            if (!(actualTypeArgument instanceof TypeVariable<?>)) {\n                registerTypeVariablesOn(actualTypeArgument);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..9a8ceb695 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,34 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (!(typeVariable.getGenericDeclaration() instanceof Class<?>)) {\n+        // Skip type variables for non-class types\n+        return;\n+    }\n+    Class<?> declaringClass = (Class<?>) typeVariable.getGenericDeclaration();\n+    ParameterizedType parameterizedType = null;\n+    for (Type type : declaringClass.getGenericInterfaces()) {\n+        if (type instanceof ParameterizedType && ((ParameterizedType) type).getRawType().equals(declaringClass)) {\n+            // Found parameterized type for declaring class\n+            parameterizedType = (ParameterizedType) type;\n+            break;\n+        }\n+    }\n+    if (parameterizedType == null && declaringClass.getGenericSuperclass() instanceof ParameterizedType) {\n+        // Use superclass if no interface\n+        parameterizedType = (ParameterizedType) declaringClass.getGenericSuperclass();\n+    }\n+    if (parameterizedType != null) {\n+        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+        for (Type actualTypeArgument : actualTypeArguments) {\n+            if (!(actualTypeArgument instanceof TypeVariable<?>)) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}