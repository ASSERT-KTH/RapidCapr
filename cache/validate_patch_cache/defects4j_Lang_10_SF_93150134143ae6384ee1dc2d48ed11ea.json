{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    boolean inQuote = false;\n    boolean inYearPattern = false;\n    boolean inZonePattern = false;\n    int yearPatternCount = 0;\n    for (int i = 0; i < value.length(); i++) {\n        char c = value.charAt(i);\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                if (inYearPattern) {\n                    regex.append(')');\n                    inYearPattern = false;\n                    yearPatternCount = 0;\n                } else if (inZonePattern) {\n                    regex.append('\\'');\n                    inZonePattern = false;\n                } else if (inQuote) {\n                    regex.append('\\'');\n                    inQuote = false;\n                }\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n        wasWhite = false;\n\n        if (c == '\\'') {\n            if (unquote) {\n                if (++i < value.length()) {\n                    c = value.charAt(i);\n                } else {\n                    return regex;\n                }\n            }\n            if (!inYearPattern && !inZonePattern) {\n                if (!inQuote) {\n                    inQuote = true;\n                    regex.append(Pattern.quote(\"'\"));\n                } else if (i + 1 < value.length() && value.charAt(i + 1) == '\\'') {\n                    regex.append(\"''\");\n                    i++;\n                } else {\n                    inQuote = false;\n                }\n            } else if (inZonePattern) {\n                regex.append(\"'''\");\n                inZonePattern = false;\n            } else {\n                yearPatternCount = 0;\n                regex.append(')');\n                inYearPattern = false;\n            }\n        } else if (inYearPattern) {\n            if (c == 'y') {\n                if (++yearPatternCount > 4) {\n                    inYearPattern = false;\n                    yearPatternCount = 0;\n                    regex.append(')');\n                }\n            } else {\n                inYearPattern = false;\n                yearPatternCount = 0;\n                regex.append(')');\n                regex.append(c);\n            }\n        } else if (inZonePattern) {\n            if (c == 'z' || c == 'Z') {\n                regex.append('\\'');\n                inZonePattern = false;\n            } else if (++yearPatternCount > 4) {\n                inZonePattern = false;\n                yearPatternCount = 0;\n                regex.append('\\'');\n            }\n        } else if (c == 'G' || (i + 1 < value.length() && c == 'E' && value.charAt(i + 1) == 'E')) {\n            if (c == 'E') {\n                i++;\n            }\n            regex.append(\"(?:B\\\\.?C\\\\.?|A\\\\.?D\\\\.?)\");\n        } else if (Character.isDigit(c)) {\n            inYearPattern = true;\n            yearPatternCount = 1;\n            regex.append(\"(?:(?:\\\\d\\\\d)?\\\\d\\\\d)\");\n        } else if (c == 'z') {\n            inZonePattern = true;\n            yearPatternCount = 1;\n            regex.append(\"'\");\n        } else {\n            regex.append(Pattern.quote(Character.toString(c)));\n        }\n    }\n    if (inYearPattern) {\n        regex.append(')');\n    }\n    if (inZonePattern) {\n        regex.append(\"'''\");\n    }\n    if (inQuote) {\n        regex.append(\"'\");\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..e5c614c7 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,110 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    boolean inQuote = false;\n+    boolean inYearPattern = false;\n+    boolean inZonePattern = false;\n+    int yearPatternCount = 0;\n+    for (int i = 0; i < value.length(); i++) {\n+        char c = value.charAt(i);\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                if (inYearPattern) {\n+                    regex.append(')');\n+                    inYearPattern = false;\n+                    yearPatternCount = 0;\n+                } else if (inZonePattern) {\n+                    regex.append('\\'');\n+                    inZonePattern = false;\n+                } else if (inQuote) {\n+                    regex.append('\\'');\n+                    inQuote = false;\n                 }\n-                continue;\n+                regex.append(\"\\\\s*+\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n+            continue;\n+        }\n+        wasWhite = false;\n+\n+        if (c == '\\'') {\n+            if (unquote) {\n+                if (++i < value.length()) {\n+                    c = value.charAt(i);\n+                } else {\n+                    return regex;\n                 }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n             }\n-            regex.append(c);\n+            if (!inYearPattern && !inZonePattern) {\n+                if (!inQuote) {\n+                    inQuote = true;\n+                    regex.append(Pattern.quote(\"'\"));\n+                } else if (i + 1 < value.length() && value.charAt(i + 1) == '\\'') {\n+                    regex.append(\"''\");\n+                    i++;\n+                } else {\n+                    inQuote = false;\n+                }\n+            } else if (inZonePattern) {\n+                regex.append(\"'''\");\n+                inZonePattern = false;\n+            } else {\n+                yearPatternCount = 0;\n+                regex.append(')');\n+                inYearPattern = false;\n+            }\n+        } else if (inYearPattern) {\n+            if (c == 'y') {\n+                if (++yearPatternCount > 4) {\n+                    inYearPattern = false;\n+                    yearPatternCount = 0;\n+                    regex.append(')');\n+                }\n+            } else {\n+                inYearPattern = false;\n+                yearPatternCount = 0;\n+                regex.append(')');\n+                regex.append(c);\n+            }\n+        } else if (inZonePattern) {\n+            if (c == 'z' || c == 'Z') {\n+                regex.append('\\'');\n+                inZonePattern = false;\n+            } else if (++yearPatternCount > 4) {\n+                inZonePattern = false;\n+                yearPatternCount = 0;\n+                regex.append('\\'');\n+            }\n+        } else if (c == 'G' || (i + 1 < value.length() && c == 'E' && value.charAt(i + 1) == 'E')) {\n+            if (c == 'E') {\n+                i++;\n+            }\n+            regex.append(\"(?:B\\\\.?C\\\\.?|A\\\\.?D\\\\.?)\");\n+        } else if (Character.isDigit(c)) {\n+            inYearPattern = true;\n+            yearPatternCount = 1;\n+            regex.append(\"(?:(?:\\\\d\\\\d)?\\\\d\\\\d)\");\n+        } else if (c == 'z') {\n+            inZonePattern = true;\n+            yearPatternCount = 1;\n+            regex.append(\"'\");\n+        } else {\n+            regex.append(Pattern.quote(Character.toString(c)));\n         }\n-        return regex;\n     }\n+    if (inYearPattern) {\n+        regex.append(')');\n+    }\n+    if (inZonePattern) {\n+        regex.append(\"'''\");\n+    }\n+    if (inQuote) {\n+        regex.append(\"'\");\n+    }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}