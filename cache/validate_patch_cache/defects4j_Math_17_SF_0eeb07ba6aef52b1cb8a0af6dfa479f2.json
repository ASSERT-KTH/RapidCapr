{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN()) {\n            return newInstance(getField(), sign, NaN);\n        }\n        if (x == 0) {\n            return newInstance(getField(), 0);\n        }\n        Dfp product = newInstance(getField());\n        boolean negativeResult = false;\n        boolean negativeMultiplicand = sign == -1;\n        if (x < 0) {\n            negativeResult = !negativeResult;\n            if (x == Integer.MIN_VALUE) {\n                product = newInstance(getField(), negativeMultiplicand ? 1 : -1, NaN);\n                product.sign = negativeResult ? -1 : 1;\n                return product;\n            }\n            x = -x;\n            negativeMultiplicand = !negativeMultiplicand;\n        }\n        for (int i = 0; x != 0; ++i, x >>= 1) {\n            if ((x & 1) != 0) {\n                product = product.add(shiftLeft(i));\n                negativeResult ^= negativeMultiplicand;\n            }\n        }\n        product.sign = negativeResult ? -1 : 1;\n        return product;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..643d33583 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,33 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN()) {\n+            return newInstance(getField(), sign, NaN);\n+        }\n+        if (x == 0) {\n+            return newInstance(getField(), 0);\n+        }\n+        Dfp product = newInstance(getField());\n+        boolean negativeResult = false;\n+        boolean negativeMultiplicand = sign == -1;\n+        if (x < 0) {\n+            negativeResult = !negativeResult;\n+            if (x == Integer.MIN_VALUE) {\n+                product = newInstance(getField(), negativeMultiplicand ? 1 : -1, NaN);\n+                product.sign = negativeResult ? -1 : 1;\n+                return product;\n+            }\n+            x = -x;\n+            negativeMultiplicand = !negativeMultiplicand;\n+        }\n+        for (int i = 0; x != 0; ++i, x >>= 1) {\n+            if ((x & 1) != 0) {\n+                product = product.add(shiftLeft(i));\n+                negativeResult ^= negativeMultiplicand;\n+            }\n+        }\n+        product.sign = negativeResult ? -1 : 1;\n+        return product;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}