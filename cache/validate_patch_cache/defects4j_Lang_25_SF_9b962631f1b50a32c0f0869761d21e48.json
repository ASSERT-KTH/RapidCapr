{
    "patch": "import java.io.UnsupportedEncodingException;\n\npublic class StringUtil {\n    \n    public static String iso8859_1_escape(String str) {\n        StringBuilder buf = new StringBuilder();\n        int len = str.length();\n        for (int i = 0; i < len; i++) {\n            char ch = str.charAt(i);\n            switch (ch) {\n            case '\\u00E4': // \u00e4\n                buf.append(\"&auml;\");\n                break;\n            case '\\u00F6': // \u00f6\n                buf.append(\"&ouml;\");\n                break;\n            case '\\u00FC': // \u00fc\n                buf.append(\"&uuml;\");\n                break;\n            case '\\u00DF': // \u00df\n                buf.append(\"&szlig;\");\n                break;\n            default:\n                try {\n                    if (ch > 127) {\n                        buf.append(new String(new byte[]{(byte)ch}, \"ISO8859_1\"));\n                    } else {\n                        buf.append(ch);\n                    }\n                } catch (UnsupportedEncodingException e) {\n                    // This should never happen.\n                    throw new RuntimeException(e);\n                }\n                break;\n            }\n        }\n        return buf.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..7a488864 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,45 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+import java.io.UnsupportedEncodingException;\n+\n+public class StringUtil {\n+    \n+    public static String iso8859_1_escape(String str) {\n+        StringBuilder buf = new StringBuilder();\n+        int len = str.length();\n+        for (int i = 0; i < len; i++) {\n+            char ch = str.charAt(i);\n+            switch (ch) {\n+            case '\\u00E4': // \u00e4\n+                buf.append(\"&auml;\");\n+                break;\n+            case '\\u00F6': // \u00f6\n+                buf.append(\"&ouml;\");\n+                break;\n+            case '\\u00FC': // \u00fc\n+                buf.append(\"&uuml;\");\n+                break;\n+            case '\\u00DF': // \u00df\n+                buf.append(\"&szlig;\");\n+                break;\n+            default:\n+                try {\n+                    if (ch > 127) {\n+                        buf.append(new String(new byte[]{(byte)ch}, \"ISO8859_1\"));\n+                    } else {\n+                        buf.append(ch);\n+                    }\n+                } catch (UnsupportedEncodingException e) {\n+                    // This should never happen.\n+                    throw new RuntimeException(e);\n+                }\n+                break;\n+            }\n+        }\n+        return buf.toString();\n+    }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}