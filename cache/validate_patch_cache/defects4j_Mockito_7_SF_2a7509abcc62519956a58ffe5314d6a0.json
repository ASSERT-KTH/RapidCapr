{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    Type actualTypeArgument = null;\n    Type genericDeclaration = typeVariable.getGenericDeclaration();\n    if (genericDeclaration instanceof Class) {\n        Class<?> clazz = (Class<?>) genericDeclaration;\n        if (clazz.isArray()) {\n            actualTypeArgument = clazz.getComponentType();\n        }\n    } else {\n        actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    }\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..7ae78c429 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,28 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    Type actualTypeArgument = null;\n+    Type genericDeclaration = typeVariable.getGenericDeclaration();\n+    if (genericDeclaration instanceof Class) {\n+        Class<?> clazz = (Class<?>) genericDeclaration;\n+        if (clazz.isArray()) {\n+            actualTypeArgument = clazz.getComponentType();\n+        }\n+    } else {\n+        actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    }\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: incompatible types: GenericDeclaration cannot be converted to Type",
    "test_result": "ERROR"
}