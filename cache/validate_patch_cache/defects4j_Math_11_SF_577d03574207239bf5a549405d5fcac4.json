{
    "patch": "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    final double normalizer = 1 / (Math.pow(2 * Math.PI, dim /2) * Math.sqrt(covarianceMatrixDeterminant));\n    final double exponent = -0.5 * new MahalanobisDistance(getMean(), getCovariances()).compute(vals);\n    return normalizer * Math.exp(exponent);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..58b541752 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -174,16 +174,15 @@ public class MultivariateNormalDistribution\n     }\n \n     /** {@inheritDoc} */\n-    public double density(final double[] vals) throws DimensionMismatchException {\n-        final int dim = getDimension();\n-        if (vals.length != dim) {\n-            throw new DimensionMismatchException(vals.length, dim);\n-        }\n-\n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n+public double density(final double[] vals) throws DimensionMismatchException {\n+    final int dim = getDimension();\n+    if (vals.length != dim) {\n+        throw new DimensionMismatchException(vals.length, dim);\n     }\n+    final double normalizer = 1 / (Math.pow(2 * Math.PI, dim /2) * Math.sqrt(covarianceMatrixDeterminant));\n+    final double exponent = -0.5 * new MahalanobisDistance(getMean(), getCovariances()).compute(vals);\n+    return normalizer * Math.exp(exponent);\n+}\n \n     /**\n      * Gets the square root of each element on the diagonal of the covariance",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}