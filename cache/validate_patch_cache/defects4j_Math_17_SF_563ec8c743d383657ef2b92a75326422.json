{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN() || x == 0) {\n            return newInstance(getField(), this);\n        }\n        int i = abs(x);\n        Dfp r = newInstance(getField(), this);\n        for (;;) {\n            if ((i & 1) != 0) {\n                r = r.add(r);\n                if (x < 0) {\n                    r = r.subtract(this);\n                } else {\n                    r = r.add(this);\n                }\n            }\n            i >>= 1;\n            if (i == 0) {\n                break;\n            }\n            this.setTo2mul(this);\n        }\n        return r;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..4f41743a6 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,27 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN() || x == 0) {\n+            return newInstance(getField(), this);\n+        }\n+        int i = abs(x);\n+        Dfp r = newInstance(getField(), this);\n+        for (;;) {\n+            if ((i & 1) != 0) {\n+                r = r.add(r);\n+                if (x < 0) {\n+                    r = r.subtract(this);\n+                } else {\n+                    r = r.add(this);\n+                }\n+            }\n+            i >>= 1;\n+            if (i == 0) {\n+                break;\n+            }\n+            this.setTo2mul(this);\n+        }\n+        return r;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: no suitable method found for newInstance(DfpField,Dfp)",
    "test_result": "ERROR"
}