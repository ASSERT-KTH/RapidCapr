{
    "patch": "public ReturnValue execute(SymbolicExecution se) {\n    try {\n        Class<?> returnType = Class.forName(this.returnType);\n        if (returnType.isAssignableFrom(Iterable.class)) {\n            return new ReturnValue(new ArrayList<>());\n        }\n        Object value = se.generateInput(returnType);\n        if (value == null) {\n            if (returnType.isPrimitive()) {\n                return new ReturnValue(se.generatePrimitiveValue(returnType));\n            } else {\n                return new ReturnValue(null);\n            }\n        } else {\n            return new ReturnValue(value);\n        }\n    } catch (ClassNotFoundException e) {\n        throw new SyPetException(e.getMessage());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}