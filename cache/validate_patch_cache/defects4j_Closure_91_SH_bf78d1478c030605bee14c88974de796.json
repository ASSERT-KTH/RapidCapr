{
    "patch": "      if (NodeUtil.isLValue(parent)) {\n        // Always traverse L-values.\n        if (assignLhsChild == null) {\n          assignLhsChild = parent;\n        }\n      } else if (parent.getType() == Token.NAME) {\n        // Don't traverse references to goog.scope (aka $jscomp.scope).\n        if (NodeUtil.isNameReference(parent, \"$jscomp.scope\")) {\n          return false;\n        }\n\n        // Don't traverse references to known global variables.\n        if (knownGlobals.contains(parent.getString())) {\n          return false;\n        }\n      } else if (NodeUtil.isExecutedByClosureCall(parent)) {\n        // Don't traverse dependencies assumed to have no side-effects.\n        return false;\n      } else if (parent.getType() == Token.CALL) {\n        Node callee = parent.getFirstChild();\n        if (callee.getType() == Token.NAME &&\n            callee.getString().equals(\"goog.scope\")) {\n          // Don't traverse goog.scope calls.\n          return false;\n        }\n      }\n\n      return true;\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..35a22c6c 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,37 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(parent)) {\n+        // Always traverse L-values.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = parent;\n+        }\n+      } else if (parent.getType() == Token.NAME) {\n+        // Don't traverse references to goog.scope (aka $jscomp.scope).\n+        if (NodeUtil.isNameReference(parent, \"$jscomp.scope\")) {\n+          return false;\n+        }\n+\n+        // Don't traverse references to known global variables.\n+        if (knownGlobals.contains(parent.getString())) {\n+          return false;\n+        }\n+      } else if (NodeUtil.isExecutedByClosureCall(parent)) {\n+        // Don't traverse dependencies assumed to have no side-effects.\n+        return false;\n+      } else if (parent.getType() == Token.CALL) {\n+        Node callee = parent.getFirstChild();\n+        if (callee.getType() == Token.NAME &&\n+            callee.getString().equals(\"goog.scope\")) {\n+          // Don't traverse goog.scope calls.\n+          return false;\n+        }\n+      }\n+\n+      return true;\n+    }\n+    return false;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}