{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  List<Node> parameters = functionType.getParameters();\n  int numParams = parameters.size();\n  int numArgs = call.getChildCount() - 1;\n  if (numArgs > numParams && !functionType.hasRestFormals()) {\n    // If there are more arguments than parameters and the function doesn't\n    // have rest parameters, it's an error.\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(numParams),\n        \"\");\n    return;\n  }\n\n  Iterator<Node> paramItr = parameters.iterator();\n  Node argument;\n  for (int i = 0; arguments.hasNext() && i < numParams; i++) {\n    Node parameter = paramItr.next();\n    argument = arguments.next();\n    int ordinal = i + 1;\n\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  if (functionType.hasRestFormals()) {\n    // Handle rest parameters.\n    Node restExpr = paramItr.next().getFirstChild();\n    if (arguments.hasNext()) {\n      report(t, call, TOO_MANY_ARGUMENTS, \"\");\n      return;\n    }\n    Node arrayLit = new Node(Token.ARRAYLIT);\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      arrayLit.addChildToFront(argument);\n    }\n    Node assignExpr = astFactory.createSingleAssignLhs(Token.NAME, restExpr.getQualifiedName());\n    restExpr.getParent().replaceChild(restExpr, assignExpr);\n    call.addChildToFront(astFactory.createComma(arrayLit, assignExpr));\n    validator.expectArgumentMatchesParameter(t, arrayLit,\n        getJSType(arrayLit), getJSType(restExpr), call, numParams);\n  } else if (numArgs > numParams) {\n    report(t, call, TOO_MANY_ARGUMENTS, \"\");\n  } else if (numArgs < functionType.getMinArguments()) {\n    report(t, call, MISSING_ARGUMENTS, \"\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..1c40b360 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,57 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  List<Node> parameters = functionType.getParameters();\n+  int numParams = parameters.size();\n+  int numArgs = call.getChildCount() - 1;\n+  if (numArgs > numParams && !functionType.hasRestFormals()) {\n+    // If there are more arguments than parameters and the function doesn't\n+    // have rest parameters, it's an error.\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs), String.valueOf(numParams),\n+        \"\");\n+    return;\n+  }\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+  Iterator<Node> paramItr = parameters.iterator();\n+  Node argument;\n+  for (int i = 0; arguments.hasNext() && i < numParams; i++) {\n+    Node parameter = paramItr.next();\n+    argument = arguments.next();\n+    int ordinal = i + 1;\n+\n+    validator.expectArgumentMatchesParameter(t, argument,\n+        getJSType(argument), getJSType(parameter), call, ordinal);\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  if (functionType.hasRestFormals()) {\n+    // Handle rest parameters.\n+    Node restExpr = paramItr.next().getFirstChild();\n+    if (arguments.hasNext()) {\n+      report(t, call, TOO_MANY_ARGUMENTS, \"\");\n+      return;\n+    }\n+    Node arrayLit = new Node(Token.ARRAYLIT);\n+    while (arguments.hasNext()) {\n+      argument = arguments.next();\n+      arrayLit.addChildToFront(argument);\n     }\n+    Node assignExpr = astFactory.createSingleAssignLhs(Token.NAME, restExpr.getQualifiedName());\n+    restExpr.getParent().replaceChild(restExpr, assignExpr);\n+    call.addChildToFront(astFactory.createComma(arrayLit, assignExpr));\n+    validator.expectArgumentMatchesParameter(t, arrayLit,\n+        getJSType(arrayLit), getJSType(restExpr), call, numParams);\n+  } else if (numArgs > numParams) {\n+    report(t, call, TOO_MANY_ARGUMENTS, \"\");\n+  } else if (numArgs < functionType.getMinArguments()) {\n+    report(t, call, MISSING_ARGUMENTS, \"\");\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}