{
    "patch": "        if (m.getColumnDimension() * m.getRowDimension() > Math.pow(10, 6)) {\n            // matrix is too large, use Cholesky decomposition instead\n            CholeskyDecomposition dec = new CholeskyDecomposition(m);\n            return dec.getL();\n        } else {\n            // use EigenDecomposition\n            EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f557699d8 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,13 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n+        if (m.getColumnDimension() * m.getRowDimension() > Math.pow(10, 6)) {\n+            // matrix is too large, use Cholesky decomposition instead\n+            CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+            return dec.getL();\n+        } else {\n+            // use EigenDecomposition\n+            EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n-    }\n+        }\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}