{
    "patch": "private void readTypeVariables() {\n    TypeVariable<?>[] parentTypeVariables = typeVariable.getGenericDeclaration().getTypeParameters();\n    Type actualTypeArgument = null;\n\n    for (Type bound : typeVariable.getBounds()) {\n        if (bound instanceof ParameterizedType) {\n            actualTypeArgument = ((ParameterizedType) bound).getActualTypeArguments()[0];\n            break;\n        } else if (bound instanceof TypeVariable) {\n            TypeVariable<?> typeVariable = (TypeVariable<?>) bound;\n            for (int i = 0; i < parentTypeVariables.length; i++) {\n                if (typeVariable.getName().equals(parentTypeVariables[i].getName())) {\n                    actualTypeArgument = getActualTypeArgumentFor(parentTypeVariables[i]);\n                    break;\n                }\n            }\n\n            if (actualTypeArgument != null) {\n                break;\n            }\n        }\n    }\n\n    if (actualTypeArgument == null) {\n        throw new IllegalStateException(\"Cannot extract an actual type argument for type variable: \" + typeVariable);\n    }\n\n    registerTypeVariablesOn(actualTypeArgument);\n\n    for (Type bound : typeVariable.getBounds()) {\n        registerTypeVariablesOn(bound);\n        if (bound instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) bound;\n            for (Type actualTypeArgumentInBound : parameterizedType.getActualTypeArguments()) {\n                if (actualTypeArgumentInBound instanceof TypeVariable) {\n                    TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgumentInBound;\n                    for (Type actualTypeVariableBound : actualTypeVariable.getBounds()) {\n                        registerTypeVariablesOn(actualTypeVariableBound);\n                    }\n                } else {\n                    registerTypeVariablesOn(actualTypeArgumentInBound);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..67dd03f7e 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,53 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    TypeVariable<?>[] parentTypeVariables = typeVariable.getGenericDeclaration().getTypeParameters();\n+    Type actualTypeArgument = null;\n+\n+    for (Type bound : typeVariable.getBounds()) {\n+        if (bound instanceof ParameterizedType) {\n+            actualTypeArgument = ((ParameterizedType) bound).getActualTypeArguments()[0];\n+            break;\n+        } else if (bound instanceof TypeVariable) {\n+            TypeVariable<?> typeVariable = (TypeVariable<?>) bound;\n+            for (int i = 0; i < parentTypeVariables.length; i++) {\n+                if (typeVariable.getName().equals(parentTypeVariables[i].getName())) {\n+                    actualTypeArgument = getActualTypeArgumentFor(parentTypeVariables[i]);\n+                    break;\n+                }\n+            }\n+\n+            if (actualTypeArgument != null) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    if (actualTypeArgument == null) {\n+        throw new IllegalStateException(\"Cannot extract an actual type argument for type variable: \" + typeVariable);\n+    }\n+\n+    registerTypeVariablesOn(actualTypeArgument);\n+\n+    for (Type bound : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(bound);\n+        if (bound instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) bound;\n+            for (Type actualTypeArgumentInBound : parameterizedType.getActualTypeArguments()) {\n+                if (actualTypeArgumentInBound instanceof TypeVariable) {\n+                    TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgumentInBound;\n+                    for (Type actualTypeVariableBound : actualTypeVariable.getBounds()) {\n+                        registerTypeVariablesOn(actualTypeVariableBound);\n+                    }\n+                } else {\n+                    registerTypeVariablesOn(actualTypeArgumentInBound);\n+                }\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "java.lang.IllegalStateException: Cannot extract an actual type argument for type variable: E",
    "test_result": "FAIL"
}