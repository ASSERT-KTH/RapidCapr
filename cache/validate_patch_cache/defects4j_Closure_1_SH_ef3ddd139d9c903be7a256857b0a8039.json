{
    "patch": ">>> [ INFILL ] <<<\n      int paramCount = 0;\n      for (Node arg : argList.children()) {\n        paramCount++;\n        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n          compiler.reportCodeChange();\n          NodeUtil.removeChild(argList, arg);\n          arg.detach();\n          paramCount--;\n        }\n      }\n      if (NodeUtil.isVarArgsFunction(function)) {\n        Node restArg = argList.getLastChild();\n        if (restArg != null && !referenced.contains(fnScope.getVar(restArg.getString()))) {\n          argList.removeChild(restArg);\n          restArg.detach();\n          paramCount--;\n        }\n      }\n      if (function.isArrowFunction()) {\n        Preconditions.checkState(!function.hasChildren());\n        Preconditions.checkState(function.getParent().isCall());\n        // An arrow function whose body is an expression does not need an\n        // explicit return.\n        function.getParent().putBooleanProp(Node.FREE_CALL, true);\n      }\n      function.putProp(Node.FUNCTION_PARAMETER_COUNT, paramCount);\n>>> [ /INFILL ] <<<",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..401bc24c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,34 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+>>> [ INFILL ] <<<\n+      int paramCount = 0;\n+      for (Node arg : argList.children()) {\n+        paramCount++;\n+        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+          compiler.reportCodeChange();\n+          NodeUtil.removeChild(argList, arg);\n+          arg.detach();\n+          paramCount--;\n+        }\n+      }\n+      if (NodeUtil.isVarArgsFunction(function)) {\n+        Node restArg = argList.getLastChild();\n+        if (restArg != null && !referenced.contains(fnScope.getVar(restArg.getString()))) {\n+          argList.removeChild(restArg);\n+          restArg.detach();\n+          paramCount--;\n+        }\n+      }\n+      if (function.isArrowFunction()) {\n+        Preconditions.checkState(!function.hasChildren());\n+        Preconditions.checkState(function.getParent().isCall());\n+        // An arrow function whose body is an expression does not need an\n+        // explicit return.\n+        function.getParent().putBooleanProp(Node.FREE_CALL, true);\n+      }\n+      function.putProp(Node.FUNCTION_PARAMETER_COUNT, paramCount);\n+>>> [ /INFILL ] <<<\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}