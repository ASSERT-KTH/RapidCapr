{
    "patch": "public String[][] getProperty(String[][] a, String[] b) {\n    String[][] result = new String[b.length][];\n    int j = 0;\n    for (int i = 0; i < a.length; i++) {\n        if (a[i][0].equals(b[j])) {\n            result[j] = Arrays.copyOfRange(a[i], 1, a[i].length);\n            j++;\n            if (j >= b.length) {\n                break;\n            }\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..474d3ecf 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String[][] getProperty(String[][] a, String[] b) {\n+    String[][] result = new String[b.length][];\n+    int j = 0;\n+    for (int i = 0; i < a.length; i++) {\n+        if (a[i][0].equals(b[j])) {\n+            result[j] = Arrays.copyOfRange(a[i], 1, a[i].length);\n+            j++;\n+            if (j >= b.length) {\n+                break;\n+            }\n+        }\n+    }\n+    return result;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}