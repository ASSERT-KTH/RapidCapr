{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n\n    // Register type variables based on bounds\n    for (Type bound : bounds) {\n        registerTypeVariablesOn(bound);\n        if (bound instanceof ParameterizedType) {\n            Type[] actualTypeArguments = ((ParameterizedType) bound).getActualTypeArguments();\n            for (Type actualTypeArgument : actualTypeArguments) {\n                registerTypeVariablesOn(actualTypeArgument);\n            }\n        }\n    }\n\n    // Attempt to extract actual type argument from parent type\n    if (getActualTypeArgumentFor(typeVariable) == null) {\n        TypeVariable<?>[] parentTypeVariables = typeVariable.getGenericDeclaration().getTypeParameters();\n        for (TypeVariable<?> parentTypeVariable : parentTypeVariables) {\n            Type parentType = getActualTypeArgumentFor(parentTypeVariable);\n            if (parentType instanceof ParameterizedType) {\n                Type[] parentTypeArguments = ((ParameterizedType) parentType).getActualTypeArguments();\n                for (int i = 0; i < parentTypeVariables.length; i++) {\n                    TypeVariable<?> typeParameter = parentTypeVariables[i];\n                    Type parentTypeArgument = parentTypeArguments[i];\n                    if (typeParameter.getName().equals(typeVariable.getName())) {\n                        registerTypeVariablesOn(parentTypeArgument);\n                        return;\n                    }\n                }\n            }\n        }\n\n        throw new IllegalStateException(\"Cannot extract an actual type argument for type variable: \" + typeVariable);\n    }\n\n    // Register actual type argument if found\n    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..b8d9b1366 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,45 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+\n+    // Register type variables based on bounds\n+    for (Type bound : bounds) {\n+        registerTypeVariablesOn(bound);\n+        if (bound instanceof ParameterizedType) {\n+            Type[] actualTypeArguments = ((ParameterizedType) bound).getActualTypeArguments();\n+            for (Type actualTypeArgument : actualTypeArguments) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            }\n+        }\n+    }\n+\n+    // Attempt to extract actual type argument from parent type\n+    if (getActualTypeArgumentFor(typeVariable) == null) {\n+        TypeVariable<?>[] parentTypeVariables = typeVariable.getGenericDeclaration().getTypeParameters();\n+        for (TypeVariable<?> parentTypeVariable : parentTypeVariables) {\n+            Type parentType = getActualTypeArgumentFor(parentTypeVariable);\n+            if (parentType instanceof ParameterizedType) {\n+                Type[] parentTypeArguments = ((ParameterizedType) parentType).getActualTypeArguments();\n+                for (int i = 0; i < parentTypeVariables.length; i++) {\n+                    TypeVariable<?> typeParameter = parentTypeVariables[i];\n+                    Type parentTypeArgument = parentTypeArguments[i];\n+                    if (typeParameter.getName().equals(typeVariable.getName())) {\n+                        registerTypeVariablesOn(parentTypeArgument);\n+                        return;\n+                    }\n+                }\n+            }\n+        }\n+\n+        throw new IllegalStateException(\"Cannot extract an actual type argument for type variable: \" + typeVariable);\n+    }\n+\n+    // Register actual type argument if found\n+    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "java.lang.IllegalStateException: Cannot extract an actual type argument for type variable: MC3",
    "test_result": "FAIL"
}