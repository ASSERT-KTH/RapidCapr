{
    "patch": "  private void traverse(Node node) {\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    boolean shouldContinue = true;\n    while (shouldContinue && visits <",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..f6812f3c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -111,31 +111,13 @@ class PeepholeOptimizationsPass\n   }\n \n   private void traverse(Node node) {\n-    // The goal here is to avoid retraversing\n-    // the entire AST to catch newly created opportunities.\n-    // So we track whether a \"unit of code\" has changed,\n-    // and revisit immediately.\n     if (!shouldVisit(node)) {\n       return;\n     }\n \n     int visits = 0;\n-    do {\n-      Node c = node.getFirstChild();\n-      while(c != null) {\n-        traverse(c);\n-        Node next = c.getNext();\n-        c = next;\n-      }\n-\n-      visit(node);\n-      visits++;\n-\n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n-    } while (shouldRetraverse(node));\n-\n-    exitNode(node);\n-  }\n+    boolean shouldContinue = true;\n+    while (shouldContinue && visits <\n \n   private boolean shouldRetraverse(Node node) {\n     if (node.getParent() != null && node.isFunction() || node.isScript()) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}