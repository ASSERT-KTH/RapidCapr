{
    "patch": "    // prototype chain.\n    // So climb the prototype chain and find out where\n    // the property was originally defined if we encounter GETPROP node.\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          // classes\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n        if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType())) {\n          String typeString = objectType.toString();\n          String propNameString = \".\" + propName;\n          if (!propNameString.equals(typeString)) {\n            // Don't show complex function names or anonymous types.\n            // Instead, try to get a human-readable type name.\n            int index = typeString.lastIndexOf(propNameString);\n            if (index >= 0) {\n              return typeString.substring(0, index);\n            } else {\n              return typeString + propNameString;\n            }\n          } else {\n            return typeString;\n          }\n        }\n      }\n    }\n\n    // Handle cases for function types and object types.\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType()) {\n      return type.toString();\n    } else if (type.isObjectType() && type.toObjectType().getConstructor() != null) {\n      String constructorName = type.toObjectType().getConstructor().getDisplayName();\n      if (!constructorName.isEmpty()) {\n        return constructorName;\n      }\n    }\n\n    // Handle remaining cases and return type name.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..f90260bf 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -721,13 +721,9 @@ class TypeValidator {\n    * @param dereference If true, the type of the node will be dereferenced\n    *     to an Object type, if possible.\n    */\n-  String getReadableJSTypeName(Node n, boolean dereference) {\n-\n-    // The best type name is the actual type name.\n-\n-    // If we're analyzing a GETPROP, the property may be inherited by the\n-    // prototype chain. So climb the prototype chain and find out where\n-    // the property was originally defined.\n+    // prototype chain.\n+    // So climb the prototype chain and find out where\n+    // the property was originally defined if we encounter GETPROP node.\n     if (n.isGetProp()) {\n       ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n       if (objectType != null) {\n@@ -742,17 +738,28 @@ class TypeValidator {\n             objectType = objectType.getImplicitPrototype();\n           }\n         }\n-\n-        // Don't show complex function names or anonymous types.\n-        // Instead, try to get a human-readable type name.\n         if (objectType != null &&\n             (objectType.getConstructor() != null ||\n              objectType.isFunctionPrototypeType())) {\n-          return objectType.toString() + \".\" + propName;\n+          String typeString = objectType.toString();\n+          String propNameString = \".\" + propName;\n+          if (!propNameString.equals(typeString)) {\n+            // Don't show complex function names or anonymous types.\n+            // Instead, try to get a human-readable type name.\n+            int index = typeString.lastIndexOf(propNameString);\n+            if (index >= 0) {\n+              return typeString.substring(0, index);\n+            } else {\n+              return typeString + propNameString;\n+            }\n+          } else {\n+            return typeString;\n+          }\n         }\n       }\n     }\n \n+    // Handle cases for function types and object types.\n     JSType type = getJSType(n);\n     if (dereference) {\n       ObjectType dereferenced = type.dereference();\n@@ -760,21 +767,16 @@ class TypeValidator {\n         type = dereferenced;\n       }\n     }\n-    if (type.isFunctionPrototypeType() ||\n-        (type.toObjectType() != null &&\n-         type.toObjectType().getConstructor() != null)) {\n-      return type.toString();\n-    }\n-    String qualifiedName = n.getQualifiedName();\n-    if (qualifiedName != null) {\n-      return qualifiedName;\n-    } else if (type.isFunctionType()) {\n-      // Don't show complex function names.\n-      return \"function\";\n-    } else {\n+    if (type.isFunctionPrototypeType()) {\n       return type.toString();\n+    } else if (type.isObjectType() && type.toObjectType().getConstructor() != null) {\n+      String constructorName = type.toObjectType().getConstructor().getDisplayName();\n+      if (!constructorName.isEmpty()) {\n+        return constructorName;\n+      }\n     }\n-  }\n+\n+    // Handle remaining cases and return type name.\n \n   /**\n    * This method gets the JSType from the Node argument and verifies that it is",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}