{
    "patch": "public static boolean containsAny(String str, char[] chars) {\n    if (str != null && chars != null) {\n        for (int i = 0; i < chars.length; i++) {\n            if (str.indexOf(chars[i]) >= 0) {\n                return true;\n            }\n        }\n        if (Character.MIN_CODE_POINT == 0 && Character.MAX_CODE_POINT == Character.MAX_VALUE) {\n            return false; // no supplementary chars\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; ) {\n            int codePoint = str.codePointAt(i);\n            if (Character.isSupplementaryCodePoint(codePoint)) {\n                for (int j = 0; j < chars.length; j++) {\n                    if (Character.charCount(codePoint) == 2 && j < chars.length - 1) {\n                        int cp = Character.toCodePoint(chars[j], chars[j + 1]);\n                        if (Character.codePointAt(str, i) == cp) {\n                            return true;\n                        }\n                    }\n                    else if (Character.charCount(codePoint) == 1 && chars[j] == str.charAt(i)) {\n                        return true;\n                    }\n                }\n                i += Character.charCount(codePoint);\n            } else {\n                i++;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..552ed3dc 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,39 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] chars) {\n+    if (str != null && chars != null) {\n+        for (int i = 0; i < chars.length; i++) {\n+            if (str.indexOf(chars[i]) >= 0) {\n+                return true;\n+            }\n+        }\n+        if (Character.MIN_CODE_POINT == 0 && Character.MAX_CODE_POINT == Character.MAX_VALUE) {\n+            return false; // no supplementary chars\n+        }\n+        int strLen = str.length();\n+        for (int i = 0; i < strLen; ) {\n+            int codePoint = str.codePointAt(i);\n+            if (Character.isSupplementaryCodePoint(codePoint)) {\n+                for (int j = 0; j < chars.length; j++) {\n+                    if (Character.charCount(codePoint) == 2 && j < chars.length - 1) {\n+                        int cp = Character.toCodePoint(chars[j], chars[j + 1]);\n+                        if (Character.codePointAt(str, i) == cp) {\n+                            return true;\n+                        }\n+                    }\n+                    else if (Character.charCount(codePoint) == 1 && chars[j] == str.charAt(i)) {\n+                        return true;\n+                    }\n+                }\n+                i += Character.charCount(codePoint);\n+            } else {\n+                i++;\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}