{
    "patch": "if (block.isFunction || (block.isLoop && block.exit().isBackEdge())) {\n    // Ignore variables defined only in loops and outer loops with break or continue,\n    // since their lifetime is difficult to analyse.\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..d6e51c08 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,11 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (block.isFunction || (block.isLoop && block.exit().isBackEdge())) {\n+    // Ignore variables defined only in loops and outer loops with break or continue,\n+    // since their lifetime is difficult to analyse.\n+    return false;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}