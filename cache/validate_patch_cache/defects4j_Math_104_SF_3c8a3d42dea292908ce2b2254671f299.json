{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0) {\n        return 0.0;\n    }\n\n    double gamma = LogGamma.logGamma(a);\n    double factor = Math.exp(a * Math.log(x) - x - gamma);\n\n    if (Double.isInfinite(factor)) {\n        return 1.0;\n    }\n\n    double sum = 1.0;\n    double term = 1.0 / a;\n    int i = 1;\n\n    while (term != 0.0) {\n        term *= x / (a + i);\n        sum += term;\n        i++;\n    }\n\n    return sum * factor;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..a1651032e 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,34 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0) {\n+        return 0.0;\n+    }\n+\n+    double gamma = LogGamma.logGamma(a);\n+    double factor = Math.exp(a * Math.log(x) - x - gamma);\n+\n+    if (Double.isInfinite(factor)) {\n+        return 1.0;\n+    }\n+\n+    double sum = 1.0;\n+    double term = 1.0 / a;\n+    int i = 1;\n+\n+    while (term != 0.0) {\n+        term *= x / (a + i);\n+        sum += term;\n+        i++;\n+    }\n+\n+    return sum * factor;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}