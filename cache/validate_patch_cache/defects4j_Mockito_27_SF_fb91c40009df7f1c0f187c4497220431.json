{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n    MockitoFramework framework = (MockitoFramework) new FrameworkFinder().find();\n    MockitoSession session = framework.startMockingSession();\n    try {\n        BDDMockito.BDDMockitoVerificationMode.strict();\n        BDDMockito.BDDMockitoVerificationMode description = BDDMockito.BDDMockitoVerificationMode.description(\"resetMock\");\n        BDDMockito.then(mock).using(description).willAnswer((Answer<T>) invocation -> {\n            session.validateState();\n            Object result = invocation.callRealMethod();\n            return (T) result;\n        });\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings());\n        ((Factory) mock).setCallback(0, newFilter);\n    } catch (Throwable throwable) {\n        framework.getStackTraceFilter().filter(throwable);\n        throw throwable;\n    } finally {\n        session.finishMocking();\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..50daf3fbb 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,29 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n+    MockitoFramework framework = (MockitoFramework) new FrameworkFinder().find();\n+    MockitoSession session = framework.startMockingSession();\n+    try {\n+        BDDMockito.BDDMockitoVerificationMode.strict();\n+        BDDMockito.BDDMockitoVerificationMode description = BDDMockito.BDDMockitoVerificationMode.description(\"resetMock\");\n+        BDDMockito.then(mock).using(description).willAnswer((Answer<T>) invocation -> {\n+            session.validateState();\n+            Object result = invocation.callRealMethod();\n+            return (T) result;\n+        });\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings());\n+        ((Factory) mock).setCallback(0, newFilter);\n+    } catch (Throwable throwable) {\n+        framework.getStackTraceFilter().filter(throwable);\n+        throw throwable;\n+    } finally {\n+        session.finishMocking();\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}