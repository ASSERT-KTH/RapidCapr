{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            int value = values[i];\n            DateTimeField field = partial.getField(i);\n            if (i == fieldIndex) {\n                // add months to month field, adjusting year field if required\n                if (values[i + 1] > 12) {\n                    throw new IllegalArgumentException(\"Adding months to a date created an invalid month-year\");\n                }\n                value = field.addWrapField(instant, valueToAdd);\n            } else if (valueToAdd > 0 && i == fieldIndex - 1 && field.getDurationField().getType() == DurationFieldType.months()) {\n                // push-back if the new value exceeds the actual range for the month\n                int days = field.getDurationField().getField(iChronology).getMaximumValue(instant);\n                if (values[i + 2] > days) {\n                    instant = field.set(instant, values[i] + 1);\n                    instant = iChronology.months().set(instant, values[i + 1]);\n                    instant = iChronology.months().add(instant, valueToAdd);\n                    instant = iChronology.months().add(instant, -1);\n                    days = field.getDurationField().getField(iChronology).getMaximumValue(instant);\n                    value = days;\n                }\n            } else {\n                value = field.addWrapField(instant, value);\n            }\n            instant = field.set(instant, value);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..a488b504 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,45 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            int value = values[i];\n+            DateTimeField field = partial.getField(i);\n+            if (i == fieldIndex) {\n+                // add months to month field, adjusting year field if required\n+                if (values[i + 1] > 12) {\n+                    throw new IllegalArgumentException(\"Adding months to a date created an invalid month-year\");\n+                }\n+                value = field.addWrapField(instant, valueToAdd);\n+            } else if (valueToAdd > 0 && i == fieldIndex - 1 && field.getDurationField().getType() == DurationFieldType.months()) {\n+                // push-back if the new value exceeds the actual range for the month\n+                int days = field.getDurationField().getField(iChronology).getMaximumValue(instant);\n+                if (values[i + 2] > days) {\n+                    instant = field.set(instant, values[i] + 1);\n+                    instant = iChronology.months().set(instant, values[i + 1]);\n+                    instant = iChronology.months().add(instant, valueToAdd);\n+                    instant = iChronology.months().add(instant, -1);\n+                    days = field.getDurationField().getField(iChronology).getMaximumValue(instant);\n+                    value = days;\n+                }\n+            } else {\n+                value = field.addWrapField(instant, value);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            instant = field.set(instant, value);\n         }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}