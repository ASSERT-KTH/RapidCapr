{
    "patch": "    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n\n      // ignore cast nodes\n      if (first.isCast()) {\n        first = first.getFirstChild();\n      }\n\n      while (NodeUtil.isGet(first) && first.getFirstChild().isCast()) {\n        first = first.getFirstChild();\n      }\n\n      if (!NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      if (first.isName()\n          && \"eval\".equals(first.getString())\n          && !n.getBooleanProp(Node.IS_EXPR_RESULT)) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..d279d811 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -162,7 +162,14 @@ class PrepareAst implements CompilerPass {\n       // explicit \"this\" is a free call.\n       Node first = n.getFirstChild();\n \n-      // ignore cast nodes.\n+      // ignore cast nodes\n+      if (first.isCast()) {\n+        first = first.getFirstChild();\n+      }\n+\n+      while (NodeUtil.isGet(first) && first.getFirstChild().isCast()) {\n+        first = first.getFirstChild();\n+      }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);\n@@ -170,8 +177,9 @@ class PrepareAst implements CompilerPass {\n \n       // Keep track of the context in which eval is called. It is important\n       // to distinguish between \"(0, eval)()\" and \"eval()\".\n-      if (first.isName() &&\n-          \"eval\".equals(first.getString())) {\n+      if (first.isName()\n+          && \"eval\".equals(first.getString())\n+          && !n.getBooleanProp(Node.IS_EXPR_RESULT)) {\n         first.putBooleanProp(Node.DIRECT_EVAL, true);\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}