{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    int years = getYears();\n    int months = getMonths();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    long totalMillis = (((long) years) * DateTimeConstants.MILLIS_PER_YEAR) +\n                       (((long) months) * DateTimeConstants.MILLIS_PER_MONTH) +\n                       (((long) weeks()) * DateTimeConstants.MILLIS_PER_WEEK) +\n                       (((long) days) * DateTimeConstants.MILLIS_PER_DAY) +\n                       (((long) hours) * DateTimeConstants.MILLIS_PER_HOUR) +\n                       (((long) minutes) * DateTimeConstants.MILLIS_PER_MINUTE) +\n                       (((long) seconds) * DateTimeConstants.MILLIS_PER_SECOND) +\n                       ((long) millis);\n\n    boolean hasYearsAndMonths = (years != 0 || months != 0) &&\n                                type.isSupported(DurationFieldType.years()) &&\n                                type.isSupported(DurationFieldType.months());\n\n    years += months / 12;\n    months = months % 12;\n\n    if (hasYearsAndMonths) {\n        return new Period(years, months, weeks(), days, hours, minutes, seconds, millis, type);\n    }\n\n    Period period = new Period(totalMillis, type);\n\n    if (type.isSupported(DurationFieldType.weeks())) {\n        int totalDays = weeks() * 7 + days;\n        period = period.withDays(totalDays).withWeeks(0);\n    }\n\n    return period;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..0bbaeedb 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,45 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    int years = getYears();\n+    int months = getMonths();\n+    int days = getDays();\n+    int hours = getHours();\n+    int minutes = getMinutes();\n+    int seconds = getSeconds();\n+    int millis = getMillis();\n+\n+    long totalMillis = (((long) years) * DateTimeConstants.MILLIS_PER_YEAR) +\n+                       (((long) months) * DateTimeConstants.MILLIS_PER_MONTH) +\n+                       (((long) weeks()) * DateTimeConstants.MILLIS_PER_WEEK) +\n+                       (((long) days) * DateTimeConstants.MILLIS_PER_DAY) +\n+                       (((long) hours) * DateTimeConstants.MILLIS_PER_HOUR) +\n+                       (((long) minutes) * DateTimeConstants.MILLIS_PER_MINUTE) +\n+                       (((long) seconds) * DateTimeConstants.MILLIS_PER_SECOND) +\n+                       ((long) millis);\n+\n+    boolean hasYearsAndMonths = (years != 0 || months != 0) &&\n+                                type.isSupported(DurationFieldType.years()) &&\n+                                type.isSupported(DurationFieldType.months());\n+\n+    years += months / 12;\n+    months = months % 12;\n+\n+    if (hasYearsAndMonths) {\n+        return new Period(years, months, weeks(), days, hours, minutes, seconds, millis, type);\n     }\n \n+    Period period = new Period(totalMillis, type);\n+\n+    if (type.isSupported(DurationFieldType.weeks())) {\n+        int totalDays = weeks() * 7 + days;\n+        period = period.withDays(totalDays).withWeeks(0);\n+    }\n+\n+    return period;\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}