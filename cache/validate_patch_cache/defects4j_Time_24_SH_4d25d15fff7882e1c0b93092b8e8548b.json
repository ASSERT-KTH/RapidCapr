{
    "patch": "                // update the base year for parsing\n                int year = iDefaultYear;\n                // if month or day is the first field, set the year to the previous year\n                if (first == months) {\n                    LocalDate date = new LocalDate(millis, iChrono);\n                    year--;\n                    // check if the month is after the current month\n                    if (date.getMonthOfYear() > savedFields[0].iValue) {\n                        year++;\n                    }\n                } else if (first == days) {\n                    LocalDate date = new LocalDate(millis, iChrono);\n                    year--;\n                    // check if the day is after the current day\n                    if (date.getDayOfMonth() > savedFields[0].iValue) {\n                        year++;\n                    }\n                }\n                saveField(DateTimeFieldType.year(), year);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..15b6b6df 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,25 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                // update the base year for parsing\n+                int year = iDefaultYear;\n+                // if month or day is the first field, set the year to the previous year\n+                if (first == months) {\n+                    LocalDate date = new LocalDate(millis, iChrono);\n+                    year--;\n+                    // check if the month is after the current month\n+                    if (date.getMonthOfYear() > savedFields[0].iValue) {\n+                        year++;\n+                    }\n+                } else if (first == days) {\n+                    LocalDate date = new LocalDate(millis, iChrono);\n+                    year--;\n+                    // check if the day is after the current day\n+                    if (date.getDayOfMonth() > savedFields[0].iValue) {\n+                        year++;\n+                    }\n+                }\n+                saveField(DateTimeFieldType.year(), year);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}