{
    "patch": "public static boolean containsAny(CharSequence sequence, char... searchCharacters) {\n  if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n    return false;\n  }\n  if (sequence instanceof String) {\n    final String str = (String) sequence;\n    final int len = sequence.length();\n    final int searchLen = searchCharacters.length;\n    if (searchLen == 1) {\n      final char ch = searchCharacters[0];\n      for (int i = 0; i < len; i++) {\n        if (str.charAt(i) == ch) {\n          return true;\n        }\n      }\n    } else if (searchLen < 4) {\n      // At most 3 characters to search (counting unicode as single characters), use brute force\n      search:\n      for (int i = 0; i < len; i++) {\n        final char ch = str.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n          final char searchChar = searchCharacters[j];\n          if (ch == searchChar) {\n            return true;\n          }\n        }\n      }\n    } else {\n      // For more than 3 characters we use a set\n      final Set<Character> set = new HashSet<>(Arrays.asList(ArrayUtils.toObject(searchCharacters)));\n      for (int i = 0; i < len; i++) {\n        if (set.contains(Character.valueOf(str.charAt(i)))) {\n          return true;\n        }\n      }    \n    }\n  } else {\n    final int len = sequence.length();\n    final int searchLen = searchCharacters.length;\n    if (searchLen == 1) {\n      final char ch = searchCharacters[0];\n      for (int i = 0; i < len; i++) {\n        if (sequence.charAt(i) == ch) {\n          return true;\n        }\n      }\n    } else if (searchLen < 4) {\n      // At most 3 characters to search (counting unicode as single characters), use brute force\n      search:\n      for (int i = 0; i < len; i++) {\n        final char ch = sequence.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n          final char searchChar = searchCharacters[j];\n          if (ch == searchChar) {\n            return true;\n          }\n        }\n      }\n    } else {\n      // For more than 3 characters we use a set\n      final Set<Character> set = new HashSet<>(Arrays.asList(ArrayUtils.toObject(searchCharacters)));\n      for (int i = 0; i < len; i++) {\n        if (set.contains(Character.valueOf(sequence.charAt(i)))) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nprivate static boolean isEmpty(CharSequence cs) {\n  return cs == null || cs.length() == 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..6b712c89 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,80 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence sequence, char... searchCharacters) {\n+  if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n+    return false;\n+  }\n+  if (sequence instanceof String) {\n+    final String str = (String) sequence;\n+    final int len = sequence.length();\n+    final int searchLen = searchCharacters.length;\n+    if (searchLen == 1) {\n+      final char ch = searchCharacters[0];\n+      for (int i = 0; i < len; i++) {\n+        if (str.charAt(i) == ch) {\n+          return true;\n+        }\n+      }\n+    } else if (searchLen < 4) {\n+      // At most 3 characters to search (counting unicode as single characters), use brute force\n+      search:\n+      for (int i = 0; i < len; i++) {\n+        final char ch = str.charAt(i);\n+        for (int j = 0; j < searchLen; j++) {\n+          final char searchChar = searchCharacters[j];\n+          if (ch == searchChar) {\n+            return true;\n+          }\n+        }\n+      }\n+    } else {\n+      // For more than 3 characters we use a set\n+      final Set<Character> set = new HashSet<>(Arrays.asList(ArrayUtils.toObject(searchCharacters)));\n+      for (int i = 0; i < len; i++) {\n+        if (set.contains(Character.valueOf(str.charAt(i)))) {\n+          return true;\n+        }\n+      }    \n+    }\n+  } else {\n+    final int len = sequence.length();\n+    final int searchLen = searchCharacters.length;\n+    if (searchLen == 1) {\n+      final char ch = searchCharacters[0];\n+      for (int i = 0; i < len; i++) {\n+        if (sequence.charAt(i) == ch) {\n+          return true;\n+        }\n+      }\n+    } else if (searchLen < 4) {\n+      // At most 3 characters to search (counting unicode as single characters), use brute force\n+      search:\n+      for (int i = 0; i < len; i++) {\n+        final char ch = sequence.charAt(i);\n+        for (int j = 0; j < searchLen; j++) {\n+          final char searchChar = searchCharacters[j];\n+          if (ch == searchChar) {\n+            return true;\n+          }\n+        }\n+      }\n+    } else {\n+      // For more than 3 characters we use a set\n+      final Set<Character> set = new HashSet<>(Arrays.asList(ArrayUtils.toObject(searchCharacters)));\n+      for (int i = 0; i < len; i++) {\n+        if (set.contains(Character.valueOf(sequence.charAt(i)))) {\n+          return true;\n+        }\n+      }\n+    }\n+  }\n+  return false;\n+}\n+\n+private static boolean isEmpty(CharSequence cs) {\n+  return cs == null || cs.length() == 0;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}