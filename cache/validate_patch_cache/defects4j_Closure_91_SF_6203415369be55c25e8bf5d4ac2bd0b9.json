{
    "patch": "  private boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.isFunction()) {\n      // Don't traverse functions that are constructors.\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsDoc != null && jsDoc.isConstructor()) {\n        return false;\n      }\n\n      // Don't traverse function expressions unless they're assignments\n      // to variables or properties or are in an array/object literal.\n      if (n.getParent() != null && n.getParent().isFunction()) {\n        return false;\n      } else if (NodeUtil.isFunctionExpression(n)) {\n        if (parent == null) {\n          // Function expression is a top-level construct, so ignore it.\n          return false;\n        } else if (parent.isCall() && n == parent.getFirstChild()) {\n          // Function expression is the immediately-invoked function expression\n          // (IIFE) of a larger expression, so ignore it.\n          return false;\n        } else if (parent.isExprResult() || parent.isAssign() || parent.isStringKey()) {\n          if (parent.isAssign() && !parent.getFirstChild().isQualifiedName()) {\n            // The function is being aliased, so ignore it.\n            return false;\n          } else if (!isValidFunctionParent(parent.getParent())) {\n            // Invalid parent for a function expression, so ignore it.\n            return false;\n          }\n        } else {\n          // Invalid parent for a function expression, so ignore it.\n          return false;\n        }\n      } else if (!NodeUtil.isFunctionDeclaration(n)) {\n        // Don't traverse functions that aren't declarations or expressions.\n        return false;\n      }\n    }\n\n    // Don't traverse any 'this' or 'super' expressions.\n    if (n.isThis() || n.isSuper()) {\n      return false;\n    }\n\n    // Don't traverse scopes that are only used for declaring variables,\n    // such as for/for-in/for-of loop initializers and catch clause parameters.\n    if (NodeUtil.isBlockScopedName(n)) {\n      return false;\n    }\n\n    // Don't traverse prototypes or module-scoped variables.\n    if (NodeUtil.isObjectTypeKey(n) || NodeUtil.isModuleExport(n)) {\n      return false;\n    }\n\n    // Don't traverse object literal keys.\n    if (parent != null && parent.isObjectLit()) {\n      return false;\n    }\n\n    // Don't traverse import/export specifiers.\n    return !n.isImportSpec() && !n.isExportSpec();\n  }\n\n  private boolean isValidFunctionParent(Node parent) {\n    if (parent == null) {\n      return false;\n    }\n    int parentType = parent.getType();\n    if (parentType == Token.EXPR_RESULT) {\n      return isValidFunctionParent(parent.getParent());\n    } else if (parentType == Token.VAR) {\n      return true;\n    } else if (parentType == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      if (NodeUtil.isName(lhs)) {\n        return true;\n      }\n      if (NodeUtil.isGet(lhs)) {\n        return isValidFunctionParent(lhs.getFirstChild());\n      }\n    } else if (parentType == Token.FUNCTION) {\n      return true;\n    } else if (parentType == Token.OBJECTLIT) {\n      return true;\n    } else if (parentType == Token.ARRAYLIT) {\n      return true;\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..7e338c7a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,70 +79,94 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+  private boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    if (n.isFunction()) {\n+      // Don't traverse functions that are constructors.\n+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+      if (jsDoc != null && jsDoc.isConstructor()) {\n         return false;\n       }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+      // Don't traverse function expressions unless they're assignments\n+      // to variables or properties or are in an array/object literal.\n+      if (n.getParent() != null && n.getParent().isFunction()) {\n         return false;\n-      }\n-\n-      // Don't traverse functions that are getting lent to a prototype.\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n+      } else if (NodeUtil.isFunctionExpression(n)) {\n+        if (parent == null) {\n+          // Function expression is a top-level construct, so ignore it.\n+          return false;\n+        } else if (parent.isCall() && n == parent.getFirstChild()) {\n+          // Function expression is the immediately-invoked function expression\n+          // (IIFE) of a larger expression, so ignore it.\n+          return false;\n+        } else if (parent.isExprResult() || parent.isAssign() || parent.isStringKey()) {\n+          if (parent.isAssign() && !parent.getFirstChild().isQualifiedName()) {\n+            // The function is being aliased, so ignore it.\n             return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n+          } else if (!isValidFunctionParent(parent.getParent())) {\n+            // Invalid parent for a function expression, so ignore it.\n             return false;\n           }\n+        } else {\n+          // Invalid parent for a function expression, so ignore it.\n+          return false;\n         }\n+      } else if (!NodeUtil.isFunctionDeclaration(n)) {\n+        // Don't traverse functions that aren't declarations or expressions.\n+        return false;\n       }\n     }\n \n-    return true;\n+    // Don't traverse any 'this' or 'super' expressions.\n+    if (n.isThis() || n.isSuper()) {\n+      return false;\n+    }\n+\n+    // Don't traverse scopes that are only used for declaring variables,\n+    // such as for/for-in/for-of loop initializers and catch clause parameters.\n+    if (NodeUtil.isBlockScopedName(n)) {\n+      return false;\n+    }\n+\n+    // Don't traverse prototypes or module-scoped variables.\n+    if (NodeUtil.isObjectTypeKey(n) || NodeUtil.isModuleExport(n)) {\n+      return false;\n+    }\n+\n+    // Don't traverse object literal keys.\n+    if (parent != null && parent.isObjectLit()) {\n+      return false;\n+    }\n+\n+    // Don't traverse import/export specifiers.\n+    return !n.isImportSpec() && !n.isExportSpec();\n+  }\n+\n+  private boolean isValidFunctionParent(Node parent) {\n+    if (parent == null) {\n+      return false;\n+    }\n+    int parentType = parent.getType();\n+    if (parentType == Token.EXPR_RESULT) {\n+      return isValidFunctionParent(parent.getParent());\n+    } else if (parentType == Token.VAR) {\n+      return true;\n+    } else if (parentType == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      if (NodeUtil.isName(lhs)) {\n+        return true;\n+      }\n+      if (NodeUtil.isGet(lhs)) {\n+        return isValidFunctionParent(lhs.getFirstChild());\n+      }\n+    } else if (parentType == Token.FUNCTION) {\n+      return true;\n+    } else if (parentType == Token.OBJECTLIT) {\n+      return true;\n+    } else if (parentType == Token.ARRAYLIT) {\n+      return true;\n+    }\n+    return false;\n   }\n \n   public void visit(NodeTraversal t, Node n, Node parent) {",
    "result_reason": "error: shouldTraverse(NodeTraversal,Node,Node) in CheckGlobalThis cannot implement shouldTraverse(NodeTraversal,Node,Node) in Callback",
    "test_result": "ERROR"
}