{
    "patch": "public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n        UnivariateRealFunction polynomial = null;\n        PolynomialFunction derivative = null;\n        for (int i = 0; i < n; ++i) {\n\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            if (g0Positive ^ (gb >= 0)) {\n\n                final double gaSave = ga;\n                final int signChangeIndex = i;\n\n                tb -= h;\n                interpolator.setInterpolatedTime(tb);\n\n                final double eps = convergence * 0.01;\n                final double hi = (tb - ta) / (signChangeIndex + 1);\n                double tj = ta;\n                double gj = gaSave;\n                for (int j = 0; j <= signChangeIndex; ++j) {\n\n                    final double tjph = tj + hi;\n                    interpolator.setInterpolatedTime(tjph);\n                    final double gjph = handler.g(tjph, interpolator.getInterpolatedState());\n                    if (((Math.abs(pendingEventTime - tj) <= eps) ||\n                         (tj >= t1 - 0.5 * convergence)) &&\n                                                 (Math.abs(gj) <= convergence) &&\n                                                 (Math.abs(gjph) <= convergence)) {\n                        // This may happen, but it means we have not really found an event.\n                        // It could occur in rare circumstances (very steep event function plus\n                        // too large tolerance leading to miss the root by too much for example).\n                        // So we consider that we have found no event.\n                        pendingEventTime = Double.NaN;\n                        pendingEventType = null;\n                    }\n\n                    if ((j < signChangeIndex) && (gj * gjph <= 0.0)) {\n                        // polynomial interpolation of degree 1 (i.e. linear)\n                        polynomial = LinearInterpolator.instance.interpolate(\n                                new double[]{tj, tjph},\n                                new double[]{gj, gjph});\n\n                        derivative = new PolynomialFunction(new double[]{polynomial.derivative(1), polynomial.getValue(tj)});\n\n                        if (Math.abs(derivative.getRealRoots()[0] - tj - hi) > convergence) {\n                            // polynomial interpolation did not converge,\n                            // do not trust the root and stop here\n                            ga = gj;\n                            break;\n                        } else {\n                            // event found through polynomial interpolation\n                            pendingEventTime = derivative.getRealRoots()[0];\n                            pendingEventType = increasing ? increasingEventType : decreasingEventType;\n                            if (pendingEvent && (Math.abs(pendingEventTime - t1) <= convergence)) {\n                                // we were already waiting for this event which was found during a previous\n                                // call for a step that was rejected, the current step must now be accepted\n                                // since it properly ends exactly at the event occurrence, except if the\n                                // step overflows the target time\n                                return (tb >= t1 - convergence);\n                            }\n\n                            // set the state and time of the event\n                            pendingEvent = true;\n                            return true;\n                        }\n                    }\n\n                    tj = tjph;\n                    gj = gjph;\n\n                }\n\n                if (!pendingEvent && (Math.abs(tb - t1) <= convergence) &&\n                    (pendingEventType != null) &&\n                    (((pendingEventType == increasing) && (gb >= gaSave)) ||\n                     ((pendingEventType == decreasing) && (gb <= gaSave)))) {\n                    // we have missed the event which was supposed to happen exactly at t1\n                    pendingEventTime = t1;\n                    return true;\n                }\n\n                ga = gb;\n\n            } else {\n                // no sign change, check if the event is still pending\n                if (!Double.isNaN(pendingEventTime) && !pendingEvent &&\n                    (Math.abs(tb - pendingEventTime) <= convergence) &&\n                    (((increasing && (gb >= ga)) || (!increasing && (gb <= ga)))) &&\n                    ((pendingEventType == null) ||\n                     ((pendingEventType == increasing) && (gb >= g0)) ||\n                     ((pendingEventType == decreasing) && (gb <= g0)))) {\n                    // the event triggers exactly at the end of the step once it has been identified,\n                    // we must trigger it now\n                    pendingEvent = true;\n                    return true;\n                }\n\n                ta = tb;\n                ga = gb;\n\n            }\n\n        }\n\n        // No event during the whole step\n        if (!Double.isNaN(pendingEventTime) && !pendingEvent &&\n            (Math.abs(tb - pendingEventTime) <= convergence) &&\n            (Math.abs(ga) <= convergence)) {\n            // the event triggers exactly at the end of the step once it has been identified,\n            // we must trigger it now\n            pendingEvent = true;\n            return true;\n        }\n        pendingEvent     = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if ((cause != null) && (cause instanceof DerivativeException)) {\n            throw (DerivativeException) cause;\n        } else if ((cause != null) && (cause instanceof EventException)) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..fb941e465 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,104 +164,149 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n+public boolean evaluateStep(final StepInterpolator interpolator)\n         throws DerivativeException, EventException, ConvergenceException {\n \n-        try {\n+    try {\n \n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n+        forward = interpolator.isForward();\n+        final double t1 = interpolator.getCurrentTime();\n+        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n+        final double h = (t1 - t0) / n;\n \n-            double ta = t0;\n-            double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n+        double ta = t0;\n+        double ga = g0;\n+        double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n+        UnivariateRealFunction polynomial = null;\n+        PolynomialFunction derivative = null;\n+        for (int i = 0; i < n; ++i) {\n \n-                // evaluate handler value at the end of the substep\n-                tb += h;\n+            tb += h;\n+            interpolator.setInterpolatedTime(tb);\n+            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n+\n+            if (g0Positive ^ (gb >= 0)) {\n+\n+                final double gaSave = ga;\n+                final int signChangeIndex = i;\n+\n+                tb -= h;\n                 interpolator.setInterpolatedTime(tb);\n-                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n-\n-                // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n-                    // there is a sign change: an event is expected during this step\n-\n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n-                    // variation direction, with respect to the integration direction\n-                    increasing = gb >= ga;\n-\n-                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n-                        public double value(final double t) throws FunctionEvaluationException {\n-                            try {\n-                                interpolator.setInterpolatedTime(t);\n-                                return handler.g(t, interpolator.getInterpolatedState());\n-                            } catch (DerivativeException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            } catch (EventException e) {\n-                                throw new FunctionEvaluationException(e, t);\n+\n+                final double eps = convergence * 0.01;\n+                final double hi = (tb - ta) / (signChangeIndex + 1);\n+                double tj = ta;\n+                double gj = gaSave;\n+                for (int j = 0; j <= signChangeIndex; ++j) {\n+\n+                    final double tjph = tj + hi;\n+                    interpolator.setInterpolatedTime(tjph);\n+                    final double gjph = handler.g(tjph, interpolator.getInterpolatedState());\n+                    if (((Math.abs(pendingEventTime - tj) <= eps) ||\n+                         (tj >= t1 - 0.5 * convergence)) &&\n+                                                 (Math.abs(gj) <= convergence) &&\n+                                                 (Math.abs(gjph) <= convergence)) {\n+                        // This may happen, but it means we have not really found an event.\n+                        // It could occur in rare circumstances (very steep event function plus\n+                        // too large tolerance leading to miss the root by too much for example).\n+                        // So we consider that we have found no event.\n+                        pendingEventTime = Double.NaN;\n+                        pendingEventType = null;\n+                    }\n+\n+                    if ((j < signChangeIndex) && (gj * gjph <= 0.0)) {\n+                        // polynomial interpolation of degree 1 (i.e. linear)\n+                        polynomial = LinearInterpolator.instance.interpolate(\n+                                new double[]{tj, tjph},\n+                                new double[]{gj, gjph});\n+\n+                        derivative = new PolynomialFunction(new double[]{polynomial.derivative(1), polynomial.getValue(tj)});\n+\n+                        if (Math.abs(derivative.getRealRoots()[0] - tj - hi) > convergence) {\n+                            // polynomial interpolation did not converge,\n+                            // do not trust the root and stop here\n+                            ga = gj;\n+                            break;\n+                        } else {\n+                            // event found through polynomial interpolation\n+                            pendingEventTime = derivative.getRealRoots()[0];\n+                            pendingEventType = increasing ? increasingEventType : decreasingEventType;\n+                            if (pendingEvent && (Math.abs(pendingEventTime - t1) <= convergence)) {\n+                                // we were already waiting for this event which was found during a previous\n+                                // call for a step that was rejected, the current step must now be accepted\n+                                // since it properly ends exactly at the event occurrence, except if the\n+                                // step overflows the target time\n+                                return (tb >= t1 - convergence);\n                             }\n+\n+                            // set the state and time of the event\n+                            pendingEvent = true;\n+                            return true;\n                         }\n-                    };\n-                    final BrentSolver solver = new BrentSolver();\n-                    solver.setAbsoluteAccuracy(convergence);\n-                    solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n-                        pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n-                        }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n-                        pendingEvent = true;\n-                        return true;\n                     }\n \n-                } else {\n-                    // no sign change: there is no event for now\n-                    ta = tb;\n-                    ga = gb;\n+                    tj = tjph;\n+                    gj = gjph;\n+\n                 }\n \n-            }\n+                if (!pendingEvent && (Math.abs(tb - t1) <= convergence) &&\n+                    (pendingEventType != null) &&\n+                    (((pendingEventType == increasing) && (gb >= gaSave)) ||\n+                     ((pendingEventType == decreasing) && (gb <= gaSave)))) {\n+                    // we have missed the event which was supposed to happen exactly at t1\n+                    pendingEventTime = t1;\n+                    return true;\n+                }\n \n-            // no event during the whole step\n-            pendingEvent     = false;\n-            pendingEventTime = Double.NaN;\n-            return false;\n+                ga = gb;\n+\n+            } else {\n+                // no sign change, check if the event is still pending\n+                if (!Double.isNaN(pendingEventTime) && !pendingEvent &&\n+                    (Math.abs(tb - pendingEventTime) <= convergence) &&\n+                    (((increasing && (gb >= ga)) || (!increasing && (gb <= ga)))) &&\n+                    ((pendingEventType == null) ||\n+                     ((pendingEventType == increasing) && (gb >= g0)) ||\n+                     ((pendingEventType == decreasing) && (gb <= g0)))) {\n+                    // the event triggers exactly at the end of the step once it has been identified,\n+                    // we must trigger it now\n+                    pendingEvent = true;\n+                    return true;\n+                }\n+\n+                ta = tb;\n+                ga = gb;\n \n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n             }\n-            throw new EventException(e);\n+\n         }\n \n+        // No event during the whole step\n+        if (!Double.isNaN(pendingEventTime) && !pendingEvent &&\n+            (Math.abs(tb - pendingEventTime) <= convergence) &&\n+            (Math.abs(ga) <= convergence)) {\n+            // the event triggers exactly at the end of the step once it has been identified,\n+            // we must trigger it now\n+            pendingEvent = true;\n+            return true;\n+        }\n+        pendingEvent     = false;\n+        pendingEventTime = Double.NaN;\n+        return false;\n+\n+    } catch (FunctionEvaluationException e) {\n+        final Throwable cause = e.getCause();\n+        if ((cause != null) && (cause instanceof DerivativeException)) {\n+            throw (DerivativeException) cause;\n+        } else if ((cause != null) && (cause instanceof EventException)) {\n+            throw (EventException) cause;\n+        }\n+        throw new EventException(e);\n     }\n \n+}\n+\n     /** Get the occurrence time of the event triggered in the current\n      * step.\n      * @return occurrence time of the event triggered in the current",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}