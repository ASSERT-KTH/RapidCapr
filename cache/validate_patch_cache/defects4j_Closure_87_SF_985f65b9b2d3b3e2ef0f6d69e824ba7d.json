{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // Check if child node is an EXPR_RESULT\n      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n        maybeExpr = maybeExpr.getFirstChild();\n\n        // Check if child of EXPR_RESULT is an expression node\n        if (NodeUtil.isExpressionNode(maybeExpr)) {\n          return false;\n        }\n      } else if (maybeExpr.getType() == Token.IF) {\n        Node condition = maybeExpr.getFirstChild();\n        Node thenBranch = condition.getNext();\n        Node elseBranch = thenBranch.getNext();\n        if (isExpressionNodeInConditional(thenBranch)\n            || (elseBranch != null && isExpressionNodeInConditional(elseBranch))\n            || !NodeUtil.mayHaveSideEffects(condition)) {\n          return false;\n        }\n      } else {\n        // Check if child node is an expression node\n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n  }\n  return false;\n}\n\nprivate boolean isExpressionNodeInConditional(Node conditional) {\n  if (conditional.getType() == Token.BLOCK) {\n    Node child = conditional.getFirstChild();\n    while (child != null) {\n      if (NodeUtil.isExpressionNode(child)) {\n        return true;\n      }\n      child = child.getNext();\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..b2d89492 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,49 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // Check if child node is an EXPR_RESULT\n+      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+        maybeExpr = maybeExpr.getFirstChild();\n+\n+        // Check if child of EXPR_RESULT is an expression node\n+        if (NodeUtil.isExpressionNode(maybeExpr)) {\n+          return false;\n+        }\n+      } else if (maybeExpr.getType() == Token.IF) {\n+        Node condition = maybeExpr.getFirstChild();\n+        Node thenBranch = condition.getNext();\n+        Node elseBranch = thenBranch.getNext();\n+        if (isExpressionNodeInConditional(thenBranch)\n+            || (elseBranch != null && isExpressionNodeInConditional(elseBranch))\n+            || !NodeUtil.mayHaveSideEffects(condition)) {\n+          return false;\n+        }\n+      } else {\n+        // Check if child node is an expression node\n+        return NodeUtil.isExpressionNode(maybeExpr);\n       }\n     }\n+  }\n+  return false;\n+}\n \n-    return false;\n+private boolean isExpressionNodeInConditional(Node conditional) {\n+  if (conditional.getType() == Token.BLOCK) {\n+    Node child = conditional.getFirstChild();\n+    while (child != null) {\n+      if (NodeUtil.isExpressionNode(child)) {\n+        return true;\n+      }\n+      child = child.getNext();\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}