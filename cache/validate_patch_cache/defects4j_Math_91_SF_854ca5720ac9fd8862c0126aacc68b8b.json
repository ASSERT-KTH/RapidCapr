{
    "patch": "public int compareTo(Fraction object) {\n    if (this == object) {\n        return 0;\n    }\n    \n    int lcm = lcm(this.denominator, object.denominator);\n    int thisNumerator = this.numerator * (lcm / this.denominator);\n    int otherNumerator = object.numerator * (lcm / object.denominator);\n    \n    if (thisNumerator < otherNumerator) {\n        return -1;\n    } else if (thisNumerator > otherNumerator) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nprivate int lcm(int a, int b) {\n    return a * b / gcd(a, b);\n}\n\nprivate int gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/fraction/Fraction.java b/src/java/org/apache/commons/math/fraction/Fraction.java\nindex 0706f8c41..ecc338dae 100644\n--- a/src/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/java/org/apache/commons/math/fraction/Fraction.java\n@@ -255,12 +255,37 @@ public class Fraction extends Number implements Comparable<Fraction> {\n      * @return -1 if this is less than <tt>object</tt>, +1 if this is greater\n      *         than <tt>object</tt>, 0 if they are equal.\n      */\n-    public int compareTo(Fraction object) {\n-        double nOd = doubleValue();\n-        double dOn = object.doubleValue();\n-        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n+public int compareTo(Fraction object) {\n+    if (this == object) {\n+        return 0;\n     }\n     \n+    int lcm = lcm(this.denominator, object.denominator);\n+    int thisNumerator = this.numerator * (lcm / this.denominator);\n+    int otherNumerator = object.numerator * (lcm / object.denominator);\n+    \n+    if (thisNumerator < otherNumerator) {\n+        return -1;\n+    } else if (thisNumerator > otherNumerator) {\n+        return 1;\n+    } else {\n+        return 0;\n+    }\n+}\n+\n+private int lcm(int a, int b) {\n+    return a * b / gcd(a, b);\n+}\n+\n+private int gcd(int a, int b) {\n+    while (b != 0) {\n+        int temp = b;\n+        b = a % b;\n+        a = temp;\n+    }\n+    return a;\n+}\n+    \n     /**\n      * Gets the fraction as a <tt>double</tt>. This calculates the fraction as\n      * the numerator divided by denominator.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}