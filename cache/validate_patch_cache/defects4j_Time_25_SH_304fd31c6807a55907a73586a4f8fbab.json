{
    "patch": "else {\n    // if we just return offsetAdjusted then the time is pushed\n    // back before the transition, whereas it should be on or after\n    // the transition\n    long nextLocal = nextTransition(instantLocal);\n    long nextAdjusted = nextTransition(instantAdjusted);\n    if (nextLocal == instantLocal || nextAdjusted == instantAdjusted) {\n        return offsetLocal;\n    }\n    int offsetNextLocal = getOffset(nextLocal);\n    int offsetNextAdjusted = getOffset(nextAdjusted);\n    if (offsetNextLocal == offsetLocal) {\n        if (offsetNextAdjusted == offsetAdjusted) {\n            return offsetLocal;\n        }\n        return offsetAdjusted;\n    }\n    return offsetLocal;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3b33bb99 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+else {\n+    // if we just return offsetAdjusted then the time is pushed\n+    // back before the transition, whereas it should be on or after\n+    // the transition\n+    long nextLocal = nextTransition(instantLocal);\n+    long nextAdjusted = nextTransition(instantAdjusted);\n+    if (nextLocal == instantLocal || nextAdjusted == instantAdjusted) {\n+        return offsetLocal;\n+    }\n+    int offsetNextLocal = getOffset(nextLocal);\n+    int offsetNextAdjusted = getOffset(nextAdjusted);\n+    if (offsetNextLocal == offsetLocal) {\n+        if (offsetNextAdjusted == offsetAdjusted) {\n+            return offsetLocal;\n+        }\n+        return offsetAdjusted;\n+    }\n+    return offsetLocal;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}