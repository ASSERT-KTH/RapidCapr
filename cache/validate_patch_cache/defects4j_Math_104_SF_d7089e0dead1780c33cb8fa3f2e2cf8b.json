{
    "patch": "public double regularizedGamma(double a, double x){\n    final double epsilon = 1.0e-15;\n    final int maxIterations = 1000;\n\n    if (a <= 0.0){\n        throw new IllegalArgumentException(\"a must be positive.\");\n    }\n    if (x < 0.0){\n        throw new IllegalArgumentException(\"x must be non-negative.\");\n    }\n\n    if (x == 0.0){\n        return 0.0;\n    }else if (x >= a + 1.0){\n        double sum = 1.0;\n        double term = 1.0;\n        for (int i = 1; i <= maxIterations; i++){\n            term *= x / (a + i);\n            sum += term;\n            if (Math.abs(term) < epsilon * Math.abs(sum)){\n                return 1.0 - Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum / a;\n            }\n        }\n        throw new ArithmeticException(\"Max iterations exceeded.\");\n    }else{\n        double sum = 0.0;\n        double term = 1.0 / a;\n        for (int i = 1; i <= maxIterations; i++){\n            sum += term;\n            term *= x / (a + i);\n            if (Math.abs(term) < epsilon * Math.abs(sum)){\n                return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n            }\n        }\n        throw new ArithmeticException(\"Max iterations exceeded.\");\n    }\n}\n\nprivate double logGamma(double x){\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1)\n            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..55ac2eadc 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,51 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public double regularizedGamma(double a, double x){\n+    final double epsilon = 1.0e-15;\n+    final int maxIterations = 1000;\n+\n+    if (a <= 0.0){\n+        throw new IllegalArgumentException(\"a must be positive.\");\n+    }\n+    if (x < 0.0){\n+        throw new IllegalArgumentException(\"x must be non-negative.\");\n+    }\n+\n+    if (x == 0.0){\n+        return 0.0;\n+    }else if (x >= a + 1.0){\n+        double sum = 1.0;\n+        double term = 1.0;\n+        for (int i = 1; i <= maxIterations; i++){\n+            term *= x / (a + i);\n+            sum += term;\n+            if (Math.abs(term) < epsilon * Math.abs(sum)){\n+                return 1.0 - Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum / a;\n+            }\n+        }\n+        throw new ArithmeticException(\"Max iterations exceeded.\");\n+    }else{\n+        double sum = 0.0;\n+        double term = 1.0 / a;\n+        for (int i = 1; i <= maxIterations; i++){\n+            sum += term;\n+            term *= x / (a + i);\n+            if (Math.abs(term) < epsilon * Math.abs(sum)){\n+                return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+            }\n+        }\n+        throw new ArithmeticException(\"Max iterations exceeded.\");\n+    }\n+}\n+\n+private double logGamma(double x){\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1)\n+            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n+            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}