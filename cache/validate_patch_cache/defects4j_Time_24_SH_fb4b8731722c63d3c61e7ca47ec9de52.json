{
    "patch": "        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n\n            // ensure all the fields are internally consistent\n            for (int i = 0; i < count; i++) {\n                SavedField save = savedFields[i];\n                DateTimeField field = save.iField;\n                field.verifyValueBounds(save.iValue, save.iText);\n                for (int j = 0; j < i; j++) {\n                    if (save.iField == savedFields[j].iField) {\n                        throw new IllegalArgumentException(\"Duplicate field: \" + field);\n                    }\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..b35b4cb5 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,28 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+\n+            // ensure all the fields are internally consistent\n+            for (int i = 0; i < count; i++) {\n+                SavedField save = savedFields[i];\n+                DateTimeField field = save.iField;\n+                field.verifyValueBounds(save.iValue, save.iText);\n+                for (int j = 0; j < i; j++) {\n+                    if (save.iField == savedFields[j].iField) {\n+                        throw new IllegalArgumentException(\"Duplicate field: \" + field);\n+                    }\n+                }\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}