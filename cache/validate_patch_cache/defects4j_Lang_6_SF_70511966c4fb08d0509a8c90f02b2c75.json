{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char[] c = Character.toChars(Character.codePointAt(input, pos));\n            out.write(c);\n            pos += c.length;\n            continue;\n        }\n        pos = handleBackspace(input, out, pos, consumed);\n        for (int pt = 0; pt < consumed; pt++) {\n            pos += Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}\n\nprivate int handleBackspace(CharSequence input, Writer out, int pos, int consumed) throws IOException {\n    int backspaceCount = 0;\n    StringBuilder outputBuilder = new StringBuilder(consumed);\n    for (int pt = 0; pt < consumed; pt++) {\n        int codePoint = Character.codePointAt(input, pos + pt);\n        if (codePoint == '\\b') {\n            backspaceCount++;\n        } else if (isControlCharacter(codePoint)) {\n            throw new IllegalArgumentException(\"Invalid input character at position \" + (pos + pt));\n        } else {\n            outputBuilder.appendCodePoint(codePoint);\n        }\n    }\n    // handle backspace character(s) by moving the writer position back\n    if (backspaceCount > 0) {\n        int backspacesHandled = 0;\n        int outputLength = outputBuilder.length();\n        for (int pt = outputLength - 1; pt >= 0 && backspacesHandled < backspaceCount; pt--) {\n            int codePoint = outputBuilder.codePointAt(pt);\n            if (codePoint == '\\b') {\n                backspacesHandled++;\n            } else {\n                outputBuilder.deleteCharAt(pt);\n            }\n        }\n        // write the modified string to the writer\n        out.write(outputBuilder.toString());\n        // adjust the position\n        pos += (consumed - backspaceCount + backspacesHandled);\n    } else {\n        out.write(outputBuilder.toString());\n        pos += consumed;\n    }\n    return pos;\n}\n\nprivate boolean isControlCharacter(int codePoint) {\n    return Character.getType(codePoint) == Character.CONTROL;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..02722070 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,69 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int consumed = translate(input, pos, out);\n+        if (consumed == 0) {\n+            char[] c = Character.toChars(Character.codePointAt(input, pos));\n+            out.write(c);\n+            pos += c.length;\n+            continue;\n         }\n-        if (input == null) {\n-            return;\n+        pos = handleBackspace(input, out, pos, consumed);\n+        for (int pt = 0; pt < consumed; pt++) {\n+            pos += Character.charCount(Character.codePointAt(input, pos));\n         }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+    }\n+}\n+\n+private int handleBackspace(CharSequence input, Writer out, int pos, int consumed) throws IOException {\n+    int backspaceCount = 0;\n+    StringBuilder outputBuilder = new StringBuilder(consumed);\n+    for (int pt = 0; pt < consumed; pt++) {\n+        int codePoint = Character.codePointAt(input, pos + pt);\n+        if (codePoint == '\\b') {\n+            backspaceCount++;\n+        } else if (isControlCharacter(codePoint)) {\n+            throw new IllegalArgumentException(\"Invalid input character at position \" + (pos + pt));\n+        } else {\n+            outputBuilder.appendCodePoint(codePoint);\n+        }\n+    }\n+    // handle backspace character(s) by moving the writer position back\n+    if (backspaceCount > 0) {\n+        int backspacesHandled = 0;\n+        int outputLength = outputBuilder.length();\n+        for (int pt = outputLength - 1; pt >= 0 && backspacesHandled < backspaceCount; pt--) {\n+            int codePoint = outputBuilder.codePointAt(pt);\n+            if (codePoint == '\\b') {\n+                backspacesHandled++;\n+            } else {\n+                outputBuilder.deleteCharAt(pt);\n             }\n         }\n+        // write the modified string to the writer\n+        out.write(outputBuilder.toString());\n+        // adjust the position\n+        pos += (consumed - backspaceCount + backspacesHandled);\n+    } else {\n+        out.write(outputBuilder.toString());\n+        pos += consumed;\n     }\n+    return pos;\n+}\n+\n+private boolean isControlCharacter(int codePoint) {\n+    return Character.getType(codePoint) == Character.CONTROL;\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "java.lang.StringIndexOutOfBoundsException: String index out of range: 8",
    "test_result": "FAIL"
}