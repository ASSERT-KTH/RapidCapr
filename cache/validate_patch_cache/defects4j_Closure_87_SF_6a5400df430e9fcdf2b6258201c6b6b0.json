{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    Node child = n.getFirstChild();\n    boolean hasAssignment = false;\n    while (child != null) {\n      int childType = child.getType();\n      if (childType == Token.VAR || childType == Token.FUNCTION || childType == Token.CLASS) {\n        return false;\n      } else if (childType == Token.EXPR_RESULT) {\n        hasAssignment = true;\n        Node grandChild = child.getFirstChild();\n        if (grandChild != null && grandChild.getType() != Token.NAME) {\n          return false;\n        }\n      } else if (childType == Token.BLOCK) {\n        if (!isFoldableExpressBlock(child)) {\n          return false;\n        }\n      }\n      child = child.getNext();\n    }\n    return !hasAssignment;\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..19bcea6c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,31 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    Node child = n.getFirstChild();\n+    boolean hasAssignment = false;\n+    while (child != null) {\n+      int childType = child.getType();\n+      if (childType == Token.VAR || childType == Token.FUNCTION || childType == Token.CLASS) {\n+        return false;\n+      } else if (childType == Token.EXPR_RESULT) {\n+        hasAssignment = true;\n+        Node grandChild = child.getFirstChild();\n+        if (grandChild != null && grandChild.getType() != Token.NAME) {\n+          return false;\n+        }\n+      } else if (childType == Token.BLOCK) {\n+        if (!isFoldableExpressBlock(child)) {\n+          return false;\n+        }\n       }\n+      child = child.getNext();\n     }\n-\n-    return false;\n+    return !hasAssignment;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}