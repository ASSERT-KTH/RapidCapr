{
    "patch": "if (n.isFunction()) {\n  // Don't traverse functions that are constructors or have the @this\n  // or @override annotation.\n  JSDocInfo jsDoc = n.getJSDocInfo();\n  if (jsDoc != null &&\n      (jsDoc.isConstructor() ||\n       jsDoc.isInterface() ||\n       jsDoc.hasThisType() ||\n       jsDoc.isOverride())) {\n    return false;\n  }\n\n  // Don't traverse function expressions that may have side effects or whose\n  // parent is getting assigned to a prototype.\n  if (NodeUtil.isFunctionExpression(n)) {\n    if (NodeUtil.mayHaveSideEffects(n)) {\n      return false;\n    }\n    if (parent != null && parent.isAssign()) {\n      Node lhs = parent.getFirstChild();\n      if (isPrototypeProperty(lhs)) {\n        return false;\n      }\n    }\n  }\n\n  // Don't traverse functions that are not assigned to a name or a property of an\n  // object or prototype.\n  if (parent == null) {\n    return false;\n  }\n  int parentType = parent.getType();\n  if (parentType != Token.NAME &&\n      parentType != Token.GETPROP &&\n      parentType != Token.BLOCK &&\n      parentType != Token.SCRIPT) {\n    return false;\n  }\n\n  // Don't traverse function names in statement positions.\n  if (parentType == Token.NAME && parent.getFirstChild() != n) {\n    return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..f2ccd51e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,50 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+if (n.isFunction()) {\n+  // Don't traverse functions that are constructors or have the @this\n+  // or @override annotation.\n+  JSDocInfo jsDoc = n.getJSDocInfo();\n+  if (jsDoc != null &&\n+      (jsDoc.isConstructor() ||\n+       jsDoc.isInterface() ||\n+       jsDoc.hasThisType() ||\n+       jsDoc.isOverride())) {\n+    return false;\n+  }\n+\n+  // Don't traverse function expressions that may have side effects or whose\n+  // parent is getting assigned to a prototype.\n+  if (NodeUtil.isFunctionExpression(n)) {\n+    if (NodeUtil.mayHaveSideEffects(n)) {\n+      return false;\n+    }\n+    if (parent != null && parent.isAssign()) {\n+      Node lhs = parent.getFirstChild();\n+      if (isPrototypeProperty(lhs)) {\n+        return false;\n+      }\n+    }\n+  }\n+\n+  // Don't traverse functions that are not assigned to a name or a property of an\n+  // object or prototype.\n+  if (parent == null) {\n+    return false;\n+  }\n+  int parentType = parent.getType();\n+  if (parentType != Token.NAME &&\n+      parentType != Token.GETPROP &&\n+      parentType != Token.BLOCK &&\n+      parentType != Token.SCRIPT) {\n+    return false;\n+  }\n+\n+  // Don't traverse function names in statement positions.\n+  if (parentType == Token.NAME && parent.getFirstChild() != n) {\n+    return false;\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}