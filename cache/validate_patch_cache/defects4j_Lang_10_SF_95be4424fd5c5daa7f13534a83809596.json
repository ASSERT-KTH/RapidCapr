{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false, isOptional = false;\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n        switch (c) {\n            case '[':\n                regex.append(c);\n                isOptional = false;\n                for (++i; i < value.length() && value.charAt(i) != ']'; ++i) {\n                    c = value.charAt(i);\n                    if (c == '\\\\' && i < value.length() - 1) {\n                        regex.append(c).append(value.charAt(i + 1));\n                        ++i;\n                    } else if (value.charAt(i + 1) == '-') {\n                        regex.append(c).append(value.charAt(++i)).append(value.charAt(++i));\n                    } else {\n                        regex.append(c);\n                    }\n                }\n                regex.append(c);\n                break;\n            case '(':\n                regex.append(c);\n                isOptional = false;\n                break;\n            case '|':\n                isOptional = false;\n                regex.append(c);\n                break;\n            case ')':\n                regex.append(c);\n                isOptional = value.length() > i + 1 && value.charAt(i + 1) == '?';\n                if (isOptional) {\n                    ++i;\n                }\n                break;\n            case '?':\n                isOptional = true;\n                regex.append(\")?\");\n                break;\n            default:\n                if (Character.isWhitespace(c)) {\n                    if (!wasWhite) {\n                        wasWhite = true;\n                        if (isOptional) {\n                            regex.insert(regex.length() - 1, \")?\");\n                            isOptional = false;\n                        }\n                        regex.append(\"\\\\s*\");\n                    }\n                } else if (Character.isJavaIdentifierPart(c)) {\n                    wasWhite = false;\n                    if (isOptional) {\n                        regex.insert(regex.length() - 1, \")?\");\n                        isOptional = false;\n                    }\n                    regex.append(c);\n                } else {\n                    wasWhite = false;\n                    if (isOptional) {\n                        regex.insert(regex.length() - 1, \")?\");\n                        isOptional = false;\n                    }\n                    regex.append('\\\\').append(c);\n                }\n                break;\n        }\n    }\n\n    if (isOptional) {\n        regex.append(\")?\");\n    }\n\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..47226737 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,48 +300,82 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false, isOptional = false;\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+        switch (c) {\n+            case '[':\n+                regex.append(c);\n+                isOptional = false;\n+                for (++i; i < value.length() && value.charAt(i) != ']'; ++i) {\n+                    c = value.charAt(i);\n+                    if (c == '\\\\' && i < value.length() - 1) {\n+                        regex.append(c).append(value.charAt(i + 1));\n+                        ++i;\n+                    } else if (value.charAt(i + 1) == '-') {\n+                        regex.append(c).append(value.charAt(++i)).append(value.charAt(++i));\n+                    } else {\n+                        regex.append(c);\n                     }\n-                    c= value.charAt(i);\n                 }\n+                regex.append(c);\n                 break;\n-            case '?':\n-            case '[':\n-            case ']':\n             case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n+                regex.append(c);\n+                isOptional = false;\n+                break;\n             case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                isOptional = false;\n+                regex.append(c);\n+                break;\n+            case ')':\n+                regex.append(c);\n+                isOptional = value.length() > i + 1 && value.charAt(i + 1) == '?';\n+                if (isOptional) {\n+                    ++i;\n+                }\n+                break;\n+            case '?':\n+                isOptional = true;\n+                regex.append(\")?\");\n+                break;\n+            default:\n+                if (Character.isWhitespace(c)) {\n+                    if (!wasWhite) {\n+                        wasWhite = true;\n+                        if (isOptional) {\n+                            regex.insert(regex.length() - 1, \")?\");\n+                            isOptional = false;\n+                        }\n+                        regex.append(\"\\\\s*\");\n+                    }\n+                } else if (Character.isJavaIdentifierPart(c)) {\n+                    wasWhite = false;\n+                    if (isOptional) {\n+                        regex.insert(regex.length() - 1, \")?\");\n+                        isOptional = false;\n+                    }\n+                    regex.append(c);\n+                } else {\n+                    wasWhite = false;\n+                    if (isOptional) {\n+                        regex.insert(regex.length() - 1, \")?\");\n+                        isOptional = false;\n+                    }\n+                    regex.append('\\\\').append(c);\n+                }\n+                break;\n         }\n-        return regex;\n     }\n \n+    if (isOptional) {\n+        regex.append(\")?\");\n+    }\n+\n+    return regex;\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "junit.framework.AssertionFailedError: Parsed dates should be equal expected:<null> but was:<Mon Mar 02 21:00:00 PST 1970>",
    "test_result": "FAIL"
}