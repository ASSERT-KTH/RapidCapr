{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n    Class<?> clazz = mock.getClass();\n    if (Proxy.isProxyClass(clazz)) {\n        InvocationHandler invocationHandler = Proxy.getInvocationHandler(mock);\n        if (invocationHandler instanceof InterceptedInvocation) {\n            InterceptedInvocation interceptedInvocation = (InterceptedInvocation) invocationHandler;\n            interceptedInvocation.setMockHandler(newMockHandler);\n            interceptedInvocation.setInterceptorChain(newFilter);\n        }\n    } else {\n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(clazz);\n        enhancer.setCallback(newFilter);\n        T newMock = (T) enhancer.create();\n        Field[] fields = clazz.getDeclaredFields();\n        for (Field field : fields) {\n            field.setAccessible(true);\n            Object fieldValue;\n            try {\n                fieldValue = field.get(mock);\n            } catch (IllegalAccessException e) {\n                throw new AssertionError(e);\n            }\n            if (fieldValue == mock) {\n                try {\n                    field.set(newMock, newMock);\n                } catch (IllegalAccessException e) {\n                    throw new AssertionError(e);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..f4515a645 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,45 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+    Class<?> clazz = mock.getClass();\n+    if (Proxy.isProxyClass(clazz)) {\n+        InvocationHandler invocationHandler = Proxy.getInvocationHandler(mock);\n+        if (invocationHandler instanceof InterceptedInvocation) {\n+            InterceptedInvocation interceptedInvocation = (InterceptedInvocation) invocationHandler;\n+            interceptedInvocation.setMockHandler(newMockHandler);\n+            interceptedInvocation.setInterceptorChain(newFilter);\n+        }\n+    } else {\n+        Enhancer enhancer = new Enhancer();\n+        enhancer.setSuperclass(clazz);\n+        enhancer.setCallback(newFilter);\n+        T newMock = (T) enhancer.create();\n+        Field[] fields = clazz.getDeclaredFields();\n+        for (Field field : fields) {\n+            field.setAccessible(true);\n+            Object fieldValue;\n+            try {\n+                fieldValue = field.get(mock);\n+            } catch (IllegalAccessException e) {\n+                throw new AssertionError(e);\n+            }\n+            if (fieldValue == mock) {\n+                try {\n+                    field.set(newMock, newMock);\n+                } catch (IllegalAccessException e) {\n+                    throw new AssertionError(e);\n+                }\n+            }\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}