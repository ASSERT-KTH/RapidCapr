{
    "patch": "boolean thisAssignmentOnlyInFunction = value.isFunction()\n            && !reference.stringifiesToThis()\n            && !NodeUtil.placement(new NodeUtil.Placement(reference)) // don't use in-loop or nested object/array literals\n            && reference.getParent().isAssign()\n            && reference.getJSDocInfo().isConstructor() // using JSDoc to detect \"this assignment\" pattern\n\n        if (thisAssignmentOnlyInFunction) {\n          Node functionNode = NodeUtil.getEnclosingFunction(declaration.getNode());\n          if (functionNode.getParent().isName()) {\n            // Disallow inlining if the parent is a function name,\n            // i.e. \"function foo() {} function bar() { foo() }\"\n            return false;\n          }\n\n          // Disallow inlining if the declaration being assigned to is a param\n          if (declaration.getParent().isParamList()) {\n            return false;\n          }\n\n          // Disallow if there is more than one \"this assignment\".\n          boolean hasThisAssignment = false;\n          Node block = functionNode.getLastChild();\n\n          for (Node statement: block.children()) {\n            if (statement.isThis()) {\n              if (hasThisAssignment) {\n                return false;\n              } else {\n                hasThisAssignment = true;\n              }\n            } else if (statement.isExprResult()) {\n              Node grandkid = statement.getFirstChild();\n              if (grandkid.isAssign()\n                  && grandkid.getLastChild().isThis() // \"this\" is the RHS of the assignment\n                  && grandkid.getFirstChild().isName() // assigned to a name\n                  && grandkid.getFirstChild().getString().equals(declaration.getString())) {\n                hasThisAssignment = true;\n              }\n            }\n          }\n\n          if (!hasThisAssignment) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..c871031c 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,48 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+boolean thisAssignmentOnlyInFunction = value.isFunction()\n+            && !reference.stringifiesToThis()\n+            && !NodeUtil.placement(new NodeUtil.Placement(reference)) // don't use in-loop or nested object/array literals\n+            && reference.getParent().isAssign()\n+            && reference.getJSDocInfo().isConstructor() // using JSDoc to detect \"this assignment\" pattern\n+\n+        if (thisAssignmentOnlyInFunction) {\n+          Node functionNode = NodeUtil.getEnclosingFunction(declaration.getNode());\n+          if (functionNode.getParent().isName()) {\n+            // Disallow inlining if the parent is a function name,\n+            // i.e. \"function foo() {} function bar() { foo() }\"\n+            return false;\n+          }\n+\n+          // Disallow inlining if the declaration being assigned to is a param\n+          if (declaration.getParent().isParamList()) {\n+            return false;\n+          }\n+\n+          // Disallow if there is more than one \"this assignment\".\n+          boolean hasThisAssignment = false;\n+          Node block = functionNode.getLastChild();\n+\n+          for (Node statement: block.children()) {\n+            if (statement.isThis()) {\n+              if (hasThisAssignment) {\n+                return false;\n+              } else {\n+                hasThisAssignment = true;\n+              }\n+            } else if (statement.isExprResult()) {\n+              Node grandkid = statement.getFirstChild();\n+              if (grandkid.isAssign()\n+                  && grandkid.getLastChild().isThis() // \"this\" is the RHS of the assignment\n+                  && grandkid.getFirstChild().isName() // assigned to a name\n+                  && grandkid.getFirstChild().getString().equals(declaration.getString())) {\n+                hasThisAssignment = true;\n+              }\n+            }\n+          }\n+\n+          if (!hasThisAssignment) {\n         }\n       }\n ",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}