{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException {\n    Chronology base = getBase();\n    if (base != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    if (year == 1582 && monthOfYear == 10 && dayOfMonth > 4 && dayOfMonth < 15) {\n        throw new IllegalArgumentException(\"Specified date does not exist\");\n    }\n\n    long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    long gregorianInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n\n    if (julianInstant < iCutoverMillis && gregorianInstant >= iCutoverMillis) {\n        throw new IllegalArgumentException(\"Specified date does not exist\");\n    } else if (julianInstant >= iCutoverMillis) {\n        return gregorianInstant;\n    } else {\n        return julianInstant;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..adb674ce 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,36 +347,32 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        }\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+                              int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond)\n+        throws IllegalArgumentException {\n+    Chronology base = getBase();\n+    if (base != null) {\n+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    }\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n-            }\n-        }\n-        return instant;\n+    if (year == 1582 && monthOfYear == 10 && dayOfMonth > 4 && dayOfMonth < 15) {\n+        throw new IllegalArgumentException(\"Specified date does not exist\");\n     }\n \n+    long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    long gregorianInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+\n+    if (julianInstant < iCutoverMillis && gregorianInstant >= iCutoverMillis) {\n+        throw new IllegalArgumentException(\"Specified date does not exist\");\n+    } else if (julianInstant >= iCutoverMillis) {\n+        return gregorianInstant;\n+    } else {\n+        return julianInstant;\n+    }\n+}\n+\n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.\n      * @return the cutover instant",
    "result_reason": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]",
    "test_result": "FAIL"
}