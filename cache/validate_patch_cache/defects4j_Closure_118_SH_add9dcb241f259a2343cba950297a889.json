{
    "patch": "Node getOrSetKey = NodeUtil.getFirstPropMatchingKey( \n    child, Token.GET, Token.SET);\nif (getOrSetKey != null) {\n  // This is a get or set property. The property must be on the object which is the parent of get/set,\n  // not on child itself.\n  name = getOrSetKey.getString();\n  type = typeSystem.getType(getScope(), n, name);\n\n  Node parentOfGetOrSet = getOrSetKey.getParent();\n  Property parentProp = getProperty(name);\n\n  if (!parentProp.scheduleRenaming(getOrSetKey,\n                                       processProperty(t, parentProp, type, null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(\n          t.getSourceName(), parentOfGetOrSet, propertiesToErrorFor.get(name),\n          Warnings.INVALIDATION, name,\n          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n    }\n  }\n}  else {\n  // This is a string property.\n  String name = child.getString();\n  T type = typeSystem.getType(getScope(), n, name);\n  Property prop = getProperty(name);\n  if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(\n          t.getSourceName(), child, propertiesToErrorFor.get(name),\n          Warnings.INVALIDATION, name,\n          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..6c7efb15 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,41 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+Node getOrSetKey = NodeUtil.getFirstPropMatchingKey( \n+    child, Token.GET, Token.SET);\n+if (getOrSetKey != null) {\n+  // This is a get or set property. The property must be on the object which is the parent of get/set,\n+  // not on child itself.\n+  name = getOrSetKey.getString();\n+  type = typeSystem.getType(getScope(), n, name);\n+\n+  Node parentOfGetOrSet = getOrSetKey.getParent();\n+  Property parentProp = getProperty(name);\n+\n+  if (!parentProp.scheduleRenaming(getOrSetKey,\n+                                       processProperty(t, parentProp, type, null))) {\n+    if (propertiesToErrorFor.containsKey(name)) {\n+      compiler.report(JSError.make(\n+          t.getSourceName(), parentOfGetOrSet, propertiesToErrorFor.get(name),\n+          Warnings.INVALIDATION, name,\n+          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+    }\n+  }\n+}  else {\n+  // This is a string property.\n+  String name = child.getString();\n+  T type = typeSystem.getType(getScope(), n, name);\n+  Property prop = getProperty(name);\n+  if (!prop.scheduleRenaming(child,\n+                                   processProperty(t, prop, type, null))) {\n+    if (propertiesToErrorFor.containsKey(name)) {\n+      compiler.report(JSError.make(\n+          t.getSourceName(), child, propertiesToErrorFor.get(name),\n+          Warnings.INVALIDATION, name,\n+          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+    }\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}