{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n      JSType thisType = functionType.getTypeOfThis();\n      if (thisType != null) {\n        Node parent = n.getParent();\n        if (parent != null && parent.isGetElem()) {\n          visitChild(t, parent.getFirstChild(), parent);\n          visitChild(t, parent.getLastChild(), parent);\n        } else if (parent != null && parent.isGetProp() &&\n            parent.getLastChild().getString().equals(\"call\")) {\n          visitChild(t, parent.getFirstChild(), parent);\n        } else {\n          report(t, n, FUNCTION_WITH_NON_ARROW_THIS_TYPE);\n          return;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..64ff40c6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n+      JSType thisType = functionType.getTypeOfThis();\n+      if (thisType != null) {\n+        Node parent = n.getParent();\n+        if (parent != null && parent.isGetElem()) {\n+          visitChild(t, parent.getFirstChild(), parent);\n+          visitChild(t, parent.getLastChild(), parent);\n+        } else if (parent != null && parent.isGetProp() &&\n+            parent.getLastChild().getString().equals(\"call\")) {\n+          visitChild(t, parent.getFirstChild(), parent);\n+        } else {\n+          report(t, n, FUNCTION_WITH_NON_ARROW_THIS_TYPE);\n+          return;\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}