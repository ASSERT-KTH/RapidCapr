{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  boolean isValidGoogScopeFunction = false;\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    int type = n.getType();\n    Node parent = n.getParent();\n    if (parent.isVar() && parent.getFirstChild() == n) {\n      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n          aliases.put(name, aliasVar);\n\n          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n          transformation.addAlias(name, qualifiedName);\n        } else {\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n      }\n    } else if (parent.isCall() && n == parent.getFirstChild()\n        && \"goog.scope\".equals(n.getQualifiedName()) && parent.getChildCount() == 2) {\n      Node arg = n.getNext();\n      if (arg.isFunction() && arg.getFirstChild() == null && !arg.hasChildren()) {\n        isValidGoogScopeFunction = true;\n        NodeTraversal.traverse(compiler, arg, new NodeTraversal.Callback() {\n          @Override\n          public boolean shouldTraverse(NodeTraversal nodeTraversal,\n              Node n, Node parent) {\n            // Only parse function argument scope\n            return n == arg;\n          }\n\n          @Override\n          public void visit(NodeTraversal t, Node n, Node parent) {\n            if (parent.isReturn() && n.hasChildren() && n.getFirstChild().isObjectLit()) {\n              getScopeTransformations(n, v.getScope(), t);\n            }\n          }\n        });\n      }\n    }\n  }\n  if (!isValidGoogScopeFunction) {\n    report(t, t.getScopeRoot(), GOOG_SCOPE_BAD_SCOPE_ERROR, \"Expression is not a valid goog.scope().\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..2c231e4f 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,53 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  boolean isValidGoogScopeFunction = false;\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    int type = n.getType();\n+    Node parent = n.getParent();\n+    if (parent.isVar() && parent.getFirstChild() == n) {\n+      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+        String name = n.getString();\n+        Var aliasVar = scope.getVar(name);\n+        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n           aliases.put(name, aliasVar);\n \n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n         } else {\n-          // TODO(robbyw): Support using locals for private variables.\n           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n-        }\n+      }\n+    } else if (parent.isCall() && n == parent.getFirstChild()\n+        && \"goog.scope\".equals(n.getQualifiedName()) && parent.getChildCount() == 2) {\n+      Node arg = n.getNext();\n+      if (arg.isFunction() && arg.getFirstChild() == null && !arg.hasChildren()) {\n+        isValidGoogScopeFunction = true;\n+        NodeTraversal.traverse(compiler, arg, new NodeTraversal.Callback() {\n+          @Override\n+          public boolean shouldTraverse(NodeTraversal nodeTraversal,\n+              Node n, Node parent) {\n+            // Only parse function argument scope\n+            return n == arg;\n+          }\n+\n+          @Override\n+          public void visit(NodeTraversal t, Node n, Node parent) {\n+            if (parent.isReturn() && n.hasChildren() && n.getFirstChild().isObjectLit()) {\n+              getScopeTransformations(n, v.getScope(), t);\n+            }\n+          }\n+        });\n       }\n     }\n+  }\n+  if (!isValidGoogScopeFunction) {\n+    report(t, t.getScopeRoot(), GOOG_SCOPE_BAD_SCOPE_ERROR, \"Expression is not a valid goog.scope().\");\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: local variable arg is accessed from within inner class; needs to be declared final",
    "test_result": "ERROR"
}