{
    "patch": "        // where the function returns (possibly without a return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // We care about call and new nodes that potentially modify dependent variables.\n        if (NodeUtil.isCallOrNew(n)) {\n          return NodeUtil.mayEffectMutableState(n);\n        }\n\n        // Handle the 'delete' operation\n        if (n.isDelProp() || (n.isExprResult() && NodeUtil.isLValue(n.getFirstChild()))) {\n          return true;\n        }\n\n>>> [ INFILL ] <<<\n\n        // Recurse on child nodes.\n        for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(child) && apply(child)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..baec5c71 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,26 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        // where the function returns (possibly without a return statement)\n+        if (n == null) {\n+          return false;\n+        }\n+\n+        // We care about call and new nodes that potentially modify dependent variables.\n+        if (NodeUtil.isCallOrNew(n)) {\n+          return NodeUtil.mayEffectMutableState(n);\n+        }\n+\n+        // Handle the 'delete' operation\n+        if (n.isDelProp() || (n.isExprResult() && NodeUtil.isLValue(n.getFirstChild()))) {\n+          return true;\n+        }\n+\n+>>> [ INFILL ] <<<\n+\n+        // Recurse on child nodes.\n+        for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+          if (!ControlFlowGraph.isEnteringNewCfgNode(child) && apply(child)) {\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}