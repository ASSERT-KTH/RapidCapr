{
    "patch": "              if (!lhs.hasChildren() && lhs.isName() &&\n                  areNodesEqualForInlining(lhs,elseOp.getFirstChild())) {\n                Node thenExpr = thenOp.removeFirstChild();\n                Node elseExpr = elseOp.getLastChild();\n                Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n                Node expr = NodeUtil.newExpr(hookNode);\n                parent.replaceChild(n, expr);\n                reportCodeChange();\n                return expr;\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..98428b13 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,16 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              if (!lhs.hasChildren() && lhs.isName() &&\n+                  areNodesEqualForInlining(lhs,elseOp.getFirstChild())) {\n+                Node thenExpr = thenOp.removeFirstChild();\n+                Node elseExpr = elseOp.getLastChild();\n+                Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+                Node expr = NodeUtil.newExpr(hookNode);\n+                parent.replaceChild(n, expr);\n+                reportCodeChange();\n+                return expr;\n+              }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}