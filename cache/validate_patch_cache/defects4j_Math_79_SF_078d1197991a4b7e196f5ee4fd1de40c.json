{
    "patch": "public static double distance(int[] p1, int[] p2) {\n    int sum = 0;\n    for (int i = 0; i < p1.length; i++) {\n        final int dp = p1[i] - p2[i];\n        sum += dp * dp;\n    }\n    return Math.sqrt(sum + Double.MIN_VALUE);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 46368dc9f..b8323f3c2 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -1620,14 +1620,14 @@ public final class MathUtils {\n      * @param p2 the second point\n      * @return the L<sub>2</sub> distance between the two points\n      */\n-    public static double distance(int[] p1, int[] p2) {\n-      int sum = 0;\n-      for (int i = 0; i < p1.length; i++) {\n-          final int dp = p1[i] - p2[i];\n-          sum += dp * dp;\n-      }\n-      return Math.sqrt(sum);\n+public static double distance(int[] p1, int[] p2) {\n+    int sum = 0;\n+    for (int i = 0; i < p1.length; i++) {\n+        final int dp = p1[i] - p2[i];\n+        sum += dp * dp;\n     }\n+    return Math.sqrt(sum + Double.MIN_VALUE);\n+}\n \n     /**\n      * Calculates the L<sub>&infin;</sub> (max of abs) distance between two points.",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}