{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalculate the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // Compute the transitions surrounding the adjusted instant\n        long nextTransition = nextTransition(instantAdjusted);\n        long prevTransition = previousTransition(instantAdjusted);\n        int prevOffset = getOffset(prevTransition);\n        int nextOffset = getOffset(nextTransition);\n        // If the prevTransition is within the instantAdjusted range, we might be within a DST overlap\n        if (prevTransition >= instantAdjusted - offsetLocal) {\n            // If there is a positive overlap, looks for the end of the overlap and returns the offset right before the end.\n            if (prevOffset > nextOffset) {\n                // Looks for the end of the overlap\n                long overlapEnd = prevTransition + prevOffset;\n                while (overlapEnd <= instantLocal - offsetLocal && getOffset(overlapEnd) < nextOffset) {\n                    overlapEnd += prevOffset;\n                }\n                // Returns the offset right before the end of the overlap\n                return getOffset(overlapEnd - prevOffset);\n            }\n            // If there is no overlap, or only a negative overlap before the instantAdjusted range,\n            // return the offset corresponding to instantAdjusted\n            return offsetLocal;\n        }\n        // If the prevTransition is outside of the instantAdjusted range,\n        // it means that there is a gap within the instantAdjusted range that we must skip.\n        // We look for the next transition within the instant range and return the corresponding offset.\n        while (nextTransition <= instantLocal - offsetLocal && getOffset(nextTransition) == nextOffset) {\n            nextTransition = nextTransition(nextTransition + 1);\n            nextOffset = getOffset(nextTransition);\n        }\n        return nextOffset;\n    }\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d224fb4a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,46 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int offsetLocal = getOffset(instantLocal);\n+    // adjust instantLocal using the estimate and recalculate the offset\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+    // if the offsets differ, we must be near a DST boundary\n+    if (offsetLocal != offsetAdjusted) {\n+        // Compute the transitions surrounding the adjusted instant\n+        long nextTransition = nextTransition(instantAdjusted);\n+        long prevTransition = previousTransition(instantAdjusted);\n+        int prevOffset = getOffset(prevTransition);\n+        int nextOffset = getOffset(nextTransition);\n+        // If the prevTransition is within the instantAdjusted range, we might be within a DST overlap\n+        if (prevTransition >= instantAdjusted - offsetLocal) {\n+            // If there is a positive overlap, looks for the end of the overlap and returns the offset right before the end.\n+            if (prevOffset > nextOffset) {\n+                // Looks for the end of the overlap\n+                long overlapEnd = prevTransition + prevOffset;\n+                while (overlapEnd <= instantLocal - offsetLocal && getOffset(overlapEnd) < nextOffset) {\n+                    overlapEnd += prevOffset;\n                 }\n+                // Returns the offset right before the end of the overlap\n+                return getOffset(overlapEnd - prevOffset);\n             }\n+            // If there is no overlap, or only a negative overlap before the instantAdjusted range,\n+            // return the offset corresponding to instantAdjusted\n+            return offsetLocal;\n+        }\n+        // If the prevTransition is outside of the instantAdjusted range,\n+        // it means that there is a gap within the instantAdjusted range that we must skip.\n+        // We look for the next transition within the instant range and return the corresponding offset.\n+        while (nextTransition <= instantLocal - offsetLocal && getOffset(nextTransition) == nextOffset) {\n+            nextTransition = nextTransition(nextTransition + 1);\n+            nextOffset = getOffset(nextTransition);\n         }\n-        return offsetAdjusted;\n+        return nextOffset;\n     }\n+    return offsetAdjusted;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}