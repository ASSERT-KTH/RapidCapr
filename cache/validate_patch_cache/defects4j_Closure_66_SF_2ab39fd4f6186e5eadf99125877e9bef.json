{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    ObjectMapper objectMapper = new ObjectMapper();\n    Map<String, Object> map = null;\n    try {\n        map = objectMapper.readValue(jsonStr, new TypeReference<Map<String,Object>>(){});\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n    assert map != null;\n    int typedCount = (int) map.get(\"typedCount\");\n    int totalCount = (int) map.get(\"totalCount\");\n    return (double) typedCount / totalCount * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..f9d147b4 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    ObjectMapper objectMapper = new ObjectMapper();\n+    Map<String, Object> map = null;\n+    try {\n+        map = objectMapper.readValue(jsonStr, new TypeReference<Map<String,Object>>(){});\n+    } catch (JsonProcessingException e) {\n+        e.printStackTrace();\n+    }\n+    assert map != null;\n+    int typedCount = (int) map.get(\"typedCount\");\n+    int totalCount = (int) map.get(\"totalCount\");\n+    return (double) typedCount / totalCount * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}