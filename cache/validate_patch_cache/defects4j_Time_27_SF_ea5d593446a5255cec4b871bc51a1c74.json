{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    int size = elementPairs.size();\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n    if (size == 1) {\n        Object obj = elementPairs.get(0);\n        if (obj instanceof Separator) {\n            Separator sep = (Separator) obj;\n            return new PeriodFormatter(sep, sep);\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    }\n    if (elementPairs.get(0) instanceof Separator && elementPairs.get(size - 1) instanceof Separator) {\n        int i;\n        for (i = 1; i < size - 1; i++) {\n            if (elementPairs.get(i) instanceof Separator) break;\n        }\n        Separator sep = (Separator) elementPairs.get(0);\n        Object[] comp = createComposite(elementPairs.subList(1, i));\n        PeriodPrinter printer = (PeriodPrinter) comp[0];\n        PeriodParser parser = (PeriodParser) comp[1];\n        sep = sep.start(printer, parser);\n        comp = createComposite(elementPairs.subList(i + 1, size - 1));\n        PeriodPrinter postPrinter = (PeriodPrinter) comp[0];\n        PeriodParser postParser = (PeriodParser) comp[1];\n        sep = sep.end(postPrinter, postParser);\n        return toFormatter(Collections.singletonList(sep), notPrinter, notParser);\n    }\n    if (elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        Object[] comp = createComposite(elementPairs.subList(1, size));\n        PeriodPrinter printer = (PeriodPrinter) comp[0];\n        PeriodParser parser = (PeriodParser) comp[1];\n        sep = sep.finish(printer, parser);\n        return toFormatter(Collections.singletonList(sep), notPrinter, notParser);\n    } else if (elementPairs.get(size - 1) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(size - 1);\n        Object[] comp = createComposite(elementPairs.subList(0, size - 1));\n        PeriodPrinter printer = (PeriodPrinter) comp[0];\n        PeriodParser parser = (PeriodParser) comp[1];\n        sep = sep.start(printer, parser);\n        return toFormatter(Collections.singletonList(sep), notPrinter, notParser);\n    } else {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..85f7a960 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,61 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    int size = elementPairs.size();\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+    if (size == 1) {\n+        Object obj = elementPairs.get(0);\n+        if (obj instanceof Separator) {\n+            Separator sep = (Separator) obj;\n+            return new PeriodFormatter(sep, sep);\n+        } else {\n+            Object[] comp = createComposite(elementPairs);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n         }\n+    }\n+    if (elementPairs.get(0) instanceof Separator && elementPairs.get(size - 1) instanceof Separator) {\n+        int i;\n+        for (i = 1; i < size - 1; i++) {\n+            if (elementPairs.get(i) instanceof Separator) break;\n+        }\n+        Separator sep = (Separator) elementPairs.get(0);\n+        Object[] comp = createComposite(elementPairs.subList(1, i));\n+        PeriodPrinter printer = (PeriodPrinter) comp[0];\n+        PeriodParser parser = (PeriodParser) comp[1];\n+        sep = sep.start(printer, parser);\n+        comp = createComposite(elementPairs.subList(i + 1, size - 1));\n+        PeriodPrinter postPrinter = (PeriodPrinter) comp[0];\n+        PeriodParser postParser = (PeriodParser) comp[1];\n+        sep = sep.end(postPrinter, postParser);\n+        return toFormatter(Collections.singletonList(sep), notPrinter, notParser);\n+    }\n+    if (elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        Object[] comp = createComposite(elementPairs.subList(1, size));\n+        PeriodPrinter printer = (PeriodPrinter) comp[0];\n+        PeriodParser parser = (PeriodParser) comp[1];\n+        sep = sep.finish(printer, parser);\n+        return toFormatter(Collections.singletonList(sep), notPrinter, notParser);\n+    } else if (elementPairs.get(size - 1) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(size - 1);\n+        Object[] comp = createComposite(elementPairs.subList(0, size - 1));\n+        PeriodPrinter printer = (PeriodPrinter) comp[0];\n+        PeriodParser parser = (PeriodParser) comp[1];\n+        sep = sep.start(printer, parser);\n+        return toFormatter(Collections.singletonList(sep), notPrinter, notParser);\n+    } else {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -811,6 +855,7 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}