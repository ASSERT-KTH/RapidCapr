{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // Save the original vertex.\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // Perform a reflection step.\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // Compute the expanded simplex.\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex = reflectedSimplex;\n            } else {\n                simplex = evaluateNewSimplex(original, beta, comparator);\n            }\n\n            return;\n        }\n\n        // Compute the contracted simplex.\n        final RealPointValuePair contracted = evaluateNewSimplex(original, delta, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            simplex = contracted;\n            continue;\n        }\n\n        // Perform a shrink.\n        final RealPointValuePair[] shrinked = new RealPointValuePair[original.length];\n        for (int i = 0; i < shrinked.length; i++) {\n            final double[] point = original[i].getPoint();\n            final double[] newPoint = new double[point.length];\n            for (int j = 0; j < newPoint.length; j++) {\n                newPoint[j] = best.getPoint()[j] + sigma * (point[j] - best.getPoint()[j]);\n            }\n            shrinked[i] = new RealPointValuePair(newPoint, Double.NaN);\n        }\n        simplex = shrinked;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..30a20050e 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,53 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // Save the original vertex.\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // Perform a reflection step.\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // Compute the expanded simplex.\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex = reflectedSimplex;\n+            } else {\n+                simplex = evaluateNewSimplex(original, beta, comparator);\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n+            return;\n+        }\n \n+        // Compute the contracted simplex.\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, delta, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            simplex = contracted;\n+            continue;\n         }\n \n+        // Perform a shrink.\n+        final RealPointValuePair[] shrinked = new RealPointValuePair[original.length];\n+        for (int i = 0; i < shrinked.length; i++) {\n+            final double[] point = original[i].getPoint();\n+            final double[] newPoint = new double[point.length];\n+            for (int j = 0; j < newPoint.length; j++) {\n+                newPoint[j] = best.getPoint()[j] + sigma * (point[j] - best.getPoint()[j]);\n+            }\n+            shrinked[i] = new RealPointValuePair(newPoint, Double.NaN);\n+        }\n+        simplex = shrinked;\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}