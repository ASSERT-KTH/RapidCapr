{
    "patch": "      if (n.isFromExterns()) {\n        // Always traverse externs\n        return true;\n      }\n      if (n.getLastChild() != null &&\n          n.getLastChild().getBooleanProp(Node.EXPORT_DEFAULT)) {\n        // Always traverse the default exported function\n        return true;\n      }\n      if (NodeUtil.glueFunction(parent) != null) {\n        // Always traverse glued functions\n        return true;\n      }\n      if (NodeUtil.isClassExpression(n)) {\n        // Always traverse class declarations\n        return true;\n      }\n      if (n.getBooleanProp(Node.GOog_MODULE)) {\n        // Always traverse goog.module bodies\n        return true;\n      }\n      if (checkThis(n)) {\n        return true;\n      }\n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..c2c7b411 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,31 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.isFromExterns()) {\n+        // Always traverse externs\n+        return true;\n+      }\n+      if (n.getLastChild() != null &&\n+          n.getLastChild().getBooleanProp(Node.EXPORT_DEFAULT)) {\n+        // Always traverse the default exported function\n+        return true;\n+      }\n+      if (NodeUtil.glueFunction(parent) != null) {\n+        // Always traverse glued functions\n+        return true;\n+      }\n+      if (NodeUtil.isClassExpression(n)) {\n+        // Always traverse class declarations\n+        return true;\n+      }\n+      if (n.getBooleanProp(Node.GOog_MODULE)) {\n+        // Always traverse goog.module bodies\n+        return true;\n+      }\n+      if (checkThis(n)) {\n+        return true;\n+      }\n+      return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}