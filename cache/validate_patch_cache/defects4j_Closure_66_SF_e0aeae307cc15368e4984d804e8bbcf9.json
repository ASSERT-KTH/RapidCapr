{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    double totalCount = 0.0;\n    double typedCount = 0.0;\n    try {\n        JSONArray jsonArray = new JSONArray(jsonStr);\n        for (int i = 0; i < jsonArray.length(); i++) {\n            JSONObject jsonObject = jsonArray.getJSONObject(i);\n            boolean typed = jsonObject.getBoolean(\"typed\");\n            totalCount++;\n            if (typed) {\n                typedCount++;\n            }\n        }\n    } catch (JSONException ex) {\n        ex.printStackTrace();\n    }\n\n    if (totalCount == 0.0) {\n        return 0.0;\n    }\n    return (typedCount / totalCount) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..ffe076c8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    double totalCount = 0.0;\n+    double typedCount = 0.0;\n+    try {\n+        JSONArray jsonArray = new JSONArray(jsonStr);\n+        for (int i = 0; i < jsonArray.length(); i++) {\n+            JSONObject jsonObject = jsonArray.getJSONObject(i);\n+            boolean typed = jsonObject.getBoolean(\"typed\");\n+            totalCount++;\n+            if (typed) {\n+                typedCount++;\n+            }\n+        }\n+    } catch (JSONException ex) {\n+        ex.printStackTrace();\n+    }\n+\n+    if (totalCount == 0.0) {\n+        return 0.0;\n+    }\n+    return (typedCount / totalCount) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}