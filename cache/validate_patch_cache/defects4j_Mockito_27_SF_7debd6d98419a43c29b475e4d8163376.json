{
    "patch": "        MockHandler<T> oldHandler = (MockHandler<T>) Proxy.getInvocationHandler(mock);\n        MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(mock.getClass());\n        enhancer.setCallback(newHandler);\n        T newMock = (T) enhancer.create();\n        replaceMock(mock, newMock);\n    }\n\n    private <T> void replaceMock(T oldMock, T newMock) {\n        Field[] oldFields = oldMock.getClass().getDeclaredFields();\n        Field[] newFields = newMock.getClass().getDeclaredFields();\n        for (int i = 0; i < newFields.length; i++) {\n            Field oldField = oldFields[i];\n            Field newField = newFields[i];\n            oldField.setAccessible(true);\n            newField.setAccessible(true);\n            try {\n                newField.set(newMock, oldField.get(oldMock));\n            } catch (IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..2cb5884e6 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,30 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+        MockHandler<T> oldHandler = (MockHandler<T>) Proxy.getInvocationHandler(mock);\n+        MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n+        Enhancer enhancer = new Enhancer();\n+        enhancer.setSuperclass(mock.getClass());\n+        enhancer.setCallback(newHandler);\n+        T newMock = (T) enhancer.create();\n+        replaceMock(mock, newMock);\n+    }\n+\n+    private <T> void replaceMock(T oldMock, T newMock) {\n+        Field[] oldFields = oldMock.getClass().getDeclaredFields();\n+        Field[] newFields = newMock.getClass().getDeclaredFields();\n+        for (int i = 0; i < newFields.length; i++) {\n+            Field oldField = oldFields[i];\n+            Field newField = newFields[i];\n+            oldField.setAccessible(true);\n+            newField.setAccessible(true);\n+            try {\n+                newField.set(newMock, oldField.get(oldMock));\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}