{
    "patch": "    \n    Node argList = getFunctionArgList(function);\n    int argLength = argList.getChildCount();\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      int index = 0;\n      // Strip unreferenced args off the beginning of the function declaration.\n      for (Node arg : argList.children()) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(arg);\n          compiler.reportCodeChange();\n          index++;\n        } else {\n          break;\n        }\n      }\n      if (index > 0) {\n        for (int i = index; i < argLength; i++) {\n          Node arg = argList.getChildAtIndex(i);\n          if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n            argList.removeChild(arg);\n            compiler.reportCodeChange();\n            i--;\n            argLength--;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d8c7b285 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,33 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    Node argList = getFunctionArgList(function);\n+    int argLength = argList.getChildCount();\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      int index = 0;\n+      // Strip unreferenced args off the beginning of the function declaration.\n+      for (Node arg : argList.children()) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(arg);\n+          compiler.reportCodeChange();\n+          index++;\n+        } else {\n+          break;\n+        }\n+      }\n+      if (index > 0) {\n+        for (int i = index; i < argLength; i++) {\n+          Node arg = argList.getChildAtIndex(i);\n+          if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+            argList.removeChild(arg);\n+            compiler.reportCodeChange();\n+            i--;\n+            argLength--;\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}