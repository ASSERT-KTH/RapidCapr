{
    "patch": "      Node parent = child.getParent();\n      if (functionType.getTypeOfThis() != null &&\n          !NodeUtil.isGet(parent)) {\n        if (parent.isAssign() && parent.getFirstChild() == child) {\n          // Modifying the function value of a property is fine in this context.\n          if (getJSType(parent.getNext()).isFunctionType()) {\n            return;\n          }\n        }\n        report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..9d581f16 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      Node parent = child.getParent();\n+      if (functionType.getTypeOfThis() != null &&\n+          !NodeUtil.isGet(parent)) {\n+        if (parent.isAssign() && parent.getFirstChild() == child) {\n+          // Modifying the function value of a property is fine in this context.\n+          if (getJSType(parent.getNext()).isFunctionType()) {\n+            return;\n+          }\n+        }\n+        report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}