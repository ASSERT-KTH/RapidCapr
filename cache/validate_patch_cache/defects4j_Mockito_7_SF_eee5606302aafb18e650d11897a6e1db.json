{
    "patch": "private static Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length == 0) {\n        // If the type variable has no bounds, there is no actual type argument\n        return null;\n    }\n    Type bound = bounds[0];\n    if (!(bound instanceof TypeVariable<?>)) {\n        // If the bound is not a type variable, it is the actual type argument\n        return bound;\n    }\n    // If the bound is a type variable, we need to resolve it recursively\n    return getActualTypeArgumentFor((TypeVariable<?>) bound);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..91d2d2e1e 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,21 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private static Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length == 0) {\n+        // If the type variable has no bounds, there is no actual type argument\n+        return null;\n+    }\n+    Type bound = bounds[0];\n+    if (!(bound instanceof TypeVariable<?>)) {\n+        // If the bound is not a type variable, it is the actual type argument\n+        return bound;\n+    }\n+    // If the bound is a type variable, we need to resolve it recursively\n+    return getActualTypeArgumentFor((TypeVariable<?>) bound);\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}