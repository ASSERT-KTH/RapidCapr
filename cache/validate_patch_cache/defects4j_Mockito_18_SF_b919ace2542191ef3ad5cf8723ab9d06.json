{
    "patch": "public static ReturnValuesInOrder returnInOrder(final Object... values) {\n    final ReturnValuesInOrder returnValuesInOrder = new ReturnValuesInOrder(values);\n    return returnValuesInOrder;\n}\n\npublic static class ReturnValuesInOrder implements Answer {\n    private final Object[] values;\n    private int count = 0;\n\n    private ReturnValuesInOrder(Object... values) {\n        this.values = values;\n    }\n\n    @Override\n    public Object answer(InvocationOnMock invocation) throws Throwable {\n        if (count >= values.length) {\n            return null;\n        }\n        Object value = values[count];\n        count++;\n        return value;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..616cad219 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,29 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static ReturnValuesInOrder returnInOrder(final Object... values) {\n+    final ReturnValuesInOrder returnValuesInOrder = new ReturnValuesInOrder(values);\n+    return returnValuesInOrder;\n+}\n+\n+public static class ReturnValuesInOrder implements Answer {\n+    private final Object[] values;\n+    private int count = 0;\n+\n+    private ReturnValuesInOrder(Object... values) {\n+        this.values = values;\n+    }\n+\n+    @Override\n+    public Object answer(InvocationOnMock invocation) throws Throwable {\n+        if (count >= values.length) {\n+            return null;\n+        }\n+        Object value = values[count];\n+        count++;\n+        return value;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}