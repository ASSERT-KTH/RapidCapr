{
    "patch": "long millis = iMillis;\n        boolean failure = false;  // ADD THIS LINE\n        try {\n            for (int i = 0; i < count; i++) {\n                try {  // ADD THIS LINE\n                    millis = savedFields[i].set(millis, resetFields);\n                } catch (IllegalFieldValueException e) {  // UPDATE THIS LINE\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                    }\n                    if (e.getIllegalFieldValueFailureInstant() != null) {  // ADD THIS LINE\n                        failure = true;  // ADD THIS LINE\n                        millis = e.getIllegalFieldValueFailureInstant();  // ADD THIS LINE\n                        break;  // ADD THIS LINE\n                    } else {  // ADD THIS LINE\n                        throw e;  // ADD THIS LINE\n                    }  // ADD THIS LINE\n                }  // UPDATE THIS LINE\n            }\n        } catch (IllegalFieldValueException e) {  // UPDATE THIS LINE\n            if (!failure) {  // ADD THIS LINE\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }  // ADD THIS LINE\n        }  // UPDATE THIS LINE",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..ce79c0bb 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,33 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+long millis = iMillis;\n+        boolean failure = false;  // ADD THIS LINE\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                try {  // ADD THIS LINE\n+                    millis = savedFields[i].set(millis, resetFields);\n+                } catch (IllegalFieldValueException e) {  // UPDATE THIS LINE\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                    }\n+                    if (e.getIllegalFieldValueFailureInstant() != null) {  // ADD THIS LINE\n+                        failure = true;  // ADD THIS LINE\n+                        millis = e.getIllegalFieldValueFailureInstant();  // ADD THIS LINE\n+                        break;  // ADD THIS LINE\n+                    } else {  // ADD THIS LINE\n+                        throw e;  // ADD THIS LINE\n+                    }  // ADD THIS LINE\n+                }  // UPDATE THIS LINE\n+            }\n+        } catch (IllegalFieldValueException e) {  // UPDATE THIS LINE\n+            if (!failure) {  // ADD THIS LINE\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }  // ADD THIS LINE\n+        }  // UPDATE THIS LINE\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: variable millis is already defined in method computeMillis(boolean,String)",
    "test_result": "ERROR"
}