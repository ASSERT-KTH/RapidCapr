{
    "patch": "      if (value != null && value.getNext() == null) {\n        Node argument = value.getFirstChild();\n        if (argument != null && ImmutableCharacterSet.of('\"', '\\'').contains(\n            argument.getOriginalChar())) {\n          // Fold String('x') to 'x'\n          n.getParent().replaceChild(n, argument.detachFromParent());\n          reportCodeChange();\n          return argument;\n        } else {\n          // Fold String(a) to '' + (a) on immutable literals,\n          // which allows further optimizations\n          //\n          // We can't do this in the general case, because String(a) has\n          // slightly different semantics than '' + (a). See\n          // http://code.google.com/p/closure-compiler/issues/detail?id=759\n          Node addition = IR.add(\n              IR.string(\"\").srcref(callTarget),\n              value.detachFromParent());\n          n.getParent().replaceChild(n, addition);\n          reportCodeChange();\n          return addition;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..76f4c500 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,29 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+      if (value != null && value.getNext() == null) {\n+        Node argument = value.getFirstChild();\n+        if (argument != null && ImmutableCharacterSet.of('\"', '\\'').contains(\n+            argument.getOriginalChar())) {\n+          // Fold String('x') to 'x'\n+          n.getParent().replaceChild(n, argument.detachFromParent());\n+          reportCodeChange();\n+          return argument;\n+        } else {\n+          // Fold String(a) to '' + (a) on immutable literals,\n+          // which allows further optimizations\n+          //\n+          // We can't do this in the general case, because String(a) has\n+          // slightly different semantics than '' + (a). See\n+          // http://code.google.com/p/closure-compiler/issues/detail?id=759\n+          Node addition = IR.add(\n+              IR.string(\"\").srcref(callTarget),\n+              value.detachFromParent());\n+          n.getParent().replaceChild(n, addition);\n+          reportCodeChange();\n+          return addition;\n+        }\n+      }\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}