{
    "patch": "      ObjectType objType = ObjectType.cast(type);\n      if (objType != null && constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          JSType inferredPropType = objType.getPropertyType(prop);\n          if (inferredPropType == null || inferredPropType.equals(getNativeType(NULL_TYPE))) {\n            objType.defineInferredProperty(prop, propType, null);\n          } else {\n            JSType leastSupertype = getNativeType(OBJECT_TYPE).getLeastSupertype(propType, inferredPropType);\n            if (!leastSupertype.equals(inferredPropType)) {\n              objType.defineInferredProperty(prop, leastSupertype, null);\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..08043f6f 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,21 +1118,20 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n+      ObjectType objType = ObjectType.cast(type);\n+      if (objType != null && constraintObj.isRecordType()) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+          JSType inferredPropType = objType.getPropertyType(prop);\n+          if (inferredPropType == null || inferredPropType.equals(getNativeType(NULL_TYPE))) {\n+            objType.defineInferredProperty(prop, propType, null);\n+          } else {\n+            JSType leastSupertype = getNativeType(OBJECT_TYPE).getLeastSupertype(propType, inferredPropType);\n+            if (!leastSupertype.equals(inferredPropType)) {\n+              objType.defineInferredProperty(prop, leastSupertype, null);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}