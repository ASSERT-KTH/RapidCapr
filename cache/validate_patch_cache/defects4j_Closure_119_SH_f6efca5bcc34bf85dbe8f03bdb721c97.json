{
    "patch": "      boolean isUnary = parent.isUnary() && (n == parent.getFirstChild());\n      if (isUnary && (parent.getType() == Token.TYPEOF)) {\n        handleDelete(module, scope, n.getNext(), parent, name);\n        return;\n      }\n      boolean isIncDec = NodeUtil.isUpdateOperator(parent);\n      if (isIncDec || isUnary) {\n        if (isGlobalScope(scope)) {\n          handleIncDecFromGlobal(module, scope, n, parent, name, isPropAssign);\n        } else {\n          handleIncDecFromLocal(module, scope, n, parent, name, isUnary);\n        }\n      } else if (isSet) {\n        if (isGlobalScope(scope)) {\n          handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n        } else {\n          handleSetFromLocal(module, scope, n, parent, name);\n        }\n      } else {\n        handleGet(module, scope, n, parent, name);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..da036139 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,27 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+      boolean isUnary = parent.isUnary() && (n == parent.getFirstChild());\n+      if (isUnary && (parent.getType() == Token.TYPEOF)) {\n+        handleDelete(module, scope, n.getNext(), parent, name);\n+        return;\n+      }\n+      boolean isIncDec = NodeUtil.isUpdateOperator(parent);\n+      if (isIncDec || isUnary) {\n+        if (isGlobalScope(scope)) {\n+          handleIncDecFromGlobal(module, scope, n, parent, name, isPropAssign);\n+        } else {\n+          handleIncDecFromLocal(module, scope, n, parent, name, isUnary);\n+        }\n+      } else if (isSet) {\n+        if (isGlobalScope(scope)) {\n+          handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n+        } else {\n+          handleSetFromLocal(module, scope, n, parent, name);\n+        }\n+      } else {\n+        handleGet(module, scope, n, parent, name);\n+      }\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}