{
    "patch": "private void computeGenKill(Node n, BitSet gen, BitSet kill,\n                             boolean conditional) {\n    switch (n.getType()) {\n        case Token.SCRIPT:\n        case Token.BLOCK:\n        case Token.FUNCTION:\n            return;\n\n        case Token.WHILE:\n        case Token.DO:\n            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n            computeGenKill(n.getLastChild(), gen, kill, conditional);\n            break;\n\n        case Token.IF:\n            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n            computeGenKill(n.getFirstChild().getNext(), gen, kill, conditional);\n            if (n.getChildCount() == 3) {\n                computeGenKill(n.getLastChild(), gen, kill, conditional);\n            }\n            break;\n\n        case Token.FOR:\n            Node first = n.getFirstChild();\n            Node second = first.getNext();\n            Node third = second.getNext();\n            if (second.getType() != Token.EMPTY) {\n                computeGenKill(second, gen, kill, true);\n            } else {\n                computeGenKill(third, gen, kill, true);\n            }\n            computeGenKill(n.getLastChild(), gen, kill, conditional);\n            break;\n\n        case Token.VAR:\n            for (Node c : n.children()) {\n                if (c.hasChildren()) {\n                    computeGenKill(c.getFirstChild(), gen, kill, true);\n                    if (!conditional) {\n                        addToSetIfLocal(c.getFirstChild(), kill);\n                    }\n                }\n            }\n            break;\n\n        case Token.AND:\n        case Token.OR:\n            computeGenKill(n.getFirstChild(), gen, kill, conditional);\n            computeGenKill(n.getLastChild(), gen, kill, conditional);\n            if (!conditional) {\n                addToSetIfLocal(n, kill);\n            }\n            break;\n\n        case Token.HOOK:\n            computeGenKill(n.getFirstChild(), gen, kill, conditional);\n            computeGenKill(n.getFirstChild().getNext(), gen, kill, conditional);\n            computeGenKill(n.getLastChild(), gen, kill, conditional);\n            if (!conditional) {\n                addToSetIfLocal(n, kill);\n            }\n            break;\n\n        case Token.NAME:\n            addToSetIfLocal(n, gen);\n            if (!conditional && !isForLoopVar(n)) {\n                addToSetIfLocal(n, kill);\n            }\n            break;\n\n        default:\n            if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n                Node lhs = n.getFirstChild();\n                if (!conditional) {\n                    addToSetIfLocal(lhs, kill);\n                }\n                if (!NodeUtil.isAssign(n)) {\n                    addToSetIfLocal(lhs, gen);\n                }\n                computeGenKill(lhs.getNext(), gen, kill, true);\n            } else {\n                for (Node c : n.children()) {\n                    computeGenKill(c, gen, kill, conditional);\n                }\n            }\n            break;\n    }\n}\n  \nprivate boolean isForLoopVar(Node n) {\n    Node parent = n.getParent();\n    if (parent == null || parent.getType() != Token.FOR) {\n        return false;\n    }\n    if (NodeUtil.isForIn(parent)) {\n        Node left = parent.getFirstChild();\n        return left != null && left.getNext() == n;\n    }\n    Node init = parent.getFirstChild();\n    return init != null && init.getType() == Token.VAR;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..6fc88f25 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,92 +175,107 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n-      boolean conditional) {\n-\n+private void computeGenKill(Node n, BitSet gen, BitSet kill,\n+                             boolean conditional) {\n     switch (n.getType()) {\n-      case Token.SCRIPT:\n-      case Token.BLOCK:\n-      case Token.FUNCTION:\n-        return;\n-\n-      case Token.WHILE:\n-      case Token.DO:\n-      case Token.IF:\n-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n-        return;\n-\n-      case Token.FOR:\n-        if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n-        } else {\n-          // for(x in y) {...}\n-          Node lhs = n.getFirstChild();\n-          Node rhs = lhs.getNext();\n-          if (NodeUtil.isVar(lhs)) {\n-            // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n-          }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n-        }\n-        return;\n-\n-      case Token.VAR:\n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (c.hasChildren()) {\n-            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n+        case Token.SCRIPT:\n+        case Token.BLOCK:\n+        case Token.FUNCTION:\n+            return;\n+\n+        case Token.WHILE:\n+        case Token.DO:\n+            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n+            computeGenKill(n.getLastChild(), gen, kill, conditional);\n+            break;\n+\n+        case Token.IF:\n+            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n+            computeGenKill(n.getFirstChild().getNext(), gen, kill, conditional);\n+            if (n.getChildCount() == 3) {\n+                computeGenKill(n.getLastChild(), gen, kill, conditional);\n+            }\n+            break;\n+\n+        case Token.FOR:\n+            Node first = n.getFirstChild();\n+            Node second = first.getNext();\n+            Node third = second.getNext();\n+            if (second.getType() != Token.EMPTY) {\n+                computeGenKill(second, gen, kill, true);\n+            } else {\n+                computeGenKill(third, gen, kill, true);\n+            }\n+            computeGenKill(n.getLastChild(), gen, kill, conditional);\n+            break;\n+\n+        case Token.VAR:\n+            for (Node c : n.children()) {\n+                if (c.hasChildren()) {\n+                    computeGenKill(c.getFirstChild(), gen, kill, true);\n+                    if (!conditional) {\n+                        addToSetIfLocal(c.getFirstChild(), kill);\n+                    }\n+                }\n+            }\n+            break;\n+\n+        case Token.AND:\n+        case Token.OR:\n+            computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+            computeGenKill(n.getLastChild(), gen, kill, conditional);\n+            if (!conditional) {\n+                addToSetIfLocal(n, kill);\n+            }\n+            break;\n+\n+        case Token.HOOK:\n+            computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+            computeGenKill(n.getFirstChild().getNext(), gen, kill, conditional);\n+            computeGenKill(n.getLastChild(), gen, kill, conditional);\n             if (!conditional) {\n-              addToSetIfLocal(c, kill);\n+                addToSetIfLocal(n, kill);\n             }\n-          }\n-        }\n-        return;\n-\n-      case Token.AND:\n-      case Token.OR:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // May short circuit.\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.HOOK:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // Assume both sides are conditional.\n-        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.NAME:\n-        if (isArgumentsName(n)) {\n-          markAllParametersEscaped();\n-        } else {\n-          addToSetIfLocal(n, gen);\n-        }\n-        return;\n-\n-      default:\n-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n-          Node lhs = n.getFirstChild();\n-          if (!conditional) {\n-            addToSetIfLocal(lhs, kill);\n-          }\n-          if (!NodeUtil.isAssign(n)) {\n-            // assignments such as a += 1 reads a.\n-            addToSetIfLocal(lhs, gen);\n-          }\n-          computeGenKill(lhs.getNext(), gen, kill, conditional);\n-        } else {\n-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeGenKill(c, gen, kill, conditional);\n-          }\n-        }\n-        return;\n+            break;\n+\n+        case Token.NAME:\n+            addToSetIfLocal(n, gen);\n+            if (!conditional && !isForLoopVar(n)) {\n+                addToSetIfLocal(n, kill);\n+            }\n+            break;\n+\n+        default:\n+            if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n+                Node lhs = n.getFirstChild();\n+                if (!conditional) {\n+                    addToSetIfLocal(lhs, kill);\n+                }\n+                if (!NodeUtil.isAssign(n)) {\n+                    addToSetIfLocal(lhs, gen);\n+                }\n+                computeGenKill(lhs.getNext(), gen, kill, true);\n+            } else {\n+                for (Node c : n.children()) {\n+                    computeGenKill(c, gen, kill, conditional);\n+                }\n+            }\n+            break;\n     }\n-  }\n+}\n+  \n+private boolean isForLoopVar(Node n) {\n+    Node parent = n.getParent();\n+    if (parent == null || parent.getType() != Token.FOR) {\n+        return false;\n+    }\n+    if (NodeUtil.isForIn(parent)) {\n+        Node left = parent.getFirstChild();\n+        return left != null && left.getNext() == n;\n+    }\n+    Node init = parent.getFirstChild();\n+    return init != null && init.getType() == Token.VAR;\n+}\n \n   private void addToSetIfLocal(Node node, BitSet set) {\n     Preconditions.checkState(NodeUtil.isName(node));",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}