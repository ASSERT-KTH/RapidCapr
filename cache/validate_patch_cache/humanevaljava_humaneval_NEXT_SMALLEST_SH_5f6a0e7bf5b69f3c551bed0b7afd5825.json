{
    "patch": "\n    public static Integer next_smallest(int[] lst) {\n        Set<Integer> numbers = new HashSet<>();\n        for (int n : lst) {\n            if (!numbers.contains(n)) {\n                numbers.add(n);\n            }\n        }\n        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n        Arrays.sort(no_duplicate);\n\n        if (no_duplicate.length < 2)\n            return null;\n        return no_duplicate[1];\n    }",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/NEXT_SMALLEST.java b/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\nindex 7791efd..29f42a2 100644\n--- a/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\n+++ b/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\n@@ -13,7 +13,21 @@ next_smallest([1, 1]) == None */\n \n public class NEXT_SMALLEST {\n     public static Integer next_smallest(int[] lst) {\n-        List<Integer> numbers = new ArrayList<Integer>();\n+\n+    public static Integer next_smallest(int[] lst) {\n+        Set<Integer> numbers = new HashSet<>();\n+        for (int n : lst) {\n+            if (!numbers.contains(n)) {\n+                numbers.add(n);\n+            }\n+        }\n+        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n+        Arrays.sort(no_duplicate);\n+\n+        if (no_duplicate.length < 2)\n+            return null;\n+        return no_duplicate[1];\n+    }\n         for (Integer n : lst)\n             numbers.add(n);\n         Integer[] no_duplicate = numbers.toArray(new Integer[] {});",
    "result_reason": " /tmp/humaneval-NEXT_SMALLEST/src/main/java/humaneval/buggy/NEXT_SMALLEST.java:[17,5] illegal start of expression",
    "test_result": "ERROR"
}