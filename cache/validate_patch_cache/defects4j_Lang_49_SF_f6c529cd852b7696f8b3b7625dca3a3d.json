{
    "patch": "public Fraction reduce() {\n    if (numerator == 0) {\n        return ZERO;\n    } else {\n        int sign = (numerator > 0 && denominator > 0) || (numerator < 0 && denominator < 0) ? 1 : -1;\n        int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n        int reducedNumerator = sign * Math.abs(numerator) / gcd;\n        int reducedDenominator = Math.abs(denominator) / gcd;\n        return new Fraction(reducedNumerator, reducedDenominator);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..1f9adce8 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,13 +462,17 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+public Fraction reduce() {\n+    if (numerator == 0) {\n+        return ZERO;\n+    } else {\n+        int sign = (numerator > 0 && denominator > 0) || (numerator < 0 && denominator < 0) ? 1 : -1;\n+        int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n+        int reducedNumerator = sign * Math.abs(numerator) / gcd;\n+        int reducedDenominator = Math.abs(denominator) / gcd;\n+        return new Fraction(reducedNumerator, reducedDenominator);\n     }\n+}\n \n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<-2/3> was not:<-2/3>",
    "test_result": "FAIL"
}