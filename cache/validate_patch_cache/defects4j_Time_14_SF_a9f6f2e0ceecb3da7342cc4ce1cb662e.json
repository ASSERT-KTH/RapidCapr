{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    DateTimeField field = partial.getField(fieldIndex);\n    Chronology chronology = field.getChronology();\n    long instant = 0L;\n    for (int i = 0; i < partial.size(); i++) {\n        DateTimeField partialField = partial.getField(i);\n        int fieldValue = (i == fieldIndex)\n            ? chronology.getBasePartial().getField(i).addWrapField(values[i], valueToAdd)\n            : values[i];\n        instant = partialField.set(instant, fieldValue);\n    }\n\n    try {\n        // attempt to maintain day-of-month for adjacent date corrections\n        instant = chronology.addMonths(instant, valueToAdd);\n    } catch (IllegalArgumentException e) {\n        if (field.getType() == DateTimeFieldType.monthOfYear() && field.getDurationField().getUnitMillis() >= DateTimeConstants.MILLIS_PER_DAY) {\n            // adding months to day-based month is not easy to calculate\n            int days = chronology.getDaysInMonthMax(instant);\n            int maxAllowed = days / 2;\n            int offsetAllowed = Math.min(valueToAdd, maxAllowed);\n            // offset by the maximum number of days that we can still get the right month\n            instant = chronology.addDays(instant, offsetAllowed - days);\n            // reset time to midnight, keeping day the same as before\n            instant = chronology.getMidnightMillis(instant);\n            // add the remainder of the amount of months\n            int remaining = valueToAdd - offsetAllowed;\n            instant = chronology.addMonths(instant, remaining);\n        } else {\n            throw e;\n        }\n    }\n    return chronology.get(partial, instant);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..bddc2bec 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,44 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    DateTimeField field = partial.getField(fieldIndex);\n+    Chronology chronology = field.getChronology();\n+    long instant = 0L;\n+    for (int i = 0; i < partial.size(); i++) {\n+        DateTimeField partialField = partial.getField(i);\n+        int fieldValue = (i == fieldIndex)\n+            ? chronology.getBasePartial().getField(i).addWrapField(values[i], valueToAdd)\n+            : values[i];\n+        instant = partialField.set(instant, fieldValue);\n+    }\n+\n+    try {\n+        // attempt to maintain day-of-month for adjacent date corrections\n+        instant = chronology.addMonths(instant, valueToAdd);\n+    } catch (IllegalArgumentException e) {\n+        if (field.getType() == DateTimeFieldType.monthOfYear() && field.getDurationField().getUnitMillis() >= DateTimeConstants.MILLIS_PER_DAY) {\n+            // adding months to day-based month is not easy to calculate\n+            int days = chronology.getDaysInMonthMax(instant);\n+            int maxAllowed = days / 2;\n+            int offsetAllowed = Math.min(valueToAdd, maxAllowed);\n+            // offset by the maximum number of days that we can still get the right month\n+            instant = chronology.addDays(instant, offsetAllowed - days);\n+            // reset time to midnight, keeping day the same as before\n+            instant = chronology.getMidnightMillis(instant);\n+            // add the remainder of the amount of months\n+            int remaining = valueToAdd - offsetAllowed;\n+            instant = chronology.addMonths(instant, remaining);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            throw e;\n         }\n     }\n+    return chronology.get(partial, instant);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}