{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n\n  List<Node> arrayFoldedChildren = Lists.newArrayList();\n  StringBuilder sb = new StringBuilder();\n  int arraySize = 0;\n  int foldedSize = 0;\n\n  Node elem = arrayNode.getFirstChild();\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (sb.length() > 0) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n    } else {\n      if (sb.length() > 0) {\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb = new StringBuilder();\n      }\n      arrayFoldedChildren.add(elem);\n    }\n    arraySize++;\n    elem = elem.getNext();\n  }\n\n  if (sb.length() > 0) {\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n  if (arrayFoldedChildren.isEmpty()) {\n    parent.replaceChild(n, NodeUtil.newString(parent.getOwnerDocument(), \"\"));\n    t.getCompiler().reportCodeChange();\n    return;\n  }\n\n  int originalSize = InlineCostEstimator.getCost(n);\n\n  if (arrayFoldedChildren.size() == 1 && NodeUtil.isString(arrayFoldedChildren.get(0))) {\n    String foldedString = arrayFoldedChildren.get(0).getString();\n    foldedSize = foldedString.length() - 2;  // subtract the length of the quotes\n\n    if (foldedSize <= originalSize) {\n      parent.replaceChild(n, NodeUtil.newString(parent.getOwnerDocument(), foldedString));\n      t.getCompiler().reportCodeChange();\n      return;\n    }\n  }\n\n  // we can fold at least some of the array items\n  foldedSize = arraySize - 1;\n  for (Node node : arrayFoldedChildren) {\n    foldedSize += InlineCostEstimator.getCost(node);\n  }\n\n  if (foldedSize <= originalSize) {\n    Node firstFoldedChild = arrayFoldedChildren.get(0);\n    Node lastFoldedChild = arrayFoldedChildren.get(arrayFoldedChildren.size() - 1);\n    Node foldedJoin = IR.getprop(firstFoldedChild, IR.string(\"join\"));\n    foldedJoin.putBooleanProp(Node.FREE_CALL, true);\n\n    if (NodeUtil.isString(firstFoldedChild)) {\n      // if first child is a string, we need to remove its quotes\n      String firstChildString = firstFoldedChild.getString();\n      firstChildString = firstChildString.substring(1, firstChildString.length() - 1);\n      Node newFirstChild = NodeUtil.newString(parent.getOwnerDocument(), firstChildString);\n      foldedJoin.addChildToBack(newFirstChild);\n    } else {\n      foldedJoin.addChildToBack(firstFoldedChild.cloneTree());\n    }\n\n    int i = 1;\n    int size = arrayFoldedChildren.size();\n    while (i < size && NodeUtil.isString(arrayFoldedChildren.get(i))) {\n      // merge consecutive String nodes\n      Node foldedTextNode = IR.string(arrayFoldedChildren.get(i - 1).getString() + joinString);\n      foldedJoin.addChildToBack(foldedTextNode);\n      i++;\n    }\n\n    if (i < size) {\n      // add remaining non-String nodes to the folded join expression\n      Node foldedArg = IR.call(IR.getelem(foldedJoin.cloneTree(), IR.number(i - 1)));\n      foldedArg.putBooleanProp(Node.FREE_CALL, true);\n\n      while (i < size) {\n        foldedJoin.addChildToBack(IR.string(joinString));\n        if (NodeUtil.isString(arrayFoldedChildren.get(i))) {\n          String childString = arrayFoldedChildren.get(i).getString();\n          childString = childString.substring(1, childString.length() - 1);\n          foldedArg.addChildToBack(NodeUtil.newString(parent.getOwnerDocument(), childString));\n        } else {\n          foldedArg.addChildToBack(arrayFoldedChildren.get(i).cloneTree());\n        }\n        i++;\n      }\n\n      foldedJoin.addChildToBack(foldedArg);\n    }\n\n    parent.replaceChild(n, foldedJoin);\n    t.getCompiler().reportCodeChange();\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..17b3abcd 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,120 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n+\n+  Node arrayNode = left.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n+\n+  if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n+    return;\n+  }\n+\n+  String joinString = NodeUtil.getStringValue(right);\n+\n+  List<Node> arrayFoldedChildren = Lists.newArrayList();\n+  StringBuilder sb = new StringBuilder();\n+  int arraySize = 0;\n+  int foldedSize = 0;\n+\n+  Node elem = arrayNode.getFirstChild();\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      if (sb.length() > 0) {\n+        sb.append(joinString);\n+      }\n+      sb.append(NodeUtil.getStringValue(elem));\n+    } else {\n+      if (sb.length() > 0) {\n+        arrayFoldedChildren.add(Node.newString(sb.toString()));\n+        sb = new StringBuilder();\n+      }\n+      arrayFoldedChildren.add(elem);\n     }\n+    arraySize++;\n+    elem = elem.getNext();\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  if (sb.length() > 0) {\n+    arrayFoldedChildren.add(Node.newString(sb.toString()));\n+  }\n+  if (arrayFoldedChildren.isEmpty()) {\n+    parent.replaceChild(n, NodeUtil.newString(parent.getOwnerDocument(), \"\"));\n+    t.getCompiler().reportCodeChange();\n+    return;\n+  }\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+  int originalSize = InlineCostEstimator.getCost(n);\n+\n+  if (arrayFoldedChildren.size() == 1 && NodeUtil.isString(arrayFoldedChildren.get(0))) {\n+    String foldedString = arrayFoldedChildren.get(0).getString();\n+    foldedSize = foldedString.length() - 2;  // subtract the length of the quotes\n+\n+    if (foldedSize <= originalSize) {\n+      parent.replaceChild(n, NodeUtil.newString(parent.getOwnerDocument(), foldedString));\n+      t.getCompiler().reportCodeChange();\n       return;\n     }\n+  }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      elem = elem.getNext();\n+  // we can fold at least some of the array items\n+  foldedSize = arraySize - 1;\n+  for (Node node : arrayFoldedChildren) {\n+    foldedSize += InlineCostEstimator.getCost(node);\n+  }\n+\n+  if (foldedSize <= originalSize) {\n+    Node firstFoldedChild = arrayFoldedChildren.get(0);\n+    Node lastFoldedChild = arrayFoldedChildren.get(arrayFoldedChildren.size() - 1);\n+    Node foldedJoin = IR.getprop(firstFoldedChild, IR.string(\"join\"));\n+    foldedJoin.putBooleanProp(Node.FREE_CALL, true);\n+\n+    if (NodeUtil.isString(firstFoldedChild)) {\n+      // if first child is a string, we need to remove its quotes\n+      String firstChildString = firstFoldedChild.getString();\n+      firstChildString = firstChildString.substring(1, firstChildString.length() - 1);\n+      Node newFirstChild = NodeUtil.newString(parent.getOwnerDocument(), firstChildString);\n+      foldedJoin.addChildToBack(newFirstChild);\n+    } else {\n+      foldedJoin.addChildToBack(firstFoldedChild.cloneTree());\n     }\n \n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+    int i = 1;\n+    int size = arrayFoldedChildren.size();\n+    while (i < size && NodeUtil.isString(arrayFoldedChildren.get(i))) {\n+      // merge consecutive String nodes\n+      Node foldedTextNode = IR.string(arrayFoldedChildren.get(i - 1).getString() + joinString);\n+      foldedJoin.addChildToBack(foldedTextNode);\n+      i++;\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+    if (i < size) {\n+      // add remaining non-String nodes to the folded join expression\n+      Node foldedArg = IR.call(IR.getelem(foldedJoin.cloneTree(), IR.number(i - 1)));\n+      foldedArg.putBooleanProp(Node.FREE_CALL, true);\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n+      while (i < size) {\n+        foldedJoin.addChildToBack(IR.string(joinString));\n+        if (NodeUtil.isString(arrayFoldedChildren.get(i))) {\n+          String childString = arrayFoldedChildren.get(i).getString();\n+          childString = childString.substring(1, childString.length() - 1);\n+          foldedArg.addChildToBack(NodeUtil.newString(parent.getOwnerDocument(), childString));\n+        } else {\n+          foldedArg.addChildToBack(arrayFoldedChildren.get(i).cloneTree());\n         }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+        i++;\n+      }\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+      foldedJoin.addChildToBack(foldedArg);\n     }\n+\n+    parent.replaceChild(n, foldedJoin);\n     t.getCompiler().reportCodeChange();\n   }\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}