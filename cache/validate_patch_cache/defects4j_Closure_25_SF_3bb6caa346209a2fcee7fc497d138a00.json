{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n\n    JSType constructorJSType = constructor.getJSType();\n    if (constructorJSType == null) {\n      constructorJSType = getNativeType(UNKNOWN_TYPE);\n    }\n    constructorJSType = constructorJSType.restrictByNotNullOrUndefined();\n    JSType type = null;\n\n    if (constructorJSType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      // Check that the constructor is indeed a function that can be called with new.\n      FunctionType ct = constructorJSType.toMaybeFunctionType();\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      } else {\n        type = getNativeType(UNKNOWN_TYPE);\n      }\n    }\n    n.setJSType(type);\n\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..c6efa3ae 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1033,32 +1033,33 @@ class TypeInference\n   }\n \n   private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n+\n+    JSType constructorJSType = constructor.getJSType();\n+    if (constructorJSType == null) {\n+      constructorJSType = getNativeType(UNKNOWN_TYPE);\n+    }\n+    constructorJSType = constructorJSType.restrictByNotNullOrUndefined();\n     JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n+\n+    if (constructorJSType.isUnknownType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else {\n+      // Check that the constructor is indeed a function that can be called with new.\n+      FunctionType ct = constructorJSType.toMaybeFunctionType();\n+      if (ct != null && ct.isConstructor()) {\n+        type = ct.getInstanceType();\n       } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+        type = getNativeType(UNKNOWN_TYPE);\n       }\n     }\n     n.setJSType(type);\n+\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }\n+\n     return scope;\n   }\n ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[foo: (number|undefined)]}> but was:<{[]}>",
    "test_result": "FAIL"
}