{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n\n    // Make sure the index is a non-negative integer\n    double index = right.getDouble();\n    if (index < 0 || index != Math.floor(index)) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    int intIndex = (int) index;\n\n    Node current = left.getFirstChild();\n    Node elem = null;\n    int i = 0;\n    while (current != null) {\n        if (i == intIndex) {\n            if (current.isArrayLit() && current.hasChildren()) {\n                // Get the first child node of the array literal and remove the array literal from its parent\n                elem = current.removeFirstChild();\n            } else {\n                // Clone the child node and replace the GETELEM with that node\n                if (current.isEmpty()) {\n                    elem = NodeUtil.newUndefinedNode(current);\n                } else {\n                    elem = current.cloneNode();\n                }   \n            }\n            n.getParent().replaceChild(n, elem);\n            reportCodeChange();\n            return elem;\n        }\n        i++;\n        current = current.getNext();\n    }\n\n    // Could not find element at the given index\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..ab552da6 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,57 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n     if (isAssignmentTarget(n)) {\n-      return n;\n+        return n;\n     }\n \n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+        // Sometimes people like to use complex expressions to index into\n+        // arrays, or strings to index into array methods.\n+        return n;\n     }\n \n+    // Make sure the index is a non-negative integer\n     double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n+    if (index < 0 || index != Math.floor(index)) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+    int intIndex = (int) index;\n \n     Node current = left.getFirstChild();\n     Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+    int i = 0;\n+    while (current != null) {\n+        if (i == intIndex) {\n+            if (current.isArrayLit() && current.hasChildren()) {\n+                // Get the first child node of the array literal and remove the array literal from its parent\n+                elem = current.removeFirstChild();\n+            } else {\n+                // Clone the child node and replace the GETELEM with that node\n+                if (current.isEmpty()) {\n+                    elem = NodeUtil.newUndefinedNode(current);\n+                } else {\n+                    elem = current.cloneNode();\n+                }   \n+            }\n+            n.getParent().replaceChild(n, elem);\n+            reportCodeChange();\n+            return elem;\n+        }\n+        i++;\n+        current = current.getNext();\n     }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n-  }\n+    // Could not find element at the given index\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "junit.framework.AssertionFailedError: Array index out of bounds: NUMBER 0.5 1 [source_file: testcode]",
    "test_result": "FAIL"
}