{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    int numRows = m.getRowDimension();\n    int numCols = m.getColumnDimension();\n  \n    if(numRows > MAX_ROWS || numCols > MAX_COLS) {\n        // Use PCA approximation if matrix is too large\n        RealMatrix centered = m.scalarMultiply(1.0 / FastMath.sqrt(numRows));\n        PChebyshevDecomposition pcd = new PChebyshevDecomposition(centered);\n        RealMatrix u_t = pcd.getU().transpose();\n        RealMatrix d = pcd.getD();\n        RealMatrix v = pcd.getV();\n        RealMatrix sqrt = v.multiply(d.scalarMultiply(0.5)).multiply(u_t);\n        return sqrt.scalarMultiply(FastMath.sqrt(numRows));\n    } else {\n        // Use EigenDecomposition if matrix is small enough\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..763e93cef 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    int numRows = m.getRowDimension();\n+    int numCols = m.getColumnDimension();\n+  \n+    if(numRows > MAX_ROWS || numCols > MAX_COLS) {\n+        // Use PCA approximation if matrix is too large\n+        RealMatrix centered = m.scalarMultiply(1.0 / FastMath.sqrt(numRows));\n+        PChebyshevDecomposition pcd = new PChebyshevDecomposition(centered);\n+        RealMatrix u_t = pcd.getU().transpose();\n+        RealMatrix d = pcd.getD();\n+        RealMatrix v = pcd.getV();\n+        RealMatrix sqrt = v.multiply(d.scalarMultiply(0.5)).multiply(u_t);\n+        return sqrt.scalarMultiply(FastMath.sqrt(numRows));\n+    } else {\n+        // Use EigenDecomposition if matrix is small enough\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n     }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}