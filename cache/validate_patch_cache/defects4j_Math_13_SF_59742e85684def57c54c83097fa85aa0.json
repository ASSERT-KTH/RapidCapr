{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m, 1e-10);\n    final double[] realEigen = dec.getRealEigenvalues();\n    final int n = realEigen.length;\n    final double[] sqrtEigen = new double[n];\n    \n    for (int i = 0; i < n; i++) {\n        if (realEigen[i] < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        sqrtEigen[i] = Math.sqrt(realEigen[i]);\n    }\n\n    final RealMatrix V = dec.getV();\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigen);\n    final RealMatrix sqrtM = V.multiply(sqrtD).multiply(V.transpose());\n    \n    return sqrtM.scalarMultiply(Math.sqrt(2.0));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..aa6fe3050 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m, 1e-10);\n+    final double[] realEigen = dec.getRealEigenvalues();\n+    final int n = realEigen.length;\n+    final double[] sqrtEigen = new double[n];\n+    \n+    for (int i = 0; i < n; i++) {\n+        if (realEigen[i] < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        sqrtEigen[i] = Math.sqrt(realEigen[i]);\n     }\n+\n+    final RealMatrix V = dec.getV();\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigen);\n+    final RealMatrix sqrtM = V.multiply(sqrtD).multiply(V.transpose());\n+    \n+    return sqrtM.scalarMultiply(Math.sqrt(2.0));\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.5> but was:<1.4999998026575463>",
    "test_result": "FAIL"
}