{
    "patch": "    Set<String> referencedArgNames = Sets.newHashSet();\n    Node fnNode = fnScope.getRootNode();\n    Node argsNode = NodeUtil.getFunctionParameters(fnNode);\n    Preconditions.checkState(fnNode.isFunction());\n\n    Node body = fnNode.getLastChild();\n\n    for (Node sideEffect : referencedSideEffects) {\n      if (!NodeUtil.isImmutableValue(sideEffect)) {\n        continue;\n      }\n\n      Node cur = sideEffect;\n      while (cur.isAssign() || cur.isCast()) {\n        cur = cur.getFirstChild();\n      }\n\n      // Only look for side effects that are inlining candidates.\n      if (!sideEffectReferences.containsKey(cur) ||\n          !sideEffectReferences.get(cur)) {\n        continue;\n      }\n\n      String varName = cur.getString();\n      for (Node arg : argsNode.children()) {\n        if (arg.getString().equals(varName)) {\n          referencedArgNames.add(varName);\n          break;\n        }\n      }\n    }\n\n    int goodArgsCount = 0;\n    for (Node child = argsNode.getFirstChild(); child != null; child = child.getNext()) {\n      if (referencedArgNames.contains(child.getString())) {\n        goodArgsCount++;\n      }\n    }\n\n    // if the number of arguments referenced in the body is the same as the number of good arguments\n    // then we can remove all unused arguments\n    if (goodArgsCount == referencedArgNames.size()) {\n      Iterator<Node> itr = argsNode.children().iterator();\n      while (itr.hasNext()) {\n        Node arg = itr.next();\n        if (!referencedArgNames.contains(arg.getString())) {\n          itr.remove();\n          compiler.reportCodeChange();\n        }\n      }\n    } else if (modifyCallSites\n        && callSiteOptimizer.canModifyCallers(fnNode)) {\n      callSiteOptimizer.optimize(fnScope, referencedSideEffects);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6648e0aa 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,60 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Set<String> referencedArgNames = Sets.newHashSet();\n+    Node fnNode = fnScope.getRootNode();\n+    Node argsNode = NodeUtil.getFunctionParameters(fnNode);\n+    Preconditions.checkState(fnNode.isFunction());\n+\n+    Node body = fnNode.getLastChild();\n+\n+    for (Node sideEffect : referencedSideEffects) {\n+      if (!NodeUtil.isImmutableValue(sideEffect)) {\n+        continue;\n+      }\n+\n+      Node cur = sideEffect;\n+      while (cur.isAssign() || cur.isCast()) {\n+        cur = cur.getFirstChild();\n+      }\n+\n+      // Only look for side effects that are inlining candidates.\n+      if (!sideEffectReferences.containsKey(cur) ||\n+          !sideEffectReferences.get(cur)) {\n+        continue;\n+      }\n+\n+      String varName = cur.getString();\n+      for (Node arg : argsNode.children()) {\n+        if (arg.getString().equals(varName)) {\n+          referencedArgNames.add(varName);\n+          break;\n+        }\n+      }\n+    }\n+\n+    int goodArgsCount = 0;\n+    for (Node child = argsNode.getFirstChild(); child != null; child = child.getNext()) {\n+      if (referencedArgNames.contains(child.getString())) {\n+        goodArgsCount++;\n+      }\n+    }\n+\n+    // if the number of arguments referenced in the body is the same as the number of good arguments\n+    // then we can remove all unused arguments\n+    if (goodArgsCount == referencedArgNames.size()) {\n+      Iterator<Node> itr = argsNode.children().iterator();\n+      while (itr.hasNext()) {\n+        Node arg = itr.next();\n+        if (!referencedArgNames.contains(arg.getString())) {\n+          itr.remove();\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    } else if (modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(fnNode)) {\n+      callSiteOptimizer.optimize(fnScope, referencedSideEffects);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}