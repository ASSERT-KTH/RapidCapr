{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        // handle special case where adding/subtracting months cross the month boundary\n        if (fieldIndex == DateTimeFieldType.monthOfYear().getDurationType().getFieldIndex()) {\n            int year = iChronology.year().get(instant);\n            int month = iChronology.monthOfYear().get(instant);\n            int day = iChronology.dayOfMonth().get(instant);\n            // subtract a month\n            month += valueToAdd;\n            if (month <= 0) {\n                int years = month / 12 - 1;\n                year += years;\n                month += 12 * years;\n            }\n            // check if the new date is valid\n            int maxDays = iChronology.dayOfMonth().getMaximumValue(year, month);\n            if (day > maxDays) {\n                day = maxDays;\n            }\n            // set the new date\n            instant = iChronology.yearMonthDay().getDateTimeMillis(year, month, day, 0);\n        } else {\n            instant = add(instant, valueToAdd);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..5244a833 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,45 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        // handle special case where adding/subtracting months cross the month boundary\n+        if (fieldIndex == DateTimeFieldType.monthOfYear().getDurationType().getFieldIndex()) {\n+            int year = iChronology.year().get(instant);\n+            int month = iChronology.monthOfYear().get(instant);\n+            int day = iChronology.dayOfMonth().get(instant);\n+            // subtract a month\n+            month += valueToAdd;\n+            if (month <= 0) {\n+                int years = month / 12 - 1;\n+                year += years;\n+                month += 12 * years;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            // check if the new date is valid\n+            int maxDays = iChronology.dayOfMonth().getMaximumValue(year, month);\n+            if (day > maxDays) {\n+                day = maxDays;\n+            }\n+            // set the new date\n+            instant = iChronology.yearMonthDay().getDateTimeMillis(year, month, day, 0);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            instant = add(instant, valueToAdd);\n         }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}