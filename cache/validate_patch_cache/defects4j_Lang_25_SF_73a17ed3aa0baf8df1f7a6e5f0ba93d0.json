{
    "patch": "\npublic static String unescape(String input) {\n    StringBuilder output = new StringBuilder();\n    for(int i=0;i<input.length();i++) {\n        char ch = input.charAt(i);\n        if(ch == '\\\\') {\n            i++;\n            if(i>=input.length()) {\n                throw new IllegalArgumentException(\"Invalid escape sequence at end of input: \"+input.substring(i-1));\n            }\n            char escapedChar = input.charAt(i);\n            switch(escapedChar) {\n                case '\\\\':\n                    output.append('\\\\');\n                    break;\n                case 'n':\n                    output.append('\\n');\n                    break;\n                case 'r':\n                    output.append('\\r');\n                    break;\n                case 't':\n                    output.append('\\t');\n                    break;\n                case 'b':\n                    output.append('\\b');\n                    break;\n                case 'f':\n                    output.append('\\f');\n                    break;\n                case '\\'':\n                    output.append('\\'');\n                    break;\n                case '\\\"':\n                    output.append('\\\"');\n                    break;\n                case '0': case '1': case '2': case '3':\n                case '4': case '5': case '6': case '7':\n                    int octalValue = escapedChar - '0';\n                    int maxDigits = (input.length()-i-1 < 2) ? input.length()-i-1 : 2;\n                    for(int j=0;j<maxDigits;j++) {\n                        i++;\n                        if(i>=input.length()) {\n                            break;\n                        }\n                        char nextChar = input.charAt(i);\n                        if(nextChar >= '0' && nextChar <= '7') {\n                            octalValue = octalValue * 8 + (nextChar - '0');\n                        }\n                        else {\n                            i--;\n                            break;\n                        }\n                    }\n                    output.append((char)octalValue);\n                    break;\n                case 'u':\n                    if(i+4 >= input.length()) {\n                        throw new IllegalArgumentException(\"Invalid unicode sequence at end of input: \"+input.substring(i-1));\n                    }\n                    int unicodeValue = 0;\n                    for(int j=0;j<4;j++) {\n                        i++;\n                        char nextChar = input.charAt(i);\n                        int digitValue;\n                        if(nextChar >= '0' && nextChar <= '9') {\n                            digitValue = nextChar - '0';\n                        }\n                        else if(nextChar >= 'a' && nextChar <= 'f') {\n                            digitValue = nextChar - 'a' + 10;\n                        }\n                        else if(nextChar >= 'A' && nextChar <= 'F') {\n                            digitValue = nextChar - 'A' + 10;\n                        }\n                        else {\n                            throw new IllegalArgumentException(\"Invalid hex digit in unicode sequence: \"+nextChar);\n                        }\n                        unicodeValue = unicodeValue * 16 + digitValue;\n                    }\n                    output.append((char)unicodeValue);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unrecognized escape character: \\\\\"+escapedChar);\n            }\n        }\n        else {\n            output.append(ch);\n        }\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..204891dd 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,97 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n+public static String unescape(String input) {\n+    StringBuilder output = new StringBuilder();\n+    for(int i=0;i<input.length();i++) {\n+        char ch = input.charAt(i);\n+        if(ch == '\\\\') {\n+            i++;\n+            if(i>=input.length()) {\n+                throw new IllegalArgumentException(\"Invalid escape sequence at end of input: \"+input.substring(i-1));\n+            }\n+            char escapedChar = input.charAt(i);\n+            switch(escapedChar) {\n+                case '\\\\':\n+                    output.append('\\\\');\n+                    break;\n+                case 'n':\n+                    output.append('\\n');\n+                    break;\n+                case 'r':\n+                    output.append('\\r');\n+                    break;\n+                case 't':\n+                    output.append('\\t');\n+                    break;\n+                case 'b':\n+                    output.append('\\b');\n+                    break;\n+                case 'f':\n+                    output.append('\\f');\n+                    break;\n+                case '\\'':\n+                    output.append('\\'');\n+                    break;\n+                case '\\\"':\n+                    output.append('\\\"');\n+                    break;\n+                case '0': case '1': case '2': case '3':\n+                case '4': case '5': case '6': case '7':\n+                    int octalValue = escapedChar - '0';\n+                    int maxDigits = (input.length()-i-1 < 2) ? input.length()-i-1 : 2;\n+                    for(int j=0;j<maxDigits;j++) {\n+                        i++;\n+                        if(i>=input.length()) {\n+                            break;\n+                        }\n+                        char nextChar = input.charAt(i);\n+                        if(nextChar >= '0' && nextChar <= '7') {\n+                            octalValue = octalValue * 8 + (nextChar - '0');\n+                        }\n+                        else {\n+                            i--;\n+                            break;\n+                        }\n+                    }\n+                    output.append((char)octalValue);\n+                    break;\n+                case 'u':\n+                    if(i+4 >= input.length()) {\n+                        throw new IllegalArgumentException(\"Invalid unicode sequence at end of input: \"+input.substring(i-1));\n+                    }\n+                    int unicodeValue = 0;\n+                    for(int j=0;j<4;j++) {\n+                        i++;\n+                        char nextChar = input.charAt(i);\n+                        int digitValue;\n+                        if(nextChar >= '0' && nextChar <= '9') {\n+                            digitValue = nextChar - '0';\n+                        }\n+                        else if(nextChar >= 'a' && nextChar <= 'f') {\n+                            digitValue = nextChar - 'a' + 10;\n+                        }\n+                        else if(nextChar >= 'A' && nextChar <= 'F') {\n+                            digitValue = nextChar - 'A' + 10;\n+                        }\n+                        else {\n+                            throw new IllegalArgumentException(\"Invalid hex digit in unicode sequence: \"+nextChar);\n+                        }\n+                        unicodeValue = unicodeValue * 16 + digitValue;\n+                    }\n+                    output.append((char)unicodeValue);\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unrecognized escape character: \\\\\"+escapedChar);\n+            }\n+        }\n+        else {\n+            output.append(ch);\n+        }\n+    }\n+    return output.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}