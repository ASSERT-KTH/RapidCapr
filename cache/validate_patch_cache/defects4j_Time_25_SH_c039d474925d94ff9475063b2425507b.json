{
    "patch": "                // on or after the transition                \n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    int minOffset = (offsetLocal < offsetAdjusted) ? offsetLocal : offsetAdjusted;\n                    int maxOffset = (offsetLocal > offsetAdjusted) ? offsetLocal : offsetAdjusted;\n                    if ((instantLocal - nextLocal) < (nextAdjusted - instantLocal)) {\n                        return minOffset;\n                    } else {\n                        return maxOffset;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..c4e43b9a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,17 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // on or after the transition                \n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    int minOffset = (offsetLocal < offsetAdjusted) ? offsetLocal : offsetAdjusted;\n+                    int maxOffset = (offsetLocal > offsetAdjusted) ? offsetLocal : offsetAdjusted;\n+                    if ((instantLocal - nextLocal) < (nextAdjusted - instantLocal)) {\n+                        return minOffset;\n+                    } else {\n+                        return maxOffset;\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}