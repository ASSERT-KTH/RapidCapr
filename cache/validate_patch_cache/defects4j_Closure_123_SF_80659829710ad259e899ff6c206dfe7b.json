{
    "patch": "public static String addInOperator(String input) {\n    String patternStr = \"for\\\\s*\\\\(([^;]*;[^;]*;[^;]*)\\\\)\";\n    Pattern pattern = Pattern.compile(patternStr);\n\n    Matcher matcher = pattern.matcher(input);\n\n    StringBuffer result = new StringBuffer();\n\n    while (matcher.find()) {\n        String matchedString = matcher.group();\n        String[] parts = matchedString.split(\";\");\n\n        parts[1] = parts[1].trim() + (parts[1].contains(\"in\") ? \"\" : \" in\");\n\n        matchedString = String.join(\";\", parts);\n        matcher.appendReplacement(result, matchedString);\n    }\n\n    matcher.appendTail(result);\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..61b695b2 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,27 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String addInOperator(String input) {\n+    String patternStr = \"for\\\\s*\\\\(([^;]*;[^;]*;[^;]*)\\\\)\";\n+    Pattern pattern = Pattern.compile(patternStr);\n+\n+    Matcher matcher = pattern.matcher(input);\n+\n+    StringBuffer result = new StringBuffer();\n+\n+    while (matcher.find()) {\n+        String matchedString = matcher.group();\n+        String[] parts = matchedString.split(\";\");\n+\n+        parts[1] = parts[1].trim() + (parts[1].contains(\"in\") ? \"\" : \" in\");\n+\n+        matchedString = String.join(\";\", parts);\n+        matcher.appendReplacement(result, matchedString);\n+    }\n+\n+    matcher.appendTail(result);\n+    return result.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}