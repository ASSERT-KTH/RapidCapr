{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n\n  // Keep track of the function scope.\n  Scope functionScope = null;\n  Node functionNode = null;\n  NodeTraversal.ScopedCallback changeScope = new NodeTraversal.AbstractScopedCallback() {\n    @Override\n    public void enterScope(NodeTraversal t) {\n      functionScope = t.getScope();\n      functionNode = t.getScopeRoot();\n    }\n\n    @Override\n    public void exitScope(NodeTraversal t) {\n      functionScope = functionScope.getParent();\n      functionNode = functionScope == null ? null : functionScope.getRootNode();\n    }\n  };\n\n  NodeTraversal.traverseEs6ScopeRoots(t, changeScope);\n\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n\n    if (!v.isLocal() || !n.isName()) {\n      continue;\n    }\n\n    // Check if the variable is a simple alias declared with `var`.\n    Node parent = n.getParent();\n    boolean isSimpleAlias = parent != null && parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName();\n    boolean isShorthandAlias = functionScope != null && v.getParentNode().isParamList() && v.getNameNode() != null && v.getNameNode().hasOneChild() && v.getNameNode().getFirstChild().isQualifiedName();\n    boolean isAlias = isSimpleAlias || isShorthandAlias;\n\n    if (isAlias) {\n      // If the variable is an alias, get its qualified name.\n      String name = n.getString();\n      Var aliasVar = scope.getVar(name);\n      Node value = aliasVar.getInitialValue();\n      if (value != null && value.isQualifiedName()) {\n        String qualifiedName = value.getQualifiedName();\n        aliases.put(name, aliasVar);\n        transformation.addAlias(name, qualifiedName);\n      }\n    } else if (functionNode != null && NodeUtil.isWithinFunction(n.getParent(), functionNode) && !v.isArguments()) {\n      // Check if the variable is a local variable declared inside a function.\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..ae6967ba 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,57 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+\n+  // Keep track of the function scope.\n+  Scope functionScope = null;\n+  Node functionNode = null;\n+  NodeTraversal.ScopedCallback changeScope = new NodeTraversal.AbstractScopedCallback() {\n+    @Override\n+    public void enterScope(NodeTraversal t) {\n+      functionScope = t.getScope();\n+      functionNode = t.getScopeRoot();\n+    }\n+\n+    @Override\n+    public void exitScope(NodeTraversal t) {\n+      functionScope = functionScope.getParent();\n+      functionNode = functionScope == null ? null : functionScope.getRootNode();\n+    }\n+  };\n+\n+  NodeTraversal.traverseEs6ScopeRoots(t, changeScope);\n+\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+\n+    if (!v.isLocal() || !n.isName()) {\n+      continue;\n+    }\n+\n+    // Check if the variable is a simple alias declared with `var`.\n+    Node parent = n.getParent();\n+    boolean isSimpleAlias = parent != null && parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName();\n+    boolean isShorthandAlias = functionScope != null && v.getParentNode().isParamList() && v.getNameNode() != null && v.getNameNode().hasOneChild() && v.getNameNode().getFirstChild().isQualifiedName();\n+    boolean isAlias = isSimpleAlias || isShorthandAlias;\n+\n+    if (isAlias) {\n+      // If the variable is an alias, get its qualified name.\n+      String name = n.getString();\n+      Var aliasVar = scope.getVar(name);\n+      Node value = aliasVar.getInitialValue();\n+      if (value != null && value.isQualifiedName()) {\n+        String qualifiedName = value.getQualifiedName();\n+        aliases.put(name, aliasVar);\n+        transformation.addAlias(name, qualifiedName);\n       }\n+    } else if (functionNode != null && NodeUtil.isWithinFunction(n.getParent(), functionNode) && !v.isArguments()) {\n+      // Check if the variable is a local variable declared inside a function.\n+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: <anonymous com.google.javascript.jscomp.ScopedAliases$Traversal$2> is not abstract and does not override abstract method visit(NodeTraversal,Node,Node) in Callback",
    "test_result": "ERROR"
}