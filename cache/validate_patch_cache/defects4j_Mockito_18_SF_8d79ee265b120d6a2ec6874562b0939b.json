{
    "patch": "public static boolean isPalindrome(String string) {\n    if (string == null) {\n        return false;\n    }\n\n    int length = string.length();\n    for (int i = 0; i < length / 2; i++) {\n        if (string.charAt(i) != string.charAt(length - i - 1)) {\n            return false;\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..0b2a270f9 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,20 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static boolean isPalindrome(String string) {\n+    if (string == null) {\n+        return false;\n+    }\n+\n+    int length = string.length();\n+    for (int i = 0; i < length / 2; i++) {\n+        if (string.charAt(i) != string.charAt(length - i - 1)) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}