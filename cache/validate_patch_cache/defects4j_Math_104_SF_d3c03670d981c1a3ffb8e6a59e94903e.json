{
    "patch": "import org.apache.commons.math3.special.Gamma;\n\npublic class GammaFunction {\n\n    /**\n     * Computes the value of the regularized gamma function P(a, x) using the continued fraction representation.\n     *\n     * @param a the shape parameter\n     * @param x the value at which to evaluate the function\n     * @return the value of the function P(a,x)\n     */\n    public static double regularizedGamma(double a, double x) throws IllegalArgumentException {\n        if (a <= 0.0) {\n            throw new IllegalArgumentException(\"Shape parameter a must be positive.\");\n        }\n        if (x < 0.0) {\n            throw new IllegalArgumentException(\"Value x cannot be negative.\");\n        }\n\n        double epsilon = 10e-15;\n        double maxIterations = 100;\n        double am1 = a - 1.0;\n        double ap = a + 1.0;\n        double c = 1.0;\n        double d = 1.0 / (1.0 - am1 * x / ap);\n\n        double delta = d;\n        for (int i = 1; i < maxIterations; i++) {\n            double b = i * (ap - i);\n            c = b * c + am1;\n            d = 1.0 / (b * d + am1);\n            delta *= c * d;\n            double ratio = delta / epsilon;\n            if ((ratio * ratio) < 1.0) {\n                double actualP = Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * delta;\n \t\t        return actualP;\n \t        }\n        }\n        throw new ArithmeticException(\"Continued fraction failed to converge.\");\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..6196ab242 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,47 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class GammaFunction {\n+\n+    /**\n+     * Computes the value of the regularized gamma function P(a, x) using the continued fraction representation.\n+     *\n+     * @param a the shape parameter\n+     * @param x the value at which to evaluate the function\n+     * @return the value of the function P(a,x)\n+     */\n+    public static double regularizedGamma(double a, double x) throws IllegalArgumentException {\n+        if (a <= 0.0) {\n+            throw new IllegalArgumentException(\"Shape parameter a must be positive.\");\n+        }\n+        if (x < 0.0) {\n+            throw new IllegalArgumentException(\"Value x cannot be negative.\");\n+        }\n+\n+        double epsilon = 10e-15;\n+        double maxIterations = 100;\n+        double am1 = a - 1.0;\n+        double ap = a + 1.0;\n+        double c = 1.0;\n+        double d = 1.0 / (1.0 - am1 * x / ap);\n+\n+        double delta = d;\n+        for (int i = 1; i < maxIterations; i++) {\n+            double b = i * (ap - i);\n+            c = b * c + am1;\n+            d = 1.0 / (b * d + am1);\n+            delta *= c * d;\n+            double ratio = delta / epsilon;\n+            if ((ratio * ratio) < 1.0) {\n+                double actualP = Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * delta;\n+ \t\t        return actualP;\n+ \t        }\n+        }\n+        throw new ArithmeticException(\"Continued fraction failed to converge.\");\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}