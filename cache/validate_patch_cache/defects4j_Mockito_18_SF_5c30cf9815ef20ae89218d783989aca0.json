{
    "patch": "public static Iterable<Character> findDuplicates(String inputString) {\n    Map<Character, Integer> charCountMap = new HashMap<>(); \n    char[] strArray = inputString.toCharArray(); \n    for (char c : strArray) { \n        charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1); \n    } \n    List<Character> duplicates = new ArrayList<>(); \n    for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) { \n        if (entry.getValue() > 1) { \n            duplicates.add(entry.getKey()); \n        } \n    } \n    return duplicates; \n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..a94bb199b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,20 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Iterable<Character> findDuplicates(String inputString) {\n+    Map<Character, Integer> charCountMap = new HashMap<>(); \n+    char[] strArray = inputString.toCharArray(); \n+    for (char c : strArray) { \n+        charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1); \n+    } \n+    List<Character> duplicates = new ArrayList<>(); \n+    for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) { \n+        if (entry.getValue() > 1) { \n+            duplicates.add(entry.getKey()); \n+        } \n+    } \n+    return duplicates; \n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}