{
    "patch": "      Node last = n.getSecondChild().getLastChild();\n      if (last.hasChildren()) {\n        Node lastChild = last.getLastChild();\n        if (lastChild.getType() == Token.GETPROP &&\n            lastChild.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..fa69a744 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,13 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node last = n.getSecondChild().getLastChild();\n+      if (last.hasChildren()) {\n+        Node lastChild = last.getLastChild();\n+        if (lastChild.getType() == Token.GETPROP &&\n+            lastChild.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}