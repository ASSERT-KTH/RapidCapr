{
    "patch": "            // check if we are near a DST boundary\n            // if yes, return the correct offset\n            long prevTransition = previousTransition(instantAdjusted);\n            long nextTransition = nextTransition(instantAdjusted);\n            if (prevTransition == nextTransition) {\n                // if instantAdjusted is at the boundary, return the offset at that boundary\n                return getOffset(prevTransition);\n            }\n            int prevOffset = getOffset(prevTransition);\n            int nextOffset = getOffset(nextTransition);\n            if (prevOffset < nextOffset) {\n                // if we are in an overlap (gap), return the larger (later) offset\n                if (offsetLocal < nextOffset) {\n                    return nextOffset;\n                }\n            } else if (prevOffset > nextOffset) {\n                // if we are in a gap (overlap), return the earlier offset\n                if (offsetLocal >= prevOffset) {\n                    return prevOffset;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1100c05c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // check if we are near a DST boundary\n+            // if yes, return the correct offset\n+            long prevTransition = previousTransition(instantAdjusted);\n+            long nextTransition = nextTransition(instantAdjusted);\n+            if (prevTransition == nextTransition) {\n+                // if instantAdjusted is at the boundary, return the offset at that boundary\n+                return getOffset(prevTransition);\n+            }\n+            int prevOffset = getOffset(prevTransition);\n+            int nextOffset = getOffset(nextTransition);\n+            if (prevOffset < nextOffset) {\n+                // if we are in an overlap (gap), return the larger (later) offset\n+                if (offsetLocal < nextOffset) {\n+                    return nextOffset;\n+                }\n+            } else if (prevOffset > nextOffset) {\n+                // if we are in a gap (overlap), return the earlier offset\n+                if (offsetLocal >= prevOffset) {\n+                    return prevOffset;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}