{
    "patch": "  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    // \",\" is the default, it doesn't need to be explicit\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    boolean hasNonConstantOrEmptyElements = false;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        String stringValue = NodeUtil.getArrayElementStringValue(elem);\n        if (\"\".equals(stringValue)) {\n          arrayFoldedChildren.add(NodeUtil.newStringNode(\"\", elem));\n        } else {\n          arrayFoldedChildren.add(NodeUtil.newStringNode(stringValue, elem));\n          hasNonConstantOrEmptyElements = true;\n        }\n      } else if (elem.getType() == Token.EMPTY) {\n        arrayFoldedChildren.add(NodeUtil.newStringNode(\"\", elem));\n      } else {\n        arrayFoldedChildren.add(elem);\n        hasNonConstantOrEmptyElements = true;\n      }\n      elem = elem.getNext();\n    }\n\n    if (!hasNonConstantOrEmptyElements) {\n      Node emptyStringNode = Node.newString(\"\");\n      n.getParent().replaceChild(n, emptyStringNode);\n      reportCodeChange();\n      return emptyStringNode;\n    }\n    if (arrayFoldedChildren.isEmpty()) {\n      return n;\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    int elementsCount = arrayFoldedChildren.size();\n    if (elementsCount == 1) {\n      Node foldedStringNode = arrayFoldedChildren.get(0);\n      if (foldedStringNode.getType() != Token.STRING) {\n        // If the Node is not a string literal, ensure that it is coerced to a string.\n        foldedStringNode = IR.add(Node.newString(\"\").copyInformationFrom(n), foldedStringNode);\n        foldedStringNode.copyInformationFrom(n);\n      }\n      int foldedSize = InlineCostEstimator.getCost(foldedStringNode);\n      if (foldedSize <= originalSize) {\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      }\n    } else {\n      // Avoid adding a redundant empty string when joinString. We prefer using NodeUtil.newStringNode,\n      // intended for this case.\n      Node firstElement = arrayFoldedChildren.get(0);\n      Node concatenation =\n          NodeUtil.newStringNode(NodeUtil.getArrayElementStringValue(firstElement), firstElement);\n      for (int i = 1; i < elementsCount; i++) {\n        if (joinString.length() == 0) {\n          concatenation = new Node(Token.ADD, concatenation, arrayFoldedChildren.get(i));\n        } else {\n          concatenation =\n              new Node(Token.ADD, concatenation, Node.newString(joinString), arrayFoldedChildren.get(i));\n        }\n        concatenation.copyInformationFrom(n);\n      }\n      int foldedSize = InlineCostEstimator.getCost(concatenation);\n      if (foldedSize <= originalSize) {\n        n.getParent().replaceChild(n, concatenation);\n        reportCodeChange();\n        return concatenation;\n      }\n    }\n\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..a42178e8 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -381,95 +381,80 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     Node arrayNode = callTarget.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n+    // \",\" is the default, it doesn't need to be explicit\n     String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n+    boolean hasNonConstantOrEmptyElements = false;\n     Node elem = arrayNode.getFirstChild();\n     // Merges adjacent String nodes.\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n+      if (NodeUtil.isImmutableValue(elem)) {\n+        String stringValue = NodeUtil.getArrayElementStringValue(elem);\n+        if (\"\".equals(stringValue)) {\n+          arrayFoldedChildren.add(NodeUtil.newStringNode(\"\", elem));\n         } else {\n-          sb.append(joinString);\n+          arrayFoldedChildren.add(NodeUtil.newStringNode(stringValue, elem));\n+          hasNonConstantOrEmptyElements = true;\n         }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n+      } else if (elem.getType() == Token.EMPTY) {\n+        arrayFoldedChildren.add(NodeUtil.newStringNode(\"\", elem));\n       } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n+        hasNonConstantOrEmptyElements = true;\n       }\n-      prev = elem;\n       elem = elem.getNext();\n     }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+    if (!hasNonConstantOrEmptyElements) {\n+      Node emptyStringNode = Node.newString(\"\");\n+      n.getParent().replaceChild(n, emptyStringNode);\n+      reportCodeChange();\n+      return emptyStringNode;\n+    }\n+    if (arrayFoldedChildren.isEmpty()) {\n+      return n;\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n     int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n+    int elementsCount = arrayFoldedChildren.size();\n+    if (elementsCount == 1) {\n+      Node foldedStringNode = arrayFoldedChildren.get(0);\n+      if (foldedStringNode.getType() != Token.STRING) {\n+        // If the Node is not a string literal, ensure that it is coerced to a string.\n+        foldedStringNode = IR.add(Node.newString(\"\").copyInformationFrom(n), foldedStringNode);\n+        foldedStringNode.copyInformationFrom(n);\n+      }\n+      int foldedSize = InlineCostEstimator.getCost(foldedStringNode);\n+      if (foldedSize <= originalSize) {\n         n.getParent().replaceChild(n, foldedStringNode);\n         reportCodeChange();\n         return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n+      }\n+    } else {\n+      // Avoid adding a redundant empty string when joinString. We prefer using NodeUtil.newStringNode,\n+      // intended for this case.\n+      Node firstElement = arrayFoldedChildren.get(0);\n+      Node concatenation =\n+          NodeUtil.newStringNode(NodeUtil.getArrayElementStringValue(firstElement), firstElement);\n+      for (int i = 1; i < elementsCount; i++) {\n+        if (joinString.length() == 0) {\n+          concatenation = new Node(Token.ADD, concatenation, arrayFoldedChildren.get(i));\n+        } else {\n+          concatenation =\n+              new Node(Token.ADD, concatenation, Node.newString(joinString), arrayFoldedChildren.get(i));\n         }\n+        concatenation.copyInformationFrom(n);\n+      }\n+      int foldedSize = InlineCostEstimator.getCost(concatenation);\n+      if (foldedSize <= originalSize) {\n+        n.getParent().replaceChild(n, concatenation);\n         reportCodeChange();\n-        break;\n+        return concatenation;\n+      }\n     }\n \n     return n;\n@@ -642,4 +627,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}