{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    \n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    } else {\n        Class<?> typeVariableClass = getTypeVariableClass(typeVariable);\n        if (typeVariableClass != null) {\n            for (TypeVariable<?> classTypeVariable : typeVariableClass.getTypeParameters()) {\n                if (classTypeVariable.getName().equals(typeVariable.getName())) {\n                    readTypeVariables(classTypeVariable);\n                    break;\n                }\n            }\n        }\n    }\n}\n\nprivate Class<?> getTypeVariableClass(TypeVariable<?> typeVariable) {\n    Type type = typeVariable.getGenericDeclaration();\n    if (type instanceof Class) {\n        return (Class<?>) type;\n    } else if (type instanceof TypeVariable) {\n        return getTypeVariableClass((TypeVariable<?>) type);\n    } else {\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..1e30c2908 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,38 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    \n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    } else {\n+        Class<?> typeVariableClass = getTypeVariableClass(typeVariable);\n+        if (typeVariableClass != null) {\n+            for (TypeVariable<?> classTypeVariable : typeVariableClass.getTypeParameters()) {\n+                if (classTypeVariable.getName().equals(typeVariable.getName())) {\n+                    readTypeVariables(classTypeVariable);\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+private Class<?> getTypeVariableClass(TypeVariable<?> typeVariable) {\n+    Type type = typeVariable.getGenericDeclaration();\n+    if (type instanceof Class) {\n+        return (Class<?>) type;\n+    } else if (type instanceof TypeVariable) {\n+        return getTypeVariableClass((TypeVariable<?>) type);\n+    } else {\n+        return null;\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: method readTypeVariables in class TypeVariableReturnType cannot be applied to given types;",
    "test_result": "ERROR"
}