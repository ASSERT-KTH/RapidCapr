{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        DateTimeField fieldType = partial.getField(fieldIndex);\n        long instant = fieldType.add(partial.getChronology().set(partial, 0L), values[fieldIndex], valueToAdd);\n        // Ensure we keep the other fields fixed such as year or day so that date rollovers\n        // such as leap year or month changes are correctly handled.\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i != fieldIndex) {\n                DateTimeField field = partial.getField(i);\n                if (values[i] != field.get(instant)) {\n                    throw new IllegalFieldValueException(field.getType(), values[i], null, null);\n                }\n            }\n        }\n        return partial.getChronology().get(partial, instant);\n    }\n    return super.add(partial, fieldIndex, values, valueToAdd);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..45fc59e9 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,30 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        DateTimeField fieldType = partial.getField(fieldIndex);\n+        long instant = fieldType.add(partial.getChronology().set(partial, 0L), values[fieldIndex], valueToAdd);\n+        // Ensure we keep the other fields fixed such as year or day so that date rollovers\n+        // such as leap year or month changes are correctly handled.\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i != fieldIndex) {\n+                DateTimeField field = partial.getField(i);\n+                if (values[i] != field.get(instant)) {\n+                    throw new IllegalFieldValueException(field.getType(), values[i], null, null);\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return partial.getChronology().get(partial, instant);\n     }\n+    return super.add(partial, fieldIndex, values, valueToAdd);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}