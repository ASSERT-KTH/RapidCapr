{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        int offset = 0;\n        Object nextElement = elementPairs.get(offset + 1);\n        while (!(nextElement instanceof Literal) && offset + 1 < size - 1) {\n            offset++;\n            nextElement = elementPairs.get(offset + 1);\n        }\n\n        List<Object> sublist = elementPairs.subList(offset + 1, size);\n        if (notPrinter) {\n            return new PeriodFormatter(null, new PeriodParserBuilder().append(toFormatter(sublist, true, false)).toParser());\n        } else if (notParser) {\n            return new PeriodFormatter(new PeriodFormatterBuilder().append(toFormatter(sublist, false, true)).toPrinter(), null);\n        } else {\n            PeriodFormatter fmt = toFormatter(sublist, false, false);\n            return new PeriodFormatter(\n                    new PeriodFormatterBuilder().append(sep).append(fmt.getPrinter()).toPrinter(), \n                    new PeriodParserBuilder().append(fmt.getParser()).appendOptional(new PeriodParserBuilder().append(ignore()).toParser()).toParser()\n            );\n        }\n    } else if (size > 0 && elementPairs.get(0) instanceof Literal) {\n        if (size == 1) {\n            return new PeriodFormatter(null, null);\n        }\n        return toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n    } else {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}\n\nprivate static PeriodParser ignore() {\n    return new PeriodParser() {\n        @Override\n        public void parseInto(ReadWritablePeriod period, String text, int position,\n                LocalDate standardLocalDate, DateTimeZone standardChronology, boolean strict) throws IllegalArgumentException {\n        }\n    };\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..0ad7a948 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,38 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        int offset = 0;\n+        Object nextElement = elementPairs.get(offset + 1);\n+        while (!(nextElement instanceof Literal) && offset + 1 < size - 1) {\n+            offset++;\n+            nextElement = elementPairs.get(offset + 1);\n         }\n+\n+        List<Object> sublist = elementPairs.subList(offset + 1, size);\n+        if (notPrinter) {\n+            return new PeriodFormatter(null, new PeriodParserBuilder().append(toFormatter(sublist, true, false)).toParser());\n+        } else if (notParser) {\n+            return new PeriodFormatter(new PeriodFormatterBuilder().append(toFormatter(sublist, false, true)).toPrinter(), null);\n+        } else {\n+            PeriodFormatter fmt = toFormatter(sublist, false, false);\n+            return new PeriodFormatter(\n+                    new PeriodFormatterBuilder().append(sep).append(fmt.getPrinter()).toPrinter(), \n+                    new PeriodParserBuilder().append(fmt.getParser()).appendOptional(new PeriodParserBuilder().append(ignore()).toParser()).toParser()\n+            );\n+        }\n+    } else if (size > 0 && elementPairs.get(0) instanceof Literal) {\n+        if (size == 1) {\n+            return new PeriodFormatter(null, null);\n+        }\n+        return toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n+    } else {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -811,6 +832,16 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}\n+\n+private static PeriodParser ignore() {\n+    return new PeriodParser() {\n+        @Override\n+        public void parseInto(ReadWritablePeriod period, String text, int position,\n+                LocalDate standardLocalDate, DateTimeZone standardChronology, boolean strict) throws IllegalArgumentException {\n+        }\n+    };\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}