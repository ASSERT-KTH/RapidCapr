{
    "patch": "            if (savedFields[i].isSaved()) {\n                long oldMillis = millis;\n                millis = savedFields[i].set(millis, resetFields);\n                if (millis != oldMillis) {\n                    // We need to re-sort if our changes broke the ordering\n                    savedFields = (SavedField[])iSavedFields.clone();\n                    sort(savedFields, count);\n                    for (int j = 0; j < count; j++) {\n                        if (savedFields[j].isSaved()) {\n                            millis = savedFields[j].set(millis, resetFields);\n                        }\n                    }\n                }\n            } else {\n                millis = savedFields[i].set(millis, resetFields);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..22273ca8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,22 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].isSaved()) {\n+                long oldMillis = millis;\n+                millis = savedFields[i].set(millis, resetFields);\n+                if (millis != oldMillis) {\n+                    // We need to re-sort if our changes broke the ordering\n+                    savedFields = (SavedField[])iSavedFields.clone();\n+                    sort(savedFields, count);\n+                    for (int j = 0; j < count; j++) {\n+                        if (savedFields[j].isSaved()) {\n+                            millis = savedFields[j].set(millis, resetFields);\n+                        }\n+                    }\n+                }\n+            } else {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}