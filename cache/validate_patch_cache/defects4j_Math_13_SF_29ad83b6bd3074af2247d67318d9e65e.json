{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final DecompositionSolver solver;\n    if (m.isSquare() && m.isSymmetric() && isPositiveDefinite(m)) {\n        // Use Cholesky decomposition for positive-definite matrices\n        solver = new CholeskyDecomposition(m).getSolver();\n    } else {\n        // Use Eigen decomposition for general matrices\n        solver = new EigenDecomposition(m).getSolver();\n    }\n    final RealMatrix sqrt = solver.getSquareRoot();\n    if (sqrt == null) {\n        // Handle the case where the square root does not exist (e.g., for negative-definite matrices)\n        throw new IllegalArgumentException(\"Square root does not exist\");\n    }\n    // Round small values to zero to reduce memory usage\n    for (int i = 0; i < sqrt.getRowDimension(); i++) {\n        for (int j = 0; j < sqrt.getColumnDimension(); j++) {\n            if (FastMath.abs(sqrt.getEntry(i, j)) < 1e-16) {\n                sqrt.setEntry(i, j, 0.0);\n            }\n        }\n    }\n    return sqrt;\n}\n\nprivate boolean isPositiveDefinite(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] eigenvalues = dec.getRealEigenvalues();\n    for (double eigenvalue : eigenvalues) {\n        if (eigenvalue <= 0) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..e11ae18af 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,39 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final DecompositionSolver solver;\n+    if (m.isSquare() && m.isSymmetric() && isPositiveDefinite(m)) {\n+        // Use Cholesky decomposition for positive-definite matrices\n+        solver = new CholeskyDecomposition(m).getSolver();\n+    } else {\n+        // Use Eigen decomposition for general matrices\n+        solver = new EigenDecomposition(m).getSolver();\n     }\n+    final RealMatrix sqrt = solver.getSquareRoot();\n+    if (sqrt == null) {\n+        // Handle the case where the square root does not exist (e.g., for negative-definite matrices)\n+        throw new IllegalArgumentException(\"Square root does not exist\");\n+    }\n+    // Round small values to zero to reduce memory usage\n+    for (int i = 0; i < sqrt.getRowDimension(); i++) {\n+        for (int j = 0; j < sqrt.getColumnDimension(); j++) {\n+            if (FastMath.abs(sqrt.getEntry(i, j)) < 1e-16) {\n+                sqrt.setEntry(i, j, 0.0);\n+            }\n+        }\n+    }\n+    return sqrt;\n+}\n+\n+private boolean isPositiveDefinite(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] eigenvalues = dec.getRealEigenvalues();\n+    for (double eigenvalue : eigenvalues) {\n+        if (eigenvalue <= 0) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}