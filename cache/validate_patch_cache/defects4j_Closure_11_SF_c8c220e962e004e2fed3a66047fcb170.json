{
    "patch": "public void testGetprop4() {\n    System.setProperty(\"foo\", \"bar\");\n    String[] warnings = new String[0];\n    Configurator.getConfigurator().doConfigure(\"input/mapped/mapped5.xml\", LogManager.getLoggerRepository());\n    assertEquals(\"bar\", LogManager.getLogger(\"a.b.c\").getProperty(\"foo\"));\n    assertEquals(\"bar\", LogManager.getLogger(\"d.e.f\").getProperty(\"foo\"));\n    assertNull(LogManager.getLogger(\"g.h.i\").getProperty(\"foo\"));\n    assertTrue(\"expected a warning\", warnings.length > 0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..d503d088 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() {\n+    System.setProperty(\"foo\", \"bar\");\n+    String[] warnings = new String[0];\n+    Configurator.getConfigurator().doConfigure(\"input/mapped/mapped5.xml\", LogManager.getLoggerRepository());\n+    assertEquals(\"bar\", LogManager.getLogger(\"a.b.c\").getProperty(\"foo\"));\n+    assertEquals(\"bar\", LogManager.getLogger(\"d.e.f\").getProperty(\"foo\"));\n+    assertNull(LogManager.getLogger(\"g.h.i\").getProperty(\"foo\"));\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}