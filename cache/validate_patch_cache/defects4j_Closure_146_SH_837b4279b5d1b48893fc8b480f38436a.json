{
    "patch": "if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        return new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined()); // Fix: return restricted types\n      case FALSE:\n      case UNKNOWN:\n        return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..b65c39e4 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,22 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+if (that instanceof UnionType) {\n+      TypePair p = that.getTypesUnderInequality(this);\n+      return new TypePair(p.typeB, p.typeA);\n+    }\n+\n+    // other types\n+    switch (this.testForEquality(that)) {\n+      case TRUE:\n+        return new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined()); // Fix: return restricted types\n+      case FALSE:\n+      case UNKNOWN:\n+        return new TypePair(this, that);\n+    }\n+\n+    // switch case is exhaustive\n+    throw new IllegalStateException();\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}