{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n        if (i > 0 && savedFields[i].iField.getDurationField()\n                .compareTo(savedFields[i - 1].iField.getDurationField()) > 0) {\n            // The current field is larger than the previous one.\n            // Check if the difference between the values is the\n            // smallest possible value for the difference between\n            // fields, indicating a rollover has occurred.\n            long val1 = savedFields[i].iField.get(savedFields[i].iValue);\n            long val2 = savedFields[i - 1].iField.get(savedFields[i - 1].iValue);\n            long diff = val1 - val2;\n            DurationField range = savedFields[i].iField.getDurationField();\n            if (diff != range.getMinimumValue() % range.getDuration()) {\n                throw new IllegalStateException(\"One of the fields has rolled over too far\");\n            }\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..651c79e6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,30 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+        if (i > 0 && savedFields[i].iField.getDurationField()\n+                .compareTo(savedFields[i - 1].iField.getDurationField()) > 0) {\n+            // The current field is larger than the previous one.\n+            // Check if the difference between the values is the\n+            // smallest possible value for the difference between\n+            // fields, indicating a rollover has occurred.\n+            long val1 = savedFields[i].iField.get(savedFields[i].iValue);\n+            long val2 = savedFields[i - 1].iField.get(savedFields[i - 1].iValue);\n+            long diff = val1 - val2;\n+            DurationField range = savedFields[i].iField.getDurationField();\n+            if (diff != range.getMinimumValue() % range.getDuration()) {\n+                throw new IllegalStateException(\"One of the fields has rolled over too far\");\n+            }\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}