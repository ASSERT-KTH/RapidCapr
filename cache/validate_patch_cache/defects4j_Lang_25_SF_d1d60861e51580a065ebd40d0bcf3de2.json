{
    "patch": "public static String unescape(String str) {\n\n    if (str == null) {\n        return null;\n    }\n    int len = str.length();\n    StringBuilder sb = new StringBuilder(len);\n    for (int i = 0; i < len; ) {\n        char c = str.charAt(i++);\n        if (c == '\\\\') {\n            if (i < len) {\n                c = str.charAt(i++);\n                if (c == 'n') {\n                    c = '\\n';\n                } else if (c == 'r') {\n                    c = '\\r';\n                } else if (c == 't') {\n                    c = '\\t';\n                } else if (c == 'f') {\n                    c = '\\f';\n                } else if (c == 'b') {\n                    c = '\\b';\n                } else if (c == '\\\"') {\n                    c = '\\\"';\n                } else if (c == '\\'') {\n                    c = '\\'';\n                } else if (c == '\\\\') {\n                    c = '\\\\';\n                } else if (c >= '0' && c <= '7') {\n                    int octValue = Character.getNumericValue(c);\n                    if (i < len && str.charAt(i) >= '0' && str.charAt(i) <= '7') {\n                        octValue = octValue * 8 + Character.getNumericValue(str.charAt(i++));\n                        if (i < len && str.charAt(i) >= '0' && str.charAt(i) <= '7') {\n                            octValue = octValue * 8 + Character.getNumericValue(str.charAt(i++));\n                        }\n                    }\n                    c = (char) octValue;\n                    i--;\n                } else {\n                    i--; // eat one character as we already consumed it in when\n                          // invoking str.charAt(i++)\n                }\n            } else {\n                sb.append('\\\\');\n                break; // string ends with a single backslash\n            }\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..61fadf10 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,57 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String str) {\n+\n+    if (str == null) {\n+        return null;\n+    }\n+    int len = str.length();\n+    StringBuilder sb = new StringBuilder(len);\n+    for (int i = 0; i < len; ) {\n+        char c = str.charAt(i++);\n+        if (c == '\\\\') {\n+            if (i < len) {\n+                c = str.charAt(i++);\n+                if (c == 'n') {\n+                    c = '\\n';\n+                } else if (c == 'r') {\n+                    c = '\\r';\n+                } else if (c == 't') {\n+                    c = '\\t';\n+                } else if (c == 'f') {\n+                    c = '\\f';\n+                } else if (c == 'b') {\n+                    c = '\\b';\n+                } else if (c == '\\\"') {\n+                    c = '\\\"';\n+                } else if (c == '\\'') {\n+                    c = '\\'';\n+                } else if (c == '\\\\') {\n+                    c = '\\\\';\n+                } else if (c >= '0' && c <= '7') {\n+                    int octValue = Character.getNumericValue(c);\n+                    if (i < len && str.charAt(i) >= '0' && str.charAt(i) <= '7') {\n+                        octValue = octValue * 8 + Character.getNumericValue(str.charAt(i++));\n+                        if (i < len && str.charAt(i) >= '0' && str.charAt(i) <= '7') {\n+                            octValue = octValue * 8 + Character.getNumericValue(str.charAt(i++));\n+                        }\n+                    }\n+                    c = (char) octValue;\n+                    i--;\n+                } else {\n+                    i--; // eat one character as we already consumed it in when\n+                          // invoking str.charAt(i++)\n+                }\n+            } else {\n+                sb.append('\\\\');\n+                break; // string ends with a single backslash\n+            }\n+        }\n+        sb.append(c);\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}