{
    "patch": "if (functionType.getTypeOfThis() != null) {\n  switch (child.getToken()) {\n    case GETPROP:\n    case OPTCHAIN_GETPROP:\n    case GETELEM:\n    case OPTCHAIN_GETELEM:\n    case CALL:\n    case NEW:\n    case OPTCHAIN_CALL:\n      break;\n    default:\n      report(t, child, INVALID_THIS_TYPE, childType.toString());\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..95e70536 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType.getTypeOfThis() != null) {\n+  switch (child.getToken()) {\n+    case GETPROP:\n+    case OPTCHAIN_GETPROP:\n+    case GETELEM:\n+    case OPTCHAIN_GETELEM:\n+    case CALL:\n+    case NEW:\n+    case OPTCHAIN_CALL:\n+      break;\n+    default:\n+      report(t, child, INVALID_THIS_TYPE, childType.toString());\n+  }\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}