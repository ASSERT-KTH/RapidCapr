{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    List<Node> parameters = functionType.getParameters();\n    Node parameter = null;\n    Node argument = null;\n    int numArgsProvided = 0;\n    int numArgsExpected = parameters.size();\n    boolean varArgsProvided = false;\n    boolean varArgsExpected = functionType.getReturnType() != null;\n\n    for (int i = 0; i < numArgsExpected; i++) {\n        parameter = parameters.get(i);\n        if (parameter.isVarArgs()) {\n            varArgsExpected = true;\n            break;\n        } else if (arguments.hasNext()) {\n            argument = arguments.next();\n            numArgsProvided++;\n            validator.expectArgumentMatchesParameter(t, argument,\n              getJSType(argument), getJSType(parameter), call, numArgsProvided);\n        } else if (!parameter.isOptionalArg()) {\n            // Not enough arguments, report an error.\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                  validator.getReadableJSTypeName(call.getFirstChild(), false),\n                  String.format(\"Function requires at least %d argument(s) and no more than %d argument(s)\",\n                                functionType.getMinArguments(),\n                                functionType.getMaxArguments() == -1 ? Integer.MAX_VALUE : functionType.getMaxArguments()),\n                  String.format(\"called with [%d argument(s)]\", numArgsProvided),\n                  String.format(\"Missing required argument %s at position %d\", parameter.getString(), i + 1));\n            return;\n        }\n    }\n\n    if (varArgsExpected) {\n        if (!parameter.isVarArgs()) {\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                  validator.getReadableJSTypeName(call.getFirstChild(), false),\n                  String.format(\"Function takes no more than %d argument(s)\", numArgsProvided),\n                  String.format(\"called with [%d argument(s)]. Function requires at least %d argument(s) and additional var_args.\",\n                                numArgsProvided,\n                                functionType.getMinArguments()),\n                  \"\");\n            return;\n        }\n        JSType varArgType = parameter.getDeclaredTypeOfArrayElements();\n        while (arguments.hasNext()) {\n            argument = arguments.next();\n            numArgsProvided++;\n            validator.expectArgumentMatchesParameter(t, argument,\n              getJSType(argument), varArgType, call, numArgsProvided);\n        }\n        varArgsProvided = true;\n    } else if (arguments.hasNext()) {\n        // Too many arguments, report an error.\n        report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.format(\"Function takes no more than %d argument(s)\", numArgsExpected),\n              String.format(\"called with [%d argument(s)]\", numArgsProvided),\n              \"\");\n        return;\n    } else if (numArgsProvided < numArgsExpected) {\n        // Check if there are un-visited parameters (meaning they are optional).\n        for (int i = numArgsProvided; i < numArgsExpected; i++) {\n            parameter = parameters.get(i);\n            if (!parameter.isOptionalArg()) {\n                report(t, call, WRONG_ARGUMENT_COUNT,\n                      validator.getReadableJSTypeName(call.getFirstChild(), false),\n                      String.format(\"Function requires at least %d argument(s) and no more than %d argument(s)\",\n                                    functionType.getMinArguments(),\n                                    functionType.getMaxArguments() == -1 ? Integer.MAX_VALUE : functionType.getMaxArguments()),\n                      String.format(\"called with [%d argument(s)]\", numArgsProvided),\n                      String.format(\"Missing required argument %s at position %d\", parameter.getString(), i + 1));\n                return;\n            }\n        }\n    }\n\n    // report number of varargs provided.\n    if (varArgsExpected && varArgsProvided) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.format(\"Function takes no more than %d argument(s)\", numArgsProvided),\n              String.format(\"called with [%d argument(s)] and %d var_args.\", numArgsProvided, numArgsProvided - numArgsExpected),\n              \"\");\n        return;\n    }\n\n    // Check if there are any additional required parameters. \n    if (numArgsProvided == numArgsExpected) {\n        for (int i = numArgsExpected; i < parameters.size(); i++) {\n            parameter = parameters.get(i);\n            if (!parameter.isOptionalArg()) {\n                report(t, call, WRONG_ARGUMENT_COUNT,\n                      validator.getReadableJSTypeName(call.getFirstChild(), false),\n                      String.format(\"Function requires at least %d argument(s) and no more than %d argument(s)\",\n                                    functionType.getMinArguments(),\n                                    functionType.getMaxArguments() == -1 ? Integer.MAX_VALUE : functionType.getMaxArguments()),\n                      String.format(\"called with [%d argument(s)]\", numArgsProvided),\n                      String.format(\"Missing required argument %s at position %d\", parameter.getString(), i + 1));\n                return;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..32cdcbe3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,113 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n+    List<Node> parameters = functionType.getParameters();\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+    int numArgsProvided = 0;\n+    int numArgsExpected = parameters.size();\n+    boolean varArgsProvided = false;\n+    boolean varArgsExpected = functionType.getReturnType() != null;\n+\n+    for (int i = 0; i < numArgsExpected; i++) {\n+        parameter = parameters.get(i);\n+        if (parameter.isVarArgs()) {\n+            varArgsExpected = true;\n+            break;\n+        } else if (arguments.hasNext()) {\n+            argument = arguments.next();\n+            numArgsProvided++;\n+            validator.expectArgumentMatchesParameter(t, argument,\n+              getJSType(argument), getJSType(parameter), call, numArgsProvided);\n+        } else if (!parameter.isOptionalArg()) {\n+            // Not enough arguments, report an error.\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                  validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                  String.format(\"Function requires at least %d argument(s) and no more than %d argument(s)\",\n+                                functionType.getMinArguments(),\n+                                functionType.getMaxArguments() == -1 ? Integer.MAX_VALUE : functionType.getMaxArguments()),\n+                  String.format(\"called with [%d argument(s)]\", numArgsProvided),\n+                  String.format(\"Missing required argument %s at position %d\", parameter.getString(), i + 1));\n+            return;\n+        }\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n+    if (varArgsExpected) {\n+        if (!parameter.isVarArgs()) {\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                  validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                  String.format(\"Function takes no more than %d argument(s)\", numArgsProvided),\n+                  String.format(\"called with [%d argument(s)]. Function requires at least %d argument(s) and additional var_args.\",\n+                                numArgsProvided,\n+                                functionType.getMinArguments()),\n+                  \"\");\n+            return;\n+        }\n+        JSType varArgType = parameter.getDeclaredTypeOfArrayElements();\n+        while (arguments.hasNext()) {\n+            argument = arguments.next();\n+            numArgsProvided++;\n+            validator.expectArgumentMatchesParameter(t, argument,\n+              getJSType(argument), varArgType, call, numArgsProvided);\n+        }\n+        varArgsProvided = true;\n+    } else if (arguments.hasNext()) {\n+        // Too many arguments, report an error.\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+              String.format(\"Function takes no more than %d argument(s)\", numArgsExpected),\n+              String.format(\"called with [%d argument(s)]\", numArgsProvided),\n+              \"\");\n+        return;\n+    } else if (numArgsProvided < numArgsExpected) {\n+        // Check if there are un-visited parameters (meaning they are optional).\n+        for (int i = numArgsProvided; i < numArgsExpected; i++) {\n+            parameter = parameters.get(i);\n+            if (!parameter.isOptionalArg()) {\n+                report(t, call, WRONG_ARGUMENT_COUNT,\n+                      validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                      String.format(\"Function requires at least %d argument(s) and no more than %d argument(s)\",\n+                                    functionType.getMinArguments(),\n+                                    functionType.getMaxArguments() == -1 ? Integer.MAX_VALUE : functionType.getMaxArguments()),\n+                      String.format(\"called with [%d argument(s)]\", numArgsProvided),\n+                      String.format(\"Missing required argument %s at position %d\", parameter.getString(), i + 1));\n+                return;\n+            }\n+        }\n     }\n-  }\n+\n+    // report number of varargs provided.\n+    if (varArgsExpected && varArgsProvided) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.format(\"Function takes no more than %d argument(s)\", numArgsProvided),\n+              String.format(\"called with [%d argument(s)] and %d var_args.\", numArgsProvided, numArgsProvided - numArgsExpected),\n+              \"\");\n+        return;\n+    }\n+\n+    // Check if there are any additional required parameters. \n+    if (numArgsProvided == numArgsExpected) {\n+        for (int i = numArgsExpected; i < parameters.size(); i++) {\n+            parameter = parameters.get(i);\n+            if (!parameter.isOptionalArg()) {\n+                report(t, call, WRONG_ARGUMENT_COUNT,\n+                      validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                      String.format(\"Function requires at least %d argument(s) and no more than %d argument(s)\",\n+                                    functionType.getMinArguments(),\n+                                    functionType.getMaxArguments() == -1 ? Integer.MAX_VALUE : functionType.getMaxArguments()),\n+                      String.format(\"called with [%d argument(s)]\", numArgsProvided),\n+                      String.format(\"Missing required argument %s at position %d\", parameter.getString(), i + 1));\n+                return;\n+            }\n+        }\n+    }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}