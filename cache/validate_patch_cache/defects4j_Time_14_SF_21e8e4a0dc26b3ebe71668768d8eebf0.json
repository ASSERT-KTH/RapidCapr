{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex && partial.getFieldType(i) instanceof DateTimeFieldType) {\n                DateTimeFieldType type = (DateTimeFieldType) partial.getFieldType(i);\n                if (type.getName().equals(\"monthOfYear\")) {\n                    int month = (values[i] + valueToAdd) % 12;\n                    int year = (values[i] + valueToAdd) / 12;\n                    if (month <= 0) {\n                        month += 12;\n                        year -= 1;\n                    }\n                    if (type.getDurationType().isLeapDuration() && !ISOChronology.getInstanceUTC().isLeapYear(values[0] + year)) {\n                        values[1] = 28; // handle leap year february\n                    }\n                    values[i] = month;\n                    values[0] += year;\n                } else {\n                    instant = type.getField(iChronology).set(instant, values[i]);\n                }\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..e6cb3371 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,43 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex && partial.getFieldType(i) instanceof DateTimeFieldType) {\n+                DateTimeFieldType type = (DateTimeFieldType) partial.getFieldType(i);\n+                if (type.getName().equals(\"monthOfYear\")) {\n+                    int month = (values[i] + valueToAdd) % 12;\n+                    int year = (values[i] + valueToAdd) / 12;\n+                    if (month <= 0) {\n+                        month += 12;\n+                        year -= 1;\n+                    }\n+                    if (type.getDurationType().isLeapDuration() && !ISOChronology.getInstanceUTC().isLeapYear(values[0] + year)) {\n+                        values[1] = 28; // handle leap year february\n+                    }\n+                    values[i] = month;\n+                    values[0] += year;\n+                } else {\n+                    instant = type.getField(iChronology).set(instant, values[i]);\n+                }\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        instant = add(instant, valueToAdd);\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}