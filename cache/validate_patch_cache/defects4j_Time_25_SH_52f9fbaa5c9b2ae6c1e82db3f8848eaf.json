{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n>>> [ INFILL ] <<<\n                    // in case the returned offset is invalid because of a gap,\n                    // search next valid offset after the gap\n                    while (getOffset(nextLocal) < offsetAdjusted) {\n                        nextLocal = nextTransition(nextLocal);\n                    }\n                    return getOffset(nextLocal);\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0ec57e7a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,22 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+>>> [ INFILL ] <<<\n+                    // in case the returned offset is invalid because of a gap,\n+                    // search next valid offset after the gap\n+                    while (getOffset(nextLocal) < offsetAdjusted) {\n+                        nextLocal = nextTransition(nextLocal);\n+                    }\n+                    return getOffset(nextLocal);\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}