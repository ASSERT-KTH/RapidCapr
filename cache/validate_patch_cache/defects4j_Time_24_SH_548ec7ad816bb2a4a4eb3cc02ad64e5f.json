{
    "patch": "Arrays.sort(savedFields, 0, count);\nlong originalMillis = millis;\nboolean changed = false;\ntry {\n    for (int i = 0; i < count; i++) {\n        long newMillis = savedFields[i].set(millis, resetFields);\n        if (newMillis != millis) {\n            if (!changed) {\n                // first change, reset to originalMillis and start over \n                millis = originalMillis;\n                i = -1; // restart loop from beginning\n            } else {\n                if (text != null) {\n                    throw new IllegalArgumentException(\n                        \"Cannot parse \\\"\" + text + \"\\\": Conflicting fields found: \" \n                        + savedFields[i-1].toString() + \" and \" + savedFields[i].toString());\n                } else {\n                    throw new IllegalArgumentException(\n                        \"Conflicting fields found: \" \n                        + savedFields[i-1].toString() + \" and \" + savedFields[i].toString());\n                }\n            }\n            changed = true;\n        } else {\n            originalMillis = millis;\n        }\n        millis = newMillis;\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..10eb8acb 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,45 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+Arrays.sort(savedFields, 0, count);\n+long originalMillis = millis;\n+boolean changed = false;\n+try {\n+    for (int i = 0; i < count; i++) {\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+        if (newMillis != millis) {\n+            if (!changed) {\n+                // first change, reset to originalMillis and start over \n+                millis = originalMillis;\n+                i = -1; // restart loop from beginning\n+            } else {\n+                if (text != null) {\n+                    throw new IllegalArgumentException(\n+                        \"Cannot parse \\\"\" + text + \"\\\": Conflicting fields found: \" \n+                        + savedFields[i-1].toString() + \" and \" + savedFields[i].toString());\n+                } else {\n+                    throw new IllegalArgumentException(\n+                        \"Conflicting fields found: \" \n+                        + savedFields[i-1].toString() + \" and \" + savedFields[i].toString());\n+                }\n+            }\n+            changed = true;\n+        } else {\n+            originalMillis = millis;\n+        }\n+        millis = newMillis;\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "java.lang.IllegalArgumentException: Cannot parse \"2010--30 06\"",
    "test_result": "FAIL"
}