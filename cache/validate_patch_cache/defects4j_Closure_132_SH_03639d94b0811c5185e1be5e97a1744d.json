{
    "patch": "               // NOTE: assignments to 'this' or LHS of a plus operator may change the value of 'lhs' and\n               // should be treated as an external effect.\n               (!mayEffectMutableState(lhs) ||\n                lhs.isThis() ||\n                (lhs.getParent() != null && lhs.getParent().isAdd() && lhs == lhs.getParent().getFirstChild())\n               )) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..e46640bf 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,12 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+               // NOTE: assignments to 'this' or LHS of a plus operator may change the value of 'lhs' and\n+               // should be treated as an external effect.\n+               (!mayEffectMutableState(lhs) ||\n+                lhs.isThis() ||\n+                (lhs.getParent() != null && lhs.getParent().isAdd() && lhs == lhs.getParent().getFirstChild())\n+               )) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}