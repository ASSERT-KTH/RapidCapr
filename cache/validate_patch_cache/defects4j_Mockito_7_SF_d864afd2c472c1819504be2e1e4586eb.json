{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) return;\n\n    for (Type type : typeVariable.getBounds()) {\n        if (type instanceof TypeVariable<?>) {\n            readTypeVariablesFromTypeVariable((TypeVariable<?>) type);\n        } else if (type != null) {\n            registerTypeVariablesOn(type);\n        }\n    }\n\n    Type[] actualTypeArguments = getActualTypeArgumentsFor(typeVariable);\n    for (Type actualTypeArgument : actualTypeArguments) {\n        if (actualTypeArgument instanceof TypeVariable<?>) {\n            readTypeVariablesFromTypeVariable((TypeVariable<?>) actualTypeArgument);\n        } else if (actualTypeArgument != null) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}\n\nprivate void readTypeVariablesFromTypeVariable(TypeVariable<?> typeVariable) {\n    for (Type type : typeVariable.getBounds()) {\n        if (type instanceof TypeVariable<?>) {\n            readTypeVariablesFromTypeVariable((TypeVariable<?>) type);\n        } else if (type != null) {\n            registerTypeVariablesOn(type);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..6a39a874f 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,37 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) return;\n+\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type instanceof TypeVariable<?>) {\n+            readTypeVariablesFromTypeVariable((TypeVariable<?>) type);\n+        } else if (type != null) {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+\n+    Type[] actualTypeArguments = getActualTypeArgumentsFor(typeVariable);\n+    for (Type actualTypeArgument : actualTypeArguments) {\n+        if (actualTypeArgument instanceof TypeVariable<?>) {\n+            readTypeVariablesFromTypeVariable((TypeVariable<?>) actualTypeArgument);\n+        } else if (actualTypeArgument != null) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n+\n+private void readTypeVariablesFromTypeVariable(TypeVariable<?> typeVariable) {\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type instanceof TypeVariable<?>) {\n+            readTypeVariablesFromTypeVariable((TypeVariable<?>) type);\n+        } else if (type != null) {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}