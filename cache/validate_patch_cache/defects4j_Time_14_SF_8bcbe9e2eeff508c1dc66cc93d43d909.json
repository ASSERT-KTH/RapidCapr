{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        int monthIndex = DateTimeUtils.findMonthIndex(partial);\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i != monthIndex) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            } else {\n                // set month of year, retaining day of month\n                int curYear = partial.get(DateTimeFieldType.year());\n                int curMonth = values[monthIndex];\n                int newMonth = ((curMonth - 1) + valueToAdd) % 12 + 1;\n                int newYear = ((curMonth - 1) + valueToAdd) / 12 + curYear;\n                // adjust day of month to nearest sane value\n                int maxDay = iChronology.monthOfYear().getMaximumValue(newYear, newMonth);\n                int newDay = values[DateTimeUtils.findUpperBound(partial, DateTimeFieldType.dayOfMonth())];\n                if (newDay > maxDay) {\n                    newDay = maxDay;\n                }\n                instant = iChronology.yearMonthDay().set(instant, newYear, newMonth, newDay);\n            }\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..3e8e84ea 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,39 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int monthIndex = DateTimeUtils.findMonthIndex(partial);\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i != monthIndex) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            } else {\n+                // set month of year, retaining day of month\n+                int curYear = partial.get(DateTimeFieldType.year());\n+                int curMonth = values[monthIndex];\n+                int newMonth = ((curMonth - 1) + valueToAdd) % 12 + 1;\n+                int newYear = ((curMonth - 1) + valueToAdd) / 12 + curYear;\n+                // adjust day of month to nearest sane value\n+                int maxDay = iChronology.monthOfYear().getMaximumValue(newYear, newMonth);\n+                int newDay = values[DateTimeUtils.findUpperBound(partial, DateTimeFieldType.dayOfMonth())];\n+                if (newDay > maxDay) {\n+                    newDay = maxDay;\n+                }\n+                instant = iChronology.yearMonthDay().set(instant, newYear, newMonth, newDay);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}