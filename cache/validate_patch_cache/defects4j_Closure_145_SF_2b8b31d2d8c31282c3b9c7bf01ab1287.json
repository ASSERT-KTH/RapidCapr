{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {\n        return true;\n    }\n    if (n.getType() == Token.LABEL) {\n        Node child = n.getFirstChild().getNext();\n        if (child.getType() == Token.BLOCK) {\n            int numFunctionsOrDos = 0;\n            for (Node grandChild = child.getFirstChild(); grandChild != null; grandChild = grandChild.getNext()) {\n                if (isOneExactlyFunctionOrDo(grandChild)) {\n                    numFunctionsOrDos++;\n                    if (numFunctionsOrDos > 1) {\n                        return false;\n                    }\n                }\n            }\n            return numFunctionsOrDos == 1;\n        } else {\n            return isOneExactlyFunctionOrDo(child);\n        }\n    }\n    if (n.getType() == Token.BLOCK) {\n        if (!n.hasChildren()) {\n            // An empty statement is a valid 'DO' statement\n            return true;\n        } else {\n            Node child = n.getFirstChild();\n            if (child.getNext() != null) {\n                return false;\n            }\n            return isOneExactlyFunctionOrDo(child);\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..aa1894c0 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,41 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {\n+        return true;\n+    }\n+    if (n.getType() == Token.LABEL) {\n+        Node child = n.getFirstChild().getNext();\n+        if (child.getType() == Token.BLOCK) {\n+            int numFunctionsOrDos = 0;\n+            for (Node grandChild = child.getFirstChild(); grandChild != null; grandChild = grandChild.getNext()) {\n+                if (isOneExactlyFunctionOrDo(grandChild)) {\n+                    numFunctionsOrDos++;\n+                    if (numFunctionsOrDos > 1) {\n+                        return false;\n+                    }\n+                }\n+            }\n+            return numFunctionsOrDos == 1;\n+        } else {\n+            return isOneExactlyFunctionOrDo(child);\n+        }\n+    }\n+    if (n.getType() == Token.BLOCK) {\n+        if (!n.hasChildren()) {\n+            // An empty statement is a valid 'DO' statement\n+            return true;\n+        } else {\n+            Node child = n.getFirstChild();\n+            if (child.getNext() != null) {\n+                return false;\n+            }\n+            return isOneExactlyFunctionOrDo(child);\n+        }\n+    }\n+    return false;\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}