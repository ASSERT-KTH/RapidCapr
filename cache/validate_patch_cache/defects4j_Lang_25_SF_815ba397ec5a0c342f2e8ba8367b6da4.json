{
    "patch": "public static String escapeUTF(String input) {\n    StringBuilder output = new StringBuilder();\n    for(int i=0; i<input.length(); i++) {\n        char ch = input.charAt(i);\n        int chInt = (int) ch;\n        if(chInt <= 0x7f) // single byte unicode\n            output.append(ch);\n        else if(chInt >= 0xD800 && chInt <= 0xDBFF) { // double byte unicode\n            i++;\n            if(i>=input.length())\n                throw new IllegalArgumentException(\"UTF-16 format error: incomplete codepoint\");\n            char ch2 = input.charAt(i);\n            int nextInt = (int) ch2;\n            if(!(nextInt >= 0xDC00 && nextInt <= 0xDFFF)) {\n                throw new IllegalArgumentException(\"UTF-16 format error: incorrect surrogate pair\");\n            }\n            int res = ((ch & 0x3FF) << 10) | (nextInt & 0x3FF);\n            res += 0x10000;\n            output.append(\"&#x\").append(Integer.toHexString(res)).append(\";\");\n        }\n        else if(chInt>=0xD800 && chInt<=0xDFFF) {\n          throw new IllegalArgumentException(\"UTF-16 format error: incorrect surrogate pair\");\n        }\n        else { // triple byte unicode\n            output.append(\"&#x\").append(Integer.toHexString(chInt)).append(\";\");\n        }\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..8148f5b5 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,35 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escapeUTF(String input) {\n+    StringBuilder output = new StringBuilder();\n+    for(int i=0; i<input.length(); i++) {\n+        char ch = input.charAt(i);\n+        int chInt = (int) ch;\n+        if(chInt <= 0x7f) // single byte unicode\n+            output.append(ch);\n+        else if(chInt >= 0xD800 && chInt <= 0xDBFF) { // double byte unicode\n+            i++;\n+            if(i>=input.length())\n+                throw new IllegalArgumentException(\"UTF-16 format error: incomplete codepoint\");\n+            char ch2 = input.charAt(i);\n+            int nextInt = (int) ch2;\n+            if(!(nextInt >= 0xDC00 && nextInt <= 0xDFFF)) {\n+                throw new IllegalArgumentException(\"UTF-16 format error: incorrect surrogate pair\");\n+            }\n+            int res = ((ch & 0x3FF) << 10) | (nextInt & 0x3FF);\n+            res += 0x10000;\n+            output.append(\"&#x\").append(Integer.toHexString(res)).append(\";\");\n+        }\n+        else if(chInt>=0xD800 && chInt<=0xDFFF) {\n+          throw new IllegalArgumentException(\"UTF-16 format error: incorrect surrogate pair\");\n+        }\n+        else { // triple byte unicode\n+            output.append(\"&#x\").append(Integer.toHexString(chInt)).append(\";\");\n+        }\n+    }\n+    return output.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}