{
    "patch": "// contract with translators is that they have to understand codepoints \n// and they just took care of a surrogate pair\nint codePoint = Character.codePointAt(input, pos);\nint charCount = Character.charCount(codePoint);\nif (charCount > 1) {\n    // surrogate pair\n    StringBuilder sb = new StringBuilder();\n    sb.append(Character.toChars(codePoint));\n    while (charCount > 1) {\n        pos += 2;\n        codePoint = Character.codePointAt(input, pos);\n        charCount = Character.charCount(codePoint);\n        sb.append(Character.toChars(codePoint));\n    }\n    translate(sb.toString(), out);\n} else {\n    translate(Character.toString((char) codePoint), out);\n    pos += charCount;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..ec089c7d 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,25 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+// contract with translators is that they have to understand codepoints \n+// and they just took care of a surrogate pair\n+int codePoint = Character.codePointAt(input, pos);\n+int charCount = Character.charCount(codePoint);\n+if (charCount > 1) {\n+    // surrogate pair\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(Character.toChars(codePoint));\n+    while (charCount > 1) {\n+        pos += 2;\n+        codePoint = Character.codePointAt(input, pos);\n+        charCount = Character.charCount(codePoint);\n+        sb.append(Character.toChars(codePoint));\n+    }\n+    translate(sb.toString(), out);\n+} else {\n+    translate(Character.toString((char) codePoint), out);\n+    pos += charCount;\n+}\n             }\n         }\n     }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}