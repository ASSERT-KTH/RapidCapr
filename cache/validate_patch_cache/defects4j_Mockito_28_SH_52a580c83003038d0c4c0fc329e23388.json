{
    "patch": "            List<MockCandidate> candidates = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).stream().sorted().collect(Collectors.toList());\n\n            // We only throw exception if we couldn't inject nothing or we injected more than one.\n            if(candidates.isEmpty()) {\n                throw new RuntimeException(String.format(\"Injection impossible. No candidate found for field %s on class %s\", field.getName(), awaitingInjectionClazz.getName()));\n            }\n\n            Object mockInstance = candidates.get(0).getMockInstance();\n            ReflectionHelper.setField(field, fieldInstance, mockInstance);",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..229975580 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,18 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            List<MockCandidate> candidates = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).stream().sorted().collect(Collectors.toList());\n+\n+            // We only throw exception if we couldn't inject nothing or we injected more than one.\n+            if(candidates.isEmpty()) {\n+                throw new RuntimeException(String.format(\"Injection impossible. No candidate found for field %s on class %s\", field.getName(), awaitingInjectionClazz.getName()));\n+            }\n+\n+            Object mockInstance = candidates.get(0).getMockInstance();\n+            ReflectionHelper.setField(field, fieldInstance, mockInstance);\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}