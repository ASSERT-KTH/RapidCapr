{
    "patch": "public ReturnValue execute(ExecutionContext ctx) throws TerminationException {\n    Object[] argsValues = getArguments(ctx);\n    Method methodToExecute = reflectionUtils.getMethod(clazz, methodName, argsValues);\n    if (methodToExecute == null) {\n        throw new TerminationException(String.format(\"Method %s with arguments %s not found\", methodName, Arrays.toString(argsValues))); \n    }\n    Object returnValue;\n    try {\n        returnValue = reflectionUtils.invokeMethod(methodToExecute, instance, argsValues);\n        if (returnValue != null) {\n            return ReturnValue.getNonNullReturnValue(returnValue);\n        } else {\n            return ReturnValue.getNullReturnValue(methodToExecute.getReturnType());\n        }\n    } catch (Throwable e) {\n        return ReturnValue.getExceptionalReturnValue(e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}