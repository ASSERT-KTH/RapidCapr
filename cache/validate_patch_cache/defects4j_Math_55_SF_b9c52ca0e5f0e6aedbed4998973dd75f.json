{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      double factor1 = v1.getNorm() / v2.getNorm();\n      double factor2 = 1.0 / (Math.sqrt(1 + factor1 * factor1));\n      Vector3D w1 = new Vector3D(factor2, v1);\n      Vector3D w2 = new Vector3D(factor2 * factor1, v2);\n      // compute cross product from w1 and w2 instead of v1 and v2\n      return new Vector3D(w1.getY() * w2.getZ() - w1.getZ() * w2.getY(),\n                          w1.getZ() * w2.getX() - w1.getX() * w2.getZ(),\n                          w1.getX() * w2.getY() - w1.getY() * w2.getX());\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..6cfd86967 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,24 +454,17 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n+      double factor1 = v1.getNorm() / v2.getNorm();\n+      double factor2 = 1.0 / (Math.sqrt(1 + factor1 * factor1));\n+      Vector3D w1 = new Vector3D(factor2, v1);\n+      Vector3D w2 = new Vector3D(factor2 * factor1, v2);\n+      // compute cross product from w1 and w2 instead of v1 and v2\n+      return new Vector3D(w1.getY() * w2.getZ() - w1.getZ() * w2.getY(),\n+                          w1.getZ() * w2.getX() - w1.getX() * w2.getZ(),\n+                          w1.getX() * w2.getY() - w1.getY() * w2.getX());\n   }\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<1.4248766393972496>",
    "test_result": "FAIL"
}