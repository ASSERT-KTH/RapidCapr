{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n  String variableName = n.getQualifiedName();\n  Preconditions.checkArgument(!variableName.isEmpty());\n\n  // Only allow declarations of NAMEs and qualified names.\n  boolean shouldDeclareOnGlobalThis = false;\n  if (n.getType() == Token.NAME) {\n    Preconditions.checkArgument(parent.getType() == Token.FUNCTION\n        || parent.getType() == Token.VAR\n        || parent.getType() == Token.LP\n        || parent.getType() == Token.CATCH);\n    shouldDeclareOnGlobalThis =\n        scope.isGlobal() && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);\n  } else {\n    Preconditions.checkArgument(n.getType() == Token.GETPROP\n        && (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT));\n  }\n\n  // handle already-declared variables\n  Node oldDecl = null;\n  Var oldVar = scope.getVar(variableName);\n  Var firstVar = oldVar;\n  if (oldVar != null) {\n    oldDecl = oldVar.getNameNode();\n    firstVar = oldVar;\n    while (oldVar != null) {\n      firstVar = oldVar;\n      oldVar = oldVar.getParentNode() != n.getFirstChild() ? null : scope.getVar(variableName, oldVar.getParentNode());\n    }\n\n    Preconditions.checkNotNull(oldDecl);\n\n    // handle re-declaring externs\n    if (oldDecl.getJSDocInfo() != null && oldDecl.getJSDocInfo().isExtern()) {\n      return;\n    }\n\n    if ((oldDecl.getType() == Token.FUNCTION && n.getType() == Token.FUNCTION)\n        || (oldDecl.getType() != Token.FUNCTION && n.getType() == Token.NAME)) {\n      validator.warnDuplicateDeclaration(sourceName, n, parent, firstVar, type, inferred);\n    } else {\n      validator.expectUndeclaredVariable(sourceName, n, parent, firstVar, variableName, type);\n    }\n  } else if (parent.isFunction()) {\n    // handle same variable name shadowing\n    Var outerVar = scope.getParentScope().getVar(variableName);\n    while (outerVar != null && outerVar.getScope() != scope) {\n      outerVar = scope.getParentScope().getVar(variableName, outerVar.getParentNode());\n    }\n    if (outerVar != null && oldDecl == null) {\n      validator.warnSameNameShadowing(sourceName, n, parent, outerVar, type, inferred);\n    }\n  }\n\n  // If we get here, the variable is not already declared.\n  if (!inferred) {\n    setDeferredType(n, type);\n  }\n  CompilerInput input = compiler.getInput(sourceName);\n  scope.declare(variableName, n, type, input, inferred);\n\n  if (shouldDeclareOnGlobalThis) {\n    ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n    boolean isExtern = input.isExtern();\n    if (inferred) {\n      globalThis.defineInferredProperty(variableName,\n          type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n          isExtern);\n    } else {\n      globalThis.defineDeclaredProperty(variableName, type, isExtern);\n    }\n  }\n\n  // If we're in the global scope, also declare var.prototype\n  // in the scope chain.\n  if (scope.isGlobal() && type instanceof FunctionType) {\n    FunctionType fnType = (FunctionType) type;\n    if (fnType.isConstructor() || fnType.isInterface()) {\n      FunctionType superClassCtor = fnType.getSuperClassConstructor();\n      scope.declare(variableName + \".prototype\", n, fnType.getPrototype(),\n          compiler.getInput(sourceName),\n          /* declared iff there's an explicit supertype */\n          superClassCtor == null || superClassCtor.getInstanceType().equals(\n              getNativeType(OBJECT_TYPE)));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..c98dde1f 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,94 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n-      }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  Preconditions.checkArgument(inferred || type != null);\n+  String variableName = n.getQualifiedName();\n+  Preconditions.checkArgument(!variableName.isEmpty());\n+\n+  // Only allow declarations of NAMEs and qualified names.\n+  boolean shouldDeclareOnGlobalThis = false;\n+  if (n.getType() == Token.NAME) {\n+    Preconditions.checkArgument(parent.getType() == Token.FUNCTION\n+        || parent.getType() == Token.VAR\n+        || parent.getType() == Token.LP\n+        || parent.getType() == Token.CATCH);\n+    shouldDeclareOnGlobalThis =\n+        scope.isGlobal() && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);\n+  } else {\n+    Preconditions.checkArgument(n.getType() == Token.GETPROP\n+        && (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT));\n+  }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n-      }\n+  // handle already-declared variables\n+  Node oldDecl = null;\n+  Var oldVar = scope.getVar(variableName);\n+  Var firstVar = oldVar;\n+  if (oldVar != null) {\n+    oldDecl = oldVar.getNameNode();\n+    firstVar = oldVar;\n+    while (oldVar != null) {\n+      firstVar = oldVar;\n+      oldVar = oldVar.getParentNode() != n.getFirstChild() ? null : scope.getVar(variableName, oldVar.getParentNode());\n+    }\n+\n+    Preconditions.checkNotNull(oldDecl);\n+\n+    // handle re-declaring externs\n+    if (oldDecl.getJSDocInfo() != null && oldDecl.getJSDocInfo().isExtern()) {\n+      return;\n+    }\n+\n+    if ((oldDecl.getType() == Token.FUNCTION && n.getType() == Token.FUNCTION)\n+        || (oldDecl.getType() != Token.FUNCTION && n.getType() == Token.NAME)) {\n+      validator.warnDuplicateDeclaration(sourceName, n, parent, firstVar, type, inferred);\n+    } else {\n+      validator.expectUndeclaredVariable(sourceName, n, parent, firstVar, variableName, type);\n+    }\n+  } else if (parent.isFunction()) {\n+    // handle same variable name shadowing\n+    Var outerVar = scope.getParentScope().getVar(variableName);\n+    while (outerVar != null && outerVar.getScope() != scope) {\n+      outerVar = scope.getParentScope().getVar(variableName, outerVar.getParentNode());\n+    }\n+    if (outerVar != null && oldDecl == null) {\n+      validator.warnSameNameShadowing(sourceName, n, parent, outerVar, type, inferred);\n+    }\n+  }\n+\n+  // If we get here, the variable is not already declared.\n+  if (!inferred) {\n+    setDeferredType(n, type);\n+  }\n+  CompilerInput input = compiler.getInput(sourceName);\n+  scope.declare(variableName, n, type, input, inferred);\n+\n+  if (shouldDeclareOnGlobalThis) {\n+    ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+    boolean isExtern = input.isExtern();\n+    if (inferred) {\n+      globalThis.defineInferredProperty(variableName,\n+          type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n+          isExtern);\n+    } else {\n+      globalThis.defineDeclaredProperty(variableName, type, isExtern);\n     }\n+  }\n+\n+  // If we're in the global scope, also declare var.prototype\n+  // in the scope chain.\n+  if (scope.isGlobal() && type instanceof FunctionType) {\n+    FunctionType fnType = (FunctionType) type;\n+    if (fnType.isConstructor() || fnType.isInterface()) {\n+      FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+      scope.declare(variableName + \".prototype\", n, fnType.getPrototype(),\n+          compiler.getInput(sourceName),\n+          /* declared iff there's an explicit supertype */\n+          superClassCtor == null || superClassCtor.getInstanceType().equals(\n+              getNativeType(OBJECT_TYPE)));\n+    }\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: method getVar in class Scope cannot be applied to given types;",
    "test_result": "ERROR"
}