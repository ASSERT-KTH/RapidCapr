{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (arguments.hasNext() &&\n           parameters.hasNext()) {\n      // If there are no parameters left in the list, then the while loop\n      // above implies that this must be a var_args function.\n      parameter = parameters.next();\n      argument = arguments.next();\n      ordinal++;\n\n      TypeI actualParamType = getJSType(argument);\n      TypeI formalParamType = getJSType(parameter);\n      if (!actualParamType.isSubtypeOf(formalParamType)) {\n        report(t, argument, INVALID_ARGUMENT_TYPE,\n            Integer.toString(ordinal), validator.getReadableJSTypeName(actualParamType, false),\n            validator.getReadableJSTypeName(formalParamType, false));\n      }\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          Integer.toString(numArgs), Integer.toString(minArgs),\n          maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..35781765 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,7 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n@@ -1409,12 +1409,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n            parameters.hasNext()) {\n       // If there are no parameters left in the list, then the while loop\n       // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+      parameter = parameters.next();\n       argument = arguments.next();\n       ordinal++;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+      TypeI actualParamType = getJSType(argument);\n+      TypeI formalParamType = getJSType(parameter);\n+      if (!actualParamType.isSubtypeOf(formalParamType)) {\n+        report(t, argument, INVALID_ARGUMENT_TYPE,\n+            Integer.toString(ordinal), validator.getReadableJSTypeName(actualParamType, false),\n+            validator.getReadableJSTypeName(formalParamType, false));\n+      }\n     }\n \n     int numArgs = call.getChildCount() - 1;\n@@ -1422,9 +1427,9 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int maxArgs = functionType.getMaxArguments();\n     if (minArgs > numArgs || maxArgs < numArgs) {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          Integer.toString(numArgs), Integer.toString(minArgs),\n+          maxArgs != Integer.MAX_VALUE ?\n               \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n     }\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}