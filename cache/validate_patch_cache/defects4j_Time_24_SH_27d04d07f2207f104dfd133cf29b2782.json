{
    "patch": "try {\n    int successfulFields = 0;\n    boolean[] fieldSet = new boolean[count];\n    for (int i = 0; i < count; i++) {\n        try {\n            millis = savedFields[i].set(millis, resetFields);\n            successfulFields++;\n            fieldSet[i] = true;\n        } catch (IllegalArgumentException e) {\n            if (text != null) {\n                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n            }\n            throw e;\n        }\n    }\n    if (resetFields && successfulFields != count) {\n        for (int j = 0; j < count; j++) {\n            SavedField savedField = savedFields[j];\n            DateTimeField field = savedField.iField;\n            int value = savedField.iValue;\n            int nextValue = (j + 1 < count) ? savedFields[j + 1].iValue : field.getMinimumValue();\n            int minValue;\n            if (!fieldSet[j]) {\n                minValue = field.getMinimumValue(millis);\n            } else {\n                minValue = field.get(millis);\n            }\n            for (int attemptValue = nextValue - 1; attemptValue >= minValue; attemptValue--) {\n                try {\n                    millis = field.set(millis, attemptValue);\n                    for (int k = j + 1; k < count; k++) {\n                        millis = savedFields[k].set(millis, true);\n                    }\n                    break;\n                } catch (IllegalArgumentException e) {\n                    if (attemptValue == minValue) {\n                        if (text != null) {\n                            e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n                        }\n                        throw e;\n                    }\n                }\n            }\n        }\n    }\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..7b09c2c6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,57 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    int successfulFields = 0;\n+    boolean[] fieldSet = new boolean[count];\n+    for (int i = 0; i < count; i++) {\n+        try {\n+            millis = savedFields[i].set(millis, resetFields);\n+            successfulFields++;\n+            fieldSet[i] = true;\n+        } catch (IllegalArgumentException e) {\n+            if (text != null) {\n+                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+            }\n+            throw e;\n+        }\n+    }\n+    if (resetFields && successfulFields != count) {\n+        for (int j = 0; j < count; j++) {\n+            SavedField savedField = savedFields[j];\n+            DateTimeField field = savedField.iField;\n+            int value = savedField.iValue;\n+            int nextValue = (j + 1 < count) ? savedFields[j + 1].iValue : field.getMinimumValue();\n+            int minValue;\n+            if (!fieldSet[j]) {\n+                minValue = field.getMinimumValue(millis);\n+            } else {\n+                minValue = field.get(millis);\n+            }\n+            for (int attemptValue = nextValue - 1; attemptValue >= minValue; attemptValue--) {\n+                try {\n+                    millis = field.set(millis, attemptValue);\n+                    for (int k = j + 1; k < count; k++) {\n+                        millis = savedFields[k].set(millis, true);\n+                    }\n+                    break;\n+                } catch (IllegalArgumentException e) {\n+                    if (attemptValue == minValue) {\n+                        if (text != null) {\n+                            e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+                        }\n+                        throw e;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}