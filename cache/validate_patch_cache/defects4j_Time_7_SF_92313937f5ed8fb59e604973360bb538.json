{
    "patch": "        if (newPos < 0) {\n            instant.setMillis(bucket.computeMillis(false, text));\n            if (!bucket.getParsed().containsKey(DateTimeFieldType.year())) {\n                if (bucket.getParsed().containsKey(DateTimeFieldType.dayOfYear())) {\n                    instant.setMillis(chrono.dayOfYear().set(instant, bucket.getParsed().get(DateTimeFieldType.dayOfYear()).intValue()));\n                } else {\n                    instant.setMillis(chrono.monthOfYear().set(instant, bucket.getParsed().get(DateTimeFieldType.monthOfYear()).intValue()));\n                    instant.setMillis(chrono.dayOfMonth().set(instant, bucket.getParsed().get(DateTimeFieldType.dayOfMonth()).intValue()));\n                }\n            }\n            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                chrono = chrono.withZone(parsedZone);\n            } else if (bucket.getZone() != null) {\n                chrono = chrono.withZone(bucket.getZone());\n            }\n            instant.setChronology(chrono);\n            if (iZone != null) {\n                instant.setZone(iZone);\n            }\n            return newPos;\n        }\n\n        int year = bucket.getParsed(DateTimeFieldType.year()).intValue();\n        int month = bucket.getParsed(DateTimeFieldType.monthOfYear()).intValue();\n        int day = bucket.getParsed(DateTimeFieldType.dayOfMonth()).intValue();\n        \n        if (month == 2 && day == 29 && !chrno.isLeapYear(year)) {\n            throw new org.joda.time.IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\": Invalid date 'February 29' as '\" + year + \"' is not a leap year\", \"dayOfMonth\", day);\n        }\n",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..9d17927e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,38 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+        if (newPos < 0) {\n+            instant.setMillis(bucket.computeMillis(false, text));\n+            if (!bucket.getParsed().containsKey(DateTimeFieldType.year())) {\n+                if (bucket.getParsed().containsKey(DateTimeFieldType.dayOfYear())) {\n+                    instant.setMillis(chrono.dayOfYear().set(instant, bucket.getParsed().get(DateTimeFieldType.dayOfYear()).intValue()));\n+                } else {\n+                    instant.setMillis(chrono.monthOfYear().set(instant, bucket.getParsed().get(DateTimeFieldType.monthOfYear()).intValue()));\n+                    instant.setMillis(chrono.dayOfMonth().set(instant, bucket.getParsed().get(DateTimeFieldType.dayOfMonth()).intValue()));\n+                }\n+            }\n+            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+                int parsedOffset = bucket.getOffsetInteger();\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+                chrono = chrono.withZone(parsedZone);\n+            } else if (bucket.getZone() != null) {\n+                chrono = chrono.withZone(bucket.getZone());\n+            }\n+            instant.setChronology(chrono);\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            }\n+            return newPos;\n         }\n+\n+        int year = bucket.getParsed(DateTimeFieldType.year()).intValue();\n+        int month = bucket.getParsed(DateTimeFieldType.monthOfYear()).intValue();\n+        int day = bucket.getParsed(DateTimeFieldType.dayOfMonth()).intValue();\n         \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        if (month == 2 && day == 29 && !chrno.isLeapYear(year)) {\n+            throw new org.joda.time.IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\": Invalid date 'February 29' as '\" + year + \"' is not a leap year\", \"dayOfMonth\", day);\n         }\n-        return newPos;\n-    }\n+\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}