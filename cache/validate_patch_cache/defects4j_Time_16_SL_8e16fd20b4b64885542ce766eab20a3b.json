{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        // Use the parser to obtain the parsed instant directly\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(parser).toFormatter();\n        LocalDateTime localDateTime = LocalDateTime.parse(text, formatter);\n        Chronology chrono = selectChronology(instant.getChronology());\n        DateTimeZone zone = chrono.getZone();\n        if (iZone != null) {\n            zone = iZone;\n        } else if (bucket.getZone() != null) {\n            zone = bucket.getZone();\n        }\n        long instantLocal = localDateTime.toDateTime(zone).getMillis();\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..63b13f25 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,40 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+    public int parseInto(ReadWritableInstant instant, String text, int position) {\n+        DateTimeParser parser = requireParser();\n+        if (instant == null) {\n+            throw new IllegalArgumentException(\"Instant must not be null\");\n+        }\n+\n+        // Use the parser to obtain the parsed instant directly\n+        DateTimeFormatter formatter = new DateTimeFormatterBuilder().append(parser).toFormatter();\n+        LocalDateTime localDateTime = LocalDateTime.parse(text, formatter);\n+        Chronology chrono = selectChronology(instant.getChronology());\n+        DateTimeZone zone = chrono.getZone();\n+        if (iZone != null) {\n+            zone = iZone;\n+        } else if (bucket.getZone() != null) {\n+            zone = bucket.getZone();\n+        }\n+        long instantLocal = localDateTime.toDateTime(zone).getMillis();\n+\n+        DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        int newPos = parser.parseInto(bucket, text, position);\n+        instant.setMillis(bucket.computeMillis(false, text));\n+        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+            int parsedOffset = bucket.getOffsetInteger();\n+            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+            chrono = chrono.withZone(parsedZone);\n+        } else if (bucket.getZone() != null) {\n+            chrono = chrono.withZone(bucket.getZone());\n+        }\n+        instant.setChronology(chrono);\n+        if (iZone != null) {\n+            instant.setZone(iZone);\n+        }\n+        return newPos;\n+    }\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}