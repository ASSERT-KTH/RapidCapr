{
    "patch": "  private Node parseContextTypeExpression(JsDocToken token) {\n    Node type = null;\n    if (token.getType() == JsDocToken.Type.LEFT_BRACKET) {\n        // union type\n        type = parseUnionType(token);\n    } else if (token.getType() == JsDocToken.Type.LEFT_PAREN) {\n        // function type\n        type = parseFunctionType(token);\n    } else if (token.getType() == JsDocToken.Type.IDENTIFIER) {\n        type = parseTypeName(token);\n    } else if (token.getType() == JsDocToken.Type.LEFT_BRACE) {\n        type = tryParseObjectType(token);\n    } else {\n        reportError(\"Bad type annotation. type not recognized due to syntax error\", token);\n    }\n    return type;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..3f14c42b 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,23 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+  private Node parseContextTypeExpression(JsDocToken token) {\n+    Node type = null;\n+    if (token.getType() == JsDocToken.Type.LEFT_BRACKET) {\n+        // union type\n+        type = parseUnionType(token);\n+    } else if (token.getType() == JsDocToken.Type.LEFT_PAREN) {\n+        // function type\n+        type = parseFunctionType(token);\n+    } else if (token.getType() == JsDocToken.Type.IDENTIFIER) {\n+        type = parseTypeName(token);\n+    } else if (token.getType() == JsDocToken.Type.LEFT_BRACE) {\n+        type = tryParseObjectType(token);\n+    } else {\n+        reportError(\"Bad type annotation. type not recognized due to syntax error\", token);\n+    }\n+    return type;\n+  }\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}