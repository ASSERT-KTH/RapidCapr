{
    "patch": "public Fraction reduce() {\n    int absNumerator = Math.abs(numerator);\n    int gcd = greatestCommonDivisor(absNumerator, denominator);\n    absNumerator /= gcd;\n    int absDenominator = denominator / gcd;\n    if (numerator < 0 && absDenominator > 0) {\n        absNumerator = -absNumerator;\n    }\n    return Fraction.getFraction(absNumerator, absDenominator);  \n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..9086777d 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,16 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+public Fraction reduce() {\n+    int absNumerator = Math.abs(numerator);\n+    int gcd = greatestCommonDivisor(absNumerator, denominator);\n+    absNumerator /= gcd;\n+    int absDenominator = denominator / gcd;\n+    if (numerator < 0 && absDenominator > 0) {\n+        absNumerator = -absNumerator;\n+    }\n+    return Fraction.getFraction(absNumerator, absDenominator);  \n+}\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}