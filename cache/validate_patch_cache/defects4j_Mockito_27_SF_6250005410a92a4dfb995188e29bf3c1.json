{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n    ObjectFactory<T> objectFactory = new javassist.util.proxy.ProxyFactory();\n    objectFactory.setSuperclass(mock.getClass());\n    objectFactory.setInterfaces(new Class[]{Factory.class});\n    try {\n        T newMock = objectFactory.createClass().newInstance();\n        Factory newMockProxy = (Factory) newMock;\n        newMockProxy.setCallback(0, new MethodInterceptorFilter(oldMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS)));\n        ThreadLocal<Object[]> local = Whitebox.getInternalState(mock, \"constructorArgs\");\n        if (local != null) {\n            Whitebox.setInternalState(newMock, \"constructorArgs\", local.get());\n        }\n        Whitebox.setInternalState(mock, \"delegate\", newMock);\n    } catch (InstantiationException | IllegalAccessException ex) {\n        ex.printStackTrace();\n        throw new RuntimeException(\"Failed to create new mock\", ex);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..edf6b14ec 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,26 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n+    ObjectFactory<T> objectFactory = new javassist.util.proxy.ProxyFactory();\n+    objectFactory.setSuperclass(mock.getClass());\n+    objectFactory.setInterfaces(new Class[]{Factory.class});\n+    try {\n+        T newMock = objectFactory.createClass().newInstance();\n+        Factory newMockProxy = (Factory) newMock;\n+        newMockProxy.setCallback(0, new MethodInterceptorFilter(oldMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS)));\n+        ThreadLocal<Object[]> local = Whitebox.getInternalState(mock, \"constructorArgs\");\n+        if (local != null) {\n+            Whitebox.setInternalState(newMock, \"constructorArgs\", local.get());\n+        }\n+        Whitebox.setInternalState(mock, \"delegate\", newMock);\n+    } catch (InstantiationException | IllegalAccessException ex) {\n+        ex.printStackTrace();\n+        throw new RuntimeException(\"Failed to create new mock\", ex);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}