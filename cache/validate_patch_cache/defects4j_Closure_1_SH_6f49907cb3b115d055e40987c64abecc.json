{
    "patch": "Node function = fnScope.getRootNode();\nNode functionBlock = function.getLastChild();\n\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\n\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\nif (!modifyCallers) {\n  // Strip unreferenced args off the end of the function declaration.\n  Node lastArg;\n  while ((lastArg = argList.getLastChild()) != null) {\n    Var var = fnScope.getVar(lastArg.getString());\n    if (!referenced.contains(var)) {\n      argList.removeChild(lastArg);\n      compiler.reportCodeChange();\n    } else {\n      break;\n    }\n  }\n\n  // Remove parameter references in the function body.\n  NodeUtil.visitPostOrder(\n      functionBlock,\n      (node) -> {\n        if (node.isParamList()) {\n          for (Node param : node.children()) {\n            if (!referenced.contains(fnScope.getVar(param.getString()))) {\n              param.detach();\n              compiler.reportCodeChange();\n            }\n          }\n        }\n        if (node.isName() && node.getParent().isParamList()) {\n          if (!referenced.contains(fnScope.getVar(node.getString()))) {\n            node.getParent().removeChild(node);\n            compiler.reportCodeChange();\n          }\n        }\n      });\n\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3729cdbf 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,53 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+Node functionBlock = function.getLastChild();\n+\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+if (!modifyCallers) {\n+  // Strip unreferenced args off the end of the function declaration.\n+  Node lastArg;\n+  while ((lastArg = argList.getLastChild()) != null) {\n+    Var var = fnScope.getVar(lastArg.getString());\n+    if (!referenced.contains(var)) {\n+      argList.removeChild(lastArg);\n+      compiler.reportCodeChange();\n+    } else {\n+      break;\n+    }\n+  }\n+\n+  // Remove parameter references in the function body.\n+  NodeUtil.visitPostOrder(\n+      functionBlock,\n+      (node) -> {\n+        if (node.isParamList()) {\n+          for (Node param : node.children()) {\n+            if (!referenced.contains(fnScope.getVar(param.getString()))) {\n+              param.detach();\n+              compiler.reportCodeChange();\n+            }\n+          }\n+        }\n+        if (node.isName() && node.getParent().isParamList()) {\n+          if (!referenced.contains(fnScope.getVar(node.getString()))) {\n+            node.getParent().removeChild(node);\n+            compiler.reportCodeChange();\n+          }\n+        }\n+      });\n+\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}