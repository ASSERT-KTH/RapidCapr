{
    "patch": "private boolean isSafeReplacement(Node node, Node replacement) {\n  if (node.isName()) {\n    return true;\n  } else if (!node.isGetProp()) {\n    return false;\n  }\n\n  Queue<Node> queue = new LinkedList<>();\n  addChildrenToQueue(node, queue);\n\n  while (!queue.isEmpty()) {\n    Node current = queue.poll();\n    if (current.isName() && isNameAssignedTo(current.getString(), replacement)) {\n      return false;\n    } else if (current.isGetProp()) {\n      addChildrenToQueue(current, queue);\n    }\n  }\n\n  return true;\n}\n\nprivate void addChildrenToQueue(Node node, Queue<Node> queue) {\n  for (Node child : node.children()) {\n    queue.offer(child);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..a6522a50 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -203,21 +203,33 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n    * changed.\n    * @return Whether the replacement can be made.\n    */\n-  private boolean isSafeReplacement(Node node, Node replacement) {\n-    // No checks are needed for simple names.\n-    if (node.isName()) {\n-      return true;\n-    }\n-    Preconditions.checkArgument(node.isGetProp());\n+private boolean isSafeReplacement(Node node, Node replacement) {\n+  if (node.isName()) {\n+    return true;\n+  } else if (!node.isGetProp()) {\n+    return false;\n+  }\n \n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n+  Queue<Node> queue = new LinkedList<>();\n+  addChildrenToQueue(node, queue);\n+\n+  while (!queue.isEmpty()) {\n+    Node current = queue.poll();\n+    if (current.isName() && isNameAssignedTo(current.getString(), replacement)) {\n       return false;\n+    } else if (current.isGetProp()) {\n+      addChildrenToQueue(current, queue);\n     }\n+  }\n \n-    return true;\n+  return true;\n+}\n+\n+private void addChildrenToQueue(Node node, Queue<Node> queue) {\n+  for (Node child : node.children()) {\n+    queue.offer(child);\n   }\n+}\n \n   /**\n    * @return Whether name is assigned in the expression rooted at node.\n@@ -241,4 +253,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}