{
    "patch": "public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n    ArrowType that = (ArrowType) other;\n    if (!(this instanceof ArrowType)) {\n        return false;\n    }\n    ArrowType func = (ArrowType) this;\n\n    // Check if the return type of 'this' is a subtype of the return type of 'that'\n    if (!func.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    boolean hasRequiredEllipsisParam = false;\n    boolean hasEllipsisParam = false;\n    boolean lastParamIsOptional = false;\n\n    // Compare parameter types of both function\n    Node thisParam = func.parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n\n    while (thisParam != null || thatParam != null) {\n        JSType thisParamType = thisParam == null ? null : thisParam.getJSType();\n        JSType thatParamType = thatParam == null ? null : thatParam.getJSType();\n\n        if (thatParamType == null) {\n            // If 'that' has no more parameters, and if 'this' has any parameters left, return false\n            if (thisParamType != null) {\n                return false;\n            } else {\n                break;\n            }\n        }\n\n        if (thisParam != null && thisParam.isVarArgs()) {\n            hasEllipsisParam = true;\n        }\n\n        if (thatParam != null && thatParam.isVarArgs()) {\n            hasRequiredEllipsisParam = true;\n        } else if (thatParam != null && thatParam.isOptional()) {\n            lastParamIsOptional = true;\n        }\n\n        if (thisParamType != null && thisParamType.isNoType()) {\n            // If the current parameter of 'this' is of type NO_TYPE, move on to next parameter\n            thisParam = thisParam.getNext();\n            continue;\n        }\n\n        if (thisParamType == null) {\n            // If 'this' has no more parameters, and if 'that' still has required parameters left, return false\n            if (thatParamType != null && !thatParamType.isOptional()) {\n                return false;\n            }\n\n            break; // Else both 'this' and 'that' has no more required parameters\n        }\n\n        if ((thatParamType != null && !thatParamType.isOptional()\n                && (lastParamIsOptional || thatParam.getNext() != null || !hasRequiredEllipsisParam))\n                && thisParam.getNext() == null && !hasEllipsisParam) {\n            return false;\n        } // The last parameter of 'that' can't be optional unless there is an ellipsis (...) parameter\n        \n        if (!thatParamType.isSubtype(thisParamType)) {\n            return false;\n        }\n\n        thisParam = thisParam.getNext();\n        thatParam = thatParam.getNext();\n    }\n\n    // If both 'this' and 'that' has ellipsis(...) parameter, and if the type of the ellipsis parameter of 'that'\n    // is not a subtype of the type of 'this', return false\n    if (hasRequiredEllipsisParam && hasEllipsisParam) {\n        if (that.getParent() instanceof FunctionType) {\n            FunctionType parentType = (FunctionType) that.getParent();\n            if (!parentType.isSubtype(func)) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..5b5cd805 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,81 +77,94 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n+public boolean isSubtype(JSType other) {\n     if (!(other instanceof ArrowType)) {\n-      return false;\n+        return false;\n     }\n-\n     ArrowType that = (ArrowType) other;\n+    if (!(this instanceof ArrowType)) {\n+        return false;\n+    }\n+    ArrowType func = (ArrowType) this;\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n-\n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n+    // Check if the return type of 'this' is a subtype of the return type of 'that'\n+    if (!func.returnType.isSubtype(that.returnType)) {\n+        return false;\n     }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n+    boolean hasRequiredEllipsisParam = false;\n+    boolean hasEllipsisParam = false;\n+    boolean lastParamIsOptional = false;\n+\n+    // Compare parameter types of both function\n+    Node thisParam = func.parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n+\n+    while (thisParam != null || thatParam != null) {\n+        JSType thisParamType = thisParam == null ? null : thisParam.getJSType();\n+        JSType thatParamType = thatParam == null ? null : thatParam.getJSType();\n+\n+        if (thatParamType == null) {\n+            // If 'that' has no more parameters, and if 'this' has any parameters left, return false\n+            if (thisParamType != null) {\n+                return false;\n+            } else {\n+                break;\n+            }\n+        }\n+\n+        if (thisParam != null && thisParam.isVarArgs()) {\n+            hasEllipsisParam = true;\n         }\n-      }\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+        if (thatParam != null && thatParam.isVarArgs()) {\n+            hasRequiredEllipsisParam = true;\n+        } else if (thatParam != null && thatParam.isOptional()) {\n+            lastParamIsOptional = true;\n+        }\n+\n+        if (thisParamType != null && thisParamType.isNoType()) {\n+            // If the current parameter of 'this' is of type NO_TYPE, move on to next parameter\n+            thisParam = thisParam.getNext();\n+            continue;\n+        }\n+\n+        if (thisParamType == null) {\n+            // If 'this' has no more parameters, and if 'that' still has required parameters left, return false\n+            if (thatParamType != null && !thatParamType.isOptional()) {\n+                return false;\n+            }\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+            break; // Else both 'this' and 'that' has no more required parameters\n+        }\n+\n+        if ((thatParamType != null && !thatParamType.isOptional()\n+                && (lastParamIsOptional || thatParam.getNext() != null || !hasRequiredEllipsisParam))\n+                && thisParam.getNext() == null && !hasEllipsisParam) {\n+            return false;\n+        } // The last parameter of 'that' can't be optional unless there is an ellipsis (...) parameter\n+        \n+        if (!thatParamType.isSubtype(thisParamType)) {\n+            return false;\n+        }\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n         thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n         thatParam = thatParam.getNext();\n-      }\n-\n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+    // If both 'this' and 'that' has ellipsis(...) parameter, and if the type of the ellipsis parameter of 'that'\n+    // is not a subtype of the type of 'this', return false\n+    if (hasRequiredEllipsisParam && hasEllipsisParam) {\n+        if (that.getParent() instanceof FunctionType) {\n+            FunctionType parentType = (FunctionType) that.getParent();\n+            if (!parentType.isSubtype(func)) {\n+                return false;\n+            }\n+        }\n+    }\n \n     return true;\n-  }\n+}\n \n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}