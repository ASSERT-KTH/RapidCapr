{
    "patch": "import com.google.javascript.jscomp.JsDocToken;\n\nenum State {\n  SEARCHING_ANNOTATION,\n  SEARCHING_VALUE,\n}\n\nclass ExtractionInfo {\n  String text;\n  JsDocToken token;\n\n  ExtractionInfo(String text, JsDocToken token) {\n    this.text = text;\n    this.token = token;\n  }\n}\n\nclass JsDocStream {\n  private ListIterator<String> lines;\n  private String prevLine;\n  private String line = \"\";\n  private int lineno = 0;\n  private int charno = -1;\n\n  JsDocStream(Iterable<String> lines) {\n    this.lines = Iterators.peekingIterator(lines.iterator());\n    nextLine();\n  }\n\n  private void nextLine() {\n    this.lineno++;\n    this.charno = -1;\n    if (this.lines.hasNext()) {\n      this.prevLine = this.line;\n      this.line = this.lines.next();\n    } else {\n      this.prevLine = this.line;\n      this.line = null;\n    }\n  }\n\n  boolean hasNext() {\n    return this.line != null;\n  }\n\n  private boolean atLastLine() {\n    return !this.lines.hasNext() && this.line.isEmpty();\n  }\n\n  JsDocToken getFirstTokenOfLine() {\n    JsDocToken token;\n    charno++;\n    int length = this.line.length();\n    while (charno < length && Character.isWhitespace(this.line.charAt(charno))) {\n      charno++;\n    }\n    if (charno >= length) {\n      // no tokens on this line\n      stopTokenizing();\n      return JsDocToken.EOL;\n    }\n\n    if (this.line.charAt(charno) == '*') {\n      charno++;\n      if (charno >= length || !Character.isWhitespace(this.line.charAt(charno))) {\n        stopTokenizing();\n        return JsDocToken.STAR;\n      }\n    }\n\n    int startCharno = charno;\n    charno = this.line.indexOf('*', charno);\n    if (charno < 0) {\n      if (atLastLine()) {\n        charno = length;\n      } else {\n        charno = length - 1;\n        token = JsDocToken.EOL;\n        nextLine();\n        this.charno = -1;\n        return token;\n      }\n    }\n\n    // This will handle /* at the end of the line.\n    if (charno == startCharno && charno == length - 1) {\n      stopTokenizing();\n      return JsDocToken.STAR;\n    }\n\n    String word = this.line.substring(startCharno, charno);\n    token = JsDocToken.getIdentifier(word);\n    if (token != null) {\n      return token;\n    }\n\n    return JsDocToken.UNKNOWN;\n  }\n\n  String getRemainingJSDocLine() {\n    return this.line.substring(this.charno).trim();\n  }\n\n  int getLineno() {\n    return this.lineno;\n  }\n\n  int getCharno() {\n    return this.charno;\n  }\n\n  void stopTokenizing() {\n    this.line = null;\n  }\n\n  void update() {\n    int length = this.line.length();\n    this.charno++;\n    while (charno < length && Character.isWhitespace(this.line.charAt(charno))) {\n      charno++;\n    }\n    if (charno >= length) {\n      nextLine();\n    }\n  }\n}\n\nclass JsDocBuilder {\n  private List<String> lines;\n  private Set<SourceRange> ranges = new HashSet<>();\n\n  JsDocBuilder() {\n    this.lines = new ArrayList<>();\n  }\n\n  void markText(String text, int startLineno, int startCharno, int endLineno, int endCharno) {\n    lines.add(text);\n    ranges.add(new SourceRange(\n        new SourcePosition(startLineno, startCharno),\n        new SourcePosition(endLineno, endCharno)));\n  }\n\n  String getDocComment(SourceFile file) {\n    Collections.sort(lines);\n    StringBuilder builder = new StringBuilder(\"/**\\n\");\n    int lastLineno = -1;\n    int lastEndCharno = -1;\n    for (SourceRange range : ranges) {\n      int startLineno = range.getStart().getLine();\n      int startCharno = range.getStart().getCharacter();\n      int endLineno = range.getEnd().getLine();\n      int endCharno = range.getEnd().getCharacter();\n      if (lastLineno != startLineno || lastEndCharno != startCharno) {\n        if (lastLineno != -1) {\n          builder.append(\"\\n\");\n        }\n        for (int i = lastLineno + 1; i < startLineno; i++) {\n          builder.append(\" *\\n\");\n        }\n        builder.append(\" * \");\n        builder.append(lines.remove(0));\n      } else {\n        builder.append(\" \");\n        builder.append(lines.remove(0));\n      }\n\n      lastLineno = endLineno;\n      lastEndCharno = endCharno;\n    }\n    int lineNumber = file.getLineCount();\n    for (int i = lastLineno + 1; i < lineNumber; i++) {\n      builder.append(\" *\\n\");\n    }\n    builder.append(\" */\");\n    return builder.toString();\n  }\n}\n\nclass JsDocExtractor {\n  private LinkedList<JsDocToken> tokenStack = new LinkedList<>();\n  private State state = State.SEARCHING_ANNOTATION;\n  private JsDocStream stream;\n  private JsDocBuilder jsdocBuilder = new JsDocBuilder();\n  private Deque<Integer> parenCounts = new LinkedList<>();\n\n  enum WhitespaceOption {\n    /** Ignore leading and trailing whitespace. */\n    IGNORE,\n    /** Preserve all whitespace. */\n    PRESERVE,\n    /** Collapse multiple spaces into one, but do not remove leading/trailing whitespace. */\n    SINGLE_LINE,\n  }\n\n  JsDocExtractor(Iterable<String> lines) {\n    this.stream = new JsDocStream(lines);\n    this.tokenStack.push(next());\n  }\n\n  ExtractionInfo extractAnnotation(WhitespaceOption option) {\n    return extractMultilineTextualBlock(next(), option);\n  }\n\n  private String toString(JsDocToken token) {\n    if (token.isLiteral()) {\n      return token.getValue();\n    }\n    if (token == JsDocToken.EOL) {\n      return \"\\n\";\n    }\n    return token.toString();\n  }\n\n  private JsDocToken next() {\n    return tokenStack.isEmpty() ? stream.getFirstTokenOfLine() : tokenStack.pop();\n  }\n\n  private void push(JsDocToken token) {\n    tokenStack.push(token);\n  }\n\n  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n\n    // Track the start of the line to count whitespace that\n    // the tokenizer skipped. Because this case is rare, it's easier\n    // to do this here than in the tokenizer.\n\n    do {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // Mark the position after the star as the new start of the line.\n          } else {\n            // The star is part of the comment.\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n\n            builder.append('*');\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n\n          ignoreStar = true;\n          token = next();\n          continue;\n\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n              // All tokens must be separated by a space.\n\n          if (token == JsDocToken.EOC ||\n              token == JsDocToken.EOF ||\n              // When we're capturing a license block, annotations\n              // in the block are ok.\n              (token == JsDocToken.ANNOTATION &&\n               option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString();\n\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = trimEnd(multilineText);\n            }\n\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append(toString(token));\n\n          line = stream.getRemainingJSDocLine();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            line = trimEnd(line);\n          }\n\n          builder.append(line);\n          token = next();\n      }\n    } while (true);\n  }\n\n  private String trimEnd(String s) {\n    int i = s.length() - 1;\n    while (i >= 0 && Character.isWhitespace(s.charAt(i))) {\n      i--;\n    }\n    return s.substring(0, i + 1);\n  }\n\n  private void handleOpenParen() {\n    int count = parenCounts.isEmpty() ? 1 : parenCounts.pop() + 1;\n    parenCounts.push(count);\n  }\n\n  private void handleCloseParen() {\n    int count = parenCounts.pop();\n    if (count == 0) {\n      state = State.SEARCHING_ANNOTATION;\n    }\n    parenCounts.push(count - 1);\n  }\n  \n  private void handleOpenBrace() {\n    parenCounts.push(0);\n  }\n\n  private void handleCloseBrace() {\n    if (parenCounts.pop() == 0) {\n      state = State.SEARCHING_ANNOTATION;\n    }\n  }\n\n  private void handleAnnotation() {\n    if (state == State.SEARCHING_ANNOTATION && parenCounts.isEmpty()) {\n      state = State.SEARCHING_VALUE;\n    }\n  }\n\n  void skipToEOL() {\n    while (true) {\n      JsDocToken token = next();\n      if (token == JsDocToken.EOF || token == JsDocToken.EOL) {\n        return;\n      }\n    }\n  }\n\n  String build() {\n    return jsdocBuilder.getDocComment(SourceFile.fromCode(\"temp\", \"\"));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..c869adf5 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,6 +1326,227 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n+import com.google.javascript.jscomp.JsDocToken;\n+\n+enum State {\n+  SEARCHING_ANNOTATION,\n+  SEARCHING_VALUE,\n+}\n+\n+class ExtractionInfo {\n+  String text;\n+  JsDocToken token;\n+\n+  ExtractionInfo(String text, JsDocToken token) {\n+    this.text = text;\n+    this.token = token;\n+  }\n+}\n+\n+class JsDocStream {\n+  private ListIterator<String> lines;\n+  private String prevLine;\n+  private String line = \"\";\n+  private int lineno = 0;\n+  private int charno = -1;\n+\n+  JsDocStream(Iterable<String> lines) {\n+    this.lines = Iterators.peekingIterator(lines.iterator());\n+    nextLine();\n+  }\n+\n+  private void nextLine() {\n+    this.lineno++;\n+    this.charno = -1;\n+    if (this.lines.hasNext()) {\n+      this.prevLine = this.line;\n+      this.line = this.lines.next();\n+    } else {\n+      this.prevLine = this.line;\n+      this.line = null;\n+    }\n+  }\n+\n+  boolean hasNext() {\n+    return this.line != null;\n+  }\n+\n+  private boolean atLastLine() {\n+    return !this.lines.hasNext() && this.line.isEmpty();\n+  }\n+\n+  JsDocToken getFirstTokenOfLine() {\n+    JsDocToken token;\n+    charno++;\n+    int length = this.line.length();\n+    while (charno < length && Character.isWhitespace(this.line.charAt(charno))) {\n+      charno++;\n+    }\n+    if (charno >= length) {\n+      // no tokens on this line\n+      stopTokenizing();\n+      return JsDocToken.EOL;\n+    }\n+\n+    if (this.line.charAt(charno) == '*') {\n+      charno++;\n+      if (charno >= length || !Character.isWhitespace(this.line.charAt(charno))) {\n+        stopTokenizing();\n+        return JsDocToken.STAR;\n+      }\n+    }\n+\n+    int startCharno = charno;\n+    charno = this.line.indexOf('*', charno);\n+    if (charno < 0) {\n+      if (atLastLine()) {\n+        charno = length;\n+      } else {\n+        charno = length - 1;\n+        token = JsDocToken.EOL;\n+        nextLine();\n+        this.charno = -1;\n+        return token;\n+      }\n+    }\n+\n+    // This will handle /* at the end of the line.\n+    if (charno == startCharno && charno == length - 1) {\n+      stopTokenizing();\n+      return JsDocToken.STAR;\n+    }\n+\n+    String word = this.line.substring(startCharno, charno);\n+    token = JsDocToken.getIdentifier(word);\n+    if (token != null) {\n+      return token;\n+    }\n+\n+    return JsDocToken.UNKNOWN;\n+  }\n+\n+  String getRemainingJSDocLine() {\n+    return this.line.substring(this.charno).trim();\n+  }\n+\n+  int getLineno() {\n+    return this.lineno;\n+  }\n+\n+  int getCharno() {\n+    return this.charno;\n+  }\n+\n+  void stopTokenizing() {\n+    this.line = null;\n+  }\n+\n+  void update() {\n+    int length = this.line.length();\n+    this.charno++;\n+    while (charno < length && Character.isWhitespace(this.line.charAt(charno))) {\n+      charno++;\n+    }\n+    if (charno >= length) {\n+      nextLine();\n+    }\n+  }\n+}\n+\n+class JsDocBuilder {\n+  private List<String> lines;\n+  private Set<SourceRange> ranges = new HashSet<>();\n+\n+  JsDocBuilder() {\n+    this.lines = new ArrayList<>();\n+  }\n+\n+  void markText(String text, int startLineno, int startCharno, int endLineno, int endCharno) {\n+    lines.add(text);\n+    ranges.add(new SourceRange(\n+        new SourcePosition(startLineno, startCharno),\n+        new SourcePosition(endLineno, endCharno)));\n+  }\n+\n+  String getDocComment(SourceFile file) {\n+    Collections.sort(lines);\n+    StringBuilder builder = new StringBuilder(\"/**\\n\");\n+    int lastLineno = -1;\n+    int lastEndCharno = -1;\n+    for (SourceRange range : ranges) {\n+      int startLineno = range.getStart().getLine();\n+      int startCharno = range.getStart().getCharacter();\n+      int endLineno = range.getEnd().getLine();\n+      int endCharno = range.getEnd().getCharacter();\n+      if (lastLineno != startLineno || lastEndCharno != startCharno) {\n+        if (lastLineno != -1) {\n+          builder.append(\"\\n\");\n+        }\n+        for (int i = lastLineno + 1; i < startLineno; i++) {\n+          builder.append(\" *\\n\");\n+        }\n+        builder.append(\" * \");\n+        builder.append(lines.remove(0));\n+      } else {\n+        builder.append(\" \");\n+        builder.append(lines.remove(0));\n+      }\n+\n+      lastLineno = endLineno;\n+      lastEndCharno = endCharno;\n+    }\n+    int lineNumber = file.getLineCount();\n+    for (int i = lastLineno + 1; i < lineNumber; i++) {\n+      builder.append(\" *\\n\");\n+    }\n+    builder.append(\" */\");\n+    return builder.toString();\n+  }\n+}\n+\n+class JsDocExtractor {\n+  private LinkedList<JsDocToken> tokenStack = new LinkedList<>();\n+  private State state = State.SEARCHING_ANNOTATION;\n+  private JsDocStream stream;\n+  private JsDocBuilder jsdocBuilder = new JsDocBuilder();\n+  private Deque<Integer> parenCounts = new LinkedList<>();\n+\n+  enum WhitespaceOption {\n+    /** Ignore leading and trailing whitespace. */\n+    IGNORE,\n+    /** Preserve all whitespace. */\n+    PRESERVE,\n+    /** Collapse multiple spaces into one, but do not remove leading/trailing whitespace. */\n+    SINGLE_LINE,\n+  }\n+\n+  JsDocExtractor(Iterable<String> lines) {\n+    this.stream = new JsDocStream(lines);\n+    this.tokenStack.push(next());\n+  }\n+\n+  ExtractionInfo extractAnnotation(WhitespaceOption option) {\n+    return extractMultilineTextualBlock(next(), option);\n+  }\n+\n+  private String toString(JsDocToken token) {\n+    if (token.isLiteral()) {\n+      return token.getValue();\n+    }\n+    if (token == JsDocToken.EOL) {\n+      return \"\\n\";\n+    }\n+    return token.toString();\n+  }\n+\n+  private JsDocToken next() {\n+    return tokenStack.isEmpty() ? stream.getFirstTokenOfLine() : tokenStack.pop();\n+  }\n+\n+  private void push(JsDocToken token) {\n+    tokenStack.push(token);\n+  }\n+\n   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                       WhitespaceOption option) {\n \n@@ -1397,7 +1618,7 @@ public final class JsDocInfoParser {\n             String multilineText = builder.toString();\n \n             if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n+              multilineText = trimEnd(multilineText);\n             }\n \n             int endLineno = stream.getLineno();\n@@ -1428,6 +1649,57 @@ public final class JsDocInfoParser {\n     } while (true);\n   }\n \n+  private String trimEnd(String s) {\n+    int i = s.length() - 1;\n+    while (i >= 0 && Character.isWhitespace(s.charAt(i))) {\n+      i--;\n+    }\n+    return s.substring(0, i + 1);\n+  }\n+\n+  private void handleOpenParen() {\n+    int count = parenCounts.isEmpty() ? 1 : parenCounts.pop() + 1;\n+    parenCounts.push(count);\n+  }\n+\n+  private void handleCloseParen() {\n+    int count = parenCounts.pop();\n+    if (count == 0) {\n+      state = State.SEARCHING_ANNOTATION;\n+    }\n+    parenCounts.push(count - 1);\n+  }\n+  \n+  private void handleOpenBrace() {\n+    parenCounts.push(0);\n+  }\n+\n+  private void handleCloseBrace() {\n+    if (parenCounts.pop() == 0) {\n+      state = State.SEARCHING_ANNOTATION;\n+    }\n+  }\n+\n+  private void handleAnnotation() {\n+    if (state == State.SEARCHING_ANNOTATION && parenCounts.isEmpty()) {\n+      state = State.SEARCHING_VALUE;\n+    }\n+  }\n+\n+  void skipToEOL() {\n+    while (true) {\n+      JsDocToken token = next();\n+      if (token == JsDocToken.EOF || token == JsDocToken.EOL) {\n+        return;\n+      }\n+    }\n+  }\n+\n+  String build() {\n+    return jsdocBuilder.getDocComment(SourceFile.fromCode(\"temp\", \"\"));\n+  }\n+}\n+\n \n   /**\n    * Extracts the top-level block comment from the JsDoc comment, if any.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}