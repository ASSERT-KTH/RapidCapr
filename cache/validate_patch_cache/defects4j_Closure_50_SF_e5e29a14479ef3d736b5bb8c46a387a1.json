{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n\n  Node right = callTarget.getNext();\n  if (right != null) {\n    if (!NodeUtil.isImmutableValue(right)) {\n      return n;\n    }\n  }\n\n  Node arrayNode = callTarget.getFirstChild();\n  Node functionName = arrayNode.getNext();\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return n;\n  }\n\n  String joinString = \",\";\n  if (right != null) {\n    if (NodeUtil.isString(right)) {\n      joinString = right.getString();\n    } else if (NodeUtil.isNumber(right)) {\n      joinString = \",\".repeat(right.getIntValue());\n    } else {\n      return n;\n    }\n  }\n\n  Node newStringNode = getConcatenatedArrayNode(arrayNode, joinString);\n  if (newStringNode != null && InlineCostEstimator.getCost(newStringNode) < InlineCostEstimator.getCost(n)) {\n    n.replaceWith(newStringNode);\n    reportCodeChange();\n    return newStringNode;\n  }\n\n  return n;\n}\n\nprivate static Node getConcatenatedArrayNode(Node arrayNode, String joinString) {\n  Node concatedStringNode = IR.string(\"\").srcrefTree(arrayNode);\n  Node nextNode = null;\n  boolean addJoinString = false;\n\n  for (Node arrayElem = arrayNode.getFirstChild(); arrayElem != null; arrayElem = nextNode) {\n    int childType = arrayElem.getType();\n    nextNode = arrayElem.getNext();\n    if (childType == Token.EMPTY || childType == Token.NULL) {\n      continue;\n    }\n\n    if (NodeUtil.isImmutableValue(arrayElem) &&\n        childType != Token.STRING &&\n        childType != Token.NUMBER &&\n        childType != Token.TRUE &&\n        childType != Token.FALSE) {\n      return null;\n    }\n\n    Node newStringNode = null;\n    if (childType == Token.STRING) {\n      newStringNode = IR.string(arrayElem.getString()).srcrefTree(arrayElem);\n    } else if (childType == Token.NUMBER) {\n      if (arrayElem.getIntValue() >= 0) {\n        String currentJoinString = addJoinString ? joinString : \"\";\n        newStringNode = IR.string(currentJoinString + Joiner.on(currentJoinString)\n                                      .join(Collections.nCopies(arrayElem.getIntValue(),\n                                                                 IR.string(joinString))));\n        addJoinString = true;\n      }\n    } else {\n      Node elemStrNode = IR.string(\"\").srcrefTree(arrayElem);\n      Node addOp = IR.add(elemStrNode.cloneTree(), arrayElem.cloneTree());\n      newStringNode = new Node(Token.EXPR_RESULT, IR.assign(elemStrNode.cloneTree(), addOp)\n                                              .srcrefTree(arrayElem))\n                          .srcrefTree(arrayElem);\n    }\n\n    if (newStringNode != null) {\n      concatedStringNode = IR.add(concatedStringNode.cloneTree(),\n                                  newStringNode.cloneTree()).srcrefTree(arrayElem);\n    }\n  }\n\n  return new Node(Token.EXPR_RESULT, concatedStringNode);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..949a9ff5 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,117 +364,95 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n-    Node callTarget = n.getFirstChild();\n+private Node tryFoldArrayJoin(Node n) {\n+  Node callTarget = n.getFirstChild();\n+  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n+    return n;\n+  }\n \n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n+  Node right = callTarget.getNext();\n+  if (right != null) {\n+    if (!NodeUtil.isImmutableValue(right)) {\n       return n;\n     }\n+  }\n \n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n-    }\n-\n-    Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = callTarget.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n+  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n+      !functionName.getString().equals(\"join\")) {\n+    return n;\n+  }\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+  String joinString = \",\";\n+  if (right != null) {\n+    if (NodeUtil.isString(right)) {\n+      joinString = right.getString();\n+    } else if (NodeUtil.isNumber(right)) {\n+      joinString = \",\".repeat(right.getIntValue());\n+    } else {\n       return n;\n     }\n+  }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+  Node newStringNode = getConcatenatedArrayNode(arrayNode, joinString);\n+  if (newStringNode != null && InlineCostEstimator.getCost(newStringNode) < InlineCostEstimator.getCost(n)) {\n+    n.replaceWith(newStringNode);\n+    reportCodeChange();\n+    return newStringNode;\n+  }\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+  return n;\n+}\n+\n+private static Node getConcatenatedArrayNode(Node arrayNode, String joinString) {\n+  Node concatedStringNode = IR.string(\"\").srcrefTree(arrayNode);\n+  Node nextNode = null;\n+  boolean addJoinString = false;\n+\n+  for (Node arrayElem = arrayNode.getFirstChild(); arrayElem != null; arrayElem = nextNode) {\n+    int childType = arrayElem.getType();\n+    nextNode = arrayElem.getNext();\n+    if (childType == Token.EMPTY || childType == Token.NULL) {\n+      continue;\n+    }\n+\n+    if (NodeUtil.isImmutableValue(arrayElem) &&\n+        childType != Token.STRING &&\n+        childType != Token.NUMBER &&\n+        childType != Token.TRUE &&\n+        childType != Token.FALSE) {\n+      return null;\n+    }\n+\n+    Node newStringNode = null;\n+    if (childType == Token.STRING) {\n+      newStringNode = IR.string(arrayElem.getString()).srcrefTree(arrayElem);\n+    } else if (childType == Token.NUMBER) {\n+      if (arrayElem.getIntValue() >= 0) {\n+        String currentJoinString = addJoinString ? joinString : \"\";\n+        newStringNode = IR.string(currentJoinString + Joiner.on(currentJoinString)\n+                                      .join(Collections.nCopies(arrayElem.getIntValue(),\n+                                                                 IR.string(joinString))));\n+        addJoinString = true;\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n+    } else {\n+      Node elemStrNode = IR.string(\"\").srcrefTree(arrayElem);\n+      Node addOp = IR.add(elemStrNode.cloneTree(), arrayElem.cloneTree());\n+      newStringNode = new Node(Token.EXPR_RESULT, IR.assign(elemStrNode.cloneTree(), addOp)\n+                                              .srcrefTree(arrayElem))\n+                          .srcrefTree(arrayElem);\n     }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+    if (newStringNode != null) {\n+      concatedStringNode = IR.add(concatedStringNode.cloneTree(),\n+                                  newStringNode.cloneTree()).srcrefTree(arrayElem);\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n-    }\n-\n-    return n;\n   }\n \n+  return new Node(Token.EXPR_RESULT, concatedStringNode);\n+}\n+\n   /**\n    * Try to fold .substr() calls on strings\n    */\n@@ -642,4 +620,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}