{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final int n = m.getRowDimension();\n        if (n * n > 50000) { // use different algorithm for large matrices\n            return m.multiply(0.5).add(MatrixUtils.createRealIdentityMatrix(n)).sqrt();\n        } else {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..cd207b880 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,12 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n+        final int n = m.getRowDimension();\n+        if (n * n > 50000) { // use different algorithm for large matrices\n+            return m.multiply(0.5).add(MatrixUtils.createRealIdentityMatrix(n)).sqrt();\n+        } else {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n+        }\n     }\n }",
    "result_reason": "error: method multiply in interface RealMatrix cannot be applied to given types;",
    "test_result": "ERROR"
}