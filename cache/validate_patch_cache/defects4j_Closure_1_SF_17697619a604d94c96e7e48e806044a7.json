{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers && argList.hasChildren()) {\n      // Strip unreferenced args off the end of the function declaration.\n      // Starting from the end is faster because the arguments are less\n      // likely to be reordered already.\n      NodeList<Name> parameters = new NodeList<>();\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        String paramName = lastArg.getString();\n        parameters.addFirst(lastArg.removeFirstChild());\n        Var var = fnScope.getVar(paramName);\n        if (!referenced.contains(var)) {\n          compiler.reportCodeChange();\n        } else {\n          // Un-remove arguments as soon as one parameter is referenced.\n          for (int i = parameters.size() - 1; i >= 0; i--) {\n            lastArg.addChildToFront(parameters.get(i));\n          }\n          return;\n        }\n      }\n      // All arguments are unreferenced. Remove them.\n      compiler.reportCodeChange();\n    } else if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e07dee11 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,7 +366,7 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     // Notice that removing unreferenced function args breaks\n     // Function.prototype.length. In advanced mode, we don't really care\n     // about this: we consider \"length\" the equivalent of reflecting on\n@@ -388,22 +388,29 @@ class RemoveUnusedVars\n     Node argList = getFunctionArgList(function);\n     boolean modifyCallers = modifyCallSites\n         && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n+    if (!modifyCallers && argList.hasChildren()) {\n       // Strip unreferenced args off the end of the function declaration.\n+      // Starting from the end is faster because the arguments are less\n+      // likely to be reordered already.\n+      NodeList<Name> parameters = new NodeList<>();\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n+        String paramName = lastArg.getString();\n+        parameters.addFirst(lastArg.removeFirstChild());\n+        Var var = fnScope.getVar(paramName);\n         if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n           compiler.reportCodeChange();\n         } else {\n-          break;\n+          // Un-remove arguments as soon as one parameter is referenced.\n+          for (int i = parameters.size() - 1; i >= 0; i--) {\n+            lastArg.addChildToFront(parameters.get(i));\n+          }\n+          return;\n         }\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n-    }\n-  }\n+      // All arguments are unreferenced. Remove them.\n+      compiler.reportCodeChange();\n+    } else if (modifyCallers) {\n \n \n   /**",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}