{
    "patch": "public static double triangle_area(double a, double h) {\n    if (a <= 0 || h <= 0) {\n        throw new IllegalArgumentException(\"Sides of a triangle must be positive\");\n    }\n    try {\n        BigDecimal area = BigDecimal.valueOf(a).multiply(BigDecimal.valueOf(h)).multiply(BigDecimal.valueOf(0.5));\n        if (area.compareTo(BigDecimal.valueOf(Double.MAX_VALUE)) > 0) {\n            throw new IllegalArgumentException(\"Input values result in overflow\");\n        }\n        return area.doubleValue();\n    } catch (ArithmeticException e) {\n        throw new IllegalArgumentException(\"Input values result in arithmetic error\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/TRIANGLE_AREA.java b/src/main/java/humaneval/buggy/TRIANGLE_AREA.java\nindex a34dabc..2bc078c 100644\n--- a/src/main/java/humaneval/buggy/TRIANGLE_AREA.java\n+++ b/src/main/java/humaneval/buggy/TRIANGLE_AREA.java\n@@ -5,7 +5,18 @@ package humaneval.buggy;\n 7.5 */\n \n public class TRIANGLE_AREA {\n-    public static double triangle_area(double a, double h) {\n-        return a * h;\n+public static double triangle_area(double a, double h) {\n+    if (a <= 0 || h <= 0) {\n+        throw new IllegalArgumentException(\"Sides of a triangle must be positive\");\n     }\n+    try {\n+        BigDecimal area = BigDecimal.valueOf(a).multiply(BigDecimal.valueOf(h)).multiply(BigDecimal.valueOf(0.5));\n+        if (area.compareTo(BigDecimal.valueOf(Double.MAX_VALUE)) > 0) {\n+            throw new IllegalArgumentException(\"Input values result in overflow\");\n+        }\n+        return area.doubleValue();\n+    } catch (ArithmeticException e) {\n+        throw new IllegalArgumentException(\"Input values result in arithmetic error\");\n+    }\n+}\n }",
    "result_reason": " /tmp/humaneval-TRIANGLE_AREA/src/main/java/humaneval/buggy/TRIANGLE_AREA.java:[13,9] cannot find symbol",
    "test_result": "ERROR"
}