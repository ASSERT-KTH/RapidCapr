{
    "patch": "name = new Name();\nname.setIdentifier(\"\");\nname.setLineno(functionNode.getLineno());\nname.setParent(functionNode);\nfunctionNode.setFunctionName(name);\nif (functionNode.getFunctionType() == FunctionNode.FUNCTION_EXPRESSION && functionNode.getEnclosingFunction() != null) {\n  int anonFunctionCount = functionNode.getEnclosingFunction().getAnonFunctionCount();\n  functionNode.getEnclosingFunction().addAndGetAnonFunctionCount(1);\n  String anonName = \"anonymous\" + anonFunctionCount;\n  functionNode.setIdentifier(anonName);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..5dbd9607 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,17 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+name = new Name();\n+name.setIdentifier(\"\");\n+name.setLineno(functionNode.getLineno());\n+name.setParent(functionNode);\n+functionNode.setFunctionName(name);\n+if (functionNode.getFunctionType() == FunctionNode.FUNCTION_EXPRESSION && functionNode.getEnclosingFunction() != null) {\n+  int anonFunctionCount = functionNode.getEnclosingFunction().getAnonFunctionCount();\n+  functionNode.getEnclosingFunction().addAndGetAnonFunctionCount(1);\n+  String anonName = \"anonymous\" + anonFunctionCount;\n+  functionNode.setIdentifier(anonName);\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}