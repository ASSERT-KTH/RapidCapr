{
    "patch": "    \n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      int numberOfArgsToRemove = 0;\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          numberOfArgsToRemove++;\n          argList.removeChild(lastArg);\n        } else {\n          break;\n        }\n      }\n      if (numberOfArgsToRemove > 0) {\n        // Remove any default values corresponding to the unused parameters\n        NodeList<Node> parameters = argList.children();\n        int numParametersToRemove = Math.min(parameters.size(), numberOfArgsToRemove);\n        for (int i = 0; i < numParametersToRemove; i++) {\n          Node param = parameters.get(i);\n          if (param.isDefaultValue()) {\n            Node varName = param.removeFirstChild();\n            fnScope.undeclare(varName.getString());\n          }\n        }\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a0ec5917 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,35 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      int numberOfArgsToRemove = 0;\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          numberOfArgsToRemove++;\n+          argList.removeChild(lastArg);\n+        } else {\n+          break;\n+        }\n+      }\n+      if (numberOfArgsToRemove > 0) {\n+        // Remove any default values corresponding to the unused parameters\n+        NodeList<Node> parameters = argList.children();\n+        int numParametersToRemove = Math.min(parameters.size(), numberOfArgsToRemove);\n+        for (int i = 0; i < numParametersToRemove; i++) {\n+          Node param = parameters.get(i);\n+          if (param.isDefaultValue()) {\n+            Node varName = param.removeFirstChild();\n+            fnScope.undeclare(varName.getString());\n+          }\n+        }\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}