{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expandedSimplex;\n\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted.getPoint() == best.getPoint() ?\n                            contracted.withRanking(best.getRank()) : contracted.withRanking(best.getRank() + 1);\n\n                } else {\n\n                    // perform a shrink step\n                    final RealPointValuePair[] shrunkSimplex = new RealPointValuePair[dimension + 1];\n                    shrunkSimplex[0] = best;\n                    final double[] xSmallest = best.getPointRef();\n                    for (int i = 1; i <= dimension; ++i) {\n                        final double[] x = original[i].getPointRef();\n                        final double[] xShrunk = new double[dimension];\n                        for (int j = 0; j < dimension; ++j) {\n                            xShrunk[j] = xSmallest[j] + delta * (x[j] - xSmallest[j]);\n                        }\n                        final double[] xShrunkAdjusted = getContraction(xSmallest, xShrunk, original[i].getPointRef());\n                        shrunkSimplex[i] = new RealPointValuePair(xShrunkAdjusted, Double.NaN, false, i);\n                    }\n                    evaluateSimplex(shrunkSimplex, comparator);\n                    simplex = shrunkSimplex;\n\n                }\n\n            }\n\n            // check convergence\n            if (getConvergenceChecker() != null &&\n                getConvergenceChecker().converged(getIterations(), original[0], simplex[0])) {\n                return;\n            }\n\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..b00bc631b 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -75,22 +75,50 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expandedSimplex;\n+\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n+            } else {\n+\n+                // compute the contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contracted.getPoint() == best.getPoint() ?\n+                            contracted.withRanking(best.getRank()) : contracted.withRanking(best.getRank() + 1);\n+\n+                } else {\n+\n+                    // perform a shrink step\n+                    final RealPointValuePair[] shrunkSimplex = new RealPointValuePair[dimension + 1];\n+                    shrunkSimplex[0] = best;\n+                    final double[] xSmallest = best.getPointRef();\n+                    for (int i = 1; i <= dimension; ++i) {\n+                        final double[] x = original[i].getPointRef();\n+                        final double[] xShrunk = new double[dimension];\n+                        for (int j = 0; j < dimension; ++j) {\n+                            xShrunk[j] = xSmallest[j] + delta * (x[j] - xSmallest[j]);\n+                        }\n+                        final double[] xShrunkAdjusted = getContraction(xSmallest, xShrunk, original[i].getPointRef());\n+                        shrunkSimplex[i] = new RealPointValuePair(xShrunkAdjusted, Double.NaN, false, i);\n+                    }\n+                    evaluateSimplex(shrunkSimplex, comparator);\n+                    simplex = shrunkSimplex;\n \n-            }\n+                }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            }\n \n             // check convergence\n+            if (getConvergenceChecker() != null &&\n+                getConvergenceChecker().converged(getIterations(), original[0], simplex[0])) {\n                 return;\n             }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}