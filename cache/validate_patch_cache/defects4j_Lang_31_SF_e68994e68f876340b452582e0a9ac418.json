{
    "patch": "I apologize for the syntax error in my previous response, here's the updated implementation without any errors.\n\n``` java\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    boolean[] matched = new boolean[Character.MAX_VALUE + 1];\n    for (int i = 0; i < searchLength; i++) {\n        char c = searchChars[i];\n        if (c < matched.length) {\n            matched[c] = true;\n        }\n    }\n    for (int i = 0; i < csLength; i++) {\n        char c = cs.charAt(i);\n        if (c < matched.length && matched[c]) {\n            return true;\n        }\n        if (Character.isHighSurrogate(c) && i < csLength - 1) {\n            int codePoint = Character.codePointAt(cs, i);\n            i++;\n            if (codePoint < matched.length && matched[codePoint]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```\n\nIt uses a boolean array `matched` to store the matched characters found in the `searchChars[]` array. The `matched` array is indexed by the character value and a value of true indicates that the character has been found in the `searchChars[]` array. The function iterates over the characters of the input `cs` CharSequence, checking each character and, if necessary, the next character to form a codepoint. When a character is found in the `searchChars[]` array, the function immediately returns true. \n\nI hope this corrected code resolves the issue. Please let me know if you face any further issues!",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..6eb4243e 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,42 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+I apologize for the syntax error in my previous response, here's the updated implementation without any errors.\n+\n+``` java\n+public static boolean containsAny(CharSequence cs, char[] searchChars) {\n+    if (cs == null || searchChars == null) {\n+        return false;\n+    }\n+    int csLength = cs.length();\n+    int searchLength = searchChars.length;\n+    boolean[] matched = new boolean[Character.MAX_VALUE + 1];\n+    for (int i = 0; i < searchLength; i++) {\n+        char c = searchChars[i];\n+        if (c < matched.length) {\n+            matched[c] = true;\n+        }\n+    }\n+    for (int i = 0; i < csLength; i++) {\n+        char c = cs.charAt(i);\n+        if (c < matched.length && matched[c]) {\n+            return true;\n+        }\n+        if (Character.isHighSurrogate(c) && i < csLength - 1) {\n+            int codePoint = Character.codePointAt(cs, i);\n+            i++;\n+            if (codePoint < matched.length && matched[codePoint]) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+```\n+\n+It uses a boolean array `matched` to store the matched characters found in the `searchChars[]` array. The `matched` array is indexed by the character value and a value of true indicates that the character has been found in the `searchChars[]` array. The function iterates over the characters of the input `cs` CharSequence, checking each character and, if necessary, the next character to form a codepoint. When a character is found in the `searchChars[]` array, the function immediately returns true. \n+\n+I hope this corrected code resolves the issue. Please let me know if you face any further issues!\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}