{
    "patch": "public void testGetprop4() {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream ps = new PrintStream(baos);\n    System.setErr(ps);\n    String[] args = {\"-getprop\", \"NON_EXISTENT_PROPERTY\"};\n    Main.main(args);\n    String expectedOutput = \"error: could not find property: NON_EXISTENT_PROPERTY\\n\";\n    String actualOutput = baos.toString();\n    assertEquals(expectedOutput, actualOutput);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..d0bf1595 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() {\n+    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    PrintStream ps = new PrintStream(baos);\n+    System.setErr(ps);\n+    String[] args = {\"-getprop\", \"NON_EXISTENT_PROPERTY\"};\n+    Main.main(args);\n+    String expectedOutput = \"error: could not find property: NON_EXISTENT_PROPERTY\\n\";\n+    String actualOutput = baos.toString();\n+    assertEquals(expectedOutput, actualOutput);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}