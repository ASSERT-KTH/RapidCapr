{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Ignore indirect references, like x.y (except x.y(), since\n    // the function referenced by y might reference 'this').\n    //\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      // A call target maybe using the object as a 'this' value.\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        return false;\n      }\n\n      // NOTE(nicksantos): This pass's object-splitting algorithm has\n      // a blind spot. It assumes that if a property isn't defined on an\n      // object, then the value is undefined. This is not true, because\n      // Object.prototype can have arbitrary properties on it.\n      //\n      // We short-circuit this problem by bailing out if we see a reference\n      // to a property that isn't defined on the object literal. This\n      // isn't a perfect algorithm, but it should catch most cases.\n      continue;\n    }\n\n    if (!isVarOrAssignExprLhs(name)) {\n      return false;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null || !val.isObjectLit()) {\n      return false;\n    }\n\n    // for all object literal children,\n    // check that they are not getter/setters\n    // and not recursively referencing the variable we're inlining\n    for (Node child = val.getFirstChild(); child != null;\n         child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        return false;\n      }\n\n      Node childVal = child.getFirstChild();\n      if (childVal == null) {\n        // Short circuit if object literal has an empty key\n        return false;\n      }\n\n      boolean foundRefToParam = false;\n      for (Reference t : refs) {\n        if (t.getNode() == childVal) {\n          foundRefToParam = true;\n          if (!isLegalChild(child, t.getParent())) {\n            return false;\n          }\n          break;\n        }\n      }\n      if (foundRefToParam) {\n        continue;\n      }\n      if (childVal.isObjectLit()) {\n        // Not allowed due to self-referential assignment, e.g.:\n        // a = { b: { c: 3 }, d: a.b }; should assign a.b first, then a\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nprivate boolean isLegalChild(Node child, Node parent) {\n  if (parent.isObjectLit()) {\n    for (Node sibling = parent.getFirstChild(); sibling != null;\n         sibling = sibling.getNext()) {\n      if (child != sibling && child.matchesQualifiedName(sibling, false)) {\n        // already seen this key, so it is a duplicate\n        return false;\n      }\n    }\n  }\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..2a91f266 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,92 +152,92 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n-\n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n-        }\n+private boolean isInlinableObject(List<Reference> refs) {\n+  for (Reference ref : refs) {\n+    Node name = ref.getNode();\n+    Node parent = ref.getParent();\n+    Node gramps = ref.getGrandparent();\n+\n+    // Ignore indirect references, like x.y (except x.y(), since\n+    // the function referenced by y might reference 'this').\n+    //\n+    if (parent.isGetProp()) {\n+      Preconditions.checkState(parent.getFirstChild() == name);\n+      // A call target maybe using the object as a 'this' value.\n+      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n+        return false;\n+      }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n+      // NOTE(nicksantos): This pass's object-splitting algorithm has\n+      // a blind spot. It assumes that if a property isn't defined on an\n+      // object, then the value is undefined. This is not true, because\n+      // Object.prototype can have arbitrary properties on it.\n+      //\n+      // We short-circuit this problem by bailing out if we see a reference\n+      // to a property that isn't defined on the object literal. This\n+      // isn't a perfect algorithm, but it should catch most cases.\n+      continue;\n+    }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n-        }\n+    if (!isVarOrAssignExprLhs(name)) {\n+      return false;\n+    }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n-        }\n+    Node val = ref.getAssignedValue();\n+    if (val == null || !val.isObjectLit()) {\n+      return false;\n+    }\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n+    // for all object literal children,\n+    // check that they are not getter/setters\n+    // and not recursively referencing the variable we're inlining\n+    for (Node child = val.getFirstChild(); child != null;\n+         child = child.getNext()) {\n+      if (child.isGetterDef() || child.isSetterDef()) {\n+        return false;\n+      }\n \n+      Node childVal = child.getFirstChild();\n+      if (childVal == null) {\n+        // Short circuit if object literal has an empty key\n+        return false;\n+      }\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n+      boolean foundRefToParam = false;\n+      for (Reference t : refs) {\n+        if (t.getNode() == childVal) {\n+          foundRefToParam = true;\n+          if (!isLegalChild(child, t.getParent())) {\n+            return false;\n           }\n+          break;\n         }\n+      }\n+      if (foundRefToParam) {\n+        continue;\n+      }\n+      if (childVal.isObjectLit()) {\n+        // Not allowed due to self-referential assignment, e.g.:\n+        // a = { b: { c: 3 }, d: a.b }; should assign a.b first, then a\n+        return false;\n+      }\n+    }\n+  }\n+  return true;\n+}\n \n-\n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+private boolean isLegalChild(Node child, Node parent) {\n+  if (parent.isObjectLit()) {\n+    for (Node sibling = parent.getFirstChild(); sibling != null;\n+         sibling = sibling.getNext()) {\n+      if (child != sibling && child.matchesQualifiedName(sibling, false)) {\n+        // already seen this key, so it is a duplicate\n+        return false;\n       }\n-      return ret;\n     }\n+  }\n+  return true;\n+}\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}