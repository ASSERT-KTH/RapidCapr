{
    "patch": "public static double getTypedPercent(JSONObject jsonObject) {\n    double totalFields = 0;\n    double typedFields = 0;\n\n    Iterator<String> keys = jsonObject.keys();\n    while (keys.hasNext()) {\n        String key = keys.next();\n        totalFields++;\n\n        if (jsonObject.opt(key) != null) {\n            typedFields++;\n        }\n    }\n\n    double percent = typedFields / totalFields * 100.0;\n    return Math.round(percent * 10.0) / 10.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..a97b5e85 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject jsonObject) {\n+    double totalFields = 0;\n+    double typedFields = 0;\n+\n+    Iterator<String> keys = jsonObject.keys();\n+    while (keys.hasNext()) {\n+        String key = keys.next();\n+        totalFields++;\n+\n+        if (jsonObject.opt(key) != null) {\n+            typedFields++;\n+        }\n+    }\n+\n+    double percent = typedFields / totalFields * 100.0;\n+    return Math.round(percent * 10.0) / 10.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}