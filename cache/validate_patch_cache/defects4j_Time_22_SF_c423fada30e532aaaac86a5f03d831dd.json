{
    "patch": "// If the duration is in milliseconds:\nprotected BasePeriod(long duration) {\n    this.duration = duration;\n    weeks = (int) (duration / (7L * 24 * 60 * 60 * 1000));\n    duration = duration - (weeks * 7L * 24 * 60 * 60 * 1000);\n    days = (int) (duration / (24L * 60 * 60 * 1000));\n    duration = duration - (days * 24L * 60 * 60 * 1000);\n    hours = (int) (duration / (60L * 60 * 1000));\n    duration = duration - (hours * 60L * 60 * 1000);\n    minutes = (int) (duration / (60L * 1000));\n    duration = duration - (minutes * 60L * 1000);\n    seconds = (int) (duration / 1000);\n    millis = (int) (duration - (seconds * 1000));\n}\n\n// If the duration is in weeks:\nprotected BasePeriod(long duration) {\n    this(duration, Weeks.weeks(0), null);\n}\n\npublic BasePeriod(long duration, PeriodType type, Chronology chrono) {\n    super();\n    type = checkPeriodType(type);\n    chrono = DateTimeUtils.getChronology(chrono);\n\n    this.duration = duration;\n\n    // Compute fields using given period type\n    int totalMillis = type.getFieldIndex(DurationFieldType.millis());\n    if (totalMillis >= 0) {\n        millis = FieldUtils.safeToInt(duration % DateTimeConstants.MILLIS_PER_SECOND);\n        duration /= DateTimeConstants.MILLIS_PER_SECOND;\n        totalMillis = type.getFieldIndex(DurationFieldType.seconds());\n        if (totalMillis >= 0) {\n            seconds = FieldUtils.safeToInt(duration % DateTimeConstants.SECONDS_PER_MINUTE);\n            duration /= DateTimeConstants.SECONDS_PER_MINUTE;\n            totalMillis = type.getFieldIndex(DurationFieldType.minutes());\n            if (totalMillis >= 0) {\n                minutes = FieldUtils.safeToInt(duration % DateTimeConstants.MINUTES_PER_HOUR);\n                duration /= DateTimeConstants.MINUTES_PER_HOUR;\n                totalMillis = type.getFieldIndex(DurationFieldType.hours());\n                if (totalMillis >= 0) {\n                    hours = FieldUtils.safeToInt(duration % DateTimeConstants.HOURS_PER_DAY);\n                    duration /= DateTimeConstants.HOURS_PER_DAY;\n                    totalMillis = type.getFieldIndex(DurationFieldType.days());\n                    if (totalMillis >= 0) {\n                        days = FieldUtils.safeToInt(duration % 7);\n                        weeks = FieldUtils.safeToInt(duration / 7);\n                    } else {\n                        weeks = 0;\n                        totalMillis = type.getFieldIndex(DurationFieldType.weeks());\n                        if (totalMillis >= 0) {\n                            weeks = FieldUtils.safeToInt(duration);\n                        } else {\n                            days = FieldUtils.safeToInt(duration);\n                        }\n                    }\n                } else {\n                    days = FieldUtils.safeToInt(duration);\n                }\n            } else {\n                hours = FieldUtils.safeToInt(duration);\n            }\n        } else {\n            minutes = FieldUtils.safeToInt(duration);\n        }\n    } else {\n        seconds = FieldUtils.safeToInt(duration);\n    }\n    setPeriodType(type);\n    iChronology = chrono;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..37a4e11f 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,78 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+// If the duration is in milliseconds:\n+protected BasePeriod(long duration) {\n+    this.duration = duration;\n+    weeks = (int) (duration / (7L * 24 * 60 * 60 * 1000));\n+    duration = duration - (weeks * 7L * 24 * 60 * 60 * 1000);\n+    days = (int) (duration / (24L * 60 * 60 * 1000));\n+    duration = duration - (days * 24L * 60 * 60 * 1000);\n+    hours = (int) (duration / (60L * 60 * 1000));\n+    duration = duration - (hours * 60L * 60 * 1000);\n+    minutes = (int) (duration / (60L * 1000));\n+    duration = duration - (minutes * 60L * 1000);\n+    seconds = (int) (duration / 1000);\n+    millis = (int) (duration - (seconds * 1000));\n+}\n+\n+// If the duration is in weeks:\n+protected BasePeriod(long duration) {\n+    this(duration, Weeks.weeks(0), null);\n+}\n+\n+public BasePeriod(long duration, PeriodType type, Chronology chrono) {\n+    super();\n+    type = checkPeriodType(type);\n+    chrono = DateTimeUtils.getChronology(chrono);\n+\n+    this.duration = duration;\n+\n+    // Compute fields using given period type\n+    int totalMillis = type.getFieldIndex(DurationFieldType.millis());\n+    if (totalMillis >= 0) {\n+        millis = FieldUtils.safeToInt(duration % DateTimeConstants.MILLIS_PER_SECOND);\n+        duration /= DateTimeConstants.MILLIS_PER_SECOND;\n+        totalMillis = type.getFieldIndex(DurationFieldType.seconds());\n+        if (totalMillis >= 0) {\n+            seconds = FieldUtils.safeToInt(duration % DateTimeConstants.SECONDS_PER_MINUTE);\n+            duration /= DateTimeConstants.SECONDS_PER_MINUTE;\n+            totalMillis = type.getFieldIndex(DurationFieldType.minutes());\n+            if (totalMillis >= 0) {\n+                minutes = FieldUtils.safeToInt(duration % DateTimeConstants.MINUTES_PER_HOUR);\n+                duration /= DateTimeConstants.MINUTES_PER_HOUR;\n+                totalMillis = type.getFieldIndex(DurationFieldType.hours());\n+                if (totalMillis >= 0) {\n+                    hours = FieldUtils.safeToInt(duration % DateTimeConstants.HOURS_PER_DAY);\n+                    duration /= DateTimeConstants.HOURS_PER_DAY;\n+                    totalMillis = type.getFieldIndex(DurationFieldType.days());\n+                    if (totalMillis >= 0) {\n+                        days = FieldUtils.safeToInt(duration % 7);\n+                        weeks = FieldUtils.safeToInt(duration / 7);\n+                    } else {\n+                        weeks = 0;\n+                        totalMillis = type.getFieldIndex(DurationFieldType.weeks());\n+                        if (totalMillis >= 0) {\n+                            weeks = FieldUtils.safeToInt(duration);\n+                        } else {\n+                            days = FieldUtils.safeToInt(duration);\n+                        }\n+                    }\n+                } else {\n+                    days = FieldUtils.safeToInt(duration);\n+                }\n+            } else {\n+                hours = FieldUtils.safeToInt(duration);\n+            }\n+        } else {\n+            minutes = FieldUtils.safeToInt(duration);\n+        }\n+    } else {\n+        seconds = FieldUtils.safeToInt(duration);\n     }\n+    setPeriodType(type);\n+    iChronology = chrono;\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: constructor BasePeriod(long) is already defined in class BasePeriod",
    "test_result": "ERROR"
}