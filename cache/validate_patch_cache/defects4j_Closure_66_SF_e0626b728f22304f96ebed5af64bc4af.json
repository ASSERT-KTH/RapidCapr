{
    "patch": "public static double getTypedPercent(String jsonStr) throws Exception {\n    ObjectMapper mapper = new ObjectMapper();\n    JsonNode root = mapper.readTree(jsonStr);\n    int numTyped = 0;\n    int numTotal = 0;\n    Iterator<JsonNode> iterator = root.elements();\n    while (iterator.hasNext()) {\n        JsonNode node = iterator.next();\n        if (node.has(\"value\")) {\n            numTotal++;\n            if (!node.get(\"value\").isNull()) {\n                numTyped++;\n            }\n        }\n    }\n    return numTyped * 100.0 / numTotal;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..c920ac99 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) throws Exception {\n+    ObjectMapper mapper = new ObjectMapper();\n+    JsonNode root = mapper.readTree(jsonStr);\n+    int numTyped = 0;\n+    int numTotal = 0;\n+    Iterator<JsonNode> iterator = root.elements();\n+    while (iterator.hasNext()) {\n+        JsonNode node = iterator.next();\n+        if (node.has(\"value\")) {\n+            numTotal++;\n+            if (!node.get(\"value\").isNull()) {\n+                numTyped++;\n+            }\n+        }\n+    }\n+    return numTyped * 100.0 / numTotal;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}