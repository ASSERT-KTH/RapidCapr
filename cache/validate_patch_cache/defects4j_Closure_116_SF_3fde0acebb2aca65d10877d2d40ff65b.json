{
    "patch": "    Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n    // Arguments to the function.\n    Node fnArgs = NodeUtil.getFunctionParameters(fnNode);\n    // Body of the function.\n    Node fnBody = NodeUtil.getFunctionBody(fnNode);\n    // Arguments passed to the call.\n    Node callArgs = callNode.getNext();\n    // If function has internal references.\n    if (NodeUtil.detectLoop(fnBody)) {\n      return CanInlineResult.NO;\n    }\n    int paramCount = fnArgs.getChildCount();\n    int argCount = callArgs == null ? 0 : callArgs.getChildCount();\n    for (int i = 0; i < paramCount; ++i) {\n      Node paramNode = fnArgs.getChildAtIndex(i);\n      // Non-destructured, but default value destructuring.\n      if (paramNode.isDefaultValue()) {\n        paramNode = paramNode.getFirstChild();\n      }\n      String paramName = NodeUtil.getBestLValueName(paramNode);\n      if (i < argCount) {\n        Node arg = callArgs.getChildAtIndex(i);\n        if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        Scope.Var paramVar = null;\n        if (paramNode.isName()) {\n          paramVar =  NodeUtil.getNearestHoistScope(paramNode).getVar(paramName);\n        }\n        if (paramVar != null && paramVar.isMarkAssignedExactlyOnce()) {\n          if (NodeUtil.mayHaveSideEffects(fnBody)) {\n            return CanInlineResult.NO;\n          }\n        } else if (!NodeUtil.isImmutableValue(arg, compiler)) {\n          if (NodeUtil.mayEffectMutableState(arg, compiler)) {\n            return CanInlineResult.NO;\n          }\n          if (NodeUtil.getNameReferenceCount(fnBody, paramName) > 1) {\n            return CanInlineResult.NO;\n          }\n        } else if (NodeUtil.getNameReferenceCount(arg, paramName) > 1) {\n          return CanInlineResult.NO;\n        }\n      } else {\n        if (paramNode.getDefaultValue() == null && !fnNode.isArrowFunction()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..bab55e33 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,54 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+    Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n-\n-    Node block = fnNode.getLastChild();\n-\n-\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n+    // Arguments to the function.\n+    Node fnArgs = NodeUtil.getFunctionParameters(fnNode);\n+    // Body of the function.\n+    Node fnBody = NodeUtil.getFunctionBody(fnNode);\n+    // Arguments passed to the call.\n+    Node callArgs = callNode.getNext();\n+    // If function has internal references.\n+    if (NodeUtil.detectLoop(fnBody)) {\n+      return CanInlineResult.NO;\n+    }\n+    int paramCount = fnArgs.getChildCount();\n+    int argCount = callArgs == null ? 0 : callArgs.getChildCount();\n+    for (int i = 0; i < paramCount; ++i) {\n+      Node paramNode = fnArgs.getChildAtIndex(i);\n+      // Non-destructured, but default value destructuring.\n+      if (paramNode.isDefaultValue()) {\n+        paramNode = paramNode.getFirstChild();\n+      }\n+      String paramName = NodeUtil.getBestLValueName(paramNode);\n+      if (i < argCount) {\n+        Node arg = callArgs.getChildAtIndex(i);\n+        if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+        Scope.Var paramVar = null;\n+        if (paramNode.isName()) {\n+          paramVar =  NodeUtil.getNearestHoistScope(paramNode).getVar(paramName);\n+        }\n+        if (paramVar != null && paramVar.isMarkAssignedExactlyOnce()) {\n+          if (NodeUtil.mayHaveSideEffects(fnBody)) {\n             return CanInlineResult.NO;\n           }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        } else if (!NodeUtil.isImmutableValue(arg, compiler)) {\n+          if (NodeUtil.mayEffectMutableState(arg, compiler)) {\n+            return CanInlineResult.NO;\n+          }\n+          if (NodeUtil.getNameReferenceCount(fnBody, paramName) > 1) {\n+            return CanInlineResult.NO;\n+          }\n+        } else if (NodeUtil.getNameReferenceCount(arg, paramName) > 1) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n-      }\n-    }\n-\n-    return CanInlineResult.YES;\n-  }\n+      } else {\n+        if (paramNode.getDefaultValue() == null && !fnNode.isArrowFunction()) {\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}