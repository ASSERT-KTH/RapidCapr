{
    "patch": "                // if offsetLocal is negative, then we need to check if\n                // instantLocal lies in between a DST overlap\n                if (offsetLocal < 0) {\n                    long prevTransition = previousTransition(instantAdjusted);\n                    long nextTransition = nextTransition(instantAdjusted);\n                    if (prevTransition != nextTransition &&\n                            instantLocal - prevTransition < nextTransition - instantLocal) {\n                        return getOffset(prevTransition);\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..080bc809 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,16 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // if offsetLocal is negative, then we need to check if\n+                // instantLocal lies in between a DST overlap\n+                if (offsetLocal < 0) {\n+                    long prevTransition = previousTransition(instantAdjusted);\n+                    long nextTransition = nextTransition(instantAdjusted);\n+                    if (prevTransition != nextTransition &&\n+                            instantLocal - prevTransition < nextTransition - instantLocal) {\n+                        return getOffset(prevTransition);\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}