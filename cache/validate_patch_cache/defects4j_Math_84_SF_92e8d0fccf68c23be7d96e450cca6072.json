{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n\n            return;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            final RealPointValuePair[] contractedSimplex = simplex;\n            simplex = contractedSimplex;\n        } else {\n            // perform a shrink step\n            final RealPointValuePair[] shrunkSimplex = shrink(original, comparator);\n            simplex = shrunkSimplex;\n        }\n\n        // check convergence\n        if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                original[0], simplex[0])) {\n            return;\n        }\n    }\n}\n\nprivate RealPointValuePair[] shrink(final RealPointValuePair[] points,\n                                    final Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair[] updatedPoints = new RealPointValuePair[points.length];\n    final RealPointValuePair best = points[0];\n\n    for (int i = 1; i < points.length; i++) {\n        final double[] updatedPoint = new double[points[i].getPoint().length];\n        for (int j = 0; j < updatedPoint.length; j++) {\n            updatedPoint[j] = best.getPoint()[j] + delta * (points[i].getPoint()[j] - best.getPoint()[j]);\n        }\n        final double updatedValue = computeObjectiveValue(updatedPoint);\n        updatedPoints[i] = new RealPointValuePair(updatedPoint, updatedValue);\n    }\n\n    Arrays.sort(updatedPoints, comparator);\n    updatedPoints[0] = best; // best point remains the same\n    return updatedPoints;\n}\n\nprivate double computeObjectiveValue(final double[] point) {\n    try {\n        return computeObjectiveValue(new ArrayRealVector(point, false));\n    } catch (final FunctionEvaluationException e) {\n        throw new IllegalStateException(\"evaluation failed: \" + e.getMessage());\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..f85fd680c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,79 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            }\n \n-                return;\n+            return;\n \n-            }\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        // compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            final RealPointValuePair[] contractedSimplex = simplex;\n+            simplex = contractedSimplex;\n+        } else {\n+            // perform a shrink step\n+            final RealPointValuePair[] shrunkSimplex = shrink(original, comparator);\n+            simplex = shrunkSimplex;\n+        }\n \n-            // check convergence\n-                return;\n-            }\n+        // check convergence\n+        if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                original[0], simplex[0])) {\n+            return;\n+        }\n+    }\n+}\n+\n+private RealPointValuePair[] shrink(final RealPointValuePair[] points,\n+                                    final Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair[] updatedPoints = new RealPointValuePair[points.length];\n+    final RealPointValuePair best = points[0];\n \n+    for (int i = 1; i < points.length; i++) {\n+        final double[] updatedPoint = new double[points[i].getPoint().length];\n+        for (int j = 0; j < updatedPoint.length; j++) {\n+            updatedPoint[j] = best.getPoint()[j] + delta * (points[i].getPoint()[j] - best.getPoint()[j]);\n         }\n+        final double updatedValue = computeObjectiveValue(updatedPoint);\n+        updatedPoints[i] = new RealPointValuePair(updatedPoint, updatedValue);\n+    }\n \n+    Arrays.sort(updatedPoints, comparator);\n+    updatedPoints[0] = best; // best point remains the same\n+    return updatedPoints;\n+}\n+\n+private double computeObjectiveValue(final double[] point) {\n+    try {\n+        return computeObjectiveValue(new ArrayRealVector(point, false));\n+    } catch (final FunctionEvaluationException e) {\n+        throw new IllegalStateException(\"evaluation failed: \" + e.getMessage());\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}