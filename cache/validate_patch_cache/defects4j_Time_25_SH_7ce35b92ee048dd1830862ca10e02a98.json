{
    "patch": "                // check if we are in a gap\n                int offsetBefore = getOffset(instantLocal - 1);\n                int offsetAfter = getOffset(instantLocal + 1);\n                if (offsetBefore != offsetAfter) {\n                    // we are in a gap, find the transition\n                    long transition = nextTransition(instantLocal - 1);\n                    int offsetAtTransition = getOffset(transition);\n                    if (offsetBefore == offsetAtTransition) {\n                        // we skipped forward over the gap, move back inside\n                        return offsetBefore;\n                    } else if (offsetAfter == offsetAtTransition) {\n                        // we jumped backward into the gap\n                        return offsetAfter;\n                    } else {\n                        // we must be near another transition\n                        return offsetAdjusted;\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0d4dda1b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // check if we are in a gap\n+                int offsetBefore = getOffset(instantLocal - 1);\n+                int offsetAfter = getOffset(instantLocal + 1);\n+                if (offsetBefore != offsetAfter) {\n+                    // we are in a gap, find the transition\n+                    long transition = nextTransition(instantLocal - 1);\n+                    int offsetAtTransition = getOffset(transition);\n+                    if (offsetBefore == offsetAtTransition) {\n+                        // we skipped forward over the gap, move back inside\n+                        return offsetBefore;\n+                    } else if (offsetAfter == offsetAtTransition) {\n+                        // we jumped backward into the gap\n+                        return offsetAfter;\n+                    } else {\n+                        // we must be near another transition\n+                        return offsetAdjusted;\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}