{
    "patch": "      boolean removeAllArgs = false;\n      while ((lastArg = argList.getLastChild()) != null &&\n             !removeAllArgs) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          if (lastArg.hasChildren()) {\n            for (Node child = lastArg.getFirstChild();\n                 child != null && !removeAllArgs;\n                 child = child.getNext()) {\n              if (NodeUtil.mayHaveSideEffects(child)) {\n                removeAllArgs = true;\n              }\n            }\n          }\n\n          if (!removeAllArgs) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n          }\n        } else {\n          removeAllArgs = true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..35820734 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,27 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      boolean removeAllArgs = false;\n+      while ((lastArg = argList.getLastChild()) != null &&\n+             !removeAllArgs) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          if (lastArg.hasChildren()) {\n+            for (Node child = lastArg.getFirstChild();\n+                 child != null && !removeAllArgs;\n+                 child = child.getNext()) {\n+              if (NodeUtil.mayHaveSideEffects(child)) {\n+                removeAllArgs = true;\n+              }\n+            }\n+          }\n+\n+          if (!removeAllArgs) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+          }\n+        } else {\n+          removeAllArgs = true;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}