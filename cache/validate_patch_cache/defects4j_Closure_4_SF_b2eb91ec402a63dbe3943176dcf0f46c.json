{
    "patch": "  private JSType finishResolve(ErrorReporter t, StaticScope<JSType> enclosing) {\n    JSType result = null;\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    if (!isResolved()) {\n      result = this;\n    } else if (!registry.isLastGeneration()) {\n      result = this;\n    } else {\n      result = getReferencedType();\n    }\n    if (result == null) {\n      super.resolveInternal(t, enclosing);\n      if (isResolved()) {\n        finishPropertyContinuations();\n        if (registry.isLastGeneration()) {\n          return getReferencedType();\n        } else {\n          return this;\n        }\n      }\n      result = this;\n    }\n    return result;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..f4c31841 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,34 +181,31 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+  private JSType finishResolve(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    JSType result = null;\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    if (!isResolved()) {\n+      result = this;\n+    } else if (!registry.isLastGeneration()) {\n+      result = this;\n+    } else {\n+      result = getReferencedType();\n     }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+    if (result == null) {\n+      super.resolveInternal(t, enclosing);\n+      if (isResolved()) {\n+        finishPropertyContinuations();\n+        if (registry.isLastGeneration()) {\n+          return getReferencedType();\n+        } else {\n+          return this;\n+        }\n+      }\n+      result = this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    return result;\n   }\n \n   /**",
    "result_reason": "error: method does not override or implement a method from a supertype",
    "test_result": "ERROR"
}