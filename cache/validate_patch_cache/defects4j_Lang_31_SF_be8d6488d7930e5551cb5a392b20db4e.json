{
    "patch": "import java.util.*;\n\npublic class StringUtils {\n    public static boolean containsAny(CharSequence sequence, char... searchCharacters) {\n        if (sequence == null || searchCharacters == null) {\n            return false;\n        }\n\n        if (searchCharacters.length == 0) {\n            return false;\n        }\n\n        HashSet<Character> set = new HashSet<Character>();\n        for (char ch : searchCharacters) {\n            set.add(ch);\n        }\n\n        for (int i = 0; i < sequence.length(); i++) {\n            char ch = sequence.charAt(i);\n            if (set.contains(ch)) {\n                return true;\n            }\n\n            if (Character.isHighSurrogate(ch) && i < sequence.length() - 1) {\n                char ch2 = sequence.charAt(i + 1);\n                if (Character.isLowSurrogate(ch2)) {\n                    int codepoint = Character.toCodePoint(ch, ch2);\n                    if (set.contains((char)codepoint)) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..0ef27341 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,43 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.*;\n+\n+public class StringUtils {\n+    public static boolean containsAny(CharSequence sequence, char... searchCharacters) {\n+        if (sequence == null || searchCharacters == null) {\n+            return false;\n+        }\n+\n+        if (searchCharacters.length == 0) {\n+            return false;\n+        }\n+\n+        HashSet<Character> set = new HashSet<Character>();\n+        for (char ch : searchCharacters) {\n+            set.add(ch);\n+        }\n+\n+        for (int i = 0; i < sequence.length(); i++) {\n+            char ch = sequence.charAt(i);\n+            if (set.contains(ch)) {\n+                return true;\n+            }\n+\n+            if (Character.isHighSurrogate(ch) && i < sequence.length() - 1) {\n+                char ch2 = sequence.charAt(i + 1);\n+                if (Character.isLowSurrogate(ch2)) {\n+                    int codepoint = Character.toCodePoint(ch, ch2);\n+                    if (set.contains((char)codepoint)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}