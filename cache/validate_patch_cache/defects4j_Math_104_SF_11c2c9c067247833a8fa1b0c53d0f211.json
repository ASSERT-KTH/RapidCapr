{
    "patch": "public static double regularizedGamma(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1) {\n        // use the regularized gamma function to reduce x to (0, 1]\n        double regularized = regularizedGammaComplemented(a, x, epsilon, maxIterations);\n        return 1.0 - regularized; // complement\n    }\n\n    // initialize recursion with series representation\n    double n = 0.0;\n    double an = 1.0 / a;\n    double sum = an;\n    while (Math.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n        n += 1.0;\n        an *= x / (a + n);\n        sum += an;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxIterationsExceededException(maxIterations);\n    }\n\n    return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..b3815a465 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,37 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1) {\n+        // use the regularized gamma function to reduce x to (0, 1]\n+        double regularized = regularizedGammaComplemented(a, x, epsilon, maxIterations);\n+        return 1.0 - regularized; // complement\n+    }\n+\n+    // initialize recursion with series representation\n+    double n = 0.0;\n+    double an = 1.0 / a;\n+    double sum = an;\n+    while (Math.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n+        n += 1.0;\n+        an *= x / (a + n);\n+        sum += an;\n+    }\n+\n+    if (n >= maxIterations) {\n+        throw new MaxIterationsExceededException(maxIterations);\n+    }\n+\n+    return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}