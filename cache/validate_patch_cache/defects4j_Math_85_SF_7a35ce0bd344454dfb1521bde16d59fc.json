{
    "patch": "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations) throws ConvergenceException, \n        FunctionEvaluationException {\n    \n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n    \n    double a = initial;\n    double b = initial;\n    double fa = function.value(a);\n    double fb = function.value(b);\n    \n    // Check if initial value is already a root\n    if (fa == 0.0) {\n        return new double[] {a, a};\n    }\n    if (fb == 0.0) {\n        return new double[] {b, b};\n    }\n    \n    double delta = (upperBound - lowerBound) / 10;\n    int numIterations = 0;\n    \n    // Try to bracket the root with the current initial value\n    while (fa * fb >= 0) {\n        if (numIterations > maximumIterations) {\n            throw new ConvergenceException(\"Failed to bracket root: too many iterations\");\n        }\n\n        double range = Math.abs(upperBound - lowerBound);\n        if (range < Precision.EPSILON) {\n            throw new ConvergenceException(\"Failed to bracket root: interval is too small\");\n        }\n        \n        delta = Math.max(delta, range / 100.0);\n        if (a == initial) {\n            b = Math.min(initial + delta, upperBound);\n        } else if (b == initial) {\n            a = Math.max(initial - delta, lowerBound);\n        } else {\n            // Interpolate a new point for bracketing\n            double c = (fa - fb) / (a - b);\n            double d = fa - c * a;\n            double x1 = (-d / c);\n            \n            if (x1 < b && x1 > lowerBound) {\n                a = x1;\n            } else if (x1 > b && x1 < upperBound) {\n                b = x1;\n            } else {\n                // Interpolated point is not within range \n                if (Math.abs(a - initial) < Math.abs(b - initial)) {\n                    b -= delta;\n                } else {\n                    a += delta;\n                }\n            }\n        }\n\n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++;\n    }\n    \n    // Reorder the bracket so it encloses the root\n    if (fa < fb) {\n        return new double[] {a, b};\n    }\n    \n    return new double[] {b, a};\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..15a119f4e 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,50 +162,88 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n+public static double[] bracket(UnivariateRealFunction function,\n+        double initial, double lowerBound, double upperBound, \n+        int maximumIterations) throws ConvergenceException, \n+        FunctionEvaluationException {\n+    \n+    if (function == null) {\n+        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+    }\n+    if (maximumIterations <= 0)  {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+              \"bad value for maximum iterations number: {0}\", maximumIterations);\n+    }\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+              lowerBound, initial, upperBound);\n+    }\n+    \n+    double a = initial;\n+    double b = initial;\n+    double fa = function.value(a);\n+    double fb = function.value(b);\n+    \n+    // Check if initial value is already a root\n+    if (fa == 0.0) {\n+        return new double[] {a, a};\n+    }\n+    if (fb == 0.0) {\n+        return new double[] {b, b};\n+    }\n+    \n+    double delta = (upperBound - lowerBound) / 10;\n+    int numIterations = 0;\n+    \n+    // Try to bracket the root with the current initial value\n+    while (fa * fb >= 0) {\n+        if (numIterations > maximumIterations) {\n+            throw new ConvergenceException(\"Failed to bracket root: too many iterations\");\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+\n+        double range = Math.abs(upperBound - lowerBound);\n+        if (range < Precision.EPSILON) {\n+            throw new ConvergenceException(\"Failed to bracket root: interval is too small\");\n         }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n+        \n+        delta = Math.max(delta, range / 100.0);\n+        if (a == initial) {\n+            b = Math.min(initial + delta, upperBound);\n+        } else if (b == initial) {\n+            a = Math.max(initial - delta, lowerBound);\n+        } else {\n+            // Interpolate a new point for bracketing\n+            double c = (fa - fb) / (a - b);\n+            double d = fa - c * a;\n+            double x1 = (-d / c);\n             \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+            if (x1 < b && x1 > lowerBound) {\n+                a = x1;\n+            } else if (x1 > b && x1 < upperBound) {\n+                b = x1;\n+            } else {\n+                // Interpolated point is not within range \n+                if (Math.abs(a - initial) < Math.abs(b - initial)) {\n+                    b -= delta;\n+                } else {\n+                    a += delta;\n+                }\n+            }\n         }\n-        \n-        return new double[]{a, b};\n+\n+        fa = function.value(a);\n+        fb = function.value(b);\n+        numIterations++;\n+    }\n+    \n+    // Reorder the bracket so it encloses the root\n+    if (fa < fb) {\n+        return new double[] {a, b};\n     }\n+    \n+    return new double[] {b, a};\n+}\n \n     /**\n      * Compute the midpoint of two values.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}