{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class MyMath {\n    public static double regularizedGammaP(double a, double x) {\n        if (Double.isNaN(a) || Double.isNaN(x) ||\n            a <= 0.0 || x < 0.0) {\n            return Double.NaN;\n        }\n        if (x == 0.0) {\n            return 0.0;\n        }\n        if (x >= a + 1.0) {\n            return 1.0 - regularizedGammaQ(a, x);\n        }\n        double sum = term = 1.0 / a;\n        for (int k = 1; k < 100000; ++k) {\n            term *= x / (a + k);\n            sum += term;\n            if (FastMath.abs(term) < FastMath.abs(sum) * 1E-15) {\n                return sum * FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a));\n            }\n        }\n        return Double.NaN;\n    }\n\n    public static double regularizedGammaQ(double a, double x) {\n        if (Double.isNaN(a) || Double.isNaN(x) ||\n            a <= 0.0 || x < 0.0) {\n            return Double.NaN;\n        }\n        if (x == 0.0) {\n            return 1.0;\n        }\n        if (x < a + 1.0) {\n            return 1.0 - regularizedGammaP(a, x);\n        }\n        return 1.0 - continuedFraction(a, x);\n    }\n\n    private static double term;\n\n    public static double continuedFraction(double a, double x) {\n        double f = 1.0;\n        double C = f;\n        double D = 0.0;\n        int i, a0 = 0;\n        double b = x + 1.0 - a;\n        double c = 1.0 / 1E-30;\n        double d = 1.0 / b;\n        double h = d;\n        for (i = 1; i < 100000; ++i) {\n            a0++;\n            double an = -1 * (double) i * (double) (i - a);\n            b += 2.0;\n            d = an * d + b;\n            if (FastMath.abs(d) < 1E-220) {\n                d = 1E-220;\n            }\n            c = b + an / c;\n            if (FastMath.abs(c) < 1E-220) {\n                c = 1E-220;\n            }\n            d = 1.0 / d;\n            double delta = c * d;\n            h *= delta;\n            if (FastMath.abs(delta - 1.0) < 1E-15) {\n                return h * FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a));\n            }\n        }\n        return Double.NaN;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bcb43f1f2 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,79 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class MyMath {\n+    public static double regularizedGammaP(double a, double x) {\n+        if (Double.isNaN(a) || Double.isNaN(x) ||\n+            a <= 0.0 || x < 0.0) {\n+            return Double.NaN;\n+        }\n+        if (x == 0.0) {\n+            return 0.0;\n+        }\n+        if (x >= a + 1.0) {\n+            return 1.0 - regularizedGammaQ(a, x);\n+        }\n+        double sum = term = 1.0 / a;\n+        for (int k = 1; k < 100000; ++k) {\n+            term *= x / (a + k);\n+            sum += term;\n+            if (FastMath.abs(term) < FastMath.abs(sum) * 1E-15) {\n+                return sum * FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a));\n+            }\n+        }\n+        return Double.NaN;\n+    }\n+\n+    public static double regularizedGammaQ(double a, double x) {\n+        if (Double.isNaN(a) || Double.isNaN(x) ||\n+            a <= 0.0 || x < 0.0) {\n+            return Double.NaN;\n+        }\n+        if (x == 0.0) {\n+            return 1.0;\n+        }\n+        if (x < a + 1.0) {\n+            return 1.0 - regularizedGammaP(a, x);\n+        }\n+        return 1.0 - continuedFraction(a, x);\n+    }\n+\n+    private static double term;\n+\n+    public static double continuedFraction(double a, double x) {\n+        double f = 1.0;\n+        double C = f;\n+        double D = 0.0;\n+        int i, a0 = 0;\n+        double b = x + 1.0 - a;\n+        double c = 1.0 / 1E-30;\n+        double d = 1.0 / b;\n+        double h = d;\n+        for (i = 1; i < 100000; ++i) {\n+            a0++;\n+            double an = -1 * (double) i * (double) (i - a);\n+            b += 2.0;\n+            d = an * d + b;\n+            if (FastMath.abs(d) < 1E-220) {\n+                d = 1E-220;\n+            }\n+            c = b + an / c;\n+            if (FastMath.abs(c) < 1E-220) {\n+                c = 1E-220;\n+            }\n+            d = 1.0 / d;\n+            double delta = c * d;\n+            h *= delta;\n+            if (FastMath.abs(delta - 1.0) < 1E-15) {\n+                return h * FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a));\n+            }\n+        }\n+        return Double.NaN;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}