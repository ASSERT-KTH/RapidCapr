{
    "patch": "Node function = fnScope.getRootNode();\nNode block = function.getLastChild();\n\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n}\n\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\nif (!modifyCallers) {\n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n        } else {\n            break;\n        }\n    }\n\n    // Remove any unused parameters remaining in the middle of the parameter list.\n    Node child = argList.getFirstChild();\n    while (child != null) {\n        if (!child.isDefaultValue() && !child.isRest() && !referenced.contains(fnScope.getVar(child.getString()))) {\n            NodeUtil.removeChild(argList, child);\n            compiler.reportCodeChange();\n        }\n        child = child.getNext();\n    }\n\n    // Remove any unused local vars and options objects.\n    NodeTraversal.traverse(compiler, block, new RemoveUnusedVars(referenced, compiler));\n    NodeUtil.deleteNode(block.getLastChild(), compiler.reporter);  // Remove END block.\n} else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0ed32ae9 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,47 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+Node block = function.getLastChild();\n+\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+if (!modifyCallers) {\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    // Remove any unused parameters remaining in the middle of the parameter list.\n+    Node child = argList.getFirstChild();\n+    while (child != null) {\n+        if (!child.isDefaultValue() && !child.isRest() && !referenced.contains(fnScope.getVar(child.getString()))) {\n+            NodeUtil.removeChild(argList, child);\n+            compiler.reportCodeChange();\n+        }\n+        child = child.getNext();\n+    }\n+\n+    // Remove any unused local vars and options objects.\n+    NodeTraversal.traverse(compiler, block, new RemoveUnusedVars(referenced, compiler));\n+    NodeUtil.deleteNode(block.getLastChild(), compiler.reporter);  // Remove END block.\n+} else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}