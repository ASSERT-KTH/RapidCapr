{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(n != null);\n  String varName = null;\n  boolean shouldDeclareOnGlobalThis = false;\n\n  if (n.getType() == Token.NAME) {\n    Preconditions.checkArgument(\n        parent.getType() == Token.FUNCTION ||\n        parent.getType() == Token.VAR ||\n        parent.getType() == Token.LP ||\n        parent.getType() == Token.CATCH ||\n        (parent.getType() == Token.ASSIGN &&\n         parent.getFirstChild() == n));\n    shouldDeclareOnGlobalThis =\n        parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION;\n    varName = n.getString();\n  } else if (n.getType() == Token.GETPROP) {\n    // Use-before-declare case\n    shouldDeclareOnGlobalThis = true;\n    // Traverse up to the top level of property access\n    Node obj = n.getFirstChild();\n    while (obj.getType() == Token.GETPROP) {\n      obj = obj.getFirstChild();\n    }\n    varName = obj.getQualifiedName();\n  }\n\n  Preconditions.checkNotNull(varName);\n  Scope scopeToDeclareIn = scope;\n  if (scopeToDeclareIn.isDeclared(varName, false)) {\n    Var oldVar = scopeToDeclareIn.getVar(varName);\n    validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, varName, type);\n  } else {\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n    CompilerInput input = compiler.getInput(sourceName);\n    scopeToDeclareIn.declare(varName, n, type, input, inferred);\n\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = input.isExtern();\n      if (inferred) {\n        globalThis.defineInferredProperty(varName,\n                type == null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(varName, type, isExtern);\n      }\n    }\n\n    // If we're in the global scope, also declare var.prototype\n    // in the scope chain.\n    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n      FunctionType fnType = (FunctionType) type;\n      if (fnType.isConstructor() || fnType.isInterface()) {\n        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n        scopeToDeclareIn.declare(\n                String.format(\"%s.prototype\", varName),\n                n, fnType.getPrototype(), input,\n                superClassCtor == null\n                        || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n\n        // Declare constructor function of this object\n        String ctorVarName = String.format(\"%s.prototype.constructor\", varName);\n        scopeToDeclareIn.declare(\n                ctorVarName,\n                n, fnType, input,\n                superClassCtor == null\n                        || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n\n        // Declare toString function on the constructor function\n        ObjectType builtInObj = typeRegistry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);\n        ObjectType ctorObjType = ObjectType.fromFunctionType(fnType);\n        FunctionType toStringType = typeRegistry.createFunctionType(\n                getNativeType(STRING_TYPE), ctorObjType);\n        toStringType.getScope().addDeclaredName(\"this\");\n        Node emptyBlock = new Node(Token.BLOCK);\n        Node fnNode = IR.function(IR.name(\"\"), IR.paramList(IR.name(\"\")),\n                emptyBlock).setJSType(toStringType);\n        if (inferred) {\n          fnNode.putBooleanProp(Node.INFERRED_FUNCTION, true);\n        }\n        Node callNode = IR.call(IR.getprop(\n                typeRegistry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE), IR.string(\"toString\")), IR.number(10)).srcref(n);\n        emptyBlock.addFirstChild(IR.returnNode(callNode).srcref(n));\n        JSDocInfoBuilder builder = new JSDocInfoBuilder(false);\n        builder.recordReturnType(toStringType);\n        JSDocInfo jsDocInfo = builder.build();\n        fnNode.setJSDocInfo(jsDocInfo);\n        Node[] children = {fnNode, null};\n        Node nameNode = IR.name(ctorVarName).srcref(parent);\n        Node assignNode = IR.assign(nameNode, children[0]);\n        children[1] = assignNode;\n        IR.seq(children).srcref(parent).setDeclaredTypeSentinel();\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..33061696 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,106 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n-      }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  Preconditions.checkArgument(n != null);\n+  String varName = null;\n+  boolean shouldDeclareOnGlobalThis = false;\n+\n+  if (n.getType() == Token.NAME) {\n+    Preconditions.checkArgument(\n+        parent.getType() == Token.FUNCTION ||\n+        parent.getType() == Token.VAR ||\n+        parent.getType() == Token.LP ||\n+        parent.getType() == Token.CATCH ||\n+        (parent.getType() == Token.ASSIGN &&\n+         parent.getFirstChild() == n));\n+    shouldDeclareOnGlobalThis =\n+        parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION;\n+    varName = n.getString();\n+  } else if (n.getType() == Token.GETPROP) {\n+    // Use-before-declare case\n+    shouldDeclareOnGlobalThis = true;\n+    // Traverse up to the top level of property access\n+    Node obj = n.getFirstChild();\n+    while (obj.getType() == Token.GETPROP) {\n+      obj = obj.getFirstChild();\n+    }\n+    varName = obj.getQualifiedName();\n+  }\n+\n+  Preconditions.checkNotNull(varName);\n+  Scope scopeToDeclareIn = scope;\n+  if (scopeToDeclareIn.isDeclared(varName, false)) {\n+    Var oldVar = scopeToDeclareIn.getVar(varName);\n+    validator.expectUndeclaredVariable(\n+            sourceName, n, parent, oldVar, varName, type);\n+  } else {\n+    if (!inferred) {\n+      setDeferredType(n, type);\n+    }\n+    CompilerInput input = compiler.getInput(sourceName);\n+    scopeToDeclareIn.declare(varName, n, type, input, inferred);\n \n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n+    if (shouldDeclareOnGlobalThis) {\n+      ObjectType globalThis =\n               typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n+      boolean isExtern = input.isExtern();\n+      if (inferred) {\n+        globalThis.defineInferredProperty(varName,\n+                type == null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern);\n+      } else {\n+        globalThis.defineDeclaredProperty(varName, type, isExtern);\n+      }\n+    }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n+    // If we're in the global scope, also declare var.prototype\n+    // in the scope chain.\n+    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n+      FunctionType fnType = (FunctionType) type;\n+      if (fnType.isConstructor() || fnType.isInterface()) {\n+        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+        scopeToDeclareIn.declare(\n+                String.format(\"%s.prototype\", varName),\n+                n, fnType.getPrototype(), input,\n+                superClassCtor == null\n+                        || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n+\n+        // Declare constructor function of this object\n+        String ctorVarName = String.format(\"%s.prototype.constructor\", varName);\n+        scopeToDeclareIn.declare(\n+                ctorVarName,\n+                n, fnType, input,\n+                superClassCtor == null\n+                        || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n+\n+        // Declare toString function on the constructor function\n+        ObjectType builtInObj = typeRegistry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);\n+        ObjectType ctorObjType = ObjectType.fromFunctionType(fnType);\n+        FunctionType toStringType = typeRegistry.createFunctionType(\n+                getNativeType(STRING_TYPE), ctorObjType);\n+        toStringType.getScope().addDeclaredName(\"this\");\n+        Node emptyBlock = new Node(Token.BLOCK);\n+        Node fnNode = IR.function(IR.name(\"\"), IR.paramList(IR.name(\"\")),\n+                emptyBlock).setJSType(toStringType);\n+        if (inferred) {\n+          fnNode.putBooleanProp(Node.INFERRED_FUNCTION, true);\n         }\n+        Node callNode = IR.call(IR.getprop(\n+                typeRegistry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE), IR.string(\"toString\")), IR.number(10)).srcref(n);\n+        emptyBlock.addFirstChild(IR.returnNode(callNode).srcref(n));\n+        JSDocInfoBuilder builder = new JSDocInfoBuilder(false);\n+        builder.recordReturnType(toStringType);\n+        JSDocInfo jsDocInfo = builder.build();\n+        fnNode.setJSDocInfo(jsDocInfo);\n+        Node[] children = {fnNode, null};\n+        Node nameNode = IR.name(ctorVarName).srcref(parent);\n+        Node assignNode = IR.assign(nameNode, children[0]);\n+        children[1] = assignNode;\n+        IR.seq(children).srcref(parent).setDeclaredTypeSentinel();\n       }\n     }\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}