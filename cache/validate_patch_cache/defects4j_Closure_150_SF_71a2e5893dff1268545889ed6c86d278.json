{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    attachLiteralTypes(n);\n\n    if (n.isFunction() && (parent.isScript() || parent.isBlock())) {\n        // Ignore globally defined functions.\n        return;\n    }\n\n    if (n.isScript() || n.isBlock()) {\n        if (n.isModuleBody() && n.getFirstChild() != null\n                && n.getFirstChild().isExport()) {\n            // Exported names must be added to the root directly\n            defineVar(n.getFirstFirstChild(), scope.getRootNode());\n        }\n        return;\n    }\n\n    if (n.isFunction()) {\n        // Ignore lines like `function f() {}`, as they don't indicate a variable.\n        return;\n    }\n\n    if (n.isExprResult() && n.getFirstChild().isObjectLit()) {\n        // Ignore case of object literal which are not part of declaration.\n        return;\n    }\n\n    // Define the variable.\n    switch (n.getToken()) {\n        case NAME:\n            defineVar(n, parent);\n            break;\n        case LET:\n        case CONST:\n            defineLetConst(n);\n            break;\n        case VAR:\n            if (parent.isLet() || parent.isConst()) {\n                t.report(n, ILLEGAL_LET_OR_CONST_DECLARATION);\n                defineVar(n, parent);\n            } else {\n                defineVar(n, parent);\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..c1b70f56 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,56 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    attachLiteralTypes(n);\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+    if (n.isFunction() && (parent.isScript() || parent.isBlock())) {\n+        // Ignore globally defined functions.\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    if (n.isScript() || n.isBlock()) {\n+        if (n.isModuleBody() && n.getFirstChild() != null\n+                && n.getFirstChild().isExport()) {\n+            // Exported names must be added to the root directly\n+            defineVar(n.getFirstFirstChild(), scope.getRootNode());\n+        }\n+        return;\n+    }\n+\n+    if (n.isFunction()) {\n+        // Ignore lines like `function f() {}`, as they don't indicate a variable.\n+        return;\n+    }\n+\n+    if (n.isExprResult() && n.getFirstChild().isObjectLit()) {\n+        // Ignore case of object literal which are not part of declaration.\n+        return;\n     }\n \n+    // Define the variable.\n+    switch (n.getToken()) {\n+        case NAME:\n+            defineVar(n, parent);\n+            break;\n+        case LET:\n+        case CONST:\n+            defineLetConst(n);\n+            break;\n+        case VAR:\n+            if (parent.isLet() || parent.isConst()) {\n+                t.report(n, ILLEGAL_LET_OR_CONST_DECLARATION);\n+                defineVar(n, parent);\n+            } else {\n+                defineVar(n, parent);\n+            }\n+            break;\n+        default:\n+            break;\n+    }\n+}\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}