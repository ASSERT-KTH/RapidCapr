{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class GammaFunction {\n\n  public static double regularizedGamma(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0 || x < 0) {\n      return Double.NaN;\n    }\n    if (x == 0) {\n      return 0.0;\n    }\n    if (x >= a + 1) {\n      return 1.0 - regularizedGammaComplement(a, x);\n    }\n    double s = regularizedGammaSeries(a, x);\n    return s / Gamma.gamma(a);\n  }\n\n  public static double regularizedGammaComplement(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0 || x < 0) {\n      return Double.NaN;\n    }\n    if (x == 0) {\n      return 1.0;\n    }\n    if (x < a + 1) {\n      return 1.0 - regularizedGammaSeries(a, x);\n    }\n    return Gamma.regularizedGammaQ(a, x);\n  }\n\n  private static double regularizedGammaSeries(double a, double x) {\n    double eps = 10e-15;\n    double ans = 1 / a;\n    double denom = ans;\n    double sum = denom;\n    for (int i = 1; FastMath.abs(denom / sum) > eps; i++) {\n      denom *= (-x / a + i);\n      ans += denom;\n      sum += denom;\n    }\n    return ans * FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a));\n  }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..23447136e 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,51 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class GammaFunction {\n+\n+  public static double regularizedGamma(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0 || x < 0) {\n+      return Double.NaN;\n+    }\n+    if (x == 0) {\n+      return 0.0;\n+    }\n+    if (x >= a + 1) {\n+      return 1.0 - regularizedGammaComplement(a, x);\n+    }\n+    double s = regularizedGammaSeries(a, x);\n+    return s / Gamma.gamma(a);\n+  }\n+\n+  public static double regularizedGammaComplement(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0 || x < 0) {\n+      return Double.NaN;\n+    }\n+    if (x == 0) {\n+      return 1.0;\n+    }\n+    if (x < a + 1) {\n+      return 1.0 - regularizedGammaSeries(a, x);\n+    }\n+    return Gamma.regularizedGammaQ(a, x);\n+  }\n+\n+  private static double regularizedGammaSeries(double a, double x) {\n+    double eps = 10e-15;\n+    double ans = 1 / a;\n+    double denom = ans;\n+    double sum = denom;\n+    for (int i = 1; FastMath.abs(denom / sum) > eps; i++) {\n+      denom *= (-x / a + i);\n+      ans += denom;\n+      sum += denom;\n+    }\n+    return ans * FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a));\n+  }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}