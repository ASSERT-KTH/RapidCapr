{
    "patch": "    \n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    // Find the names of referenced arguments.\n    Set<String> referencedArgNames = referenced.stream()\n        .filter(Var::isParam)\n        .map(Var::getName)\n        .collect(Collectors.toSet());\n\n    Node argList = getFunctionArgList(function);\n    while (true) {\n      Node lastArg = argList.getLastChild();\n      if (lastArg == null) {\n        break;\n      }\n\n      String argName = lastArg.getString();\n\n      if (referencedArgNames.contains(argName)) {\n        referencedArgNames.remove(argName);\n      } else if (!lastArg.getBooleanProp(Node.IS_DUMMY)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        // When there are trailing comma, `lastArg` may be a dummy node.\n        break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e53d002b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,36 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    // Find the names of referenced arguments.\n+    Set<String> referencedArgNames = referenced.stream()\n+        .filter(Var::isParam)\n+        .map(Var::getName)\n+        .collect(Collectors.toSet());\n+\n+    Node argList = getFunctionArgList(function);\n+    while (true) {\n+      Node lastArg = argList.getLastChild();\n+      if (lastArg == null) {\n+        break;\n+      }\n+\n+      String argName = lastArg.getString();\n+\n+      if (referencedArgNames.contains(argName)) {\n+        referencedArgNames.remove(argName);\n+      } else if (!lastArg.getBooleanProp(Node.IS_DUMMY)) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+      } else {\n+        // When there are trailing comma, `lastArg` may be a dummy node.\n+        break;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}