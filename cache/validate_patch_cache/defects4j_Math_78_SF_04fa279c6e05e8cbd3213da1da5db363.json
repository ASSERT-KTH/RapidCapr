{
    "patch": "public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        double tb = forward ? (t0 + convergence) : (t0 - convergence);\n        double gb = handler.g(tb, interpolator.getInterpolatedState());\n        while (g0Positive == (gb >= 0)) {\n            // advance forward or backward until bracketing interval is found\n            double dt;\n            if (g0Positive) {\n                dt = (tb - ta) * Math.abs(gb) / Math.abs(ga - gb);\n                ta = tb;\n                ga = gb;\n                tb += forward ? dt : -dt;\n            } else {\n                dt = (tb - ta) * Math.abs(gb) / Math.abs(ga - gb);\n                tb = ta;\n                gb = ga;\n                ta -= forward ? dt : -dt;\n            }\n\n            // check if stepping beyond integration interval\n            if ((ta <= t0 && tb <= t0) || (ta >= t1 && tb >= t1)) {\n                // no events found within the integration interval\n                pendingEvent = false;\n                pendingEventTime = Double.NaN;\n                return false;\n            }\n\n            // check if sub-step size is smaller than convergence\n            if (Math.abs(tb - ta) <= convergence) {\n                pendingEventTime = tb;\n                // check if event matches pending event\n                if (pendingEvent && Math.abs(tb - pendingEventTime) <= convergence) {\n                    pendingEvent = false;\n                    pendingEventTime = Double.NaN;\n                    return false;\n                }\n                pendingEvent = true;\n                return true;\n            }\n\n            // compute new gb and test for sign change\n            interpolator.setInterpolatedTime(tb);\n            gb = handler.g(tb, interpolator.getInterpolatedState());\n        }\n\n        // bracketing interval found, perform Brent's root-finding algorithm\n        // initialize solver\n        increasing = gb >= ga;\n        final UnivariateRealFunction f = new UnivariateRealFunction() {\n            @Override\n            public double value(double t) throws FunctionEvaluationException {\n                try {\n                    interpolator.setInterpolatedTime(t);\n                    return handler.g(t, interpolator.getInterpolatedState());\n                } catch (DerivativeException | EventException ex) {\n                    throw new FunctionEvaluationException(t, ex);\n                }\n            }\n        };\n        final BrentSolver solver = new BrentSolver();\n        solver.setAbsoluteAccuracy(convergence);\n\n        double root = Double.NaN;\n        while (true) {\n            final double xtol = convergence * Math.abs(ta + tb) / 2.0;\n            if (Math.abs(tb - ta) <= xtol) {\n                root = tb;\n                break;\n            }\n\n            try {\n                root = solver.solve(f, ta, tb);\n            } catch (TooManyEvaluationsException e) {\n                // failed to converge, try smaller bracket\n                if (Math.abs(tb - ta) <= 2.0 * xtol) {\n                    root = tb;\n                    break;\n                }\n                if (forward) {\n                    ta = tb - xtol;\n                } else {\n                    tb = ta + xtol;\n                }\n            }\n\n            if (!Double.isNaN(root)) {\n                break;\n            }\n        }\n\n        if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) {\n            // found nothing or found (again?) a past event, ignore it\n            ta = tb;\n            ga = gb;\n        } else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {\n            pendingEventTime = root;\n            // check if event matches pending event\n            if (pendingEvent && Math.abs(t1 - pendingEventTime) <= convergence) {\n                pendingEvent = false;\n                pendingEventTime = Double.NaN;\n                return false;\n            }\n            pendingEvent = true;\n            return true;\n        }\n\n        // no events found\n        pendingEvent = false;\n        pendingEventTime = Double.NaN;\n        return false;\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if ((cause != null) && (cause instanceof DerivativeException)) {\n            throw (DerivativeException) cause;\n        } else if ((cause != null) && (cause instanceof EventException)) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..eeb8c7d7b 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,103 +164,135 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n+public boolean evaluateStep(final StepInterpolator interpolator)\n         throws DerivativeException, EventException, ConvergenceException {\n \n-        try {\n-\n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n-\n-            double ta = t0;\n-            double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n-\n-                // evaluate handler value at the end of the substep\n-                tb += h;\n-                interpolator.setInterpolatedTime(tb);\n-                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n-\n-                // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n-                    // there is a sign change: an event is expected during this step\n-\n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n-                    // variation direction, with respect to the integration direction\n-                    increasing = gb >= ga;\n-\n-                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n-                        public double value(final double t) throws FunctionEvaluationException {\n-                            try {\n-                                interpolator.setInterpolatedTime(t);\n-                                return handler.g(t, interpolator.getInterpolatedState());\n-                            } catch (DerivativeException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            } catch (EventException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            }\n-                        }\n-                    };\n-                    final BrentSolver solver = new BrentSolver();\n-                    solver.setAbsoluteAccuracy(convergence);\n-                    solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n-                        pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n-                        }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n-                        pendingEvent = true;\n-                        return true;\n-                    }\n+    try {\n+        forward = interpolator.isForward();\n+        final double t1 = interpolator.getCurrentTime();\n+        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n+        final double h = (t1 - t0) / n;\n+\n+        double ta = t0;\n+        double ga = g0;\n+        double tb = forward ? (t0 + convergence) : (t0 - convergence);\n+        double gb = handler.g(tb, interpolator.getInterpolatedState());\n+        while (g0Positive == (gb >= 0)) {\n+            // advance forward or backward until bracketing interval is found\n+            double dt;\n+            if (g0Positive) {\n+                dt = (tb - ta) * Math.abs(gb) / Math.abs(ga - gb);\n+                ta = tb;\n+                ga = gb;\n+                tb += forward ? dt : -dt;\n+            } else {\n+                dt = (tb - ta) * Math.abs(gb) / Math.abs(ga - gb);\n+                tb = ta;\n+                gb = ga;\n+                ta -= forward ? dt : -dt;\n+            }\n \n-                } else {\n-                    // no sign change: there is no event for now\n-                    ta = tb;\n-                    ga = gb;\n+            // check if stepping beyond integration interval\n+            if ((ta <= t0 && tb <= t0) || (ta >= t1 && tb >= t1)) {\n+                // no events found within the integration interval\n+                pendingEvent = false;\n+                pendingEventTime = Double.NaN;\n+                return false;\n+            }\n+\n+            // check if sub-step size is smaller than convergence\n+            if (Math.abs(tb - ta) <= convergence) {\n+                pendingEventTime = tb;\n+                // check if event matches pending event\n+                if (pendingEvent && Math.abs(tb - pendingEventTime) <= convergence) {\n+                    pendingEvent = false;\n+                    pendingEventTime = Double.NaN;\n+                    return false;\n                 }\n+                pendingEvent = true;\n+                return true;\n+            }\n \n+            // compute new gb and test for sign change\n+            interpolator.setInterpolatedTime(tb);\n+            gb = handler.g(tb, interpolator.getInterpolatedState());\n+        }\n+\n+        // bracketing interval found, perform Brent's root-finding algorithm\n+        // initialize solver\n+        increasing = gb >= ga;\n+        final UnivariateRealFunction f = new UnivariateRealFunction() {\n+            @Override\n+            public double value(double t) throws FunctionEvaluationException {\n+                try {\n+                    interpolator.setInterpolatedTime(t);\n+                    return handler.g(t, interpolator.getInterpolatedState());\n+                } catch (DerivativeException | EventException ex) {\n+                    throw new FunctionEvaluationException(t, ex);\n+                }\n+            }\n+        };\n+        final BrentSolver solver = new BrentSolver();\n+        solver.setAbsoluteAccuracy(convergence);\n+\n+        double root = Double.NaN;\n+        while (true) {\n+            final double xtol = convergence * Math.abs(ta + tb) / 2.0;\n+            if (Math.abs(tb - ta) <= xtol) {\n+                root = tb;\n+                break;\n             }\n \n-            // no event during the whole step\n-            pendingEvent     = false;\n-            pendingEventTime = Double.NaN;\n-            return false;\n+            try {\n+                root = solver.solve(f, ta, tb);\n+            } catch (TooManyEvaluationsException e) {\n+                // failed to converge, try smaller bracket\n+                if (Math.abs(tb - ta) <= 2.0 * xtol) {\n+                    root = tb;\n+                    break;\n+                }\n+                if (forward) {\n+                    ta = tb - xtol;\n+                } else {\n+                    tb = ta + xtol;\n+                }\n+            }\n \n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n+            if (!Double.isNaN(root)) {\n+                break;\n             }\n-            throw new EventException(e);\n         }\n \n+        if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) {\n+            // found nothing or found (again?) a past event, ignore it\n+            ta = tb;\n+            ga = gb;\n+        } else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {\n+            pendingEventTime = root;\n+            // check if event matches pending event\n+            if (pendingEvent && Math.abs(t1 - pendingEventTime) <= convergence) {\n+                pendingEvent = false;\n+                pendingEventTime = Double.NaN;\n+                return false;\n+            }\n+            pendingEvent = true;\n+            return true;\n+        }\n+\n+        // no events found\n+        pendingEvent = false;\n+        pendingEventTime = Double.NaN;\n+        return false;\n+    } catch (FunctionEvaluationException e) {\n+        final Throwable cause = e.getCause();\n+        if ((cause != null) && (cause instanceof DerivativeException)) {\n+            throw (DerivativeException) cause;\n+        } else if ((cause != null) && (cause instanceof EventException)) {\n+            throw (EventException) cause;\n+        }\n+        throw new EventException(e);\n     }\n+}\n \n     /** Get the occurrence time of the event triggered in the current\n      * step.",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}