{
    "patch": "      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP) {\n        boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;\n        if (isChainedProperty) {\n          Node child = n.getFirstChild().getFirstChild().getNext();\n          if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) {\n            Node parent = NodeUtil.getEnclosingNode(assign, Token.BLOCK);\n            return parent != null && parent.getLastChild() == assign.getNext();\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..749a9a09 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,16 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP) {\n+        boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;\n+        if (isChainedProperty) {\n+          Node child = n.getFirstChild().getFirstChild().getNext();\n+          if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) {\n+            Node parent = NodeUtil.getEnclosingNode(assign, Token.BLOCK);\n+            return parent != null && parent.getLastChild() == assign.getNext();\n+          }\n+        }\n+      }\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}