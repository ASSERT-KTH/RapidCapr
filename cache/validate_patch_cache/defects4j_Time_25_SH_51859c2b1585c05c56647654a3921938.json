{
    "patch": "                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                if (offsetAdjusted < 0 && offsetLocal > 0) {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        int diff = offsetLocal - offsetAdjusted;\n                        return getOffset(nextAdjusted - diff);\n                    }\n                } else if (offsetAdjusted > 0 && offsetLocal < 0) {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal == nextAdjusted) {\n                        return offsetAdjusted;\n                    }\n                    int diff = offsetLocal - offsetAdjusted;\n                    return getOffset(nextAdjusted - diff);\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..9d8d037e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                if (offsetAdjusted < 0 && offsetLocal > 0) {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        int diff = offsetLocal - offsetAdjusted;\n+                        return getOffset(nextAdjusted - diff);\n+                    }\n+                } else if (offsetAdjusted > 0 && offsetLocal < 0) {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal == nextAdjusted) {\n+                        return offsetAdjusted;\n+                    }\n+                    int diff = offsetLocal - offsetAdjusted;\n+                    return getOffset(nextAdjusted - diff);\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}