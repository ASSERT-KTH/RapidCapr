{
    "patch": "public static String printInOperatorInForLoop(boolean c, Object[] d) {\n   Context lhsContext = Context.OTHER;\n   boolean breakLoop = false;\n   Object[] array = c ? new Object[]{0} : new Object[]{0 in d};\n   String expected = \"for(a=\" + array[0] + \";\";\n   for(int i = 0; i < d.length; i++) {\n       try {\n           lhsContext.getSafe(new InOperator(lhsContext, d[i], Boolean.TRUE));\n           breakLoop = true;\n           break;\n       } catch (Error e) {\n           continue;\n       }\n   }\n   \n   if(breakLoop) {\n       expected += \";)foo()\";\n   } else {\n       expected += \";)\" + \"foo()\" + \"; break\";\n   }\n   \n   return expected;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}