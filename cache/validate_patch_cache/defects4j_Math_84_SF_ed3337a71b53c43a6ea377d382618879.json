{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = performContract(original, comparator);\n                }\n            } else {\n                simplex = performContract(original, comparator);\n            }\n\n            // check convergence\n            final RealPointValuePair currentBest = simplex[0];\n            final double currentFunctionValue = currentBest.getValue();\n            final double[] x = currentBest.getPoint();\n            final int n = x.length;\n            double sum = 0;\n            for (int i = 0; i < n; ++i) {\n                sum += Math.pow(Math.abs(x[i] - previous[0].getPoint()[i]), 2.0);\n            }\n            if (Math.sqrt(sum) < getRelativeThreshold() * (Math.sqrt(sumSquares(previous[0].getPoint())) + getAbsoluteThreshold())) {\n                return;\n            }\n            if (getEvaluations() >= getMaxEvaluations()) {\n                throw new OptimizationException(\"maximum number of evaluations exceeded\");\n            }\n\n            System.arraycopy(currentBest.getPoint(), 0, previous[0].getPoint(), 0, n);\n            previous[0].setValue(currentFunctionValue);\n\n        }\n\n    }\n\n    private RealPointValuePair[] performContract(final RealPointValuePair[] original, final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException {\n        final int n = original.length;\n        final RealPointValuePair best = original[0];\n        final double[] xWorst = original[n - 1].getPoint();\n        final double[] xBeforeWorst = original[n - 2].getPoint();\n        final double[] contracted = new double[xWorst.length];\n        for (int i = 0; i < xWorst.length; ++i) {\n            contracted[i] = (c * xWorst[i]) + ((1 - c) * xBeforeWorst[i]);\n        }\n\n        // evaluate contracted point\n        final RealPointValuePair contractedPoint = new RealPointValuePair(contracted, computeObjectiveValue(contracted));\n        if (comparator.compare(contractedPoint, best) < 0) {\n            return replaceWorst(original, contractedPoint);\n        }\n\n        // perform shrink\n        final RealPointValuePair[] shrinked = new RealPointValuePair[n];\n        shrinked[0] = best;\n        final double[] x1 = best.getPoint();\n        for (int i = 1; i < n; ++i) {\n            final RealPointValuePair pair = original[i];\n            final double[] x = pair.getPoint();\n            final double[] shrinkedX = new double[x1.length];\n            for (int j = 0; j < x.length; ++j) {\n                shrinkedX[j] = x1[j] + (sigma * (x[j] - x1[j]));\n            }\n            final double value = computeObjectiveValue(shrinkedX);\n            shrinked[i] = new RealPointValuePair(shrinkedX, value);\n        }\n        return shrinked;\n    }\n\n    private double sumSquares(double[] point) {\n        double sum = 0;\n        for (double x : point) {\n            sum += x * x;\n        }\n        return sum;\n    }\n\n    private RealPointValuePair[] replaceWorst(final RealPointValuePair[] original, final RealPointValuePair replacement) {\n        final int n = original.length;\n        final RealPointValuePair[] copy = new RealPointValuePair[n];\n        System.arraycopy(original, 0, copy, 0, n);\n        copy[n - 1] = replacement;\n        return copy;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..541127b14 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -59,7 +59,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     /** {@inheritDoc} */\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n@@ -79,23 +79,84 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = performContract(original, comparator);\n                 }\n+            } else {\n+                simplex = performContract(original, comparator);\n+            }\n \n+            // check convergence\n+            final RealPointValuePair currentBest = simplex[0];\n+            final double currentFunctionValue = currentBest.getValue();\n+            final double[] x = currentBest.getPoint();\n+            final int n = x.length;\n+            double sum = 0;\n+            for (int i = 0; i < n; ++i) {\n+                sum += Math.pow(Math.abs(x[i] - previous[0].getPoint()[i]), 2.0);\n+            }\n+            if (Math.sqrt(sum) < getRelativeThreshold() * (Math.sqrt(sumSquares(previous[0].getPoint())) + getAbsoluteThreshold())) {\n                 return;\n-\n+            }\n+            if (getEvaluations() >= getMaxEvaluations()) {\n+                throw new OptimizationException(\"maximum number of evaluations exceeded\");\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            System.arraycopy(currentBest.getPoint(), 0, previous[0].getPoint(), 0, n);\n+            previous[0].setValue(currentFunctionValue);\n \n-            // check convergence\n-                return;\n+        }\n+\n+    }\n+\n+    private RealPointValuePair[] performContract(final RealPointValuePair[] original, final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException {\n+        final int n = original.length;\n+        final RealPointValuePair best = original[0];\n+        final double[] xWorst = original[n - 1].getPoint();\n+        final double[] xBeforeWorst = original[n - 2].getPoint();\n+        final double[] contracted = new double[xWorst.length];\n+        for (int i = 0; i < xWorst.length; ++i) {\n+            contracted[i] = (c * xWorst[i]) + ((1 - c) * xBeforeWorst[i]);\n+        }\n+\n+        // evaluate contracted point\n+        final RealPointValuePair contractedPoint = new RealPointValuePair(contracted, computeObjectiveValue(contracted));\n+        if (comparator.compare(contractedPoint, best) < 0) {\n+            return replaceWorst(original, contractedPoint);\n+        }\n+\n+        // perform shrink\n+        final RealPointValuePair[] shrinked = new RealPointValuePair[n];\n+        shrinked[0] = best;\n+        final double[] x1 = best.getPoint();\n+        for (int i = 1; i < n; ++i) {\n+            final RealPointValuePair pair = original[i];\n+            final double[] x = pair.getPoint();\n+            final double[] shrinkedX = new double[x1.length];\n+            for (int j = 0; j < x.length; ++j) {\n+                shrinkedX[j] = x1[j] + (sigma * (x[j] - x1[j]));\n             }\n+            final double value = computeObjectiveValue(shrinkedX);\n+            shrinked[i] = new RealPointValuePair(shrinkedX, value);\n+        }\n+        return shrinked;\n+    }\n \n+    private double sumSquares(double[] point) {\n+        double sum = 0;\n+        for (double x : point) {\n+            sum += x * x;\n         }\n+        return sum;\n+    }\n \n+    private RealPointValuePair[] replaceWorst(final RealPointValuePair[] original, final RealPointValuePair replacement) {\n+        final int n = original.length;\n+        final RealPointValuePair[] copy = new RealPointValuePair[n];\n+        System.arraycopy(original, 0, copy, 0, n);\n+        copy[n - 1] = replacement;\n+        return copy;\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}