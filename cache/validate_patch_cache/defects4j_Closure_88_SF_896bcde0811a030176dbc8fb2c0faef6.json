{
    "patch": "private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (ControlFlowGraph.isEnteringNewCfgNode(child)) { // It is a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      } else {\n        VariableLiveness childState = isVariableReadBeforeKill(child, variable);\n        if (childState == VariableLiveness.KILL) {\n          return VariableLiveness.KILL;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..2ba4ab3b 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,7 +320,7 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n+private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n@@ -336,13 +336,13 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n     // Expressions are evaluated left-right, depth first.\n     for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n+      if (ControlFlowGraph.isEnteringNewCfgNode(child)) { // It is a FUNCTION\n         VariableLiveness state = isVariableReadBeforeKill(child, variable);\n         if (state != VariableLiveness.MAYBE_LIVE) {\n           return state;\n         }\n-      }\n-    }\n-    return VariableLiveness.MAYBE_LIVE;\n-  }\n+      } else {\n+        VariableLiveness childState = isVariableReadBeforeKill(child, variable);\n+        if (childState == VariableLiveness.KILL) {\n+          return VariableLiveness.KILL;\n }",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}