{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    RealMatrix squareRoot = m;\n    for (int i = 0; i < 10; i++) {\n        RealMatrix prevSquareRoot = squareRoot;\n        squareRoot = (prevSquareRoot.add(m.multiply(prevSquareRoot.inverse()))).scalarMultiply(0.5);\n        if (squareRoot.subtract(prevSquareRoot).getNorm() < 1E-6) {\n            break;\n        }\n    }\n    return squareRoot;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5f5bf43c2 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,15 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    RealMatrix squareRoot = m;\n+    for (int i = 0; i < 10; i++) {\n+        RealMatrix prevSquareRoot = squareRoot;\n+        squareRoot = (prevSquareRoot.add(m.multiply(prevSquareRoot.inverse()))).scalarMultiply(0.5);\n+        if (squareRoot.subtract(prevSquareRoot).getNorm() < 1E-6) {\n+            break;\n+        }\n     }\n+    return squareRoot;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}