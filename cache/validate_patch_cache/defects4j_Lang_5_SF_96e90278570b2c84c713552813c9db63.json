{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null) {\n        return null;\n    }\n    final int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final char ch0 = str.charAt(0);\n    final char ch1 = str.charAt(1);\n    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 2) {\n        return new Locale(str);\n    }\n    if (len < 5) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final char ch3 = str.charAt(3);\n    if (ch3 == '_') {\n        if (len < 7 || str.charAt(4) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // language, script, and variant are all empty\n        if (len == 7) {\n            return new Locale(str.substring(0, 2), \"\", str.substring(5));\n        }\n        final char ch5 = str.charAt(5);\n        // script is empty\n        if (!Character.isUpperCase(ch5)) {\n            return new Locale(str.substring(0, 2), \"\", str.substring(5));\n        }\n        // script is not empty\n        if (len < 10 || str.charAt(6) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // handle case where variant is empty\n        if (len == 10) {\n            return new Locale(str.substring(0, 2), str.substring(4, 6), str.substring(7));\n        } else {\n            return new Locale(str.substring(0, 2), str.substring(4, 6), str.substring(7, 10), str.substring(11));\n        }\n    }\n    final char ch4 = str.charAt(4);\n    if (len == 5) {\n        // language and country only\n        if (Character.isUpperCase(ch3) && Character.isUpperCase(ch4)) {\n            return new Locale(str.substring(0, 2), str.substring(3));\n        } else {\n            return new Locale(str.substring(0, 2), \"\", str.substring(3));\n        }\n    }\n    if (len < 7 || str.charAt(5) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final char ch6 = str.charAt(6);\n    if (ch6 == '_') {\n        // language, country, and variant\n        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(7));\n    }\n    if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4) || !Character.isUpperCase(ch6)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 7) {\n        // language, script, and country\n        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(5));\n    }\n    if (len < 9 || str.charAt(7) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // language, script, country, and variant\n    return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(5, 7), str.substring(8));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..d6e27d27 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,47 +85,83 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(final String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    final int len = str.length();\n+    if (len < 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    final char ch0 = str.charAt(0);\n+    final char ch1 = str.charAt(1);\n+    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (len == 2) {\n+        return new Locale(str);\n+    }\n+    if (len < 5) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (str.charAt(2) != '_') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    final char ch3 = str.charAt(3);\n+    if (ch3 == '_') {\n+        if (len < 7 || str.charAt(4) != '_') {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n+        // language, script, and variant are all empty\n+        if (len == 7) {\n+            return new Locale(str.substring(0, 2), \"\", str.substring(5));\n+        }\n+        final char ch5 = str.charAt(5);\n+        // script is empty\n+        if (!Character.isUpperCase(ch5)) {\n+            return new Locale(str.substring(0, 2), \"\", str.substring(5));\n+        }\n+        // script is not empty\n+        if (len < 10 || str.charAt(6) != '_') {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        // handle case where variant is empty\n+        if (len == 10) {\n+            return new Locale(str.substring(0, 2), str.substring(4, 6), str.substring(7));\n+        } else {\n+            return new Locale(str.substring(0, 2), str.substring(4, 6), str.substring(7, 10), str.substring(11));\n+        }\n+    }\n+    final char ch4 = str.charAt(4);\n+    if (len == 5) {\n+        // language and country only\n+        if (Character.isUpperCase(ch3) && Character.isUpperCase(ch4)) {\n+            return new Locale(str.substring(0, 2), str.substring(3));\n+        } else {\n+            return new Locale(str.substring(0, 2), \"\", str.substring(3));\n+        }\n     }\n+    if (len < 7 || str.charAt(5) != '_') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    final char ch6 = str.charAt(6);\n+    if (ch6 == '_') {\n+        // language, country, and variant\n+        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(7));\n+    }\n+    if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4) || !Character.isUpperCase(ch6)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (len == 7) {\n+        // language, script, and country\n+        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(5));\n+    }\n+    if (len < 9 || str.charAt(7) != '_') {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    // language, script, country, and variant\n+    return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(5, 7), str.substring(8));\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: no suitable constructor found for Locale(String,String,String,String)",
    "test_result": "ERROR"
}