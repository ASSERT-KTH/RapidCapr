{
    "patch": "public <T> void resetMock(T mock) {\n    try {\n        Object spied = Whitebox.getInternalState(mock, \"CGLIB$CALLBACK_0\");\n        if (spied != null && spied instanceof MethodInterceptorFilter) {\n            MethodInterceptorFilter filter = (MethodInterceptorFilter) spied;\n            Whitebox.setInternalState(filter, \"mockHandler\", new MockHandler<T>(filter.getMockHandler()));\n        } else {\n            throw new IllegalArgumentException(\"Mock object does not have a CGLIB proxy.\");\n        }\n    } catch (Exception e) {\n        throw new IllegalStateException(\"Cannot reset the mock: \" + e.getMessage(), e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..8c65c0d1b 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,20 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    try {\n+        Object spied = Whitebox.getInternalState(mock, \"CGLIB$CALLBACK_0\");\n+        if (spied != null && spied instanceof MethodInterceptorFilter) {\n+            MethodInterceptorFilter filter = (MethodInterceptorFilter) spied;\n+            Whitebox.setInternalState(filter, \"mockHandler\", new MockHandler<T>(filter.getMockHandler()));\n+        } else {\n+            throw new IllegalArgumentException(\"Mock object does not have a CGLIB proxy.\");\n+        }\n+    } catch (Exception e) {\n+        throw new IllegalStateException(\"Cannot reset the mock: \" + e.getMessage(), e);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}