{
    "patch": "import com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.TokenUtil;\nimport java.util.function.Predicate;\n\npublic class CodeFixer {\n\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n\n    switch (value.getToken()) {\n      case ASSIGN:\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.test(value.getFirstChild())\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case AND:\n      case OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n      case HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n      case INC:\n      case DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case THIS:\n        return locals.test(value);\n      case NAME:\n        return isImmutableValue(value) || locals.test(value);\n      case GETELEM:\n      case GETPROP:\n        return locals.test(value);\n      case CALL:\n        return callHasLocalResult(value) || isToStringMethodCall(value) || locals.test(value);\n      case NEW:\n        return newHasLocalResult(value) || locals.test(value);\n      case INSTANCEOF:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n      case IN:\n        return true;\n      case FUNCTION:\n      case REGEXP:\n      case ARRAYLIT:\n      case OBJECTLIT:\n        return true;\n      default:\n        if (TokenUtil.isAssignmentOp(value.getToken()) || TokenUtil.isSimpleOperator(value.getToken())\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n  }\n\n  static boolean isImmutableValue(Node n) {\n    switch (n.getToken()) {\n      case STRING:\n      case TRUE:\n      case FALSE:\n      case NULL:\n      case NUMBER:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  static boolean isToStringMethodCall(Node callNode) {\n    Node target = callNode.getFirstChild();\n    Node first = target.getFirstChild();\n\n    return target.getLastChild().getString().equals(\"toString\") && target.hasOneChild()\n        && first.getToken() == Token.FUNCTION && first.getNext() == null;\n  }\n\n  static boolean callHasLocalResult(Node n) {\n    if (n.getToken() != Token.CALL) {\n      return false;\n    }\n    Node callTarget = n.getFirstChild();\n    return callTarget.isName() || callTarget.isGetProp() || isToStringMethodCall(n);\n  }\n\n  static boolean newHasLocalResult(Node n) {\n    // It is impossible for a new operation to have a restricted result because\n    // new constraining of the result is delayed.\n    // If we change this to check for factory functions, we could tighten up here.\n    return true;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 08fb954f..8f696934 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1239,70 +1239,104 @@ public final class NodeUtil {\n     return valueCheck(n, BOOLEAN_RESULT_PREDICATE);\n   }\n \n-  static boolean isBooleanResultHelper(Node n) {\n-    switch (n.getType()) {\n-      // Primitives\n-      case Token.TRUE:\n-      case Token.FALSE:\n-      // Comparisons\n-      case Token.EQ:\n-      case Token.NE:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.LT:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.GE:\n-      // Queryies\n-      case Token.IN:\n-      case Token.INSTANCEOF:\n-      // Inversion\n-      case Token.NOT:\n-      // delete operator returns a boolean.\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.TokenUtil;\n+import java.util.function.Predicate;\n+\n+public class CodeFixer {\n+\n+  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n+\n+    switch (value.getToken()) {\n+      case ASSIGN:\n+        return NodeUtil.isImmutableValue(value.getLastChild())\n+            || (locals.test(value.getFirstChild())\n+                && evaluatesToLocalValue(value.getLastChild(), locals));\n+      case COMMA:\n+        return evaluatesToLocalValue(value.getLastChild(), locals);\n+      case AND:\n+      case OR:\n+        return evaluatesToLocalValue(value.getFirstChild(), locals)\n+            && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case HOOK:\n+        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n+            && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case INC:\n+      case DEC:\n+        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n+          return evaluatesToLocalValue(value.getFirstChild(), locals);\n+        } else {\n+          return true;\n+        }\n+      case THIS:\n+        return locals.test(value);\n+      case NAME:\n+        return isImmutableValue(value) || locals.test(value);\n+      case GETELEM:\n+      case GETPROP:\n+        return locals.test(value);\n+      case CALL:\n+        return callHasLocalResult(value) || isToStringMethodCall(value) || locals.test(value);\n+      case NEW:\n+        return newHasLocalResult(value) || locals.test(value);\n+      case INSTANCEOF:\n+        return evaluatesToLocalValue(value.getFirstChild(), locals)\n+            && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case IN:\n+        return true;\n+      case FUNCTION:\n+      case REGEXP:\n+      case ARRAYLIT:\n+      case OBJECTLIT:\n         return true;\n       default:\n-        return false;\n+        if (TokenUtil.isAssignmentOp(value.getToken()) || TokenUtil.isSimpleOperator(value.getToken())\n+            || isImmutableValue(value)) {\n+          return true;\n+        }\n+\n+        throw new IllegalStateException(\n+            \"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n     }\n   }\n \n-  static boolean isUndefined(Node n) {\n-    switch (n.getType()) {\n-      case Token.VOID:\n+  static boolean isImmutableValue(Node n) {\n+    switch (n.getToken()) {\n+      case STRING:\n+      case TRUE:\n+      case FALSE:\n+      case NULL:\n+      case NUMBER:\n         return true;\n-      case Token.NAME:\n-        return n.getString().equals(\"undefined\");\n+      default:\n+        return false;\n     }\n-    return false;\n   }\n \n-  static boolean isNull(Node n) {\n-    return n.getType() == Token.NULL;\n-  }\n+  static boolean isToStringMethodCall(Node callNode) {\n+    Node target = callNode.getFirstChild();\n+    Node first = target.getFirstChild();\n \n-  static boolean isNullOrUndefined(Node n) {\n-    return isNull(n) || isUndefined(n);\n+    return target.getLastChild().getString().equals(\"toString\") && target.hasOneChild()\n+        && first.getToken() == Token.FUNCTION && first.getNext() == null;\n   }\n \n-  static class MayBeStringResultPredicate implements Predicate<Node> {\n-    public boolean apply(Node n) {\n-      return mayBeStringHelper(n);\n+  static boolean callHasLocalResult(Node n) {\n+    if (n.getToken() != Token.CALL) {\n+      return false;\n     }\n+    Node callTarget = n.getFirstChild();\n+    return callTarget.isName() || callTarget.isGetProp() || isToStringMethodCall(n);\n   }\n \n-  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n-      new MayBeStringResultPredicate();\n-\n-  /**\n-   * @returns Whether the results is possibly a string.\n-   */\n-  static boolean mayBeString(Node n) {\n-    return mayBeString(n, true);\n+  static boolean newHasLocalResult(Node n) {\n+    // It is impossible for a new operation to have a restricted result because\n+    // new constraining of the result is delayed.\n+    // If we change this to check for factory functions, we could tighten up here.\n+    return true;\n   }\n-\n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return valueCheck(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n+}\n       return mayBeStringHelper(n);\n     }\n   }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}