{
    "patch": "        if (offsetLocal != offsetAdjusted) {\n            long nextTransitionTime = nextTransition(instantAdjusted);\n            if (nextTransitionTime == instantLocal - offsetLocal) {\n                return offsetLocal;\n            } else {\n                long prevTransitionTime = previousTransition(instantLocal - offsetAdjusted);\n                if (prevTransitionTime == instantAdjusted) {\n                    return offsetAdjusted;\n                } else {\n                    int offsetBefore = getOffset(prevTransitionTime);\n                    int offsetAfter = getOffset(nextTransitionTime - 1);\n                    if (offsetAfter == offsetBefore) {\n                        return offsetAdjusted > offsetLocal ? offsetBefore : offsetAfter;\n                    } else {\n                        return offsetAdjusted > offsetLocal ? offsetBefore : offsetAfter;\n                    }\n                }\n            }\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..67e3a528 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,26 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        if (offsetLocal != offsetAdjusted) {\n+            long nextTransitionTime = nextTransition(instantAdjusted);\n+            if (nextTransitionTime == instantLocal - offsetLocal) {\n+                return offsetLocal;\n+            } else {\n+                long prevTransitionTime = previousTransition(instantLocal - offsetAdjusted);\n+                if (prevTransitionTime == instantAdjusted) {\n+                    return offsetAdjusted;\n+                } else {\n+                    int offsetBefore = getOffset(prevTransitionTime);\n+                    int offsetAfter = getOffset(nextTransitionTime - 1);\n+                    if (offsetAfter == offsetBefore) {\n+                        return offsetAdjusted > offsetLocal ? offsetBefore : offsetAfter;\n+                    } else {\n+                        return offsetAdjusted > offsetLocal ? offsetBefore : offsetAfter;\n+                    }\n+                }\n+            }\n+        }\n+        return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}