{
    "patch": "public ReturnValue execute(CallContext context, Object[] args) {\n    String key = (String) args[0];\n    String value = (String) args[1];\n\n    if (values.containsKey(key)) {\n        List<String> existingValues = values.get(key);\n        existingValues.add(value);\n    } else {\n        List<String> newList = new ArrayList<>();\n        newList.add(value);\n        values.put(key, newList);\n    }\n\n    return new ReturnValue() {\n        @Override\n        public Object returnValueFor(Class clazz) {\n            if (clazz == Map.class) {\n                return values;\n            } else if (clazz == List.class) {\n                return values.get(key);\n            } else if (clazz == Iterable.class) {\n                return values.containsKey(key) ? values.get(key) : Collections.emptySet();\n            }\n            return null;\n        }\n    };\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}