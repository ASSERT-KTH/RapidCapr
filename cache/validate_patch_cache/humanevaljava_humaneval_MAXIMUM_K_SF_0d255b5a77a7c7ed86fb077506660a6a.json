{
    "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    PriorityQueue<Integer> pq = new PriorityQueue<>(); // priority queue to keep track of the largest k elements\n    for (int i = 0; i < arr.size(); i++) {\n        if (pq.size() < k) { // if the size of the priority queue is less than k, simply add the element\n            pq.add(arr.get(i));\n        }\n        else { // if the size of the priority queue is equal to k, compare the element to the smallest element in the queue\n            if (arr.get(i) > pq.peek()) {\n                pq.poll(); // remove the smallest element\n                pq.add(arr.get(i)); // insert the new element\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<>(pq); // convert the priority queue to an array list\n    Collections.reverse(result); // reverse the list to get the elements in descending order\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/MAXIMUM_K.java b/src/main/java/humaneval/buggy/MAXIMUM_K.java\nindex 4f3e095..53f5f2f 100644\n--- a/src/main/java/humaneval/buggy/MAXIMUM_K.java\n+++ b/src/main/java/humaneval/buggy/MAXIMUM_K.java\n@@ -29,12 +29,21 @@ import java.util.Collections;\n  */\n \n public class MAXIMUM_K {\n-    public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n-        Collections.sort(arr);\n-        ArrayList<Integer> result = new ArrayList<>();\n-        for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n-            result.add(arr.get(i));\n+public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n+    PriorityQueue<Integer> pq = new PriorityQueue<>(); // priority queue to keep track of the largest k elements\n+    for (int i = 0; i < arr.size(); i++) {\n+        if (pq.size() < k) { // if the size of the priority queue is less than k, simply add the element\n+            pq.add(arr.get(i));\n+        }\n+        else { // if the size of the priority queue is equal to k, compare the element to the smallest element in the queue\n+            if (arr.get(i) > pq.peek()) {\n+                pq.poll(); // remove the smallest element\n+                pq.add(arr.get(i)); // insert the new element\n+            }\n         }\n-        return result;\n     }\n+    ArrayList<Integer> result = new ArrayList<>(pq); // convert the priority queue to an array list\n+    Collections.reverse(result); // reverse the list to get the elements in descending order\n+    return result;\n+}\n }",
    "result_reason": " /tmp/humaneval-MAXIMUM_K/src/main/java/humaneval/buggy/MAXIMUM_K.java:[33,5] cannot find symbol",
    "test_result": "ERROR"
}