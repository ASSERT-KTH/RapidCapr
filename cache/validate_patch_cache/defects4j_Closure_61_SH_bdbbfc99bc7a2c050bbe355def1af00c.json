{
    "patch": "```\nif (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n    if (nameNode.isQualifiedName()) {\n        Node targetNode = nameNode.getFirstChild();\n        String targetName = null;\n        while (targetNode.getType() == Token.GETPROP) {\n            targetName = targetNode.getLastChild().getString();\n            targetNode = targetNode.getFirstChild();\n        }\n        if (targetNode.getType() == Token.NAME) {\n            targetName = targetNode.getString();\n        }\n        if (targetName != null && \n            (targetName.equals(\"Math\") || \n             targetName.equals(\"console\") || \n             targetName.equals(\"JSON\"))) {\n            return false;\n        }\n    } else if (nameNode.getFirstChild().getType() == Token.REGEXP\n               && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n        return false;\n    } else if (nameNode.getFirstChild().getType() == Token.STRING\n               && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n        Node param = nameNode.getNext();\n        if (param != null &&\n            (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) {\n            return false;\n        }\n    }\n}\n``` \nThis hunk should fix the issue by checking if the function name is qualified name or not. If it is, traverse the nodes to obtain the name of the target node. Then check if the target name is \"Math\", \"console\" or \"JSON\".",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..724116c0 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -955,6 +955,38 @@ public final class NodeUtil {\n       }\n \n       // Functions in the \"Math\" namespace have no side effects.\n+```\n+if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n+    if (nameNode.isQualifiedName()) {\n+        Node targetNode = nameNode.getFirstChild();\n+        String targetName = null;\n+        while (targetNode.getType() == Token.GETPROP) {\n+            targetName = targetNode.getLastChild().getString();\n+            targetNode = targetNode.getFirstChild();\n+        }\n+        if (targetNode.getType() == Token.NAME) {\n+            targetName = targetNode.getString();\n+        }\n+        if (targetName != null && \n+            (targetName.equals(\"Math\") || \n+             targetName.equals(\"console\") || \n+             targetName.equals(\"JSON\"))) {\n+            return false;\n+        }\n+    } else if (nameNode.getFirstChild().getType() == Token.REGEXP\n+               && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n+        return false;\n+    } else if (nameNode.getFirstChild().getType() == Token.STRING\n+               && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n+        Node param = nameNode.getNext();\n+        if (param != null &&\n+            (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) {\n+            return false;\n+        }\n+    }\n+}\n+``` \n+This hunk should fix the issue by checking if the function name is qualified name or not. If it is, traverse the nodes to obtain the name of the target node. Then check if the target name is \"Math\", \"console\" or \"JSON\".\n \n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n         if (nameNode.getFirstChild().getType() == Token.REGEXP",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}