{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          if (NodeUtil.isFunctionDeclaration(n)) {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          if (!NodeUtil.isStatement(n.getParent())) {\n            defineVar(n, scope.getClosestHoistScope());\n          } else {\n            defineVar(n, parent);\n          }\n          break;\n      }\n      \n      if (n.getType() == Token.LP && NodeUtil.isExprAssign(parent.getParent())) {\n        handleFunctionInputs(parent.getParent());\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..fa7694ca 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,31 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n             return;\n           }\n-          defineDeclaredFunction(n, parent);\n+          if (NodeUtil.isFunctionDeclaration(n)) {\n+            defineDeclaredFunction(n, parent);\n+          }\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n-          defineVar(n, parent);\n+          if (!NodeUtil.isStatement(n.getParent())) {\n+            defineVar(n, scope.getClosestHoistScope());\n+          } else {\n+            defineVar(n, parent);\n+          }\n           break;\n       }\n-    }\n+      \n+      if (n.getType() == Token.LP && NodeUtil.isExprAssign(parent.getParent())) {\n+        handleFunctionInputs(parent.getParent());\n+      }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}