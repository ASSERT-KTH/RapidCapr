{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n\n    // No constructor found, so return an unknown type\n    if (constructor == null) {\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n        return scope;\n    }\n\n    // Traverse the constructor function and get its type\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n\n    // If the constructor is not a function type, return an unknown type\n    if (constructorType == null || !constructorType.isFunctionType()) {\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n        return scope;\n    }\n\n    FunctionType ct = constructorType.toMaybeFunctionType();\n\n    // If the constructor is not a constructor function, return an unknown type\n    if (ct == null || !ct.isConstructor()) {\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n        return scope;\n    }\n\n    // Traverse the arguments passed to the constructor\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n\n    // Check all the properties of the instance type to see if they are nullable\n    JSType instanceType = ct.getInstanceType();\n\n    if (instanceType != null) {\n        ObjectType objType = ObjectType.cast(instanceType);\n        if (objType != null) {\n            // Loop through all the instance type's properties\n            for (String propName : objType.getOwnPropertyNames()) {\n                JSType propType = objType.getPropertyType(propName);\n                if (propType != null && !propType.isValueType()) {\n                    // Property is not a value type, so it must be nullable\n                    objType.setPropertyType(propName, propType.toMaybeUnionType().getRestrictedUnion(getNativeType(NULL_TYPE)));\n                }\n            }\n        }\n    }\n\n    // Set the new node's type to the constructor's instance type, if it exists\n    if (instanceType != null) {\n        n.setJSType(instanceType);\n    } else {\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n    }\n\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..22399903 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,64 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n+\n+    // No constructor found, so return an unknown type\n+    if (constructor == null) {\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n+        return scope;\n+    }\n+\n+    // Traverse the constructor function and get its type\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n-      }\n+\n+    // If the constructor is not a function type, return an unknown type\n+    if (constructorType == null || !constructorType.isFunctionType()) {\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n+        return scope;\n     }\n-    n.setJSType(type);\n+\n+    FunctionType ct = constructorType.toMaybeFunctionType();\n+\n+    // If the constructor is not a constructor function, return an unknown type\n+    if (ct == null || !ct.isConstructor()) {\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n+        return scope;\n+    }\n+\n+    // Traverse the arguments passed to the constructor\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+        scope = traverse(arg, scope);\n+    }\n+\n+    // Check all the properties of the instance type to see if they are nullable\n+    JSType instanceType = ct.getInstanceType();\n+\n+    if (instanceType != null) {\n+        ObjectType objType = ObjectType.cast(instanceType);\n+        if (objType != null) {\n+            // Loop through all the instance type's properties\n+            for (String propName : objType.getOwnPropertyNames()) {\n+                JSType propType = objType.getPropertyType(propName);\n+                if (propType != null && !propType.isValueType()) {\n+                    // Property is not a value type, so it must be nullable\n+                    objType.setPropertyType(propName, propType.toMaybeUnionType().getRestrictedUnion(getNativeType(NULL_TYPE)));\n+                }\n+            }\n+        }\n     }\n+\n+    // Set the new node's type to the constructor's instance type, if it exists\n+    if (instanceType != null) {\n+        n.setJSType(instanceType);\n+    } else {\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n+    }\n+\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}