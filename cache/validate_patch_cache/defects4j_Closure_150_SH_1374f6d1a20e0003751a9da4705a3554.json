{
    "patch": "attachLiteralTypes(n);\nswitch (n.getType()) {\n    case Token.FUNCTION:\n        if (parent != null && parent.getType() == Token.NAME) {\n            return;\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n    case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n    case Token.VAR:\n        defineVar(n, parent);\n        break;\n    case Token.EXPR_RESULT:\n        // Check if this expression is a named function expression.\n        if (NodeUtil.isFunctionExpression(n.getFirstChild()) && n.getFirstChild().getFirstChild() != null &&\n            n.getFirstChild().getFirstChild().getType() == Token.STRING) {\n            defineDeclaredFunction(n.getFirstChild(), parent);\n        } else if (n.getFirstFirstChild() != null && n.getFirstFirstChild().getType() == Token.FUNCTION) {\n            defineDeclaredFunction(n.getFirstFirstChild(), parent);\n        } else if (n.getFirstFirstChild() != null && n.getFirstFirstChild().getType() == Token.ASSIGN) {\n            defineVar(n.getFirstFirstChild(), parent);\n        }\n        break;\n    case Token.LP:\n        Node grandparent = parent.getParent();\n        boolean handleInput = false;\n        if (parent.getType() == Token.EXPR_RESULT &&\n            (grandparent.getType() == Token.FOR || grandparent.getType() == Token.FOR_IN)) {\n            // This is the init node of a for loop.\n            handleInput = true;\n        } else if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.ASSIGN) {\n            handleInput = true;\n        } else if (parent == scope.getRootNode() && NodeUtil.isFunctionExpression(parent)) {\n            handleInput = true;\n        }\n        if (handleInput) {\n            handleFunctionInputs(parent);\n        }\n        break;\n    default:\n        break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..4e0ae972 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,50 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+attachLiteralTypes(n);\n+switch (n.getType()) {\n+    case Token.FUNCTION:\n+        if (parent != null && parent.getType() == Token.NAME) {\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+    case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+    case Token.EXPR_RESULT:\n+        // Check if this expression is a named function expression.\n+        if (NodeUtil.isFunctionExpression(n.getFirstChild()) && n.getFirstChild().getFirstChild() != null &&\n+            n.getFirstChild().getFirstChild().getType() == Token.STRING) {\n+            defineDeclaredFunction(n.getFirstChild(), parent);\n+        } else if (n.getFirstFirstChild() != null && n.getFirstFirstChild().getType() == Token.FUNCTION) {\n+            defineDeclaredFunction(n.getFirstFirstChild(), parent);\n+        } else if (n.getFirstFirstChild() != null && n.getFirstFirstChild().getType() == Token.ASSIGN) {\n+            defineVar(n.getFirstFirstChild(), parent);\n+        }\n+        break;\n+    case Token.LP:\n+        Node grandparent = parent.getParent();\n+        boolean handleInput = false;\n+        if (parent.getType() == Token.EXPR_RESULT &&\n+            (grandparent.getType() == Token.FOR || grandparent.getType() == Token.FOR_IN)) {\n+            // This is the init node of a for loop.\n+            handleInput = true;\n+        } else if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.ASSIGN) {\n+            handleInput = true;\n+        } else if (parent == scope.getRootNode() && NodeUtil.isFunctionExpression(parent)) {\n+            handleInput = true;\n+        }\n+        if (handleInput) {\n+            handleFunctionInputs(parent);\n+        }\n+        break;\n+    default:\n+        break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}