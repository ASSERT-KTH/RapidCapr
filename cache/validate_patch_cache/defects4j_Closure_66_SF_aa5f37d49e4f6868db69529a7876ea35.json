{
    "patch": "public static double getTypedPercent(String jsonString) {\n    ObjectMapper objectMapper = new ObjectMapper();\n    try {\n        JsonNode jsonNode = objectMapper.readTree(jsonString);\n        int total = jsonNode.path(\"total\").asInt();\n        int typed = jsonNode.path(\"typed\").asInt();\n        return (double) typed / (double) total * 100.0;\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return 0.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..4f2ffb35 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonString) {\n+    ObjectMapper objectMapper = new ObjectMapper();\n+    try {\n+        JsonNode jsonNode = objectMapper.readTree(jsonString);\n+        int total = jsonNode.path(\"total\").asInt();\n+        int typed = jsonNode.path(\"typed\").asInt();\n+        return (double) typed / (double) total * 100.0;\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+    return 0.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}