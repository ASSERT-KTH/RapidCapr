{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology().withUTC();\n    DateTimeZone zone = chrono.getZone();\n    int offset = zone.getOffsetFromLocal(0);\n    long instantLocal = instant.getMillis() + offset;\n    int defaultYear = chrono.year().get(instantLocal);\n\n    // set pivot year before parsing\n    int pivotYear = iPivotYear != null ? iPivotYear.intValue() : defaultYear;\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, pivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    Long parsedMillis = bucket.computeMillis(true, text);\n    if (parsedMillis != null) {\n        if (bucket.getOffsetInteger() != null) {\n            offset = bucket.getOffsetInteger().intValue();\n            zone = DateTimeZone.forOffsetMillis(offset);\n        } else if (bucket.getZone() != null) {\n            zone = bucket.getZone();\n            offset = zone.getOffsetFromLocal(parsedMillis);\n        } else {\n            offset = zone.getOffset(parsedMillis);\n        }\n        chrono = chrono.withZone(zone);\n        instant.setMillis(parsedMillis - offset);\n        instant.setChronology(chrono);\n        instant.setZone(zone);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..af21f5cc 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,41 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology().withUTC();\n+    DateTimeZone zone = chrono.getZone();\n+    int offset = zone.getOffsetFromLocal(0);\n+    long instantLocal = instant.getMillis() + offset;\n+    int defaultYear = chrono.year().get(instantLocal);\n+\n+    // set pivot year before parsing\n+    int pivotYear = iPivotYear != null ? iPivotYear.intValue() : defaultYear;\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantLocal, chrono, iLocale, pivotYear, defaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    Long parsedMillis = bucket.computeMillis(true, text);\n+    if (parsedMillis != null) {\n+        if (bucket.getOffsetInteger() != null) {\n+            offset = bucket.getOffsetInteger().intValue();\n+            zone = DateTimeZone.forOffsetMillis(offset);\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+            zone = bucket.getZone();\n+            offset = zone.getOffsetFromLocal(parsedMillis);\n+        } else {\n+            offset = zone.getOffset(parsedMillis);\n         }\n+        chrono = chrono.withZone(zone);\n+        instant.setMillis(parsedMillis - offset);\n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+        instant.setZone(zone);\n     }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2004-05-01T12:20:30.000+09:00> but was:<2004-05-01T00:00:00.000Z>",
    "test_result": "FAIL"
}