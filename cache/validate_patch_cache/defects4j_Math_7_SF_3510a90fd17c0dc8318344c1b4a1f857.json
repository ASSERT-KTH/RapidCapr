{
    "patch": "public void doEvents(final double tMax) throws MathIllegalStateException {\n\n    double t = getCurrentSignedStepsize();\n    final double tEnd = (getT() < tMax) ? tMax : getT() + 0.5 * getCurrentSignedStepsize();\n\n    List<EventState> eventsStates = new ArrayList<>();\n    do {\n        // search for ongoing events and check they still exist in the timeline\n        for (final EventState state : getEventsStates()) {\n            \n            //Check if the event is still relevant to the integration timeline\n            if (state.isActivated() && state.getEventTime() >= getT() && state.getEventTime() < tEnd) {\n                eventsStates.add(state);\n            }\n        }\n\n        Collections.sort(eventsStates, new Comparator<EventState>() {\n            public int compare(EventState es0, EventState es1) {\n                return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n            }\n        });\n\n        for (final EventState state : eventsStates) {\n            if (state.evaluateStep(interpolator)) {\n                // the event occurs during the current step\n                occuringEvents.add(state);\n            }\n        }\n\n        while (!occuringEvents.isEmpty()) {\n\n            // handle the chronologically first event\n            final Iterator<EventState> iterator = occuringEvents.iterator();\n            final EventState currentEvent = iterator.next();\n            iterator.remove();\n\n            // restrict the interpolator to the first part of the step, up to the event\n            final double eventT = currentEvent.getEventTime();\n            interpolator.setSoftPreviousTime(previousT);\n            interpolator.setSoftCurrentTime(eventT);\n\n            // get state at event time\n            interpolator.setInterpolatedTime(eventT);\n            final double[] eventY = interpolator.getInterpolatedState().clone();\n\n            // advance all event states to current time\n            currentEvent.stepAccepted(eventT, eventY);\n            isLastStep = currentEvent.stop();\n\n            // handle the first part of the step, up to the event\n            for (final StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n        }\n        \n        interpolator.setInterpolatedTime(getT() + t + fuzzyMissing);\n  \n        // compute the next step\n        rescale(tEnd, 1.0 / (1.0 + 1.e-10 * FastMath.abs(t)), this::computeDerivatives,\n                this::completeStep);\n        // step may have been rejected in the meantime\n        if (isLastStep() && !Double.isNaN(getStepStart())) {\n            // switch time to next time but keep interpolator configuration\n            final double dt = getStepSize();\n            setStepStart(getT());\n            setStepSize(dt);\n            interpolator.shift();\n        }\n        // prepare next step\n        eventsStates.clear();\n        t = getNextStep();\n        setCurrentSignedStepsize(t, getStepSize());\n    } while (t < tEnd);\n\n    try {\n        stepHandlers.finish(getInterpolatedTime(), getInterpolatedState());\n    } catch (final Throwable t2) {\n        if (!(t2 instanceof MathUserException)) {\n            throw new MathIllegalStateException(LocalizedFormats.USER_DEFINED_EXCEPTION, t2.getMessage());\n        }\n        throw (MathUserException) t2;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..6db5dcf33 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,89 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n+public void doEvents(final double tMax) throws MathIllegalStateException {\n+\n+    double t = getCurrentSignedStepsize();\n+    final double tEnd = (getT() < tMax) ? tMax : getT() + 0.5 * getCurrentSignedStepsize();\n+\n+    List<EventState> eventsStates = new ArrayList<>();\n+    do {\n+        // search for ongoing events and check they still exist in the timeline\n+        for (final EventState state : getEventsStates()) {\n+            \n+            //Check if the event is still relevant to the integration timeline\n+            if (state.isActivated() && state.getEventTime() >= getT() && state.getEventTime() < tEnd) {\n+                eventsStates.add(state);\n+            }\n+        }\n \n-            });\n+        Collections.sort(eventsStates, new Comparator<EventState>() {\n+            public int compare(EventState es0, EventState es1) {\n+                return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n+            }\n+        });\n \n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n+        for (final EventState state : eventsStates) {\n+            if (state.evaluateStep(interpolator)) {\n+                // the event occurs during the current step\n+                occuringEvents.add(state);\n             }\n+        }\n \n-            while (!occuringEvents.isEmpty()) {\n+        while (!occuringEvents.isEmpty()) {\n \n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n+            // handle the chronologically first event\n+            final Iterator<EventState> iterator = occuringEvents.iterator();\n+            final EventState currentEvent = iterator.next();\n+            iterator.remove();\n \n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n+            // restrict the interpolator to the first part of the step, up to the event\n+            final double eventT = currentEvent.getEventTime();\n+            interpolator.setSoftPreviousTime(previousT);\n+            interpolator.setSoftCurrentTime(eventT);\n \n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n+            // get state at event time\n+            interpolator.setInterpolatedTime(eventT);\n+            final double[] eventY = interpolator.getInterpolatedState().clone();\n \n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+            // advance all event states to current time\n+            currentEvent.stepAccepted(eventT, eventY);\n+            isLastStep = currentEvent.stop();\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+            // handle the first part of the step, up to the event\n+            for (final StepHandler handler : stepHandlers) {\n+                handler.handleStep(interpolator, isLastStep);\n+            }\n+        }\n+        \n+        interpolator.setInterpolatedTime(getT() + t + fuzzyMissing);\n+  \n+        // compute the next step\n+        rescale(tEnd, 1.0 / (1.0 + 1.e-10 * FastMath.abs(t)), this::computeDerivatives,\n+                this::completeStep);\n+        // step may have been rejected in the meantime\n+        if (isLastStep() && !Double.isNaN(getStepStart())) {\n+            // switch time to next time but keep interpolator configuration\n+            final double dt = getStepSize();\n+            setStepStart(getT());\n+            setStepSize(dt);\n+            interpolator.shift();\n+        }\n+        // prepare next step\n+        eventsStates.clear();\n+        t = getNextStep();\n+        setCurrentSignedStepsize(t, getStepSize());\n+    } while (t < tEnd);\n+\n+    try {\n+        stepHandlers.finish(getInterpolatedTime(), getInterpolatedState());\n+    } catch (final Throwable t2) {\n+        if (!(t2 instanceof MathUserException)) {\n+            throw new MathIllegalStateException(LocalizedFormats.USER_DEFINED_EXCEPTION, t2.getMessage());\n+        }\n+        throw (MathUserException) t2;\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}