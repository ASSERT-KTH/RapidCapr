{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    int len = value.length();\n    if (regex == null) {\n        regex = new StringBuilder(len);\n    } else {\n        regex.setLength(0);\n        regex.ensureCapacity(len);\n    }\n    boolean wasWhite = false;\n    for (int i = 0; i < len; ++i) {\n        char c = value.charAt(i);\n\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s*\");\n            }\n            continue;\n        }\n        wasWhite = false;\n\n        switch (c) {\n            case '\\'':\n                if (unquote) {\n                    if (++i >= len) {\n                        regex.setLength(0);\n                        return regex;\n                    }\n                    regex.append(value.charAt(i));\n                } else {\n                    regex.append('\\\\').append(c);\n                }\n                break;\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '\\\\':\n            case '.':\n                regex.append('\\\\').append(c);\n                break;\n            default:\n                regex.append(c);\n                break;\n        }\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..dde7bf6e 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,25 +300,37 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    int len = value.length();\n+    if (regex == null) {\n+        regex = new StringBuilder(len);\n+    } else {\n+        regex.setLength(0);\n+        regex.ensureCapacity(len);\n+    }\n+    boolean wasWhite = false;\n+    for (int i = 0; i < len; ++i) {\n+        char c = value.charAt(i);\n+\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                regex.append(\"\\\\s*\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n+            continue;\n+        }\n+        wasWhite = false;\n+\n+        switch (c) {\n             case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n+                if (unquote) {\n+                    if (++i >= len) {\n+                        regex.setLength(0);\n                         return regex;\n                     }\n-                    c= value.charAt(i);\n+                    regex.append(value.charAt(i));\n+                } else {\n+                    regex.append('\\\\').append(c);\n                 }\n                 break;\n             case '?':\n@@ -328,19 +340,22 @@ public class FastDateParser implements DateParser, Serializable {\n             case ')':\n             case '{':\n             case '}':\n-            case '\\\\':\n             case '|':\n             case '*':\n             case '+':\n             case '^':\n             case '$':\n+            case '\\\\':\n             case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                regex.append('\\\\').append(c);\n+                break;\n+            default:\n+                regex.append(c);\n+                break;\n         }\n-        return regex;\n     }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}