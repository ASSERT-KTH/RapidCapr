{
    "patch": "import org.apache.commons.math3.special.Gamma;\n\npublic static double regularizedGamma(double a, double x) {\n    double epsilon = 10e-9;\n    double sum = 0;\n    double term = 1 / a;\n    int n = 1;\n\n    while (Math.abs(term) > epsilon) {\n        term = (1 / Gamma.gamma(a + n)) * Math.pow(x, a + n);\n        sum += term;\n        n++;\n    }\n\n    return Math.exp(-x) * Math.pow(x, a) * sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c43fb7914 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,22 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+\n+public static double regularizedGamma(double a, double x) {\n+    double epsilon = 10e-9;\n+    double sum = 0;\n+    double term = 1 / a;\n+    int n = 1;\n+\n+    while (Math.abs(term) > epsilon) {\n+        term = (1 / Gamma.gamma(a + n)) * Math.pow(x, a + n);\n+        sum += term;\n+        n++;\n+    }\n+\n+    return Math.exp(-x) * Math.pow(x, a) * sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}