{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // We check for a cycle before attempting to resolve via the registry or properties.\n    boolean isCycleDetected = detectImplicitPrototypeCycle();\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    if (resolved) {\n        // We only handle the cycle after we have successfully resolved via the registry. If we detect a cycle\n        // while attempting to resolve via properties, we need to fall back to the registry resolution.\n        if (isCycleDetected) {\n            handleTypeCycle(t);\n        }\n\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n\n        if (registry.isLastGeneration()) {\n            return getReferencedType();\n        } else {\n            return this;\n        }\n    }\n\n    resolved = resolveViaProperties(t, enclosing);\n    if (resolved) {\n        if (isCycleDetected) {\n            handleTypeCycle(t);\n        }\n\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n\n        if (registry.isLastGeneration()) {\n            return getReferencedType();\n        } else {\n            return this;\n        }\n    }\n\n    // We attempted to resolve via the registry and properties, but neither succeeded. We still need to handle\n    // any detected cycle.\n    if (isCycleDetected) {\n        handleTypeCycle(t);\n    }\n\n    super.resolveInternal(t, enclosing);\n\n    if (isResolved()) {\n        finishPropertyContinuations();\n    }\n\n    if (registry.isLastGeneration()) {\n        return getReferencedType();\n    } else {\n        return this;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..c74ba3ef 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,61 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    // We check for a cycle before attempting to resolve via the registry or properties.\n+    boolean isCycleDetected = detectImplicitPrototypeCycle();\n     boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    if (resolved) {\n+        // We only handle the cycle after we have successfully resolved via the registry. If we detect a cycle\n+        // while attempting to resolve via properties, we need to fall back to the registry resolution.\n+        if (isCycleDetected) {\n+            handleTypeCycle(t);\n+        }\n+\n+        super.resolveInternal(t, enclosing);\n+        finishPropertyContinuations();\n+\n+        if (registry.isLastGeneration()) {\n+            return getReferencedType();\n+        } else {\n+            return this;\n+        }\n     }\n \n+    resolved = resolveViaProperties(t, enclosing);\n     if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+        if (isCycleDetected) {\n+            handleTypeCycle(t);\n+        }\n+\n+        super.resolveInternal(t, enclosing);\n+        finishPropertyContinuations();\n+\n+        if (registry.isLastGeneration()) {\n+            return getReferencedType();\n+        } else {\n+            return this;\n+        }\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    // We attempted to resolve via the registry and properties, but neither succeeded. We still need to handle\n+    // any detected cycle.\n+    if (isCycleDetected) {\n+        handleTypeCycle(t);\n     }\n \n     super.resolveInternal(t, enclosing);\n+\n     if (isResolved()) {\n-      finishPropertyContinuations();\n+        finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+\n+    if (registry.isLastGeneration()) {\n+        return getReferencedType();\n+    } else {\n+        return this;\n+    }\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}