{
    "patch": " private void handleObjectLit(NodeTraversal t, Node n) {\n   for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n     // Maybe STRING, GETPROP, GET, SET, STRING_KEY, NUMBER, BOOLEAN\n     if (!NodeUtil.isGetOrSetKey(child)) {\n       if (!child.isStringKey() && !child.isNumber() && !child.isBoolean()) continue;\n       String name = null;\n       T type = null;\n       if (child.isStringKey()) {\n         name = child.getString();\n         type = typeSystem.getType(getScope(), n, name);\n         if (type == null) continue;\n       } else if (child.isNumber()) {\n         name = Double.toString(child.getDouble());\n       } else if (child.isBoolean()) {\n         name = Boolean.toString(child.getBoolean());\n       }\n       Property prop = getProperty(name);\n       if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n         if (propertiesToErrorFor.containsKey(name)) {\n           compiler.report(JSError.make(t.getSourceName(),\n                                        child,\n                                        propertiesToErrorFor.get(name),\n                                        Warnings.INVALIDATION, name,\n                                        (type == null ? \"null\" : type.toString()),\n                                        n.toString(), \"\"));\n         }\n       }\n     }\n   }\n }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..c16b81c6 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,36 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+ private void handleObjectLit(NodeTraversal t, Node n) {\n+   for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+     // Maybe STRING, GETPROP, GET, SET, STRING_KEY, NUMBER, BOOLEAN\n+     if (!NodeUtil.isGetOrSetKey(child)) {\n+       if (!child.isStringKey() && !child.isNumber() && !child.isBoolean()) continue;\n+       String name = null;\n+       T type = null;\n+       if (child.isStringKey()) {\n+         name = child.getString();\n+         type = typeSystem.getType(getScope(), n, name);\n+         if (type == null) continue;\n+       } else if (child.isNumber()) {\n+         name = Double.toString(child.getDouble());\n+       } else if (child.isBoolean()) {\n+         name = Boolean.toString(child.getBoolean());\n+       }\n+       Property prop = getProperty(name);\n+       if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+         if (propertiesToErrorFor.containsKey(name)) {\n+           compiler.report(JSError.make(t.getSourceName(),\n+                                        child,\n+                                        propertiesToErrorFor.get(name),\n+                                        Warnings.INVALIDATION, name,\n+                                        (type == null ? \"null\" : type.toString()),\n+                                        n.toString(), \"\"));\n+         }\n+       }\n+     }\n+   }\n+ }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}