{
    "patch": "public static double getTypedPercent(JSONArray jsonArray) {\n    int total = 0, typed = 0;\n\n    for (int i = 0; i < jsonArray.length(); i++) {\n        Object obj = jsonArray.get(i);\n        if (obj instanceof JSONObject) {\n            total++;\n            JSONObject jsonObject = (JSONObject) obj;\n            if (jsonObject.has(\"type\") && jsonObject.getString(\"type\").length() > 0) {\n                typed++;\n            }\n        }\n    }\n\n    double percent = total > 0 ? (100.0 * typed) / total : 0.0;\n    return Math.round(percent * 10.0) / 10.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..5f37984f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONArray jsonArray) {\n+    int total = 0, typed = 0;\n+\n+    for (int i = 0; i < jsonArray.length(); i++) {\n+        Object obj = jsonArray.get(i);\n+        if (obj instanceof JSONObject) {\n+            total++;\n+            JSONObject jsonObject = (JSONObject) obj;\n+            if (jsonObject.has(\"type\") && jsonObject.getString(\"type\").length() > 0) {\n+                typed++;\n+            }\n+        }\n+    }\n+\n+    double percent = total > 0 ? (100.0 * typed) / total : 0.0;\n+    return Math.round(percent * 10.0) / 10.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}