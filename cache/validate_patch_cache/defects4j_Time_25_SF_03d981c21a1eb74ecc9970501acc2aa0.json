{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int initialOffset = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - initialOffset;\n    final int adjustedOffset = getOffset(instantAdjusted);\n\n    // if the offsets differ, we must be near a DST boundary\n    if (initialOffset != adjustedOffset) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        boolean isPositiveOffsetGap = (initialOffset - adjustedOffset) < 0;\n        long nextTransitionInstant = isPositiveOffsetGap ? \n                                     nextTransition(instantAdjusted) :\n                                     nextTransition(instantLocal);\n        if (nextTransitionInstant == instantLocal || nextTransitionInstant == instantAdjusted) {\n            // there is no DST gap so we can return the adjusted offset\n            return adjustedOffset;\n        }\n        \n        // calculate the gap between the two offsets\n        int delta = isPositiveOffsetGap ? \n                    adjustedOffset - initialOffset :\n                    initialOffset - adjustedOffset;\n\n        if (nextTransitionInstant > instantLocal) {\n            // we are before a DST gap and need to push the time to after the gap\n            if (delta < (nextTransitionInstant - instantLocal)) {\n                return initialOffset;\n            } else {\n                return adjustedOffset;\n            }\n        } else {\n            // we are after a DST gap and need to push the time to before the gap\n            if (delta < (instantLocal - nextTransitionInstant)) {\n                return adjustedOffset;\n            } else {\n                return initialOffset;\n            }\n        }\n    }\n    return adjustedOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..e62d4ddf 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,49 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int initialOffset = getOffset(instantLocal);\n+    // adjust instantLocal using the estimate and recalc the offset\n+    final long instantAdjusted = instantLocal - initialOffset;\n+    final int adjustedOffset = getOffset(instantAdjusted);\n+\n+    // if the offsets differ, we must be near a DST boundary\n+    if (initialOffset != adjustedOffset) {\n+        // we need to ensure that time is always after the DST gap\n+        // this happens naturally for positive offsets, but not for negative\n+        boolean isPositiveOffsetGap = (initialOffset - adjustedOffset) < 0;\n+        long nextTransitionInstant = isPositiveOffsetGap ? \n+                                     nextTransition(instantAdjusted) :\n+                                     nextTransition(instantLocal);\n+        if (nextTransitionInstant == instantLocal || nextTransitionInstant == instantAdjusted) {\n+            // there is no DST gap so we can return the adjusted offset\n+            return adjustedOffset;\n+        }\n+        \n+        // calculate the gap between the two offsets\n+        int delta = isPositiveOffsetGap ? \n+                    adjustedOffset - initialOffset :\n+                    initialOffset - adjustedOffset;\n+\n+        if (nextTransitionInstant > instantLocal) {\n+            // we are before a DST gap and need to push the time to after the gap\n+            if (delta < (nextTransitionInstant - instantLocal)) {\n+                return initialOffset;\n+            } else {\n+                return adjustedOffset;\n+            }\n+        } else {\n+            // we are after a DST gap and need to push the time to before the gap\n+            if (delta < (instantLocal - nextTransitionInstant)) {\n+                return adjustedOffset;\n+            } else {\n+                return initialOffset;\n             }\n         }\n-        return offsetAdjusted;\n     }\n+    return adjustedOffset;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}