{
    "patch": "    public <T> void resetMock(T mock) {\n        MockHandler<T> oldMockHandler = getMockHandler(mock);\n        if (mock instanceof MockAccess) {\n            MockAccess mockAccess = (MockAccess) mock;\n            MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n            mockAccess.setMockitoHandler(newMockHandler);\n        } else {\n            throw new IllegalArgumentException(\"Mock object is not a Mockito mock instance.\");\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..bf29b8fe2 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,17 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+    public <T> void resetMock(T mock) {\n+        MockHandler<T> oldMockHandler = getMockHandler(mock);\n+        if (mock instanceof MockAccess) {\n+            MockAccess mockAccess = (MockAccess) mock;\n+            MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+            mockAccess.setMockitoHandler(newMockHandler);\n+        } else {\n+            throw new IllegalArgumentException(\"Mock object is not a Mockito mock instance.\");\n+        }\n+    }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: incompatible types: MockHandlerInterface<T> cannot be converted to MockHandler<T>",
    "test_result": "ERROR"
}