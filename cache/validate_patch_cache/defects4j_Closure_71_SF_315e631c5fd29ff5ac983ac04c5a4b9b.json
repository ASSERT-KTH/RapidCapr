{
    "patch": "  private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent) {\n    ObjectType objectType =\n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n      // Is this a normal property access, or are we trying to override\n      // an existing property?\n      boolean isOverride = t.inGlobalScope() &&\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop;\n\n      // Find the lowest property defined on a class with visibility\n      // information.\n      if (isOverride) {\n        objectType = objectType.getImplicitPrototype();\n      }\n\n      JSDocInfo docInfo = findBestVisibilityInfo(propertyName, objectType);\n      if (docInfo == null) {\n        // We couldn't find a visibility modifier; assume it's public.\n        return;\n      }\n\n      String bestSourceFileName = extractBestSourceFileName(docInfo);\n      boolean sameInput = t.getInput().getName().equals(bestSourceFileName);\n      Visibility visibility = docInfo.getVisibility();\n      JSType ownerType = normalizeClassType(objectType);\n\n      if (isOverride) {\n        // Check an ASSIGN statement that's trying to override a property\n        // on a superclass.\n        JSDocInfo overridingInfo = parent.getJSDocInfo();\n        Visibility overridingVisibility =\n            (overridingInfo == null) ? Visibility.INHERITED : overridingInfo.getVisibility();\n\n        // Check that (a) the property *can* be overridden, and\n        // (b) that the visibility of the override is the same as the\n        // visibility of the original property.\n        if (visibility == Visibility.PRIVATE && !sameInput) {\n          compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));\n        } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) {\n          compiler.report(\n              t.makeError(\n                  getprop,\n                  VISIBILITY_MISMATCH,\n                  visibility.name(),\n                  objectType.toString(),\n                  overridingVisibility.name()));\n        }\n      } else {\n        if (sameInput) {\n          // private access is always allowed in the same file.\n          return;\n        } else if (visibility == Visibility.PRIVATE\n            && (currentClass == null || ownerType.differsFrom(currentClass))) {\n          if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {\n            return;\n          }\n\n          // private access is not allowed outside the file from a different\n          // enclosing class.\n          compiler.report(\n              t.makeError(\n                  getprop,\n                  BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n        } else if (visibility == Visibility.PROTECTED) {\n          // There are 3 types of legal accesses of a protected property:\n          // 1) Accesses in the same file\n          // 2) Overriding the property in a subclass\n          // 3) Accessing the property from inside a subclass\n          // The first two have already been checked for.\n          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n            compiler.report(\n                t.makeError(\n                    getprop,\n                    BAD_PROTECTED_PROPERTY_ACCESS,\n                    propertyName,\n                    validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n          }\n        }\n      }\n    }\n  }\n\n  private static JSDocInfo findBestVisibilityInfo(String propertyName, ObjectType objectType) {\n    JSDocInfo docInfo = null;\n    ObjectType objectToCheck = objectType;\n    while (objectToCheck != null) {\n      docInfo = objectToCheck.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n        break;\n      }\n      objectToCheck = objectToCheck.getImplicitPrototype();\n    }\n    return docInfo;\n  }\n\n  private static String extractBestSourceFileName(JSDocInfo docInfo) {\n    if (docInfo == null || docInfo.getOriginalCommentString() == null) {\n      return null;\n    }\n    return docInfo.getBestSourceFileName();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..9238d6ec 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -422,65 +422,57 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n       if (isOverride) {\n         objectType = objectType.getImplicitPrototype();\n       }\n-      JSDocInfo docInfo = null;\n-      for (; objectType != null;\n-           objectType = objectType.getImplicitPrototype()) {\n-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n-        if (docInfo != null &&\n-            docInfo.getVisibility() != Visibility.INHERITED) {\n-          break;\n-        }\n-      }\n \n-      if (objectType == null) {\n+      JSDocInfo docInfo = findBestVisibilityInfo(propertyName, objectType);\n+      if (docInfo == null) {\n         // We couldn't find a visibility modifier; assume it's public.\n         return;\n       }\n \n-      boolean sameInput =\n-          t.getInput().getName().equals(docInfo.getSourceName());\n+      String bestSourceFileName = extractBestSourceFileName(docInfo);\n+      boolean sameInput = t.getInput().getName().equals(bestSourceFileName);\n       Visibility visibility = docInfo.getVisibility();\n       JSType ownerType = normalizeClassType(objectType);\n+\n       if (isOverride) {\n         // Check an ASSIGN statement that's trying to override a property\n         // on a superclass.\n         JSDocInfo overridingInfo = parent.getJSDocInfo();\n-        Visibility overridingVisibility = overridingInfo == null ?\n-            Visibility.INHERITED : overridingInfo.getVisibility();\n+        Visibility overridingVisibility =\n+            (overridingInfo == null) ? Visibility.INHERITED : overridingInfo.getVisibility();\n \n         // Check that (a) the property *can* be overridden, and\n         // (b) that the visibility of the override is the same as the\n         // visibility of the original property.\n         if (visibility == Visibility.PRIVATE && !sameInput) {\n+          compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));\n+        } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) {\n           compiler.report(\n-              t.makeError(getprop, PRIVATE_OVERRIDE,\n-                  objectType.toString()));\n-        } else if (overridingVisibility != Visibility.INHERITED &&\n-            overridingVisibility != visibility) {\n-          compiler.report(\n-              t.makeError(getprop, VISIBILITY_MISMATCH,\n-                  visibility.name(), objectType.toString(),\n+              t.makeError(\n+                  getprop,\n+                  VISIBILITY_MISMATCH,\n+                  visibility.name(),\n+                  objectType.toString(),\n                   overridingVisibility.name()));\n         }\n       } else {\n         if (sameInput) {\n           // private access is always allowed in the same file.\n           return;\n-        } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n-          if (docInfo.isConstructor() &&\n-              isValidPrivateConstructorAccess(parent)) {\n+        } else if (visibility == Visibility.PRIVATE\n+            && (currentClass == null || ownerType.differsFrom(currentClass))) {\n+          if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {\n             return;\n           }\n \n           // private access is not allowed outside the file from a different\n           // enclosing class.\n           compiler.report(\n-              t.makeError(getprop,\n+              t.makeError(\n+                  getprop,\n                   BAD_PRIVATE_PROPERTY_ACCESS,\n                   propertyName,\n-                  validator.getReadableJSTypeName(\n-                      getprop.getFirstChild(), true)));\n+                  validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n         } else if (visibility == Visibility.PROTECTED) {\n           // There are 3 types of legal accesses of a protected property:\n           // 1) Accesses in the same file\n@@ -489,16 +481,37 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n           // The first two have already been checked for.\n           if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n             compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n+                t.makeError(\n+                    getprop,\n+                    BAD_PROTECTED_PROPERTY_ACCESS,\n                     propertyName,\n-                    validator.getReadableJSTypeName(\n-                        getprop.getFirstChild(), true)));\n+                    validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n           }\n         }\n       }\n     }\n   }\n \n+  private static JSDocInfo findBestVisibilityInfo(String propertyName, ObjectType objectType) {\n+    JSDocInfo docInfo = null;\n+    ObjectType objectToCheck = objectType;\n+    while (objectToCheck != null) {\n+      docInfo = objectToCheck.getOwnPropertyJSDocInfo(propertyName);\n+      if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n+        break;\n+      }\n+      objectToCheck = objectToCheck.getImplicitPrototype();\n+    }\n+    return docInfo;\n+  }\n+\n+  private static String extractBestSourceFileName(JSDocInfo docInfo) {\n+    if (docInfo == null || docInfo.getOriginalCommentString() == null) {\n+      return null;\n+    }\n+    return docInfo.getBestSourceFileName();\n+  }\n+\n   /**\n    * Whether the given access of a private constructor is legal.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}