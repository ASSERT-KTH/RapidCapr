{
    "patch": "I apologize for the mistake. Here is the correct version of the `containsAny` function:\n\n``` java\npublic static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int strLen = sequence.length();\n    final int searchLen = searchChars.length;\n    final int total = Math.min(strLen, searchLen) + 1;\n    for (int i = 0; i < strLen; i++) {\n        final int codepoint = Character.codePointAt(sequence, i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == codepoint) {\n                // Found one of the search characters, so return true\n                return true;\n            }\n        }\n        if (--total <= 0) {\n            // Checked all search characters, so return false\n            return false;\n        }\n        if (Character.isSupplementaryCodePoint(codepoint)) {\n            // If the current codepoint is a supplementary character,\n            // increment i once more to skip the next char in the sequence\n            i++;\n        }\n    }\n    return false;\n}\n```\n\nThis version first checks if the input sequence or the searchChars array is empty, and returns false if either one is empty. It then loops through the input sequence, using `Character.codePointAt()` to get the codepoint of each character to handle surrogate pairs, and checks if the current codepoint is equal to any of the searchChars. If a match is found, the function returns true and exits the loop. If all search characters have been checked and no match was found, the function returns false. If the current codepoint is a supplementary character, it increments i once more to skip the next char in the sequence.\n\nI hope this version resolves the error.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..cc087ff8 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,41 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+I apologize for the mistake. Here is the correct version of the `containsAny` function:\n+\n+``` java\n+public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int strLen = sequence.length();\n+    final int searchLen = searchChars.length;\n+    final int total = Math.min(strLen, searchLen) + 1;\n+    for (int i = 0; i < strLen; i++) {\n+        final int codepoint = Character.codePointAt(sequence, i);\n+        for (int j = 0; j < searchLen; j++) {\n+            if (searchChars[j] == codepoint) {\n+                // Found one of the search characters, so return true\n+                return true;\n+            }\n+        }\n+        if (--total <= 0) {\n+            // Checked all search characters, so return false\n+            return false;\n+        }\n+        if (Character.isSupplementaryCodePoint(codepoint)) {\n+            // If the current codepoint is a supplementary character,\n+            // increment i once more to skip the next char in the sequence\n+            i++;\n+        }\n+    }\n+    return false;\n+}\n+```\n+\n+This version first checks if the input sequence or the searchChars array is empty, and returns false if either one is empty. It then loops through the input sequence, using `Character.codePointAt()` to get the codepoint of each character to handle surrogate pairs, and checks if the current codepoint is equal to any of the searchChars. If a match is found, the function returns true and exits the loop. If all search characters have been checked and no match was found, the function returns false. If the current codepoint is a supplementary character, it increments i once more to skip the next char in the sequence.\n+\n+I hope this version resolves the error.\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}