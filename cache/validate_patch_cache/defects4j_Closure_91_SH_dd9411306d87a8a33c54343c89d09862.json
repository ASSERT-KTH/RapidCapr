{
    "patch": "      if (AstUtils.isLValueNode(parent)) {\n        Node lhs = parent.getFirstChild();\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        if (lhs.getType() == Token.STRING_KEY &&\n            lhs.getFirstChild().getType() == Token.STRING &&\n            lhs.getFirstChild().getString().equals(\"prototype\")) {\n          return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..4d075912 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,16 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (AstUtils.isLValueNode(parent)) {\n+        Node lhs = parent.getFirstChild();\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        if (lhs.getType() == Token.STRING_KEY &&\n+            lhs.getFirstChild().getType() == Token.STRING &&\n+            lhs.getFirstChild().getString().equals(\"prototype\")) {\n+          return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}