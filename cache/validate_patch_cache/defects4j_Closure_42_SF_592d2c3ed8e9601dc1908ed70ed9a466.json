{
    "patch": "class MyTransformDispatcher implements TypeSafeDispatcher {\n\n  IRFactory factory;\n\n  MyTransformDispatcher(IRFactory factory) {\n    this.factory = factory;\n  }\n\n  @Override\n  public Node processBlock(Block blockNode) {\n    return factory.processGenericBlock(blockNode);\n  }\n\n  @Override\n  public Node processConditionalExpression(ConditionalExpression exprNode) {\n    return factory.processConditionalExpression(exprNode);\n  }\n\n  @Override\n  public Node processDoLoop(DoLoop loopNode) {\n    return factory.processDoLoop(loopNode);\n  }\n\n  @Override\n  public Node processElementGet(ElementGet getNode) {\n    return factory.processElementGet(getNode);\n  }\n\n  @Override\n  public Node processEmptyExpression(EmptyExpression node) {\n    return factory.processEmptyExpression(node);\n  }\n\n  @Override\n  public Node processExprStmt(ExpressionStatement n) {\n    return factory.processExprStmt(n);\n  }\n\n  @Override\n  public Node processForInLoop(ForInLoop loopNode) {\n    return factory.processForInLoop(loopNode);\n  }\n\n  @Override\n  public Node processForLoop(ForLoop loopNode) {\n    return factory.processForLoop(loopNode);\n  }\n\n  @Override\n  public Node processIfStatement(IfStatement ifNode) {\n    return factory.processIfStatement(ifNode);\n  }\n\n  @Override\n  public Node processLabeledStatement(LabeledStatement labelNode) {\n    return factory.processLabeledStatement(labelNode);\n  }\n\n  @Override\n  public Node processName(Name nameNode) {\n    return factory.processName(nameNode);\n  }\n\n  @Override\n  public Node processNewExpression(NewExpression newNode) {\n    return factory.processNewExpression(newNode);\n  }\n\n  @Override\n  public Node processNumber(NumberLiteral numberNode) {\n    return factory.processNumber(numberNode);\n  }\n\n  @Override\n  public Node processObjectLiteral(ObjectLiteral objNode) {\n    return factory.processObjectLiteral(objNode);\n  }\n\n  @Override\n  public Node processParenthesizedExpression(\n      ParenthesizedExpression exprNode) {\n    return factory.processParenthesizedExpression(exprNode);\n  }\n\n  @Override\n  public Node processPropertyGet(PropertyGet getNode) {\n    return factory.processPropertyGet(getNode);\n  }\n\n  @Override\n  public Node processRegExpLiteral(RegExpLiteral literalNode) {\n    return factory.processRegExpLiteral(literalNode);\n  }\n\n  @Override\n  public Node processReturnStatement(ReturnStatement returnNode) {\n    return factory.processReturnStatement(returnNode);\n  }\n\n  @Override\n  public Node processString(StringLiteral stringNode) {\n    return factory.processString(stringNode);\n  }\n\n  @Override\n  public Node processSwitchCase(SwitchCase caseNode) {\n    return factory.processSwitchCase(caseNode);\n  }\n\n  @Override\n  public Node processSwitchStatement(SwitchStatement switchNode) {\n    return factory.processSwitch(switchNode);\n  }\n\n  @Override\n  public Node processThrowStatement(ThrowStatement throwNode) {\n    return factory.processThrow(throwNode);\n  }\n\n  @Override\n  public Node processTryCatchFinally(TryCatchFinally tryNode) {\n    return factory.processTry(tryNode);\n  }\n\n  @Override\n  public Node processUnaryExpression(UnaryExpression unaryNode) {\n    return factory.processUnary(unaryNode);\n  }\n\n  @Override\n  public Node processVariableDeclaration(VariableDeclaration decl) {\n    return factory.processVariables(decl);\n  }\n\n  @Override\n  public Node processWhileLoop(WhileLoop loopNode) {\n    return factory.processWhileLoop(loopNode);\n  }\n\n  @Override\n  public Node processWithStatement(WithStatement withNode) {\n    return factory.processWith(withNode);\n  }\n\n  // New functions to implement the TypeSafeDispatcher interface.\n\n  @Override\n  public Node processBreakStatement(BreakStatement breakStatement) {\n    return factory.processBreakStatement(breakStatement);\n  }\n\n  @Override\n  public Node processCatchClause(CatchClause catchClause) {\n    return factory.processCatch(catchClause);\n  }\n\n  @Override\n  public Node processContinueStatement(ContinueStatement continueStatement) {\n    return factory.processContinueStatement(continueStatement);\n  }\n\n  @Override\n  public Node processExpressionStatement(ExpressionStatement exprStatement) {\n    return factory.processExpressionStatement(exprStatement);\n  }\n\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..68101c64 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,173 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+class MyTransformDispatcher implements TypeSafeDispatcher {\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+  IRFactory factory;\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+  MyTransformDispatcher(IRFactory factory) {\n+    this.factory = factory;\n+  }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+  @Override\n+  public Node processBlock(Block blockNode) {\n+    return factory.processGenericBlock(blockNode);\n+  }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n+  @Override\n+  public Node processConditionalExpression(ConditionalExpression exprNode) {\n+    return factory.processConditionalExpression(exprNode);\n+  }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n+  @Override\n+  public Node processDoLoop(DoLoop loopNode) {\n+    return factory.processDoLoop(loopNode);\n+  }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+  @Override\n+  public Node processElementGet(ElementGet getNode) {\n+    return factory.processElementGet(getNode);\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n+  @Override\n+  public Node processEmptyExpression(EmptyExpression node) {\n+    return factory.processEmptyExpression(node);\n+  }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n+  @Override\n+  public Node processExprStmt(ExpressionStatement n) {\n+    return factory.processExprStmt(n);\n+  }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+  @Override\n+  public Node processForInLoop(ForInLoop loopNode) {\n+    return factory.processForInLoop(loopNode);\n+  }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n+  @Override\n+  public Node processForLoop(ForLoop loopNode) {\n+    return factory.processForLoop(loopNode);\n+  }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+  @Override\n+  public Node processIfStatement(IfStatement ifNode) {\n+    return factory.processIfStatement(ifNode);\n+  }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+  @Override\n+  public Node processLabeledStatement(LabeledStatement labelNode) {\n+    return factory.processLabeledStatement(labelNode);\n+  }\n+\n+  @Override\n+  public Node processName(Name nameNode) {\n+    return factory.processName(nameNode);\n+  }\n+\n+  @Override\n+  public Node processNewExpression(NewExpression newNode) {\n+    return factory.processNewExpression(newNode);\n+  }\n+\n+  @Override\n+  public Node processNumber(NumberLiteral numberNode) {\n+    return factory.processNumber(numberNode);\n+  }\n+\n+  @Override\n+  public Node processObjectLiteral(ObjectLiteral objNode) {\n+    return factory.processObjectLiteral(objNode);\n+  }\n+\n+  @Override\n+  public Node processParenthesizedExpression(\n+      ParenthesizedExpression exprNode) {\n+    return factory.processParenthesizedExpression(exprNode);\n+  }\n+\n+  @Override\n+  public Node processPropertyGet(PropertyGet getNode) {\n+    return factory.processPropertyGet(getNode);\n+  }\n+\n+  @Override\n+  public Node processRegExpLiteral(RegExpLiteral literalNode) {\n+    return factory.processRegExpLiteral(literalNode);\n+  }\n+\n+  @Override\n+  public Node processReturnStatement(ReturnStatement returnNode) {\n+    return factory.processReturnStatement(returnNode);\n+  }\n+\n+  @Override\n+  public Node processString(StringLiteral stringNode) {\n+    return factory.processString(stringNode);\n+  }\n+\n+  @Override\n+  public Node processSwitchCase(SwitchCase caseNode) {\n+    return factory.processSwitchCase(caseNode);\n+  }\n+\n+  @Override\n+  public Node processSwitchStatement(SwitchStatement switchNode) {\n+    return factory.processSwitch(switchNode);\n+  }\n+\n+  @Override\n+  public Node processThrowStatement(ThrowStatement throwNode) {\n+    return factory.processThrow(throwNode);\n+  }\n+\n+  @Override\n+  public Node processTryCatchFinally(TryCatchFinally tryNode) {\n+    return factory.processTry(tryNode);\n+  }\n+\n+  @Override\n+  public Node processUnaryExpression(UnaryExpression unaryNode) {\n+    return factory.processUnary(unaryNode);\n+  }\n+\n+  @Override\n+  public Node processVariableDeclaration(VariableDeclaration decl) {\n+    return factory.processVariables(decl);\n+  }\n+\n+  @Override\n+  public Node processWhileLoop(WhileLoop loopNode) {\n+    return factory.processWhileLoop(loopNode);\n+  }\n+\n+  @Override\n+  public Node processWithStatement(WithStatement withNode) {\n+    return factory.processWith(withNode);\n+  }\n+\n+  // New functions to implement the TypeSafeDispatcher interface.\n+\n+  @Override\n+  public Node processBreakStatement(BreakStatement breakStatement) {\n+    return factory.processBreakStatement(breakStatement);\n+  }\n+\n+  @Override\n+  public Node processCatchClause(CatchClause catchClause) {\n+    return factory.processCatch(catchClause);\n+  }\n+\n+  @Override\n+  public Node processContinueStatement(ContinueStatement continueStatement) {\n+    return factory.processContinueStatement(continueStatement);\n+  }\n+\n+  @Override\n+  public Node processExpressionStatement(ExpressionStatement exprStatement) {\n+    return factory.processExpressionStatement(exprStatement);\n+  }\n+\n+}\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: interface expected here",
    "test_result": "ERROR"
}