{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // rescale both vectors to ensure their norm are the same order of magnitude\n    double v1Norm = v1.getNorm();\n    double v2Norm = v2.getNorm();\n    double scale = Math.sqrt(v1Norm * v2Norm);\n    double factor = scale / v2Norm;\n    Vector3D v3 = new Vector3D(factor * v2.getX(),\n                               factor * v2.getY(),\n                               factor * v2.getZ());\n\n    // compute cross product from v3 and v1 instead of v1 and v2\n    double x = v3.getY() * v1.getZ() - v3.getZ() * v1.getY();\n    double y = v3.getZ() * v1.getX() - v3.getX() * v1.getZ();\n    double z = v3.getX() * v1.getY() - v3.getY() * v1.getX();\n    double norm = Math.sqrt(x * x + y * y + z * z);\n\n    if (norm == 0.0) {\n        return new Vector3D(Double.NaN, Double.NaN, Double.NaN);\n    }\n\n    x /= norm;\n    y /= norm;\n    z /= norm;\n\n    // ensure the result lies in the same half-space as v2\n    double test = v1.dotProduct(v2.crossProduct(new Vector3D(x, y, z)));\n    if (test < 0.0) {\n        x = -x;\n        y = -y;\n        z = -z;\n    }\n\n    return new Vector3D(x, y, z);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..84c0d35f2 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,40 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    // rescale both vectors to ensure their norm are the same order of magnitude\n+    double v1Norm = v1.getNorm();\n+    double v2Norm = v2.getNorm();\n+    double scale = Math.sqrt(v1Norm * v2Norm);\n+    double factor = scale / v2Norm;\n+    Vector3D v3 = new Vector3D(factor * v2.getX(),\n+                               factor * v2.getY(),\n+                               factor * v2.getZ());\n+\n+    // compute cross product from v3 and v1 instead of v1 and v2\n+    double x = v3.getY() * v1.getZ() - v3.getZ() * v1.getY();\n+    double y = v3.getZ() * v1.getX() - v3.getX() * v1.getZ();\n+    double z = v3.getX() * v1.getY() - v3.getY() * v1.getX();\n+    double norm = Math.sqrt(x * x + y * y + z * z);\n+\n+    if (norm == 0.0) {\n+        return new Vector3D(Double.NaN, Double.NaN, Double.NaN);\n+    }\n \n+    x /= norm;\n+    y /= norm;\n+    z /= norm;\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    // ensure the result lies in the same half-space as v2\n+    double test = v1.dotProduct(v2.crossProduct(new Vector3D(x, y, z)));\n+    if (test < 0.0) {\n+        x = -x;\n+        y = -y;\n+        z = -z;\n+    }\n \n-  }\n+    return new Vector3D(x, y, z);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: method crossProduct in class Vector3D cannot be applied to given types;",
    "test_result": "ERROR"
}