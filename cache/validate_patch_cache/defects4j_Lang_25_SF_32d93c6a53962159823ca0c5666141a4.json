{
    "patch": "public static String decode(String input) {\n    if (input == null) {\n        return null;\n    }\n    try {\n        String working = input;\n        int index;\n        index = working.indexOf(\"\\\\\");\n        while (index > -1) {\n            if (index == working.length() - 1) {\n                break;\n            }\n            if (working.charAt(index + 1) == 'u') {\n                String unicode = working.substring(index + 2, index + 6);\n                try {\n                    char letter = (char) Integer.parseInt(unicode, 16);\n                    working = working.substring(0, index) + letter + working.substring(index + 6);\n                } catch (NumberFormatException e) {\n                    e.printStackTrace();\n                }\n            } else {\n                String character = working.substring(index + 1, index + 2);\n                working = working.substring(0, index) + character + working.substring(index + 2);\n            }\n            index = working.indexOf(\"\\\\\", index + 1);\n        }\n        return working;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return input;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..98c6aa9f 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,38 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String decode(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    try {\n+        String working = input;\n+        int index;\n+        index = working.indexOf(\"\\\\\");\n+        while (index > -1) {\n+            if (index == working.length() - 1) {\n+                break;\n+            }\n+            if (working.charAt(index + 1) == 'u') {\n+                String unicode = working.substring(index + 2, index + 6);\n+                try {\n+                    char letter = (char) Integer.parseInt(unicode, 16);\n+                    working = working.substring(0, index) + letter + working.substring(index + 6);\n+                } catch (NumberFormatException e) {\n+                    e.printStackTrace();\n+                }\n+            } else {\n+                String character = working.substring(index + 1, index + 2);\n+                working = working.substring(0, index) + character + working.substring(index + 2);\n+            }\n+            index = working.indexOf(\"\\\\\", index + 1);\n+        }\n+        return working;\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+    }\n+    return input;\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}