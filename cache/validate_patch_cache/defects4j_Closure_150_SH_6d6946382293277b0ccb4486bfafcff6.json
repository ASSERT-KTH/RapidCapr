{
    "patch": "  attachLiteralTypes(n);\n\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      Node functionName = n.getFirstChild();\n      NodeType parentType = (parent != null ? parent.getType() : null);\n\n      if (parentType == Token.EXPR_RESULT) {\n        if (functionName != null && functionName.getType() == Token.NAME) {\n          defineDeclaredFunction(functionName, n);\n        } else {\n          defineDeclaredFunction(n, parent);\n        }\n\n        attachLiteralTypes(functionName != null ? functionName : n);\n        handleFunctionInputs(parent);\n      }\n\n      if (parentType == Token.LP && parent.getParent() == null) {\n        handleFunctionInputs(parent);\n      }\n\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      if (n.hasChildren() && n.getFirstChild().getType() == Token.NAME) {\n        defineVar(n.getFirstChild(), n);\n      }\n      break;\n    case Token.LP:\n      if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n        handleFunctionInputs(parent);\n      }\n      break;\n    default:\n      break;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..bf49dba1 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,45 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n+  attachLiteralTypes(n);\n+\n+  switch (n.getType()) {\n+    case Token.FUNCTION:\n+      Node functionName = n.getFirstChild();\n+      NodeType parentType = (parent != null ? parent.getType() : null);\n+\n+      if (parentType == Token.EXPR_RESULT) {\n+        if (functionName != null && functionName.getType() == Token.NAME) {\n+          defineDeclaredFunction(functionName, n);\n+        } else {\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+        }\n+\n+        attachLiteralTypes(functionName != null ? functionName : n);\n+        handleFunctionInputs(parent);\n       }\n+\n+      if (parentType == Token.LP && parent.getParent() == null) {\n+        handleFunctionInputs(parent);\n+      }\n+\n+      break;\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.VAR:\n+      if (n.hasChildren() && n.getFirstChild().getType() == Token.NAME) {\n+        defineVar(n.getFirstChild(), n);\n+      }\n+      break;\n+    case Token.LP:\n+      if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n+        handleFunctionInputs(parent);\n+      }\n+      break;\n+    default:\n+      break;\n+  }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}