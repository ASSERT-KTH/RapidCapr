{
    "patch": "public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n    if (expected.length != observed.length) {\n        throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n    }\n\n    double sum = 0;\n    int zeros = 0;\n    for (int i = 0; i < observed.length; i++) {\n        if (expected[i] < 0 || observed[i] < 0) {\n            throw new IllegalArgumentException(\"observed counts must be non-negative and expected counts must be non-negative\");\n        }\n\n        if (expected[i] == 0 && observed[i] > 0) {\n            throw new IllegalArgumentException(\"division by zero\");\n        } else if (expected[i] == 0 && observed[i] == 0) {\n            zeros++;\n            continue;\n        }\n\n        double diff = observed[i] - expected[i];\n        double ratio = diff / Math.sqrt(expected[i]);\n        sum += ratio * ratio;\n    }\n\n    if (zeros == observed.length) {\n        throw new IllegalArgumentException(\"all observed counts are zero\");\n    }\n    \n    return sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..fd0fbc897 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,25 +61,37 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n-        }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n+public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n+    if (expected.length != observed.length) {\n+        throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n+    }\n+\n+    double sum = 0;\n+    int zeros = 0;\n+    for (int i = 0; i < observed.length; i++) {\n+        if (expected[i] < 0 || observed[i] < 0) {\n+            throw new IllegalArgumentException(\"observed counts must be non-negative and expected counts must be non-negative\");\n         }\n-        double sumSq = 0.0d;\n-        double dev = 0.0d;\n-        for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n+\n+        if (expected[i] == 0 && observed[i] > 0) {\n+            throw new IllegalArgumentException(\"division by zero\");\n+        } else if (expected[i] == 0 && observed[i] == 0) {\n+            zeros++;\n+            continue;\n         }\n-        return sumSq;\n+\n+        double diff = observed[i] - expected[i];\n+        double ratio = diff / Math.sqrt(expected[i]);\n+        sum += ratio * ratio;\n     }\n \n+    if (zeros == observed.length) {\n+        throw new IllegalArgumentException(\"all observed counts are zero\");\n+    }\n+    \n+    return sum;\n+}\n+\n     /**\n      * {@inheritDoc}\n      * <p><strong>Note: </strong>This implementation rescales the ",
    "result_reason": "junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>",
    "test_result": "FAIL"
}