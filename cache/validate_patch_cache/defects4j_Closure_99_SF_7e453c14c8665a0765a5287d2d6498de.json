{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse function nodes that are not in an assignable expression, unless they\n        // are an immediately-invoked function expression (IIFE). For instance, don't traverse\n        // standalone functions, objectliteral methods, arrow functions, or class methods (except\n        // static computed property names).\n        if (!NodeUtil.isExpressionNode(parent)) {\n            if (NodeUtil.isInvocationTarget(n)) {\n                return true; // an iife\n            }\n            return false;\n        }\n\n        // Don't traverse functions that are constructors, or have the @this or @override\n        // annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null &&\n                (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Only traverse function nodes that could have a meaningful \"this\" object associated\n        // with them, such as function expressions, function declarations, and object literal\n        // methods.\n        int pType = parent.getType();\n        if (!(pType == Token.ASSIGN ||\n                pType == Token.BLOCK ||\n                pType == Token.CATCH ||\n                pType == Token.CLASS ||\n                pType == Token.FUNCTION ||\n                pType == Token.NAME ||\n                pType == Token.OBJECTLIT ||\n                pType == Token.SCRIPT)) {\n            return false;\n        }\n\n        // In order for a function node to have a meaningful \"this\" object associated with it,\n        // it must be the right-hand side of an assignment (including a destructuring assignment),\n        // or it must have a name that follows a similar pattern to an assignment.\n        Node grandparent = parent.getParent();\n        if (grandparent != null) {\n            if ((parent.isAssignment() || parent.isDestructuringAssignment()) &&\n                    parent.getLastChild() == n) {\n                // this case is allowed\n            } else if (pType == Token.NAME) {\n                // Note: \"var x = function() {};\" and \"var x = (function() {})();\" look nearly\n                // identical in the AST (both have NAME nodes named \"x\" with an immediate FUNCTION\n                // node), but the former should be traversed while the latter shouldn't.\n                Node[] siblings = NodeUtil.getSiblingNodes(parent);\n                for (int i = 0; i < siblings.length; i++) {\n                    Node sibling = siblings[i];\n                    if (sibling == parent) {\n                        continue;\n                    }\n                    if (sibling.matchesQualifiedName(n.getString()) &&\n                            !NodeUtil.isExpressionNode(sibling.getParent())) {\n                        return true;\n                    }\n                }\n                return false;\n            } else {\n                return false;\n            }\n        }\n    } else if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n            // Always traverse the left side of the assignment. To handle\n            // nested assignments properly (e.g., (a = this).property = c;),\n            // assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n            return true;\n        } else {\n            // Only traverse the right side if it's not an assignment to a prototype\n            // property or subproperty.\n            if (NodeUtil.isPrototypeProperty(lhs)) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..6b54309d 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,93 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        // Don't traverse function nodes that are not in an assignable expression, unless they\n+        // are an immediately-invoked function expression (IIFE). For instance, don't traverse\n+        // standalone functions, objectliteral methods, arrow functions, or class methods (except\n+        // static computed property names).\n+        if (!NodeUtil.isExpressionNode(parent)) {\n+            if (NodeUtil.isInvocationTarget(n)) {\n+                return true; // an iife\n+            }\n+            return false;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n+\n+        // Don't traverse functions that are constructors, or have the @this or @override\n+        // annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null &&\n+                (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n             return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+        }\n+\n+        // Only traverse function nodes that could have a meaningful \"this\" object associated\n+        // with them, such as function expressions, function declarations, and object literal\n+        // methods.\n+        int pType = parent.getType();\n+        if (!(pType == Token.ASSIGN ||\n+                pType == Token.BLOCK ||\n+                pType == Token.CATCH ||\n+                pType == Token.CLASS ||\n+                pType == Token.FUNCTION ||\n+                pType == Token.NAME ||\n+                pType == Token.OBJECTLIT ||\n+                pType == Token.SCRIPT)) {\n             return false;\n-          }\n-      }\n+        }\n+\n+        // In order for a function node to have a meaningful \"this\" object associated with it,\n+        // it must be the right-hand side of an assignment (including a destructuring assignment),\n+        // or it must have a name that follows a similar pattern to an assignment.\n+        Node grandparent = parent.getParent();\n+        if (grandparent != null) {\n+            if ((parent.isAssignment() || parent.isDestructuringAssignment()) &&\n+                    parent.getLastChild() == n) {\n+                // this case is allowed\n+            } else if (pType == Token.NAME) {\n+                // Note: \"var x = function() {};\" and \"var x = (function() {})();\" look nearly\n+                // identical in the AST (both have NAME nodes named \"x\" with an immediate FUNCTION\n+                // node), but the former should be traversed while the latter shouldn't.\n+                Node[] siblings = NodeUtil.getSiblingNodes(parent);\n+                for (int i = 0; i < siblings.length; i++) {\n+                    Node sibling = siblings[i];\n+                    if (sibling == parent) {\n+                        continue;\n+                    }\n+                    if (sibling.matchesQualifiedName(n.getString()) &&\n+                            !NodeUtil.isExpressionNode(sibling.getParent())) {\n+                        return true;\n+                    }\n+                }\n+                return false;\n+            } else {\n+                return false;\n+            }\n+        }\n+    } else if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+            // Always traverse the left side of the assignment. To handle\n+            // nested assignments properly (e.g., (a = this).property = c;),\n+            // assignLhsChild should not be overridden.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+            return true;\n+        } else {\n+            // Only traverse the right side if it's not an assignment to a prototype\n+            // property or subproperty.\n+            if (NodeUtil.isPrototypeProperty(lhs)) {\n+                return false;\n+            }\n+        }\n     }\n \n     return true;\n-  }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}