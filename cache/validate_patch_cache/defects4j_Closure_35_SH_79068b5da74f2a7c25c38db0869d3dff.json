{
    "patch": "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType == null || !constraintObj.isRecordType()) {\n        return;\n      }\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.hasProperty(prop) || (!objType.isPropertyTypeDeclared(prop) && !objType.isPropertyTypeInferred(prop))) {\n          JSType typeToInfer = propType;\n          if (objType.hasProperty(prop)) {\n            JSType currentType = objType.getPropertyType(prop);\n            if (!propType.isSubtype(currentType)) {\n              typeToInfer = currentType.getLeastSupertype(propType);\n            }\n          } else {\n            // Use @type {void} as the default least supertype for undefined properties\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..f1e36fd1 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,21 +1118,25 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+      if (objType == null || !constraintObj.isRecordType()) {\n+        return;\n+      }\n+      for (String prop : constraintObj.getOwnPropertyNames()) {\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        if (!objType.hasProperty(prop) || (!objType.isPropertyTypeDeclared(prop) && !objType.isPropertyTypeInferred(prop))) {\n+          JSType typeToInfer = propType;\n+          if (objType.hasProperty(prop)) {\n+            JSType currentType = objType.getPropertyType(prop);\n+            if (!propType.isSubtype(currentType)) {\n+              typeToInfer = currentType.getLeastSupertype(propType);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          } else {\n+            // Use @type {void} as the default least supertype for undefined properties\n+            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n           }\n+          objType.defineInferredProperty(prop, typeToInfer, null);\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<-2>",
    "test_result": "FAIL"
}