{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    long instant = 0L;\n    boolean monthChanged = false; // flag to track month change\n    int daysInMonth = -1; // days in current month\n\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        DateTimeField field = partial.getFieldType(i).getField(iChronology);\n        int value = values[i];\n\n        if (i == fieldIndex) {\n            value = field.addWrapField(value, valueToAdd);\n            monthChanged = (field.getType() == DateTimeFieldType.monthOfYear()); // update monthChanged flag\n        }\n\n        instant = field.set(instant, value);\n\n        if (!monthChanged && field.getType() == DateTimeFieldType.monthOfYear()) {\n            daysInMonth = field.getMaximumValue(instant);\n        }\n\n        if (monthChanged && field.getType() == DateTimeFieldType.dayOfMonth()) {\n            // handle leap year edge case when adding a negative number of months\n            int maxDayOfMonth = field.getMaximumValue(instant);\n            if (value > maxDayOfMonth) { // if day of month is out of range, set to max day of month\n                instant = field.set(instant, maxDayOfMonth);\n            }\n        }\n    }\n\n    if (monthChanged) {\n        // handle leap year edge case when adding a negative number of months\n        int dayOfMonth = iChronology.dayOfMonth().get(instant);\n        dayOfMonth = Math.min(dayOfMonth, daysInMonth);\n        instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n    }\n\n    return iChronology.get(partial, instant);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..56fb5d34 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,49 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    long instant = 0L;\n+    boolean monthChanged = false; // flag to track month change\n+    int daysInMonth = -1; // days in current month\n+\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        DateTimeField field = partial.getFieldType(i).getField(iChronology);\n+        int value = values[i];\n+\n+        if (i == fieldIndex) {\n+            value = field.addWrapField(value, valueToAdd);\n+            monthChanged = (field.getType() == DateTimeFieldType.monthOfYear()); // update monthChanged flag\n+        }\n+\n+        instant = field.set(instant, value);\n+\n+        if (!monthChanged && field.getType() == DateTimeFieldType.monthOfYear()) {\n+            daysInMonth = field.getMaximumValue(instant);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+\n+        if (monthChanged && field.getType() == DateTimeFieldType.dayOfMonth()) {\n+            // handle leap year edge case when adding a negative number of months\n+            int maxDayOfMonth = field.getMaximumValue(instant);\n+            if (value > maxDayOfMonth) { // if day of month is out of range, set to max day of month\n+                instant = field.set(instant, maxDayOfMonth);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n     }\n \n+    if (monthChanged) {\n+        // handle leap year edge case when adding a negative number of months\n+        int dayOfMonth = iChronology.dayOfMonth().get(instant);\n+        dayOfMonth = Math.min(dayOfMonth, daysInMonth);\n+        instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n+    }\n+\n+    return iChronology.get(partial, instant);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}