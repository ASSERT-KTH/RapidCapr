{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length;\n    int minSearchChar = 0;\n    int maxSearchChar = 0;\n    if (searchLen == 1) {\n        minSearchChar = searchChars[0];\n        maxSearchChar = searchChars[0];\n    } else {\n        minSearchChar = searchChars[0] < searchChars[1] ? searchChars[0] : searchChars[1];\n        maxSearchChar = searchChars[0] > searchChars[1] ? searchChars[0] : searchChars[1];\n        for (int i = 2; i < searchLen; i++) {\n            if (searchChars[i] < minSearchChar) {\n                minSearchChar = searchChars[i];\n            } else if (searchChars[i] > maxSearchChar) {\n                maxSearchChar = searchChars[i];\n            }\n        }\n    }\n    if (Character.isSupplementaryCodePoint(minSearchChar)\n            || Character.isSupplementaryCodePoint(maxSearchChar)) {\n        // Unless both the search array and the input string contain only BMP\n        // characters, we must first convert them to code points before search.\n        return containsAny(str.codePoints().toArray(), searchChars);\n    } else {\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            if (ch >= minSearchChar && ch <= maxSearchChar) {\n                for (char searchChar : searchChars) {\n                    if (searchChar == ch) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n\npublic static boolean containsAny(int[] codePoints, char[] searchChars) {\n    if (ArrayUtils.isEmpty(codePoints) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int searchLen = searchChars.length;\n    BitArray bitArray = new BitArray(Character.MAX_VALUE);\n    for (char searchChar : searchChars) {\n        bitArray.set(searchChar);\n    }\n    for (int codePoint : codePoints) {\n        if (bitArray.get(codePoint)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..16a24819 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,64 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int strLen = str.length();\n+    int searchLen = searchChars.length;\n+    int minSearchChar = 0;\n+    int maxSearchChar = 0;\n+    if (searchLen == 1) {\n+        minSearchChar = searchChars[0];\n+        maxSearchChar = searchChars[0];\n+    } else {\n+        minSearchChar = searchChars[0] < searchChars[1] ? searchChars[0] : searchChars[1];\n+        maxSearchChar = searchChars[0] > searchChars[1] ? searchChars[0] : searchChars[1];\n+        for (int i = 2; i < searchLen; i++) {\n+            if (searchChars[i] < minSearchChar) {\n+                minSearchChar = searchChars[i];\n+            } else if (searchChars[i] > maxSearchChar) {\n+                maxSearchChar = searchChars[i];\n+            }\n+        }\n+    }\n+    if (Character.isSupplementaryCodePoint(minSearchChar)\n+            || Character.isSupplementaryCodePoint(maxSearchChar)) {\n+        // Unless both the search array and the input string contain only BMP\n+        // characters, we must first convert them to code points before search.\n+        return containsAny(str.codePoints().toArray(), searchChars);\n+    } else {\n+        for (int i = 0; i < strLen; i++) {\n+            char ch = str.charAt(i);\n+            if (ch >= minSearchChar && ch <= maxSearchChar) {\n+                for (char searchChar : searchChars) {\n+                    if (searchChar == ch) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+public static boolean containsAny(int[] codePoints, char[] searchChars) {\n+    if (ArrayUtils.isEmpty(codePoints) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int searchLen = searchChars.length;\n+    BitArray bitArray = new BitArray(Character.MAX_VALUE);\n+    for (char searchChar : searchChars) {\n+        bitArray.set(searchChar);\n+    }\n+    for (int codePoint : codePoints) {\n+        if (bitArray.get(codePoint)) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}