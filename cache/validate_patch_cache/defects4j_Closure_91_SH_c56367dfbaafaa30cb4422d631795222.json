{
    "patch": "      if (NodeUtil.isObjectLitKey(parent)) {\n        Node objectLit = parent.getParent();\n        if (objectLit != null &&\n            NodeUtil.isObjectLit(objectLit) &&\n            objectLit.getParent() != null &&\n            NodeUtil.isAssign(objectLit.getParent()) &&\n            NodeUtil.getRValueOfLValue(objectLit.getParent()) == objectLit) {\n          propertyLendingMode = PropertyLendingMode.LENDING_GET;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..fc65c4f9 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,15 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isObjectLitKey(parent)) {\n+        Node objectLit = parent.getParent();\n+        if (objectLit != null &&\n+            NodeUtil.isObjectLit(objectLit) &&\n+            objectLit.getParent() != null &&\n+            NodeUtil.isAssign(objectLit.getParent()) &&\n+            NodeUtil.getRValueOfLValue(objectLit.getParent()) == objectLit) {\n+          propertyLendingMode = PropertyLendingMode.LENDING_GET;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}