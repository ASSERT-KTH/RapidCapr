{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // reflection\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) < 0) {\n                simplex = reflectedSimplex;\n            } else {\n                simplex = contract(original, comparator, best);\n            }\n            return;\n        }\n        RealPointValuePair contracted[] = contract(original, comparator, best);\n        // check convergence\n        if (comparator.compare(contracted[0], best) >= 0) {\n            if (expand(original, comparator, best)) {\n                return;\n            }\n            simplex = contract(original, comparator, best);\n        } else {\n            simplex = contracted;\n        }\n    }\n}\n\nprivate RealPointValuePair[] contract(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator, RealPointValuePair best)\n        throws FunctionEvaluationException {\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n    for (int i = 1; i < original.length; i++) {\n        final double[] contractedPoint = new double[original[i].getPoint().length];\n        for (int j = 0; j < contractedPoint.length; j++) {\n            contractedPoint[j] = rho * original[i].getPoint()[j] + (1 - rho) * best.getPoint()[j];\n        }\n        contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n    }\n    contractedSimplex[0] = best;\n    return evaluateNewSimplex(contractedSimplex, 1.0, comparator);\n}\n\nprivate boolean expand(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator, RealPointValuePair best)\n        throws FunctionEvaluationException {\n    final RealPointValuePair[] expandedSimplex = new RealPointValuePair[original.length];\n    final double[] p1 = new double[best.getPoint().length];\n    final double[] reflected = simplex[0].getPoint();\n    boolean contractionOK = true;\n    for (int i = 0; i < p1.length; i++) {\n        p1[i] = best.getPoint()[i] + psi * (reflected[i] - best.getPoint()[i]);\n        if (Double.isNaN(p1[i])) {\n            p1[i] = best.getPoint()[i];\n        } else if (Math.abs(p1[i]) > big) {\n            contractionOK = false;\n        }\n    }\n    if (contractionOK) {\n        expandedSimplex[0] = new RealPointValuePair(p1, Double.NaN);\n        for (int i = 1; i < expandedSimplex.length; i++) {\n            final double[] xp = simplex[i].getPoint();\n            final double[] contracted = new double[p1.length];\n            for (int j = 0; j < contracted.length; j++) {\n                contracted[j] = rho * xp[j] + (1 - rho) * p1[j];\n            }\n            expandedSimplex[i] = new RealPointValuePair(contracted, Double.NaN);\n        }\n        final RealPointValuePair[] evaluatedSimplex = evaluateNewSimplex(expandedSimplex, 1.0, comparator);\n        if (comparator.compare(evaluatedSimplex[0], simplex[0]) < 0) {\n            simplex = evaluatedSimplex;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..8198e9890 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,87 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+    while (true) {\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // reflection\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) < 0) {\n+                simplex = reflectedSimplex;\n+            } else {\n+                simplex = contract(original, comparator, best);\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n+            return;\n+        }\n+        RealPointValuePair contracted[] = contract(original, comparator, best);\n+        // check convergence\n+        if (comparator.compare(contracted[0], best) >= 0) {\n+            if (expand(original, comparator, best)) {\n                 return;\n             }\n+            simplex = contract(original, comparator, best);\n+        } else {\n+            simplex = contracted;\n+        }\n+    }\n+}\n \n+private RealPointValuePair[] contract(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator, RealPointValuePair best)\n+        throws FunctionEvaluationException {\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+    for (int i = 1; i < original.length; i++) {\n+        final double[] contractedPoint = new double[original[i].getPoint().length];\n+        for (int j = 0; j < contractedPoint.length; j++) {\n+            contractedPoint[j] = rho * original[i].getPoint()[j] + (1 - rho) * best.getPoint()[j];\n         }\n+        contractedSimplex[i] = new RealPointValuePair(contractedPoint, Double.NaN);\n+    }\n+    contractedSimplex[0] = best;\n+    return evaluateNewSimplex(contractedSimplex, 1.0, comparator);\n+}\n \n+private boolean expand(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator, RealPointValuePair best)\n+        throws FunctionEvaluationException {\n+    final RealPointValuePair[] expandedSimplex = new RealPointValuePair[original.length];\n+    final double[] p1 = new double[best.getPoint().length];\n+    final double[] reflected = simplex[0].getPoint();\n+    boolean contractionOK = true;\n+    for (int i = 0; i < p1.length; i++) {\n+        p1[i] = best.getPoint()[i] + psi * (reflected[i] - best.getPoint()[i]);\n+        if (Double.isNaN(p1[i])) {\n+            p1[i] = best.getPoint()[i];\n+        } else if (Math.abs(p1[i]) > big) {\n+            contractionOK = false;\n+        }\n     }\n+    if (contractionOK) {\n+        expandedSimplex[0] = new RealPointValuePair(p1, Double.NaN);\n+        for (int i = 1; i < expandedSimplex.length; i++) {\n+            final double[] xp = simplex[i].getPoint();\n+            final double[] contracted = new double[p1.length];\n+            for (int j = 0; j < contracted.length; j++) {\n+                contracted[j] = rho * xp[j] + (1 - rho) * p1[j];\n+            }\n+            expandedSimplex[i] = new RealPointValuePair(contracted, Double.NaN);\n+        }\n+        final RealPointValuePair[] evaluatedSimplex = evaluateNewSimplex(expandedSimplex, 1.0, comparator);\n+        if (comparator.compare(evaluatedSimplex[0], simplex[0]) < 0) {\n+            simplex = evaluatedSimplex;\n+        } else {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}