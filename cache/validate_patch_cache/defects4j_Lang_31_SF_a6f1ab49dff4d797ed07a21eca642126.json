{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int strSize = str.length();\n    int searchSize = searchChars.length;\n    int isize = -1;\n\n    if (searchSize == 1) {\n        // Optimise 1 character search\n        char searchChar = searchChars[0];\n        for (int i = 0; i < strSize; i++) {\n            if (str.charAt(i) == searchChar) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    if (searchSize <= CharUtils.SMALL_CHAR_BUFFER_SIZE) {\n        // Use non regex search\n        for (int i = 0; i < searchSize; i++) {\n            if (contains(str, searchChars[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // Otherwise use regex\n    String[] searchStrings = new String[searchSize];\n    for (int i = 0; i < searchSize; i++) {\n        searchStrings[i] = String.valueOf(searchChars[i]);\n    }\n    String pattern = createPattern(searchStrings);\n\n    return Pattern.compile(pattern).matcher(str).find();\n}\n\nprivate static String createPattern(String[] searchStrings) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[\");\n    for (String searchStr : searchStrings) {\n        if (StringUtils.isNotEmpty(searchStr)) {\n            // Quote regular expression characters\n            sb.append(Pattern.quote(searchStr));\n        }\n    }\n    sb.append(\"]\");\n    return sb.toString();\n}\n\nprivate static boolean contains(String str, char searchChar) {\n    return str.indexOf(searchChar) >= 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..10d68ec2 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,61 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int strSize = str.length();\n+    int searchSize = searchChars.length;\n+    int isize = -1;\n+\n+    if (searchSize == 1) {\n+        // Optimise 1 character search\n+        char searchChar = searchChars[0];\n+        for (int i = 0; i < strSize; i++) {\n+            if (str.charAt(i) == searchChar) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    if (searchSize <= CharUtils.SMALL_CHAR_BUFFER_SIZE) {\n+        // Use non regex search\n+        for (int i = 0; i < searchSize; i++) {\n+            if (contains(str, searchChars[i])) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    // Otherwise use regex\n+    String[] searchStrings = new String[searchSize];\n+    for (int i = 0; i < searchSize; i++) {\n+        searchStrings[i] = String.valueOf(searchChars[i]);\n+    }\n+    String pattern = createPattern(searchStrings);\n+\n+    return Pattern.compile(pattern).matcher(str).find();\n+}\n+\n+private static String createPattern(String[] searchStrings) {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"[\");\n+    for (String searchStr : searchStrings) {\n+        if (StringUtils.isNotEmpty(searchStr)) {\n+            // Quote regular expression characters\n+            sb.append(Pattern.quote(searchStr));\n+        }\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();\n+}\n+\n+private static boolean contains(String str, char searchChar) {\n+    return str.indexOf(searchChar) >= 0;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}