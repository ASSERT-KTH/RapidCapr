{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    while (true) {\n        incrementIterationsCounter();\n        final RealPointValuePair[] previous = simplex;\n        final RealPointValuePair best = previous[0];\n        final RealPointValuePair secondWorst = previous[n];\n        final RealPointValuePair worst = previous[n + 1];\n        final RealPointValuePair reflected = evaluateNewSimplex(previous, ReflectionCoefficient.REFLECTION_COEFFICIENT, comparator);\n        final RealPointValuePair replacement;\n        if (comparator.compare(best, reflected) <= 0 && comparator.compare(reflected, secondWorst) < 0) {\n            replacement = reflected;\n        } else if (comparator.compare(reflected, best) < 0) {\n            final RealPointValuePair expanded = evaluateNewSimplex(previous, ReflectionCoefficient.EXPANSION_COEFFICIENT, comparator);\n            replacement = comparator.compare(expanded, reflected) < 0 ? expanded : reflected;\n        } else {\n            final RealPointValuePair contracted = evaluateNewSimplex(previous, ReflectionCoefficient.CONTRACTION_COEFFICIENT, comparator);\n            if (comparator.compare(contracted, worst) < 0) {\n                replacement = contracted;\n            } else {\n                final RealPointValuePair[] shrunkSimplex = shrink(previous, comparator, best);\n                for (int i = 0; i < shrunkSimplex.length; i++) {\n                    simplex[i] = shrunkSimplex[i];\n                }\n                continue;\n            }\n        }\n        if (comparator.compare(replacement, worst) < 0) {\n            simplex[n + 1] = replacement;\n        } else {\n            final RealPointValuePair[] shrunkSimplex = shrink(previous, comparator, best);\n            for (int i = 0; i < shrunkSimplex.length; i++) {\n                simplex[i] = shrunkSimplex[i];\n            }\n        }\n        final double y1 = simplex[0].getValue();\n        final double y2 = simplex[n].getValue();\n        if (getConvergenceChecker() != null && getIterations() > 1) {\n            final double delta = Math.abs(y2 - y1);\n            final double size = FastMath.max(FastMath.abs(y1), FastMath.abs(y2));\n            if (delta <= getRelativeThreshold() * size + getAbsoluteThreshold()) {\n                return;\n            }\n            getConvergenceChecker().converged(getIterations(), previous, simplex);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..3d921e77c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,53 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+    while (true) {\n+        incrementIterationsCounter();\n+        final RealPointValuePair[] previous = simplex;\n+        final RealPointValuePair best = previous[0];\n+        final RealPointValuePair secondWorst = previous[n];\n+        final RealPointValuePair worst = previous[n + 1];\n+        final RealPointValuePair reflected = evaluateNewSimplex(previous, ReflectionCoefficient.REFLECTION_COEFFICIENT, comparator);\n+        final RealPointValuePair replacement;\n+        if (comparator.compare(best, reflected) <= 0 && comparator.compare(reflected, secondWorst) < 0) {\n+            replacement = reflected;\n+        } else if (comparator.compare(reflected, best) < 0) {\n+            final RealPointValuePair expanded = evaluateNewSimplex(previous, ReflectionCoefficient.EXPANSION_COEFFICIENT, comparator);\n+            replacement = comparator.compare(expanded, reflected) < 0 ? expanded : reflected;\n+        } else {\n+            final RealPointValuePair contracted = evaluateNewSimplex(previous, ReflectionCoefficient.CONTRACTION_COEFFICIENT, comparator);\n+            if (comparator.compare(contracted, worst) < 0) {\n+                replacement = contracted;\n+            } else {\n+                final RealPointValuePair[] shrunkSimplex = shrink(previous, comparator, best);\n+                for (int i = 0; i < shrunkSimplex.length; i++) {\n+                    simplex[i] = shrunkSimplex[i];\n                 }\n-\n-                return;\n-\n+                continue;\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n+        }\n+        if (comparator.compare(replacement, worst) < 0) {\n+            simplex[n + 1] = replacement;\n+        } else {\n+            final RealPointValuePair[] shrunkSimplex = shrink(previous, comparator, best);\n+            for (int i = 0; i < shrunkSimplex.length; i++) {\n+                simplex[i] = shrunkSimplex[i];\n+            }\n+        }\n+        final double y1 = simplex[0].getValue();\n+        final double y2 = simplex[n].getValue();\n+        if (getConvergenceChecker() != null && getIterations() > 1) {\n+            final double delta = Math.abs(y2 - y1);\n+            final double size = FastMath.max(FastMath.abs(y1), FastMath.abs(y2));\n+            if (delta <= getRelativeThreshold() * size + getAbsoluteThreshold()) {\n                 return;\n             }\n-\n+            getConvergenceChecker().converged(getIterations(), previous, simplex);\n         }\n-\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}