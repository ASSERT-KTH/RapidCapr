{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Gather all parameters and their positions in the list.\n    List<String> allParameters = new ArrayList<>();\n    Map<String, Integer> positions = new HashMap<>();\n    Node child = argList.getFirstChild();\n    int i = 0;\n    while (child != null) {\n      String paramName = child.getString();\n      positions.put(paramName, i++);\n      allParameters.add(paramName);\n      child = child.getNext();\n    }\n\n    if (!modifyCallers) { // editing function params\n      boolean removedParam = true;\n      while (removedParam && !allParameters.isEmpty() && referenced.size() < allParameters.size()) {\n        removedParam = false;\n        for (int j = allParameters.size() - 1; j >= 0; j--) {\n          String paramName = allParameters.get(j);\n          Var var = fnScope.getVar(paramName);\n          if (!referenced.contains(var)) {\n            int position = positions.get(paramName);\n            argList.removeChildAt(position);\n            positions.remove(paramName);\n            allParameters.remove(j);\n            compiler.reportCodeChange();\n            removedParam = true;\n          }\n        }\n      }\n    } else { // editing function call args\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f8257c1e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,50 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Gather all parameters and their positions in the list.\n+    List<String> allParameters = new ArrayList<>();\n+    Map<String, Integer> positions = new HashMap<>();\n+    Node child = argList.getFirstChild();\n+    int i = 0;\n+    while (child != null) {\n+      String paramName = child.getString();\n+      positions.put(paramName, i++);\n+      allParameters.add(paramName);\n+      child = child.getNext();\n+    }\n+\n+    if (!modifyCallers) { // editing function params\n+      boolean removedParam = true;\n+      while (removedParam && !allParameters.isEmpty() && referenced.size() < allParameters.size()) {\n+        removedParam = false;\n+        for (int j = allParameters.size() - 1; j >= 0; j--) {\n+          String paramName = allParameters.get(j);\n+          Var var = fnScope.getVar(paramName);\n+          if (!referenced.contains(var)) {\n+            int position = positions.get(paramName);\n+            argList.removeChildAt(position);\n+            positions.remove(paramName);\n+            allParameters.remove(j);\n+            compiler.reportCodeChange();\n+            removedParam = true;\n+          }\n+        }\n+      }\n+    } else { // editing function call args\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}