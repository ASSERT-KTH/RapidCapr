{
    "patch": "        } catch (IllegalFieldValueException e) {\n            if (resetFields) {\n                throw e;\n            }\n            int savedCount = count;\n            for (int i = 0; i < savedCount; i++) {\n                SavedField savedField = savedFields[i];\n                if (savedField.iField == e.getField()) {\n                    System.arraycopy(savedFields, i + 1, savedFields, i, --count - i);\n                    i--;\n                }\n            }\n            if (count != savedCount) {\n                // Clean out the remainder of the saved fields\n                // If any of them depended on the field that we just handled\n                SavedField[] newSavedFields = new SavedField[count];\n                System.arraycopy(savedFields, 0, newSavedFields, 0, count);\n                savedFields = newSavedFields;\n                iSavedFields = savedFields;\n                iSavedFieldsCount = count;\n            }\n            return computeMillis(resetFields, text);\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c51de28b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,29 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            if (resetFields) {\n+                throw e;\n+            }\n+            int savedCount = count;\n+            for (int i = 0; i < savedCount; i++) {\n+                SavedField savedField = savedFields[i];\n+                if (savedField.iField == e.getField()) {\n+                    System.arraycopy(savedFields, i + 1, savedFields, i, --count - i);\n+                    i--;\n+                }\n+            }\n+            if (count != savedCount) {\n+                // Clean out the remainder of the saved fields\n+                // If any of them depended on the field that we just handled\n+                SavedField[] newSavedFields = new SavedField[count];\n+                System.arraycopy(savedFields, 0, newSavedFields, 0, count);\n+                savedFields = newSavedFields;\n+                iSavedFields = savedFields;\n+                iSavedFieldsCount = count;\n+            }\n+            return computeMillis(resetFields, text);\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}