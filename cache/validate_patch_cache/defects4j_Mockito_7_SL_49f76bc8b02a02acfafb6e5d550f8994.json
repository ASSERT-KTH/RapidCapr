{
    "patch": "private String getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type[] actualTypeArguments = typeVariable.getBounds();\n    return actualTypeArguments.length == 0 ? Object.class.getName() : actualTypeArguments[0].getTypeName();\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..fa28ba770 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,15 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private String getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type[] actualTypeArguments = typeVariable.getBounds();\n+    return actualTypeArguments.length == 0 ? Object.class.getName() : actualTypeArguments[0].getTypeName();\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}