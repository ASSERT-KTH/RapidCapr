{
    "patch": "public static double getTypedPercent(String jsonString) {\n    try {\n        JSONObject jsonObject = new JSONObject(jsonString);\n        JSONArray countries = jsonObject.getJSONArray(\"countries\");\n        JSONObject country = countries.getJSONObject(0);\n        int typed = country.getInt(\"typed\");\n        int total = country.getInt(\"total\");\n        double percentage = ((double) typed / total) * 100;\n        return percentage;\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n    // If the JSONException is thrown, return -1 as an error code\n    return -1;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..2a45fbe4 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonString) {\n+    try {\n+        JSONObject jsonObject = new JSONObject(jsonString);\n+        JSONArray countries = jsonObject.getJSONArray(\"countries\");\n+        JSONObject country = countries.getJSONObject(0);\n+        int typed = country.getInt(\"typed\");\n+        int total = country.getInt(\"total\");\n+        double percentage = ((double) typed / total) * 100;\n+        return percentage;\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+    // If the JSONException is thrown, return -1 as an error code\n+    return -1;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}