{
    "patch": "public EqualsBuilder append(Object lhs, Object rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        this.setEquals(false);\n        return this;\n    }\n    Class<?> lhsClass = lhs.getClass();\n    Class<?> rhsClass = rhs.getClass();\n    if (!lhsClass.isArray()) {\n        isEquals = lhs.equals(rhs); // simple case, not an array, just test the element\n    } else if (lhsClass != rhsClass) {            \n        this.setEquals(false); // different object arrays, not comparable\n    } else if (lhs instanceof byte[]) {\n        append((byte[]) lhs, (byte[]) rhs);\n    } else if (lhs instanceof short[]) {\n        append((short[]) lhs, (short[]) rhs);\n    } else if (lhs instanceof int[]) {\n        append((int[]) lhs, (int[]) rhs);\n    } else if (lhs instanceof long[]) {\n        append((long[]) lhs, (long[]) rhs);\n    } else if (lhs instanceof char[]) {\n                append((char[]) lhs, (char[]) rhs);\n    } else if (lhs instanceof float[]) {\n                append((float[]) lhs, (float[]) rhs);\n    } else if (lhs instanceof double[]) {\n                append((double[]) lhs, (double[]) rhs);\n    } else if (lhs instanceof boolean[]) {\n                append((boolean[]) lhs, (boolean[]) rhs);\n    } else { // not a primitive type array\n        Object[] lhsArray = (Object[]) lhs;\n        Object[] rhsArray = (Object[]) rhs;\n        if (lhsArray != rhsArray) {\n            if (lhsArray.length != rhsArray.length) {\n                this.setEquals(false);\n            } else {\n                for (int i = 0; i < lhsArray.length && isEquals; i++) {\n                    // elements should be arrays\n                    Object o1 = lhsArray[i];\n                    Object o2 = rhsArray[i];\n                    boolean eq = Objects.equals(o1, o2);\n                    if (!eq) {\n                        if (o1 != null && o2 != null) {\n                            Class<?> innerClass = o1.getClass();\n                            if (innerClass.isArray()) {\n                                append(o1, o2);//recursive call\n                            } else {\n                                isEquals = false;\n                            }\n                        } else {\n                            isEquals = false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return this;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..9f77956d 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,69 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n-        if (lhs == rhs) {\n-            return this;\n-        }\n-        if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n-            return this;\n-        }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n-        }\n+public EqualsBuilder append(Object lhs, Object rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    if (lhs == rhs) {\n+        return this;\n+    }\n+    if (lhs == null || rhs == null) {\n+        this.setEquals(false);\n         return this;\n     }\n+    Class<?> lhsClass = lhs.getClass();\n+    Class<?> rhsClass = rhs.getClass();\n+    if (!lhsClass.isArray()) {\n+        isEquals = lhs.equals(rhs); // simple case, not an array, just test the element\n+    } else if (lhsClass != rhsClass) {            \n+        this.setEquals(false); // different object arrays, not comparable\n+    } else if (lhs instanceof byte[]) {\n+        append((byte[]) lhs, (byte[]) rhs);\n+    } else if (lhs instanceof short[]) {\n+        append((short[]) lhs, (short[]) rhs);\n+    } else if (lhs instanceof int[]) {\n+        append((int[]) lhs, (int[]) rhs);\n+    } else if (lhs instanceof long[]) {\n+        append((long[]) lhs, (long[]) rhs);\n+    } else if (lhs instanceof char[]) {\n+                append((char[]) lhs, (char[]) rhs);\n+    } else if (lhs instanceof float[]) {\n+                append((float[]) lhs, (float[]) rhs);\n+    } else if (lhs instanceof double[]) {\n+                append((double[]) lhs, (double[]) rhs);\n+    } else if (lhs instanceof boolean[]) {\n+                append((boolean[]) lhs, (boolean[]) rhs);\n+    } else { // not a primitive type array\n+        Object[] lhsArray = (Object[]) lhs;\n+        Object[] rhsArray = (Object[]) rhs;\n+        if (lhsArray != rhsArray) {\n+            if (lhsArray.length != rhsArray.length) {\n+                this.setEquals(false);\n+            } else {\n+                for (int i = 0; i < lhsArray.length && isEquals; i++) {\n+                    // elements should be arrays\n+                    Object o1 = lhsArray[i];\n+                    Object o2 = rhsArray[i];\n+                    boolean eq = Objects.equals(o1, o2);\n+                    if (!eq) {\n+                        if (o1 != null && o2 != null) {\n+                            Class<?> innerClass = o1.getClass();\n+                            if (innerClass.isArray()) {\n+                                append(o1, o2);//recursive call\n+                            } else {\n+                                isEquals = false;\n+                            }\n+                        } else {\n+                            isEquals = false;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return this;\n+}\n \n     /**\n      * <p>",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}