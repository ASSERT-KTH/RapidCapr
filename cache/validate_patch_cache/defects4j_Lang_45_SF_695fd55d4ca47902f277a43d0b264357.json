{
    "patch": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    if (str == null) {\n        return null;\n    }\n    int len = str.length();\n    if (len == 0) {\n        return str;\n    }\n    if (upper == -1) {\n        upper = len;\n    }\n    if (upper > len) {\n        upper = len;\n    }\n    if (lower < 0) {\n        lower = 0;\n    }\n    if (upper < lower) {\n        int temp = lower;\n        lower = upper;\n        upper = temp;\n    }\n    boolean abbrv = len > upper;\n    StringBuffer result = new StringBuffer(len);\n    int i = 0;\n    int startPos = 0;\n    int endPos = len;\n    if (abbrv) {\n        char ellipsis = '\\u2026';\n        endPos = upper - 1;\n        if (appendToEnd != null) {\n            endPos -= appendToEnd.length();\n        }\n        result.append(str.substring(0, endPos + 1));\n        result.append(ellipsis);\n        abbrv = false;\n    }\n    if (appendToEnd != null) {\n        result.append(appendToEnd);\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..cb2df88b 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -602,43 +602,47 @@ public class WordUtils {\n      * @return the abbreviated String.\n      * @since 2.4\n      */\n-    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n-        // initial parameter checks\n-        if (str == null) {\n-            return null;\n-        }\n-        if (str.length() == 0) {\n-            return StringUtils.EMPTY;\n-        }\n-\n-        // if the lower value is greater than the length of the string,\n-        // set to the length of the string\n-        // if the upper value is -1 (i.e. no limit) or is greater\n-        // than the length of the string, set to the length of the string\n-        if (upper == -1 || upper > str.length()) {\n-            upper = str.length();\n-        }\n-        // if upper is less than lower, raise it to lower\n-        if (upper < lower) {\n-            upper = lower;\n-        }\n-\n-        StringBuffer result = new StringBuffer();\n-        int index = StringUtils.indexOf(str, \" \", lower);\n-        if (index == -1) {\n-            result.append(str.substring(0, upper));\n-            // only if abbreviation has occured do we append the appendToEnd value\n-            if (upper != str.length()) {\n-                result.append(StringUtils.defaultString(appendToEnd));\n-            }\n-        } else if (index > upper) {\n-            result.append(str.substring(0, upper));\n-            result.append(StringUtils.defaultString(appendToEnd));\n-        } else {\n-            result.append(str.substring(0, index));\n-            result.append(StringUtils.defaultString(appendToEnd));\n+public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n+    if (str == null) {\n+        return null;\n+    }\n+    int len = str.length();\n+    if (len == 0) {\n+        return str;\n+    }\n+    if (upper == -1) {\n+        upper = len;\n+    }\n+    if (upper > len) {\n+        upper = len;\n+    }\n+    if (lower < 0) {\n+        lower = 0;\n+    }\n+    if (upper < lower) {\n+        int temp = lower;\n+        lower = upper;\n+        upper = temp;\n+    }\n+    boolean abbrv = len > upper;\n+    StringBuffer result = new StringBuffer(len);\n+    int i = 0;\n+    int startPos = 0;\n+    int endPos = len;\n+    if (abbrv) {\n+        char ellipsis = '\\u2026';\n+        endPos = upper - 1;\n+        if (appendToEnd != null) {\n+            endPos -= appendToEnd.length();\n         }\n-        return result.toString();\n+        result.append(str.substring(0, endPos + 1));\n+        result.append(ellipsis);\n+        abbrv = false;\n     }\n+    if (appendToEnd != null) {\n+        result.append(appendToEnd);\n+    }\n+    return result.toString();\n+}\n \n }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<01234[]> but was:<01234[\u2026]>",
    "test_result": "FAIL"
}