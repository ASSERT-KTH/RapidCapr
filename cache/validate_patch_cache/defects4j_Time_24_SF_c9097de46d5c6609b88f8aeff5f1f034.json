{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        // Calculate and store the parsed weekyear and week fields\n        int weekyear = iDefaultYear;\n        Integer woyInteger = null;\n        for (int i = 0; i < count; i++) {\n            DateTimeField field = savedFields[i].iField;\n            if (field.getType() == DateTimeFieldType.weekyear()) {\n                weekyear = savedFields[i].iValue;\n                // Reset to the first week of the year\n                woyInteger = resetWoy(weekyear, savedFields, i);\n            } else if (field.getType() == DateTimeFieldType.weekOfWeekyear()) {\n                woyInteger = savedFields[i].iValue;\n            }\n            millis = savedFields[i].set(millis, resetFields);\n        }\n        // Use the parsed weekyear and week fields to compute millis\n        if (woyInteger != null) {\n            LocalDate date = new LocalDate(weekyear, 1, 1, iChrono);\n            int woy = woyInteger;\n            int days = (woy - 1) * 7 + 1 - date.getDayOfWeek();\n            if (days < 0) {\n                days += 7;\n            }\n            LocalDate startOfWeek = date.plusDays(days);\n            millis = startOfWeek.getLocalMillis(iChrono);\n            // If the computed millis is before the parsed millis, add a week\n            if (millis < iMillis) {\n                millis = startOfWeek.plusWeeks(1).getLocalMillis(iChrono);\n            }\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}\n\n// Reset savedFields to the first week of the weekyear\nprivate Integer resetWoy(int weekyear, SavedField[] savedFields, int woyIndex) {\n    int[] values = new int[savedFields.length];\n    for (int i = 0; i < savedFields.length; i++) {\n        values[i] = savedFields[i].iValue;\n    }\n    // Calculate the date of the first week of the weekyear\n    LocalDate firstWeek = new LocalDate(weekyear, 1, 1, iChrono);\n    int firstDow = firstWeek.getDayOfWeek();\n    if (firstDow > 1) {\n        firstWeek = firstWeek.plusDays(8 - firstDow);\n    }\n    // Calculate the date of the parsed week\n    int woy = values[woyIndex];\n    int days = (woy - 1) * 7 + 1 - firstWeek.getDayOfWeek();\n    if (days < 0) {\n        days += 7;\n    }\n    LocalDate parsedWeek = firstWeek.plusDays(days);\n    // Reset the savedFields to the first week of the weekyear\n    savedFields[woyIndex] = new SavedField(DateTimeFieldType.weekOfWeekyear(), 1);\n    values = iChrono.weekyear().add(this, weekyear, values);\n    values = iChrono.weekOfWeekyear().add(this, 1, values);\n    values = iChrono.dayOfWeek().set(this, firstWeek.getDayOfWeek(), values);\n    return iChrono.weekOfWeekyear().getDurationField().getField(this).set(this, parsedWeek.getWeekOfWeekyear(), values);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..4948ac7f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,107 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DurationField months = DurationFieldType.months().getField(iChrono);\n+        DurationField days = DurationFieldType.days().getField(iChrono);\n+        DurationField first = savedFields[0].iField.getDurationField();\n+        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            saveField(DateTimeFieldType.year(), iDefaultYear);\n+            return computeMillis(resetFields, text);\n         }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+    }\n+\n+    long millis = iMillis;\n+    try {\n+        // Calculate and store the parsed weekyear and week fields\n+        int weekyear = iDefaultYear;\n+        Integer woyInteger = null;\n+        for (int i = 0; i < count; i++) {\n+            DateTimeField field = savedFields[i].iField;\n+            if (field.getType() == DateTimeFieldType.weekyear()) {\n+                weekyear = savedFields[i].iValue;\n+                // Reset to the first week of the year\n+                woyInteger = resetWoy(weekyear, savedFields, i);\n+            } else if (field.getType() == DateTimeFieldType.weekOfWeekyear()) {\n+                woyInteger = savedFields[i].iValue;\n             }\n+            millis = savedFields[i].set(millis, resetFields);\n         }\n-\n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n+        // Use the parsed weekyear and week fields to compute millis\n+        if (woyInteger != null) {\n+            LocalDate date = new LocalDate(weekyear, 1, 1, iChrono);\n+            int woy = woyInteger;\n+            int days = (woy - 1) * 7 + 1 - date.getDayOfWeek();\n+            if (days < 0) {\n+                days += 7;\n             }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            LocalDate startOfWeek = date.plusDays(days);\n+            millis = startOfWeek.getLocalMillis(iChrono);\n+            // If the computed millis is before the parsed millis, add a week\n+            if (millis < iMillis) {\n+                millis = startOfWeek.plusWeeks(1).getLocalMillis(iChrono);\n             }\n-            throw e;\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n+                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+\n+    return millis;\n+}\n+\n+// Reset savedFields to the first week of the weekyear\n+private Integer resetWoy(int weekyear, SavedField[] savedFields, int woyIndex) {\n+    int[] values = new int[savedFields.length];\n+    for (int i = 0; i < savedFields.length; i++) {\n+        values[i] = savedFields[i].iValue;\n+    }\n+    // Calculate the date of the first week of the weekyear\n+    LocalDate firstWeek = new LocalDate(weekyear, 1, 1, iChrono);\n+    int firstDow = firstWeek.getDayOfWeek();\n+    if (firstDow > 1) {\n+        firstWeek = firstWeek.plusDays(8 - firstDow);\n+    }\n+    // Calculate the date of the parsed week\n+    int woy = values[woyIndex];\n+    int days = (woy - 1) * 7 + 1 - firstWeek.getDayOfWeek();\n+    if (days < 0) {\n+        days += 7;\n+    }\n+    LocalDate parsedWeek = firstWeek.plusDays(days);\n+    // Reset the savedFields to the first week of the weekyear\n+    savedFields[woyIndex] = new SavedField(DateTimeFieldType.weekOfWeekyear(), 1);\n+    values = iChrono.weekyear().add(this, weekyear, values);\n+    values = iChrono.weekOfWeekyear().add(this, 1, values);\n+    values = iChrono.dayOfWeek().set(this, firstWeek.getDayOfWeek(), values);\n+    return iChrono.weekOfWeekyear().getDurationField().getField(this).set(this, parsedWeek.getWeekOfWeekyear(), values);\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}