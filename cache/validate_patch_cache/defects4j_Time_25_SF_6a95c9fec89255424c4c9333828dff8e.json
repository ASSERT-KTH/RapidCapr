{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetLocal = getOffset(instantLocal);\n    long nextTransition = nextTransition(instantLocal);\n    int offsetNext = getOffset(nextTransition);\n\n    if (offsetLocal == offsetNext) {\n        // we are not near a transition, return the local offset\n        return offsetLocal;\n    } else if (offsetLocal > offsetNext) {\n        // we are in a gap (autumn DST transition)\n        long previousTransition = previousTransition(instantLocal);\n        int offsetPrevious = getOffset(previousTransition);\n\n        // if the previousOffset is less than the nextOffset, we have jumped over the gap\n        if (offsetPrevious < offsetNext) {\n            return offsetPrevious;\n        } else {\n            // otherwise, we are inside the gap\n            long nextAfterGap = nextTransition(nextTransition);\n            int offsetAfterGap = getOffset(nextAfterGap);\n            return (offsetLocal >= offsetAfterGap) ? offsetNext : offsetLocal;\n        }\n    } else {\n        // we are in an overlap (spring DST transition)\n        long previousTransition = previousTransition(instantLocal);\n        int offsetPrevious = getOffset(previousTransition);\n\n        if (offsetLocal < offsetPrevious) {\n            // we are in the \"negative\" part of the overlap\n            return offsetPrevious;\n        } else {\n            // we are in the \"positive\" part of the overlap\n            long nextOverlap = nextTransition(previousTransition);\n            long endOverlap = nextOverlap - 1;\n            int offsetEndOverlap = getOffset(endOverlap);\n            return (offsetLocal >= offsetEndOverlap) ? offsetNext : offsetLocal;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..03feb5c1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,45 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offsetLocal = getOffset(instantLocal);\n+    long nextTransition = nextTransition(instantLocal);\n+    int offsetNext = getOffset(nextTransition);\n+\n+    if (offsetLocal == offsetNext) {\n+        // we are not near a transition, return the local offset\n+        return offsetLocal;\n+    } else if (offsetLocal > offsetNext) {\n+        // we are in a gap (autumn DST transition)\n+        long previousTransition = previousTransition(instantLocal);\n+        int offsetPrevious = getOffset(previousTransition);\n+\n+        // if the previousOffset is less than the nextOffset, we have jumped over the gap\n+        if (offsetPrevious < offsetNext) {\n+            return offsetPrevious;\n+        } else {\n+            // otherwise, we are inside the gap\n+            long nextAfterGap = nextTransition(nextTransition);\n+            int offsetAfterGap = getOffset(nextAfterGap);\n+            return (offsetLocal >= offsetAfterGap) ? offsetNext : offsetLocal;\n+        }\n+    } else {\n+        // we are in an overlap (spring DST transition)\n+        long previousTransition = previousTransition(instantLocal);\n+        int offsetPrevious = getOffset(previousTransition);\n+\n+        if (offsetLocal < offsetPrevious) {\n+            // we are in the \"negative\" part of the overlap\n+            return offsetPrevious;\n+        } else {\n+            // we are in the \"positive\" part of the overlap\n+            long nextOverlap = nextTransition(previousTransition);\n+            long endOverlap = nextOverlap - 1;\n+            int offsetEndOverlap = getOffset(endOverlap);\n+            return (offsetLocal >= offsetEndOverlap) ? offsetNext : offsetLocal;\n         }\n-        return offsetAdjusted;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-06-09T11:00:00.000",
    "test_result": "FAIL"
}