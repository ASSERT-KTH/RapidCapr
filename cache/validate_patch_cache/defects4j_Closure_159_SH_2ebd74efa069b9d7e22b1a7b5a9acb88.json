{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child != null && child.getType() == Token.NAME) {\n        String name = child.getString();\n        if (name != null && !name.isEmpty()) {\n          if (name.startsWith(\"$\") || name.startsWith(\"goog.\")) {\n            // Ignore built-in functions and some common libraries\n            return;\n          }\n          changed.add(name);\n        } else if (child.getNext() != null) { // handle cases with function calls without a name\n          findCalledFunctions(child.getNext(), changed);\n        }\n      } else if (child != null) {\n        findCalledFunctions(child, changed); // try to handle cases with nested function calls",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..3a2693a7 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -776,8 +776,19 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n     // For each referenced function, add a new reference\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+      if (child != null && child.getType() == Token.NAME) {\n+        String name = child.getString();\n+        if (name != null && !name.isEmpty()) {\n+          if (name.startsWith(\"$\") || name.startsWith(\"goog.\")) {\n+            // Ignore built-in functions and some common libraries\n+            return;\n+          }\n+          changed.add(name);\n+        } else if (child.getNext() != null) { // handle cases with function calls without a name\n+          findCalledFunctions(child.getNext(), changed);\n+        }\n+      } else if (child != null) {\n+        findCalledFunctions(child, changed); // try to handle cases with nested function calls\n       }\n     }\n ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}