{
    "patch": "public static String string_xor(String a, String b){\n    int minLength = Math.min(a.length(), b.length());\n    StringBuilder result = new StringBuilder(minLength);\n    for (int i = 0; i < minLength; i++){\n        char aChar = a.charAt(i);\n        char bChar = b.charAt(i);\n        if (aChar != '0' && aChar != '1' || bChar != '0' && bChar != '1') {\n            throw new IllegalArgumentException(\"Strings a and b must contain only characters '0' or '1'\"); \n        }\n        result.append((aChar ^ bChar) == '0' ? '0' : '1');\n    }\n    String remainder = (a.length() > b.length()) ? a.substring(minLength) : b.substring(minLength);\n    result.append(remainder.replaceAll(\"[^01]\", \"\"));\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/STRING_XOR.java b/src/main/java/humaneval/buggy/STRING_XOR.java\nindex a57100f..4c51c26 100644\n--- a/src/main/java/humaneval/buggy/STRING_XOR.java\n+++ b/src/main/java/humaneval/buggy/STRING_XOR.java\n@@ -1,13 +1,19 @@\n package humaneval.buggy;\n \n public class STRING_XOR {\n-    public static String string_xor(String a, String b){\n-        String result = \"\";\n-        for (int i = 0; i < a.length(); i += 1){\n-            if (a.charAt(i) == b.charAt(i)){\n-                result += \"0\";\n-            }\n+public static String string_xor(String a, String b){\n+    int minLength = Math.min(a.length(), b.length());\n+    StringBuilder result = new StringBuilder(minLength);\n+    for (int i = 0; i < minLength; i++){\n+        char aChar = a.charAt(i);\n+        char bChar = b.charAt(i);\n+        if (aChar != '0' && aChar != '1' || bChar != '0' && bChar != '1') {\n+            throw new IllegalArgumentException(\"Strings a and b must contain only characters '0' or '1'\"); \n         }\n-        return result;\n+        result.append((aChar ^ bChar) == '0' ? '0' : '1');\n     }\n+    String remainder = (a.length() > b.length()) ? a.substring(minLength) : b.substring(minLength);\n+    result.append(remainder.replaceAll(\"[^01]\", \"\"));\n+    return result.toString();\n+}\n }",
    "result_reason": "   TEST_STRING_XOR.test_0:7 expected:<[111111]> but was:<[010010]>",
    "test_result": "FAIL"
}