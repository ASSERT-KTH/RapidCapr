{
    "patch": "          // Functions share a block with their declaration, which can be an\n          // assignment. To avoid thinking that the variable is assigned in these cases,\n          // skip this block and continue checking the parent block.\n          block = block.getParent();\n        } else if (block.isLoop) {\n          // The block has a loop statement; any change to this variable might\n          // be repeated in subsequent iterations.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..3e210eb3 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Functions share a block with their declaration, which can be an\n+          // assignment. To avoid thinking that the variable is assigned in these cases,\n+          // skip this block and continue checking the parent block.\n+          block = block.getParent();\n+        } else if (block.isLoop) {\n+          // The block has a loop statement; any change to this variable might\n+          // be repeated in subsequent iterations.\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}