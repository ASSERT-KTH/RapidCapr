{
    "patch": "          // check if the expression is a type name or type literal\n          if (token instanceof JsDocToken.TypeName) {\n            return parseTypeName(token);\n          } else if (token instanceof JsDocToken.TypeLiteralStart) {\n            return parseTypeLiteral(token);\n          } else {\n            throw new BadTypeAnnotationException(\"Type not recognized: \" + token.getText());\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..4742cbc4 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,14 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+          // check if the expression is a type name or type literal\n+          if (token instanceof JsDocToken.TypeName) {\n+            return parseTypeName(token);\n+          } else if (token instanceof JsDocToken.TypeLiteralStart) {\n+            return parseTypeLiteral(token);\n+          } else {\n+            throw new BadTypeAnnotationException(\"Type not recognized: \" + token.getText());\n+          }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}