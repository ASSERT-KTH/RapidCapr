{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (index + 2 >= seqEnd || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n    boolean isHex = false;\n    int base = 10;\n    int start = index + 2;\n    if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n        start++;\n        isHex = true;\n        base = 16;\n        if (start >= seqEnd || input.charAt(start) == ';') {\n            return 0;\n        }\n    }\n    int end = start;\n    while (end < seqEnd && input.charAt(end) != ';') {\n        end++;\n    }\n    if (end == start || end == seqEnd) {\n        return 0;\n    }\n    int codeValue;\n    try {\n        codeValue = Integer.parseInt(input.subSequence(start, end).toString(), base);\n    } catch (NumberFormatException e) {\n        return 0;\n    }\n    if (isInvalidCodePoint(codeValue)) {\n        return 0;\n    }\n    UnicodeUtil.getChars(codeValue, out);\n    return end - index + 1;\n}\n\nprivate boolean isInvalidCodePoint(int codePoint) {\n    return codePoint < 0 || codePoint > 0x10FFFF ||\n           (codePoint >= 0xD800 && codePoint <= 0xDFFF) ||\n           (codePoint >= 0xFDD0 && codePoint <= 0xFDEF) ||\n           (codePoint <= 0xFFFF && Character.isHighSurrogate((char) codePoint)) ||\n           codePoint == 0xFFFF ||\n           (codePoint & 0xFFFE) == 0xFFFE;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..cd34b6e4 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,48 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n-            }\n-\n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n-            }\n-\n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    if (index + 2 >= seqEnd || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n+        return 0;\n+    }\n+    boolean isHex = false;\n+    int base = 10;\n+    int start = index + 2;\n+    if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n+        start++;\n+        isHex = true;\n+        base = 16;\n+        if (start >= seqEnd || input.charAt(start) == ';') {\n+            return 0;\n         }\n+    }\n+    int end = start;\n+    while (end < seqEnd && input.charAt(end) != ';') {\n+        end++;\n+    }\n+    if (end == start || end == seqEnd) {\n         return 0;\n     }\n+    int codeValue;\n+    try {\n+        codeValue = Integer.parseInt(input.subSequence(start, end).toString(), base);\n+    } catch (NumberFormatException e) {\n+        return 0;\n+    }\n+    if (isInvalidCodePoint(codeValue)) {\n+        return 0;\n+    }\n+    UnicodeUtil.getChars(codeValue, out);\n+    return end - index + 1;\n+}\n+\n+private boolean isInvalidCodePoint(int codePoint) {\n+    return codePoint < 0 || codePoint > 0x10FFFF ||\n+           (codePoint >= 0xD800 && codePoint <= 0xDFFF) ||\n+           (codePoint >= 0xFDD0 && codePoint <= 0xFDEF) ||\n+           (codePoint <= 0xFFFF && Character.isHighSurrogate((char) codePoint)) ||\n+           codePoint == 0xFFFF ||\n+           (codePoint & 0xFFFE) == 0xFFFE;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}