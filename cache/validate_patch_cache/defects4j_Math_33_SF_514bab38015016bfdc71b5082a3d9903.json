{
    "patch": "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n    List<Integer> columnsToRemove = new ArrayList<Integer>();\n    columnsToRemove.add(0);\n\n    int artificialVariableOffset = getArtificialVariableOffset();\n\n    // add non-artificial variables that have positive reduced cost to list of columns to remove\n    for (int i = getNumObjectiveFunctions(); i < artificialVariableOffset; i++) {\n        final double entry = tableau.getEntry(0, i);\n        if (entry > 0) {\n            columnsToRemove.add(i);\n        }\n    }\n\n    // add non-basic artificial variables to list of columns to remove\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n      int col = i + artificialVariableOffset;\n      if (getBasicRow(col) == null) {\n          columnsToRemove.add(col);\n      }\n    }\n\n    int numColumnsToRemove = columnsToRemove.size();\n\n    int height = getHeight() - 1;\n    int width = getWidth() - numColumnsToRemove;\n    double[][] matrix = new double[height][width];\n\n    List<Integer> droppedColumns = new ArrayList<Integer>();\n    for (int i = 0; i < numColumnsToRemove; i++) {\n        int col = columnsToRemove.get(i) - i;\n\n        // remove column from tableau\n        tableau.deleteColumn(col);\n\n        // add dropped column index to list for updating column labels\n        droppedColumns.add(col);\n    }\n\n    // copy remaining entries from tableau to new matrix\n    int r = 0;\n    for (int i = 1; i <= height; i++) {\n      int c = 0;\n      for (int j = 0; j < getWidth(); j++) {\n        if (!droppedColumns.contains(j)) {\n          matrix[r][c++] = tableau.getEntry(i, j);\n        }\n      }\n      r++;\n    }\n\n    // update column labels\n    for (int i = droppedColumns.size() - 1; i >= 0; i--) {\n        int col = droppedColumns.get(i);\n        columnLabels.remove(col);\n    }\n\n    // update the tableau\n    this.tableau = new SimplexTableau(matrix, columnLabels,\n                                      getArtificialVariableOffset(),\n                                      getRhsOffset(), epsilon,\n                                      maxUlps, restrictToNonNegative,\n                                      ratioTestThreshold,\n                                      useDualSimplex);\n\n    this.numArtificialVariables = 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..1a9bb2935 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -324,48 +324,77 @@ class SimplexTableau implements Serializable {\n      * Removes the phase 1 objective function, positive cost non-artificial variables,\n      * and the non-basic artificial variables from this tableau.\n      */\n-    protected void dropPhase1Objective() {\n-        if (getNumObjectiveFunctions() == 1) {\n-            return;\n-        }\n+protected void dropPhase1Objective() {\n+    if (getNumObjectiveFunctions() == 1) {\n+        return;\n+    }\n+    List<Integer> columnsToRemove = new ArrayList<Integer>();\n+    columnsToRemove.add(0);\n \n-        List<Integer> columnsToDrop = new ArrayList<Integer>();\n-        columnsToDrop.add(0);\n+    int artificialVariableOffset = getArtificialVariableOffset();\n \n-        // positive cost non-artificial variables\n-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n-            final double entry = tableau.getEntry(0, i);\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n-                columnsToDrop.add(i);\n-            }\n+    // add non-artificial variables that have positive reduced cost to list of columns to remove\n+    for (int i = getNumObjectiveFunctions(); i < artificialVariableOffset; i++) {\n+        final double entry = tableau.getEntry(0, i);\n+        if (entry > 0) {\n+            columnsToRemove.add(i);\n         }\n+    }\n \n-        // non-basic artificial variables\n-        for (int i = 0; i < getNumArtificialVariables(); i++) {\n-          int col = i + getArtificialVariableOffset();\n-          if (getBasicRow(col) == null) {\n-            columnsToDrop.add(col);\n-          }\n-        }\n+    // add non-basic artificial variables to list of columns to remove\n+    for (int i = 0; i < getNumArtificialVariables(); i++) {\n+      int col = i + artificialVariableOffset;\n+      if (getBasicRow(col) == null) {\n+          columnsToRemove.add(col);\n+      }\n+    }\n \n-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n-        for (int i = 1; i < getHeight(); i++) {\n-          int col = 0;\n-          for (int j = 0; j < getWidth(); j++) {\n-            if (!columnsToDrop.contains(j)) {\n-              matrix[i - 1][col++] = tableau.getEntry(i, j);\n-            }\n-          }\n-        }\n+    int numColumnsToRemove = columnsToRemove.size();\n+\n+    int height = getHeight() - 1;\n+    int width = getWidth() - numColumnsToRemove;\n+    double[][] matrix = new double[height][width];\n+\n+    List<Integer> droppedColumns = new ArrayList<Integer>();\n+    for (int i = 0; i < numColumnsToRemove; i++) {\n+        int col = columnsToRemove.get(i) - i;\n+\n+        // remove column from tableau\n+        tableau.deleteColumn(col);\n+\n+        // add dropped column index to list for updating column labels\n+        droppedColumns.add(col);\n+    }\n \n-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n-          columnLabels.remove((int) columnsToDrop.get(i));\n+    // copy remaining entries from tableau to new matrix\n+    int r = 0;\n+    for (int i = 1; i <= height; i++) {\n+      int c = 0;\n+      for (int j = 0; j < getWidth(); j++) {\n+        if (!droppedColumns.contains(j)) {\n+          matrix[r][c++] = tableau.getEntry(i, j);\n         }\n+      }\n+      r++;\n+    }\n \n-        this.tableau = new Array2DRowRealMatrix(matrix);\n-        this.numArtificialVariables = 0;\n+    // update column labels\n+    for (int i = droppedColumns.size() - 1; i >= 0; i--) {\n+        int col = droppedColumns.get(i);\n+        columnLabels.remove(col);\n     }\n \n+    // update the tableau\n+    this.tableau = new SimplexTableau(matrix, columnLabels,\n+                                      getArtificialVariableOffset(),\n+                                      getRhsOffset(), epsilon,\n+                                      maxUlps, restrictToNonNegative,\n+                                      ratioTestThreshold,\n+                                      useDualSimplex);\n+\n+    this.numArtificialVariables = 0;\n+}\n+\n     /**\n      * @param src the source array\n      * @param dest the destination array",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}