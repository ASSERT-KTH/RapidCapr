{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            boolean changedDay = false;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (i == DateTimeFieldType.monthOfYear().getFieldIndex()) {\n                    int month = values[i] + valueToAdd;\n                    int year = partial.getField(DateTimeFieldType.year()).get(values[iChronology.year()]);\n                    int maxMonth = iChronology.monthOfYear().getMaximumValue(year);\n                    if (month > 0 && month <= maxMonth) {\n                        values[i] = month;\n                    } else {\n                        if (month <= 0 && month >= -maxMonth) {\n                            values[i] = month + maxMonth;\n                            year--;\n                        } else {\n                            values[i] = month - maxMonth;\n                            year++;\n                        }\n                        int day = partial.getField(DateTimeFieldType.dayOfMonth()).get(values[iChronology.dayOfMonth()]);\n                        int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n                        if (day > maxDay) {\n                            day = maxDay;\n                        }\n                        changedDay = true;\n                        instant = iChronology.year().set(instant, year);\n                        instant = iChronology.monthOfYear().set(instant, month);\n                        instant = iChronology.dayOfMonth().set(instant, day);\n                    }\n                } else {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }\n            }\n            if (!changedDay) {\n                instant = add(instant, valueToAdd);\n            }\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..21743108 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,13 +206,42 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            boolean changedDay = false;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                if (i == DateTimeFieldType.monthOfYear().getFieldIndex()) {\n+                    int month = values[i] + valueToAdd;\n+                    int year = partial.getField(DateTimeFieldType.year()).get(values[iChronology.year()]);\n+                    int maxMonth = iChronology.monthOfYear().getMaximumValue(year);\n+                    if (month > 0 && month <= maxMonth) {\n+                        values[i] = month;\n+                    } else {\n+                        if (month <= 0 && month >= -maxMonth) {\n+                            values[i] = month + maxMonth;\n+                            year--;\n+                        } else {\n+                            values[i] = month - maxMonth;\n+                            year++;\n+                        }\n+                        int day = partial.getField(DateTimeFieldType.dayOfMonth()).get(values[iChronology.dayOfMonth()]);\n+                        int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n+                        if (day > maxDay) {\n+                            day = maxDay;\n+                        }\n+                        changedDay = true;\n+                        instant = iChronology.year().set(instant, year);\n+                        instant = iChronology.monthOfYear().set(instant, month);\n+                        instant = iChronology.dayOfMonth().set(instant, day);\n+                    }\n+                } else {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                }\n+            }\n+            if (!changedDay) {\n+                instant = add(instant, valueToAdd);\n             }\n-            instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}