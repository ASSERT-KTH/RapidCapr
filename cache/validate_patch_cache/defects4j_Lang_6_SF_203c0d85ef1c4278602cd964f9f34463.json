{
    "patch": "    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                char[] c = Character.toChars(Character.codePointAt(input, pos));\n                out.write(c);\n                pos+= c.length;\n                continue;\n            }\n            for (int pt = 0; pt < consumed; pt++) {\n                if (Character.isHighSurrogate(input.charAt(pos))) {\n                    if (pos + 1 >= len) {\n                        throw new IllegalArgumentException(\"Invalid high surrogate at end of input\");\n                    }\n                    if (!Character.isLowSurrogate(input.charAt(pos + 1))) {\n                        throw new IllegalArgumentException(\"Invalid surrogate pair: first char is high surrogate, but the second is not low surrogate\");\n                    }\n                    pos++;\n                    out.write(input.charAt(pos));\n                } else if (Character.isLowSurrogate(input.charAt(pos))) {\n                    throw new IllegalArgumentException(\"Invalid low surrogate without preceding high surrogate\");\n                } else {\n                    out.write(input.charAt(pos));\n                }\n                pos++;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..f82b51cb 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -89,10 +89,22 @@ public abstract class CharSequenceTranslator {\n                 pos+= c.length;\n                 continue;\n             }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+                if (Character.isHighSurrogate(input.charAt(pos))) {\n+                    if (pos + 1 >= len) {\n+                        throw new IllegalArgumentException(\"Invalid high surrogate at end of input\");\n+                    }\n+                    if (!Character.isLowSurrogate(input.charAt(pos + 1))) {\n+                        throw new IllegalArgumentException(\"Invalid surrogate pair: first char is high surrogate, but the second is not low surrogate\");\n+                    }\n+                    pos++;\n+                    out.write(input.charAt(pos));\n+                } else if (Character.isLowSurrogate(input.charAt(pos))) {\n+                    throw new IllegalArgumentException(\"Invalid low surrogate without preceding high surrogate\");\n+                } else {\n+                    out.write(input.charAt(pos));\n+                }\n+                pos++;\n             }\n         }\n     }",
    "result_reason": "junit.framework.AssertionFailedError: unescape(String) failed: expected '\\n",
    "test_result": "FAIL"
}