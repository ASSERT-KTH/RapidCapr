{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n      // Strip unreferenced args out of the argument list.\n      Node arg = argList.getFirstChild();\n      while (arg != null && !referenced.contains(fnScope.getVar(arg.getString()))) {\n        argList.removeChild(arg);\n        arg = arg.getNext();\n        compiler.reportCodeChange();\n      }\n      while (arg != null) {\n        Node nextArg = arg.getNext();\n        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n          argList.removeChild(arg);\n          compiler.reportCodeChange();\n        } else {\n          removeUnreferencedFuncArgsHelper(fnScope, arg, referenced);\n        }\n        arg = nextArg;\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..851d6ae8 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,38 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args out of the argument list.\n+      Node arg = argList.getFirstChild();\n+      while (arg != null && !referenced.contains(fnScope.getVar(arg.getString()))) {\n+        argList.removeChild(arg);\n+        arg = arg.getNext();\n+        compiler.reportCodeChange();\n+      }\n+      while (arg != null) {\n+        Node nextArg = arg.getNext();\n+        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+          argList.removeChild(arg);\n+          compiler.reportCodeChange();\n+        } else {\n+          removeUnreferencedFuncArgsHelper(fnScope, arg, referenced);\n+        }\n+        arg = nextArg;\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}