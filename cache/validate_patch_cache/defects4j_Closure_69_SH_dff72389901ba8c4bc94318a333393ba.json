{
    "patch": "      ObjectType thisType = functionType.getTypeOfThis();\n      Scope functionScope = SyntacticScopeCreator.makeSyntacticScope(\n          n, t.getScope(), t.getCompiler());\n      Node enclosingNode = NodeUtil.getEnclosingNode(n);\n      Node enclosingStatement = NodeUtil.getEnclosingStatement(enclosingNode);\n      if (thisType != null && enclosingStatement != null &&\n          (enclosingStatement.isGetElem() || enclosingStatement.isGetProp())) {\n        Node thisNode = (enclosingStatement.isGetElem())\n            ? enclosingStatement.getLastChild()\n            : enclosingStatement.getFirstChild();\n        JSType thisJSType = getJSType(thisNode).restrictByNotNullOrUndefined();\n        ObjectType thisObj = ObjectType.cast(thisJSType);\n        if (thisObj != null && !thisObj.isEquivalentTo(thisType)) {\n          report(\n              t, thisNode, INVALID_THIS_TYPE, thisType.toString(), thisJSType.toString());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..1f100504 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      ObjectType thisType = functionType.getTypeOfThis();\n+      Scope functionScope = SyntacticScopeCreator.makeSyntacticScope(\n+          n, t.getScope(), t.getCompiler());\n+      Node enclosingNode = NodeUtil.getEnclosingNode(n);\n+      Node enclosingStatement = NodeUtil.getEnclosingStatement(enclosingNode);\n+      if (thisType != null && enclosingStatement != null &&\n+          (enclosingStatement.isGetElem() || enclosingStatement.isGetProp())) {\n+        Node thisNode = (enclosingStatement.isGetElem())\n+            ? enclosingStatement.getLastChild()\n+            : enclosingStatement.getFirstChild();\n+        JSType thisJSType = getJSType(thisNode).restrictByNotNullOrUndefined();\n+        ObjectType thisObj = ObjectType.cast(thisJSType);\n+        if (thisObj != null && !thisObj.isEquivalentTo(thisType)) {\n+          report(\n+              t, thisNode, INVALID_THIS_TYPE, thisType.toString(), thisJSType.toString());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}