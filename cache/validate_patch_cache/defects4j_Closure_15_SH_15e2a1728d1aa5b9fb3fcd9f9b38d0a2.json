{
    "patch": "if (n.isCall()) {\n  Node target = n.getFirstChild();\n  if (target != null && (target.isName() || target.isGetProp())) {\n    String functionName = target.getQualifiedName();\n    // Check if the function is not side-effect free\n    if (functionName != null && !CompilerUtil.isSideEffectFreeName(functionName)) {\n      return true;\n    }\n  }\n}\n\nif (NodeUtil.constructorCallHasSideEffects(n)) {\n  return true;\n}\n\nfor (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n  if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n    return true;\n  }\n}\n\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..d4f2476c 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,28 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isCall()) {\n+  Node target = n.getFirstChild();\n+  if (target != null && (target.isName() || target.isGetProp())) {\n+    String functionName = target.getQualifiedName();\n+    // Check if the function is not side-effect free\n+    if (functionName != null && !CompilerUtil.isSideEffectFreeName(functionName)) {\n+      return true;\n+    }\n+  }\n+}\n+\n+if (NodeUtil.constructorCallHasSideEffects(n)) {\n+  return true;\n+}\n+\n+for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+  if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+    return true;\n+  }\n+}\n+\n+return false;\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}