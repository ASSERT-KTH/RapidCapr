{
    "patch": "        final int n = m.getRowDimension();\n        final RealMatrix x = MatrixUtils.createRealMatrix(n, n);\n        final RealMatrix xPrev = MatrixUtils.createRealMatrix(n, n);\n        x.setIdentity();\n        do {\n            xPrev.setSubMatrix(x.getData(), 0, 0);\n            final RealMatrix r = m.subtract(x.multiply(x)).scalarMultiply(0.5);\n            x.addEquals(r.multiply(x.inverse()));\n        } while (!hasConverged(x, xPrev));\n        return x;\n    }\n\n    private boolean hasConverged(RealMatrix x, RealMatrix xPrev) {\n        final double eps = 1e-6;\n        final RealMatrix diff = x.subtract(xPrev).scalarMultiply(1.0 / x.getFrobeniusNorm());\n        return diff.getFrobeniusNorm() < eps;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..0abf568d3 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        final int n = m.getRowDimension();\n+        final RealMatrix x = MatrixUtils.createRealMatrix(n, n);\n+        final RealMatrix xPrev = MatrixUtils.createRealMatrix(n, n);\n+        x.setIdentity();\n+        do {\n+            xPrev.setSubMatrix(x.getData(), 0, 0);\n+            final RealMatrix r = m.subtract(x.multiply(x)).scalarMultiply(0.5);\n+            x.addEquals(r.multiply(x.inverse()));\n+        } while (!hasConverged(x, xPrev));\n+        return x;\n     }\n+\n+    private boolean hasConverged(RealMatrix x, RealMatrix xPrev) {\n+        final double eps = 1e-6;\n+        final RealMatrix diff = x.subtract(xPrev).scalarMultiply(1.0 / x.getFrobeniusNorm());\n+        return diff.getFrobeniusNorm() < eps;\n }",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}