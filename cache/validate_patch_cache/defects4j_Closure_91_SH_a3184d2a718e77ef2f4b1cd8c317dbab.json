{
    "patch": "    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype or bound.\n      if (isLentToPrototypeOrBound(parent)) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n    }\n\n    if (isLentToPrototypeOrBound(parent)) {\n      Node lhs = parent.getFirstChild();\n      if (lhs == n) return true;\n      if (lhs.getType() == Token.GETPROP) {\n        Node grandparent = parent.getParent();\n        if (grandparent.getType() == Token.ASSIGN &&\n            grandparent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        return true;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Determines if the given function node is being lent to a prototype or bound.\n   *\n   * @param parent the parent node of the function\n   * @return true if the function is being lent to a prototype or bound\n   */\n  private boolean isLentToPrototypeOrBound(Node parent) {\n    if (parent == null) {\n      return false;\n    }\n    Node grandparent = parent.getParent();\n\n    // Don't traverse functions that are getting lent to a prototype or bound.\n    if ((NodeUtil.isCallOrNewNode(parent) &&\n         parent.getFirstChild().getType() == Token.GETPROP &&\n         parent.getFirstChild().getLastChild().getString().equals(\"bind\")) ||\n        (parent.getType() == Token.GETPROP &&\n         parent.getLastChild().getString().equals(\"prototype\"))) {\n      return true;\n    }\n\n    // Handle cases where the function expression is an argument to a function call.\n    if (NodeUtil.isExpressionNode(parent) && grandparent != null) {\n      Node greatgrandparent = grandparent.getParent();\n      if (greatgrandparent != null && NodeUtil.isNormalOrOptChainCall(grandparent) &&\n          greatgrandparent.getType() == Token.GETPROP &&\n          grandparent.getFirstChild() == parent &&\n          greatgrandparent.getLastChild().getString().equals(\"bind\")) {\n        return true;\n      }\n    }\n\n    // Handle cases where the function expression is assigned and then passed as an argument to\n    // a function call.\n    if (parent.getType() == Token.ASSIGN && NodeUtil.isExpressionNode(grandparent)) {\n      Node greatgrandparent = grandparent.getParent();\n      if (greatgrandparent != null && greatgrandparent.getType() == Token.GETPROP &&\n          grandparent.getFirstChild() == parent &&\n          greatgrandparent.getLastChild().getString().equals(\"bind\")) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..966414ca 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,103 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+    if (n.getType() == Token.FUNCTION) {\n+      // Don't traverse functions that are constructors or have the @this\n+      // or @override annotation.\n+      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      if (jsDoc != null &&\n+          (jsDoc.isConstructor() ||\n+           jsDoc.isInterface() ||\n+           jsDoc.hasThisType() ||\n+           jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype or bound.\n+      if (isLentToPrototypeOrBound(parent)) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+\n+            // object literal keys\n+            pType == Token.STRING ||\n+            pType == Token.NUMBER)) {\n+        return false;\n+      }\n+    }\n+\n+    if (isLentToPrototypeOrBound(parent)) {\n+      Node lhs = parent.getFirstChild();\n+      if (lhs == n) return true;\n+      if (lhs.getType() == Token.GETPROP) {\n+        Node grandparent = parent.getParent();\n+        if (grandparent.getType() == Token.ASSIGN &&\n+            grandparent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        return true;\n+      }\n+    }\n+\n+    return true;\n+  }\n+\n+  /**\n+   * Determines if the given function node is being lent to a prototype or bound.\n+   *\n+   * @param parent the parent node of the function\n+   * @return true if the function is being lent to a prototype or bound\n+   */\n+  private boolean isLentToPrototypeOrBound(Node parent) {\n+    if (parent == null) {\n+      return false;\n+    }\n+    Node grandparent = parent.getParent();\n+\n+    // Don't traverse functions that are getting lent to a prototype or bound.\n+    if ((NodeUtil.isCallOrNewNode(parent) &&\n+         parent.getFirstChild().getType() == Token.GETPROP &&\n+         parent.getFirstChild().getLastChild().getString().equals(\"bind\")) ||\n+        (parent.getType() == Token.GETPROP &&\n+         parent.getLastChild().getString().equals(\"prototype\"))) {\n+      return true;\n+    }\n+\n+    // Handle cases where the function expression is an argument to a function call.\n+    if (NodeUtil.isExpressionNode(parent) && grandparent != null) {\n+      Node greatgrandparent = grandparent.getParent();\n+      if (greatgrandparent != null && NodeUtil.isNormalOrOptChainCall(grandparent) &&\n+          greatgrandparent.getType() == Token.GETPROP &&\n+          grandparent.getFirstChild() == parent &&\n+          greatgrandparent.getLastChild().getString().equals(\"bind\")) {\n+        return true;\n+      }\n+    }\n+\n+    // Handle cases where the function expression is assigned and then passed as an argument to\n+    // a function call.\n+    if (parent.getType() == Token.ASSIGN && NodeUtil.isExpressionNode(grandparent)) {\n+      Node greatgrandparent = grandparent.getParent();\n+      if (greatgrandparent != null && greatgrandparent.getType() == Token.GETPROP &&\n+          grandparent.getFirstChild() == parent &&\n+          greatgrandparent.getLastChild().getString().equals(\"bind\")) {\n+        return true;\n+      }\n+    }\n+\n+    return false;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}