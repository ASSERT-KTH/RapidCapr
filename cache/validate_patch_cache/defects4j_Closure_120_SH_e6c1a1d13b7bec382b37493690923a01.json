{
    "patch": "        } else if (!block.getOutEdges().stream().anyMatch(edge -> {\n                   Branch branch = edge.getValue();\n                   return branch == Branch.UNCOND || branch == Branch.ON_TRUE;\n                 })) {\n          return true;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..e0bf95b8 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,12 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (!block.getOutEdges().stream().anyMatch(edge -> {\n+                   Branch branch = edge.getValue();\n+                   return branch == Branch.UNCOND || branch == Branch.ON_TRUE;\n+                 })) {\n+          return true;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}