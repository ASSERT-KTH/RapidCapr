{
    "patch": "import org.apache.commons.math3.special.Gamma;\n\npublic class MyClass {\n\n    public static double regularizedGamma(double a, double x) {\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n            return Double.NaN;\n        } else if (x == 0.0) {\n            return 0.0;\n        } else if (x >= a + 1.0) {\n            return 1.0 - regularizedGammaComplement(a, x);\n        } else {\n            double r = 1.0 / a;\n            double c = 1.0;\n            double ans = 1.0;\n            while (ans / c > 1e-15) {\n                r += 1.0;\n                c *= x / r;\n                ans += c;\n            }\n            return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * ans;\n        }\n    }\n\n    private static double regularizedGammaComplement(double a, double x) {\n\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n            return Double.NaN;\n        } else if (x == 0.0) {\n            return 1.0;\n        } else if (x < a + 1.0) {\n            return 1.0 - regularizedGamma(a, x);\n        } else {\n            double w = new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9999999999998099, 676.5203681218851,\n                                     -1259.139216722407, 771.3234287776531, -176.6150291621406, 12.50734327868691,\n                                     -0.13857109526572012, 9.984369578019571e-6, 1.5056327351493116e-7};\n            double z = 1.0 / (x - a);\n            double sum = w[8];\n            for (int i = 7; i >= 0; i--) {\n                sum *= z;\n                sum += w[i];\n            }\n            double g = Math.sqrt(2.0 / Math.PI) / Math.sqrt(x);\n            double ans = g * Math.exp(-(x - a) + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n            return ans > 0.0 ? 1.0 - ans : 0.0;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..ab2c7bbce 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,54 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class MyClass {\n+\n+    public static double regularizedGamma(double a, double x) {\n+        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+            return Double.NaN;\n+        } else if (x == 0.0) {\n+            return 0.0;\n+        } else if (x >= a + 1.0) {\n+            return 1.0 - regularizedGammaComplement(a, x);\n+        } else {\n+            double r = 1.0 / a;\n+            double c = 1.0;\n+            double ans = 1.0;\n+            while (ans / c > 1e-15) {\n+                r += 1.0;\n+                c *= x / r;\n+                ans += c;\n+            }\n+            return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * ans;\n+        }\n+    }\n+\n+    private static double regularizedGammaComplement(double a, double x) {\n+\n+        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+            return Double.NaN;\n+        } else if (x == 0.0) {\n+            return 1.0;\n+        } else if (x < a + 1.0) {\n+            return 1.0 - regularizedGamma(a, x);\n+        } else {\n+            double w = new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9999999999998099, 676.5203681218851,\n+                                     -1259.139216722407, 771.3234287776531, -176.6150291621406, 12.50734327868691,\n+                                     -0.13857109526572012, 9.984369578019571e-6, 1.5056327351493116e-7};\n+            double z = 1.0 / (x - a);\n+            double sum = w[8];\n+            for (int i = 7; i >= 0; i--) {\n+                sum *= z;\n+                sum += w[i];\n+            }\n+            double g = Math.sqrt(2.0 / Math.PI) / Math.sqrt(x);\n+            double ans = g * Math.exp(-(x - a) + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n+            return ans > 0.0 ? 1.0 - ans : 0.0;\n+        }\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}