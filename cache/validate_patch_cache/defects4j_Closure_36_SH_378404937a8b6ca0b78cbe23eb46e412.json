{
    "patch": "          if (isSingletonGetterMethodCall(callNode, convention)) {\n            return false;\n          }\n        }\n      }\n\n      return canMoveAggressively(value) ||\n          canMoveModerately(initialization, reference);\n    }\n\n    /**\n     * Checks if the given function call is a call to a singleton getter method.\n     */\n    private boolean isSingletonGetterMethodCall(Node callNode, CodingConvention convention) {\n      if (!callNode.isCall()) {\n        return false;\n      }\n      Node methodAccessNode = callNode.getFirstChild();\n      if (!methodAccessNode.isGetProp()) {\n        return false;\n      }\n      String methodName = methodAccessNode.getLastChild().getString();\n      return convention.getSingletonGetterClassName(callNode) != null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..fc26702d 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,29 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+          if (isSingletonGetterMethodCall(callNode, convention)) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      return canMoveAggressively(value) ||\n+          canMoveModerately(initialization, reference);\n+    }\n+\n+    /**\n+     * Checks if the given function call is a call to a singleton getter method.\n+     */\n+    private boolean isSingletonGetterMethodCall(Node callNode, CodingConvention convention) {\n+      if (!callNode.isCall()) {\n+        return false;\n+      }\n+      Node methodAccessNode = callNode.getFirstChild();\n+      if (!methodAccessNode.isGetProp()) {\n+        return false;\n+      }\n+      String methodName = methodAccessNode.getLastChild().getString();\n+      return convention.getSingletonGetterClassName(callNode) != null;\n         }\n       }\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}