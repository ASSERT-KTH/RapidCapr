{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        int startIndex = 0;\n        int endIndex = 0;\n        for (int i = 1; i < size; i += 2) {\n            if (!(elementPairs.get(i) instanceof Separator)) {\n                break;\n            }\n            endIndex = i;\n        }\n        List<Object> subList = elementPairs.subList(startIndex, endIndex + 2);\n        if (subList.size() == 2 && !notPrinter) {\n            return new PeriodFormatter(sep, sep);\n        } else if (subList.size() == 2 && notParser) {\n            return new PeriodFormatter(null, (PeriodParser) null);\n        } else {\n            PeriodFormatter f = toFormatter(subList, notPrinter, notParser);\n            sep = sep.finish(f.getPrinter(), f.getParser());\n            if (!notPrinter && !notParser) {\n                return new PeriodFormatter(sep, sep);\n            } else if (!notParser) {\n                return new PeriodFormatter(null, (PeriodParser) sep);\n            } else {\n                return new PeriodFormatter(sep, null);\n            }\n        }\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..ebc313b6 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,47 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        int startIndex = 0;\n+        int endIndex = 0;\n+        for (int i = 1; i < size; i += 2) {\n+            if (!(elementPairs.get(i) instanceof Separator)) {\n+                break;\n+            }\n+            endIndex = i;\n         }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+        List<Object> subList = elementPairs.subList(startIndex, endIndex + 2);\n+        if (subList.size() == 2 && !notPrinter) {\n+            return new PeriodFormatter(sep, sep);\n+        } else if (subList.size() == 2 && notParser) {\n+            return new PeriodFormatter(null, (PeriodParser) null);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            PeriodFormatter f = toFormatter(subList, notPrinter, notParser);\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n+            if (!notPrinter && !notParser) {\n+                return new PeriodFormatter(sep, sep);\n+            } else if (!notParser) {\n+                return new PeriodFormatter(null, (PeriodParser) sep);\n+            } else {\n+                return new PeriodFormatter(sep, null);\n+            }\n         }\n     }\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}