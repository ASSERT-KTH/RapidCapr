{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n        final int numRows = m.getRowDimension();\n        final int numCols = m.getColumnDimension();\n        final int maxNumElements = Integer.MAX_VALUE / Double.BYTES;\n        if ((long)numRows * numCols > maxNumElements) {\n            return matrixIterativeSquareRoot(m);\n        }\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n\nprivate RealMatrix matrixIterativeSquareRoot(final RealMatrix m) {\n        final int n = m.getColumnDimension();\n        RealMatrix Y = m.copy();\n        final RealMatrix I = MatrixUtils.createRealIdentityMatrix(n);\n        RealMatrix Z = MatrixUtils.createRealIdentityMatrix(n);\n        final int maxIter = 100;\n        final double eps = 1e-12;\n        double err = Double.POSITIVE_INFINITY;\n        int iter = 0;\n        while (iter < maxIter && err > eps) {\n            final RealMatrix Yinv = MatrixUtils.inverse(Y);\n            final RealMatrix YinvM = Yinv.multiply(m);\n            RealMatrix X = Y.add(YinvM).scalarMultiply(0.5);\n            err = X.subtract(Z).getFrobeniusNorm();\n            Y = X;\n            iter += 1;\n        }\n        return Y;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..0b7507c10 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,34 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+        final int numRows = m.getRowDimension();\n+        final int numCols = m.getColumnDimension();\n+        final int maxNumElements = Integer.MAX_VALUE / Double.BYTES;\n+        if ((long)numRows * numCols > maxNumElements) {\n+            return matrixIterativeSquareRoot(m);\n+        }\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n+    }\n+\n+private RealMatrix matrixIterativeSquareRoot(final RealMatrix m) {\n+        final int n = m.getColumnDimension();\n+        RealMatrix Y = m.copy();\n+        final RealMatrix I = MatrixUtils.createRealIdentityMatrix(n);\n+        RealMatrix Z = MatrixUtils.createRealIdentityMatrix(n);\n+        final int maxIter = 100;\n+        final double eps = 1e-12;\n+        double err = Double.POSITIVE_INFINITY;\n+        int iter = 0;\n+        while (iter < maxIter && err > eps) {\n+            final RealMatrix Yinv = MatrixUtils.inverse(Y);\n+            final RealMatrix YinvM = Yinv.multiply(m);\n+            RealMatrix X = Y.add(YinvM).scalarMultiply(0.5);\n+            err = X.subtract(Z).getFrobeniusNorm();\n+            Y = X;\n+            iter += 1;\n+        }\n+        return Y;\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}