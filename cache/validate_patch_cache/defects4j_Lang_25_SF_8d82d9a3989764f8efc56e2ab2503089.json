{
    "patch": "public static String unescape(String str) {\n    StringBuilder sb = new StringBuilder();\n    int i = 0;\n    int n = str.length();\n    while (i < n) {\n        char ch = str.charAt(i);\n        if (ch == '\\\\') {\n            i++;\n            if (i >= n) {\n                break;\n            }\n            ch = str.charAt(i);\n            if (ch == 'n') {\n                sb.append('\\n');\n            } else if (ch == 'r') {\n                sb.append('\\r');\n            } else if (ch == 't') {\n                sb.append('\\t');\n            } else if (ch == 'f') {\n                sb.append('\\f');\n            } else if (ch == 'b') {\n                sb.append('\\b');\n            } else if (ch == '\\\\') {\n                sb.append('\\\\');\n            } else if (ch == '\\'') {\n                sb.append('\\'');\n            } else if (ch == '\\\"') {\n                sb.append('\\\"');\n            } else if (ch >= '0' && ch <= '7') {\n                int octalValue = ch - '0';\n                i++;\n                if (i < n && str.charAt(i) >= '0' && str.charAt(i) <= '7') {\n                    octalValue = octalValue * 8 + (str.charAt(i) - '0');\n                    i++;\n                    if (i < n && str.charAt(i) >= '0' && str.charAt(i) <= '7') {\n                        octalValue = octalValue * 8 + (str.charAt(i) - '0');\n                        i++;\n                    }\n                }\n                sb.append((char) octalValue);\n                i--;\n            } else {\n                sb.append('\\\\');\n                sb.append(ch);\n            }\n        } else {\n            sb.append(ch);\n        }\n        i++;\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..02271647 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,58 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String str) {\n+    StringBuilder sb = new StringBuilder();\n+    int i = 0;\n+    int n = str.length();\n+    while (i < n) {\n+        char ch = str.charAt(i);\n+        if (ch == '\\\\') {\n+            i++;\n+            if (i >= n) {\n+                break;\n+            }\n+            ch = str.charAt(i);\n+            if (ch == 'n') {\n+                sb.append('\\n');\n+            } else if (ch == 'r') {\n+                sb.append('\\r');\n+            } else if (ch == 't') {\n+                sb.append('\\t');\n+            } else if (ch == 'f') {\n+                sb.append('\\f');\n+            } else if (ch == 'b') {\n+                sb.append('\\b');\n+            } else if (ch == '\\\\') {\n+                sb.append('\\\\');\n+            } else if (ch == '\\'') {\n+                sb.append('\\'');\n+            } else if (ch == '\\\"') {\n+                sb.append('\\\"');\n+            } else if (ch >= '0' && ch <= '7') {\n+                int octalValue = ch - '0';\n+                i++;\n+                if (i < n && str.charAt(i) >= '0' && str.charAt(i) <= '7') {\n+                    octalValue = octalValue * 8 + (str.charAt(i) - '0');\n+                    i++;\n+                    if (i < n && str.charAt(i) >= '0' && str.charAt(i) <= '7') {\n+                        octalValue = octalValue * 8 + (str.charAt(i) - '0');\n+                        i++;\n+                    }\n+                }\n+                sb.append((char) octalValue);\n+                i--;\n+            } else {\n+                sb.append('\\\\');\n+                sb.append(ch);\n+            }\n+        } else {\n+            sb.append(ch);\n+        }\n+        i++;\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}