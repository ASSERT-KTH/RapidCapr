{
    "patch": "import org.apache.commons.math3.linear.CholeskyDecomposition;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n    RealMatrix sqrt = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n\n    for (int i = 0; i < m.getRowDimension(); i++) {\n        for (int j = 0; j < m.getColumnDimension(); j++) {\n            if (i == j) {\n                sqrt.setEntry(i, j, Math.sqrt(cholesky.getL().getEntry(i, j)));\n            } else {\n                sqrt.setEntry(i, j, 0.0);\n            }\n        }\n    }\n\n    RealMatrix sqrtTranspose = sqrt.transpose();\n\n    return sqrt.multiply(sqrtTranspose);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..6a66e441f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,26 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.CholeskyDecomposition;\n+import org.apache.commons.math3.linear.MatrixUtils;\n+import org.apache.commons.math3.linear.RealMatrix;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    CholeskyDecomposition cholesky = new CholeskyDecomposition(m);\n+    RealMatrix sqrt = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+\n+    for (int i = 0; i < m.getRowDimension(); i++) {\n+        for (int j = 0; j < m.getColumnDimension(); j++) {\n+            if (i == j) {\n+                sqrt.setEntry(i, j, Math.sqrt(cholesky.getL().getEntry(i, j)));\n+            } else {\n+                sqrt.setEntry(i, j, 0.0);\n+            }\n+        }\n     }\n+\n+    RealMatrix sqrtTranspose = sqrt.transpose();\n+\n+    return sqrt.multiply(sqrtTranspose);\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}