{
    "patch": "          return (ref.isInitializingDeclaration() && references.size() == 1)\n              || (ref.isSimpleAssignmentToName()\n                  && ref.getName().equals(getName())\n                  && isAssignedOnceInLifetime());\n        } else if (block.isLoop) {\n          return false;\n        }\n      }\n\n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..d70573dc 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          return (ref.isInitializingDeclaration() && references.size() == 1)\n+              || (ref.isSimpleAssignmentToName()\n+                  && ref.getName().equals(getName())\n+                  && isAssignedOnceInLifetime());\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n+      }\n+\n+      return false;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}