{
    "patch": "        } catch (IllegalFieldValueException e) {\n            DurationField fieldType = e.getDurationFieldType();\n            if (fieldType == null ||\n                    !DurationFieldType.class.isAssignableFrom(fieldType.getClass()) ||\n                    ((DurationFieldType)fieldType).getField(iChrono).getUnitMillis() >\n                            DateTimeConstants.MILLIS_PER_DAY) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }\n            if (e.getIllegalFieldValue() != 1 ||\n                    e.getIllegalFieldType() != DateTimeFieldType.weekyear()) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }\n\n            // Calculate the date using yearOfEra() as weekyear().\n            int weekyear = iChrono.weekyear().get(millis);\n            LocalDate date = new LocalDate(\n                    weekyear, 1, 1, getChronology()).plusWeeks(\n                    savedFields[0].iValue - 1).withDayOfWeek(DateTimeConstants.MONDAY);\n            long newMillis = date.getLocalMillis();\n            millis = newMillis + (millis - localMillis(newMillis));\n            count = savedFields.length;\n            for (int i = 1; i < count; i++) {\n                newMillis = savedFields[i].set(newMillis, resetFields);\n                millis = newMillis + (millis - localMillis(newMillis));\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..fde63431 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,38 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            DurationField fieldType = e.getDurationFieldType();\n+            if (fieldType == null ||\n+                    !DurationFieldType.class.isAssignableFrom(fieldType.getClass()) ||\n+                    ((DurationFieldType)fieldType).getField(iChrono).getUnitMillis() >\n+                            DateTimeConstants.MILLIS_PER_DAY) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }\n+            if (e.getIllegalFieldValue() != 1 ||\n+                    e.getIllegalFieldType() != DateTimeFieldType.weekyear()) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }\n+\n+            // Calculate the date using yearOfEra() as weekyear().\n+            int weekyear = iChrono.weekyear().get(millis);\n+            LocalDate date = new LocalDate(\n+                    weekyear, 1, 1, getChronology()).plusWeeks(\n+                    savedFields[0].iValue - 1).withDayOfWeek(DateTimeConstants.MONDAY);\n+            long newMillis = date.getLocalMillis();\n+            millis = newMillis + (millis - localMillis(newMillis));\n+            count = savedFields.length;\n+            for (int i = 1; i < count; i++) {\n+                newMillis = savedFields[i].set(newMillis, resetFields);\n+                millis = newMillis + (millis - localMillis(newMillis));\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}