{
    "patch": "                // adjust instantAdjusted and recalc the offset\n                long instantPrev = previousTransition(instantLocal - offsetLocal);\n                int offsetPrev = getOffset(instantPrev);\n                if (offsetLocal != offsetPrev) {\n                    long instantNext = nextTransition(instantLocal - offsetPrev);\n                    int offsetNext = getOffset(instantNext);\n                    if (offsetLocal == offsetNext) {\n                        return offsetPrev;\n                    } else {\n                        return offsetLocal;\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..2254bd5a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,18 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // adjust instantAdjusted and recalc the offset\n+                long instantPrev = previousTransition(instantLocal - offsetLocal);\n+                int offsetPrev = getOffset(instantPrev);\n+                if (offsetLocal != offsetPrev) {\n+                    long instantNext = nextTransition(instantLocal - offsetPrev);\n+                    int offsetNext = getOffset(instantNext);\n+                    if (offsetLocal == offsetNext) {\n+                        return offsetPrev;\n+                    } else {\n+                        return offsetLocal;\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-04-01T02:00:00.000-04:00 expected:<2007-04-01T0[1]:00:00.000-04:00> but was:<2007-04-01T0[2]:00:00.000-04:00>",
    "test_result": "FAIL"
}