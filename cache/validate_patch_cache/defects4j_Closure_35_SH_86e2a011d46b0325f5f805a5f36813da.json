{
    "patch": "if (constraintObj != null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        if (objType.hasProperty(prop)) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          JSType inferredType = objType.getPropertyType(prop).getLeastSupertype(propType);\n          objType.defineInferredProperty(prop, inferredType, null);\n        } else {\n          objType.defineInferredProperty(prop, constraintObj.getPropertyType(prop), null);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..7d461a25 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,21 +1118,17 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n+if (constraintObj != null && constraintObj.isRecordType()) {\n+    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+    if (objType != null) {\n+      for (String prop : constraintObj.getOwnPropertyNames()) {\n+        if (objType.hasProperty(prop)) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n+          JSType inferredType = objType.getPropertyType(prop).getLeastSupertype(propType);\n+          objType.defineInferredProperty(prop, inferredType, null);\n+        } else {\n+          objType.defineInferredProperty(prop, constraintObj.getPropertyType(prop), null);\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}