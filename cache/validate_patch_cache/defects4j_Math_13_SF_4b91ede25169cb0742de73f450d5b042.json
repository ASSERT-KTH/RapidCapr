{
    "patch": "        final int blockSize = 100; // tune this value to suit your needs\n        final int numRows = m.getRowDimension();\n        final int numCols = m.getColumnDimension();\n        final RealMatrix result = new Array2DRowRealMatrix(numRows, numCols);\n        for (int i = 0; i < numRows; i += blockSize) {\n            final int iEnd = Math.min(i + blockSize, numRows);\n            for (int j = 0; j < numCols; j += blockSize) {\n                final int jEnd = Math.min(j + blockSize, numCols);\n                final RealMatrix subMatrix = m.getSubMatrix(i, iEnd - 1, j, jEnd - 1);\n                final EigenDecomposition dec = new EigenDecomposition(subMatrix);\n                final RealMatrix subResult = dec.getSquareRoot();\n                result.setSubMatrix(subResult.getData(), i, j);\n            }\n        }\n        return result;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..927a19544 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        final int blockSize = 100; // tune this value to suit your needs\n+        final int numRows = m.getRowDimension();\n+        final int numCols = m.getColumnDimension();\n+        final RealMatrix result = new Array2DRowRealMatrix(numRows, numCols);\n+        for (int i = 0; i < numRows; i += blockSize) {\n+            final int iEnd = Math.min(i + blockSize, numRows);\n+            for (int j = 0; j < numCols; j += blockSize) {\n+                final int jEnd = Math.min(j + blockSize, numCols);\n+                final RealMatrix subMatrix = m.getSubMatrix(i, iEnd - 1, j, jEnd - 1);\n+                final EigenDecomposition dec = new EigenDecomposition(subMatrix);\n+                final RealMatrix subResult = dec.getSquareRoot();\n+                result.setSubMatrix(subResult.getData(), i, j);\n+            }\n+        }\n+        return result;\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}