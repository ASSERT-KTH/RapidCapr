{
    "patch": "public String fixCode(String code) {\n    String pattern = \"(for\\\\([^;]*;[^;]*;[^)]*\\\\)[^{]*\\\\{[^\\\\{\\\\}]*)(\\\\[[^\\\\]]+in[^\\\\]]+\\\\])([^\\\\{\\\\}]*\\\\{)\";\n    Pattern regex = Pattern.compile(pattern);\n    Matcher matcher = regex.matcher(code);\n\n    if (matcher.find()) {\n        String before = matcher.group(1);\n        String inOperator = matcher.group(2);\n        String after = matcher.group(3);\n\n        inOperator = inOperator.replace(\"in\", \"of\");\n\n        code = before + inOperator + after;\n    }\n\n    return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..bea563cd 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,23 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    String pattern = \"(for\\\\([^;]*;[^;]*;[^)]*\\\\)[^{]*\\\\{[^\\\\{\\\\}]*)(\\\\[[^\\\\]]+in[^\\\\]]+\\\\])([^\\\\{\\\\}]*\\\\{)\";\n+    Pattern regex = Pattern.compile(pattern);\n+    Matcher matcher = regex.matcher(code);\n+\n+    if (matcher.find()) {\n+        String before = matcher.group(1);\n+        String inOperator = matcher.group(2);\n+        String after = matcher.group(3);\n+\n+        inOperator = inOperator.replace(\"in\", \"of\");\n+\n+        code = before + inOperator + after;\n+    }\n+\n+    return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}