{
    "patch": "            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n            if (mockCandidate != null && field.getType().isAssignableFrom(mockCandidate.getClass())) {\n                if (Modifier.isFinal(field.getModifiers())) {\n                    try {\n                        Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n                        modifiersField.setAccessible(true);\n                        modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n                    } catch (NoSuchFieldException | IllegalAccessException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n                field.setAccessible(true);\n                try {\n                    field.set(fieldInstance, mockCandidate);\n                    return;\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..9d4967e69 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,28 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            if (mockCandidate != null && field.getType().isAssignableFrom(mockCandidate.getClass())) {\n+                if (Modifier.isFinal(field.getModifiers())) {\n+                    try {\n+                        Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+                        modifiersField.setAccessible(true);\n+                        modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n+                    } catch (NoSuchFieldException | IllegalAccessException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+                field.setAccessible(true);\n+                try {\n+                    field.set(fieldInstance, mockCandidate);\n+                    return;\n+                } catch (IllegalAccessException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}