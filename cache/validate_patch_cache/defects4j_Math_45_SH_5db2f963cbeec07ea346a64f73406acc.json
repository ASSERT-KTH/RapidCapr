{
    "patch": "```\nif (rowDimension <= 0 || columnDimension <= 0) {\n    throw new IllegalArgumentException(\"Invalid matrix dimensions.\");\n}\nif (columnDimension <= Integer.MAX_VALUE / rowDimension) {\n    long totalEntries = (long) rowDimension * (long) columnDimension;\n    if (totalEntries > Integer.MAX_VALUE) {\n        throw new NumberIsTooLargeException(totalEntries, Integer.MAX_VALUE, true);\n    }\n} else {\n    throw new NumberIsTooLargeException(columnDimension, Integer.MAX_VALUE / rowDimension, true);\n}\n``` \n\nThis fix first checks if the dimensions are valid, and then checks if the total number of entries is too large by computing the product of row and column dimensions. It first checks whether the product of dimensions is smaller than 2147483647, then throws an exception with details if it is larger, or checks that the product of rows and columns is smaller than the maximum allowed integer and throws an exception if column dimension is too large for the given row dimension.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\nindex 174eda6ac..5b2d4d9ee 100644\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\n@@ -47,6 +47,21 @@ public class OpenMapRealMatrix extends AbstractRealMatrix\n      */\n     public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n         super(rowDimension, columnDimension);\n+```\n+if (rowDimension <= 0 || columnDimension <= 0) {\n+    throw new IllegalArgumentException(\"Invalid matrix dimensions.\");\n+}\n+if (columnDimension <= Integer.MAX_VALUE / rowDimension) {\n+    long totalEntries = (long) rowDimension * (long) columnDimension;\n+    if (totalEntries > Integer.MAX_VALUE) {\n+        throw new NumberIsTooLargeException(totalEntries, Integer.MAX_VALUE, true);\n+    }\n+} else {\n+    throw new NumberIsTooLargeException(columnDimension, Integer.MAX_VALUE / rowDimension, true);\n+}\n+``` \n+\n+This fix first checks if the dimensions are valid, and then checks if the total number of entries is too large by computing the product of row and column dimensions. It first checks whether the product of dimensions is smaller than 2147483647, then throws an exception with details if it is larger, or checks that the product of rows and columns is smaller than the maximum allowed integer and throws an exception if column dimension is too large for the given row dimension.\n         this.rows = rowDimension;\n         this.columns = columnDimension;\n         this.entries = new OpenIntToDoubleHashMap(0.0);",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}