{
    "patch": "      if (parent.hasToken(Token.EXPR_RESULT)) {\n        Node expr = parent.getFirstChild();\n        if (expr.hasTwoChildren() &&\n            expr.getFirstChild().matchesQualifiedName(\"goog.object.extend\")) {\n          Node args = expr.getLastChild();\n          if (args.hasTwoChildren()) {\n            Node subExpr = args.getLastChild();\n            if (subExpr.getType() == Token.FUNCTION) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..9a3d548e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,16 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.hasToken(Token.EXPR_RESULT)) {\n+        Node expr = parent.getFirstChild();\n+        if (expr.hasTwoChildren() &&\n+            expr.getFirstChild().matchesQualifiedName(\"goog.object.extend\")) {\n+          Node args = expr.getLastChild();\n+          if (args.hasTwoChildren()) {\n+            Node subExpr = args.getLastChild();\n+            if (subExpr.getType() == Token.FUNCTION) {\n+              return false;\n+            }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}