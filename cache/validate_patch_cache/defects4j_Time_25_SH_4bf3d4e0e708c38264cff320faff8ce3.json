{
    "patch": "if (offsetAdjusted == offsetLocal && offsetLocal != 0) {\n    // we are near DST boundary\n    boolean isPositiveOffset = offsetLocal > 0;\n    long nextBoundaryLocal = isPositiveOffset ? nextTransition(instantLocal) : previousTransition(instantLocal);\n    long nextBoundaryAdjusted = isPositiveOffset ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n\n    if (nextBoundaryAdjusted != nextBoundaryLocal && nextBoundaryAdjusted == instantAdjusted + offsetAdjusted) {\n        // we stepped into the gap, return standard time\n        return 0;\n    } else if (nextBoundaryAdjusted != nextBoundaryLocal && nextBoundaryLocal == instantLocal - offsetLocal) {\n        // we stepped into the overlap, return the earlier offset\n        return offsetLocal;\n    } else if (nextBoundaryAdjusted != nextBoundaryLocal) {\n        // we are right before a DST change, try to recurse with the new estimate, otherwise, return the earliest offset\n        int newOffset = getOffsetFromLocal(isPositiveOffset ? nextBoundaryLocal : nextBoundaryLocal - 1);\n        return newOffset == offsetLocal ? offsetAdjusted : newOffset;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f3875f79 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetAdjusted == offsetLocal && offsetLocal != 0) {\n+    // we are near DST boundary\n+    boolean isPositiveOffset = offsetLocal > 0;\n+    long nextBoundaryLocal = isPositiveOffset ? nextTransition(instantLocal) : previousTransition(instantLocal);\n+    long nextBoundaryAdjusted = isPositiveOffset ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n+\n+    if (nextBoundaryAdjusted != nextBoundaryLocal && nextBoundaryAdjusted == instantAdjusted + offsetAdjusted) {\n+        // we stepped into the gap, return standard time\n+        return 0;\n+    } else if (nextBoundaryAdjusted != nextBoundaryLocal && nextBoundaryLocal == instantLocal - offsetLocal) {\n+        // we stepped into the overlap, return the earlier offset\n+        return offsetLocal;\n+    } else if (nextBoundaryAdjusted != nextBoundaryLocal) {\n+        // we are right before a DST change, try to recurse with the new estimate, otherwise, return the earliest offset\n+        int newOffset = getOffsetFromLocal(isPositiveOffset ? nextBoundaryLocal : nextBoundaryLocal - 1);\n+        return newOffset == offsetLocal ? offsetAdjusted : newOffset;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}