{
    "patch": "    public JSType caseObjectType(ObjectType type) {\n      if (value.equals(\"function\")) {\n        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n        if (ctorType.isSubtype(type)) {\n          return resultEqualsValue ? ctorType : null;\n        }\n        // Objects are restricted to \"Function\", subtypes are left\n        // Only filter out subtypes of \"function\"\n        return type.hasProperty(KnownFunctionProperties.PROTOTYPE) ? null : ctorType;\n      }\n      return matchesExpectation(\"object\") ? type : null;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0afabc8a..483c3757 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -610,9 +610,12 @@ public abstract class ChainableReverseAbstractInterpreter\n     public JSType caseObjectType(ObjectType type) {\n       if (value.equals(\"function\")) {\n         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n-          // Objects are restricted to \"Function\", subtypes are left\n-          // Only filter out subtypes of \"function\"\n+        if (ctorType.isSubtype(type)) {\n+          return resultEqualsValue ? ctorType : null;\n+        }\n+        // Objects are restricted to \"Function\", subtypes are left\n+        // Only filter out subtypes of \"function\"\n+        return type.hasProperty(KnownFunctionProperties.PROTOTYPE) ? null : ctorType;\n       }\n       return matchesExpectation(\"object\") ? type : null;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}