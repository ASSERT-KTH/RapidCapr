{
    "patch": "        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            DateTimeField savedFieldField = savedField.iField;\n            try {\n                // If the saved field is a year and the current time zone hasn't always\n                // had the same UTC offset, the year is ambiguous and an exception is thrown.\n                if (savedFieldField.getType() == DateTimeFieldType.year() && iZone instanceof CachedDateTimeZone) {\n                    long instant1 = savedFieldField.set(0L, iDefaultYear);\n                    long instant2 = savedFieldField.set(0L, iDefaultYear + 1);\n                    int offset1 = iZone.getOffset(instant1);\n                    int offset2 = iZone.getOffset(instant2);\n                    if (offset1 != offset2) {\n                        throw new IllegalArgumentException(\n                            \"Time zone \\\"\" + iZone.getID() + \"\\\" has a transition for year \" + iDefaultYear);\n                    }\n                }\n                millis = savedField.set(millis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n                }\n                throw e;\n            } catch (IllegalArgumentException e) {\n                if (text != null) {\n                    e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n                }\n                throw e;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..ca739b29 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,35 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            DateTimeField savedFieldField = savedField.iField;\n+            try {\n+                // If the saved field is a year and the current time zone hasn't always\n+                // had the same UTC offset, the year is ambiguous and an exception is thrown.\n+                if (savedFieldField.getType() == DateTimeFieldType.year() && iZone instanceof CachedDateTimeZone) {\n+                    long instant1 = savedFieldField.set(0L, iDefaultYear);\n+                    long instant2 = savedFieldField.set(0L, iDefaultYear + 1);\n+                    int offset1 = iZone.getOffset(instant1);\n+                    int offset2 = iZone.getOffset(instant2);\n+                    if (offset1 != offset2) {\n+                        throw new IllegalArgumentException(\n+                            \"Time zone \\\"\" + iZone.getID() + \"\\\" has a transition for year \" + iDefaultYear);\n+                    }\n+                }\n+                millis = savedField.set(millis, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+                }\n+                throw e;\n+            } catch (IllegalArgumentException e) {\n+                if (text != null) {\n+                    e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+                }\n+                throw e;\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}