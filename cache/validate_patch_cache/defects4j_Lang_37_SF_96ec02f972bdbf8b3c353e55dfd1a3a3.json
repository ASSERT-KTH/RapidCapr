{
    "patch": "public static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    int startIndex = array1.length;\n    for (T element : array2) {\n        if (type1.isInstance(element) || element == null) {\n            joinedArray[startIndex++] = element;\n        } else if (element.getClass() == Long.class && type1 == Integer.class) {\n            joinedArray[startIndex++] = (T) Integer.valueOf(((Long) element).intValue());\n        } else {\n            throw new ArrayStoreException(\"Cannot store \" + element.getClass() + \" in an array of \" + type1);\n        }\n    }\n    return joinedArray;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..617a8dcf 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,19 +2950,27 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n+public static <T> T[] addAll(T[] array1, T... array2) {\n+    if (array1 == null) {\n+        return clone(array2);\n+    } else if (array2 == null) {\n+        return clone(array1);\n+    }\n+    final Class<?> type1 = array1.getClass().getComponentType();\n+    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+    int startIndex = array1.length;\n+    for (T element : array2) {\n+        if (type1.isInstance(element) || element == null) {\n+            joinedArray[startIndex++] = element;\n+        } else if (element.getClass() == Long.class && type1 == Integer.class) {\n+            joinedArray[startIndex++] = (T) Integer.valueOf(((Long) element).intValue());\n+        } else {\n+            throw new ArrayStoreException(\"Cannot store \" + element.getClass() + \" in an array of \" + type1);\n         }\n-        final Class<?> type1 = array1.getClass().getComponentType();\n-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n-        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n-        return joinedArray;\n     }\n+    return joinedArray;\n+}\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>",
    "result_reason": "junit.framework.AssertionFailedError: Should have generated IllegalArgumentException",
    "test_result": "FAIL"
}