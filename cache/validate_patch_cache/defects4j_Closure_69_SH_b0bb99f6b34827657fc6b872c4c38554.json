{
    "patch": "      JSDocInfo jsDocInfo = NodeUtil.getBestJSDocInfo(child);\n      if (jsDocInfo != null && jsDocInfo.hasThisType() &&\n          (n.getParent().isGetProp() || n.getParent().isGetElem())) {\n        JSType thisType = jsDocInfo.getThisType().evaluate(scope, registry);\n        Node thisNode = n.getParent().isGetProp() ? n.getParent().getFirstChild() : n.getParent().getSecondChild();\n        JSType actualThisType = getJSType(thisNode);\n        if (!actualThisType.isSubtype(thisType)) {\n          report(t, n, INVALID_THIS_TYPE, thisType.toString());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..2d481aac 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSDocInfo jsDocInfo = NodeUtil.getBestJSDocInfo(child);\n+      if (jsDocInfo != null && jsDocInfo.hasThisType() &&\n+          (n.getParent().isGetProp() || n.getParent().isGetElem())) {\n+        JSType thisType = jsDocInfo.getThisType().evaluate(scope, registry);\n+        Node thisNode = n.getParent().isGetProp() ? n.getParent().getFirstChild() : n.getParent().getSecondChild();\n+        JSType actualThisType = getJSType(thisNode);\n+        if (!actualThisType.isSubtype(thisType)) {\n+          report(t, n, INVALID_THIS_TYPE, thisType.toString());\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}