{
    "patch": "  private void handleBlockComment(Comment comment) {\n    String commentValue = comment.getValue().replaceAll(\"\\\\s\", \"\");\n    if (commentValue.startsWith(\"/*\") && commentValue.endsWith(\"*/\") && commentValue.contains(\"@\")) {\n      errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 709534bf..179cc251 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -249,7 +249,15 @@ class IRFactory {\n    * Check to see if the given block comment looks like it should be JSDoc.\n    */\n   private void handleBlockComment(Comment comment) {\n-    if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) {\n+  private void handleBlockComment(Comment comment) {\n+    String commentValue = comment.getValue().replaceAll(\"\\\\s\", \"\");\n+    if (commentValue.startsWith(\"/*\") && commentValue.endsWith(\"*/\") && commentValue.contains(\"@\")) {\n+      errorReporter.warning(\n+          SUSPICIOUS_COMMENT_WARNING,\n+          sourceName,\n+          comment.getLineno(), \"\", 0);\n+    }\n+  }\n       errorReporter.warning(\n           SUSPICIOUS_COMMENT_WARNING,\n           sourceName,",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}