{
    "patch": "public static <T> ReturnValueContainer getMethodReturnValue(Object object, String methodName, Object... args) {\n    ReturnValueContainer returnValueContainer = new ReturnValueContainer();\n    try {\n        Method method = object.getClass().getMethod(methodName);\n        Object returnValue = method.invoke(object, args);\n        returnValueContainer.setValue(returnValue);\n        returnValueContainer.setType(returnValue.getClass());\n    } catch (Exception ex) {\n        ex.printStackTrace();\n    }\n    return returnValueContainer;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..fc411316f 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,18 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> ReturnValueContainer getMethodReturnValue(Object object, String methodName, Object... args) {\n+    ReturnValueContainer returnValueContainer = new ReturnValueContainer();\n+    try {\n+        Method method = object.getClass().getMethod(methodName);\n+        Object returnValue = method.invoke(object, args);\n+        returnValueContainer.setValue(returnValue);\n+        returnValueContainer.setType(returnValue.getClass());\n+    } catch (Exception ex) {\n+        ex.printStackTrace();\n+    }\n+    return returnValueContainer;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}