{
    "patch": "            Matcher varargMatcher = varargMatchers.get(indexOfVararg);\n            Object[] varargValues = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg, indexOfVararg + lengthOfVararg);\n            Object[] values = varargMatcher.getMatcher().matchAndTranslate(variableMethod, (Object) varargValues);\n            for (int i = 0; i < values.length; i++) {\n                varargMatcher.getCapturingMatcher().captureFrom(values[i]);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..df5a41102 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,12 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Matcher varargMatcher = varargMatchers.get(indexOfVararg);\n+            Object[] varargValues = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg, indexOfVararg + lengthOfVararg);\n+            Object[] values = varargMatcher.getMatcher().matchAndTranslate(variableMethod, (Object) varargValues);\n+            for (int i = 0; i < values.length; i++) {\n+                varargMatcher.getCapturingMatcher().captureFrom(values[i]);\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}