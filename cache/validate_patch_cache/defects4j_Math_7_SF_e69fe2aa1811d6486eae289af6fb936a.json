{
    "patch": "public <T extends EventDetector> void doEvents(final SpacecraftState s0,\n                                               final Collection<T> detectors)\n        throws OrekitException {\n\n    final EventHandlerManager<EventDetector> manager =\n            new EventHandlerManager<>(s0, Collections.unmodifiableCollection(detectors));\n    final Interpolator interpolator =\n            s0.getOrbit().getPVCoordinates().getInterpolator();\n    double tStart = interpolator.getPreviousTime();\n    boolean isLastStep = false;\n\n    final List<EventState> eventsStates = new ArrayList<>();\n    final List<EventDetector> activeDetectors = new ArrayList<>();\n\n    for (final EventDetector detector : detectors) {\n        // notify the detector before propagation starts\n        detector.init(s0.getDate(), s0.getFrame());\n        // add the event corresponding to the detector to the list\n        final EventState state = detector.createInitialState(s0);\n        eventsStates.add(state);\n        // register the start event to the event state\n        manager.add(state, detector.getMaxCheckInterval(), detector.getThreshold(),\n                    detector.getMaxIterationCount());\n    }\n\n    while (true) {\n\n        // search earliest events occurrence time\n        double minStep = Double.POSITIVE_INFINITY;\n        activeDetectors.clear();\n        for (final EventState state : eventsStates) {\n            minStep = Math.min(minStep, state.getTimeOfNextEvent());\n            if (state.isOccurring(tStart, tStart)) {\n                activeDetectors.add(state.getEventDetector());\n            }\n        }\n        final double tEnd = Math.min(minStep, interpolator.getMaxTime());\n\n        if (tEnd <= tStart) {\n            // we cannot reach next event without infinite loop\n            throw new OrekitException(OrekitMessages.MAX_ITERATIONS_EXCEEDED);\n        }\n\n        // propagate to the earliest detected event time\n        interpolator.setSoftPreviousTime(tStart);\n        interpolator.setSoftCurrentTime(tEnd);\n        final SpacecraftState sEnd = new SpacecraftState(interpolator.getInterpolatedState(),\n                                                         interpolator.getInterpolatedDerivatives(),\n                                                         interpolator.getInterpolatedState().getFrame());\n\n        // handle events as soon as possible\n        boolean resetOccurred = false;\n        for (final EventDetector detector : activeDetectors) {\n            final double g0 = detector.g(new SpacecraftState(sEnd.getDate(), sEnd.getOrbit(),\n                                                                        sEnd.getAttitude(), sEnd.getMass()));\n            final int sign = (int) Math.signum(g0);\n            if ((detector.getEventOccurredManager().getActions().size() > 0) && isLastStep) {\n                // this is the last step and we need to reset the handlers\n                detector.getEventOccurredManager().resetHandlers(sEnd, sign);\n                detector.getEventHandler().resetState();\n                resetOccurred = true;\n            }\n            // notify the handler\n            detector.getEventHandler().eventOccurred(sEnd, detector, (sign >= 0));\n            // register the event for next step handling\n            final EventState newState = detector.createState(sEnd);\n            manager.add(newState,\n                         detector.getMaxCheckInterval(), detector.getThreshold(),\n                         detector.getMaxIterationCount());\n            if (manager.evaluateStep(newState)) {\n                throw new OrekitException(OrekitMessages.EVENTS_NOT_EVALUATED_IN_CORRECT_ORDER);\n            }\n            eventsStates.add(newState);\n        }\n\n        // check if we should stop integration\n        for (final EventState es : eventsStates) {\n            if (es.isOccurred()) {\n                isLastStep = true;\n            }\n        }\n        if (isLastStep) {\n            return;\n        }\n\n        // throw events analysis successfully detected occurrence times\n        eventsStates.clear();\n        for (final Iterator<EventState> iterator = manager.getEventsStates().iterator(); iterator.hasNext();) {\n            final EventState state = iterator.next();\n            if (state.isOccurring(tStart, tEnd)) {\n                if (manager.evaluateStep(state)) {\n                    throw new OrekitException(OrekitMessages.EVENTS_NOT_EVALUATED_IN_CORRECT_ORDER);\n                }\n                eventsStates.add(state);\n            } else  if (state.getTimeOfNextEvent() > tEnd) {\n                break;\n            }\n        }\n        eventsStates.sort(EVENT_STATE_COMPARATOR);\n\n        // handle state events\n        for (final Iterator<EventState> iterator = eventsStates.iterator(); iterator.hasNext();) {\n            final EventState state = iterator.next();\n            if (state.isOccurring(tStart, tEnd)) {\n                final double eventT = state.getEventTime();\n                interpolator.setSoftPreviousTime(tStart);\n                interpolator.setSoftCurrentTime(eventT);\n\n                // get state at event time\n                interpolator.setInterpolatedTime(eventT);\n                final double[] eventY = interpolator.getInterpolatedState().clone();\n\n                // advance all event states to current time\n                state.stepAccepted(eventT, eventY);\n                isLastStep = state.stop();\n\n                // handle the first part of the step, up to the event\n                for (final StepHandler handler : stepHandlers) {\n                    handler.handleStep(interpolator, isLastStep);\n                }\n\n                if (manager.evaluateStep(state)) {\n                    throw new OrekitException(OrekitMessages.EVENTS_NOT_EVALUATED_IN_CORRECT_ORDER);\n                }\n            } else {\n                break;\n            }\n        }\n\n        // prepare handling of the next step\n        tStart = tEnd;\n        for (final Iterator<EventState> iterator = manager.getEventsStates().iterator(); iterator.hasNext();) {\n            final EventState state = iterator.next();\n            if (!state.isOccurring(tStart, tEnd)) {\n                // this state will not occur during the next step, remove it\n                iterator.remove();\n            } else if (state.isScheduled()) {\n                // this state was already present at previous step, no need to add it\n                // again as it has already been updated\n                eventsStates.remove(state);\n            } else {\n                // this state occurs during next step and was not present at previous step:\n                // add it to events states to setup its occurrence if none of the already found\n                // events with higher priority prevents it to occur at its natural time\n                eventsStates.add(state);\n                if (resetOccurred) {\n                    state.getEventDetector().getEventHandler().resetState();\n                }\n            }\n        }\n\n        manager.clearUncheckedEvents();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..913722fd6 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,29 +313,112 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n+public <T extends EventDetector> void doEvents(final SpacecraftState s0,\n+                                               final Collection<T> detectors)\n+        throws OrekitException {\n+\n+    final EventHandlerManager<EventDetector> manager =\n+            new EventHandlerManager<>(s0, Collections.unmodifiableCollection(detectors));\n+    final Interpolator interpolator =\n+            s0.getOrbit().getPVCoordinates().getInterpolator();\n+    double tStart = interpolator.getPreviousTime();\n+    boolean isLastStep = false;\n+\n+    final List<EventState> eventsStates = new ArrayList<>();\n+    final List<EventDetector> activeDetectors = new ArrayList<>();\n+\n+    for (final EventDetector detector : detectors) {\n+        // notify the detector before propagation starts\n+        detector.init(s0.getDate(), s0.getFrame());\n+        // add the event corresponding to the detector to the list\n+        final EventState state = detector.createInitialState(s0);\n+        eventsStates.add(state);\n+        // register the start event to the event state\n+        manager.add(state, detector.getMaxCheckInterval(), detector.getThreshold(),\n+                    detector.getMaxIterationCount());\n+    }\n \n-            });\n+    while (true) {\n \n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n+        // search earliest events occurrence time\n+        double minStep = Double.POSITIVE_INFINITY;\n+        activeDetectors.clear();\n+        for (final EventState state : eventsStates) {\n+            minStep = Math.min(minStep, state.getTimeOfNextEvent());\n+            if (state.isOccurring(tStart, tStart)) {\n+                activeDetectors.add(state.getEventDetector());\n             }\n+        }\n+        final double tEnd = Math.min(minStep, interpolator.getMaxTime());\n+\n+        if (tEnd <= tStart) {\n+            // we cannot reach next event without infinite loop\n+            throw new OrekitException(OrekitMessages.MAX_ITERATIONS_EXCEEDED);\n+        }\n \n-            while (!occuringEvents.isEmpty()) {\n+        // propagate to the earliest detected event time\n+        interpolator.setSoftPreviousTime(tStart);\n+        interpolator.setSoftCurrentTime(tEnd);\n+        final SpacecraftState sEnd = new SpacecraftState(interpolator.getInterpolatedState(),\n+                                                         interpolator.getInterpolatedDerivatives(),\n+                                                         interpolator.getInterpolatedState().getFrame());\n+\n+        // handle events as soon as possible\n+        boolean resetOccurred = false;\n+        for (final EventDetector detector : activeDetectors) {\n+            final double g0 = detector.g(new SpacecraftState(sEnd.getDate(), sEnd.getOrbit(),\n+                                                                        sEnd.getAttitude(), sEnd.getMass()));\n+            final int sign = (int) Math.signum(g0);\n+            if ((detector.getEventOccurredManager().getActions().size() > 0) && isLastStep) {\n+                // this is the last step and we need to reset the handlers\n+                detector.getEventOccurredManager().resetHandlers(sEnd, sign);\n+                detector.getEventHandler().resetState();\n+                resetOccurred = true;\n+            }\n+            // notify the handler\n+            detector.getEventHandler().eventOccurred(sEnd, detector, (sign >= 0));\n+            // register the event for next step handling\n+            final EventState newState = detector.createState(sEnd);\n+            manager.add(newState,\n+                         detector.getMaxCheckInterval(), detector.getThreshold(),\n+                         detector.getMaxIterationCount());\n+            if (manager.evaluateStep(newState)) {\n+                throw new OrekitException(OrekitMessages.EVENTS_NOT_EVALUATED_IN_CORRECT_ORDER);\n+            }\n+            eventsStates.add(newState);\n+        }\n \n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n+        // check if we should stop integration\n+        for (final EventState es : eventsStates) {\n+            if (es.isOccurred()) {\n+                isLastStep = true;\n+            }\n+        }\n+        if (isLastStep) {\n+            return;\n+        }\n \n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n+        // throw events analysis successfully detected occurrence times\n+        eventsStates.clear();\n+        for (final Iterator<EventState> iterator = manager.getEventsStates().iterator(); iterator.hasNext();) {\n+            final EventState state = iterator.next();\n+            if (state.isOccurring(tStart, tEnd)) {\n+                if (manager.evaluateStep(state)) {\n+                    throw new OrekitException(OrekitMessages.EVENTS_NOT_EVALUATED_IN_CORRECT_ORDER);\n+                }\n+                eventsStates.add(state);\n+            } else  if (state.getTimeOfNextEvent() > tEnd) {\n+                break;\n+            }\n+        }\n+        eventsStates.sort(EVENT_STATE_COMPARATOR);\n+\n+        // handle state events\n+        for (final Iterator<EventState> iterator = eventsStates.iterator(); iterator.hasNext();) {\n+            final EventState state = iterator.next();\n+            if (state.isOccurring(tStart, tEnd)) {\n+                final double eventT = state.getEventTime();\n+                interpolator.setSoftPreviousTime(tStart);\n                 interpolator.setSoftCurrentTime(eventT);\n \n                 // get state at event time\n@@ -343,14 +426,48 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n                 final double[] eventY = interpolator.getInterpolatedState().clone();\n \n                 // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+                state.stepAccepted(eventT, eventY);\n+                isLastStep = state.stop();\n \n                 // handle the first part of the step, up to the event\n                 for (final StepHandler handler : stepHandlers) {\n                     handler.handleStep(interpolator, isLastStep);\n                 }\n \n+                if (manager.evaluateStep(state)) {\n+                    throw new OrekitException(OrekitMessages.EVENTS_NOT_EVALUATED_IN_CORRECT_ORDER);\n+                }\n+            } else {\n+                break;\n+            }\n+        }\n+\n+        // prepare handling of the next step\n+        tStart = tEnd;\n+        for (final Iterator<EventState> iterator = manager.getEventsStates().iterator(); iterator.hasNext();) {\n+            final EventState state = iterator.next();\n+            if (!state.isOccurring(tStart, tEnd)) {\n+                // this state will not occur during the next step, remove it\n+                iterator.remove();\n+            } else if (state.isScheduled()) {\n+                // this state was already present at previous step, no need to add it\n+                // again as it has already been updated\n+                eventsStates.remove(state);\n+            } else {\n+                // this state occurs during next step and was not present at previous step:\n+                // add it to events states to setup its occurrence if none of the already found\n+                // events with higher priority prevents it to occur at its natural time\n+                eventsStates.add(state);\n+                if (resetOccurred) {\n+                    state.getEventDetector().getEventHandler().resetState();\n+                }\n+            }\n+        }\n+\n+        manager.clearUncheckedEvents();\n+    }\n+}\n+\n                 if (isLastStep) {\n                     // the event asked to stop integration\n                     System.arraycopy(eventY, 0, y, 0, y.length);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}