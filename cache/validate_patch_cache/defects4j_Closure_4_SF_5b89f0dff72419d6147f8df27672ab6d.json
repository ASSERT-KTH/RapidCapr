{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  // Try to resolve the type using the registry\n  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n  \n  // Check for an implicit prototype cycle if resolved via registry\n  boolean cycleDetected = detectImplicitPrototypeCycle();\n  if (!isResolved() && resolvedViaRegistry && cycleDetected) {\n    handleTypeCycle(t);\n    return null;\n  }\n\n  // Try to resolve the type using properties if it was not resolved via registry\n  if (!resolvedViaRegistry || !isResolved()) {\n    resolveViaProperties(t, enclosing);\n\n    // Check for an implicit prototype cycle if resolved via properties\n    cycleDetected = detectImplicitPrototypeCycle();\n    if (!isResolved() && cycleDetected) {\n      handleTypeCycle(t);\n      return null;\n    }\n  }\n\n  // Call super.resolveInternal() only if we have resolved the type and haven't detected an implicit prototype cycle\n  if (isResolved() && !cycleDetected) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n  }\n\n  // Return the resolved type if we have resolved it and haven't detected an implicit prototype cycle and we're in the last registry generation, otherwise, return null.\n  return isResolved() && !cycleDetected ? (registry.isLastGeneration() ? getReferencedType() : this) : null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..9e9e1eaf 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,39 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  // Try to resolve the type using the registry\n+  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+  \n+  // Check for an implicit prototype cycle if resolved via registry\n+  boolean cycleDetected = detectImplicitPrototypeCycle();\n+  if (!isResolved() && resolvedViaRegistry && cycleDetected) {\n+    handleTypeCycle(t);\n+    return null;\n+  }\n \n+  // Try to resolve the type using properties if it was not resolved via registry\n+  if (!resolvedViaRegistry || !isResolved()) {\n     resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+\n+    // Check for an implicit prototype cycle if resolved via properties\n+    cycleDetected = detectImplicitPrototypeCycle();\n+    if (!isResolved() && cycleDetected) {\n       handleTypeCycle(t);\n+      return null;\n     }\n+  }\n \n+  // Call super.resolveInternal() only if we have resolved the type and haven't detected an implicit prototype cycle\n+  if (isResolved() && !cycleDetected) {\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    finishPropertyContinuations();\n   }\n \n+  // Return the resolved type if we have resolved it and haven't detected an implicit prototype cycle and we're in the last registry generation, otherwise, return null.\n+  return isResolved() && !cycleDetected ? (registry.isLastGeneration() ? getReferencedType() : this) : null;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}