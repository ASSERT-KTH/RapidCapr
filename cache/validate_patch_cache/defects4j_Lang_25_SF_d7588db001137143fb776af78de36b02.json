{
    "patch": "public static String unescape(String s) {\n    StringBuilder result = new StringBuilder();\n    int i = 0;\n    int n = s.length();\n    while (i < n) {\n        char c = s.charAt(i);\n        if (c == '\\\\') {\n            if (i + 1 < n) {\n                char nextChar = s.charAt(i + 1);\n                switch(nextChar) {\n                    case '\\\\': result.append('\\\\'); break;\n                    case 'n': result.append('\\n'); break;\n                    case 't': result.append('\\t'); break;\n                    case 'r': result.append('\\r'); break;\n                    case 'f': result.append('\\f'); break;\n                    case '\\'': result.append('\\''); break;\n                    case '\\\"': result.append('\\\"'); break;\n                    case 'u':\n                        if (i + 5 < n) {\n                            char uniChar = (char) Integer.parseInt(s.substring(i + 2, i + 6), 16); \n                            result.append(uniChar);\n                            i += 5;\n                        }\n                        break;\n                    // Octal escape sequence\n                    case '0':\n                    case '1':\n                    case '2':\n                    case '3':\n                    case '4':\n                    case '5':\n                    case '6':\n                    case '7':\n                        if (i + 2 < n) {\n                            char octChar = (char) Integer.parseInt(s.substring(i + 1, i + 3), 8);\n                            result.append(octChar);\n                            i += 2;\n                        }\n                        break;\n                    default:\n                        result.append(nextChar);\n                        break;\n                }\n                i++;\n            } else {\n                result.append(c);\n            }\n        } else {\n            result.append(c);\n        }\n        i++;\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..6481dbb2 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,60 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String s) {\n+    StringBuilder result = new StringBuilder();\n+    int i = 0;\n+    int n = s.length();\n+    while (i < n) {\n+        char c = s.charAt(i);\n+        if (c == '\\\\') {\n+            if (i + 1 < n) {\n+                char nextChar = s.charAt(i + 1);\n+                switch(nextChar) {\n+                    case '\\\\': result.append('\\\\'); break;\n+                    case 'n': result.append('\\n'); break;\n+                    case 't': result.append('\\t'); break;\n+                    case 'r': result.append('\\r'); break;\n+                    case 'f': result.append('\\f'); break;\n+                    case '\\'': result.append('\\''); break;\n+                    case '\\\"': result.append('\\\"'); break;\n+                    case 'u':\n+                        if (i + 5 < n) {\n+                            char uniChar = (char) Integer.parseInt(s.substring(i + 2, i + 6), 16); \n+                            result.append(uniChar);\n+                            i += 5;\n+                        }\n+                        break;\n+                    // Octal escape sequence\n+                    case '0':\n+                    case '1':\n+                    case '2':\n+                    case '3':\n+                    case '4':\n+                    case '5':\n+                    case '6':\n+                    case '7':\n+                        if (i + 2 < n) {\n+                            char octChar = (char) Integer.parseInt(s.substring(i + 1, i + 3), 8);\n+                            result.append(octChar);\n+                            i += 2;\n+                        }\n+                        break;\n+                    default:\n+                        result.append(nextChar);\n+                        break;\n+                }\n+                i++;\n+            } else {\n+                result.append(c);\n+            }\n+        } else {\n+            result.append(c);\n+        }\n+        i++;\n+    }\n+    return result.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}