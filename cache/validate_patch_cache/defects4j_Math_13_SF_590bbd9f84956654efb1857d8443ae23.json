{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] realEigen = dec.getRealEigenvalues();\n    final int n = realEigen.length;\n    final double[] sqrtEigen = new double[n];\n    \n    for (int i = 0; i < n; i++) {\n        if (realEigen[i] < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        sqrtEigen[i] = Math.sqrt(Math.max(realEigen[i], 0.0));\n    }\n\n    final RealMatrix V = dec.getV();\n    final double[] d = new double[n];\n    \n    for (int i = 0; i < n; i++) {\n        d[i] = sqrtEigen[i] / Math.sqrt(1.0 + sqrtEigen[i] * sqrtEigen[i]);\n    }\n    \n    final RealMatrix D = MatrixUtils.createRealDiagonalMatrix(d);\n    \n    return V.multiply(D).multiply(V.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5897a6417 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,28 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] realEigen = dec.getRealEigenvalues();\n+    final int n = realEigen.length;\n+    final double[] sqrtEigen = new double[n];\n+    \n+    for (int i = 0; i < n; i++) {\n+        if (realEigen[i] < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        sqrtEigen[i] = Math.sqrt(Math.max(realEigen[i], 0.0));\n+    }\n+\n+    final RealMatrix V = dec.getV();\n+    final double[] d = new double[n];\n+    \n+    for (int i = 0; i < n; i++) {\n+        d[i] = sqrtEigen[i] / Math.sqrt(1.0 + sqrtEigen[i] * sqrtEigen[i]);\n     }\n+    \n+    final RealMatrix D = MatrixUtils.createRealDiagonalMatrix(d);\n+    \n+    return V.multiply(D).multiply(V.transpose());\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.5> but was:<1.499999806745808>",
    "test_result": "FAIL"
}