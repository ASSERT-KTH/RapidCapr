{
    "patch": "if(other instanceof Complex) {\n    Complex otherComplex = (Complex) other;\n    if(Double.isNaN(real) && Double.isNaN(imaginary) && Double.isNaN(otherComplex.getReal()) && Double.isNaN(otherComplex.getImaginary())) {\n        ret = true;\n    } else if(Double.compare(real, otherComplex.getReal()) == 0 && Double.compare(imaginary, otherComplex.getImaginary()) == 0) {\n        ret = true;\n    } else {\n        ret = false;\n    }\n} else {\n    ret = false;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 3571567f8..b35f79b33 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -255,7 +255,18 @@ public class Complex implements Serializable  {\n                 if (rhs.isNaN()) {\n                     ret = this.isNaN();\n                 } else {\n-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n+if(other instanceof Complex) {\n+    Complex otherComplex = (Complex) other;\n+    if(Double.isNaN(real) && Double.isNaN(imaginary) && Double.isNaN(otherComplex.getReal()) && Double.isNaN(otherComplex.getImaginary())) {\n+        ret = true;\n+    } else if(Double.compare(real, otherComplex.getReal()) == 0 && Double.compare(imaginary, otherComplex.getImaginary()) == 0) {\n+        ret = true;\n+    } else {\n+        ret = false;\n+    }\n+} else {\n+    ret = false;\n+}\n                 }\n             } catch (ClassCastException ex) {\n                 // ignore exception",
    "result_reason": "junit.framework.AssertionFailedError: expected:<org.apache.commons.math.complex.Complex@98b00000> but was:<org.apache.commons.math.complex.Complex@18b00000>",
    "test_result": "FAIL"
}