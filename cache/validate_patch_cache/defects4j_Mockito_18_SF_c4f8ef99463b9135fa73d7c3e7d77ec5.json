{
    "patch": "public static List<Integer> findEvenNumbers(int[] nums) {\n    List<Integer> evenNumbers = new ArrayList<>();\n    \n    if (nums != null) {\n        for (int num : nums) {\n            if (num % 2 == 0) {\n                evenNumbers.add(num);\n            }\n        }\n    }\n\n    return evenNumbers;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..70bd29de3 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static List<Integer> findEvenNumbers(int[] nums) {\n+    List<Integer> evenNumbers = new ArrayList<>();\n+    \n+    if (nums != null) {\n+        for (int num : nums) {\n+            if (num % 2 == 0) {\n+                evenNumbers.add(num);\n+            }\n+        }\n+    }\n+\n+    return evenNumbers;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}