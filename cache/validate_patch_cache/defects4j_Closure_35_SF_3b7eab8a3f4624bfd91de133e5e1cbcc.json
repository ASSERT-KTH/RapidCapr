{
    "patch": "private void inferPropertiesFromRecordType(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj == null || !constraintObj.isRecordType()) {\n      return;\n    }\n\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType == null) {\n      return;\n    }\n\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer;\n        if (!objType.hasProperty(prop) || objType.isPropertyTypeInferred(prop) || !objType.getPropertyType(prop).isSubtypeOf(propType)) {\n          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        } else {\n          typeToInfer = objType.getPropertyType(prop);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..ed16287c 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,6 +1111,7 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n+private void inferPropertiesFromRecordType(\n       JSType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n@@ -1118,35 +1119,28 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n+    if (constraintObj == null || !constraintObj.isRecordType()) {\n+      return;\n+    }\n+\n+    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+    if (objType == null) {\n+      return;\n+    }\n+\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!objType.isPropertyTypeDeclared(prop)) {\n+        JSType typeToInfer;\n+        if (!objType.hasProperty(prop) || objType.isPropertyTypeInferred(prop) || !objType.getPropertyType(prop).isSubtypeOf(propType)) {\n+          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+        } else {\n+          typeToInfer = objType.getPropertyType(prop);\n         }\n+        objType.defineInferredProperty(prop, typeToInfer, null);\n       }\n     }\n   }\n-\n-  /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n-   */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n-      }\n     }\n     return scope;\n   }",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}