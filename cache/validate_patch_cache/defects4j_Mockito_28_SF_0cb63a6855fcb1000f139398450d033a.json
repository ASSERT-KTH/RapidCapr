{
    "patch": "        if(awaitingInjectionClazz == null) {\n            return;\n        }\n        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if(candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n                try {\n                    field.setAccessible(true);\n                    field.set(fieldInstance, candidate);\n                    injectMockCandidate(field.getType(), mocks, candidate);\n                    break;\n                } catch (IllegalAccessException e) {\n                    throw new IllegalStateException(\"Failed to inject candidate into field\", e);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..90fbf0d8f 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,22 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+        if(awaitingInjectionClazz == null) {\n+            return;\n+        }\n+        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if(candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n+                try {\n+                    field.setAccessible(true);\n+                    field.set(fieldInstance, candidate);\n+                    injectMockCandidate(field.getType(), mocks, candidate);\n+                    break;\n+                } catch (IllegalAccessException e) {\n+                    throw new IllegalStateException(\"Failed to inject candidate into field\", e);\n+                }\n+            }\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}