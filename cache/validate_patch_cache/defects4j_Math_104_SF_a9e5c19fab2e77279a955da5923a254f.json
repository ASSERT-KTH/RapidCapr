{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid input argument value for a or x.\");\n    }\n\n    double igf = getIncompleteGammaCValues(a, x);\n    return igf / org.apache.commons.math3.special.Gamma.gamma(a);\n}\n\nprivate static double getIncompleteGammaCValues(double a, double x) {\n    double ans = 0;\n    double ax = 0;\n    double c = 0;\n    double k = 0;\n    double logGammaValue = org.apache.commons.math3.special.Gamma.logGamma(a);\n    \n    if (x < (a + 1)) {\n        ans = getIncompleteGammaSmallValue(a, x, logGammaValue);\n    } else {\n        ax = a * Math.log(x) - x - logGammaValue;\n        if (ax < -709.78271289338399) {\n            ans = 0;\n        } else {\n            ax = Math.exp(ax);\n            c = 1 - a;\n            k = 1;\n            double yk = c * k;\n            double pk = c;\n            double xk = x + k;\n            double zk = xk / yk;\n            ans = zk;\n            while (Math.abs(zk - 1) > 0.000000000000001) {\n                k = k + 1;\n                c = c - 1;\n                yk = c * yk;\n                pk = pk * xk;\n                xk = xk + 1;\n                zk = xk * pk / yk;\n                ans = ans + zk;\n            }\n            ans = 1 - (ans * ax) / a;\n        }\n    }\n    return ans;\n}\n\nprivate static double getIncompleteGammaSmallValue(double a, double x, double logGamma) {\n    /*\n     * The Taylor series expansion is given as -\n     *\n     *     x^a e^-x      x^a e^-x       x^a e^-x\n     * P = --------- = 1 - -------- + ---------^2 - ....\n     *        \u0393(a)         \u0393(a+1)       \u0393(a+2)\n     */\n    double series = 1 / a;\n    double temp = series;\n    double eps = 1e-15;\n\n    while (Math.abs(temp) > eps * Math.abs(series)) {\n        a = a + 1;\n        temp = temp * (-x / a);\n        series = series + temp;\n    }\n    return series * Math.exp(-x + logGamma);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..9c96cdee5 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,71 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid input argument value for a or x.\");\n+    }\n+\n+    double igf = getIncompleteGammaCValues(a, x);\n+    return igf / org.apache.commons.math3.special.Gamma.gamma(a);\n+}\n+\n+private static double getIncompleteGammaCValues(double a, double x) {\n+    double ans = 0;\n+    double ax = 0;\n+    double c = 0;\n+    double k = 0;\n+    double logGammaValue = org.apache.commons.math3.special.Gamma.logGamma(a);\n+    \n+    if (x < (a + 1)) {\n+        ans = getIncompleteGammaSmallValue(a, x, logGammaValue);\n+    } else {\n+        ax = a * Math.log(x) - x - logGammaValue;\n+        if (ax < -709.78271289338399) {\n+            ans = 0;\n+        } else {\n+            ax = Math.exp(ax);\n+            c = 1 - a;\n+            k = 1;\n+            double yk = c * k;\n+            double pk = c;\n+            double xk = x + k;\n+            double zk = xk / yk;\n+            ans = zk;\n+            while (Math.abs(zk - 1) > 0.000000000000001) {\n+                k = k + 1;\n+                c = c - 1;\n+                yk = c * yk;\n+                pk = pk * xk;\n+                xk = xk + 1;\n+                zk = xk * pk / yk;\n+                ans = ans + zk;\n+            }\n+            ans = 1 - (ans * ax) / a;\n+        }\n+    }\n+    return ans;\n+}\n+\n+private static double getIncompleteGammaSmallValue(double a, double x, double logGamma) {\n+    /*\n+     * The Taylor series expansion is given as -\n+     *\n+     *     x^a e^-x      x^a e^-x       x^a e^-x\n+     * P = --------- = 1 - -------- + ---------^2 - ....\n+     *        \u0393(a)         \u0393(a+1)       \u0393(a+2)\n+     */\n+    double series = 1 / a;\n+    double temp = series;\n+    double eps = 1e-15;\n+\n+    while (Math.abs(temp) > eps * Math.abs(series)) {\n+        a = a + 1;\n+        temp = temp * (-x / a);\n+        series = series + temp;\n+    }\n+    return series * Math.exp(-x + logGamma);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}