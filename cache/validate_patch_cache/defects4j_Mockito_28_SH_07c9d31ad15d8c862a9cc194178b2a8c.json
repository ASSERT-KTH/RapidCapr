{
    "patch": "        try {\n            for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n                Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n                if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n                    field.setAccessible(true);\n                    field.set(fieldInstance, candidate);\n                }\n            }\n        } catch (IllegalAccessException e) {\n            throw new IllegalStateException(\"Could not set field value\", e);",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..5a6f53b47 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,19 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        try {\n+            for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+                Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+                if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n+                    field.setAccessible(true);\n+                    field.set(fieldInstance, candidate);\n+                }\n+            }\n+        } catch (IllegalAccessException e) {\n+            throw new IllegalStateException(\"Could not set field value\", e);\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}