{
    "patch": "    public Complex reciprocal() {\n        if (isNaN) {\n            return Complex.NaN;\n        }\n\n        if (real == 0.0 && imaginary == 0.0) {\n            return NaN;\n        }\n\n        if (isInfinite) {\n            return ZERO;\n        }\n\n        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n            double q = real / imaginary;\n            double scale = 1. / (real * q + imaginary);\n            return createComplex(scale * q, -scale);\n        } else {\n            double q = imaginary / real;\n            double scale = 1. / (imaginary * q + real);\n            return createComplex(scale, -scale * q);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/complex/Complex.java b/src/main/java/org/apache/commons/math3/complex/Complex.java\nindex 22b23f24e..1dbb170b7 100644\n--- a/src/main/java/org/apache/commons/math3/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math3/complex/Complex.java\n@@ -301,6 +301,12 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n             return NaN;\n         }\n \n+        if (real == 0.0 && imaginary == 0.0) {\n+    public Complex reciprocal() {\n+        if (isNaN) {\n+            return Complex.NaN;\n+        }\n+\n         if (real == 0.0 && imaginary == 0.0) {\n             return NaN;\n         }\n@@ -319,6 +325,22 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n             return createComplex(scale, -scale * q);\n         }\n     }\n+        }\n+\n+        if (isInfinite) {\n+            return ZERO;\n+        }\n+\n+        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n+            double q = real / imaginary;\n+            double scale = 1. / (real * q + imaginary);\n+            return createComplex(scale * q, -scale);\n+        } else {\n+            double q = imaginary / real;\n+            double scale = 1. / (imaginary * q + real);\n+            return createComplex(scale, -scale * q);\n+        }\n+    }\n \n     /**\n      * Test for the equality of two Complex objects.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}