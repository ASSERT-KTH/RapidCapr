{
    "patch": "      ObjectType thisObj = getThisJSType().toObjectType();\n      for (String prop : thisObj.getOwnPropertyNames()) {\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType propType = thisObj.getPropertyType(prop);\n          JSType inferredType = propType;\n          if (!hasProperty(prop) && !propType.isUnknownType()) {\n            inferredType = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          } else if (propType.isUnionType()) {\n            JSType trueType = propType.removeType(getNativeType(JSTypeNative.UNDEFINED_TYPE));\n            if (trueType.isUnknownType()) {\n              inferredType = propType;\n            } else {\n              inferredType = getNativeType(JSTypeNative.VOID_TYPE)\n                  .getLeastSupertype(trueType);\n            }\n          }\n          defineInferredProperty(prop, inferredType, null);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..e3c118d8 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,26 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+      ObjectType thisObj = getThisJSType().toObjectType();\n+      for (String prop : thisObj.getOwnPropertyNames()) {\n+        if (!isPropertyTypeDeclared(prop)) {\n+          JSType propType = thisObj.getPropertyType(prop);\n+          JSType inferredType = propType;\n+          if (!hasProperty(prop) && !propType.isUnknownType()) {\n+            inferredType = getNativeType(JSTypeNative.VOID_TYPE)\n+                .getLeastSupertype(propType);\n+          } else if (propType.isUnionType()) {\n+            JSType trueType = propType.removeType(getNativeType(JSTypeNative.UNDEFINED_TYPE));\n+            if (trueType.isUnknownType()) {\n+              inferredType = propType;\n+            } else {\n+              inferredType = getNativeType(JSTypeNative.VOID_TYPE)\n+                  .getLeastSupertype(trueType);\n+            }\n+          }\n+          defineInferredProperty(prop, inferredType, null);\n+        }\n+      }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}