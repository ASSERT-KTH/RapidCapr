{
    "patch": "    boolean modifyCallers = modifyCallSites \n    \t\t                  && callSiteOptimizer.canModifyCallers(function, fnScope);\n    if (!modifyCallers) {\n      // If there are parameters in the function and at least one is unreferenced\n      if (argList.hasChildren() && !referenced.isEmpty()) {\n        Node firstToRemove = null;\n        Node child = argList.getFirstChild();\n        while (child != null) {\n          String paramName = child.getString();\n          if (referenced.contains(fnScope.getVar(paramName))) {\n            firstToRemove = null;\n          } else {\n            if (firstToRemove == null) {\n              firstToRemove = child;\n            }\n          }\n          child = child.getNext();\n        }\n        while (firstToRemove != null) {\n          Node nextSibling = firstToRemove.getNext();\n          argList.removeChild(firstToRemove);\n          compiler.reportCodeChange();\n          firstToRemove = nextSibling;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f0f8a3ba 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean modifyCallers = modifyCallSites \n+    \t\t                  && callSiteOptimizer.canModifyCallers(function, fnScope);\n+    if (!modifyCallers) {\n+      // If there are parameters in the function and at least one is unreferenced\n+      if (argList.hasChildren() && !referenced.isEmpty()) {\n+        Node firstToRemove = null;\n+        Node child = argList.getFirstChild();\n+        while (child != null) {\n+          String paramName = child.getString();\n+          if (referenced.contains(fnScope.getVar(paramName))) {\n+            firstToRemove = null;\n+          } else {\n+            if (firstToRemove == null) {\n+              firstToRemove = child;\n+            }\n+          }\n+          child = child.getNext();\n+        }\n+        while (firstToRemove != null) {\n+          Node nextSibling = firstToRemove.getNext();\n+          argList.removeChild(firstToRemove);\n+          compiler.reportCodeChange();\n+          firstToRemove = nextSibling;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}