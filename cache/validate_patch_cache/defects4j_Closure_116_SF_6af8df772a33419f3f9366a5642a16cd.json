{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n    Node calleeCodeBlock = NodeUtil.getFunctionBody(fnNode);\n    Node args = callNode.getLastChild().detachFromParent();\n    int paramCount = NodeUtil.getFunctionParameters(fnNode).getChildCount();\n    int argumentCount = args.getChildCount();\n    int assignedVarsCount = countVarsAssignedInBlock(calleeCodeBlock);\n    if (callNode.isNew()) {\n      if (paramCount != argumentCount) {\n        // Number of formal args and actual args does not match under 'new'.\n        // This is an error condition.\n        return CanInlineResult.NO;\n      }\n      if (assignedVarsCount > 0) {\n        // The 'new' call assigns a variable in its caller. This case\n        // should already be handled by isDirectCallNodeReplacementPossible.\n        throw new IllegalStateException(\n            \"Unexpected variable assigned in a 'new' call\");\n      }\n      // When used with 'new' calls, the 'this' parameter has special meaning\n      // and must not be inlined, even if there are no side-effects.\n      return (NodeUtil.isNameAnonymousFunction(fnNode.getFirstChild()))\n          ? CanInlineResult.NO\n          : CanInlineResult.YES;\n    } else {\n      if (paramCount < argumentCount) {\n        // If we have too many actual parameters, this is an error condition.\n        return CanInlineResult.NO;\n      }\n      for (int i = 0; i < argumentCount; i++) {\n        Node arg = args.getChildAtIndex(i);\n        checkNotNull(arg, \"argument should not be null\");\n        if (NodeUtil.mayHaveSideEffects(arg)) {\n          return CanInlineResult.NO;\n        }\n\n        if (arg.isName()) {\n          if (NodeUtil.isFunctionExpression(fnNode)) {\n            // For function expressions, we can inline the reference to the parameter unless it\n            // exists in the callee function body with a different meaning.\n            String argName = arg.getString();\n            if (argName.equals(fnNode.getFirstChild().getString()) ||\n                NodeUtil.isNameDeclared(fnNode, argName)) {\n              return CanInlineResult.NO;\n            }\n          } else if (NodeUtil.getNameReferenceCount(calleeCodeBlock, arg.getString()) > 1) {\n            // We can inline the reference to the matching argument unless it appears\n            // multiple times in the callee's code.\n            return CanInlineResult.NO;\n          }\n        } else if (arg.isFunction()) {\n          // An argument that is a function is never inlinable.\n          return CanInlineResult.NO;\n        }\n      }\n    }\n    return CanInlineResult.YES;\n  }\n\n  /**\n   * Counts the number of var declarations that happen in a block.\n   */\n  private static int countVarsAssignedInBlock(Node block) {\n    int varCount = 0;\n    for (Node var = block.getFirstChild(); var != null; var = var.getNext()) {\n      if (var.isVar()) {\n        varCount += var.getChildCount();\n      }\n    }\n    return varCount;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..e30a315d 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,80 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n+private CanInlineResult canInlineReferenceDirectly(\n       Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n-\n-    Node block = fnNode.getLastChild();\n-\n-\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n+    Node calleeCodeBlock = NodeUtil.getFunctionBody(fnNode);\n+    Node args = callNode.getLastChild().detachFromParent();\n+    int paramCount = NodeUtil.getFunctionParameters(fnNode).getChildCount();\n+    int argumentCount = args.getChildCount();\n+    int assignedVarsCount = countVarsAssignedInBlock(calleeCodeBlock);\n+    if (callNode.isNew()) {\n+      if (paramCount != argumentCount) {\n+        // Number of formal args and actual args does not match under 'new'.\n+        // This is an error condition.\n+        return CanInlineResult.NO;\n+      }\n+      if (assignedVarsCount > 0) {\n+        // The 'new' call assigns a variable in its caller. This case\n+        // should already be handled by isDirectCallNodeReplacementPossible.\n+        throw new IllegalStateException(\n+            \"Unexpected variable assigned in a 'new' call\");\n+      }\n+      // When used with 'new' calls, the 'this' parameter has special meaning\n+      // and must not be inlined, even if there are no side-effects.\n+      return (NodeUtil.isNameAnonymousFunction(fnNode.getFirstChild()))\n+          ? CanInlineResult.NO\n+          : CanInlineResult.YES;\n+    } else {\n+      if (paramCount < argumentCount) {\n+        // If we have too many actual parameters, this is an error condition.\n+        return CanInlineResult.NO;\n+      }\n+      for (int i = 0; i < argumentCount; i++) {\n+        Node arg = args.getChildAtIndex(i);\n+        checkNotNull(arg, \"argument should not be null\");\n+        if (NodeUtil.mayHaveSideEffects(arg)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+        if (arg.isName()) {\n+          if (NodeUtil.isFunctionExpression(fnNode)) {\n+            // For function expressions, we can inline the reference to the parameter unless it\n+            // exists in the callee function body with a different meaning.\n+            String argName = arg.getString();\n+            if (argName.equals(fnNode.getFirstChild().getString()) ||\n+                NodeUtil.isNameDeclared(fnNode, argName)) {\n+              return CanInlineResult.NO;\n+            }\n+          } else if (NodeUtil.getNameReferenceCount(calleeCodeBlock, arg.getString()) > 1) {\n+            // We can inline the reference to the matching argument unless it appears\n+            // multiple times in the callee's code.\n             return CanInlineResult.NO;\n           }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        } else if (arg.isFunction()) {\n+          // An argument that is a function is never inlinable.\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n       }\n     }\n-\n     return CanInlineResult.YES;\n   }\n \n+  /**\n+   * Counts the number of var declarations that happen in a block.\n+   */\n+  private static int countVarsAssignedInBlock(Node block) {\n+    int varCount = 0;\n+    for (Node var = block.getFirstChild(); var != null; var = var.getNext()) {\n+      if (var.isVar()) {\n+        varCount += var.getChildCount();\n+      }\n+    }\n+    return varCount;\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}