{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    final double epsilon = 1e-12;\n\n    double v1x = v1.getX(), v1y = v1.getY(), v1z = v1.getZ();\n    double v2x = v2.getX(), v2y = v2.getY(), v2z = v2.getZ();\n\n    double crossProductX = v1y*v2z - v1z*v2y;\n    double crossProductY = v1z*v2x - v1x*v2z;\n    double crossProductZ = v1x*v2y - v1y*v2x;\n\n    double v1Norm = v1.getNorm();\n    double v2Norm = v2.getNorm();\n\n    double crossProductNorm = Math.sqrt(crossProductX*crossProductX + \n                                        crossProductY*crossProductY + \n                                        crossProductZ*crossProductZ);\n\n    double relativeError = crossProductNorm / (v1Norm * v2Norm);\n\n    if (Double.isNaN(relativeError) || relativeError < epsilon) {\n        // the vectors are nearly parallel\n        // we should choose a vector that is neither v1 nor v2\n        // and that is orthogonal to v1\n        double secondVComponent;\n        if (Math.abs(v1x) >= Math.abs(v1y)) {\n            // v1 component is closer to x-axis\n            secondVComponent = v1z;\n        } else {\n            // v1 component is closer to y-axis\n            secondVComponent = v1y;\n        }\n\n        double newVectorX = -secondVComponent;\n        double newVectorY = v1x;\n        double newVectorZ = 0.0;\n\n        double newVectorNorm = Math.sqrt(newVectorX*newVectorX + \n                                         newVectorY*newVectorY + \n                                         newVectorZ*newVectorZ);\n\n        if (newVectorNorm < epsilon * v1Norm) {\n            // v1 is too close to the x or y axis; we try the z axis instead\n            newVectorX = -v1y;\n            newVectorY = 0.0;\n            newVectorZ = v1x;\n            newVectorNorm = Math.sqrt(newVectorX * newVectorX + newVectorZ * newVectorZ);\n            if (newVectorNorm < epsilon * v1Norm) {\n                // v1 is too close to the x, y or z axis: nearly zero vector, we can't normalize\n                newVectorX = 0.0;\n                newVectorY = -v1z;\n                newVectorZ = v1y;\n                newVectorNorm = Math.sqrt(newVectorY * newVectorY + newVectorZ * newVectorZ);\n            }\n        }\n\n        return new Vector3D(newVectorX / newVectorNorm, newVectorY / newVectorNorm, newVectorZ / newVectorNorm);\n\n    }\n\n    return new Vector3D(crossProductX / crossProductNorm, crossProductY / crossProductNorm, crossProductZ / crossProductNorm);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..75ae2a6d3 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,68 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    final double epsilon = 1e-12;\n+\n+    double v1x = v1.getX(), v1y = v1.getY(), v1z = v1.getZ();\n+    double v2x = v2.getX(), v2y = v2.getY(), v2z = v2.getZ();\n+\n+    double crossProductX = v1y*v2z - v1z*v2y;\n+    double crossProductY = v1z*v2x - v1x*v2z;\n+    double crossProductZ = v1x*v2y - v1y*v2x;\n+\n+    double v1Norm = v1.getNorm();\n+    double v2Norm = v2.getNorm();\n+\n+    double crossProductNorm = Math.sqrt(crossProductX*crossProductX + \n+                                        crossProductY*crossProductY + \n+                                        crossProductZ*crossProductZ);\n+\n+    double relativeError = crossProductNorm / (v1Norm * v2Norm);\n+\n+    if (Double.isNaN(relativeError) || relativeError < epsilon) {\n+        // the vectors are nearly parallel\n+        // we should choose a vector that is neither v1 nor v2\n+        // and that is orthogonal to v1\n+        double secondVComponent;\n+        if (Math.abs(v1x) >= Math.abs(v1y)) {\n+            // v1 component is closer to x-axis\n+            secondVComponent = v1z;\n+        } else {\n+            // v1 component is closer to y-axis\n+            secondVComponent = v1y;\n+        }\n+\n+        double newVectorX = -secondVComponent;\n+        double newVectorY = v1x;\n+        double newVectorZ = 0.0;\n+\n+        double newVectorNorm = Math.sqrt(newVectorX*newVectorX + \n+                                         newVectorY*newVectorY + \n+                                         newVectorZ*newVectorZ);\n+\n+        if (newVectorNorm < epsilon * v1Norm) {\n+            // v1 is too close to the x or y axis; we try the z axis instead\n+            newVectorX = -v1y;\n+            newVectorY = 0.0;\n+            newVectorZ = v1x;\n+            newVectorNorm = Math.sqrt(newVectorX * newVectorX + newVectorZ * newVectorZ);\n+            if (newVectorNorm < epsilon * v1Norm) {\n+                // v1 is too close to the x, y or z axis: nearly zero vector, we can't normalize\n+                newVectorX = 0.0;\n+                newVectorY = -v1z;\n+                newVectorZ = v1y;\n+                newVectorNorm = Math.sqrt(newVectorY * newVectorY + newVectorZ * newVectorZ);\n+            }\n+        }\n+\n+        return new Vector3D(newVectorX / newVectorNorm, newVectorY / newVectorNorm, newVectorZ / newVectorNorm);\n \n+    }\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+    return new Vector3D(crossProductX / crossProductNorm, crossProductY / crossProductNorm, crossProductZ / crossProductNorm);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.28603877677367767>",
    "test_result": "FAIL"
}