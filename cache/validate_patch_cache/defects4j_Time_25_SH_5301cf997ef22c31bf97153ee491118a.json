{
    "patch": "if ((offsetAdjusted - offsetLocal) < 0) {\n    // we might be able to use the old offset if we transition back\n    long prevLocal = previousTransition(instantAdjusted);\n    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n    long diff = instantLocal - prevAdjusted + offsetAdjusted;\n    if (prevLocal <= diff && prevAdjusted <= diff) {\n        int prevOffsetLocal = getOffset(prevLocal);\n        int prevOffsetAdjusted = getOffset(prevAdjusted);\n        if (prevOffsetLocal == offsetLocal && prevOffsetAdjusted <= offsetAdjusted) {\n            return offsetLocal;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..24364bca 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetAdjusted - offsetLocal) < 0) {\n+    // we might be able to use the old offset if we transition back\n+    long prevLocal = previousTransition(instantAdjusted);\n+    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+    long diff = instantLocal - prevAdjusted + offsetAdjusted;\n+    if (prevLocal <= diff && prevAdjusted <= diff) {\n+        int prevOffsetLocal = getOffset(prevLocal);\n+        int prevOffsetAdjusted = getOffset(prevAdjusted);\n+        if (prevOffsetLocal == offsetLocal && prevOffsetAdjusted <= offsetAdjusted) {\n+            return offsetLocal;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}