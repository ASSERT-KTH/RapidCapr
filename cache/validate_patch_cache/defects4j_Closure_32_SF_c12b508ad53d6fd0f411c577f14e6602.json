{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n\n  if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  stream.update();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  // Read the content from the first line.\n  String line = stream.getRemainingJSDocLine();\n  if (option != WhitespaceOption.PRESERVE) {\n    line = line.trim();\n  }\n\n  StringBuilder builder = new StringBuilder();\n  builder.append(line);\n\n  state = State.SEARCHING_ANNOTATION;\n  token = next();\n\n  boolean ignoreStar = false;\n  boolean exitLoop = false;\n\n  while (!exitLoop) {\n    switch (token) {\n      case STAR:\n        if (ignoreStar) {\n          // Mark the position after the star as the new start of the line.\n        } else {\n          // The star is part of the comment.\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n\n          builder.append('*');\n        }\n\n        token = next();\n        continue;\n\n      case EOL:\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          builder.append(\"\\n\");\n        }\n\n        ignoreStar = true;\n        token = next();\n        continue;\n\n      default:\n        ignoreStar = false;\n        state = State.SEARCHING_ANNOTATION;\n\n        if (token == JsDocToken.EOC || token == JsDocToken.EOF) {\n          exitLoop = true;\n        } else if (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE) {\n          // Exit if we encounter an annotation and we're not preserving whitespace.\n          exitLoop = true;\n        }\n\n        if (builder.length() > 0) {\n          builder.append(' ');\n        }\n        builder.append(toString(token));\n\n        line = stream.getRemainingJSDocLine();\n\n        if (option != WhitespaceOption.PRESERVE) {\n          line = trimEnd(line);\n        }\n\n        builder.append(line);\n        token = next();\n    }\n  }\n\n  String multilineText = builder.toString();\n\n  if (option != WhitespaceOption.PRESERVE) {\n    multilineText = multilineText.trim();\n  }\n\n  int endLineno = stream.getLineno();\n  int endCharno = stream.getCharno();\n\n  if (multilineText.length() > 0) {\n    jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n  }\n\n  return new ExtractionInfo(multilineText, token);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..da3009f7 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,108 +1326,100 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n \n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n-    }\n-\n-    stream.update();\n-    int startLineno = stream.getLineno();\n-    int startCharno = stream.getCharno() + 1;\n+  if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n+    return new ExtractionInfo(\"\", token);\n+  }\n \n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n-    if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n-    }\n+  stream.update();\n+  int startLineno = stream.getLineno();\n+  int startCharno = stream.getCharno() + 1;\n \n-    StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n+  // Read the content from the first line.\n+  String line = stream.getRemainingJSDocLine();\n+  if (option != WhitespaceOption.PRESERVE) {\n+    line = line.trim();\n+  }\n \n-    state = State.SEARCHING_ANNOTATION;\n-    token = next();\n+  StringBuilder builder = new StringBuilder();\n+  builder.append(line);\n \n-    boolean ignoreStar = false;\n+  state = State.SEARCHING_ANNOTATION;\n+  token = next();\n \n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n+  boolean ignoreStar = false;\n+  boolean exitLoop = false;\n \n-    do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n-\n-            builder.append('*');\n+  while (!exitLoop) {\n+    switch (token) {\n+      case STAR:\n+        if (ignoreStar) {\n+          // Mark the position after the star as the new start of the line.\n+        } else {\n+          // The star is part of the comment.\n+          if (builder.length() > 0) {\n+            builder.append(' ');\n           }\n \n-          token = next();\n-          continue;\n+          builder.append('*');\n+        }\n \n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n+        token = next();\n+        continue;\n \n-          ignoreStar = true;\n-          token = next();\n-          continue;\n+      case EOL:\n+        if (option != WhitespaceOption.SINGLE_LINE) {\n+          builder.append(\"\\n\");\n+        }\n \n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n+        ignoreStar = true;\n+        token = next();\n+        continue;\n \n-              // All tokens must be separated by a space.\n+      default:\n+        ignoreStar = false;\n+        state = State.SEARCHING_ANNOTATION;\n \n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n+        if (token == JsDocToken.EOC || token == JsDocToken.EOF) {\n+          exitLoop = true;\n+        } else if (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE) {\n+          // Exit if we encounter an annotation and we're not preserving whitespace.\n+          exitLoop = true;\n+        }\n \n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n+        if (builder.length() > 0) {\n+          builder.append(' ');\n+        }\n+        builder.append(toString(token));\n \n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+        line = stream.getRemainingJSDocLine();\n \n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n+        if (option != WhitespaceOption.PRESERVE) {\n+          line = trimEnd(line);\n+        }\n \n-            return new ExtractionInfo(multilineText, token);\n-          }\n+        builder.append(line);\n+        token = next();\n+    }\n+  }\n \n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n+  String multilineText = builder.toString();\n \n-          line = stream.getRemainingJSDocLine();\n+  if (option != WhitespaceOption.PRESERVE) {\n+    multilineText = multilineText.trim();\n+  }\n \n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n+  int endLineno = stream.getLineno();\n+  int endCharno = stream.getCharno();\n \n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n+  if (multilineText.length() > 0) {\n+    jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n   }\n \n+  return new ExtractionInfo(multilineText, token);\n+}\n+\n \n   /**\n    * Extracts the top-level block comment from the JsDoc comment, if any.",
    "result_reason": "java.lang.RuntimeException: java.lang.IllegalStateException: EOC",
    "test_result": "FAIL"
}