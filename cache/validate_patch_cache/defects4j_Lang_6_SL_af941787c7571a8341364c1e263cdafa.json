{
    "patch": "int codePoint = Character.codePointAt(input, pos);\nint charCount = Character.charCount(codePoint);\nif (Character.isSupplementaryCodePoint(codePoint)) {\n    out.write(Character.toChars(codePoint));\n} else {\n    char[] c = new char[] {input.charAt(pos)};\n    out.write(c);\n}\npos += charCount; ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..ebc74b6b 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,15 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+int codePoint = Character.codePointAt(input, pos);\n+int charCount = Character.charCount(codePoint);\n+if (Character.isSupplementaryCodePoint(codePoint)) {\n+    out.write(Character.toChars(codePoint));\n+} else {\n+    char[] c = new char[] {input.charAt(pos)};\n+    out.write(c);\n+}\n+pos += charCount; \n             }\n         }\n     }",
    "result_reason": "junit.framework.AssertionFailedError: unescape(String) failed: expected '\\n",
    "test_result": "FAIL"
}