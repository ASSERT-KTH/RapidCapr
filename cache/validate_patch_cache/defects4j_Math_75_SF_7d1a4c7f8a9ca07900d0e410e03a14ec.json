{
    "patch": "public double getPct(Object v) {\n    if (v == null) {\n        return 0.0;\n    }\n    try {\n        // Attempt to cast v to Comparable<?>\n        Comparable<?> comparable = (Comparable<?>) v;\n        List<Object> sortedValues = new ArrayList<>(Arrays.asList(vArray));\n        Collections.sort(sortedValues);\n        int index = sortedValues.indexOf(v);\n        double pct = getCumPct(comparable, sortedValues.size());\n        return pct;\n    } catch (ClassCastException e) {\n        // If v is not Comparable, return 0.0\n        return 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..521d9157b 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -299,9 +299,23 @@ public class Frequency implements Serializable {\n      * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n      */\n     @Deprecated\n-    public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+public double getPct(Object v) {\n+    if (v == null) {\n+        return 0.0;\n+    }\n+    try {\n+        // Attempt to cast v to Comparable<?>\n+        Comparable<?> comparable = (Comparable<?>) v;\n+        List<Object> sortedValues = new ArrayList<>(Arrays.asList(vArray));\n+        Collections.sort(sortedValues);\n+        int index = sortedValues.indexOf(v);\n+        double pct = getCumPct(comparable, sortedValues.size());\n+        return pct;\n+    } catch (ClassCastException e) {\n+        // If v is not Comparable, return 0.0\n+        return 0.0;\n     }\n+}\n \n     /**\n      * Returns the percentage of values that are equal to v",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}