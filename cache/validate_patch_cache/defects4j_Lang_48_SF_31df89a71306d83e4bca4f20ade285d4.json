{
    "patch": "    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class<?> lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            // The simple case, not an array, just test the element\n            isEquals = lhs.equals(rhs);\n        } else if (lhsClass != rhs.getClass()) {\n            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n            this.setEquals(false);\n        } else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // Not an array of primitives\n            // Invoke recursive isEqual method using reflection to avoid unlimited recursion in case of circular references.\n            Method isEqualMethod = getIsEqualMethod(lhsClass);\n            try {\n                return (EqualsBuilder) isEqualMethod.invoke(this, new Object[] { lhs, rhs });\n            } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n                throw new RuntimeException(\"Reflected isEqual method isn't accessible: \" + isEqualMethod.toString(), e);\n            }\n        }\n        return this;\n    }\n    \n    private Method getIsEqualMethod(Class<?> cls) {\n        Method isEqualMethod = null;\n        try {\n            isEqualMethod = cls.getDeclaredMethod(\"isEqual\", Object[].class, Object[].class);\n            isEqualMethod.setAccessible(true); // allow to access methods marked as private\n        } catch (NoSuchMethodException | SecurityException e) {\n            throw new RuntimeException(\"isEqual method isn't found in the class: \" + cls + \" or isn't accessible\", e);\n        }\n        return isEqualMethod;\n    }\n    \n    @SuppressWarnings(\"rawtypes\")\n    public EqualsBuilder isEqual(Object[] lhs, Object[] rhs) {\n        if (lhs == rhs) {\n            return this;\n        } else if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        } else {\n            if (lhs.length != rhs.length) {\n                this.setEquals(false);\n                return this;\n            }\n            for (int i = 0; i < lhs.length && isEquals; ++i) {\n                append(lhs[i], rhs[i]);\n            }\n            return this;\n        }\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..040baf92 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -375,17 +375,14 @@ public class EqualsBuilder {\n             this.setEquals(false);\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n+        Class<?> lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+            // The simple case, not an array, just test the element\n+            isEquals = lhs.equals(rhs);\n+        } else if (lhsClass != rhs.getClass()) {\n+            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n             this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n+        } else if (lhs instanceof long[]) {\n             append((long[]) lhs, (long[]) rhs);\n         } else if (lhs instanceof int[]) {\n             append((int[]) lhs, (int[]) rhs);\n@@ -403,10 +400,46 @@ public class EqualsBuilder {\n             append((boolean[]) lhs, (boolean[]) rhs);\n         } else {\n             // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            // Invoke recursive isEqual method using reflection to avoid unlimited recursion in case of circular references.\n+            Method isEqualMethod = getIsEqualMethod(lhsClass);\n+            try {\n+                return (EqualsBuilder) isEqualMethod.invoke(this, new Object[] { lhs, rhs });\n+            } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n+                throw new RuntimeException(\"Reflected isEqual method isn't accessible: \" + isEqualMethod.toString(), e);\n+            }\n         }\n         return this;\n     }\n+    \n+    private Method getIsEqualMethod(Class<?> cls) {\n+        Method isEqualMethod = null;\n+        try {\n+            isEqualMethod = cls.getDeclaredMethod(\"isEqual\", Object[].class, Object[].class);\n+            isEqualMethod.setAccessible(true); // allow to access methods marked as private\n+        } catch (NoSuchMethodException | SecurityException e) {\n+            throw new RuntimeException(\"isEqual method isn't found in the class: \" + cls + \" or isn't accessible\", e);\n+        }\n+        return isEqualMethod;\n+    }\n+    \n+    @SuppressWarnings(\"rawtypes\")\n+    public EqualsBuilder isEqual(Object[] lhs, Object[] rhs) {\n+        if (lhs == rhs) {\n+            return this;\n+        } else if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        } else {\n+            if (lhs.length != rhs.length) {\n+                this.setEquals(false);\n+                return this;\n+            }\n+            for (int i = 0; i < lhs.length && isEquals; ++i) {\n+                append(lhs[i], rhs[i]);\n+            }\n+            return this;\n+        }\n+    }\n \n     /**\n      * <p>",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}