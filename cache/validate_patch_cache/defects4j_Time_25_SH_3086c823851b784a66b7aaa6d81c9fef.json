{
    "patch": "                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                if (nextLocal != nextAdjusted) {\n                    int nextLocalOffset = getOffset(nextLocal);\n                    if (nextLocalOffset > offsetLocal) {\n                        return nextLocalOffset;\n                    } else {\n                        long nextAdjustedTransition = nextTransition(nextAdjusted);\n                        if (nextAdjustedTransition <= instantAdjusted ||\n                            getOffset(nextAdjustedTransition) >= offsetLocal) {\n                            return offsetLocal;\n                        } else {\n                            return getOffset(nextAdjustedTransition);\n                        }\n                    }\n                }\n            } else {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if (prevLocal != prevAdjusted) {\n                   int prevAdjustedOffset = getOffset(prevAdjusted);\n                    if (prevAdjustedOffset < offsetAdjusted) {\n                        if (prevAdjusted <= instantAdjusted || \n                            getOffset(previousTransition(prevAdjusted)) < offsetAdjusted) {\n                            return offsetAdjusted;\n                        } else {\n                            return getOffset(previousTransition(prevAdjusted));\n                        }\n                    } else {\n                        return getOffset(prevAdjusted);\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..fca28d8b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,36 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+                if (nextLocal != nextAdjusted) {\n+                    int nextLocalOffset = getOffset(nextLocal);\n+                    if (nextLocalOffset > offsetLocal) {\n+                        return nextLocalOffset;\n+                    } else {\n+                        long nextAdjustedTransition = nextTransition(nextAdjusted);\n+                        if (nextAdjustedTransition <= instantAdjusted ||\n+                            getOffset(nextAdjustedTransition) >= offsetLocal) {\n+                            return offsetLocal;\n+                        } else {\n+                            return getOffset(nextAdjustedTransition);\n+                        }\n+                    }\n+                }\n+            } else {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if (prevLocal != prevAdjusted) {\n+                   int prevAdjustedOffset = getOffset(prevAdjusted);\n+                    if (prevAdjustedOffset < offsetAdjusted) {\n+                        if (prevAdjusted <= instantAdjusted || \n+                            getOffset(previousTransition(prevAdjusted)) < offsetAdjusted) {\n+                            return offsetAdjusted;\n+                        } else {\n+                            return getOffset(previousTransition(prevAdjusted));\n+                        }\n+                    } else {\n+                        return getOffset(prevAdjusted);\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}