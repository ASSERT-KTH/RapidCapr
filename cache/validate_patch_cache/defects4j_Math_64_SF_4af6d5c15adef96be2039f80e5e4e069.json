{
    "patch": "public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n    private static final double TWO_EPS_SQ = 2 * FastMath.sqrt(FastMath.sqrt(Precision.EPSILON));\n\n    /** Levenberg-Marquardt parameter. */\n    private double lmPar;\n\n    /** Parameters evolution direction associated with LM algorithm. */\n    private double[] lmDir;\n\n    /** Diagonal elements of the R matrix in the QR decomposition. */\n    private double[] diagR;\n\n    /** Norms of the columns of the jacobian matrix. */\n    private double[] jacNorm;\n\n    /** Coefficients for the L-M updating formula. */\n    private double[] beta;\n\n    /** Permutation array. */\n    private int[] permutation;\n\n    /** Rank of the jacobian matrix. */\n    private int rank;\n\n    /** DO that maximize rows or columns?. */\n    private final boolean maximize;\n\n    /**\n     * Build an optimizer for least squares problems with default settings.\n     * The default settings are {@link #DEFAULT_MAX_ITERATIONS}, {@link #DEFAULT_RELATIVE_TOLERANCE},\n     * {@link #DEFAULT_ABSOLUTE_TOLERANCE}.\n     */\n    public LevenbergMarquardtOptimizer() {\n        this(DEFAULT_MAX_ITERATIONS, DEFAULT_RELATIVE_TOLERANCE, DEFAULT_ABSOLUTE_TOLERANCE);\n    }\n\n    /**\n     * Build an optimizer with specified iteration count, and default values for relative and\n     * absolute tolerance ({@link #DEFAULT_RELATIVE_TOLERANCE} and\n     * {@link #DEFAULT_ABSOLUTE_TOLERANCE} respectively).\n     *\n     * @param maxIterations Maximum number of iterations.\n     */\n    public LevenbergMarquardtOptimizer(int maxIterations) {\n        this(maxIterations, DEFAULT_RELATIVE_TOLERANCE, DEFAULT_ABSOLUTE_TOLERANCE);\n    }\n\n    /**\n     * Build an optimizer with specified iteration count and convergence thresholds.\n     *\n     * @param maxIterations Maximum number of iterations.\n     * @param relativeTolerance Relative tolerance threshold.\n     * @param absoluteTolerance Absolute tolerance threshold.\n     */\n    public LevenbergMarquardtOptimizer(int maxIterations,\n                                        double relativeTolerance,\n                                        double absoluteTolerance) {\n        super(maxIterations, relativeTolerance, absoluteTolerance);\n        maximize = false;\n    }\n\n    /**\n     * Build an optimizer with specified iteration count and convergence thresholds.\n     *\n     * @param maxIterations Maximum number of iterations.\n     * @param relativeTolerance Relative tolerance threshold.\n     * @param absoluteTolerance Absolute tolerance threshold.\n     * @param maxCost Relative tolerance threshold on chi^2 cost function.\n     * @deprecated as of 3.1, replaced by {@link #LevenbergMarquardtOptimizer(int, double, double, double)}\n     */\n    @Deprecated\n    public LevenbergMarquardtOptimizer(int maxIterations,\n                                        double relativeTolerance,\n                                        double absoluteTolerance,\n                                        double maxCost) {\n        super(maxIterations, relativeTolerance, absoluteTolerance, maxCost);\n        maximize = false;\n    }\n\n    /**\n     * Build an optimizer with specified iteration count and convergence thresholds.\n     *\n     * @param maxIterations Maximum number of iterations.\n     * @param relativeTolerance Relative tolerance threshold.\n     * @param absoluteTolerance Absolute tolerance threshold.\n     * @param initialCost Relative tolerance threshold on chi^2 cost function.\n     */\n    public LevenbergMarquardtOptimizer(int maxIterations,\n                                        double relativeTolerance,\n                                        double absoluteTolerance,\n                                        double initialCost) {\n        super(maxIterations, relativeTolerance, absoluteTolerance, initialCost);\n        maximize = false;\n    }\n\n    /**\n     * Build a new optimizer with the specified iteration count, convergence\n     * thresholds and a flag for maximizing the residuals instead of minimizing them.\n     *\n     * @param maxIterations Maximum iteration count.\n     * @param relativeTolerance Relative convergence threshold.\n     * @param absoluteTolerance Absolute convergence threshold.\n     * @param maximize Whether to maximize the residuals.\n     * @since 2.0\n     */\n    public LevenbergMarquardtOptimizer(int maxIterations, double relativeTolerance,\n                                        double absoluteTolerance, boolean maximize) {\n        super(maxIterations, relativeTolerance, absoluteTolerance);\n        this.maximize = maximize;\n    }\n\n    /**\n     * Build a new optimizer with the specified iteration count, convergence\n     * thresholds, cost relative threshold, and a flag for maximizing the residuals\n     * instead of minimizing them.\n     *\n     * @param maxIterations Maximum iteration count.\n     * @param relativeTolerance Relative convergence threshold.\n     * @param absoluteTolerance Absolute convergence threshold.\n     * @param maxCost Maximum cost relative difference.\n     * @param maximize Whether to maximize the residuals.\n     * @since 2.2\n     * @deprecated As of 3.1, replaced by\n     *             {@link #LevenbergMarquardtOptimizer(int, double, double, double, boolean)}\n     */\n    @Deprecated\n    public LevenbergMarquardtOptimizer(int maxIterations, double relativeTolerance,\n                                        double absoluteTolerance, double maxCost, boolean maximize) {\n        super(maxIterations, relativeTolerance, absoluteTolerance, maxCost);\n        this.maximize = maximize;\n    }\n\n    /**\n     * Build a new optimizer with the specified iteration count, convergence\n     * thresholds, cost relative threshold, and a flag for maximizing the residuals\n     * instead of minimizing them.\n     *\n     * @param maxIterations Maximum iteration count.\n     * @param relativeTolerance Relative convergence threshold.\n     * @param absoluteTolerance Absolute convergence threshold.\n     * @param initialCost Initial cost relative difference.\n     * @param maximize Whether to maximize the residuals.\n     * @since 3.1\n     */\n    public LevenbergMarquardtOptimizer(int maxIterations, double relativeTolerance,\n                                        double absoluteTolerance, double initialCost, boolean maximize) {\n        super(maxIterations, relativeTolerance, absoluteTolerance, initialCost);\n        this.maximize = maximize;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public void setCost(int iteration, double[] objective) {\n        super.setCost(iteration, objective);\n        if (maximize) {\n            // We transform the cost function to its negative,\n            // to solve a maximization problem\n            cost = -cost;\n            for (int i = 0; i < objective.length; i++) {\n                objective[i] = -objective[i];\n            }\n        }\n    }\n\n    /**\n     * Solve the least squares problem.\n     *\n     * @param problemOptimizationData Optimization data set.\n     * @return the point/value pair giving the optimal value of the objective function.\n     * @throws OptimizationException if the algorithm fails to converge.\n     */\n    @Override\n    public RealVector doOptimize()\n        throws OptimizationException {\n\n        final double[] targetValues = getTarget();\n        final int nR = targetValues.length;\n        final int nC = start.getDimension();\n        final double[] residualsWeights =\n                getWeight() == null ? new double[nR] : getWeight().getWeights();\n        final double[] sortedResidualsWeights = residualsWeights.clone();\n        Arrays.sort(sortedResidualsWeights);\n        final double[] sortedResiduals = new double[nR];\n        final int[] index = new int[nR];\n        final double[] weights = new double[nR];\n        final double[] currentPoint = start.toArray();\n        final double[] lowerBound = getLowerBound();\n        final double[] upperBound = getUpperBound();\n\n        // Initialize the algorithm.\n        lmPar = 0;\n        final double initialCost = computeCost(currentPoint);\n        double[] currentObjective = getObjectives();\n        setSearchResult(new OptimizationData[] {\n            new OptimizationData(OptimizationData.OBJECTIVE_FUNCTION, currentObjective),\n            new OptimizationData(OptimizationData.COST_EVALUATION, initialCost)\n        });\n        RealVector point = new ArrayRealVector(currentPoint);\n\n//      Rescale the problem.\n        jacNorm = new double[nC];\n        beta = new double[nC];\n        diagR = new double[nC];\n\n        lmDir = new double[nC];\n        permutation = new int[nC];\n        double[][] weightedJacobian = new double[nR][nC];\n        double[] residuals = new double[nR];\n        double[] weightedResiduals = new double[nR];\n        double[] tmp = new double[nR];\n        double[] diag = new double[nC];",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\nindex 50914932e..5b55ca122 100644\n--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n@@ -238,231 +238,218 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected VectorialPointValuePair doOptimize()\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        // arrays shared with the other private methods\n-        solvedCols  = Math.min(rows, cols);\n-        diagR       = new double[cols];\n-        jacNorm     = new double[cols];\n-        beta        = new double[cols];\n-        permutation = new int[cols];\n-        lmDir       = new double[cols];\n-\n-        // local point\n-        double   delta   = 0;\n-        double   xNorm   = 0;\n-        double[] diag    = new double[cols];\n-        double[] oldX    = new double[cols];\n-        double[] oldRes  = new double[rows];\n-        double[] work1   = new double[cols];\n-        double[] work2   = new double[cols];\n-        double[] work3   = new double[cols];\n-\n-        // evaluate the function at the starting point and calculate its norm\n-        updateResidualsAndCost();\n-\n-        // outer loop\n-        lmPar = 0;\n-        boolean firstIteration = true;\n-        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n-        while (true) {\n-            incrementIterationsCounter();\n-\n-            // compute the Q.R. decomposition of the jacobian matrix\n-            VectorialPointValuePair previous = current;\n-            updateJacobian();\n-            qrDecomposition();\n-\n-            // compute Qt.res\n-            qTy(residuals);\n-            // now we don't need Q anymore,\n-            // so let jacobian contain the R matrix with its diagonal elements\n-            for (int k = 0; k < solvedCols; ++k) {\n-                int pk = permutation[k];\n-                jacobian[k][pk] = diagR[pk];\n-            }\n+public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n+    private static final double TWO_EPS_SQ = 2 * FastMath.sqrt(FastMath.sqrt(Precision.EPSILON));\n \n-            if (firstIteration) {\n+    /** Levenberg-Marquardt parameter. */\n+    private double lmPar;\n \n-                // scale the point according to the norms of the columns\n-                // of the initial jacobian\n-                xNorm = 0;\n-                for (int k = 0; k < cols; ++k) {\n-                    double dk = jacNorm[k];\n-                    if (dk == 0) {\n-                        dk = 1.0;\n-                    }\n-                    double xk = dk * point[k];\n-                    xNorm  += xk * xk;\n-                    diag[k] = dk;\n-                }\n-                xNorm = Math.sqrt(xNorm);\n+    /** Parameters evolution direction associated with LM algorithm. */\n+    private double[] lmDir;\n \n-                // initialize the step bound delta\n-                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);\n+    /** Diagonal elements of the R matrix in the QR decomposition. */\n+    private double[] diagR;\n \n-            }\n+    /** Norms of the columns of the jacobian matrix. */\n+    private double[] jacNorm;\n \n-            // check orthogonality between function vector and jacobian columns\n-            double maxCosine = 0;\n-            if (cost != 0) {\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int    pj = permutation[j];\n-                    double s  = jacNorm[pj];\n-                    if (s != 0) {\n-                        double sum = 0;\n-                        for (int i = 0; i <= j; ++i) {\n-                            sum += jacobian[i][pj] * residuals[i];\n-                        }\n-                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));\n-                    }\n-                }\n-            }\n-            if (maxCosine <= orthoTolerance) {\n-                // convergence has been reached\n-                return current;\n-            }\n+    /** Coefficients for the L-M updating formula. */\n+    private double[] beta;\n \n-            // rescale if necessary\n-            for (int j = 0; j < cols; ++j) {\n-                diag[j] = Math.max(diag[j], jacNorm[j]);\n-            }\n+    /** Permutation array. */\n+    private int[] permutation;\n \n-            // inner loop\n-            for (double ratio = 0; ratio < 1.0e-4;) {\n+    /** Rank of the jacobian matrix. */\n+    private int rank;\n \n-                // save the state\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    oldX[pj] = point[pj];\n-                }\n-                double previousCost = cost;\n-                double[] tmpVec = residuals;\n-                residuals = oldRes;\n-                oldRes    = tmpVec;\n-\n-                // determine the Levenberg-Marquardt parameter\n-                determineLMParameter(oldRes, delta, diag, work1, work2, work3);\n-\n-                // compute the new point and the norm of the evolution direction\n-                double lmNorm = 0;\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    lmDir[pj] = -lmDir[pj];\n-                    point[pj] = oldX[pj] + lmDir[pj];\n-                    double s = diag[pj] * lmDir[pj];\n-                    lmNorm  += s * s;\n-                }\n-                lmNorm = Math.sqrt(lmNorm);\n-                // on the first iteration, adjust the initial step bound.\n-                if (firstIteration) {\n-                    delta = Math.min(delta, lmNorm);\n-                }\n+    /** DO that maximize rows or columns?. */\n+    private final boolean maximize;\n \n-                // evaluate the function at x + p and calculate its norm\n-                updateResidualsAndCost();\n-                current = new VectorialPointValuePair(point, objective);\n+    /**\n+     * Build an optimizer for least squares problems with default settings.\n+     * The default settings are {@link #DEFAULT_MAX_ITERATIONS}, {@link #DEFAULT_RELATIVE_TOLERANCE},\n+     * {@link #DEFAULT_ABSOLUTE_TOLERANCE}.\n+     */\n+    public LevenbergMarquardtOptimizer() {\n+        this(DEFAULT_MAX_ITERATIONS, DEFAULT_RELATIVE_TOLERANCE, DEFAULT_ABSOLUTE_TOLERANCE);\n+    }\n \n-                // compute the scaled actual reduction\n-                double actRed = -1.0;\n-                if (0.1 * cost < previousCost) {\n-                    double r = cost / previousCost;\n-                    actRed = 1.0 - r * r;\n-                }\n+    /**\n+     * Build an optimizer with specified iteration count, and default values for relative and\n+     * absolute tolerance ({@link #DEFAULT_RELATIVE_TOLERANCE} and\n+     * {@link #DEFAULT_ABSOLUTE_TOLERANCE} respectively).\n+     *\n+     * @param maxIterations Maximum number of iterations.\n+     */\n+    public LevenbergMarquardtOptimizer(int maxIterations) {\n+        this(maxIterations, DEFAULT_RELATIVE_TOLERANCE, DEFAULT_ABSOLUTE_TOLERANCE);\n+    }\n \n-                // compute the scaled predicted reduction\n-                // and the scaled directional derivative\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    double dirJ = lmDir[pj];\n-                    work1[j] = 0;\n-                    for (int i = 0; i <= j; ++i) {\n-                        work1[i] += jacobian[i][pj] * dirJ;\n-                    }\n-                }\n-                double coeff1 = 0;\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    coeff1 += work1[j] * work1[j];\n-                }\n-                double pc2 = previousCost * previousCost;\n-                coeff1 = coeff1 / pc2;\n-                double coeff2 = lmPar * lmNorm * lmNorm / pc2;\n-                double preRed = coeff1 + 2 * coeff2;\n-                double dirDer = -(coeff1 + coeff2);\n-\n-                // ratio of the actual to the predicted reduction\n-                ratio = (preRed == 0) ? 0 : (actRed / preRed);\n-\n-                // update the step bound\n-                if (ratio <= 0.25) {\n-                    double tmp =\n-                        (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;\n-                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {\n-                            tmp = 0.1;\n-                        }\n-                        delta = tmp * Math.min(delta, 10.0 * lmNorm);\n-                        lmPar /= tmp;\n-                } else if ((lmPar == 0) || (ratio >= 0.75)) {\n-                    delta = 2 * lmNorm;\n-                    lmPar *= 0.5;\n-                }\n+    /**\n+     * Build an optimizer with specified iteration count and convergence thresholds.\n+     *\n+     * @param maxIterations Maximum number of iterations.\n+     * @param relativeTolerance Relative tolerance threshold.\n+     * @param absoluteTolerance Absolute tolerance threshold.\n+     */\n+    public LevenbergMarquardtOptimizer(int maxIterations,\n+                                        double relativeTolerance,\n+                                        double absoluteTolerance) {\n+        super(maxIterations, relativeTolerance, absoluteTolerance);\n+        maximize = false;\n+    }\n \n-                // test for successful iteration.\n-                if (ratio >= 1.0e-4) {\n-                    // successful iteration, update the norm\n-                    firstIteration = false;\n-                    xNorm = 0;\n-                    for (int k = 0; k < cols; ++k) {\n-                        double xK = diag[k] * point[k];\n-                        xNorm    += xK * xK;\n-                    }\n-                    xNorm = Math.sqrt(xNorm);\n-\n-                    // tests for convergence.\n-                    // we use the vectorial convergence checker\n-                } else {\n-                    // failed iteration, reset the previous values\n-                    cost = previousCost;\n-                    for (int j = 0; j < solvedCols; ++j) {\n-                        int pj = permutation[j];\n-                        point[pj] = oldX[pj];\n-                    }\n-                    tmpVec    = residuals;\n-                    residuals = oldRes;\n-                    oldRes    = tmpVec;\n-                }\n-                if (checker==null) {\n-                \tif (((Math.abs(actRed) <= costRelativeTolerance) &&\n-                        (preRed <= costRelativeTolerance) &&\n-                        (ratio <= 2.0)) ||\n-                       (delta <= parRelativeTolerance * xNorm)) {\n-                       return current;\n-                   }\n-                } else {\n-                    if (checker.converged(getIterations(), previous, current)) {\n-                        return current;\n-                    }\n-                }\n-                // tests for termination and stringent tolerances\n-                // (2.2204e-16 is the machine epsilon for IEEE754)\n-                if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,\n-                            costRelativeTolerance);\n-                } else if (delta <= 2.2204e-16 * xNorm) {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,\n-                            parRelativeTolerance);\n-                } else if (maxCosine <= 2.2204e-16)  {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,\n-                            orthoTolerance);\n-                }\n+    /**\n+     * Build an optimizer with specified iteration count and convergence thresholds.\n+     *\n+     * @param maxIterations Maximum number of iterations.\n+     * @param relativeTolerance Relative tolerance threshold.\n+     * @param absoluteTolerance Absolute tolerance threshold.\n+     * @param maxCost Relative tolerance threshold on chi^2 cost function.\n+     * @deprecated as of 3.1, replaced by {@link #LevenbergMarquardtOptimizer(int, double, double, double)}\n+     */\n+    @Deprecated\n+    public LevenbergMarquardtOptimizer(int maxIterations,\n+                                        double relativeTolerance,\n+                                        double absoluteTolerance,\n+                                        double maxCost) {\n+        super(maxIterations, relativeTolerance, absoluteTolerance, maxCost);\n+        maximize = false;\n+    }\n \n-            }\n+    /**\n+     * Build an optimizer with specified iteration count and convergence thresholds.\n+     *\n+     * @param maxIterations Maximum number of iterations.\n+     * @param relativeTolerance Relative tolerance threshold.\n+     * @param absoluteTolerance Absolute tolerance threshold.\n+     * @param initialCost Relative tolerance threshold on chi^2 cost function.\n+     */\n+    public LevenbergMarquardtOptimizer(int maxIterations,\n+                                        double relativeTolerance,\n+                                        double absoluteTolerance,\n+                                        double initialCost) {\n+        super(maxIterations, relativeTolerance, absoluteTolerance, initialCost);\n+        maximize = false;\n+    }\n \n-        }\n+    /**\n+     * Build a new optimizer with the specified iteration count, convergence\n+     * thresholds and a flag for maximizing the residuals instead of minimizing them.\n+     *\n+     * @param maxIterations Maximum iteration count.\n+     * @param relativeTolerance Relative convergence threshold.\n+     * @param absoluteTolerance Absolute convergence threshold.\n+     * @param maximize Whether to maximize the residuals.\n+     * @since 2.0\n+     */\n+    public LevenbergMarquardtOptimizer(int maxIterations, double relativeTolerance,\n+                                        double absoluteTolerance, boolean maximize) {\n+        super(maxIterations, relativeTolerance, absoluteTolerance);\n+        this.maximize = maximize;\n+    }\n \n+    /**\n+     * Build a new optimizer with the specified iteration count, convergence\n+     * thresholds, cost relative threshold, and a flag for maximizing the residuals\n+     * instead of minimizing them.\n+     *\n+     * @param maxIterations Maximum iteration count.\n+     * @param relativeTolerance Relative convergence threshold.\n+     * @param absoluteTolerance Absolute convergence threshold.\n+     * @param maxCost Maximum cost relative difference.\n+     * @param maximize Whether to maximize the residuals.\n+     * @since 2.2\n+     * @deprecated As of 3.1, replaced by\n+     *             {@link #LevenbergMarquardtOptimizer(int, double, double, double, boolean)}\n+     */\n+    @Deprecated\n+    public LevenbergMarquardtOptimizer(int maxIterations, double relativeTolerance,\n+                                        double absoluteTolerance, double maxCost, boolean maximize) {\n+        super(maxIterations, relativeTolerance, absoluteTolerance, maxCost);\n+        this.maximize = maximize;\n+    }\n+\n+    /**\n+     * Build a new optimizer with the specified iteration count, convergence\n+     * thresholds, cost relative threshold, and a flag for maximizing the residuals\n+     * instead of minimizing them.\n+     *\n+     * @param maxIterations Maximum iteration count.\n+     * @param relativeTolerance Relative convergence threshold.\n+     * @param absoluteTolerance Absolute convergence threshold.\n+     * @param initialCost Initial cost relative difference.\n+     * @param maximize Whether to maximize the residuals.\n+     * @since 3.1\n+     */\n+    public LevenbergMarquardtOptimizer(int maxIterations, double relativeTolerance,\n+                                        double absoluteTolerance, double initialCost, boolean maximize) {\n+        super(maxIterations, relativeTolerance, absoluteTolerance, initialCost);\n+        this.maximize = maximize;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void setCost(int iteration, double[] objective) {\n+        super.setCost(iteration, objective);\n+        if (maximize) {\n+            // We transform the cost function to its negative,\n+            // to solve a maximization problem\n+            cost = -cost;\n+            for (int i = 0; i < objective.length; i++) {\n+                objective[i] = -objective[i];\n+            }\n+        }\n     }\n \n+    /**\n+     * Solve the least squares problem.\n+     *\n+     * @param problemOptimizationData Optimization data set.\n+     * @return the point/value pair giving the optimal value of the objective function.\n+     * @throws OptimizationException if the algorithm fails to converge.\n+     */\n+    @Override\n+    public RealVector doOptimize()\n+        throws OptimizationException {\n+\n+        final double[] targetValues = getTarget();\n+        final int nR = targetValues.length;\n+        final int nC = start.getDimension();\n+        final double[] residualsWeights =\n+                getWeight() == null ? new double[nR] : getWeight().getWeights();\n+        final double[] sortedResidualsWeights = residualsWeights.clone();\n+        Arrays.sort(sortedResidualsWeights);\n+        final double[] sortedResiduals = new double[nR];\n+        final int[] index = new int[nR];\n+        final double[] weights = new double[nR];\n+        final double[] currentPoint = start.toArray();\n+        final double[] lowerBound = getLowerBound();\n+        final double[] upperBound = getUpperBound();\n+\n+        // Initialize the algorithm.\n+        lmPar = 0;\n+        final double initialCost = computeCost(currentPoint);\n+        double[] currentObjective = getObjectives();\n+        setSearchResult(new OptimizationData[] {\n+            new OptimizationData(OptimizationData.OBJECTIVE_FUNCTION, currentObjective),\n+            new OptimizationData(OptimizationData.COST_EVALUATION, initialCost)\n+        });\n+        RealVector point = new ArrayRealVector(currentPoint);\n+\n+//      Rescale the problem.\n+        jacNorm = new double[nC];\n+        beta = new double[nC];\n+        diagR = new double[nC];\n+\n+        lmDir = new double[nC];\n+        permutation = new int[nC];\n+        double[][] weightedJacobian = new double[nR][nC];\n+        double[] residuals = new double[nR];\n+        double[] weightedResiduals = new double[nR];\n+        double[] tmp = new double[nR];\n+        double[] diag = new double[nC];\n+\n     /**\n      * Determine the Levenberg-Marquardt parameter.\n      * <p>This implementation is a translation in Java of the MINPACK",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}