{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (NodeUtil.isControlStructure(n.getParent())){\n        return false;\n      }\n      // We only have to worry about methods with an implicit 'this'\n      // param, or this doesn't happen.\n      return !NodeUtil.isFunctionBlock(n.getParent()) &&\n          n.hasOneChild() && NodeUtil.isExpressionNode(n.getFirstChild());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..c662efd4 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -518,24 +518,13 @@ public class PeepholeSubstituteAlternateSyntax\n    */\n   private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+      if (NodeUtil.isControlStructure(n.getParent())){\n+        return false;\n       }\n-    }\n-\n-    return false;\n-  }\n+      // We only have to worry about methods with an implicit 'this'\n+      // param, or this doesn't happen.\n+      return !NodeUtil.isFunctionBlock(n.getParent()) &&\n+          n.hasOneChild() && NodeUtil.isExpressionNode(n.getFirstChild());\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}