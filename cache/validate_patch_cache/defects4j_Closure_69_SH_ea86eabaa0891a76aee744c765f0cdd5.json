{
    "patch": "if (childType instanceof FunctionType) {\n  FunctionType functionTypeInner = (FunctionType) childType;\n\n  boolean isExtern = false;\n  JSDocInfo functionJSDocInfo = functionTypeInner.getJSDocInfo();\n  if (functionJSDocInfo != null) {\n    String sourceName = functionJSDocInfo.getSourceFileName();\n    CompilerInput functionSource = compiler.getInput(sourceName);\n    isExtern = functionSource.isExtern();\n  }\n\n  // Functions with explicit 'this' types must be called in a GETPROP\n  // or GETELEM.\n  if (functionTypeInner.getTypeOfThis() != null\n      && !NodeUtil.isGet(functionTypeInner.getTypeOfThis().getReferenceName(), n.getParent())) {\n    report(t, n, EXPLICIT_THIS_PARAMETER_NOT_ALLOWED);\n    ensureTyped(t, n);\n    return;\n  }\n\n  if (functionTypeInner.isConstructor() &&\n      !functionTypeInner.isNativeObjectType() &&\n      (functionTypeInner.getReturnType().isUnknownType() ||\n          functionTypeInner.getReturnType().isVoidType() ||\n          !isExtern)) {\n    report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n  }\n\n  visitParameterList(t, n, functionTypeInner);\n  ensureTyped(t, n, functionTypeInner.getReturnType());\n} ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..66b0dc55 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,37 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (childType instanceof FunctionType) {\n+  FunctionType functionTypeInner = (FunctionType) childType;\n+\n+  boolean isExtern = false;\n+  JSDocInfo functionJSDocInfo = functionTypeInner.getJSDocInfo();\n+  if (functionJSDocInfo != null) {\n+    String sourceName = functionJSDocInfo.getSourceFileName();\n+    CompilerInput functionSource = compiler.getInput(sourceName);\n+    isExtern = functionSource.isExtern();\n+  }\n+\n+  // Functions with explicit 'this' types must be called in a GETPROP\n+  // or GETELEM.\n+  if (functionTypeInner.getTypeOfThis() != null\n+      && !NodeUtil.isGet(functionTypeInner.getTypeOfThis().getReferenceName(), n.getParent())) {\n+    report(t, n, EXPLICIT_THIS_PARAMETER_NOT_ALLOWED);\n+    ensureTyped(t, n);\n+    return;\n+  }\n+\n+  if (functionTypeInner.isConstructor() &&\n+      !functionTypeInner.isNativeObjectType() &&\n+      (functionTypeInner.getReturnType().isUnknownType() ||\n+          functionTypeInner.getReturnType().isVoidType() ||\n+          !isExtern)) {\n+    report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+  }\n+\n+  visitParameterList(t, n, functionTypeInner);\n+  ensureTyped(t, n, functionTypeInner.getReturnType());\n+} \n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: variable isExtern is already defined in method visitCall(NodeTraversal,Node)",
    "test_result": "ERROR"
}