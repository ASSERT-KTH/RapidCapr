{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\nif (fieldInstance != null || candidate == null) {\n    return;\n}\nfield.setAccessible(true);\ntry {\n    field.set(fieldInstance, candidate);\n} catch (IllegalAccessException e) {\n    throw new RuntimeException(\"Failed to set field with candidate.\", e);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..9c5e0b569 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,19 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+if (fieldInstance != null || candidate == null) {\n+    return;\n+}\n+field.setAccessible(true);\n+try {\n+    field.set(fieldInstance, candidate);\n+} catch (IllegalAccessException e) {\n+    throw new RuntimeException(\"Failed to set field with candidate.\", e);\n+}\n         }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<histogram2> was not:<null>",
    "test_result": "FAIL"
}