{
    "patch": "import org.apache.commons.lang.math.NumberUtils;\n\npublic class Fraction {\n    private final int numerator;\n    private final int denominator;\n\n    public Fraction(int numerator, int denominator) {\n        if (denominator == 0) {\n            throw new IllegalArgumentException(\"Divide by zero error.\");\n        }\n        if (denominator < 0) {\n            numerator = -numerator;\n            denominator = -denominator;\n        }\n        int gcd = NumberUtils.gcd(numerator, denominator);\n        this.numerator = numerator / gcd;\n        this.denominator = denominator / gcd;\n    }\n\n    public static Fraction getFraction(int numerator, int denominator) {\n        return new Fraction(numerator, denominator);\n    }\n\n    public Fraction reduce() {\n        int gcd = NumberUtils.gcd(Math.abs(numerator), denominator);\n        if (gcd == denominator) {\n            return Fraction.getFraction(numerator / denominator, 1);\n        } else if (gcd == 1) {\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj instanceof Fraction) {\n            Fraction other = (Fraction) obj;\n            return numerator == other.numerator && denominator == other.denominator;\n        }\n        return false;\n    }\n\n    @Override\n    public int hashCode() {\n        return 37 * (37 * 17 + numerator) + denominator;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..2fe85d45 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,53 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+import org.apache.commons.lang.math.NumberUtils;\n+\n+public class Fraction {\n+    private final int numerator;\n+    private final int denominator;\n+\n+    public Fraction(int numerator, int denominator) {\n+        if (denominator == 0) {\n+            throw new IllegalArgumentException(\"Divide by zero error.\");\n+        }\n+        if (denominator < 0) {\n+            numerator = -numerator;\n+            denominator = -denominator;\n+        }\n+        int gcd = NumberUtils.gcd(numerator, denominator);\n+        this.numerator = numerator / gcd;\n+        this.denominator = denominator / gcd;\n+    }\n+\n+    public static Fraction getFraction(int numerator, int denominator) {\n+        return new Fraction(numerator, denominator);\n+    }\n+\n+    public Fraction reduce() {\n+        int gcd = NumberUtils.gcd(Math.abs(numerator), denominator);\n+        if (gcd == denominator) {\n+            return Fraction.getFraction(numerator / denominator, 1);\n+        } else if (gcd == 1) {\n+            return this;\n+        }\n+        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj instanceof Fraction) {\n+            Fraction other = (Fraction) obj;\n+            return numerator == other.numerator && denominator == other.denominator;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 37 * (37 * 17 + numerator) + denominator;\n+    }\n+}\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}