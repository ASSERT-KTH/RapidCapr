{
    "patch": "private static double[][] computeSquareRoot(double[][] a) {\n    final int n = a.length;\n    final double[][] res = new double[n][n];\n\n    for (int j = 0; j < n; j++) {\n        res[j][j] = Math.sqrt(Math.abs(a[j][j])); // Take the absolute value to avoid NaN results from negative eigenvalues\n        for (int i = 0; i < j; i++) {\n            res[i][j] = 0;\n            for (int k = 0; k < j; k++) {\n                res[i][j] += res[i][k] * res[k][j];\n            }\n            if (res[j][j] != 0) {\n                res[i][j] /= res[j][j];\n            }\n        }\n    }\n\n    return res;\n}\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final int MAX_ROWS_COLS = 10000;\n    final int rows = m.getRowDimension();\n    final int cols = m.getColumnDimension();\n\n    if (rows > MAX_ROWS_COLS || cols > MAX_ROWS_COLS) {\n        throw new RuntimeException(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n    }\n\n    double[][] mData = m.getData();\n    if ((long) rows * cols > Integer.MAX_VALUE) {\n        throw new RuntimeException(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n    }\n\n    return MatrixUtils.createRealMatrix(computeSquareRoot(mData));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..117ea108b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,40 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private static double[][] computeSquareRoot(double[][] a) {\n+    final int n = a.length;\n+    final double[][] res = new double[n][n];\n+\n+    for (int j = 0; j < n; j++) {\n+        res[j][j] = Math.sqrt(Math.abs(a[j][j])); // Take the absolute value to avoid NaN results from negative eigenvalues\n+        for (int i = 0; i < j; i++) {\n+            res[i][j] = 0;\n+            for (int k = 0; k < j; k++) {\n+                res[i][j] += res[i][k] * res[k][j];\n+            }\n+            if (res[j][j] != 0) {\n+                res[i][j] /= res[j][j];\n+            }\n+        }\n+    }\n+\n+    return res;\n+}\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int MAX_ROWS_COLS = 10000;\n+    final int rows = m.getRowDimension();\n+    final int cols = m.getColumnDimension();\n+\n+    if (rows > MAX_ROWS_COLS || cols > MAX_ROWS_COLS) {\n+        throw new RuntimeException(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n+    }\n+\n+    double[][] mData = m.getData();\n+    if ((long) rows * cols > Integer.MAX_VALUE) {\n+        throw new RuntimeException(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n     }\n+\n+    return MatrixUtils.createRealMatrix(computeSquareRoot(mData));\n+}\n }",
    "result_reason": "java.lang.RuntimeException: Matrix size exceeds maximum limit. Please use a smaller matrix.",
    "test_result": "FAIL"
}