{
    "patch": "public String getprop(String key) {\n    String value = \"\";\n    try {\n        Properties prop = new Properties();\n        InputStream input = new FileInputStream(\"config.properties\");\n        prop.load(input);\n        value = prop.getProperty(key);\n        input.close();\n    } catch (Exception e) {\n        System.out.println(\"Error while trying to read from config file: \" + e.getMessage());\n    }\n    return value;\n}\n\npublic void testGetprop4() {\n    String key = \"invalid_key\";\n    String value = getprop(key);\n    assertNull(value);\n    String[] warnings = getWarnings();\n    assertNotNull(warnings);\n    assertTrue(\"expected a warning\", warnings.length > 0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..efd5f65c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String key) {\n+    String value = \"\";\n+    try {\n+        Properties prop = new Properties();\n+        InputStream input = new FileInputStream(\"config.properties\");\n+        prop.load(input);\n+        value = prop.getProperty(key);\n+        input.close();\n+    } catch (Exception e) {\n+        System.out.println(\"Error while trying to read from config file: \" + e.getMessage());\n+    }\n+    return value;\n+}\n+\n+public void testGetprop4() {\n+    String key = \"invalid_key\";\n+    String value = getprop(key);\n+    assertNull(value);\n+    String[] warnings = getWarnings();\n+    assertNotNull(warnings);\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}