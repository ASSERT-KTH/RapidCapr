{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n  Node argNode = callNode.getFirstChild().getNext();\n  Node lhsNode = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n  while (argNode != null && lhsNode != null) {\n    Node argValue = null;\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      if (argNode.isThis()) {\n        argNode = argNode.getNext();\n      }\n      // TODO(johnlenz): Support replace this with a value.\n      if (!lhsNode.isName()) {\n        lhsNode = lhsNode.getNext();\n      }\n    }\n    if (!lhsNode.isName()) {\n      return CanInlineResult.NO;\n    }\n    if (argNode.isName()) {\n      argValue = block.getFirstChild();\n      while (argValue != null\n          && !argValue.isName()\n          && !argValue.isFunction()) {\n        argValue = argValue.getNext();\n      }\n    }\n\n    if (!lhsNode.getString().equals(argNode.getString())\n        || (argValue == null\n            ? NodeUtil.mayHaveSideEffects(argNode, compiler)\n            : NodeUtil.mayHaveSideEffects(argValue, compiler)\n                || NodeUtil.mayHaveSideEffectsBetween(argNode.getNext(), block.getLastChild()))\n        || (argValue == null\n            ? NodeUtil.mayEffectMutableState(argNode, compiler)\n            : NodeUtil.mayEffectMutableState(argValue, compiler))\n                && NodeUtil.getNameReferenceCount(block, lhsNode.getString()) > 1) {\n      return CanInlineResult.NO;\n    }\n\n    argNode = argNode.getNext();\n    lhsNode = lhsNode.getNext();\n  }\n\n  if (lhsNode != null || argNode != null) {\n    return CanInlineResult.NO;\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..beca796f 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,61 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n-\n-    Node block = fnNode.getLastChild();\n-\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  Node block = fnNode.getLastChild();\n+  Node argNode = callNode.getFirstChild().getNext();\n+  Node lhsNode = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+  while (argNode != null && lhsNode != null) {\n+    Node argValue = null;\n+    if (NodeUtil.isFunctionObjectCall(callNode)) {\n+      if (argNode.isThis()) {\n+        argNode = argNode.getNext();\n+      }\n+      // TODO(johnlenz): Support replace this with a value.\n+      if (!lhsNode.isName()) {\n+        lhsNode = lhsNode.getNext();\n       }\n     }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+    if (!lhsNode.isName()) {\n+      return CanInlineResult.NO;\n+    }\n+    if (argNode.isName()) {\n+      argValue = block.getFirstChild();\n+      while (argValue != null\n+          && !argValue.isName()\n+          && !argValue.isFunction()) {\n+        argValue = argValue.getNext();\n       }\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+    if (!lhsNode.getString().equals(argNode.getString())\n+        || (argValue == null\n+            ? NodeUtil.mayHaveSideEffects(argNode, compiler)\n+            : NodeUtil.mayHaveSideEffects(argValue, compiler)\n+                || NodeUtil.mayHaveSideEffectsBetween(argNode.getNext(), block.getLastChild()))\n+        || (argValue == null\n+            ? NodeUtil.mayEffectMutableState(argNode, compiler)\n+            : NodeUtil.mayEffectMutableState(argValue, compiler))\n+                && NodeUtil.getNameReferenceCount(block, lhsNode.getString()) > 1) {\n+      return CanInlineResult.NO;\n     }\n \n-    return CanInlineResult.YES;\n+    argNode = argNode.getNext();\n+    lhsNode = lhsNode.getNext();\n+  }\n+\n+  if (lhsNode != null || argNode != null) {\n+    return CanInlineResult.NO;\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}