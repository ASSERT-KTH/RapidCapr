{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    if (m.getColumnDimension() != m.getRowDimension()) {\n        throw new IllegalArgumentException(\"Matrix must be square\");\n    }\n    \n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(\n            Arrays.stream(dec.getRealEigenvalues())\n                  .map(d -> FastMath.sqrt(FastMath.max(d, 0)))\n                  .toArray()\n    );\n    final RealMatrix V = dec.getV();\n    final RealMatrix Vinv = new LUDecomposition(V).getSolver().getInverse();\n    \n    return V.multiply(sqrtD).multiply(Vinv);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c769d427e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    if (m.getColumnDimension() != m.getRowDimension()) {\n+        throw new IllegalArgumentException(\"Matrix must be square\");\n     }\n+    \n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(\n+            Arrays.stream(dec.getRealEigenvalues())\n+                  .map(d -> FastMath.sqrt(FastMath.max(d, 0)))\n+                  .toArray()\n+    );\n+    final RealMatrix V = dec.getV();\n+    final RealMatrix Vinv = new LUDecomposition(V).getSolver().getInverse();\n+    \n+    return V.multiply(sqrtD).multiply(Vinv);\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}