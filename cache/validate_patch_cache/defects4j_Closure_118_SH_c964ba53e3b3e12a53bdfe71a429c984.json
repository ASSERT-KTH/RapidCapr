{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  boolean hasNumericKeys = false;\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    if (child.isString()) {\n      // We should never see a mix of numbers and strings.\n      String name = child.getString();\n      T type = typeSystem.getType(getScope(), n, name);\n      Property prop = getProperty(name);\n      if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n        // TODO(user): It doesn't look like the user can do much in this\n        // case right now.\n        if (propertiesToErrorFor.containsKey(name)) {\n          compiler.report(\n              JSError.make(\n                  t.getSourceName(),\n                  child,\n                  propertiesToErrorFor.get(name),\n                  Warnings.INVALIDATION,\n                  name,\n                  (type == null ? \"null\" : type.toString()),\n                  n.toString(),\n                  \"\"));\n        }\n      }\n    } else {\n      hasNumericKeys = true;\n    }\n  }\n  if (hasNumericKeys) {\n    compiler.report(JSError.make(\n        t.getSourceName(),\n        n,\n        \"Object literal may not have numeric keys\",\n        INVALID_OBJLIT_KEY_ERROR));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..95a87d79 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,42 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  boolean hasNumericKeys = false;\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    if (child.isString()) {\n+      // We should never see a mix of numbers and strings.\n+      String name = child.getString();\n+      T type = typeSystem.getType(getScope(), n, name);\n+      Property prop = getProperty(name);\n+      if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+        // TODO(user): It doesn't look like the user can do much in this\n+        // case right now.\n+        if (propertiesToErrorFor.containsKey(name)) {\n+          compiler.report(\n+              JSError.make(\n+                  t.getSourceName(),\n+                  child,\n+                  propertiesToErrorFor.get(name),\n+                  Warnings.INVALIDATION,\n+                  name,\n+                  (type == null ? \"null\" : type.toString()),\n+                  n.toString(),\n+                  \"\"));\n+        }\n+      }\n+    } else {\n+      hasNumericKeys = true;\n+    }\n+  }\n+  if (hasNumericKeys) {\n+    compiler.report(JSError.make(\n+        t.getSourceName(),\n+        n,\n+        \"Object literal may not have numeric keys\",\n+        INVALID_OBJLIT_KEY_ERROR));\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}