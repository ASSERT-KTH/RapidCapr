{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n        Name name = workList.pop();\n        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n            continue;\n        }\n        if (name.aliasingGets == 0 && (name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION || name.type == Name.Type.VAR)) {\n            workList.addAll(name.props);\n            continue;\n        }\n        if (name.globalSets == 1 && name.localSets == 0 && name.getDeclaration() != null) {\n            boolean canInline = true;\n            for (Ref ref : name.getRefs()) {\n                if (ref == name.getDeclaration()) {\n                    continue;\n                }\n                if (ref.type != Ref.Type.ALIASING_GET || !ref.isLastParent()) {\n                    canInline = false;\n                    break;\n                }\n            }\n            if (canInline) {\n                Name declarationName = name.getDeclaration().getName();\n                Ref ref = declarationName.getDeclaration();\n                Node lvalue = ref.getNode();\n                Node rvalue = name.getInitialValue();\n                Node newStatement;\n                if (name.type == Name.Type.VAR) {\n                    if (rvalue == null || NodeUtil.mayHaveSideEffects(rvalue)) {\n                        continue;\n                    }\n                    newStatement = IR.var(IR.name(name.id), rvalue.detach());\n                } else {\n                    Node nameNode = IR.name(name.id).srcref(lvalue);\n                    newStatement = IR.exprResult(IR.assign(nameNode, rvalue.detach()));\n                }\n                newStatement.srcrefTree(lvalue);\n                NodeUtil.insertAfter(lvalue, newStatement);\n                for (Ref inlineRef : name.getRefs()) {\n                    if (inlineRef == declarationName.getDeclaration()) {\n                        continue;\n                    }\n                    NodeUtil.removeChild(inlineRef.getNode().getParent(), inlineRef.getNode());\n                }\n                name.removeRef(declarationName.getDeclaration());\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..fe82eb00 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,56 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n+private void inlineAliases(GlobalNamespace namespace) {\n     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n     while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n-      }\n-\n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+        Name name = workList.pop();\n+        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+            continue;\n+        }\n+        if (name.aliasingGets == 0 && (name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION || name.type == Name.Type.VAR)) {\n+            workList.addAll(name.props);\n+            continue;\n+        }\n+        if (name.globalSets == 1 && name.localSets == 0 && name.getDeclaration() != null) {\n+            boolean canInline = true;\n+            for (Ref ref : name.getRefs()) {\n+                if (ref == name.getDeclaration()) {\n+                    continue;\n+                }\n+                if (ref.type != Ref.Type.ALIASING_GET || !ref.isLastParent()) {\n+                    canInline = false;\n+                    break;\n+                }\n+            }\n+            if (canInline) {\n+                Name declarationName = name.getDeclaration().getName();\n+                Ref ref = declarationName.getDeclaration();\n+                Node lvalue = ref.getNode();\n+                Node rvalue = name.getInitialValue();\n+                Node newStatement;\n+                if (name.type == Name.Type.VAR) {\n+                    if (rvalue == null || NodeUtil.mayHaveSideEffects(rvalue)) {\n+                        continue;\n+                    }\n+                    newStatement = IR.var(IR.name(name.id), rvalue.detach());\n+                } else {\n+                    Node nameNode = IR.name(name.id).srcref(lvalue);\n+                    newStatement = IR.exprResult(IR.assign(nameNode, rvalue.detach()));\n+                }\n+                newStatement.srcrefTree(lvalue);\n+                NodeUtil.insertAfter(lvalue, newStatement);\n+                for (Ref inlineRef : name.getRefs()) {\n+                    if (inlineRef == declarationName.getDeclaration()) {\n+                        continue;\n+                    }\n+                    NodeUtil.removeChild(inlineRef.getNode().getParent(), inlineRef.getNode());\n+                }\n+                name.removeRef(declarationName.getDeclaration());\n             }\n-          }\n         }\n-      }\n-\n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n     }\n-  }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}