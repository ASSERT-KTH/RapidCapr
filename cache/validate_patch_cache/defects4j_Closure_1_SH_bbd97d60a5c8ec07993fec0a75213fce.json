{
    "patch": "      int index = 0;\n      Node curArg = argList.getFirstChild();\n      while (curArg != null) {\n        Node nextArg = curArg.getNext();\n        Var var = fnScope.getVar(curArg.getString());\n        if (!referenced.contains(var)) {\n          Node nameNode = curArg.getFirstChild();\n          if (nameNode != null && nameNode.isName()) {\n            Node defaultValue = curArg.getLastChild();\n            if (defaultValue == null || !defaultValue.isDefaultValue()) {\n              argList.removeChild(curArg);\n              compiler.reportCodeChange();\n            }\n          }\n        } else {\n          String name = curArg.getString();\n          if (var != null && !var.getName().equals(name)) {\n            // ugly hack to make verifyScopes happy\n            var.setScope(fnScope.getParent());\n          }\n          referencedArgs.put(name, index);\n        }\n        index++;\n        curArg = nextArg;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..269d7d30 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,30 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      int index = 0;\n+      Node curArg = argList.getFirstChild();\n+      while (curArg != null) {\n+        Node nextArg = curArg.getNext();\n+        Var var = fnScope.getVar(curArg.getString());\n+        if (!referenced.contains(var)) {\n+          Node nameNode = curArg.getFirstChild();\n+          if (nameNode != null && nameNode.isName()) {\n+            Node defaultValue = curArg.getLastChild();\n+            if (defaultValue == null || !defaultValue.isDefaultValue()) {\n+              argList.removeChild(curArg);\n+              compiler.reportCodeChange();\n+            }\n+          }\n+        } else {\n+          String name = curArg.getString();\n+          if (var != null && !var.getName().equals(name)) {\n+            // ugly hack to make verifyScopes happy\n+            var.setScope(fnScope.getParent());\n+          }\n+          referencedArgs.put(name, index);\n+        }\n+        index++;\n+        curArg = nextArg;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}