{
    "patch": "    private static Type tryResolveTypeVariable(Type type, Map<Type, Type> context, Type resolvedType) {\n        if (type == null) {\n            return null;\n        }\n        if (context.containsKey(type)) {\n            Type resolved = context.get(type);\n            if (resolved == null) {\n                return type;\n            }\n            if (resolved.equals(resolvedType)) {\n                return type;\n            }\n            return tryResolveTypeVariable(resolved, context, resolvedType);\n        } else if (type instanceof TypeVariable) {\n            return tryResolveTypeVariable(((TypeVariable) type).getBounds()[0], context, resolvedType);\n        }\n        return type;\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..f6e122ad7 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,24 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+    private static Type tryResolveTypeVariable(Type type, Map<Type, Type> context, Type resolvedType) {\n+        if (type == null) {\n+            return null;\n+        }\n+        if (context.containsKey(type)) {\n+            Type resolved = context.get(type);\n+            if (resolved == null) {\n+                return type;\n+            }\n+            if (resolved.equals(resolvedType)) {\n+                return type;\n+            }\n+            return tryResolveTypeVariable(resolved, context, resolvedType);\n+        } else if (type instanceof TypeVariable) {\n+            return tryResolveTypeVariable(((TypeVariable) type).getBounds()[0], context, resolvedType);\n+        }\n+        return type;\n+    }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}