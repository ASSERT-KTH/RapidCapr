{
    "patch": "        if (offsetLocal != offsetAdjusted) {\n            // Find the transition points from the local and adjusted instants, respectively\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            \n            if (nextLocal == nextAdjusted) {\n                // If the two transition points are the same, then we know that the two values for \"getOffset\" should be\n                // identical. If they are not, then \"instantLocal\" is in a daylight-saving gap.\n                \n                // Calculate the time difference in hours between the two transitions\n                int diff = offsetAdjusted - offsetLocal;\n\n                // If \"instantLocal\" lies at or after the transition and \"instantAdjusted\" lies at or before the\n                // transition, then we know that \"instantLocal\" lies in a daylight-saving gap.\n                if ((instantLocal >= nextLocal) && (instantAdjusted <= nextLocal)) {\n                    return offsetLocal;\n                }\n\n                // If the difference between the two instants is greater than the difference in offsets, then the gap\n                // is not causing a problem (meaning \"instantLocal\" is on or after the transition point)\n                if ((instantLocal - nextLocal) >= (diff * DateTimeConstants.MILLIS_PER_HOUR)) {\n                    return offsetLocal;\n                }\n            } else {\n                // If the transition points are different, then the code below checks if the local time, or the\n                // adjusted time, is closer to the next transition point.\n\n                // Check if instants are in the gap immediately after a daylight saving transition\n                int offsetNext = getOffset(nextAdjusted - 1);\n                int diff = offsetAdjusted - offsetNext;\n                if ((nextLocal - instantAdjusted) < (diff * DateTimeConstants.MILLIS_PER_HOUR)) {\n                    return offsetLocal;\n                } else if ((nextAdjusted - instantLocal) < (diff * DateTimeConstants.MILLIS_PER_HOUR)) {\n                    return offsetNext;\n                }\n\n                // Calculate the time difference in hours between the transition point with the larger offset and the\n                // value of \"instantLocal\". If negative, then the local time is closer to the larger offset transition\n                diff = offsetLocal - offsetAdjusted;\n                if (diff > 0) {\n                    if ((nextLocal - instantLocal) >= (diff * DateTimeConstants.MILLIS_PER_HOUR)) {\n                        return offsetNext;\n                    }\n                } else {\n                    if ((instantLocal - nextLocal) >= (-diff * DateTimeConstants.MILLIS_PER_HOUR)) {\n                        return offsetLocal;\n                    }\n                }\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b2e72423 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,58 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        if (offsetLocal != offsetAdjusted) {\n+            // Find the transition points from the local and adjusted instants, respectively\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            \n+            if (nextLocal == nextAdjusted) {\n+                // If the two transition points are the same, then we know that the two values for \"getOffset\" should be\n+                // identical. If they are not, then \"instantLocal\" is in a daylight-saving gap.\n+                \n+                // Calculate the time difference in hours between the two transitions\n+                int diff = offsetAdjusted - offsetLocal;\n+\n+                // If \"instantLocal\" lies at or after the transition and \"instantAdjusted\" lies at or before the\n+                // transition, then we know that \"instantLocal\" lies in a daylight-saving gap.\n+                if ((instantLocal >= nextLocal) && (instantAdjusted <= nextLocal)) {\n+                    return offsetLocal;\n+                }\n+\n+                // If the difference between the two instants is greater than the difference in offsets, then the gap\n+                // is not causing a problem (meaning \"instantLocal\" is on or after the transition point)\n+                if ((instantLocal - nextLocal) >= (diff * DateTimeConstants.MILLIS_PER_HOUR)) {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                // If the transition points are different, then the code below checks if the local time, or the\n+                // adjusted time, is closer to the next transition point.\n+\n+                // Check if instants are in the gap immediately after a daylight saving transition\n+                int offsetNext = getOffset(nextAdjusted - 1);\n+                int diff = offsetAdjusted - offsetNext;\n+                if ((nextLocal - instantAdjusted) < (diff * DateTimeConstants.MILLIS_PER_HOUR)) {\n+                    return offsetLocal;\n+                } else if ((nextAdjusted - instantLocal) < (diff * DateTimeConstants.MILLIS_PER_HOUR)) {\n+                    return offsetNext;\n+                }\n+\n+                // Calculate the time difference in hours between the transition point with the larger offset and the\n+                // value of \"instantLocal\". If negative, then the local time is closer to the larger offset transition\n+                diff = offsetLocal - offsetAdjusted;\n+                if (diff > 0) {\n+                    if ((nextLocal - instantLocal) >= (diff * DateTimeConstants.MILLIS_PER_HOUR)) {\n+                        return offsetNext;\n+                    }\n+                } else {\n+                    if ((instantLocal - nextLocal) >= (-diff * DateTimeConstants.MILLIS_PER_HOUR)) {\n+                        return offsetLocal;\n+                    }\n+                }\n+            }\n+        }\n+        return offsetAdjusted;\n+    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}