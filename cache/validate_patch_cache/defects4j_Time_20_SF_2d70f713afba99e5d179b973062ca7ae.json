{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    String str = text.substring(position);\n    for (int i = 0; i < ALL_IDS.length; i++) {\n        String id = ALL_IDS[i];\n        int idx = str.indexOf(id);\n        if (idx == 0) {\n            int idLen = id.length();\n            char nextChar = (str.length() > idLen) ? str.charAt(idLen) : ' ';\n            if (nextChar == ' ' || nextChar == '/') {\n                bucket.setZone(DateTimeZone.forID(id));\n                return position + idLen;\n            }\n        }\n    }\n    return ~position;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..2a61fd5c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,17 +2537,23 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n-                }\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    String str = text.substring(position);\n+    for (int i = 0; i < ALL_IDS.length; i++) {\n+        String id = ALL_IDS[i];\n+        int idx = str.indexOf(id);\n+        if (idx == 0) {\n+            int idLen = id.length();\n+            char nextChar = (str.length() > idLen) ? str.charAt(idLen) : ' ';\n+            if (nextChar == ' ' || nextChar == '/') {\n+                bucket.setZone(DateTimeZone.forID(id));\n+                return position + idLen;\n             }\n-            return ~position;\n         }\n     }\n+    return ~position;\n+}\n+    }\n \n     //-----------------------------------------------------------------------\n     static class Composite",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}