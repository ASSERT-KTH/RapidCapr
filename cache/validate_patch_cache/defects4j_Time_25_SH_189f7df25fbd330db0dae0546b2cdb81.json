{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // We are near a DST boundary\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal == nextAdjusted) {\n        // We are in a DST gap or overlap\n        int offsetBeforeNextTrans = getOffset(nextLocal - 1);\n        if (offsetLocal > offsetAdjusted) {\n            // We are currently in standard time and transitioning to DST\n            if (offsetLocal == offsetBeforeNextTrans) {\n                // We are in a gap (missing hour)\n                return offsetLocal;\n            } else {\n                // We are in an overlap (ambiguous hour), return the larger offset\n                return offsetLocal;\n            }\n        } else {\n            // We are currently in DST and transitioning to standard time\n            if (offsetBeforeNextTrans == offsetAdjusted) {\n                // We are in an overlap (repeated hour), return the larger offset\n                return offsetLocal;\n            } else {\n                // We are in a gap (extra hour), return the offset just before the transition\n                return getOffset(nextAdjusted - 1);\n            }\n        }\n    } else {\n        // We are not in a DST gap or overlap, return the adjusted offset\n        return offsetAdjusted;\n    }\n} else {\n    // We are not near a DST boundary, return the adjusted offset\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b750fbac 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,40 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // We are near a DST boundary\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal == nextAdjusted) {\n+        // We are in a DST gap or overlap\n+        int offsetBeforeNextTrans = getOffset(nextLocal - 1);\n+        if (offsetLocal > offsetAdjusted) {\n+            // We are currently in standard time and transitioning to DST\n+            if (offsetLocal == offsetBeforeNextTrans) {\n+                // We are in a gap (missing hour)\n+                return offsetLocal;\n+            } else {\n+                // We are in an overlap (ambiguous hour), return the larger offset\n+                return offsetLocal;\n+            }\n+        } else {\n+            // We are currently in DST and transitioning to standard time\n+            if (offsetBeforeNextTrans == offsetAdjusted) {\n+                // We are in an overlap (repeated hour), return the larger offset\n+                return offsetLocal;\n+            } else {\n+                // We are in a gap (extra hour), return the offset just before the transition\n+                return getOffset(nextAdjusted - 1);\n+            }\n+        }\n+    } else {\n+        // We are not in a DST gap or overlap, return the adjusted offset\n+        return offsetAdjusted;\n+    }\n+} else {\n+    // We are not near a DST boundary, return the adjusted offset\n+    return offsetAdjusted;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}