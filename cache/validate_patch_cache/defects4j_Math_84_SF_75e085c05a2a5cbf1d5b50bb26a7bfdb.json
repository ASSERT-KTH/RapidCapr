{
    "patch": "   protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        while (true) {\n            incrementIterationsCounter();\n            final RealPointValuePair[] original = simplex.clone();\n            final RealPointValuePair best = original[0];\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0d, comparator);\n            final boolean betterReflected = comparator.compare(reflected, best) < 0;\n            if (betterReflected) {\n                final RealPointValuePair[] reflectedSimplex = simplex.clone();\n                final RealPointValuePair expanded = evaluateNewSimplex(original, RHO, comparator);\n                final boolean betterExpanded = comparator.compare(expanded, reflected) < 0;\n                if (betterExpanded) {\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = evaluateNewSimplex(original, RHO * CHI, comparator);\n                }\n            } else {\n                final RealPointValuePair contracted = evaluateNewSimplex(original, GAMMA, comparator);\n                final boolean betterContracted = comparator.compare(contracted, best) < 0;\n                if (betterContracted) {\n                    simplex = evaluateNewSimplex(original, RHO * GAMMA, comparator);\n                } else {\n                    final RealPointValuePair[] shrinkedSimplex = shrink(original, comparator);\n                    simplex = shrinkedSimplex;\n                }\n            }\n            checkConvergence(comparator);\n        }\n    }   ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..9de029618 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,35 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n+   protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n         while (true) {\n-\n             incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n+            final RealPointValuePair[] original = simplex.clone();\n             final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0d, comparator);\n+            final boolean betterReflected = comparator.compare(reflected, best) < 0;\n+            if (betterReflected) {\n+                final RealPointValuePair[] reflectedSimplex = simplex.clone();\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, RHO, comparator);\n+                final boolean betterExpanded = comparator.compare(expanded, reflected) < 0;\n+                if (betterExpanded) {\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = evaluateNewSimplex(original, RHO * CHI, comparator);\n+                }\n+            } else {\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, GAMMA, comparator);\n+                final boolean betterContracted = comparator.compare(contracted, best) < 0;\n+                if (betterContracted) {\n+                    simplex = evaluateNewSimplex(original, RHO * GAMMA, comparator);\n+                } else {\n+                    final RealPointValuePair[] shrinkedSimplex = shrink(original, comparator);\n+                    simplex = shrinkedSimplex;\n                 }\n-\n-                return;\n-\n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n             }\n-\n+            checkConvergence(comparator);\n         }\n-\n-    }\n+    }   \n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}