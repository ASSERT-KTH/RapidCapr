{
    "patch": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.joda.time.DateTimeZone;\nimport org.joda.time.chrono.DatetimeParserInternalParser;\nimport org.joda.time.format.DateTimeParser;\nimport org.joda.time.format.DateTimeParserBucket;\n\npublic class DateTimeParser implements DateTimeParser {\n\n    private final List<DatetimeParserInternalParser> parsers;\n\n    public DateTimeParser(List<DatetimeParserInternalParser> parsers) {\n        this.parsers = Collections.unmodifiableList(new ArrayList<>(parsers));\n    }\n\n    @Override\n    public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n        int successPos = position;\n        for (DatetimeParserInternalParser parser : parsers) {\n            successPos = parser.parseInto(bucket, text, position);\n            if (successPos >= 0) {\n                return successPos;\n            }\n        }\n        return ~position;\n    }\n\n    public static DateTimeZone getZone(String timeZoneID) {\n        if (timeZoneID == null) {\n            return null;\n        } else if (timeZoneID.length() == 1) {\n            switch (timeZoneID.charAt(0)) {\n                case 'Z':\n                    return DateTimeZone.UTC;\n                case '+':\n                case '-':\n                    throw new IllegalArgumentException(\"Invalid time zone string: \" + timeZoneID);\n                default:\n                    return null;\n            }\n        } else if (timeZoneID.startsWith(\"+\") || timeZoneID.startsWith(\"-\")) {\n            throw new IllegalArgumentException(\"Invalid time zone string: \" + timeZoneID);\n        } else {\n            DateTimeZone tz = DateTimeZone.forID(timeZoneID);\n            if (tz == null) {\n                List<String> ids = new ArrayList<>(DateTimeZone.getAvailableIDs());\n                Collections.sort(ids);\n                String msg = new StringBuilder(\"Unknown time zone ID: \").append(timeZoneID)\n                        .append(\"; must be one of the following: \").append(ids).toString();\n                throw new IllegalArgumentException(msg);\n            }\n            return tz;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f83130d8 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,64 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.chrono.DatetimeParserInternalParser;\n+import org.joda.time.format.DateTimeParser;\n+import org.joda.time.format.DateTimeParserBucket;\n+\n+public class DateTimeParser implements DateTimeParser {\n+\n+    private final List<DatetimeParserInternalParser> parsers;\n+\n+    public DateTimeParser(List<DatetimeParserInternalParser> parsers) {\n+        this.parsers = Collections.unmodifiableList(new ArrayList<>(parsers));\n+    }\n+\n+    @Override\n+    public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+        int successPos = position;\n+        for (DatetimeParserInternalParser parser : parsers) {\n+            successPos = parser.parseInto(bucket, text, position);\n+            if (successPos >= 0) {\n+                return successPos;\n             }\n         }\n-        return offsetAdjusted;\n+        return ~position;\n     }\n \n+    public static DateTimeZone getZone(String timeZoneID) {\n+        if (timeZoneID == null) {\n+            return null;\n+        } else if (timeZoneID.length() == 1) {\n+            switch (timeZoneID.charAt(0)) {\n+                case 'Z':\n+                    return DateTimeZone.UTC;\n+                case '+':\n+                case '-':\n+                    throw new IllegalArgumentException(\"Invalid time zone string: \" + timeZoneID);\n+                default:\n+                    return null;\n+            }\n+        } else if (timeZoneID.startsWith(\"+\") || timeZoneID.startsWith(\"-\")) {\n+            throw new IllegalArgumentException(\"Invalid time zone string: \" + timeZoneID);\n+        } else {\n+            DateTimeZone tz = DateTimeZone.forID(timeZoneID);\n+            if (tz == null) {\n+                List<String> ids = new ArrayList<>(DateTimeZone.getAvailableIDs());\n+                Collections.sort(ids);\n+                String msg = new StringBuilder(\"Unknown time zone ID: \").append(timeZoneID)\n+                        .append(\"; must be one of the following: \").append(ids).toString();\n+                throw new IllegalArgumentException(msg);\n+            }\n+            return tz;\n+        }\n+    }\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}