{
    "patch": "if (hasFiniteBounds) {\n    boolean anyInfiniteBound = false;\n    double maxBoundary = Double.NEGATIVE_INFINITY;\n    double minBoundary = Double.POSITIVE_INFINITY;\n    for (int i = 0; i < lB.length; i++) {\n        if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n            anyInfiniteBound = true;\n        } else {\n            maxBoundary = Math.max(maxBoundary, uB[i]);\n            minBoundary = Math.min(minBoundary, lB[i]);\n        }\n    }\n\n    if (anyInfiniteBound) {\n        // If there is at least one finite bound, none can be infinite,\n        // because mixed cases are not supported by the current code.\n        throw new MathUnsupportedOperationException();\n    }\n\n    if (maxBoundary - minBoundary > Double.MAX_VALUE / 2) {\n        throw new NumberIsTooLargeException(maxBoundary - minBoundary, Double.MAX_VALUE / 2, true);\n    }\n\n    // Convert API to internal handling of boundaries.\n    boundaries = new double[2][];\n    boundaries[0] = lB;\n    boundaries[1] = uB;\n} else {\n    // Convert API to internal handling of boundaries.\n    boundaries = null;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..79dc8cf08 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,37 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+if (hasFiniteBounds) {\n+    boolean anyInfiniteBound = false;\n+    double maxBoundary = Double.NEGATIVE_INFINITY;\n+    double minBoundary = Double.POSITIVE_INFINITY;\n+    for (int i = 0; i < lB.length; i++) {\n+        if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n+            anyInfiniteBound = true;\n+        } else {\n+            maxBoundary = Math.max(maxBoundary, uB[i]);\n+            minBoundary = Math.min(minBoundary, lB[i]);\n+        }\n+    }\n+\n+    if (anyInfiniteBound) {\n+        // If there is at least one finite bound, none can be infinite,\n+        // because mixed cases are not supported by the current code.\n+        throw new MathUnsupportedOperationException();\n+    }\n+\n+    if (maxBoundary - minBoundary > Double.MAX_VALUE / 2) {\n+        throw new NumberIsTooLargeException(maxBoundary - minBoundary, Double.MAX_VALUE / 2, true);\n+    }\n+\n+    // Convert API to internal handling of boundaries.\n+    boundaries = new double[2][];\n+    boundaries[0] = lB;\n+    boundaries[1] = uB;\n+} else {\n+    // Convert API to internal handling of boundaries.\n+    boundaries = null;\n+}\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}