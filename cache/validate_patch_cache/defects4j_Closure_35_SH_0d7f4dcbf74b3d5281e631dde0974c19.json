{
    "patch": "ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\nif (objType != null && constraint.restrictByNotNullOrUndefined().isRecordType()) {\n  ObjectType constraintObj = ObjectType.cast(constraint);\n  for (String prop : constraintObj.getOwnPropertyNames()) {\n    JSType propType = constraintObj.getPropertyType(prop);\n    if (!objType.isPropertyTypeDeclared(prop)) {\n      JSType typeToInfer = propType;\n      if (!objType.hasProperty(prop)) {\n        typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n      }\n      objType.defineInferredProperty(prop, typeToInfer, null);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..25ae7ad5 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,21 +1118,20 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n-        }\n+ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+if (objType != null && constraint.restrictByNotNullOrUndefined().isRecordType()) {\n+  ObjectType constraintObj = ObjectType.cast(constraint);\n+  for (String prop : constraintObj.getOwnPropertyNames()) {\n+    JSType propType = constraintObj.getPropertyType(prop);\n+    if (!objType.isPropertyTypeDeclared(prop)) {\n+      JSType typeToInfer = propType;\n+      if (!objType.hasProperty(prop)) {\n+        typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n       }\n+      objType.defineInferredProperty(prop, typeToInfer, null);\n+    }\n+  }\n+}\n     }\n   }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}