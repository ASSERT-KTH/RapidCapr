{
    "patch": "final int delta = offsetLocal - offsetAdjusted;\nif (delta >= 0) {\n    final long nextTransition = nextTransition(instantAdjusted);\n    final long adjNext = nextTransition(instantLocal - offsetAdjusted);\n    if (adjNext != nextTransition) {\n        if (getOffset(nextTransition - 1) >= getOffset(nextTransition)) {\n            return getOffset(nextTransition) + delta;\n        }\n        return offsetAdjusted;\n    } else {\n        return offsetAdjusted;\n    }\n} else {\n    long prevTransition = previousTransition(instantLocal - offsetAdjusted);\n    final long adjPrev = previousTransition(instantAdjusted);\n    final int offsetPrev = getOffset(prevTransition);\n    if (offsetPrev > offsetAdjusted) {\n        prevTransition = previousTransition(adjPrev);\n    }\n    final int offsetBeforePrev = getOffset(prevTransition);\n    if (offsetBeforePrev <= offsetAdjusted) {\n        return offsetAdjusted;\n    }\n    final int minDelta = Math.min(delta, 0);\n    if (offsetBeforePrev + minDelta < offsetAdjusted) {\n        return offsetBeforePrev;\n    }\n    final int maxDelta = Math.max(delta, 0);\n    if (offsetAdjusted + maxDelta < offsetPrev) {\n        return offsetAdjusted;\n    }\n    return offsetPrev + maxDelta;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..e5759d6f 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,39 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+final int delta = offsetLocal - offsetAdjusted;\n+if (delta >= 0) {\n+    final long nextTransition = nextTransition(instantAdjusted);\n+    final long adjNext = nextTransition(instantLocal - offsetAdjusted);\n+    if (adjNext != nextTransition) {\n+        if (getOffset(nextTransition - 1) >= getOffset(nextTransition)) {\n+            return getOffset(nextTransition) + delta;\n+        }\n+        return offsetAdjusted;\n+    } else {\n+        return offsetAdjusted;\n+    }\n+} else {\n+    long prevTransition = previousTransition(instantLocal - offsetAdjusted);\n+    final long adjPrev = previousTransition(instantAdjusted);\n+    final int offsetPrev = getOffset(prevTransition);\n+    if (offsetPrev > offsetAdjusted) {\n+        prevTransition = previousTransition(adjPrev);\n+    }\n+    final int offsetBeforePrev = getOffset(prevTransition);\n+    if (offsetBeforePrev <= offsetAdjusted) {\n+        return offsetAdjusted;\n+    }\n+    final int minDelta = Math.min(delta, 0);\n+    if (offsetBeforePrev + minDelta < offsetAdjusted) {\n+        return offsetBeforePrev;\n+    }\n+    final int maxDelta = Math.max(delta, 0);\n+    if (offsetAdjusted + maxDelta < offsetPrev) {\n+        return offsetAdjusted;\n+    }\n+    return offsetPrev + maxDelta;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-10-01T07:00:00.000",
    "test_result": "FAIL"
}