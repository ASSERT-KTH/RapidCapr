{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    double index = right.getDouble();\n    boolean isArrayAccess = n.isGetElem();\n    if (!isNumericIndex(index, isArrayAccess)) {\n        if (index < 0) {\n            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        } else if (!isArrayAccess) {\n            error(INVALID_GETPROP_ASSIGNMENT_TARGET_ERROR, n);\n        } else {\n            error(INVALID_GETELEM_INDEX_ERROR, right);\n        }\n        return n;\n    }\n    Node arrayNode = left;\n    int intIndex = (int) index;\n    Node elementNode = null;\n    if (left.isString()) {\n        elementNode = extractStringElement(left.getString(), intIndex);\n    } else {\n        elementNode = extractElement(left, intIndex);\n    }\n\n    if (elementNode.isEmpty()) {\n        elementNode = NodeUtil.newUndefinedNode(n);\n    }\n\n    Node parent = n.getParent();\n    if (parent != null) {\n        parent.replaceChild(n, elementNode);\n        reportCodeChange();\n    }\n    return elementNode;\n}\n\nprivate static boolean isNumericIndex(double index, boolean isArrayAccess) {\n    if (index < 0) {\n        return false;\n    }\n    int intIndex = (int) index;\n    return intIndex == index && (isArrayAccess || intIndex > 0);\n}\n\nprivate static Node extractStringElement(String str, int index) {\n    if (index < 0 || index >= str.length()) {\n        throw new IllegalArgumentException(\"Index out of bounds: \" + index + \", \" + str.length());\n    }\n    return Node.newString(str.substring(index, index + 1));\n}\n\nprivate static Node extractElement(Node arrayNode, int index) {\n    Node childNode = arrayNode.getFirstChild();\n    int i = 0;\n    while (childNode != null) {\n        if (i++ == index) {\n            arrayNode.removeChild(childNode);\n            break;\n        }\n        childNode = childNode.getNext();\n    }\n    return childNode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..6e0069ca 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,70 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n-\n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+        return n;\n     }\n-\n     double index = right.getDouble();\n+    boolean isArrayAccess = n.isGetElem();\n+    if (!isNumericIndex(index, isArrayAccess)) {\n+        if (index < 0) {\n+            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        } else if (!isArrayAccess) {\n+            error(INVALID_GETPROP_ASSIGNMENT_TARGET_ERROR, n);\n+        } else {\n+            error(INVALID_GETELEM_INDEX_ERROR, right);\n+        }\n+        return n;\n+    }\n+    Node arrayNode = left;\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n+    Node elementNode = null;\n+    if (left.isString()) {\n+        elementNode = extractStringElement(left.getString(), intIndex);\n+    } else {\n+        elementNode = extractElement(left, intIndex);\n     }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    if (elementNode.isEmpty()) {\n+        elementNode = NodeUtil.newUndefinedNode(n);\n     }\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n+    Node parent = n.getParent();\n+    if (parent != null) {\n+        parent.replaceChild(n, elementNode);\n+        reportCodeChange();\n     }\n+    return elementNode;\n+}\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+private static boolean isNumericIndex(double index, boolean isArrayAccess) {\n+    if (index < 0) {\n+        return false;\n     }\n+    int intIndex = (int) index;\n+    return intIndex == index && (isArrayAccess || intIndex > 0);\n+}\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+private static Node extractStringElement(String str, int index) {\n+    if (index < 0 || index >= str.length()) {\n+        throw new IllegalArgumentException(\"Index out of bounds: \" + index + \", \" + str.length());\n     }\n+    return Node.newString(str.substring(index, index + 1));\n+}\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n-  }\n+private static Node extractElement(Node arrayNode, int index) {\n+    Node childNode = arrayNode.getFirstChild();\n+    int i = 0;\n+    while (childNode != null) {\n+        if (i++ == index) {\n+            arrayNode.removeChild(childNode);\n+            break;\n+        }\n+        childNode = childNode.getNext();\n+    }\n+    return childNode;\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}