{
    "patch": "      List<String> propertiesToErrorFor = new ArrayList<>();\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        if (!child.isString()) {\n          continue;\n        }\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          propertiesToErrorFor.add(name);\n        }\n      }\n      for (String name : propertiesToErrorFor) {\n        T type = typeSystem.getType(getScope(), n, name);\n        compiler.report(JSError.make(\n            t.getSourceName(), n, Warnings.INVALIDATION,\n            propertiesToErrorFor.get(name),\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..7cb085fe 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,28 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+      List<String> propertiesToErrorFor = new ArrayList<>();\n+      for (Node child = n.getFirstChild();\n+          child != null;\n+          child = child.getNext()) {\n+        if (!child.isString()) {\n+          continue;\n+        }\n+        String name = child.getString();\n+        T type = typeSystem.getType(getScope(), n, name);\n+\n+        Property prop = getProperty(name);\n+        if (!prop.scheduleRenaming(child,\n+                                   processProperty(t, prop, type, null))) {\n+          propertiesToErrorFor.add(name);\n+        }\n+      }\n+      for (String name : propertiesToErrorFor) {\n+        T type = typeSystem.getType(getScope(), n, name);\n+        compiler.report(JSError.make(\n+            t.getSourceName(), n, Warnings.INVALIDATION,\n+            propertiesToErrorFor.get(name),\n+            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}