{
    "patch": "if (escapingOn && start < c.length && c[start] == QUOTE) {\n    next(pos);\n    return appendTo == null ? null : appendTo.append(QUOTE);\n} else if (pos.getIndex() < pattern.length() && escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {\n    appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n    pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());\n    lastHold = pos.getIndex();\n} else {\n    next(pos);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..b02fdc8e 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -419,6 +419,16 @@ public class ExtendedMessageFormat extends MessageFormat {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n+if (escapingOn && start < c.length && c[start] == QUOTE) {\n+    next(pos);\n+    return appendTo == null ? null : appendTo.append(QUOTE);\n+} else if (pos.getIndex() < pattern.length() && escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {\n+    appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n+    pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());\n+    lastHold = pos.getIndex();\n+} else {\n+    next(pos);\n+}\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}