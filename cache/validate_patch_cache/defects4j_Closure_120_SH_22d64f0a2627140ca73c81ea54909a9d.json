{
    "patch": "// Make sure this assignment is not in a loop.\nfor (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n  if (block.isFunction) {\n    break;\n  } else if (block.isLoop) {\n    return false;\n  } else if (block.getTerminatingNode() != null \n             && block.getTerminatingNode().getType() != Token.LABEL) {\n    // If there is more than one exit from the block, or the exit is not a label, the block might be exited\n    // before the only assignment is done.\n    return false;\n  }\n}\n\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..e98dae18 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,21 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+// Make sure this assignment is not in a loop.\n+for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n+  if (block.isFunction) {\n+    break;\n+  } else if (block.isLoop) {\n+    return false;\n+  } else if (block.getTerminatingNode() != null \n+             && block.getTerminatingNode().getType() != Token.LABEL) {\n+    // If there is more than one exit from the block, or the exit is not a label, the block might be exited\n+    // before the only assignment is done.\n+    return false;\n+  }\n+}\n+\n+return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}