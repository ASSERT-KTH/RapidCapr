{
    "patch": "        while (!lst.isEmpty()) {\n            if (switched) {\n                int min = lst.stream().min(Integer::compare).get();\n                result.add(min);\n                lst.remove(Integer.valueOf(min));\n            } else {\n                int max = lst.stream().max(Integer::compare).get();\n                result.add(max);\n                lst.remove(Integer.valueOf(max));\n            }\n            switched = !switched;\n        }",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/STRANGE_SORT_LIST.java b/src/main/java/humaneval/buggy/STRANGE_SORT_LIST.java\nindex 094f5de..9e04be0 100644\n--- a/src/main/java/humaneval/buggy/STRANGE_SORT_LIST.java\n+++ b/src/main/java/humaneval/buggy/STRANGE_SORT_LIST.java\n@@ -24,6 +24,18 @@ public class STRANGE_SORT_LIST {\n             } else {\n                 result.add(Collections.max(lst));\n             }\n+        while (!lst.isEmpty()) {\n+            if (switched) {\n+                int min = lst.stream().min(Integer::compare).get();\n+                result.add(min);\n+                lst.remove(Integer.valueOf(min));\n+            } else {\n+                int max = lst.stream().max(Integer::compare).get();\n+                result.add(max);\n+                lst.remove(Integer.valueOf(max));\n+            }\n+            switched = !switched;\n+        }\n         }\n         return result;\n     }",
    "result_reason": "   TEST_STRANGE_SORT_LIST.test_0:13 expected:<[1, 1, 4, 2, 3]> but was:<[1, 4, 2, 3]>",
    "test_result": "FAIL"
}