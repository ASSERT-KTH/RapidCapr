{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix eigenvectors = dec.getV();\n    RealMatrix eigenvalues = MatrixUtils.createRealDiagonalMatrix(\n            Arrays.stream(dec.getRealEigenvalues())\n                    .map(Math::sqrt)\n                    .toArray());\n    RealMatrix inverseEigenvectors = eigenvectors.inverse();\n    return eigenvectors.multiply(eigenvalues)\n            .multiply(inverseEigenvectors);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..66f1fea17 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,15 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix eigenvectors = dec.getV();\n+    RealMatrix eigenvalues = MatrixUtils.createRealDiagonalMatrix(\n+            Arrays.stream(dec.getRealEigenvalues())\n+                    .map(Math::sqrt)\n+                    .toArray());\n+    RealMatrix inverseEigenvectors = eigenvectors.inverse();\n+    return eigenvectors.multiply(eigenvalues)\n+            .multiply(inverseEigenvectors);\n+}\n }",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}