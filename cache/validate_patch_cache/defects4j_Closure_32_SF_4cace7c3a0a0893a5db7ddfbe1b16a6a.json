{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n        return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n        line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    boolean firstLine = true;\n\n    state = State.SEARCHING_ANNOTATION;\n    while (true) {\n        switch (token) {\n            case STAR:\n                if (!firstLine) {\n                    builder.append(\"\\n\");\n                }\n                builder.append(\"*\");\n                state = State.SEARCHING_ANNOTATION;\n                break;\n\n            case EOL:\n                builder.append(\"\\n\");\n                state = State.SEARCHING_ANNOTATION;\n                break;\n\n            default:\n                if (firstLine) {\n                    firstLine = false;\n                    if (!line.isEmpty()) {\n                        builder.append(line);\n                        if (option != WhitespaceOption.PRESERVE) {\n                            builder.append(\" \");\n                        }\n                    }\n                } else {\n                    builder.append(\"\\n\");\n                }\n                builder.append(toString(token));\n                state = State.CAPTURE_MULTILINE;\n                break;\n        }\n\n        token = next();\n\n        if (token == JsDocToken.EOC || token == JsDocToken.EOF ||\n            (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString();\n\n            if (option != WhitespaceOption.PRESERVE) {\n                multilineText = multilineText.trim();\n            }\n\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n\n            if (multilineText.length() > 0) {\n                jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..656cc494 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,12 +1326,9 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n-\n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n+    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n+        return new ExtractionInfo(\"\", token);\n     }\n \n     stream.update();\n@@ -1341,92 +1338,66 @@ public final class JsDocInfoParser {\n     // Read the content from the first line.\n     String line = stream.getRemainingJSDocLine();\n     if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n+        line = line.trim();\n     }\n \n     StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n+    boolean firstLine = true;\n \n     state = State.SEARCHING_ANNOTATION;\n-    token = next();\n-\n-    boolean ignoreStar = false;\n-\n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n-\n-    do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n-\n-            builder.append('*');\n-          }\n-\n-          token = next();\n-          continue;\n-\n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n-\n-          ignoreStar = true;\n-          token = next();\n-          continue;\n-\n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n+    while (true) {\n+        switch (token) {\n+            case STAR:\n+                if (!firstLine) {\n+                    builder.append(\"\\n\");\n+                }\n+                builder.append(\"*\");\n+                state = State.SEARCHING_ANNOTATION;\n+                break;\n+\n+            case EOL:\n+                builder.append(\"\\n\");\n+                state = State.SEARCHING_ANNOTATION;\n+                break;\n+\n+            default:\n+                if (firstLine) {\n+                    firstLine = false;\n+                    if (!line.isEmpty()) {\n+                        builder.append(line);\n+                        if (option != WhitespaceOption.PRESERVE) {\n+                            builder.append(\" \");\n+                        }\n+                    }\n+                } else {\n+                    builder.append(\"\\n\");\n+                }\n+                builder.append(toString(token));\n+                state = State.CAPTURE_MULTILINE;\n+                break;\n+        }\n \n-              // All tokens must be separated by a space.\n+        token = next();\n \n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n+        if (token == JsDocToken.EOC || token == JsDocToken.EOF ||\n+            (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n             String multilineText = builder.toString();\n \n             if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n+                multilineText = multilineText.trim();\n             }\n \n             int endLineno = stream.getLineno();\n             int endCharno = stream.getCharno();\n \n             if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n+                jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n             }\n \n             return new ExtractionInfo(multilineText, token);\n-          }\n-\n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n-\n-          line = stream.getRemainingJSDocLine();\n-\n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n-\n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n-  }\n+        }\n+    }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}