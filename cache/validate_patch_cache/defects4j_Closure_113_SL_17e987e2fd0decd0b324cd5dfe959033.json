{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n      boolean isProvided = provided != null && provided.isExplicitlyProvided();\n      if((!isProvided && namespaceUtil.isGlobalSymbol(ns)) || \n        (isProvided && provided.explicitModule != null &&\n         !provided.explicitModule.equals(t.getModule()))) {\n            // namespace is required but has not been provided\n            // or provided from a different module\n            unrecognizedRequires.add(\n                new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else {\n        maybeAddToSymbolTable(left);\n        maybeAddStringNodeToSymbolTable(arg);\n\n        // Requires should be removed before further processing.\n        // Some clients run closure pass multiple times, first with\n        // the checks for broken requires turned off. In these cases, we\n        // allow broken requires to be preserved by the first run to\n        // let them be caught in the subsequent run.\n        parent.detachFromParent();\n        compiler.reportCodeChange();\n     }\n   }\n }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..afa3ac55 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,34 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+    Node left = n.getFirstChild();\n+    Node arg = left.getNext();\n+    if (verifyLastArgumentIsString(t, left, arg)) {\n+      String ns = arg.getString();\n+      ProvidedName provided = providedNames.get(ns);\n+      boolean isProvided = provided != null && provided.isExplicitlyProvided();\n+      if((!isProvided && namespaceUtil.isGlobalSymbol(ns)) || \n+        (isProvided && provided.explicitModule != null &&\n+         !provided.explicitModule.equals(t.getModule()))) {\n+            // namespace is required but has not been provided\n+            // or provided from a different module\n+            unrecognizedRequires.add(\n+                new UnrecognizedRequire(n, ns, t.getSourceName()));\n+      } else {\n+        maybeAddToSymbolTable(left);\n+        maybeAddStringNodeToSymbolTable(arg);\n+\n+        // Requires should be removed before further processing.\n+        // Some clients run closure pass multiple times, first with\n+        // the checks for broken requires turned off. In these cases, we\n+        // allow broken requires to be preserved by the first run to\n+        // let them be caught in the subsequent run.\n+        parent.detachFromParent();\n+        compiler.reportCodeChange();\n+     }\n+   }\n+ }\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}