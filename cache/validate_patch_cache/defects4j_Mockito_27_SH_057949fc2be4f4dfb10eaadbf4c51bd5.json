{
    "patch": "Mockito.framework().setInvocationListener(invocationListener);\nMockHandler<T> newMockHandler;\nif (Proxy.isProxyClass(mock.getClass())) {\n    InvocationHandler invocationHandler = Proxy.getInvocationHandler(mock);\n    if (MockHandler.class.isInstance(invocationHandler)) {\n        return;\n    }\n    newMockHandler = new MockHandler<T>(invocationHandler);\n} else {\n    newMockHandler = new MockHandler<T>(getMockHandler(mock));\n}\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n((Factory) mock).setCallback(0, newFilter);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..6f1661ef4 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,22 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+Mockito.framework().setInvocationListener(invocationListener);\n+MockHandler<T> newMockHandler;\n+if (Proxy.isProxyClass(mock.getClass())) {\n+    InvocationHandler invocationHandler = Proxy.getInvocationHandler(mock);\n+    if (MockHandler.class.isInstance(invocationHandler)) {\n+        return;\n+    }\n+    newMockHandler = new MockHandler<T>(invocationHandler);\n+} else {\n+    newMockHandler = new MockHandler<T>(getMockHandler(mock));\n+}\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+((Factory) mock).setCallback(0, newFilter);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}