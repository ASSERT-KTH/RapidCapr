{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      Node grandParent = (parent != null) ? parent.getParent() : null;\n      if (grandParent != null) {\n        Node greatGrandParent = grandParent.getParent();\n        if (grandParent.getType() == Token.GETPROP &&\n            grandParent.getLastChild().getString().equals(\"prototype\")) {\n          var lendsThis = false;\n          if (greatGrandParent != null && greatGrandParent.getType() == Token.ASSIGN) {\n            Node assignedValue = greatGrandParent.getLastChild();\n            if (assignedValue.getType() == Token.FUNCTION) {\n              JSDocInfo jsDoc = getFunctionJsDocInfo(assignedValue);\n              lendsThis = (jsDoc != null) && jsDoc.hasThisType();\n            }\n          }\n\n          return !lendsThis;\n        } else if (grandParent.getType() == Token.NAME &&\n                   grandParent.getString().equals(\"window\")) {\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..d7c0f4fa 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,27 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      Node grandParent = (parent != null) ? parent.getParent() : null;\n+      if (grandParent != null) {\n+        Node greatGrandParent = grandParent.getParent();\n+        if (grandParent.getType() == Token.GETPROP &&\n+            grandParent.getLastChild().getString().equals(\"prototype\")) {\n+          var lendsThis = false;\n+          if (greatGrandParent != null && greatGrandParent.getType() == Token.ASSIGN) {\n+            Node assignedValue = greatGrandParent.getLastChild();\n+            if (assignedValue.getType() == Token.FUNCTION) {\n+              JSDocInfo jsDoc = getFunctionJsDocInfo(assignedValue);\n+              lendsThis = (jsDoc != null) && jsDoc.hasThisType();\n+            }\n+          }\n+\n+          return !lendsThis;\n+        } else if (grandParent.getType() == Token.NAME &&\n+                   grandParent.getString().equals(\"window\")) {\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}