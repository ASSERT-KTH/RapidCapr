{
    "patch": "            boolean isNegative = false;\n            String numericStr = str;\n            if (str.length() > 1 && str.charAt(0) == '-') { // negative number\n                isNegative = true;\n                numericStr = str.substring(1); // remove minus sign\n            }\n            if (StringUtils.isBlank(numericStr)) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            if (!StringUtils.isNumeric(numericStr)) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            if (numericStr.startsWith(\"0\") && numericStr.length() > 1) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            if (numericStr.length() <= 18) {\n                try {\n                    long longVal = Long.parseLong(numericStr);\n                    if (isNegative) {\n                        return longVal * -1;\n                    } else {\n                        return longVal;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore, try another type\n                }\n            }\n            try {\n                return new BigInteger(str);\n            } catch (NumberFormatException nfe) {\n                // ignore, try other types\n            }\n            try {\n                return new BigDecimal(str);\n            } catch (NumberFormatException nfe) {\n                // ignore, last attempt\n            }\n            throw new NumberFormatException(str + \" is not a valid number.\");",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a47..236e566b 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,44 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+            boolean isNegative = false;\n+            String numericStr = str;\n+            if (str.length() > 1 && str.charAt(0) == '-') { // negative number\n+                isNegative = true;\n+                numericStr = str.substring(1); // remove minus sign\n+            }\n+            if (StringUtils.isBlank(numericStr)) {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n+            }\n+            if (!StringUtils.isNumeric(numericStr)) {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n+            }\n+            if (numericStr.startsWith(\"0\") && numericStr.length() > 1) {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n+            }\n+            if (numericStr.length() <= 18) {\n+                try {\n+                    long longVal = Long.parseLong(numericStr);\n+                    if (isNegative) {\n+                        return longVal * -1;\n+                    } else {\n+                        return longVal;\n+                    }\n+                } catch (NumberFormatException nfe) {\n+                    // ignore, try another type\n+                }\n+            }\n+            try {\n+                return new BigInteger(str);\n+            } catch (NumberFormatException nfe) {\n+                // ignore, try other types\n+            }\n+            try {\n+                return new BigDecimal(str);\n+            } catch (NumberFormatException nfe) {\n+                // ignore, last attempt\n+            }\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}