{
    "patch": "// If the character is not a special one, write it back to the\n// original stream to avoid double-escaping:\nif(prevChar=='\\0' && xmlChar > '\\u007F') {\n    // The character is larger than ASCII and is unescaped:\n    writer.write(xmlString); // Code with the error. Fixed to write xmlString, not xmlChar\n} else {\n    if(xmlChar=='\\n') writer.write('\\n');\n    else if(xmlChar=='\\r') writer.write('\\r');\n    else if(xmlChar=='\\t') writer.write('\\t');\n    else writer.write(xmlChar);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}