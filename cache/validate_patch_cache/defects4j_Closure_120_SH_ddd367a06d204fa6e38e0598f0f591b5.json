{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphEdge<Node, Branch>> edges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : edges) {\n      Node succ = edge.getEnd();\n      for (DiGraphEdge<Node, ExceptionHandler> ehEdge : getCfg().getExceptionHandlers(succ)) {\n        // if the edge from succ to the corresponding exception handler has the same label\n        // as the edge we just came from, this means that controlflow in succ was\n        // only possible under the try-block that corresponds to ehEdge.\n        if (edge.getValue() == ehEdge.getValue().getBranch()) {\n          return true;\n        }\n      }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..94d5c1eb 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,21 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphEdge<Node, Branch>> edges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : edges) {\n+      Node succ = edge.getEnd();\n+      for (DiGraphEdge<Node, ExceptionHandler> ehEdge : getCfg().getExceptionHandlers(succ)) {\n+        // if the edge from succ to the corresponding exception handler has the same label\n+        // as the edge we just came from, this means that controlflow in succ was\n+        // only possible under the try-block that corresponds to ehEdge.\n+        if (edge.getValue() == ehEdge.getValue().getBranch()) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}