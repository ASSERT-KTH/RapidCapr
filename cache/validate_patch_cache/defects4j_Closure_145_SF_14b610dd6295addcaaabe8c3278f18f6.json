{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n == null) {\n        return false;\n    }\n    boolean isFunctionOrDo = n.getType() == Token.FUNCTION || n.getType() == Token.DO;\n    if (isFunctionOrDo && n.hasChildren()) {\n        Node child = n.getFirstChild();\n        if (n.getType() == Token.FUNCTION && child.getType() == Token.NAME) {\n            return false;\n        }\n        int count = 0;\n        while (child != null) {\n            if (child.getType() == Token.EMPTY) {\n                child = child.getNext();\n                continue;\n            }\n            if (child.getType() == Token.BLOCK && isOneExactlyFunctionOrDo(child)) {\n                child = child.getNext();\n                if (child == null) {\n                    return true;\n                }\n                return false;\n            }\n            count++;\n            if (count > 1) {\n                return false;\n            }\n            child = child.getNext();\n        }\n    }\n    return isFunctionOrDo;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..6df815b0 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,38 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    if (n == null) {\n+        return false;\n+    }\n+    boolean isFunctionOrDo = n.getType() == Token.FUNCTION || n.getType() == Token.DO;\n+    if (isFunctionOrDo && n.hasChildren()) {\n+        Node child = n.getFirstChild();\n+        if (n.getType() == Token.FUNCTION && child.getType() == Token.NAME) {\n+            return false;\n+        }\n+        int count = 0;\n+        while (child != null) {\n+            if (child.getType() == Token.EMPTY) {\n+                child = child.getNext();\n+                continue;\n+            }\n+            if (child.getType() == Token.BLOCK && isOneExactlyFunctionOrDo(child)) {\n+                child = child.getNext();\n+                if (child == null) {\n+                    return true;\n+                }\n+                return false;\n+            }\n+            count++;\n+            if (count > 1) {\n+                return false;\n+            }\n+            child = child.getNext();\n+        }\n+    }\n+    return isFunctionOrDo;\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){if(e1)[{function goo(){return true}]}else foo()}> but was:<function(){if(e1)[function goo(){return true]}else foo()}>",
    "test_result": "FAIL"
}