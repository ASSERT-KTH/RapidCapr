{
    "patch": "import org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.LUDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final int size = m.getColumnDimension();\n    if (size <= 5000) {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    } else {\n        final LUDecomposition lu = new LUDecomposition(m);\n        final RealMatrix l = lu.getL();\n        final RealMatrix u = lu.getU();\n        for (int i = 0; i < size; i++) {\n            for (int j = i + 1; j < size; j++) {\n                l.setEntry(j, i, 0);\n            }\n        }\n        return l.multiply(u);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..6b4aaff79 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.LUDecomposition;\n+import org.apache.commons.math3.linear.RealMatrix;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int size = m.getColumnDimension();\n+    if (size <= 5000) {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n+    } else {\n+        final LUDecomposition lu = new LUDecomposition(m);\n+        final RealMatrix l = lu.getL();\n+        final RealMatrix u = lu.getU();\n+        for (int i = 0; i < size; i++) {\n+            for (int j = i + 1; j < size; j++) {\n+                l.setEntry(j, i, 0);\n+            }\n+        }\n+        return l.multiply(u);\n     }\n }\n+}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}