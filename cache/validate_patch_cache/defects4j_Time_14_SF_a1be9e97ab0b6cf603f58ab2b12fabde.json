{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        // check if the month field is being added to\n        if (partial.getFieldType(fieldIndex).equals(DateTimeFieldType.monthOfYear())) {\n            // get the current month and year\n            int currentMonth = values[fieldIndex];\n            int currentYear = (fieldIndex > 0) ? values[fieldIndex - 1] : 2000;\n            \n            // add the months and calculate the resulting year and month\n            int months = currentMonth + valueToAdd;\n            int year = currentYear + months / 12;\n            int month = months % 12;\n            \n            // handle leap year\n            if (month < 1) {\n                month += 12;\n                year--;\n            }\n            else if (month > 12) {\n                month -= 12;\n                year++;\n            }\n            \n            // set the new year and month values\n            int[] newValues = Arrays.copyOf(values, values.length);\n            newValues[fieldIndex] = month;\n            if (fieldIndex > 0) {\n                newValues[fieldIndex - 1] = year;\n            }\n            return newValues;\n        }\n        else {\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..f52c2888 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,55 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        // check if the month field is being added to\n+        if (partial.getFieldType(fieldIndex).equals(DateTimeFieldType.monthOfYear())) {\n+            // get the current month and year\n+            int currentMonth = values[fieldIndex];\n+            int currentYear = (fieldIndex > 0) ? values[fieldIndex - 1] : 2000;\n+            \n+            // add the months and calculate the resulting year and month\n+            int months = currentMonth + valueToAdd;\n+            int year = currentYear + months / 12;\n+            int month = months % 12;\n+            \n+            // handle leap year\n+            if (month < 1) {\n+                month += 12;\n+                year--;\n+            }\n+            else if (month > 12) {\n+                month -= 12;\n+                year++;\n+            }\n+            \n+            // set the new year and month values\n+            int[] newValues = Arrays.copyOf(values, values.length);\n+            newValues[fieldIndex] = month;\n+            if (fieldIndex > 0) {\n+                newValues[fieldIndex - 1] = year;\n+            }\n+            return newValues;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n+        else {\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}