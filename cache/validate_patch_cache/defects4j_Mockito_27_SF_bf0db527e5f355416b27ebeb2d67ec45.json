{
    "patch": "public <T> void resetMock(T mock) {\n    if (mock != null) {\n        // Unwrap all spied and proxied objects to get the real underlying mock instance\n        Object unwrappedMock = mock;\n        while (unwrappedMock instanceof MockAccess) {\n            unwrappedMock = ((MockAccess) unwrappedMock).getMock();\n        }\n        MockHandler<?> oldHandler = ((MockAccess) unwrappedMock).getMockitoInterceptor().getMockHandler();\n        MockHandler<?> newHandler = new MockHandler<>(oldHandler.getMockSettings());\n        ((MockAccess) mock).setMockitoInterceptor(new HandlerInterceptorImpl(newHandler));\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..81c28318d 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,19 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (mock != null) {\n+        // Unwrap all spied and proxied objects to get the real underlying mock instance\n+        Object unwrappedMock = mock;\n+        while (unwrappedMock instanceof MockAccess) {\n+            unwrappedMock = ((MockAccess) unwrappedMock).getMock();\n+        }\n+        MockHandler<?> oldHandler = ((MockAccess) unwrappedMock).getMockitoInterceptor().getMockHandler();\n+        MockHandler<?> newHandler = new MockHandler<>(oldHandler.getMockSettings());\n+        ((MockAccess) mock).setMockitoInterceptor(new HandlerInterceptorImpl(newHandler));\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}