{
    "patch": "public double getTypedPercent(String js) {\n    int totalCount = 0;\n    int typedCount = 0;\n    for (int i = 0; i < js.length(); i++) {\n        char c = js.charAt(i);\n        if (Character.isLetter(c)) {\n            totalCount++;\n            String nextWord = js.substring(i, js.indexOf(\" \", i));\n            if (nextWord.matches(\"(?i)int|double|float|char|String|boolean|long|short\")) {\n                typedCount++;\n            }\n        }\n    }\n    if (totalCount == 0) {\n        return 100.0;\n    }\n    return ((double) typedCount / totalCount) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..4b1a557f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String js) {\n+    int totalCount = 0;\n+    int typedCount = 0;\n+    for (int i = 0; i < js.length(); i++) {\n+        char c = js.charAt(i);\n+        if (Character.isLetter(c)) {\n+            totalCount++;\n+            String nextWord = js.substring(i, js.indexOf(\" \", i));\n+            if (nextWord.matches(\"(?i)int|double|float|char|String|boolean|long|short\")) {\n+                typedCount++;\n+            }\n+        }\n+    }\n+    if (totalCount == 0) {\n+        return 100.0;\n+    }\n+    return ((double) typedCount / totalCount) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}