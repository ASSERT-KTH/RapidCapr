{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.EXPR_RESULT) {\n        if (n.hasOneChild() && n.getFirstChild().getType() == Token.CALL) {\n            return true;\n        }\n        return false;\n    }\n    \n    if (n.getType() == Token.BLOCK) {\n        Node maybeExpr = null;\n        boolean isEvent = false;\n        if (n.getParent().getType() == Token.EXPR_RESULT) {\n            Node parent = n.getParent();\n            if (parent.hasOneChild() && parent.getFirstChild().getType() == Token.CALL) {\n                isEvent = true;\n                maybeExpr = parent.getFirstChild();\n            }\n        }\n        \n        if (n.hasOneChild()) {\n          maybeExpr = n.getFirstChild();\n          // If this is an event handler (i.e. CALL in EXPR_RESULT), return false if the child is \n          // an expression node that also depends on return value. Otherwise, return true.\n          if (isEvent && NodeUtil.mayHaveSideEffects(maybeExpr)) {\n              return false;\n          } else {\n              return NodeUtil.isExpressionNode(maybeExpr);\n          }\n        }\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..9b01e39a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,39 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.EXPR_RESULT) {\n+        if (n.hasOneChild() && n.getFirstChild().getType() == Token.CALL) {\n+            return true;\n+        }\n+        return false;\n+    }\n+    \n     if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+        Node maybeExpr = null;\n+        boolean isEvent = false;\n+        if (n.getParent().getType() == Token.EXPR_RESULT) {\n+            Node parent = n.getParent();\n+            if (parent.hasOneChild() && parent.getFirstChild().getType() == Token.CALL) {\n+                isEvent = true;\n+                maybeExpr = parent.getFirstChild();\n+            }\n+        }\n+        \n+        if (n.hasOneChild()) {\n+          maybeExpr = n.getFirstChild();\n+          // If this is an event handler (i.e. CALL in EXPR_RESULT), return false if the child is \n+          // an expression node that also depends on return value. Otherwise, return true.\n+          if (isEvent && NodeUtil.mayHaveSideEffects(maybeExpr)) {\n+              return false;\n+          } else {\n+              return NodeUtil.isExpressionNode(maybeExpr);\n+          }\n+        }\n     }\n \n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}