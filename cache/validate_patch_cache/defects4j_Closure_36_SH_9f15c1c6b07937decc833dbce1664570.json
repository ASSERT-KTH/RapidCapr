{
    "patch": "          // Bug 2388531: Don't inline subclass definitions into class defining calls as this confused class removing logic.\n          SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode);\n          if (relationship != null) {\n            return false;\n          }\n\n          // issue 668: Don't inline singleton getter methods calls as this confused class removing logic.\n          Node parent = callNode.getParent();\n          if (parent.isExprResult()) {\n            Node grandparent = parent.getParent();\n            if (grandparent.isAssign()) {\n              Node greatGrandparent = grandparent.getParent();\n              if (greatGrandparent.isScript()) {\n                if (compiler.getCodingConvention().isSingletonGetter(greatGrandparent, grandparent)) {\n                  return false;\n                }\n              }\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..2ccff4ab 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,24 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+          // Bug 2388531: Don't inline subclass definitions into class defining calls as this confused class removing logic.\n+          SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode);\n+          if (relationship != null) {\n+            return false;\n+          }\n+\n+          // issue 668: Don't inline singleton getter methods calls as this confused class removing logic.\n+          Node parent = callNode.getParent();\n+          if (parent.isExprResult()) {\n+            Node grandparent = parent.getParent();\n+            if (grandparent.isAssign()) {\n+              Node greatGrandparent = grandparent.getParent();\n+              if (greatGrandparent.isScript()) {\n+                if (compiler.getCodingConvention().isSingletonGetter(greatGrandparent, grandparent)) {\n+                  return false;\n+                }\n+              }\n+            }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}