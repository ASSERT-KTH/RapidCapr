{
    "patch": "private void init() {\n    thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n\n    nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n\n    StringBuilder regex= new StringBuilder();\n    List<Strategy> collector = new ArrayList<Strategy>();\n\n    Matcher patternMatcher= formatPattern.matcher(pattern);\n    if(!patternMatcher.matches()) {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n\n    Pattern checkerPattern = Pattern.compile(\"(.*?)((\" + formatPattern.pattern() + \")|$)\");\n    Matcher checkerMatcher = checkerPattern.matcher(pattern + \" \");\n\n    currentFormatField = checkerMatcher.group(1);\n    Strategy currentStrategy= getStrategy(currentFormatField);\n    for(;;) {\n        checkerMatcher.region(checkerMatcher.end(), checkerMatcher.regionEnd());\n        if(!checkerMatcher.find()) {\n            nextStrategy = null;\n            break;\n        }\n        String nextFormatField= checkerMatcher.group(1);\n        nextStrategy = getStrategy(nextFormatField);\n        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField= nextFormatField;\n        currentStrategy= nextStrategy;\n    }\n    if(currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n    }\n    currentFormatField= null;\n    strategies= collector.toArray(new Strategy[collector.size()]);\n    parsePattern= Pattern.compile(\"^\\\\s*\" + regex.toString() + \"\\\\s*$\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..3d596d64 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -112,42 +112,45 @@ public class FastDateParser implements DateParser, Serializable {\n      * Initialize derived fields from defining fields.\n      * This is called from constructor and from readObject (de-serialization)\n      */\n-    private void init() {\n-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+private void init() {\n+    thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n \n-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n+    nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n \n-        StringBuilder regex= new StringBuilder();\n-        List<Strategy> collector = new ArrayList<Strategy>();\n+    StringBuilder regex= new StringBuilder();\n+    List<Strategy> collector = new ArrayList<Strategy>();\n \n-        Matcher patternMatcher= formatPattern.matcher(pattern);\n-        if(!patternMatcher.lookingAt()) {\n-            throw new IllegalArgumentException(\"Invalid pattern\");\n-        }\n+    Matcher patternMatcher= formatPattern.matcher(pattern);\n+    if(!patternMatcher.matches()) {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n \n-        currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n-        for(;;) {\n-            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n-            if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n-                break;\n-            }\n-            String nextFormatField= patternMatcher.group();\n-            nextStrategy = getStrategy(nextFormatField);\n-            if(currentStrategy.addRegex(this, regex)) {\n-                collector.add(currentStrategy);\n-            }\n-            currentFormatField= nextFormatField;\n-            currentStrategy= nextStrategy;\n+    Pattern checkerPattern = Pattern.compile(\"(.*?)((\" + formatPattern.pattern() + \")|$)\");\n+    Matcher checkerMatcher = checkerPattern.matcher(pattern + \" \");\n+\n+    currentFormatField = checkerMatcher.group(1);\n+    Strategy currentStrategy= getStrategy(currentFormatField);\n+    for(;;) {\n+        checkerMatcher.region(checkerMatcher.end(), checkerMatcher.regionEnd());\n+        if(!checkerMatcher.find()) {\n+            nextStrategy = null;\n+            break;\n         }\n+        String nextFormatField= checkerMatcher.group(1);\n+        nextStrategy = getStrategy(nextFormatField);\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }\n-        currentFormatField= null;\n-        strategies= collector.toArray(new Strategy[collector.size()]);\n-        parsePattern= Pattern.compile(regex.toString());\n+        currentFormatField= nextFormatField;\n+        currentStrategy= nextStrategy;\n     }\n+    if(currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+    }\n+    currentFormatField= null;\n+    strategies= collector.toArray(new Strategy[collector.size()]);\n+    parsePattern= Pattern.compile(\"^\\\\s*\" + regex.toString() + \"\\\\s*$\");\n+}\n \n     // Accessors\n     //-----------------------------------------------------------------------",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}