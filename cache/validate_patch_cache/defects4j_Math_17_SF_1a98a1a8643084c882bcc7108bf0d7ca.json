{
    "patch": "public Dfp multiply(final int x) {\n    \tif (isNaN() || Double.isNaN(x)) {\n\t\t\treturn newInstance(this);\n\t\t}\n        final Dfp multiplicand = newInstance(getField(), x);\n\t\treturn multiply(multiplicand);\n\t}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..68a521282 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1599,9 +1599,13 @@ public class Dfp implements FieldElement<Dfp> {\n      * @param x multiplicand\n      * @return product of this and x\n      */\n-    public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n-    }\n+public Dfp multiply(final int x) {\n+    \tif (isNaN() || Double.isNaN(x)) {\n+\t\t\treturn newInstance(this);\n+\t\t}\n+        final Dfp multiplicand = newInstance(getField(), x);\n+\t\treturn multiply(multiplicand);\n+\t}\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.\n      * There are speed advantages in this special case.",
    "result_reason": "error: no suitable method found for newInstance(DfpField,int)",
    "test_result": "ERROR"
}