{
    "patch": "        // evaluate 48 hours before and after to work out if anything is happening\n        long instantBefore = convertUTCToLocal(instant - 48 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfter = convertUTCToLocal(instant + 48 * DateTimeConstants.MILLIS_PER_HOUR);\n        long delta = (earlierOrLater ? instantAfter - instant : instant - instantBefore) / 2;\n        long candidate = earlierOrLater ? instantAfter - delta : instantBefore + delta;\n        long candidateLocal = convertUTCToLocal(candidate);\n        if (convertUTCToLocal(candidate - delta) == candidateLocal) {\n            return convertLocalToUTC(candidateLocal, false, earlierOrLater ? instantAfter : instantBefore);\n        }\n        return convertLocalToUTC(convertUTCToLocal(instant), false, instant);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..0d148aaf 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,16 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n+        // evaluate 48 hours before and after to work out if anything is happening\n+        long instantBefore = convertUTCToLocal(instant - 48 * DateTimeConstants.MILLIS_PER_HOUR);\n+        long instantAfter = convertUTCToLocal(instant + 48 * DateTimeConstants.MILLIS_PER_HOUR);\n+        long delta = (earlierOrLater ? instantAfter - instant : instant - instantBefore) / 2;\n+        long candidate = earlierOrLater ? instantAfter - delta : instantBefore + delta;\n+        long candidateLocal = convertUTCToLocal(candidate);\n+        if (convertUTCToLocal(candidate - delta) == candidateLocal) {\n+            return convertLocalToUTC(candidateLocal, false, earlierOrLater ? instantAfter : instantBefore);\n         }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n-    }\n+        return convertLocalToUTC(convertUTCToLocal(instant), false, instant);\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}