{
    "patch": "          } else if (maybeInit.isFunctionCall()){\n            int funcCallIndex = index;\n            while(++funcCallIndex < references.size()){\n              if(references.get(funcCallIndex).isVarDeclaration()){\n                return false;\n              }\n              if(references.get(funcCallIndex).isFunctionCall()){\n                return false;\n              }\n              if(references.get(funcCallIndex).isSimpleAssignmentToName()){\n                return false;\n              }\n              if(references.get(funcCallIndex).isNameRead() && !references.get(funcCallIndex).isThisReference()){\n                return references.get(funcCallIndex);\n              }\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..72ec0b5e 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,22 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          } else if (maybeInit.isFunctionCall()){\n+            int funcCallIndex = index;\n+            while(++funcCallIndex < references.size()){\n+              if(references.get(funcCallIndex).isVarDeclaration()){\n+                return false;\n+              }\n+              if(references.get(funcCallIndex).isFunctionCall()){\n+                return false;\n+              }\n+              if(references.get(funcCallIndex).isSimpleAssignmentToName()){\n+                return false;\n+              }\n+              if(references.get(funcCallIndex).isNameRead() && !references.get(funcCallIndex).isThisReference()){\n+                return references.get(funcCallIndex);\n+              }\n+            }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}