{
    "patch": "        try {\n            long newMillis = millis;\n            for (int i = 0; i < count; i++) {\n                newMillis = savedFields[i].set(newMillis, resetFields);\n                if (newMillis != millis) {\n                    if (i == 0) {\n                        DurationField months = DurationFieldType.months().getField(iChrono);\n                        DurationField days = DurationFieldType.days().getField(iChrono);\n                        DurationField first = savedFields[0].iField.getDurationField();\n                        // alter base year for parsing if first field is month or day\n                        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                            saveField(DateTimeFieldType.year(), iDefaultYear);\n                            return computeMillis(resetFields, text);\n                        }\n                    } else {\n                        if (iZone == null) {\n                            newMillis -= iOffset;\n                        } else {\n                            int offset = iZone.getOffsetFromLocal(newMillis);\n                            newMillis -= offset;\n                            if (offset != iZone.getOffset(newMillis)) {\n                                String message =\n                                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                                if (text != null) {\n                                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                                }\n                                throw new IllegalArgumentException(message);\n                            }\n                        }\n                        \n                        return newMillis;\n                    }\n                }\n            }\n            if (iZone == null) {\n                newMillis -= iOffset;\n            } else {\n                int offset = iZone.getOffsetFromLocal(newMillis);\n                newMillis -= offset;\n                if (offset != iZone.getOffset(newMillis)) {\n                    String message =\n                        \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                    if (text != null) {\n                        message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                    }\n                    throw new IllegalArgumentException(message);\n                }\n            }\n            return newMillis;\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..03b8d7ea 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,61 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            long newMillis = millis;\n+            for (int i = 0; i < count; i++) {\n+                newMillis = savedFields[i].set(newMillis, resetFields);\n+                if (newMillis != millis) {\n+                    if (i == 0) {\n+                        DurationField months = DurationFieldType.months().getField(iChrono);\n+                        DurationField days = DurationFieldType.days().getField(iChrono);\n+                        DurationField first = savedFields[0].iField.getDurationField();\n+                        // alter base year for parsing if first field is month or day\n+                        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+                            saveField(DateTimeFieldType.year(), iDefaultYear);\n+                            return computeMillis(resetFields, text);\n+                        }\n+                    } else {\n+                        if (iZone == null) {\n+                            newMillis -= iOffset;\n+                        } else {\n+                            int offset = iZone.getOffsetFromLocal(newMillis);\n+                            newMillis -= offset;\n+                            if (offset != iZone.getOffset(newMillis)) {\n+                                String message =\n+                                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                                if (text != null) {\n+                                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                                }\n+                                throw new IllegalArgumentException(message);\n+                            }\n+                        }\n+                        \n+                        return newMillis;\n+                    }\n+                }\n+            }\n+            if (iZone == null) {\n+                newMillis -= iOffset;\n+            } else {\n+                int offset = iZone.getOffsetFromLocal(newMillis);\n+                newMillis -= offset;\n+                if (offset != iZone.getOffset(newMillis)) {\n+                    String message =\n+                        \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                    if (text != null) {\n+                        message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                    }\n+                    throw new IllegalArgumentException(message);\n+                }\n+            }\n+            return newMillis;\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}