{
    "patch": "if (offsetLocal == offsetAdjusted) {\n    if (offsetLocal != 0) {\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n        if (prevLocal < prevAdjusted && instantAdjusted >= prevAdjusted) {\n            return offsetAdjusted;\n        }\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        }\n    }\n    return offsetAdjusted;\n} else {\n    if (offsetLocal > offsetAdjusted) {\n        final long prevAdjusted = previousTransition(instantAdjusted);\n        final long prevLocal = previousTransition(instantLocal - offsetLocal);\n        if (prevAdjusted > prevLocal && instantAdjusted >= prevLocal && instantLocal < prevAdjusted) {\n            return offsetLocal;\n        }\n        final long nextAdjusted = nextTransition(instantAdjusted);\n        final long nextLocal = nextTransition(instantLocal - offsetAdjusted);\n        if (nextAdjusted <= nextLocal) {\n            return offsetAdjusted;\n        } else {\n            final int totalOffset = getTotalOffset( nextLocal);\n            final int offsetDiff = totalOffset - offsetLocal;\n            final long instantBefore = nextLocal + offsetDiff;\n            if (instantBefore <= instantLocal) {\n                return offsetLocal;\n            }\n        }\n    } else {\n        final long nextLocal = nextTransition(instantAdjusted);\n        final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal > nextAdjusted && instantAdjusted >= nextAdjusted && instantLocal < nextLocal) {\n            return offsetAdjusted;\n        }\n        final long prevAdjusted = previousTransition(instantAdjusted);\n        final long prevLocal = previousTransition(instantLocal - offsetLocal);\n        if (prevAdjusted >= prevLocal) {\n            return offsetLocal;\n        } else {\n            final int totalOffset = getTotalOffset( prevLocal);\n            final int offsetDiff = totalOffset - offsetAdjusted;\n            final long instantBefore = prevLocal + offsetDiff;\n            if (instantBefore <= instantAdjusted) {\n                return offsetAdjusted;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..9a147a7f 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,59 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal == offsetAdjusted) {\n+    if (offsetLocal != 0) {\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+        if (prevLocal < prevAdjusted && instantAdjusted >= prevAdjusted) {\n+            return offsetAdjusted;\n+        }\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        }\n+    }\n+    return offsetAdjusted;\n+} else {\n+    if (offsetLocal > offsetAdjusted) {\n+        final long prevAdjusted = previousTransition(instantAdjusted);\n+        final long prevLocal = previousTransition(instantLocal - offsetLocal);\n+        if (prevAdjusted > prevLocal && instantAdjusted >= prevLocal && instantLocal < prevAdjusted) {\n+            return offsetLocal;\n+        }\n+        final long nextAdjusted = nextTransition(instantAdjusted);\n+        final long nextLocal = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextAdjusted <= nextLocal) {\n+            return offsetAdjusted;\n+        } else {\n+            final int totalOffset = getTotalOffset( nextLocal);\n+            final int offsetDiff = totalOffset - offsetLocal;\n+            final long instantBefore = nextLocal + offsetDiff;\n+            if (instantBefore <= instantLocal) {\n+                return offsetLocal;\n+            }\n+        }\n+    } else {\n+        final long nextLocal = nextTransition(instantAdjusted);\n+        final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal > nextAdjusted && instantAdjusted >= nextAdjusted && instantLocal < nextLocal) {\n+            return offsetAdjusted;\n+        }\n+        final long prevAdjusted = previousTransition(instantAdjusted);\n+        final long prevLocal = previousTransition(instantLocal - offsetLocal);\n+        if (prevAdjusted >= prevLocal) {\n+            return offsetLocal;\n+        } else {\n+            final int totalOffset = getTotalOffset( prevLocal);\n+            final int offsetDiff = totalOffset - offsetAdjusted;\n+            final long instantBefore = prevLocal + offsetDiff;\n+            if (instantBefore <= instantAdjusted) {\n+                return offsetAdjusted;\n+            }\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}