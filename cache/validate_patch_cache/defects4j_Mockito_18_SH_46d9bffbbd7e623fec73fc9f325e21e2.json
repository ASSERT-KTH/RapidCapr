{
    "patch": "@Override\npublic Object run(Context ctx) throws Exception {\n    MethodCall values = Mockito.mock(MethodCall.class);\n    Mockito.when(values.getName()).thenReturn(\"size\");\n    Mockito.when(values.call(ArgumentMatchers.<Object[]>any())).thenReturn(123);\n\n    Iterable<Integer> iterable = Arrays.asList(1, 2, 3);\n    Iterator<Integer> mockIterator = Mockito.mock(Iterator.class);\n    Mockito.when(mockIterator.hasNext()).thenReturn(false);\n    Mockito.when(iterable.iterator()).thenReturn(mockIterator);\n\n    Object[] args = new Object[]{iterable};\n    Iterable<Integer> result = (Iterable<Integer>) new MockIterable().apply(values, args);\n    assertFalse(result.iterator().hasNext());\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}