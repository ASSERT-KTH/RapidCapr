{
    "patch": "for (int i = 0; i < count; i++) {\n    SavedField savedField = savedFields[i];\n    long newMillis = savedField.set(millis, resetFields);\n    if (newMillis == Long.MIN_VALUE) {\n        throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n    } else if (newMillis == Long.MAX_VALUE) {\n        if (savedField.iField.getType() == DateTimeFieldType.monthOfYear() ||\n                savedField.iField.getType() == DateTimeFieldType.dayOfMonth()) {\n            if (compareReverse(savedField.iField.getDurationField(),\n                               DurationFieldType.months().getField(iChrono)) >= 0 &&\n                    compareReverse(savedField.iField.getDurationField(),\n                                    DurationFieldType.days().getField(iChrono)) <= 0) {\n                saveField(DateTimeFieldType.year(), Integer.valueOf(\n                        (new LocalDate(millis, iChrono).getYear() > 0 ? Integer.valueOf(5) : Integer.valueOf(-6))\n                                .toString()));  // adjust year and continue\n                millis = computeMillis(resetFields, text);\n                continue;\n            }\n        }\n        throw new IllegalArgumentException(\"Parse failed: value too large for precision: \" + savedField.iField);\n    } else {\n        millis = newMillis;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..726c1def 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,30 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    SavedField savedField = savedFields[i];\n+    long newMillis = savedField.set(millis, resetFields);\n+    if (newMillis == Long.MIN_VALUE) {\n+        throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n+    } else if (newMillis == Long.MAX_VALUE) {\n+        if (savedField.iField.getType() == DateTimeFieldType.monthOfYear() ||\n+                savedField.iField.getType() == DateTimeFieldType.dayOfMonth()) {\n+            if (compareReverse(savedField.iField.getDurationField(),\n+                               DurationFieldType.months().getField(iChrono)) >= 0 &&\n+                    compareReverse(savedField.iField.getDurationField(),\n+                                    DurationFieldType.days().getField(iChrono)) <= 0) {\n+                saveField(DateTimeFieldType.year(), Integer.valueOf(\n+                        (new LocalDate(millis, iChrono).getYear() > 0 ? Integer.valueOf(5) : Integer.valueOf(-6))\n+                                .toString()));  // adjust year and continue\n+                millis = computeMillis(resetFields, text);\n+                continue;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Parse failed: value too large for precision: \" + savedField.iField);\n+    } else {\n+        millis = newMillis;\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}