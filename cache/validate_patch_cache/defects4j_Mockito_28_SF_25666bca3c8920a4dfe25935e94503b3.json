{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        if (field.getType().isAssignableFrom(fieldInstance.getClass())) {\n            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n                try {\n                    field.setAccessible(true);\n                    field.set(fieldInstance, candidate);\n                    \n                    // Recursively inject mocks into candidate's superclass fields that haven't been set yet\n                    if (!field.getType().equals(candidate.getClass())) {\n                        injectMockCandidate(field.getType(), mocks, candidate);\n                    } else if (candidate instanceof HasSuperclassFields) {\n                        HasSuperclassFields superclassFields = (HasSuperclassFields) candidate;\n                        for (String fieldName : superclassFields.getSuperclassFieldNames()) {\n                            Field superclassField = candidate.getClass().getSuperclass().getDeclaredField(fieldName);\n                            if (superclassField.get(candidate) == null) {\n                                Object superclassFieldInstance = superclassField.getType().newInstance();\n                                injectMockCandidate(superclassField.getType(), mocks, superclassFieldInstance);\n                                superclassField.setAccessible(true);\n                                superclassField.set(candidate, superclassFieldInstance);\n                            }\n                        }\n                    }\n                    break;\n                } catch (IllegalAccessException | NoSuchFieldException | InstantiationException e) {\n                    throw new IllegalArgumentException(\"Could not set field value\", e);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..4003920db 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,39 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+        if (field.getType().isAssignableFrom(fieldInstance.getClass())) {\n+            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n+                try {\n+                    field.setAccessible(true);\n+                    field.set(fieldInstance, candidate);\n+                    \n+                    // Recursively inject mocks into candidate's superclass fields that haven't been set yet\n+                    if (!field.getType().equals(candidate.getClass())) {\n+                        injectMockCandidate(field.getType(), mocks, candidate);\n+                    } else if (candidate instanceof HasSuperclassFields) {\n+                        HasSuperclassFields superclassFields = (HasSuperclassFields) candidate;\n+                        for (String fieldName : superclassFields.getSuperclassFieldNames()) {\n+                            Field superclassField = candidate.getClass().getSuperclass().getDeclaredField(fieldName);\n+                            if (superclassField.get(candidate) == null) {\n+                                Object superclassFieldInstance = superclassField.getType().newInstance();\n+                                injectMockCandidate(superclassField.getType(), mocks, superclassFieldInstance);\n+                                superclassField.setAccessible(true);\n+                                superclassField.set(candidate, superclassFieldInstance);\n+                            }\n+                        }\n+                    }\n+                    break;\n+                } catch (IllegalAccessException | NoSuchFieldException | InstantiationException e) {\n+                    throw new IllegalArgumentException(\"Could not set field value\", e);\n+                }\n+            }\n+        }\n+    }\n+}\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}