{
    "patch": "if (options.checkGlobalThisLevel != null) {\n      CheckLevel checkGlobalThisLevel = options.checkGlobalThisLevel;\n      if (checkGlobalThisLevel == CheckLevel.ERROR) {\n        checkGlobalThisLevel = CheckLevel.WARNING;\n      } else if (outStream == null) {\n        checkGlobalThisLevel = CheckLevel.WARNING;\n      }\n      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, checkGlobalThisLevel);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..24e1fba1 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,15 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+if (options.checkGlobalThisLevel != null) {\n+      CheckLevel checkGlobalThisLevel = options.checkGlobalThisLevel;\n+      if (checkGlobalThisLevel == CheckLevel.ERROR) {\n+        checkGlobalThisLevel = CheckLevel.WARNING;\n+      } else if (outStream == null) {\n+        checkGlobalThisLevel = CheckLevel.WARNING;\n+      }\n+      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, checkGlobalThisLevel);\n+}\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}