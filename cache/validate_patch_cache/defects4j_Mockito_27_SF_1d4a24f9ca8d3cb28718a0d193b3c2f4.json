{
    "patch": "public static <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldHandler = (MockHandlerInterface<T>) ((MockAccess) mock).getMockHandler();\n    MockHandler<T> newHandler = new MockHandler<>(oldHandler);\n    MethodInterceptorFilter filter = new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n    if (mock instanceof Factory) {\n        Factory f = (Factory) mock;\n        Callback[] callbacks = f.getCallbacks();\n        int index = findMockInterceptorCallbackIndex(callbacks);\n\n        callbacks[index] = filter;\n\n        f.setCallbacks(callbacks);\n    } else if (mock instanceof MockitoSpy) {\n        MockitoSpy<T> spiedMock = (MockitoSpy<T>) mock;\n        Invoker oldInvoker = spiedMock.getMockitoInterceptor().getInvoker();\n        Invoker newInvoker = new MockHandlerInvoker<T>(newHandler);\n        spiedMock.getMockitoInterceptor().setInvoker(newInvoker);\n    } else {\n        ((MockAccess) mock).setMockHandler(newHandler);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..f6e79491d 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,29 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public static <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldHandler = (MockHandlerInterface<T>) ((MockAccess) mock).getMockHandler();\n+    MockHandler<T> newHandler = new MockHandler<>(oldHandler);\n+    MethodInterceptorFilter filter = new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+    if (mock instanceof Factory) {\n+        Factory f = (Factory) mock;\n+        Callback[] callbacks = f.getCallbacks();\n+        int index = findMockInterceptorCallbackIndex(callbacks);\n+\n+        callbacks[index] = filter;\n+\n+        f.setCallbacks(callbacks);\n+    } else if (mock instanceof MockitoSpy) {\n+        MockitoSpy<T> spiedMock = (MockitoSpy<T>) mock;\n+        Invoker oldInvoker = spiedMock.getMockitoInterceptor().getInvoker();\n+        Invoker newInvoker = new MockHandlerInvoker<T>(newHandler);\n+        spiedMock.getMockitoInterceptor().setInvoker(newInvoker);\n+    } else {\n+        ((MockAccess) mock).setMockHandler(newHandler);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}