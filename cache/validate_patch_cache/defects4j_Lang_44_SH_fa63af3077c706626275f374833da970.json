{
    "patch": "        int hexDigits = 0;\n        for (char ch : val.toCharArray()) {\n            if (ch >= '0' && ch <= '7') {\n                continue;\n            } else if (ch >= '8' && ch <= '9') {\n                if (hexDigits > 0) {\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n            } else if (ch >= 'a' && ch <= 'f' || ch >= 'A' && ch <= 'F') {\n                if (hexDigits == 0 && val.startsWith(\"-\")) {\n                    continue;\n                }\n                hexDigits++;\n            } else {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n        }\n        try {\n            if (hexDigits > 0) {\n                if (hexDigits > 16 || val.length() - (val.startsWith(\"-\") ? 1 : 0) > 16) {\n                    // Too many hex digits supplied for a long - pretend there's a prefix.\n                    return createBigInteger(val);\n                }\n                return createLong(Long.parseLong(val.substring(val.startsWith(\"-\") ? 3 : 2), 16));\n            }\n            return createBigInteger(val);\n        } catch (NumberFormatException e) {\n            throw new NumberFormatException(val + \" is not a valid number.\");",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..1bb5e07b 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,34 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        int hexDigits = 0;\n+        for (char ch : val.toCharArray()) {\n+            if (ch >= '0' && ch <= '7') {\n+                continue;\n+            } else if (ch >= '8' && ch <= '9') {\n+                if (hexDigits > 0) {\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                }\n+            } else if (ch >= 'a' && ch <= 'f' || ch >= 'A' && ch <= 'F') {\n+                if (hexDigits == 0 && val.startsWith(\"-\")) {\n+                    continue;\n+                }\n+                hexDigits++;\n+            } else {\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n+            }\n+        }\n+        try {\n+            if (hexDigits > 0) {\n+                if (hexDigits > 16 || val.length() - (val.startsWith(\"-\") ? 1 : 0) > 16) {\n+                    // Too many hex digits supplied for a long - pretend there's a prefix.\n+                    return createBigInteger(val);\n+                }\n+                return createLong(Long.parseLong(val.substring(val.startsWith(\"-\") ? 3 : 2), 16));\n+            }\n+            return createBigInteger(val);\n+        } catch (NumberFormatException e) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: for-each loops are not supported in -source 1.3",
    "test_result": "ERROR"
}