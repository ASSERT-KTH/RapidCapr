{
    "patch": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n\n    Type[] interfaces = settings.getTypeToMock().getGenericInterfaces();\n    Class<?>[] extraInterfaces = settings.getExtraInterfaces().toArray(new Class[0]);\n    Class<?> superClass = settings.getTypeToMock().getSuperclass();\n    Class<?>[] allInterfaces = new Class<?>[interfaces.length + 1 + extraInterfaces.length];\n    System.arraycopy(interfaces, 0, allInterfaces, 0, interfaces.length);\n    System.arraycopy(extraInterfaces, 0, allInterfaces, interfaces.length, extraInterfaces.length);\n    allInterfaces[allInterfaces.length - 1] = Serializable.class;\n\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    if (mockedProxyType == null) {\n        mockedProxyType = (Class<? extends T>) new ByteBuddy()\n                .with(new NamingStrategy.SuffixingRandom(\"ByteBuddyMock\"))\n                .subclass(settings.getTypeToMock())\n                .implement(allInterfaces)\n                .method(any())\n                .intercept(MethodCall.invoke(MockMethodInterceptor.class.getMethod(\"intercept\", Invocation.class)))\n                .make()\n                .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)\n                .getLoaded();\n        cachingMockBytecodeGenerator.put(settings.getTypeToMock(), settings.getExtraInterfaces(), mockedProxyType);\n    }\n\n    T mockInstance = null;\n    try {\n        if (mockedProxyType.isAnonymousClass()) {\n            // Anonymous classes have no constructor, so we use an Object constructor instead.\n            mockInstance = mockedProxyType.newInstance();\n        } else if (settings.getTypeToMock().isMemberClass()) {\n            // For inner classes, we use a constructor that takes the outer instance as first argument.\n            Class<?> outerClass = settings.getTypeToMock().getEnclosingClass();\n            Constructor<?> outerClassConstructor;\n            if(outerClass != null) {\n              outerClassConstructor = outerClass.getDeclaredConstructor();\n              outerClassConstructor.setAccessible(true);\n            } else {\n              outerClassConstructor = mockedProxyType.getEnclosingConstructor();\n              outerClassConstructor.setAccessible(true);\n              outerClass = mockedProxyType.getEnclosingClass();\n            }\n            Object outerInstance = outerClassConstructor.newInstance();\n            Constructor<?> constructor = mockedProxyType.getDeclaredConstructor(outerClass, MockCreationSettings.class, MockHandler.class);\n            constructor.setAccessible(true);\n            mockInstance = (T) constructor.newInstance(outerInstance, settings, asInternalMockHandler(handler));\n        } else {\n            // For all other classes, we can just use the default constructor.\n            Constructor<?> constructor = mockedProxyType.getDeclaredConstructor(MockCreationSettings.class, MockHandler.class);\n            constructor.setAccessible(true);\n            mockInstance = (T) constructor.newInstance(settings, asInternalMockHandler(handler));\n        }\n    } catch (Exception e) {\n        throw new MockitoException(\"Failed to create mock instance\", e);\n    }\n\n    MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n    mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n    return ensureMockIsAssignableToMockedType(settings, mockInstance);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..f17c4eea7 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,37 +21,73 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n-        }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n-            mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n+        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+    }\n \n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n-            throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+    Type[] interfaces = settings.getTypeToMock().getGenericInterfaces();\n+    Class<?>[] extraInterfaces = settings.getExtraInterfaces().toArray(new Class[0]);\n+    Class<?> superClass = settings.getTypeToMock().getSuperclass();\n+    Class<?>[] allInterfaces = new Class<?>[interfaces.length + 1 + extraInterfaces.length];\n+    System.arraycopy(interfaces, 0, allInterfaces, 0, interfaces.length);\n+    System.arraycopy(extraInterfaces, 0, allInterfaces, interfaces.length, extraInterfaces.length);\n+    allInterfaces[allInterfaces.length - 1] = Serializable.class;\n+\n+    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n+            settings.getTypeToMock(),\n+            settings.getExtraInterfaces()\n+    );\n+    if (mockedProxyType == null) {\n+        mockedProxyType = (Class<? extends T>) new ByteBuddy()\n+                .with(new NamingStrategy.SuffixingRandom(\"ByteBuddyMock\"))\n+                .subclass(settings.getTypeToMock())\n+                .implement(allInterfaces)\n+                .method(any())\n+                .intercept(MethodCall.invoke(MockMethodInterceptor.class.getMethod(\"intercept\", Invocation.class)))\n+                .make()\n+                .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)\n+                .getLoaded();\n+        cachingMockBytecodeGenerator.put(settings.getTypeToMock(), settings.getExtraInterfaces(), mockedProxyType);\n+    }\n+\n+    T mockInstance = null;\n+    try {\n+        if (mockedProxyType.isAnonymousClass()) {\n+            // Anonymous classes have no constructor, so we use an Object constructor instead.\n+            mockInstance = mockedProxyType.newInstance();\n+        } else if (settings.getTypeToMock().isMemberClass()) {\n+            // For inner classes, we use a constructor that takes the outer instance as first argument.\n+            Class<?> outerClass = settings.getTypeToMock().getEnclosingClass();\n+            Constructor<?> outerClassConstructor;\n+            if(outerClass != null) {\n+              outerClassConstructor = outerClass.getDeclaredConstructor();\n+              outerClassConstructor.setAccessible(true);\n+            } else {\n+              outerClassConstructor = mockedProxyType.getEnclosingConstructor();\n+              outerClassConstructor.setAccessible(true);\n+              outerClass = mockedProxyType.getEnclosingClass();\n+            }\n+            Object outerInstance = outerClassConstructor.newInstance();\n+            Constructor<?> constructor = mockedProxyType.getDeclaredConstructor(outerClass, MockCreationSettings.class, MockHandler.class);\n+            constructor.setAccessible(true);\n+            mockInstance = (T) constructor.newInstance(outerInstance, settings, asInternalMockHandler(handler));\n+        } else {\n+            // For all other classes, we can just use the default constructor.\n+            Constructor<?> constructor = mockedProxyType.getDeclaredConstructor(MockCreationSettings.class, MockHandler.class);\n+            constructor.setAccessible(true);\n+            mockInstance = (T) constructor.newInstance(settings, asInternalMockHandler(handler));\n         }\n+    } catch (Exception e) {\n+        throw new MockitoException(\"Failed to create mock instance\", e);\n     }\n \n+    MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n+    mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+\n+    return ensureMockIsAssignableToMockedType(settings, mockInstance);\n+}\n+\n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of\n         // relying on the JVM to implicitly cast on the client call site.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}