{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        // check convergence\n        if (checker != null && checker.converged(getIterations(), simplex[0], simplex[simplex.length - 1])) {\n            return;\n        }\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex; // copy simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the expanded simplex\n                simplex = getPoints(original[0].getPoint(), reflected.getPoint(),\n                                    this.gamma).toArray(new RealPointValuePair[0]);\n            }\n\n        } else {\n\n            final boolean needToShrink = shouldContractAtEnd(original, reflected, khi, comparator);\n            RealPointValuePair contracted = null;\n            RealPointValuePair[] contractedSimplex = null;\n            if (needToShrink) {\n                // perform a shrink\n                contractedSimplex = shrink(original, comparator);\n                contracted = contractedSimplex[0];\n            } else {\n                // compute the contracted simplex\n                contracted = evaluateNewSimplex(original, this.gamma, comparator);\n            }\n\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contractedSimplex == null ? getPoints(original[0].getPoint(), contracted.getPoint(),\n                                                                 this.gamma).toArray(new RealPointValuePair[0]) : contractedSimplex;\n            } else {\n                simplex = getPoints(original[0].getPoint(), contracted.getPoint(),\n                                    this.gamma).toArray(new RealPointValuePair[0]);\n            }\n\n        }\n\n        incrementIterationsCounter();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..269ae2b4c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,62 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+    while (true) {\n+        // check convergence\n+        if (checker != null && checker.converged(getIterations(), simplex[0], simplex[simplex.length - 1])) {\n+            return;\n+        }\n \n-                return;\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex; // copy simplex\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // accept the expanded simplex\n+                simplex = getPoints(original[0].getPoint(), reflected.getPoint(),\n+                                    this.gamma).toArray(new RealPointValuePair[0]);\n+            }\n \n+        } else {\n+\n+            final boolean needToShrink = shouldContractAtEnd(original, reflected, khi, comparator);\n+            RealPointValuePair contracted = null;\n+            RealPointValuePair[] contractedSimplex = null;\n+            if (needToShrink) {\n+                // perform a shrink\n+                contractedSimplex = shrink(original, comparator);\n+                contracted = contractedSimplex[0];\n+            } else {\n+                // compute the contracted simplex\n+                contracted = evaluateNewSimplex(original, this.gamma, comparator);\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex = contractedSimplex == null ? getPoints(original[0].getPoint(), contracted.getPoint(),\n+                                                                 this.gamma).toArray(new RealPointValuePair[0]) : contractedSimplex;\n+            } else {\n+                simplex = getPoints(original[0].getPoint(), contracted.getPoint(),\n+                                    this.gamma).toArray(new RealPointValuePair[0]);\n             }\n \n         }\n \n+        incrementIterationsCounter();\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: checker has private access in DirectSearchOptimizer",
    "test_result": "ERROR"
}