{
    "patch": "public class StringUtils {\n\n    public static boolean containsAny(char[] str, char[] searchChars) {\n        if (searchChars == null || str == null) {\n            return false;\n        }\n        for (char ch : searchChars) {\n            int index = 0;\n            while ((index = indexOf(str, ch, index)) != -1) {\n                if (isSurrogate(ch)) {\n                    if (index + 1 == str.length) {\n                        return false;\n                    }\n                    if (isSurrogatePair(ch, str[index + 1])) {\n                        return true;\n                    }\n                    index++;\n                } else {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private static int indexOf(char[] array, char ch, int startIndex) {\n        for (int i = startIndex; i < array.length; i++) {\n            if (array[i] == ch) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    private static boolean isSurrogate(char ch) {\n        return ch >= Character.MIN_SURROGATE && ch <= Character.MAX_SURROGATE;\n    }\n\n    private static boolean isSurrogatePair(char high, char low) {\n        return high >= Character.MIN_HIGH_SURROGATE && high <= Character.MAX_HIGH_SURROGATE &&\n                low >= Character.MIN_LOW_SURROGATE && low <= Character.MAX_LOW_SURROGATE;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..a16a6b67 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,49 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+\n+    public static boolean containsAny(char[] str, char[] searchChars) {\n+        if (searchChars == null || str == null) {\n+            return false;\n+        }\n+        for (char ch : searchChars) {\n+            int index = 0;\n+            while ((index = indexOf(str, ch, index)) != -1) {\n+                if (isSurrogate(ch)) {\n+                    if (index + 1 == str.length) {\n+                        return false;\n+                    }\n+                    if (isSurrogatePair(ch, str[index + 1])) {\n+                        return true;\n+                    }\n+                    index++;\n+                } else {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static int indexOf(char[] array, char ch, int startIndex) {\n+        for (int i = startIndex; i < array.length; i++) {\n+            if (array[i] == ch) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    private static boolean isSurrogate(char ch) {\n+        return ch >= Character.MIN_SURROGATE && ch <= Character.MAX_SURROGATE;\n+    }\n+\n+    private static boolean isSurrogatePair(char high, char low) {\n+        return high >= Character.MIN_HIGH_SURROGATE && high <= Character.MAX_HIGH_SURROGATE &&\n+                low >= Character.MIN_LOW_SURROGATE && low <= Character.MAX_LOW_SURROGATE;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}