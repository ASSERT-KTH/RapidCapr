{
    "patch": "public static <T> ReturnValue<T> defaultReturnValue(Class<T> clazz) {\n    ReturnValue<T> returnValue = new ReturnValue<>();\n    if (clazz == boolean.class || clazz == Boolean.class) {\n        returnValue.returnValue = (T) Boolean.FALSE;\n    } else if (clazz == char.class || clazz == Character.class) {\n        returnValue.returnValue = (T) Character.valueOf('\\0');\n    } else if (clazz == byte.class || clazz == Byte.class) {\n        returnValue.returnValue = (T) Byte.valueOf((byte) 0);\n    } else if (clazz == short.class || clazz == Short.class) {\n        returnValue.returnValue = (T) Short.valueOf((short) 0);\n    } else if (clazz == int.class || clazz == Integer.class) {\n        returnValue.returnValue = (T) Integer.valueOf(0);\n    } else if (clazz == long.class || clazz == Long.class) {\n        returnValue.returnValue = (T) Long.valueOf(0L);\n    } else if (clazz == float.class || clazz == Float.class) {\n        returnValue.returnValue = (T) Float.valueOf(0.0f);\n    } else if (clazz == double.class || clazz == Double.class) {\n        returnValue.returnValue = (T) Double.valueOf(0.0d);\n    } else if (clazz == String.class) {\n        returnValue.returnValue = (T) \"\";\n    } else if (Iterable.class.isAssignableFrom(clazz)) {\n        returnValue.returnValue = (T) Collections.emptyList();\n    }\n    return returnValue;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..361ce14e4 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,31 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> ReturnValue<T> defaultReturnValue(Class<T> clazz) {\n+    ReturnValue<T> returnValue = new ReturnValue<>();\n+    if (clazz == boolean.class || clazz == Boolean.class) {\n+        returnValue.returnValue = (T) Boolean.FALSE;\n+    } else if (clazz == char.class || clazz == Character.class) {\n+        returnValue.returnValue = (T) Character.valueOf('\\0');\n+    } else if (clazz == byte.class || clazz == Byte.class) {\n+        returnValue.returnValue = (T) Byte.valueOf((byte) 0);\n+    } else if (clazz == short.class || clazz == Short.class) {\n+        returnValue.returnValue = (T) Short.valueOf((short) 0);\n+    } else if (clazz == int.class || clazz == Integer.class) {\n+        returnValue.returnValue = (T) Integer.valueOf(0);\n+    } else if (clazz == long.class || clazz == Long.class) {\n+        returnValue.returnValue = (T) Long.valueOf(0L);\n+    } else if (clazz == float.class || clazz == Float.class) {\n+        returnValue.returnValue = (T) Float.valueOf(0.0f);\n+    } else if (clazz == double.class || clazz == Double.class) {\n+        returnValue.returnValue = (T) Double.valueOf(0.0d);\n+    } else if (clazz == String.class) {\n+        returnValue.returnValue = (T) \"\";\n+    } else if (Iterable.class.isAssignableFrom(clazz)) {\n+        returnValue.returnValue = (T) Collections.emptyList();\n+    }\n+    return returnValue;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}