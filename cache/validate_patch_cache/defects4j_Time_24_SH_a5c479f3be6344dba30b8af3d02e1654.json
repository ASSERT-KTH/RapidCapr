{
    "patch": "for (int i = 0; i < count; i++) {\n    SavedField savedField = savedFields[i];\n    try {\n        millis = savedField.set(millis, resetFields);\n\n        // check that millis is within a valid range\n        DateTimeZone zone = iChrono.getZone();\n        if (millis < zone.getMinimumMillis() || millis > zone.getMaximumMillis()) {\n            throw new IllegalArgumentException(\"Provided date is out of range\");\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    } catch (RuntimeException e) {\n        if (text != null) {\n            e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n        }\n        throw e;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..8edf2213 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,28 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    SavedField savedField = savedFields[i];\n+    try {\n+        millis = savedField.set(millis, resetFields);\n+\n+        // check that millis is within a valid range\n+        DateTimeZone zone = iChrono.getZone();\n+        if (millis < zone.getMinimumMillis() || millis > zone.getMaximumMillis()) {\n+            throw new IllegalArgumentException(\"Provided date is out of range\");\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    } catch (RuntimeException e) {\n+        if (text != null) {\n+            e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n+        }\n+        throw e;\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}