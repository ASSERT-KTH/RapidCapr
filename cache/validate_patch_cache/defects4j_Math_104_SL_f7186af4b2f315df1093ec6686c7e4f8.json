{
    "patch": "import org.apache.commons.math3.util.MathArrays;\nimport org.apache.commons.math3.util.Precision;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.CompositeFormat;\n\npublic class Gamma {\n\n    private static final double DEFAULT_EPSILON = 1e-9;\n\n    /**\n     * Returns the digamma function of x. This is a continuous analogue of the\n     * sum of 1/n - log(n) for n = 1 to infinity, where x is any positive real\n     * number and gamma(x) is the gamma function.\n     *\n     * @param x Argument.\n     * @return digamma(x) to within {@literal DEFAULT_EPSILON} relative accuracy.\n     * @throws NumberIsTooSmallException if x <= {@literal 0} or x is NaN.\n     */\n    public static double digamma(final double x) throws NumberIsTooSmallException {\n        if (Double.isNaN(x) || (x <= 0.0)) {\n            throw new NumberIsTooSmallException(LocalizedFormats.DIGAMMA_NEGATIVE_ARGUMENT, x, 0, false);\n        }\n\n        /*if (x == FastMath.floor(x)) {\n            return FastMath.round(digamma(x - 1) + 1.0 / (x - 1));\n        }*/\n\n        double result = 0.0;\n        double xx;\n        double xx2;\n        double xx4;\n        final int iMax = 100000;\n        if (x < 0.000001) {\n            result -= FastMath.EULER_CONSTANT;\n            xx = x;\n            while (xx < iMax) {\n                result -= 1 / xx;\n                xx++;\n            }\n            return result;\n        }\n\n        xx = x;\n        while (xx < 10.0) {\n            result -= 1 / xx;\n            xx++;\n        }\n\n        xx = xx - 1.0;\n        xx2 = xx * xx;\n        xx4 = xx2 * xx2;\n\n        result += FastMath.log(xx) + (1.0 / (2.0 * xx)) - (1.0 / (12.0 * xx2)) + (1.0 / (120.0 * xx4)) - (1.0 / (252.0 * xx2 * xx2))\n                + (1.0 / (240.0 * xx4 * xx2)) - (5.0 / (660.0 * xx4 * xx4)) + (691.0 / (32760.0 * xx4 * xx2 * xx2)) - (1.0 / (12.0 * xx2 * xx2 * xx))\n                + (3617.0 / (8160.0 * xx4 * xx4 * xx2));\n\n        return result;\n    }\n}\n",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}