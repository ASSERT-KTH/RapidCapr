{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = contract(original, comparator, best);\n                }\n\n            } else {\n                simplex = contract(original, comparator, best);\n            }\n\n            // check convergence\n            if (getConvergenceChecker() != null) {\n                if (getConvergenceChecker().converged(getIterations(), best, simplex[0])) {\n                    return;\n                }\n            }\n\n        }\n\n    }\n    \n    private RealPointValuePair[] contract(final RealPointValuePair[] original,\n            final Comparator<RealPointValuePair> comparator, final RealPointValuePair best) {\n        final RealPointValuePair[] contractedSimplex = simplex;\n        final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            return contractedSimplex;\n        } else {\n            return shrink(original, comparator, best);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..54688b54e 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -79,24 +79,36 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = contract(original, comparator, best);\n                 }\n \n-                return;\n-\n+            } else {\n+                simplex = contract(original, comparator, best);\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n-                return;\n+            if (getConvergenceChecker() != null) {\n+                if (getConvergenceChecker().converged(getIterations(), best, simplex[0])) {\n+                    return;\n+                }\n             }\n \n         }\n \n     }\n+    \n+    private RealPointValuePair[] contract(final RealPointValuePair[] original,\n+            final Comparator<RealPointValuePair> comparator, final RealPointValuePair best) {\n+        final RealPointValuePair[] contractedSimplex = simplex;\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            return contractedSimplex;\n+        } else {\n+            return shrink(original, comparator, best);\n+        }\n+    }\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}