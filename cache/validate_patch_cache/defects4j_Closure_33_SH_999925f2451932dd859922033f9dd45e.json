{
    "patch": "      ObjectType objType = getObjType();\n      JSType nullOrVoidType = getNativeType(JSTypeNative.NULL_TYPE)\n          .getLeastSupertype(getNativeType(JSTypeNative.VOID_TYPE));\n      for (ObjectType type : objType.getAncestorTypes()) {\n        // Only interest in anonymous types.\n        if (type.isNominalConstructor() || !type.isAnonymousObjectType()) {\n          continue;\n        }\n        for (String prop : type.getOwnPropertyNames()) {\n          JSType propType = type.getPropertyType(prop);\n          if (!isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n              // Infer the weakest possible type for declared properties.\n              if (type.isStructuralInterface()\n                  && !propType.isSubtypeOf(getNativeType(JSTypeNative.OBJECT_TYPE))) {\n                typeToInfer = nullOrVoidType;\n              } else {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                    .getLeastSupertype(propType);\n              }\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..e84fbf0c 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,32 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+      ObjectType objType = getObjType();\n+      JSType nullOrVoidType = getNativeType(JSTypeNative.NULL_TYPE)\n+          .getLeastSupertype(getNativeType(JSTypeNative.VOID_TYPE));\n+      for (ObjectType type : objType.getAncestorTypes()) {\n+        // Only interest in anonymous types.\n+        if (type.isNominalConstructor() || !type.isAnonymousObjectType()) {\n+          continue;\n+        }\n+        for (String prop : type.getOwnPropertyNames()) {\n+          JSType propType = type.getPropertyType(prop);\n+          if (!isPropertyTypeDeclared(prop)) {\n+            JSType typeToInfer = propType;\n+            if (!hasProperty(prop)) {\n+              // Infer the weakest possible type for declared properties.\n+              if (type.isStructuralInterface()\n+                  && !propType.isSubtypeOf(getNativeType(JSTypeNative.OBJECT_TYPE))) {\n+                typeToInfer = nullOrVoidType;\n+              } else {\n+                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                    .getLeastSupertype(propType);\n+              }\n+            }\n+            defineInferredProperty(prop, typeToInfer, null);\n+          }\n+        }\n+      }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}