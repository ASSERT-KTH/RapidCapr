{
    "patch": "parent.detachFromParent();\ncompiler.reportCodeChange();\nif (provided == null) {\n  unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n} else {\n  if (provided.explicitModule == null || provided.isExplicitlyProvided() == false) {\n    unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n  } else {\n    JSModule providedModule = provided.explicitModule;\n\n    // This must be non-null, because there was an explicit provide.\n    Preconditions.checkNotNull(providedModule);\n\n    JSModule module = t.getModule();\n    if (moduleGraph != null &&\n        module != providedModule &&\n        !moduleGraph.dependsOn(module, providedModule)) {\n      compiler.report(\n          t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n              providedModule.getName(),\n              module.getName()));\n    }\n  }\n}\nmaybeAddToSymbolTable(left);\nmaybeAddStringNodeToSymbolTable(arg);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..6fdec9cc 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,32 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+parent.detachFromParent();\n+compiler.reportCodeChange();\n+if (provided == null) {\n+  unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n+} else {\n+  if (provided.explicitModule == null || provided.isExplicitlyProvided() == false) {\n+    unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n+  } else {\n+    JSModule providedModule = provided.explicitModule;\n+\n+    // This must be non-null, because there was an explicit provide.\n+    Preconditions.checkNotNull(providedModule);\n+\n+    JSModule module = t.getModule();\n+    if (moduleGraph != null &&\n+        module != providedModule &&\n+        !moduleGraph.dependsOn(module, providedModule)) {\n+      compiler.report(\n+          t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+              providedModule.getName(),\n+              module.getName()));\n+    }\n+  }\n+}\n+maybeAddToSymbolTable(left);\n+maybeAddStringNodeToSymbolTable(arg);\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}