{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final int n = m.getRowDimension();\n        if (n <= 100) {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }\n        // Use an iterative algorithm with orthogonal iteration\n        final QRDecomposition qr = new QRDecomposition(m);\n        RealMatrix q = qr.getQ();\n        RealMatrix r = qr.getR();\n        for (int i = 0; i < 10; i++) {\n            q = q.multiply(0.5 * (3.0 * MatrixUtils.createRealIdentityMatrix(n).multiply(q).subtract(q.multiply(q.transpose()).multiply(q))));\n            r = q.transpose().multiply(m).multiply(q);\n        }\n        return q.multiply(new LUDecomposition(r).getSolver().getInverse()).multiply(q.transpose());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..af8ff6303 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n+        final int n = m.getRowDimension();\n+        if (n <= 100) {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n+        }\n+        // Use an iterative algorithm with orthogonal iteration\n+        final QRDecomposition qr = new QRDecomposition(m);\n+        RealMatrix q = qr.getQ();\n+        RealMatrix r = qr.getR();\n+        for (int i = 0; i < 10; i++) {\n+            q = q.multiply(0.5 * (3.0 * MatrixUtils.createRealIdentityMatrix(n).multiply(q).subtract(q.multiply(q.transpose()).multiply(q))));\n+            r = q.transpose().multiply(m).multiply(q);\n+        }\n+        return q.multiply(new LUDecomposition(r).getSolver().getInverse()).multiply(q.transpose());\n     }\n }",
    "result_reason": "error: bad operand types for binary operator '*'",
    "test_result": "ERROR"
}