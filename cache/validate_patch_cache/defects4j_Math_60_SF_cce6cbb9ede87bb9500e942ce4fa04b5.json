{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    final double stdDevSq = standardDeviation * standardDeviation;\n    if (FastMath.abs(x - mean) > FastMath.sqrt(stdDevSq * 40)) {\n        return x < mean ? 0.0 : 1.0;\n    }\n    try {\n        final double xMinusMean = x - mean;\n        return 0.5 * Erf.erfc(-xMinusMean / (standardDeviatio",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..91b0ac557 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -121,21 +121,14 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * @return CDF evaluated at {@code x}.\n      * @throws MathException if the algorithm fails to converge\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-        final double dev = x - mean;\n-        try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n-        } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1;\n-            } else {\n-                throw ex;\n-            }\n-        }\n+public double cumulativeProbability(double x) throws MathException {\n+    final double stdDevSq = standardDeviation * standardDeviation;\n+    if (FastMath.abs(x - mean) > FastMath.sqrt(stdDevSq * 40)) {\n+        return x < mean ? 0.0 : 1.0;\n     }\n+    try {\n+        final double xMinusMean = x - mean;\n+        return 0.5 * Erf.erfc(-xMinusMean / (standardDeviatio\n \n     /**\n      * Return the absolute accuracy setting of the solver used to estimate",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}