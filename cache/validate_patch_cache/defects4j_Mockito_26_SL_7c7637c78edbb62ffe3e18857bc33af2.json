{
    "patch": "@Test\npublic void should_default_values_for_primitive() {\n    Helper h = new Helper();\n    assertThat(h.returnFor(boolean.class)).isEqualTo(false);\n    assertThat(h.returnFor(char.class)).isEqualTo('\\u0000');\n    assertThat(h.returnFor(byte.class)).isEqualTo((byte) 0);\n    assertThat(h.returnFor(short.class)).isEqualTo((short) 0);\n    assertThat(h.returnFor(int.class)).isEqualTo(0);\n    assertThat(h.returnFor(long.class)).isEqualTo(0L);\n    assertThat(h.returnFor(float.class)).isEqualTo(0.0f); // fixed here\n    assertThat(h.returnFor(double.class)).isEqualTo(0.0d); // fixed here\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java\nindex b44b8253d..c59eb0429 100644\n--- a/src/org/mockito/internal/util/Primitives.java\n+++ b/src/org/mockito/internal/util/Primitives.java\n@@ -63,6 +63,17 @@ public class Primitives {\n         primitiveValues.put(int.class, 0);\n         primitiveValues.put(long.class, 0L);\n         primitiveValues.put(float.class, 0F);\n-        primitiveValues.put(double.class, 0);\n+@Test\n+public void should_default_values_for_primitive() {\n+    Helper h = new Helper();\n+    assertThat(h.returnFor(boolean.class)).isEqualTo(false);\n+    assertThat(h.returnFor(char.class)).isEqualTo('\\u0000');\n+    assertThat(h.returnFor(byte.class)).isEqualTo((byte) 0);\n+    assertThat(h.returnFor(short.class)).isEqualTo((short) 0);\n+    assertThat(h.returnFor(int.class)).isEqualTo(0);\n+    assertThat(h.returnFor(long.class)).isEqualTo(0L);\n+    assertThat(h.returnFor(float.class)).isEqualTo(0.0f); // fixed here\n+    assertThat(h.returnFor(double.class)).isEqualTo(0.0d); // fixed here\n+}\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}