{
    "patch": "public static double[] powerIteration(double[][] matrix, double[] vector, int iterations) {\n\n    int size = matrix.length;\n    double[] result = new double[size];\n    double[] temp = new double[size];\n\n    // normalize the initial vector\n    double sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += vector[i] * vector[i];\n    }\n    double magnitude = Math.sqrt(sum);\n    for (int i = 0; i < size; i++) {\n        vector[i] /= magnitude;\n        result[i] = vector[i];\n    }\n\n    for (int i = 0; i < iterations; i++) {\n        // matrix multiplication\n        for (int j = 0; j < size; j++) {\n            double val = 0;\n            for (int k = 0; k < size; k++) {\n                val += matrix[j][k] * result[k];\n            }\n            temp[j] = val;\n        }\n\n        //normalize temp\n        sum = 0;\n        for (int j = 0; j < size; j++) {\n            sum += temp[j] * temp[j];\n        }\n        magnitude = Math.sqrt(sum);\n        for (int j = 0; j < size; j++) {\n            temp[j] /= magnitude;\n        }\n\n        // check for convergence\n        sum = 0;\n        for (int j = 0; j < size; j++) {\n            sum += (temp[j] - result[j]) * (temp[j] - result[j]);\n        }\n        if (sum < 1e-10) {\n            return temp;\n        }\n        \n        //copy temp to result\n        for (int j = 0; j < size; j++) {\n            result[j] = temp[j];\n        }\n    }\n\n    return result;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}