{
    "patch": "public static String unescapeJava(String str) {\n    if (str == null) {\n        return null;\n    }\n    int count = str.length();\n    StringBuilder builder = new StringBuilder(count);\n    int idx = 0;\n    while (idx < count) {\n        char ch = str.charAt(idx);\n        if (ch == '\\\\') {\n            idx++;\n            if (idx >= count) {\n                throw new IllegalArgumentException(\"Invalid escape character at index \" + (idx - 1));\n            }\n            ch = str.charAt(idx);\n            // Handle Unicode escape sequence.\n            if (ch == 'u') {\n                idx++;\n                if (idx + 4 > count) {\n                    throw new IllegalArgumentException(\"Invalid Unicode escape sequence at index \" + (idx - 2));\n                }\n                try {\n                    int code = Integer.parseInt(str.substring(idx, idx + 4), 16);\n                    builder.append((char) code);\n                    idx += 4;\n                } catch (NumberFormatException e) {\n                    throw new IllegalArgumentException(\"Invalid Unicode escape sequence at index \" + (idx - 2), e);\n                }\n            } else {\n                // Handle escape sequence\n                switch (ch) {\n                    case '\\\\':\n                        builder.append('\\\\');\n                        break;\n                    case '\\'':\n                        builder.append('\\'');\n                        break;\n                    case '\"':\n                        builder.append('\"');\n                        break;\n                    case 'r':\n                        builder.append('\\r');\n                        break;\n                    case 'f':\n                        builder.append('\\f');\n                        break;\n                    case 't':\n                        builder.append('\\t');\n                        break;\n                    case 'n':\n                        builder.append('\\n');\n                        break;\n                    case 'b':\n                        builder.append('\\b');\n                        break;\n                    case 'u':\n                        builder.append(CodePoints.decodeGeneralCharacterReference(str.substring(idx, count)));\n                        idx = count; // Force loop exit.\n                        break;\n                    default:\n                        builder.append(ch);\n                        break;\n                }\n                idx++;\n            }\n        } else {\n            builder.append(ch);\n            idx++;\n        }\n    }\n    return builder.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}