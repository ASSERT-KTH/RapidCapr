{
    "patch": "import org.mockito.cglib.proxy.Factory;\nimport org.mockito.cglib.proxy.MethodInterceptor;\nimport org.mockito.cglib.proxy.MethodProxy;\nimport org.mockito.internal.creation.MockSettingsImpl;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.listeners.InvocationListener;\nimport org.mockito.listeners.MethodInvocationReport;\nimport org.mockito.mock.MockCreationSettings;\n\nimport java.lang.reflect.Method;\n\nclass ResetMock<T> {\n\n    public interface MockHandlerInterface<T> extends java.io.Serializable {\n        Object handle(MockHandlerInvocation mockHandlerInvocation) throws Throwable;\n    }\n\n    public static class MockHandler<T> implements MethodInterceptor, java.io.Serializable {\n        final MockHandlerInterface<T> delegateMockHandler;\n\n        public MockHandler(MockHandlerInterface<T> mockHandler) {\n            this.delegateMockHandler = mockHandler;\n        }\n\n        @Override\n        public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n            return delegateMockHandler.handle(new MockHandlerInvocation(object, method, args, methodProxy));\n        }\n    }\n\n    public static class MockHandlerInvocation implements java.io.Serializable {\n        final Object object;\n        final Method method;\n        final Object[] args;\n        final MethodProxy methodProxy;\n\n        public MockHandlerInvocation(Object object, Method method, Object[] args, MethodProxy methodProxy) {\n            this.object = object;\n            this.method = method;\n            this.args = args;\n            this.methodProxy = methodProxy;\n        }\n    }\n\n    public static class MockMethodInterceptor<T> implements MethodInterceptor {\n        private MockHandlerInterface<T> mockHandler;\n\n        public MockMethodInterceptor(MockHandlerInterface<T> mockHandler) {\n            this.mockHandler = mockHandler;\n        }\n\n        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n            Object result = mockHandler.handle(new MockHandlerInvocation(obj, method, args, proxy));\n            return result;\n        }\n\n        public MockHandlerInterface<T> getMockHandler() {\n            return mockHandler;\n        }\n    }\n\n    public void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n\n        ((Factory) mock).setCallbacks(new MockMethodInterceptor[]{new MockMethodInterceptor<T>(newMockHandler)});\n        MockCreationSettings settings = ((Factory) mock).getCallbacks().get(0).getMockCreationSettings();\n        InvocationListener<MethodInvocationReport> listener = invocation ->\n                System.out.println(\"Mockito invocation: \" + invocation.getMethod().getDeclaringClass() + \"#\" + invocation.getMethod().getName());\n\n        settings.getInvocationListeners().add(listener);\n    }\n\n    private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n        Factory factory = (Factory) mock;\n        MockMethodInterceptor<T> interceptor = (MockMethodInterceptor<T>) factory.getCallback(0);\n        return interceptor.getMockHandler();\n    }\n\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..4f0930132 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,87 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.cglib.proxy.Factory;\n+import org.mockito.cglib.proxy.MethodInterceptor;\n+import org.mockito.cglib.proxy.MethodProxy;\n+import org.mockito.internal.creation.MockSettingsImpl;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.listeners.InvocationListener;\n+import org.mockito.listeners.MethodInvocationReport;\n+import org.mockito.mock.MockCreationSettings;\n+\n+import java.lang.reflect.Method;\n+\n+class ResetMock<T> {\n+\n+    public interface MockHandlerInterface<T> extends java.io.Serializable {\n+        Object handle(MockHandlerInvocation mockHandlerInvocation) throws Throwable;\n+    }\n+\n+    public static class MockHandler<T> implements MethodInterceptor, java.io.Serializable {\n+        final MockHandlerInterface<T> delegateMockHandler;\n+\n+        public MockHandler(MockHandlerInterface<T> mockHandler) {\n+            this.delegateMockHandler = mockHandler;\n+        }\n+\n+        @Override\n+        public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n+            return delegateMockHandler.handle(new MockHandlerInvocation(object, method, args, methodProxy));\n+        }\n+    }\n+\n+    public static class MockHandlerInvocation implements java.io.Serializable {\n+        final Object object;\n+        final Method method;\n+        final Object[] args;\n+        final MethodProxy methodProxy;\n+\n+        public MockHandlerInvocation(Object object, Method method, Object[] args, MethodProxy methodProxy) {\n+            this.object = object;\n+            this.method = method;\n+            this.args = args;\n+            this.methodProxy = methodProxy;\n+        }\n+    }\n+\n+    public static class MockMethodInterceptor<T> implements MethodInterceptor {\n+        private MockHandlerInterface<T> mockHandler;\n+\n+        public MockMethodInterceptor(MockHandlerInterface<T> mockHandler) {\n+            this.mockHandler = mockHandler;\n+        }\n+\n+        public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n+            Object result = mockHandler.handle(new MockHandlerInvocation(obj, method, args, proxy));\n+            return result;\n+        }\n+\n+        public MockHandlerInterface<T> getMockHandler() {\n+            return mockHandler;\n+        }\n+    }\n+\n+    public void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+\n+        ((Factory) mock).setCallbacks(new MockMethodInterceptor[]{new MockMethodInterceptor<T>(newMockHandler)});\n+        MockCreationSettings settings = ((Factory) mock).getCallbacks().get(0).getMockCreationSettings();\n+        InvocationListener<MethodInvocationReport> listener = invocation ->\n+                System.out.println(\"Mockito invocation: \" + invocation.getMethod().getDeclaringClass() + \"#\" + invocation.getMethod().getName());\n+\n+        settings.getInvocationListeners().add(listener);\n+    }\n+\n+    private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n+        Factory factory = (Factory) mock;\n+        MockMethodInterceptor<T> interceptor = (MockMethodInterceptor<T>) factory.getCallback(0);\n+        return interceptor.getMockHandler();\n+    }\n+\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}