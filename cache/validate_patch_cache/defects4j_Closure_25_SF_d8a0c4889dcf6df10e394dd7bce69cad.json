{
    "patch": "    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      if (type != null && ct != null) {\n        JSType paramType = ct.getArgumentTypes().get(arg.getIntProp(Node.ANALYZER_PROP));\n        if (paramType != null && !paramType.isUnknownType() && !arg.getJSType().isFunctionType()) {\n          boolean validated = validateUnknownArgTypeAnnotation(\n              arg, paramType, scope, JSType.fromType(RECORD_TYPE_PROPERTY_NAME_FUNCTION_RETURN));\n          if (validated) {\n            propagateDeclaredTypeToNode(arg, paramType, scope);\n          } else {\n            arg.setJSType(getNativeType(UNKNOWN_TYPE));\n          }\n        } else {\n          scope = traverse(arg, scope);\n        }\n      } else {\n        scope = traverse(arg, scope);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..c011bc56 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,9 +1032,6 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n@@ -1045,9 +1042,6 @@ class TypeInference\n       } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n         if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n           ct = (FunctionType) constructorType;\n         }\n         if (ct != null && ct.isConstructor()) {\n@@ -1059,8 +1053,22 @@ class TypeInference\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }\n-    return scope;\n-  }\n+    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+      if (type != null && ct != null) {\n+        JSType paramType = ct.getArgumentTypes().get(arg.getIntProp(Node.ANALYZER_PROP));\n+        if (paramType != null && !paramType.isUnknownType() && !arg.getJSType().isFunctionType()) {\n+          boolean validated = validateUnknownArgTypeAnnotation(\n+              arg, paramType, scope, JSType.fromType(RECORD_TYPE_PROPERTY_NAME_FUNCTION_RETURN));\n+          if (validated) {\n+            propagateDeclaredTypeToNode(arg, paramType, scope);\n+          } else {\n+            arg.setJSType(getNativeType(UNKNOWN_TYPE));\n+          }\n+        } else {\n+          scope = traverse(arg, scope);\n+        }\n+      } else {\n+        scope = traverse(arg, scope);\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}