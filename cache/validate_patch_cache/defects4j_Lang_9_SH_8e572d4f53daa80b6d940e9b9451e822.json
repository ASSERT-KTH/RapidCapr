{
    "patch": "if(!collector.isEmpty()) {\n    strategies= collector.toArray(new Strategy[collector.size()]);\n    parsePattern= Pattern.compile(regex.toString());\n} else {\n    currentFormatField= null;\n    strategies= new Strategy[0];\n    parsePattern= null;\n}\n\nif(patternMatcher.regionStart() == patternMatcher.regionEnd()) {\n    currentFormatField = null;\n} else if (patternMatcher.hitEnd()) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n} else {\n    // There is a remaining format field that does not match any strategy\n    currentFormatField= patternMatcher.group();\n    nextStrategy = getStrategy(currentFormatField);\n    if(currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n    }\n    currentFormatField = null;\n    currentStrategy = nextStrategy;\n    for(;;) {\n        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n        if(!patternMatcher.lookingAt()) {\n            nextStrategy = null;\n            break;\n        }\n        String nextFormatField= patternMatcher.group();\n        nextStrategy = getStrategy(nextFormatField);\n        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentStrategy= nextStrategy;\n    }\n    if(!collector.isEmpty()) {\n        strategies= collector.toArray(new Strategy[collector.size()]);\n        parsePattern= Pattern.compile(regex.toString());\n    } else {\n        strategies= new Strategy[0];\n        parsePattern= null;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..d571033a 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,49 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+if(!collector.isEmpty()) {\n+    strategies= collector.toArray(new Strategy[collector.size()]);\n+    parsePattern= Pattern.compile(regex.toString());\n+} else {\n+    currentFormatField= null;\n+    strategies= new Strategy[0];\n+    parsePattern= null;\n+}\n+\n+if(patternMatcher.regionStart() == patternMatcher.regionEnd()) {\n+    currentFormatField = null;\n+} else if (patternMatcher.hitEnd()) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+} else {\n+    // There is a remaining format field that does not match any strategy\n+    currentFormatField= patternMatcher.group();\n+    nextStrategy = getStrategy(currentFormatField);\n+    if(currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+    }\n+    currentFormatField = null;\n+    currentStrategy = nextStrategy;\n+    for(;;) {\n+        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+        if(!patternMatcher.lookingAt()) {\n+            nextStrategy = null;\n+            break;\n+        }\n+        String nextFormatField= patternMatcher.group();\n+        nextStrategy = getStrategy(nextFormatField);\n+        if(currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        }\n+        currentStrategy= nextStrategy;\n+    }\n+    if(!collector.isEmpty()) {\n+        strategies= collector.toArray(new Strategy[collector.size()]);\n+        parsePattern= Pattern.compile(regex.toString());\n+    } else {\n+        strategies= new Strategy[0];\n+        parsePattern= null;\n+    }\n+}\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}