{
    "patch": "    public static boolean triples_sum_to_zero(int[] numbers) {\n        int n = numbers.length;\n        \n        // Create a hashmap to store the sum of two numbers as key\n        // and the index of the second number as value\n        Map<Integer, Integer> sumMap = new HashMap<>();\n        \n        // Loop through all pairs of numbers and store their sums in sumMap\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                int sum = numbers[i] + numbers[j];\n                sumMap.put(sum, j);\n            }\n        }\n        \n        // Check if there is a third number that sums to zero with a pair\n        for (int i = 0; i < n; i++) {\n            int complement = -numbers[i];\n            if (sumMap.containsKey(complement) && sumMap.get(complement) != i) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/TRIPLES_SUM_TO_ZERO.java b/src/main/java/humaneval/buggy/TRIPLES_SUM_TO_ZERO.java\nindex e851652..94215a2 100644\n--- a/src/main/java/humaneval/buggy/TRIPLES_SUM_TO_ZERO.java\n+++ b/src/main/java/humaneval/buggy/TRIPLES_SUM_TO_ZERO.java\n@@ -19,12 +19,25 @@ False\n \n public class TRIPLES_SUM_TO_ZERO {\n     public static boolean triples_sum_to_zero(int[] numbers) {\n-        for (int i = 0; i < numbers.length; i += 1) {\n-            for (int j = i; j < numbers.length; j += 1) {\n-                for (int k = j; k < numbers.length; k += 1) {\n-                    if (numbers[i] + numbers[j] + numbers[k] == 0)\n-                        return true;\n-                }\n+        int n = numbers.length;\n+        \n+        // Create a hashmap to store the sum of two numbers as key\n+        // and the index of the second number as value\n+        Map<Integer, Integer> sumMap = new HashMap<>();\n+        \n+        // Loop through all pairs of numbers and store their sums in sumMap\n+        for (int i = 0; i < n - 1; i++) {\n+            for (int j = i + 1; j < n; j++) {\n+                int sum = numbers[i] + numbers[j];\n+                sumMap.put(sum, j);\n+            }\n+        }\n+        \n+        // Check if there is a third number that sums to zero with a pair\n+        for (int i = 0; i < n; i++) {\n+            int complement = -numbers[i];\n+            if (sumMap.containsKey(complement) && sumMap.get(complement) != i) {\n+                return true;\n             }\n         }\n         return false;",
    "result_reason": " /tmp/humaneval-TRIPLES_SUM_TO_ZERO/src/main/java/humaneval/buggy/TRIPLES_SUM_TO_ZERO.java:[26,9] cannot find symbol",
    "test_result": "ERROR"
}