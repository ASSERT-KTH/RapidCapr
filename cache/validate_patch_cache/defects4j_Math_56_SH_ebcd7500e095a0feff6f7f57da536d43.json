{
    "patch": "int[] cumulativeOffsets = new int[dimension];\ncumulativeOffsets[0] = 1;\nfor (int i = 1; i < dimension; ++i) {\n    cumulativeOffsets[i] = cumulativeOffsets[i - 1] * uniCounter[i - 1];\n}\n\nint[] temp = new int[dimension];\nfor (int i = dimension - 1; i >= 0; --i) {\n    temp[i] = index / cumulativeOffsets[i];\n    index -= temp[i] * cumulativeOffsets[i];\n}\n\nfor (int i = 0; i < dimension; ++i) {\n    temp[i]++;\n}\n\nfor (int i = last - 1; i >= 0; --i) {\n    int idx = temp[i + 1] / uniCounter[i];\n    indices[i] = temp[i + 1] - idx * uniCounter[i] - 1;\n    temp[i] += idx - 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..9fb32e00e 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,27 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n-        }\n-        --idx;\n-        indices[last] = idx;\n+int[] cumulativeOffsets = new int[dimension];\n+cumulativeOffsets[0] = 1;\n+for (int i = 1; i < dimension; ++i) {\n+    cumulativeOffsets[i] = cumulativeOffsets[i - 1] * uniCounter[i - 1];\n+}\n+\n+int[] temp = new int[dimension];\n+for (int i = dimension - 1; i >= 0; --i) {\n+    temp[i] = index / cumulativeOffsets[i];\n+    index -= temp[i] * cumulativeOffsets[i];\n+}\n+\n+for (int i = 0; i < dimension; ++i) {\n+    temp[i]++;\n+}\n+\n+for (int i = last - 1; i >= 0; --i) {\n+    int idx = temp[i + 1] / uniCounter[i];\n+    indices[i] = temp[i + 1] - idx * uniCounter[i] - 1;\n+    temp[i] += idx - 1;\n+}\n \n         return indices;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}