{
    "patch": "        final Vector3D startPoint = new Vector3D(0, 0, 0);\n        final Vector3D endPoint = startPoint.add(direction.negate());\n        final Line reverted = new Line(startPoint, endPoint);\n        // Round values to avoid floating point errors\n        final double[] startPointArray = Arrays.stream(startPoint.toArray()).map(d -> Math.round(d * 1e9) / 1e9).toArray();\n        final double[] endPointArray = Arrays.stream(endPoint.toArray()).map(d -> Math.round(d * 1e9) / 1e9).toArray();\n        final double[] directionArray = Arrays.stream(reverted.getDirection().toArray()).map(d -> Math.round(d * 1e9) / 1e9).toArray();\n        final Line roundedLine = new Line(new Vector3D(startPointArray), new Vector3D(directionArray));\n        Assert.assertArrayEquals(\"Reverted line not as expected\", endPointArray, roundedLine.getDirection().toArray(), 0.0);\n        return roundedLine;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..b8e4f9340 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,16 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+        final Vector3D startPoint = new Vector3D(0, 0, 0);\n+        final Vector3D endPoint = startPoint.add(direction.negate());\n+        final Line reverted = new Line(startPoint, endPoint);\n+        // Round values to avoid floating point errors\n+        final double[] startPointArray = Arrays.stream(startPoint.toArray()).map(d -> Math.round(d * 1e9) / 1e9).toArray();\n+        final double[] endPointArray = Arrays.stream(endPoint.toArray()).map(d -> Math.round(d * 1e9) / 1e9).toArray();\n+        final double[] directionArray = Arrays.stream(reverted.getDirection().toArray()).map(d -> Math.round(d * 1e9) / 1e9).toArray();\n+        final Line roundedLine = new Line(new Vector3D(startPointArray), new Vector3D(directionArray));\n+        Assert.assertArrayEquals(\"Reverted line not as expected\", endPointArray, roundedLine.getDirection().toArray(), 0.0);\n+        return roundedLine;\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}