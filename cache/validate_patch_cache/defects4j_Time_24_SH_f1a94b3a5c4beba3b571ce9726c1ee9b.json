{
    "patch": "for (int i = 0; i < count; i++) {\n    SavedField savedField = savedFields[i];\n    try {\n        if (i + 1 < count) {\n            DurationField currentField = savedField.iField.getDurationField();\n            SavedField nextField = savedFields[i + 1];\n            DurationField nextFieldDuration = nextField.iField.getDurationField();\n            if (compareReverse(currentField, nextFieldDuration) > 0) {\n                throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField.getName() + \" -> \" + nextFieldDuration.getName());\n            } else {\n                millis = savedField.set(millis, resetFields);\n            }\n        } else {\n            millis = savedField.set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (DateTimeFieldType.year().equals(savedField.iField.getType())) {\n            long instant = savedField.iField.set(0L, iDefaultYear);\n            millis = savedField.iField.set(instant, savedField.iValue);\n        } else if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n            throw e;\n        } else {\n            throw e;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..f9fd6660 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,33 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    SavedField savedField = savedFields[i];\n+    try {\n+        if (i + 1 < count) {\n+            DurationField currentField = savedField.iField.getDurationField();\n+            SavedField nextField = savedFields[i + 1];\n+            DurationField nextFieldDuration = nextField.iField.getDurationField();\n+            if (compareReverse(currentField, nextFieldDuration) > 0) {\n+                throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField.getName() + \" -> \" + nextFieldDuration.getName());\n+            } else {\n+                millis = savedField.set(millis, resetFields);\n+            }\n+        } else {\n+            millis = savedField.set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (DateTimeFieldType.year().equals(savedField.iField.getType())) {\n+            long instant = savedField.iField.set(0L, iDefaultYear);\n+            millis = savedField.iField.set(instant, savedField.iValue);\n+        } else if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+            throw e;\n+        } else {\n+            throw e;\n+        }\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}