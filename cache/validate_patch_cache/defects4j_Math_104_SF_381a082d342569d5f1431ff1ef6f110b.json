{
    "patch": "public static double regularizedGammaP(final double a, final double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (Double.isInfinite(a)) {\n        return (Double.isInfinite(x)) ? Double.NaN : 0.0;\n    }\n    if (Double.isInfinite(x)) {\n        return 1.0;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    final double lgm = regularizedGammaPQ.lgamma(a);\n    if (x <= a + 1.0) {\n        final double apn = a + Math.floor(a);\n        final double del = apn - a;\n        final double w = rgp1_series(a, x, del);\n        return w * Math.exp(-x + a * Math.log(x) - lgm);\n    }\n    return rgp2_series(a, x, lgm);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c7dfb4adf 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,28 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(final double a, final double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (Double.isInfinite(a)) {\n+        return (Double.isInfinite(x)) ? Double.NaN : 0.0;\n+    }\n+    if (Double.isInfinite(x)) {\n+        return 1.0;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    final double lgm = regularizedGammaPQ.lgamma(a);\n+    if (x <= a + 1.0) {\n+        final double apn = a + Math.floor(a);\n+        final double del = apn - a;\n+        final double w = rgp1_series(a, x, del);\n+        return w * Math.exp(-x + a * Math.log(x) - lgm);\n+    }\n+    return rgp2_series(a, x, lgm);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}