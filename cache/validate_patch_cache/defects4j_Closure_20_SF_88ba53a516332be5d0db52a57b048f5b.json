{
    "patch": "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n    if (value != null) {\n      boolean isSafeToFoldToString = !NodeUtil.mayHaveSideEffects(n.getParent()) && !NodeUtil.mayHaveSideEffects(value);\n\n      if ((value.isString() || value.isNumber()) && isSafeToFoldToString) {\n        Node addition = IR.add(\n          IR.string(\"\").srcref(callTarget),\n          value.detachFromParent());\n\n        n.getParent().replaceChild(n, addition);\n        reportCodeChange();\n        return addition;\n      }\n    }\n  }\n\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..aaba74be 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -205,30 +205,29 @@ class PeepholeSubstituteAlternateSyntax\n     }\n   }\n \n-  private Node tryFoldSimpleFunctionCall(Node n) {\n-    Preconditions.checkState(n.isCall());\n-    Node callTarget = n.getFirstChild();\n-    if (callTarget != null && callTarget.isName() &&\n-          callTarget.getString().equals(\"String\")) {\n-      // Fold String(a) to '' + (a) on immutable literals,\n-      // which allows further optimizations\n-      //\n-      // We can't do this in the general case, because String(a) has\n-      // slightly different semantics than '' + (a). See\n-      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n-      Node value = callTarget.getNext();\n-      if (value != null) {\n+private Node tryFoldSimpleFunctionCall(Node n) {\n+  Preconditions.checkState(n.isCall());\n+  Node callTarget = n.getFirstChild();\n+  if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) {\n+    Node value = callTarget.getNext();\n+    if (value != null) {\n+      boolean isSafeToFoldToString = !NodeUtil.mayHaveSideEffects(n.getParent()) && !NodeUtil.mayHaveSideEffects(value);\n+\n+      if ((value.isString() || value.isNumber()) && isSafeToFoldToString) {\n         Node addition = IR.add(\n-            IR.string(\"\").srcref(callTarget),\n-            value.detachFromParent());\n+          IR.string(\"\").srcref(callTarget),\n+          value.detachFromParent());\n+\n         n.getParent().replaceChild(n, addition);\n         reportCodeChange();\n         return addition;\n       }\n     }\n-    return n;\n   }\n \n+  return n;\n+}\n+\n   private Node tryFoldImmediateCallToBoundFunction(Node n) {\n     // Rewriting \"(fn.bind(a,b))()\" to \"fn.call(a,b)\" makes it inlinable\n     Preconditions.checkState(n.isCall());",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}