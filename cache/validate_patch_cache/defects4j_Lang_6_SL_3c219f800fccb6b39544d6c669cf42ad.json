{
    "patch": "int nextIndex = pos + charCount;\nif (nextIndex <= len) {\n    translate(input.subSequence(pos, nextIndex), out);\n}\nelse {\n    char[] c = Character.toChars(Character.codePointAt(input, pos));\n    out.write(c);\n}\npos = nextIndex;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..188c8e98 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,15 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+int nextIndex = pos + charCount;\n+if (nextIndex <= len) {\n+    translate(input.subSequence(pos, nextIndex), out);\n+}\n+else {\n+    char[] c = Character.toChars(Character.codePointAt(input, pos));\n+    out.write(c);\n+}\n+pos = nextIndex;\n             }\n         }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}