{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Don't traverse functions in non-global scopes if they do not\n        // directly contain the \"this\" keyword. This avoids false positives,\n        // e.g., for inner functions that reference the 'this' variable.\n        if (parent != null && !t.getScope().isGlobal()) {\n            if (NodeUtil.containsType(n, Token.THIS)) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        // Don't traverse functions that use the global `this` object outside\n        // of global scope. Temporarily suppress the JSC_USED_GLOBAL_THIS error\n        // in order to avoid failing the traversal.\n        boolean originalErrorFlag = t.getCompiler().options.shouldSuppressWarnings();\n        try {\n            t.getCompiler().options.setSuppressWarnings(true);\n            if (NodeUtil.getEnclosingType(n, Token.SCRIPT) != null\n                    && referencesGlobalThis(n, t.getCompiler())) {\n                return false;\n            }\n        } finally {\n            t.getCompiler().options.setSuppressWarnings(originalErrorFlag);\n        }\n\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them. For example:\n        // var a = function() { }; // or\n        // function a() {} // or\n        // a.x = function() {};\n        if (parent != null) {\n            int pType = parent.getType();\n            if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN)) {\n                return false;\n            }\n        }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n            // Always traverse the left side of the assignment. To handle\n            // nested assignments properly (e.g., (a = this).property = c;),\n            // assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            // Only traverse the right side if it's not an assignment to a prototype\n            // property or subproperty.\n            if (isPrototypeProperty(lhs)) {\n                return false;\n            }\n            String lhsQualifiedName = lhs.getQualifiedName();\n            if (lhsQualifiedName != null && lhsQualifiedName.contains(\".prototype.\")) {\n                return false;\n            }\n            // Only traverse the right side if the assignment is not a named computation.\n            if (lhsQualifiedName == null || !lhsQualifiedName.contains(\".\")) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nprivate boolean referencesGlobalThis(Node n, AbstractCompiler compiler) {\n    class ReferenceFinderCallback extends AbstractPostOrderCallback {\n        private boolean foundGlobalThisReference;\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n            if (NodeUtil.isReferenceTo(n, \"this\") && !t.getScope().isLocal(\"this\")) {\n                foundGlobalThisReference = true;\n            }\n        }\n    }\n\n    ReferenceFinderCallback callback = new ReferenceFinderCallback();\n    NodeTraversal.traverse(compiler, n, callback);\n    return callback.foundGlobalThisReference;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..c0c98919 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,100 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+        // Don't traverse functions in non-global scopes if they do not\n+        // directly contain the \"this\" keyword. This avoids false positives,\n+        // e.g., for inner functions that reference the 'this' variable.\n+        if (parent != null && !t.getScope().isGlobal()) {\n+            if (NodeUtil.containsType(n, Token.THIS)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        }\n+\n+        // Don't traverse functions that use the global `this` object outside\n+        // of global scope. Temporarily suppress the JSC_USED_GLOBAL_THIS error\n+        // in order to avoid failing the traversal.\n+        boolean originalErrorFlag = t.getCompiler().options.shouldSuppressWarnings();\n+        try {\n+            t.getCompiler().options.setSuppressWarnings(true);\n+            if (NodeUtil.getEnclosingType(n, Token.SCRIPT) != null\n+                    && referencesGlobalThis(n, t.getCompiler())) {\n+                return false;\n+            }\n+        } finally {\n+            t.getCompiler().options.setSuppressWarnings(originalErrorFlag);\n+        }\n+\n+        // Don't traverse functions unless they would normally\n+        // be able to have a @this annotation associated with them. For example:\n+        // var a = function() { }; // or\n+        // function a() {} // or\n+        // a.x = function() {};\n+        if (parent != null) {\n+            int pType = parent.getType();\n+            if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN)) {\n+                return false;\n+            }\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+            // Always traverse the left side of the assignment. To handle\n+            // nested assignments properly (e.g., (a = this).property = c;),\n+            // assignLhsChild should not be overridden.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+        } else {\n+            // Only traverse the right side if it's not an assignment to a prototype\n+            // property or subproperty.\n+            if (isPrototypeProperty(lhs)) {\n+                return false;\n+            }\n+            String lhsQualifiedName = lhs.getQualifiedName();\n+            if (lhsQualifiedName != null && lhsQualifiedName.contains(\".prototype.\")) {\n+                return false;\n+            }\n+            // Only traverse the right side if the assignment is not a named computation.\n+            if (lhsQualifiedName == null || !lhsQualifiedName.contains(\".\")) {\n+                return false;\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n     }\n \n     return true;\n-  }\n+}\n+\n+private boolean referencesGlobalThis(Node n, AbstractCompiler compiler) {\n+    class ReferenceFinderCallback extends AbstractPostOrderCallback {\n+        private boolean foundGlobalThisReference;\n+\n+        @Override\n+        public void visit(NodeTraversal t, Node n, Node parent) {\n+            if (NodeUtil.isReferenceTo(n, \"this\") && !t.getScope().isLocal(\"this\")) {\n+                foundGlobalThisReference = true;\n+            }\n+        }\n+    }\n+\n+    ReferenceFinderCallback callback = new ReferenceFinderCallback();\n+    NodeTraversal.traverse(compiler, n, callback);\n+    return callback.foundGlobalThisReference;\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}