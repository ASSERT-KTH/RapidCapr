{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    long localMillis = instantLocal - initialOffset;\n    int localOffset = initialOffset;\n    int adjustedOffset = initialOffset;\n    long nextTransition = nextTransition(localMillis);\n    while (true) {\n        long nextLocalMillis = nextTransition + 1;\n        if (nextLocalMillis >= localMillis) {\n            break;\n        }\n        // Check if there is a gap for this transition\n        int[] offsets = getOffsetArray(nextLocalMillis);\n        boolean hasGap = (offsets[0] > offsets[1]);\n        if (hasGap) {\n            // If localMillis is in the gap, return the offset before the gap\n            if (localMillis >= nextTransition && localMillis < nextLocalMillis) {\n                return localOffset;\n            }\n        } else {\n            // If localMillis is during an overlap, return the earlier offset\n            if (localMillis >= nextLocalMillis - 1 && localMillis < nextLocalMillis + (offsets[1] - offsets[0] - 1)) {\n                return adjustedOffset;\n            }\n        }\n        localOffset = adjustedOffset;\n        adjustedOffset = offsets[1];\n        nextTransition = nextLocalMillis;\n    }\n    return adjustedOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..c5ab8648 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,37 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    long localMillis = instantLocal - initialOffset;\n+    int localOffset = initialOffset;\n+    int adjustedOffset = initialOffset;\n+    long nextTransition = nextTransition(localMillis);\n+    while (true) {\n+        long nextLocalMillis = nextTransition + 1;\n+        if (nextLocalMillis >= localMillis) {\n+            break;\n+        }\n+        // Check if there is a gap for this transition\n+        int[] offsets = getOffsetArray(nextLocalMillis);\n+        boolean hasGap = (offsets[0] > offsets[1]);\n+        if (hasGap) {\n+            // If localMillis is in the gap, return the offset before the gap\n+            if (localMillis >= nextTransition && localMillis < nextLocalMillis) {\n+                return localOffset;\n+            }\n+        } else {\n+            // If localMillis is during an overlap, return the earlier offset\n+            if (localMillis >= nextLocalMillis - 1 && localMillis < nextLocalMillis + (offsets[1] - offsets[0] - 1)) {\n+                return adjustedOffset;\n             }\n         }\n-        return offsetAdjusted;\n+        localOffset = adjustedOffset;\n+        adjustedOffset = offsets[1];\n+        nextTransition = nextLocalMillis;\n     }\n+    return adjustedOffset;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}