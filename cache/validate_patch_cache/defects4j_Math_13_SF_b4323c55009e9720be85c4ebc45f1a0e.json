{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m, 0.0);\n    final RealVector eigenvalues = dec.getRealEigenvalues();\n    final double[] data = eigenvalues.toArray();\n    for (int i = 0; i < data.length; ++i) {\n        if (data[i] < 0d) {\n            throw new IllegalArgumentException(\"Matrix must be positive semidefinite\");\n        }\n        data[i] = Math.sqrt(data[i]);\n    }\n    final RealMatrix sqrtMatrix = dec.getV().multiply(MatrixUtils.createRealDiagonalMatrix(data)).multiply(dec.getV().transpose());\n    return sqrtMatrix;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..6078cbb0f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,17 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m, 0.0);\n+    final RealVector eigenvalues = dec.getRealEigenvalues();\n+    final double[] data = eigenvalues.toArray();\n+    for (int i = 0; i < data.length; ++i) {\n+        if (data[i] < 0d) {\n+            throw new IllegalArgumentException(\"Matrix must be positive semidefinite\");\n+        }\n+        data[i] = Math.sqrt(data[i]);\n     }\n+    final RealMatrix sqrtMatrix = dec.getV().multiply(MatrixUtils.createRealDiagonalMatrix(data)).multiply(dec.getV().transpose());\n+    return sqrtMatrix;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}