{
    "patch": "```\nif (str.matches(\"-?[0-9]+[lL]?\")) {\n    String numeric = str.toLowerCase().replace(\"l\", \"\");\n    try {\n        if (numeric.startsWith(\"-\")) {\n            // Avoiding NumberFormatException caused by Long.MIN_VALUE\n            BigInteger bi = createBigInteger(numeric.substring(1));\n            if (bi.bitLength() <= 63) {\n                return Long.valueOf(numeric);\n            }\n        } else {\n            Long l = Long.valueOf(numeric);\n            if (l.toString().equals(numeric)) {\n                return l;\n            }\n        }\n    } catch (NumberFormatException e) {\n        // ignore the bad number\n    }\n    return createBigInteger(numeric);\n}\n```",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a47..0f1217fc 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,28 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+```\n+if (str.matches(\"-?[0-9]+[lL]?\")) {\n+    String numeric = str.toLowerCase().replace(\"l\", \"\");\n+    try {\n+        if (numeric.startsWith(\"-\")) {\n+            // Avoiding NumberFormatException caused by Long.MIN_VALUE\n+            BigInteger bi = createBigInteger(numeric.substring(1));\n+            if (bi.bitLength() <= 63) {\n+                return Long.valueOf(numeric);\n+            }\n+        } else {\n+            Long l = Long.valueOf(numeric);\n+            if (l.toString().equals(numeric)) {\n+                return l;\n+            }\n+        }\n+    } catch (NumberFormatException e) {\n+        // ignore the bad number\n+    }\n+    return createBigInteger(numeric);\n+}\n+```\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}