{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node functionNode = fnScope.getRootNode();\n  Preconditions.checkState(functionNode.isFunction());\n\n  boolean canModifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(functionNode);\n\n  // The parameters object literal setters can not be removed.\n  if (NodeUtil.isGetOrSetKey(functionNode.getParent())) {\n    return;\n  }\n\n  Node argsList = getFunctionArgList(functionNode);\n\n  if (!canModifyCallers) {\n    // Find the position of the last referenced argument.\n    int lastReferencedIndex = -1;\n    for (int i = 0; i < argsList.getChildCount(); i++) {\n      Node arg = argsList.getChildAtIndex(i);\n      if (!arg.isName()) {\n        // Parameters can only be removed if they are simple names.\n        return;\n      }\n      String paramName = arg.getString();\n      Var var = fnScope.getVar(paramName);\n      if (referenced.contains(var)) {\n        lastReferencedIndex = i;\n      }\n    }\n\n    if (lastReferencedIndex != argsList.getChildCount() - 1) {\n      // Remove all arguments starting with the last unreferenced argument.\n      while (argsList.getChildCount() > lastReferencedIndex + 1) {\n        argsList.removeChild(argsList.getLastChild());\n        compiler.reportCodeChange();\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..819be9dc 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,46 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  Node functionNode = fnScope.getRootNode();\n+  Preconditions.checkState(functionNode.isFunction());\n+\n+  boolean canModifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(functionNode);\n+\n+  // The parameters object literal setters can not be removed.\n+  if (NodeUtil.isGetOrSetKey(functionNode.getParent())) {\n+    return;\n+  }\n+\n+  Node argsList = getFunctionArgList(functionNode);\n+\n+  if (!canModifyCallers) {\n+    // Find the position of the last referenced argument.\n+    int lastReferencedIndex = -1;\n+    for (int i = 0; i < argsList.getChildCount(); i++) {\n+      Node arg = argsList.getChildAtIndex(i);\n+      if (!arg.isName()) {\n+        // Parameters can only be removed if they are simple names.\n+        return;\n+      }\n+      String paramName = arg.getString();\n+      Var var = fnScope.getVar(paramName);\n+      if (referenced.contains(var)) {\n+        lastReferencedIndex = i;\n+      }\n+    }\n+\n+    if (lastReferencedIndex != argsList.getChildCount() - 1) {\n+      // Remove all arguments starting with the last unreferenced argument.\n+      while (argsList.getChildCount() > lastReferencedIndex + 1) {\n+        argsList.removeChild(argsList.getLastChild());\n+        compiler.reportCodeChange();\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n   }\n+}\n \n \n   /**",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}