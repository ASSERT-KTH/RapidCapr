{
    "patch": "  void tryMinimizeExits(Node n, int exitType, String labelName) {\n    // Just an 'exit'.\n    if (matchingExitNode(n, exitType, labelName)) {\n      // Check if it's inside a catch block.\n      Node catchBlock = NodeUtil.getCatchBlock(n);\n      if (catchBlock != null) {\n        // Don't remove a throwing operation from inside a catch block.\n        return;\n      }\n      // Check if it's inside a finally block.\n      Node finallyBlock = NodeUtil.getEnclosingFinallyBlock(n.getParent());\n      if (finallyBlock != null && exitType != Token.RETURN) {\n        // Don't remove a throwing or continuing operation from inside a finally block.\n        return;\n      }\n      NodeUtil.removeChild(n.getParent(), n);\n      compiler.reportChangeToEnclosingScope(n);\n      return;\n    }\n\n    // Just an 'if'.\n    if (n.isIf()) {\n      Node ifBlock = n.getFirstChild().getNext();\n      tryMinimizeExits(ifBlock, exitType, labelName);\n      Node elseBlock = ifBlock.getNext();\n      if (elseBlock != null) {\n        tryMinimizeExits(elseBlock, exitType, labelName);\n      }\n      return;\n    }\n\n    // Just a 'try/catch/finally'.\n    if (n.isTry()) {\n      Node tryBlock = n.getFirstChild();\n      tryMinimizeExits(tryBlock, exitType, labelName);\n      Node allCatchNodes = NodeUtil.getCatchBlock(n);\n      if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n        Preconditions.checkState(allCatchNodes.hasOneChild());\n        Node catchNode = allCatchNodes.getFirstChild();\n        Node catchCodeBlock = catchNode.getLastChild();\n        tryMinimizeExits(catchCodeBlock, exitType, labelName);\n      }\n      if (NodeUtil.hasFinally(n)) {\n        Node finallyBlock = n.getLastChild();\n        tryMinimizeExits(finallyBlock, exitType, labelName);\n      }\n    }\n\n    // Just a 'label'.\n    if (n.isLabel()) {\n      Node labelBlock = n.getLastChild();\n      tryMinimizeExits(labelBlock, exitType, labelName);\n    }\n\n    // The rest assumes a block with at least one child, bail on anything else.\n    if (!n.isBlock() || n.getLastChild() == null) {\n      return;\n    }\n\n    // Multiple if-exits can be converted in a single pass.\n    // Convert \"if (blah) break;  if (blah2) break; other_stmt;\" to\n    // become \"if (blah); else { if (blah2); else { other_stmt; } }\"\n    // which will get converted to \"if (!blah && !blah2) { other_stmt; }\".\n    for (Node c : n.children()) {\n      if (c.isIf()) {\n        Node ifTree = c;\n        Node trueBlock, falseBlock;\n\n        // First, the true condition block.\n        trueBlock = ifTree.getFirstChild().getNext();\n        falseBlock = trueBlock.getNext();\n        tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);\n\n        // Now the else block.\n        trueBlock = ifTree.getFirstChild().getNext();\n        falseBlock = trueBlock.getNext();\n        if (falseBlock != null) {\n          tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);\n        }\n      }\n\n      if (c == n.getLastChild()) {\n        break;\n      }\n    }\n\n    // Now try to minimize the exits of the last child, if it is removed\n    // look at what has become the last child.\n    Node last = null;\n    for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n      if (last != null && last.isContinue() && matchingLoop(last, c)) {\n        NodeUtil.removeChild(n, last);\n        last.detach();\n        if (!c.isStatementBlock() && !NodeUtil.isAnyFor(c.getParent())) {\n          Node block = new Node(Token.BLOCK);\n          block.copyInformationFrom(c);\n          NodeUtil.addChildToBack(block, c);\n          c = block;\n        }\n        NodeUtil.copyChildren(c, n);\n        c = last;\n        compiler.reportChangeToEnclosingScope(n);\n      } else {\n        tryMinimizeExits(c, exitType, labelName);\n        last = c;\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..f1403bf4 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -104,11 +104,22 @@ class MinimizeExitPoints\n    * @nullable labelName non-null only for breaks within labels.\n    */\n   void tryMinimizeExits(Node n, int exitType, String labelName) {\n-\n     // Just an 'exit'.\n     if (matchingExitNode(n, exitType, labelName)) {\n+      // Check if it's inside a catch block.\n+      Node catchBlock = NodeUtil.getCatchBlock(n);\n+      if (catchBlock != null) {\n+        // Don't remove a throwing operation from inside a catch block.\n+        return;\n+      }\n+      // Check if it's inside a finally block.\n+      Node finallyBlock = NodeUtil.getEnclosingFinallyBlock(n.getParent());\n+      if (finallyBlock != null && exitType != Token.RETURN) {\n+        // Don't remove a throwing or continuing operation from inside a finally block.\n+        return;\n+      }\n       NodeUtil.removeChild(n.getParent(), n);\n-      compiler.reportCodeChange();\n+      compiler.reportChangeToEnclosingScope(n);\n       return;\n     }\n \n@@ -134,10 +145,6 @@ class MinimizeExitPoints\n         Node catchCodeBlock = catchNode.getLastChild();\n         tryMinimizeExits(catchCodeBlock, exitType, labelName);\n       }\n-      /* Don't try to minimize the exits of finally blocks, as this\n-       * can cause problems if it changes the completion type of the finally\n-       * block. See ECMA 262 Sections 8.9 & 12.14\n-       */\n       if (NodeUtil.hasFinally(n)) {\n         Node finallyBlock = n.getLastChild();\n         tryMinimizeExits(finallyBlock, exitType, labelName);\n@@ -150,8 +157,6 @@ class MinimizeExitPoints\n       tryMinimizeExits(labelBlock, exitType, labelName);\n     }\n \n-    // TODO(johnlenz): The last case of SWITCH statement?\n-\n     // The rest assumes a block with at least one child, bail on anything else.\n     if (!n.isBlock() || n.getLastChild() == null) {\n       return;\n@@ -162,8 +167,6 @@ class MinimizeExitPoints\n     // become \"if (blah); else { if (blah2); else { other_stmt; } }\"\n     // which will get converted to \"if (!blah && !blah2) { other_stmt; }\".\n     for (Node c : n.children()) {\n-\n-      // An 'if' block to process below.\n       if (c.isIf()) {\n         Node ifTree = c;\n         Node trueBlock, falseBlock;\n@@ -171,16 +174,13 @@ class MinimizeExitPoints\n         // First, the true condition block.\n         trueBlock = ifTree.getFirstChild().getNext();\n         falseBlock = trueBlock.getNext();\n-        tryMinimizeIfBlockExits(trueBlock, falseBlock,\n-            ifTree, exitType, labelName);\n+        tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);\n \n         // Now the else block.\n-        // The if blocks may have changed, get them again.\n         trueBlock = ifTree.getFirstChild().getNext();\n         falseBlock = trueBlock.getNext();\n         if (falseBlock != null) {\n-          tryMinimizeIfBlockExits(falseBlock, trueBlock,\n-              ifTree, exitType, labelName);\n+          tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);\n         }\n       }\n \n@@ -191,11 +191,23 @@ class MinimizeExitPoints\n \n     // Now try to minimize the exits of the last child, if it is removed\n     // look at what has become the last child.\n+    Node last = null;\n     for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n-      tryMinimizeExits(c, exitType, labelName);\n-      // If the node is still the last child, we are done.\n-      if (c == n.getLastChild()) {\n-        break;\n+      if (last != null && last.isContinue() && matchingLoop(last, c)) {\n+        NodeUtil.removeChild(n, last);\n+        last.detach();\n+        if (!c.isStatementBlock() && !NodeUtil.isAnyFor(c.getParent())) {\n+          Node block = new Node(Token.BLOCK);\n+          block.copyInformationFrom(c);\n+          NodeUtil.addChildToBack(block, c);\n+          c = block;\n+        }\n+        NodeUtil.copyChildren(c, n);\n+        c = last;\n+        compiler.reportChangeToEnclosingScope(n);\n+      } else {\n+        tryMinimizeExits(c, exitType, labelName);\n+        last = c;\n       }\n     }\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}