{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(Math.log(value));\n    secondMoment.increment(value);\n\n    // If mean, variance or geomean have been overridden,\n    // need to increment these\n    if (meanImpl instanceof Mean) {\n        ((Mean) meanImpl).increment(value);\n    } else if (meanImpl.getClass().getName().startsWith(\"org.apache.commons.math\")) {\n        try {\n            meanImpl.getClass().getMethod(\"incrementAll\", double[].class).invoke(meanImpl, new double[] {value});\n        } catch (Exception e) {\n            // Do nothing\n        }\n    } else {\n        // Use online algorithm to compute mean\n        double oldMean = meanImpl.getResult();\n        double newMean = oldMean + (value - oldMean) / (n + 1);\n        meanImpl.increment(newMean);\n    }\n\n    // Use online algorithm to compute variance if it is not an instance of Variance\n    if (varianceImpl instanceof Variance) {\n        ((Variance) varianceImpl).increment(value);\n    } else if (varianceImpl.getClass().getName().startsWith(\"org.apache.commons.math\")) {\n        try {\n            varianceImpl.getClass().getMethod(\"incrementAll\", double[].class).invoke(varianceImpl, new double[] {value});\n        } catch (Exception e) {\n            // Do nothing\n        }\n    } else {\n        if (n == 0) {\n            // First point\n            varianceImpl.increment(0.0);\n        } else {\n            // Use online algorithm to compute variance\n            double oldMean = meanImpl.getResult();\n            double delta = value - oldMean;\n            double oldM2 = secondMoment.getResult();\n            double newM2 = oldM2 + delta * delta * (n / (n + 1.0));\n            varianceImpl.increment(newM2 / n);\n        }\n    }\n\n    // Use online algorithm to compute geometric mean if it is not an instance of GeometricMean\n    if (geoMeanImpl instanceof GeometricMean) {\n        ((GeometricMean) geoMeanImpl).increment(value);\n    } else if (geoMeanImpl.getClass().getName().startsWith(\"org.apache.commons.math\")) {\n        try {\n            geoMeanImpl.getClass().getMethod(\"incrementAll\", double[].class).invoke(geoMeanImpl, new double[] {value});\n        } catch (Exception e) {\n            // Do nothing\n        }\n    } else {\n        geoMeanImpl.increment(Math.log(value));\n    }\n\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..ef22a564d 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,70 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(Math.log(value));\n+    secondMoment.increment(value);\n+\n+    // If mean, variance or geomean have been overridden,\n+    // need to increment these\n+    if (meanImpl instanceof Mean) {\n+        ((Mean) meanImpl).increment(value);\n+    } else if (meanImpl.getClass().getName().startsWith(\"org.apache.commons.math\")) {\n+        try {\n+            meanImpl.getClass().getMethod(\"incrementAll\", double[].class).invoke(meanImpl, new double[] {value});\n+        } catch (Exception e) {\n+            // Do nothing\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+    } else {\n+        // Use online algorithm to compute mean\n+        double oldMean = meanImpl.getResult();\n+        double newMean = oldMean + (value - oldMean) / (n + 1);\n+        meanImpl.increment(newMean);\n+    }\n+\n+    // Use online algorithm to compute variance if it is not an instance of Variance\n+    if (varianceImpl instanceof Variance) {\n+        ((Variance) varianceImpl).increment(value);\n+    } else if (varianceImpl.getClass().getName().startsWith(\"org.apache.commons.math\")) {\n+        try {\n+            varianceImpl.getClass().getMethod(\"incrementAll\", double[].class).invoke(varianceImpl, new double[] {value});\n+        } catch (Exception e) {\n+            // Do nothing\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+    } else {\n+        if (n == 0) {\n+            // First point\n+            varianceImpl.increment(0.0);\n+        } else {\n+            // Use online algorithm to compute variance\n+            double oldMean = meanImpl.getResult();\n+            double delta = value - oldMean;\n+            double oldM2 = secondMoment.getResult();\n+            double newM2 = oldM2 + delta * delta * (n / (n + 1.0));\n+            varianceImpl.increment(newM2 / n);\n+        }\n+    }\n+\n+    // Use online algorithm to compute geometric mean if it is not an instance of GeometricMean\n+    if (geoMeanImpl instanceof GeometricMean) {\n+        ((GeometricMean) geoMeanImpl).increment(value);\n+    } else if (geoMeanImpl.getClass().getName().startsWith(\"org.apache.commons.math\")) {\n+        try {\n+            geoMeanImpl.getClass().getMethod(\"incrementAll\", double[].class).invoke(geoMeanImpl, new double[] {value});\n+        } catch (Exception e) {\n+            // Do nothing\n         }\n-        n++;\n+    } else {\n+        geoMeanImpl.increment(Math.log(value));\n     }\n \n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}