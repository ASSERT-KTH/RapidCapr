{
    "patch": "      // Remove unreferenced parameters from the arg list.\n      int expectedArgCount = NodeUtil.getFunctionParameters(function).getChildCount();\n      // Go backwards through the parameter list.\n      for (Node param = argList.getLastChild(); param != null; param = param.getPrevious()) {\n        String name = param.getString();\n        Var var = fnScope.getVar(name);\n        if (var == null || !referenced.contains(var)) {\n          argList.removeChild(param);\n          expectedArgCount--;\n        } else {\n          break;\n        }\n      }\n      // If Function.prototype.length is used, then we\n      // can't remove parameters that way.\n      if (!compiler.getOptions().preserveDetailedFunctionnalarity() &&\n          function.hasOneChild() &&\n          function.getFirstChild().getString().equals(\"prototype\") &&\n          function.getNext().getString().equals(\"length\")) {\n        return;\n      }\n      // Remove the properties from call sites.\n      callSiteOptimizer.optimize(fnScope, referenced);\n      if (argList.getChildCount() != expectedArgCount) {\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..daaedf2e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,31 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // Remove unreferenced parameters from the arg list.\n+      int expectedArgCount = NodeUtil.getFunctionParameters(function).getChildCount();\n+      // Go backwards through the parameter list.\n+      for (Node param = argList.getLastChild(); param != null; param = param.getPrevious()) {\n+        String name = param.getString();\n+        Var var = fnScope.getVar(name);\n+        if (var == null || !referenced.contains(var)) {\n+          argList.removeChild(param);\n+          expectedArgCount--;\n+        } else {\n+          break;\n+        }\n+      }\n+      // If Function.prototype.length is used, then we\n+      // can't remove parameters that way.\n+      if (!compiler.getOptions().preserveDetailedFunctionnalarity() &&\n+          function.hasOneChild() &&\n+          function.getFirstChild().getString().equals(\"prototype\") &&\n+          function.getNext().getString().equals(\"length\")) {\n+        return;\n+      }\n+      // Remove the properties from call sites.\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+      if (argList.getChildCount() != expectedArgCount) {\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}