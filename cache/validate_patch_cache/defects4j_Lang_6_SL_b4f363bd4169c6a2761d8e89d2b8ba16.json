{
    "patch": "public final void translate(CharSequence input, int offset, Writer out) throws IOException {\n    if (input == null || out == null) {\n        return;\n    }\n    int pos = offset;\n    int len = input.length();\n    while (pos < len) {\n        int codePoint = Character.codePointAt(input, pos);\n        int charCount = Character.charCount(codePoint);\n        if (charCount == 1) {\n            translate(Character.toString((char) codePoint), out);\n        } else if (charCount == 2) {\n            char[] surrogatePair = {input.charAt(pos), input.charAt(pos + 1)};\n            translate(new String(surrogatePair), out);\n        } else {\n            // ignore invalid surrogate pairs\n        }\n        pos += charCount;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..6091c42e 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,26 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public final void translate(CharSequence input, int offset, Writer out) throws IOException {\n+    if (input == null || out == null) {\n+        return;\n+    }\n+    int pos = offset;\n+    int len = input.length();\n+    while (pos < len) {\n+        int codePoint = Character.codePointAt(input, pos);\n+        int charCount = Character.charCount(codePoint);\n+        if (charCount == 1) {\n+            translate(Character.toString((char) codePoint), out);\n+        } else if (charCount == 2) {\n+            char[] surrogatePair = {input.charAt(pos), input.charAt(pos + 1)};\n+            translate(new String(surrogatePair), out);\n+        } else {\n+            // ignore invalid surrogate pairs\n+        }\n+        pos += charCount;\n+    }\n+}\n             }\n         }\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}