{
    "patch": "private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent) {\n    ObjectType objectType = dereference(getprop.getFirstChild().getJSType()).autobox() instanceof ObjectType ? ObjectType.cast(dereference(getprop.getFirstChild().getJSType())) : null;\n\n    if (objectType == null) {\n      return;\n    }\n\n    String propertyName = getprop.getLastChild().getString();\n\n    // Find the max visibility this property has as we walk down the\n    // prototype chain.\n    Visibility effectiveVisibility = null;\n    for (; objectType != null && effectiveVisibility == null;\n         objectType = objectType.getImplicitPrototype()) {\n      JSType jsType = objectType.getPropertyType(propertyName);\n\n      if (jsType == null) {\n        continue;\n      }\n\n      JSType elementType = jsType.getIterableElementType();\n      if (elementType != null) {\n        // For ES6 Iterable and Iterator, we read the visibility of\n        // the method through the iterator symbol method.\n        jsType = elementType;\n        propertyName = \"symbol.iterator\";\n      }\n\n      JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName);\n      Visibility vis = info != null ? info.getVisibility() : null;\n\n      if (vis != null &&\n          (effectiveVisibility == null ||\n           effectiveVisibility.compareTo(vis) > 0)) {\n        effectiveVisibility = vis;\n      }\n    }\n\n    if (effectiveVisibility == null) {\n      return;\n    }\n\n    if (t.getInput().getName().equals(\n        getprop.getJSDocInfo() == null\n            ? null : getprop.getJSDocInfo().getSourceFileName())) {\n      // Access is always allowed in the same file.\n      return;\n    }\n\n    // are we trying to override an existing property?\n    boolean isOverride = parent.getType() == Token.ASSIGN &&\n        parent.getFirstChild() == getprop;\n\n    if (isOverride) {\n      if (effectiveVisibility == Visibility.PRIVATE) {\n        // private properties can only be overriden within the same file.\n        compiler.report(\n            t.makeError(getprop, PRIVATE_OVERRIDE, propertyName));\n        return;\n      }\n      JSDocInfo info = parent.getJSDocInfo();\n      Visibility overrideVisibility = info != null\n          ? info.getVisibility()\n          : Visibility.INHERITED;\n      if (!Visibility.validateVisibilityChange(\n          effectiveVisibility, overrideVisibility)) {\n        compiler.report(t.makeError(getprop, INVALID_OVERRIDE,\n            propertyName));\n      }\n    } else {\n      // are we trying to access a private or protected property?\n      JSType ownerType = normalizeClassType(objectType);\n      if (effectiveVisibility == Visibility.PRIVATE) {\n        if (currentClass == null || !currentClass.equals(ownerType)) {\n          String visibilityString = effectiveVisibility.toString();\n          String targetType;\n          if (ownerType instanceof FunctionType) {\n            targetType = \"the function \" +\n                ((FunctionType) ownerType).getReferenceName();\n          } else if (ownerType.isConstructor()) {\n            targetType = \"the constructor \" + ownerType.toString();\n          } else {\n            targetType = \"type \" + ownerType.toString();\n          }\n          compiler.report(\n              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName, targetType));\n        }\n      } else if (effectiveVisibility == Visibility.PROTECTED) {\n        if (currentClass == null ||\n            !currentClass.isSubclass(ownerType.getDisplayName())) {\n          compiler.report(\n              t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n                  propertyName, getReadableObjectType(getprop.getFirstChild().getJSType())));\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..dae465dc 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -404,96 +404,101 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n    * @param t The current traversal.\n    * @param getprop The getprop node.\n    */\n-  private void checkPropertyVisibility(NodeTraversal t,\n+private void checkPropertyVisibility(NodeTraversal t,\n       Node getprop, Node parent) {\n-    ObjectType objectType =\n-        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n+    ObjectType objectType = dereference(getprop.getFirstChild().getJSType()).autobox() instanceof ObjectType ? ObjectType.cast(dereference(getprop.getFirstChild().getJSType())) : null;\n+\n+    if (objectType == null) {\n+      return;\n+    }\n+\n     String propertyName = getprop.getLastChild().getString();\n \n-    if (objectType != null) {\n-      // Is this a normal property access, or are we trying to override\n-      // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n-          parent.getType() == Token.ASSIGN &&\n-          parent.getFirstChild() == getprop;\n-\n-      // Find the lowest property defined on a class with visibility\n-      // information.\n-      if (isOverride) {\n-        objectType = objectType.getImplicitPrototype();\n+    // Find the max visibility this property has as we walk down the\n+    // prototype chain.\n+    Visibility effectiveVisibility = null;\n+    for (; objectType != null && effectiveVisibility == null;\n+         objectType = objectType.getImplicitPrototype()) {\n+      JSType jsType = objectType.getPropertyType(propertyName);\n+\n+      if (jsType == null) {\n+        continue;\n       }\n-      JSDocInfo docInfo = null;\n-      for (; objectType != null;\n-           objectType = objectType.getImplicitPrototype()) {\n-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n-        if (docInfo != null &&\n-            docInfo.getVisibility() != Visibility.INHERITED) {\n-          break;\n-        }\n+\n+      JSType elementType = jsType.getIterableElementType();\n+      if (elementType != null) {\n+        // For ES6 Iterable and Iterator, we read the visibility of\n+        // the method through the iterator symbol method.\n+        jsType = elementType;\n+        propertyName = \"symbol.iterator\";\n       }\n \n-      if (objectType == null) {\n-        // We couldn't find a visibility modifier; assume it's public.\n-        return;\n+      JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName);\n+      Visibility vis = info != null ? info.getVisibility() : null;\n+\n+      if (vis != null &&\n+          (effectiveVisibility == null ||\n+           effectiveVisibility.compareTo(vis) > 0)) {\n+        effectiveVisibility = vis;\n       }\n+    }\n \n-      boolean sameInput =\n-          t.getInput().getName().equals(docInfo.getSourceName());\n-      Visibility visibility = docInfo.getVisibility();\n+    if (effectiveVisibility == null) {\n+      return;\n+    }\n+\n+    if (t.getInput().getName().equals(\n+        getprop.getJSDocInfo() == null\n+            ? null : getprop.getJSDocInfo().getSourceFileName())) {\n+      // Access is always allowed in the same file.\n+      return;\n+    }\n+\n+    // are we trying to override an existing property?\n+    boolean isOverride = parent.getType() == Token.ASSIGN &&\n+        parent.getFirstChild() == getprop;\n+\n+    if (isOverride) {\n+      if (effectiveVisibility == Visibility.PRIVATE) {\n+        // private properties can only be overriden within the same file.\n+        compiler.report(\n+            t.makeError(getprop, PRIVATE_OVERRIDE, propertyName));\n+        return;\n+      }\n+      JSDocInfo info = parent.getJSDocInfo();\n+      Visibility overrideVisibility = info != null\n+          ? info.getVisibility()\n+          : Visibility.INHERITED;\n+      if (!Visibility.validateVisibilityChange(\n+          effectiveVisibility, overrideVisibility)) {\n+        compiler.report(t.makeError(getprop, INVALID_OVERRIDE,\n+            propertyName));\n+      }\n+    } else {\n+      // are we trying to access a private or protected property?\n       JSType ownerType = normalizeClassType(objectType);\n-      if (isOverride) {\n-        // Check an ASSIGN statement that's trying to override a property\n-        // on a superclass.\n-        JSDocInfo overridingInfo = parent.getJSDocInfo();\n-        Visibility overridingVisibility = overridingInfo == null ?\n-            Visibility.INHERITED : overridingInfo.getVisibility();\n-\n-        // Check that (a) the property *can* be overridden, and\n-        // (b) that the visibility of the override is the same as the\n-        // visibility of the original property.\n-        if (visibility == Visibility.PRIVATE && !sameInput) {\n-          compiler.report(\n-              t.makeError(getprop, PRIVATE_OVERRIDE,\n-                  objectType.toString()));\n-        } else if (overridingVisibility != Visibility.INHERITED &&\n-            overridingVisibility != visibility) {\n+      if (effectiveVisibility == Visibility.PRIVATE) {\n+        if (currentClass == null || !currentClass.equals(ownerType)) {\n+          String visibilityString = effectiveVisibility.toString();\n+          String targetType;\n+          if (ownerType instanceof FunctionType) {\n+            targetType = \"the function \" +\n+                ((FunctionType) ownerType).getReferenceName();\n+          } else if (ownerType.isConstructor()) {\n+            targetType = \"the constructor \" + ownerType.toString();\n+          } else {\n+            targetType = \"type \" + ownerType.toString();\n+          }\n           compiler.report(\n-              t.makeError(getprop, VISIBILITY_MISMATCH,\n-                  visibility.name(), objectType.toString(),\n-                  overridingVisibility.name()));\n+              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n+                  propertyName, targetType));\n         }\n-      } else {\n-        if (sameInput) {\n-          // private access is always allowed in the same file.\n-          return;\n-        } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n-          if (docInfo.isConstructor() &&\n-              isValidPrivateConstructorAccess(parent)) {\n-            return;\n-          }\n-\n-          // private access is not allowed outside the file from a different\n-          // enclosing class.\n+      } else if (effectiveVisibility == Visibility.PROTECTED) {\n+        if (currentClass == null ||\n+            !currentClass.isSubclass(ownerType.getDisplayName())) {\n           compiler.report(\n-              t.makeError(getprop,\n-                  BAD_PRIVATE_PROPERTY_ACCESS,\n-                  propertyName,\n-                  validator.getReadableJSTypeName(\n-                      getprop.getFirstChild(), true)));\n-        } else if (visibility == Visibility.PROTECTED) {\n-          // There are 3 types of legal accesses of a protected property:\n-          // 1) Accesses in the same file\n-          // 2) Overriding the property in a subclass\n-          // 3) Accessing the property from inside a subclass\n-          // The first two have already been checked for.\n-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n-            compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n-                    propertyName,\n-                    validator.getReadableJSTypeName(\n-                        getprop.getFirstChild(), true)));\n-          }\n+              t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n+                  propertyName, getReadableObjectType(getprop.getFirstChild().getJSType())));\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}