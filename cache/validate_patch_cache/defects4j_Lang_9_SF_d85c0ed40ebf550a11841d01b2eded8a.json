{
    "patch": "    private void init() {\n        thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n\n        nameValues = new ConcurrentHashMap<Integer, KeyValue[]>();\n\n        StringBuilder regex = new StringBuilder();\n        List<Strategy> collector = new ArrayList<Strategy>();\n\n        Matcher patternMatcher = formatPattern.matcher(pattern);\n\n        while (patternMatcher.find()) {\n            String patternString = patternMatcher.group();\n            Strategy currentStrategy = getStrategy(patternString);\n            if (currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n        }\n\n        currentFormatField = null;\n        strategies = collector.toArray(new Strategy[collector.size()]);\n        parsePattern = Pattern.compile(regex.toString());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..c2475977 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -113,40 +113,26 @@ public class FastDateParser implements DateParser, Serializable {\n      * This is called from constructor and from readObject (de-serialization)\n      */\n     private void init() {\n-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+        thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n \n-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n+        nameValues = new ConcurrentHashMap<Integer, KeyValue[]>();\n \n-        StringBuilder regex= new StringBuilder();\n+        StringBuilder regex = new StringBuilder();\n         List<Strategy> collector = new ArrayList<Strategy>();\n \n-        Matcher patternMatcher= formatPattern.matcher(pattern);\n-        if(!patternMatcher.lookingAt()) {\n-            throw new IllegalArgumentException(\"Invalid pattern\");\n-        }\n+        Matcher patternMatcher = formatPattern.matcher(pattern);\n \n-        currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n-        for(;;) {\n-            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n-            if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n-                break;\n-            }\n-            String nextFormatField= patternMatcher.group();\n-            nextStrategy = getStrategy(nextFormatField);\n-            if(currentStrategy.addRegex(this, regex)) {\n+        while (patternMatcher.find()) {\n+            String patternString = patternMatcher.group();\n+            Strategy currentStrategy = getStrategy(patternString);\n+            if (currentStrategy.addRegex(this, regex)) {\n                 collector.add(currentStrategy);\n             }\n-            currentFormatField= nextFormatField;\n-            currentStrategy= nextStrategy;\n         }\n-        if(currentStrategy.addRegex(this, regex)) {\n-            collector.add(currentStrategy);\n-        }\n-        currentFormatField= null;\n-        strategies= collector.toArray(new Strategy[collector.size()]);\n-        parsePattern= Pattern.compile(regex.toString());\n+\n+        currentFormatField = null;\n+        strategies = collector.toArray(new Strategy[collector.size()]);\n+        parsePattern = Pattern.compile(regex.toString());\n     }\n \n     // Accessors",
    "result_reason": "java.text.ParseException: Unparseable date: \"20030210153320989\" does not match (\\p{IsNd}++)(\\p{IsNd}++)(\\p{IsNd}++)(\\p{IsNd}++)(\\p{IsNd}++)(\\p{IsNd}++)(\\p{IsNd}++)",
    "test_result": "FAIL"
}