{
    "patch": "if (n.isReturn()) {\n    return false;\n}\n\nif (n.isCall() && VarCheckUtils.dependsOn(n.getFirstChild(), dependent)) {\n    if (!NodeUtil.functionCallHasSideEffects(n)) {\n        return false;\n    }\n    return true;\n}\n\nif (n.isNew() && VarCheckUtils.dependsOn(n.getFirstChild(), dependent)) {\n    if (!NodeUtil.constructorCallHasSideEffects(n)) {\n        return false;\n    }\n    return true;\n}\n\nif (n.isGetProp() && dependent.isName()\n     && ((n.getFirstChild().isThis() && \"prototype\".equals(n.getSecondChild().getString()))\n         || (n.getFirstChild().isName() && n.getFirstChild().getString().equals(dependent.getString())))) {\n     return true;\n}\n\nfor (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n        return true;\n    }\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..3b811f8b 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,36 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isReturn()) {\n+    return false;\n+}\n+\n+if (n.isCall() && VarCheckUtils.dependsOn(n.getFirstChild(), dependent)) {\n+    if (!NodeUtil.functionCallHasSideEffects(n)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+if (n.isNew() && VarCheckUtils.dependsOn(n.getFirstChild(), dependent)) {\n+    if (!NodeUtil.constructorCallHasSideEffects(n)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+if (n.isGetProp() && dependent.isName()\n+     && ((n.getFirstChild().isThis() && \"prototype\".equals(n.getSecondChild().getString()))\n+         || (n.getFirstChild().isName() && n.getFirstChild().getString().equals(dependent.getString())))) {\n+     return true;\n+}\n+\n+for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+        return true;\n+    }\n+}\n+return false;\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}