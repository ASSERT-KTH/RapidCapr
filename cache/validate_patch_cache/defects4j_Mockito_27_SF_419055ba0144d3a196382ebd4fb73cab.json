{
    "patch": "    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        if (mock instanceof Factory) {\n            Callback[] callbacks = ((Factory) mock).getCallbacks();\n            if (callbacks != null) {\n                for (int i = 0; i < callbacks.length; i++) {\n                    if (callbacks[i] instanceof MethodInterceptorFilter) {\n                        ((Factory) mock).setCallback(i, newFilter);\n                        return;\n                    }\n                }\n            }\n            ((Factory) mock).setCallback(0, newFilter);\n        } else if (mock instanceof MockitoSpy) {\n            MockitoInvocationHandler handler = ((MockitoSpy<?>) mock).__getSpyThreadContext().getMockHandler();\n            // if the handler is already a MethodInterceptorFilter, just replace the handler with the new interceptor\n            if (handler instanceof MethodInterceptorFilter) {\n                ((MethodInterceptorFilter) handler).setMockHandler(newMockHandler);\n            } else {\n                ((MockitoSpy<?>) mock).setMockHandler(newFilter);\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..23298a2c1 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,32 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        if (mock instanceof Factory) {\n+            Callback[] callbacks = ((Factory) mock).getCallbacks();\n+            if (callbacks != null) {\n+                for (int i = 0; i < callbacks.length; i++) {\n+                    if (callbacks[i] instanceof MethodInterceptorFilter) {\n+                        ((Factory) mock).setCallback(i, newFilter);\n+                        return;\n+                    }\n+                }\n+            }\n+            ((Factory) mock).setCallback(0, newFilter);\n+        } else if (mock instanceof MockitoSpy) {\n+            MockitoInvocationHandler handler = ((MockitoSpy<?>) mock).__getSpyThreadContext().getMockHandler();\n+            // if the handler is already a MethodInterceptorFilter, just replace the handler with the new interceptor\n+            if (handler instanceof MethodInterceptorFilter) {\n+                ((MethodInterceptorFilter) handler).setMockHandler(newMockHandler);\n+            } else {\n+                ((MockitoSpy<?>) mock).setMockHandler(newFilter);\n+            }\n+        }\n+    }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}