{
    "patch": "Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (mockCandidate != null) {\n    field.setAccessible(true);\n\n    // check if field is final\n    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n    boolean isFinal = Modifier.isFinal(modifiersField.getInt(field));\n    if (isFinal) {\n        Field modifiersModsField = Field.class.getDeclaredField(\"modifiers\");\n        modifiersModsField.setAccessible(true);\n        modifiersModsField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n    }\n\n    try {\n        Object oldValue = field.get(fieldInstance);\n        field.set(fieldInstance, mockCandidate);\n        for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n            innerField.setAccessible(true);\n            if (innerField.get(mockCandidate) == oldValue) {\n                innerField.set(mockCandidate, mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject());\n            }\n        }\n    } catch (IllegalAccessException e) {\n        throw new RuntimeException(e);\n    } finally {\n        // if field was final, make it final again\n        if (isFinal) {\n            Field modifiersModsField = Field.class.getDeclaredField(\"modifiers\");\n            modifiersModsField.setAccessible(true);\n            modifiersModsField.setInt(field, field.getModifiers() | Modifier.FINAL);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..2dee52f9b 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,42 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (mockCandidate != null) {\n+    field.setAccessible(true);\n+\n+    // check if field is final\n+    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+    boolean isFinal = Modifier.isFinal(modifiersField.getInt(field));\n+    if (isFinal) {\n+        Field modifiersModsField = Field.class.getDeclaredField(\"modifiers\");\n+        modifiersModsField.setAccessible(true);\n+        modifiersModsField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n+    }\n+\n+    try {\n+        Object oldValue = field.get(fieldInstance);\n+        field.set(fieldInstance, mockCandidate);\n+        for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n+            innerField.setAccessible(true);\n+            if (innerField.get(mockCandidate) == oldValue) {\n+                innerField.set(mockCandidate, mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject());\n+            }\n+        }\n+    } catch (IllegalAccessException e) {\n+        throw new RuntimeException(e);\n+    } finally {\n+        // if field was final, make it final again\n+        if (isFinal) {\n+            Field modifiersModsField = Field.class.getDeclaredField(\"modifiers\");\n+            modifiersModsField.setAccessible(true);\n+            modifiersModsField.setInt(field, field.getModifiers() | Modifier.FINAL);\n+        }\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}