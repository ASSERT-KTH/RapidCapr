{
    "patch": "I apologize for the oversight. Here's the correct line of code at the infill location that should fix the second test failure:\n```\npos += consumed == 0 ? Character.charCount(Character.codePointAt(input, pos)) : consumed;\nif (pos < len && Character.isHighSurrogate(input.charAt(pos - 1))) {\n    if (pos + 1 < len && Character.isLowSurrogate(input.charAt(pos))) {\n        pos += Character.charCount(Character.codePointAt(input, pos));\n    } else {\n        // single high surrogate at end of input - write as-is\n        out.write(Character.toChars(Character.codePointBefore(input, pos)));\n        pos--;\n    }\n}\n```\nThe added code after the first line checks if the last character consumed was a high surrogate and if the next character is a low surrogate, in which case it skips the surrogate pair. If the last character consumed was a high surrogate at the end of the input, the code writes it as-is. This should fix the second test failure.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..cb444a63 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,20 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+I apologize for the oversight. Here's the correct line of code at the infill location that should fix the second test failure:\n+```\n+pos += consumed == 0 ? Character.charCount(Character.codePointAt(input, pos)) : consumed;\n+if (pos < len && Character.isHighSurrogate(input.charAt(pos - 1))) {\n+    if (pos + 1 < len && Character.isLowSurrogate(input.charAt(pos))) {\n+        pos += Character.charCount(Character.codePointAt(input, pos));\n+    } else {\n+        // single high surrogate at end of input - write as-is\n+        out.write(Character.toChars(Character.codePointBefore(input, pos)));\n+        pos--;\n+    }\n+}\n+```\n+The added code after the first line checks if the last character consumed was a high surrogate and if the next character is a low surrogate, in which case it skips the surrogate pair. If the last character consumed was a high surrogate at the end of the input, the code writes it as-is. This should fix the second test failure.\n             }\n         }\n     }",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}