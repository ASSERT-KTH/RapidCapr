{
    "patch": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && n.getType() == Token.GETPROP) {\n          // We want to exclude the assignment itself from the usage list\n          boolean isChainedProperty =\n              n.getFirstChild().getType() == Token.GETPROP;\n\n          if (isChainedProperty) {\n            Node child = n.getFirstChild().getFirstChild().getNext();\n\n            if (child.getType() == Token.STRING &&\n                child.getString().equals(\"prototype\")) {\n              return true;\n            }\n          }\n           return !NodeUtil.isAssignmentOp(assign.getParent()) &&\n                  !NodeUtil.isForIn(assign.getParent());\n      }\n\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..12759c50 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -314,20 +314,21 @@ class AnalyzePrototypeProperties implements CompilerPass {\n     private boolean isPrototypePropertyAssign(Node assign) {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n-        // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n-\n-        if (isChainedProperty) {\n-          Node child = n.getFirstChild().getFirstChild().getNext();\n-\n-          if (child.getType() == Token.STRING &&\n-              child.getString().equals(\"prototype\")) {\n-            return true;\n+          && n.getType() == Token.GETPROP) {\n+          // We want to exclude the assignment itself from the usage list\n+          boolean isChainedProperty =\n+              n.getFirstChild().getType() == Token.GETPROP;\n+\n+          if (isChainedProperty) {\n+            Node child = n.getFirstChild().getFirstChild().getNext();\n+\n+            if (child.getType() == Token.STRING &&\n+                child.getString().equals(\"prototype\")) {\n+              return true;\n+            }\n           }\n-        }\n+           return !NodeUtil.isAssignmentOp(assign.getParent()) &&\n+                  !NodeUtil.isForIn(assign.getParent());\n       }\n \n       return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}