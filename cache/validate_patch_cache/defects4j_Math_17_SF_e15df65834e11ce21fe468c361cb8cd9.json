{
    "patch": "    public Dfp multiply(final int x) {\n            if (isNaN()) {\n                return newInstance(getField(), this);\n            }\n            Dfp result = newInstance(this);\n            result.sign = signum() * Field.getPureDfpDec(10, exponent()).signum() * x;\n            result.exp = exp;\n            result.mant = mult(mant, abs(x));\n            result.normalize();\n            return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..f330602d8 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,15 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+            if (isNaN()) {\n+                return newInstance(getField(), this);\n+            }\n+            Dfp result = newInstance(this);\n+            result.sign = signum() * Field.getPureDfpDec(10, exponent()).signum() * x;\n+            result.exp = exp;\n+            result.mant = mult(mant, abs(x));\n+            result.normalize();\n+            return result;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: no suitable method found for newInstance(DfpField,Dfp)",
    "test_result": "ERROR"
}