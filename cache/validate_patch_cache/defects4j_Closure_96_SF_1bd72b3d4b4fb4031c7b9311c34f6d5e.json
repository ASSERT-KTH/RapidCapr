{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n   Iterator<Node> arguments = call.children().iterator();\n   arguments.next(); // skip the function name\n\n   Iterator<Node> parameters = functionType.getParameters().iterator();\n   int ordinal = 0;\n   Node parameter = null;\n   Node argument = null;\n   while (parameters.hasNext()) { // Iterate over parameters instead of arguments\n      // If there are no arguments left in the list, then this is a var_args function.\n      if (!arguments.hasNext()) {\n         if (!parameters.next().getJSType().isVarArgsType()) {\n            report(t, call, WRONG_ARGUMENT_COUNT, call.getFirstChild().getQualifiedName(),\n                  Integer.toString(ordinal), \"MAXIMUM\");\n         }\n         return;\n      }\n\n      parameter = parameters.next();\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n            getJSType(parameter), call, ordinal);\n   }\n\n   // If there are any arguments left, check if they can be matched to var_arg.\n   while (arguments.hasNext()) {\n      argument = arguments.next();\n      if (!functionType.getVarArgsArrayType().isEquivalentTo(getJSType(argument))) {\n         report(t, call, WRONG_ARGUMENT_COUNT, call.getFirstChild().getQualifiedName(),\n               Integer.toString(ordinal), \"MAXIMUM\");\n         return;\n      }\n      ordinal++;\n   }\n\n   // Check if the correct no of parameters were provided.\n   int numArgs = call.getChildCount() - 1; // exclude function name\n   int minArgs = functionType.getMinArguments();\n   int maxArgs = functionType.getMaxArguments();\n   if (numArgs < minArgs || (numArgs > maxArgs && maxArgs != -1)) {\n      report(t, call, WRONG_ARGUMENT_COUNT, call.getFirstChild().getQualifiedName(),\n            Integer.toString(numArgs), Integer.toString(minArgs),\n            Integer.toString(maxArgs));\n   }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..e90224c4 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,53 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+   Iterator<Node> arguments = call.children().iterator();\n+   arguments.next(); // skip the function name\n+\n+   Iterator<Node> parameters = functionType.getParameters().iterator();\n+   int ordinal = 0;\n+   Node parameter = null;\n+   Node argument = null;\n+   while (parameters.hasNext()) { // Iterate over parameters instead of arguments\n+      // If there are no arguments left in the list, then this is a var_args function.\n+      if (!arguments.hasNext()) {\n+         if (!parameters.next().getJSType().isVarArgsType()) {\n+            report(t, call, WRONG_ARGUMENT_COUNT, call.getFirstChild().getQualifiedName(),\n+                  Integer.toString(ordinal), \"MAXIMUM\");\n+         }\n+         return;\n+      }\n+\n+      parameter = parameters.next();\n       argument = arguments.next();\n       ordinal++;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+            getJSType(parameter), call, ordinal);\n+   }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n-  }\n+   // If there are any arguments left, check if they can be matched to var_arg.\n+   while (arguments.hasNext()) {\n+      argument = arguments.next();\n+      if (!functionType.getVarArgsArrayType().isEquivalentTo(getJSType(argument))) {\n+         report(t, call, WRONG_ARGUMENT_COUNT, call.getFirstChild().getQualifiedName(),\n+               Integer.toString(ordinal), \"MAXIMUM\");\n+         return;\n+      }\n+      ordinal++;\n+   }\n+\n+   // Check if the correct no of parameters were provided.\n+   int numArgs = call.getChildCount() - 1; // exclude function name\n+   int minArgs = functionType.getMinArguments();\n+   int maxArgs = functionType.getMaxArguments();\n+   if (numArgs < minArgs || (numArgs > maxArgs && maxArgs != -1)) {\n+      report(t, call, WRONG_ARGUMENT_COUNT, call.getFirstChild().getQualifiedName(),\n+            Integer.toString(numArgs), Integer.toString(minArgs),\n+            Integer.toString(maxArgs));\n+   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}