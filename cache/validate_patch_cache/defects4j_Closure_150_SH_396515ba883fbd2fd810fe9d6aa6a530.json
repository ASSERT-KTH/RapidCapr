{
    "patch": "attachLiteralTypes(n);\nNode grandparent = parent.getParent();\nif (grandparent != null) {\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME || parent.getType() == Token.CALL || parent.getType() == Token.NEW) {\n        return;\n      }\n      if (NodeUtil.isFunctionExpression(n) || parent.getType() == Token.SCRIPT || parent.getType() == Token.BLOCK || grandparent.getType() == Token.SCRIPT || grandparent.getType() == Token.BLOCK) {\n        defineDeclaredFunction(n, parent);\n      }\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.LP:\n      if (NodeUtil.isFunctionExpression(parent)) {\n        defineDeclaredFunction(parent, grandparent);\n      } else if (parent == scope.getRootNode() || grandparent.getType() == Token.SCRIPT || grandparent.getType() == Token.BLOCK) {\n        handleFunctionInputs(parent);\n      }\n      break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e6618087 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,33 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+attachLiteralTypes(n);\n+Node grandparent = parent.getParent();\n+if (grandparent != null) {\n+  switch (n.getType()) {\n+    case Token.FUNCTION:\n+      if (parent.getType() == Token.NAME || parent.getType() == Token.CALL || parent.getType() == Token.NEW) {\n+        return;\n+      }\n+      if (NodeUtil.isFunctionExpression(n) || parent.getType() == Token.SCRIPT || parent.getType() == Token.BLOCK || grandparent.getType() == Token.SCRIPT || grandparent.getType() == Token.BLOCK) {\n+        defineDeclaredFunction(n, parent);\n       }\n+      break;\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.VAR:\n+      defineVar(n, parent);\n+      break;\n+    case Token.LP:\n+      if (NodeUtil.isFunctionExpression(parent)) {\n+        defineDeclaredFunction(parent, grandparent);\n+      } else if (parent == scope.getRootNode() || grandparent.getType() == Token.SCRIPT || grandparent.getType() == Token.BLOCK) {\n+        handleFunctionInputs(parent);\n+      }\n+      break;\n+  }\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}