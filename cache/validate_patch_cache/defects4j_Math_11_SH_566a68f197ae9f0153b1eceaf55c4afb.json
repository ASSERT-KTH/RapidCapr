{
    "patch": "    public double density(final double[] vals) throws DimensionMismatchException {\n        final int dim = getDimension();\n        if (vals.length != dim) {\n            throw new DimensionMismatchException(vals.length, dim);\n        }\n\n        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n                FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n                FastMath.exp(-0.5 * mahalanobisDistance(vals));\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..b1c6ab32e 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -174,6 +174,12 @@ public class MultivariateNormalDistribution\n     }\n \n     /** {@inheritDoc} */\n+    public double density(final double[] vals) throws DimensionMismatchException {\n+        final int dim = getDimension();\n+        if (vals.length != dim) {\n+            throw new DimensionMismatchException(vals.length, dim);\n+        }\n+\n     public double density(final double[] vals) throws DimensionMismatchException {\n         final int dim = getDimension();\n         if (vals.length != dim) {\n@@ -181,6 +187,9 @@ public class MultivariateNormalDistribution\n         }\n \n         return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n+                FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n+                FastMath.exp(-0.5 * mahalanobisDistance(vals));\n+    }\n             FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n             getExponentTerm(vals);\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}