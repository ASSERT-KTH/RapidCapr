{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.getParent() != null && n.getParent().getType() == Token.FUNCTION) {\n      Node funcNode = n.getParent();\n      boolean isEventHandler = false;\n\n      // Detect if the parent function is an event handler.\n      if (funcNode.getFirstChild().getNext().getType() == Token.PARAM_LIST) {\n        Node paramList = funcNode.getFirstChild().getNext();\n        for (Node param = paramList.getFirstChild(); param != null; param = param.getNext()) {\n          if (param.getType() == Token.NAME && \"$event\".equals(param.getString())) {\n            isEventHandler = true;\n            break;\n          }\n        }\n      }\n\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n\n        if (NodeUtil.isExpressionNode(maybeExpr)) {\n          // It is an expression statement.\n          if (isEventHandler) {\n             // Don't fold expression statements in event handlers.\n             return false;\n          } \n          return true;\n        } else if (maybeExpr.getType() == Token.RETURN\n            && maybeExpr.hasOneChild()\n            && NodeUtil.isExpressionNode(maybeExpr.getFirstChild())) {\n          // It is a return statement with an expression.\n          if (isEventHandler) {\n            // In some cases, IE incorrectly propagates the wrong event object when\n            // a return value is expected from the event handler.\n            // See: https://code.google.com/p/closure-compiler/issues/detail?id=291\n            // Do not fold return statements in event handlers that return undefined.\n            Node returnValue = maybeExpr.getFirstChild();\n            return returnValue.getType() != Token.NAME || !returnValue.getString().equals(\"undefined\");\n          }\n          return !NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild());\n        }\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..8ebf0510 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,52 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.getParent() != null && n.getParent().getType() == Token.FUNCTION) {\n+      Node funcNode = n.getParent();\n+      boolean isEventHandler = false;\n+\n+      // Detect if the parent function is an event handler.\n+      if (funcNode.getFirstChild().getNext().getType() == Token.PARAM_LIST) {\n+        Node paramList = funcNode.getFirstChild().getNext();\n+        for (Node param = paramList.getFirstChild(); param != null; param = param.getNext()) {\n+          if (param.getType() == Token.NAME && \"$event\".equals(param.getString())) {\n+            isEventHandler = true;\n+            break;\n+          }\n+        }\n+      }\n+\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n \n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+        if (NodeUtil.isExpressionNode(maybeExpr)) {\n+          // It is an expression statement.\n+          if (isEventHandler) {\n+             // Don't fold expression statements in event handlers.\n+             return false;\n+          } \n+          return true;\n+        } else if (maybeExpr.getType() == Token.RETURN\n+            && maybeExpr.hasOneChild()\n+            && NodeUtil.isExpressionNode(maybeExpr.getFirstChild())) {\n+          // It is a return statement with an expression.\n+          if (isEventHandler) {\n+            // In some cases, IE incorrectly propagates the wrong event object when\n+            // a return value is expected from the event handler.\n+            // See: https://code.google.com/p/closure-compiler/issues/detail?id=291\n+            // Do not fold return statements in event handlers that return undefined.\n+            Node returnValue = maybeExpr.getFirstChild();\n+            return returnValue.getType() != Token.NAME || !returnValue.getString().equals(\"undefined\");\n+          }\n+          return !NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild());\n+        }\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}