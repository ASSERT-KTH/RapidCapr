{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (n.getParent() != null && n.getParent().getType() == Token.EXPR_RESULT) {\n        Node assignNode = n.getParent().getFirstChild();\n        Node lhs = assignNode.getFirstChild();\n\n        if (NodeUtil.isGet(lhs)) {\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n                  llhs.getLastChild().getString().equals(\"prototype\")) {\n            Node assignParent = assignNode.getParent();\n            // Check if assignment is part of an object literal or a variable initialization\n            if (assignParent != null && (NodeUtil.isObjectLit(assignParent.getParent()) ||\n                    NodeUtil.isVar(assignParent.getParent()))) {\n              Node nGrandParent = assignParent.getParent().getParent();\n              if (nGrandParent != null &&\n                      nGrandParent.getType() == Token.FUNCTION &&\n                      nGrandParent.getFirstChild() != null &&\n                      NodeUtil.isGet(nGrandParent.getFirstChild().getNext())) {\n                // Mark function as being lent to a prototype.\n                return false;\n              }\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..a6ec095f 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,31 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getParent() != null && n.getParent().getType() == Token.EXPR_RESULT) {\n+        Node assignNode = n.getParent().getFirstChild();\n+        Node lhs = assignNode.getFirstChild();\n+\n+        if (NodeUtil.isGet(lhs)) {\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+                  llhs.getLastChild().getString().equals(\"prototype\")) {\n+            Node assignParent = assignNode.getParent();\n+            // Check if assignment is part of an object literal or a variable initialization\n+            if (assignParent != null && (NodeUtil.isObjectLit(assignParent.getParent()) ||\n+                    NodeUtil.isVar(assignParent.getParent()))) {\n+              Node nGrandParent = assignParent.getParent().getParent();\n+              if (nGrandParent != null &&\n+                      nGrandParent.getType() == Token.FUNCTION &&\n+                      nGrandParent.getFirstChild() != null &&\n+                      NodeUtil.isGet(nGrandParent.getFirstChild().getNext())) {\n+                // Mark function as being lent to a prototype.\n+                return false;\n+              }\n+            }\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}