{
    "patch": "        Node child = n.getFirstChild();\n        while (child != null) {\n          String name = child.getString();\n          T type = typeSystem.getType(getScope(), n, name);\n          Property prop = getProperty(name);\n          if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n            if (propertiesToErrorFor.containsKey(name)) {\n              compiler.report(\n                  JSError.make(\n                      t.getSourceName(),\n                      child,\n                      propertiesToErrorFor.get(name),\n                      Warnings.INVALIDATION,\n                      name,\n                      (type == null ? \"null\" : type.toString()),\n                      n.toString(),\n                      \"\"));\n            }\n          }\n          child = child.getNext();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..6ece3d44 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,26 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        Node child = n.getFirstChild();\n+        while (child != null) {\n+          String name = child.getString();\n+          T type = typeSystem.getType(getScope(), n, name);\n+          Property prop = getProperty(name);\n+          if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+            if (propertiesToErrorFor.containsKey(name)) {\n+              compiler.report(\n+                  JSError.make(\n+                      t.getSourceName(),\n+                      child,\n+                      propertiesToErrorFor.get(name),\n+                      Warnings.INVALIDATION,\n+                      name,\n+                      (type == null ? \"null\" : type.toString()),\n+                      n.toString(),\n+                      \"\"));\n+            }\n+          }\n+          child = child.getNext();\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}