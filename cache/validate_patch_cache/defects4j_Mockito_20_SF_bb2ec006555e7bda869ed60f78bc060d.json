{
    "patch": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n\n    final MockMethodInterceptor mockInterceptor = new MockMethodInterceptor(\n            asInternalMockHandler(handler), settings);\n\n    final Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n\n    final T mockInstance;\n\n    try {\n        if (mockedProxyType.isMemberClass() && !Modifier.isStatic(mockedProxyType.getModifiers())) {\n            final Constructor<? extends T> constructor = mockedProxyType.getDeclaredConstructor(\n                    mockedProxyType.getDeclaringClass());\n            constructor.setAccessible(true);\n            mockInstance = constructor.newInstance(settings.getOuterClassInstance());\n        } else {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n\n        final MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(mockInterceptor);\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (InvocationTargetException ex) {\n        throw new MockitoException(\"Cannot instantiate inner class mock\", ex.getCause());\n    } catch (Exception ex) {\n        throw new MockitoException(\"Cannot instantiate mock\", ex);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..46e54c8a0 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,36 +21,41 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n-        }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n-            mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n+        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+    }\n \n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n-            throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+    final MockMethodInterceptor mockInterceptor = new MockMethodInterceptor(\n+            asInternalMockHandler(handler), settings);\n+\n+    final Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n+            settings.getTypeToMock(),\n+            settings.getExtraInterfaces()\n+    );\n+\n+    final T mockInstance;\n+\n+    try {\n+        if (mockedProxyType.isMemberClass() && !Modifier.isStatic(mockedProxyType.getModifiers())) {\n+            final Constructor<? extends T> constructor = mockedProxyType.getDeclaredConstructor(\n+                    mockedProxyType.getDeclaringClass());\n+            constructor.setAccessible(true);\n+            mockInstance = constructor.newInstance(settings.getOuterClassInstance());\n+        } else {\n+            mockInstance = classInstantiator.instantiate(mockedProxyType);\n         }\n+\n+        final MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n+        mockAccess.setMockitoInterceptor(mockInterceptor);\n+\n+        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n+    } catch (InvocationTargetException ex) {\n+        throw new MockitoException(\"Cannot instantiate inner class mock\", ex.getCause());\n+    } catch (Exception ex) {\n+        throw new MockitoException(\"Cannot instantiate mock\", ex);\n     }\n+}\n \n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}