{
    "patch": "public EqualsBuilder append(Object lhs, Object rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        this.setEquals(false);\n        return this;\n    }\n    Class<?> lhsClazz = lhs.getClass();\n    if (!lhsClazz.isArray()) {\n        // The simple case, not an array, just test the element\n        isEquals = lhs.equals(rhs);\n    } else if (!rhs.getClass().equals(lhsClazz)) {\n        // Different array type, can't be equal\n        this.setEquals(false);\n    } else {\n        Class<?> componentType = lhsClazz.getComponentType();\n        if (!componentType.isPrimitive()) {\n            // Not an array of primitives\n            Object[] lhsArray = (Object[]) lhs;\n            Object[] rhsArray = (Object[]) rhs;\n            if (lhsArray.length != rhsArray.length) {\n                // Different array length, can't be equal\n                this.setEquals(false);\n                return this;\n            }\n            // Compare each element of the array recursively\n            for (int i = 0; i < lhsArray.length; i++) {\n                if (!append(lhsArray[i], rhsArray[i]).isEquals()) {\n                    this.setEquals(false);\n                    return this;\n                }\n            }\n        } else if (componentType.equals(Byte.TYPE)) {\n            // Array of bytes\n            isEquals = Arrays.equals((byte[]) lhs, (byte[]) rhs);\n        } else if (componentType.equals(Short.TYPE)) {\n            // Array of shorts\n            isEquals = Arrays.equals((short[]) lhs, (short[]) rhs);\n        } else if (componentType.equals(Integer.TYPE)) {\n            // Array of ints\n            isEquals = Arrays.equals((int[]) lhs, (int[]) rhs);\n        } else if (componentType.equals(Long.TYPE)) {\n            // Array of longs\n            isEquals = Arrays.equals((long[]) lhs, (long[]) rhs);\n        } else if (componentType.equals(Boolean.TYPE)) {\n            // Array of booleans\n            isEquals = Arrays.equals((boolean[]) lhs, (boolean[]) rhs);\n        } else if (componentType.equals(Float.TYPE)) {\n            // Array of floats\n            isEquals = Arrays.equals((float[]) lhs, (float[]) rhs);\n        } else if (componentType.equals(Double.TYPE)) {\n            // Array of doubles\n            isEquals = Arrays.equals((double[]) lhs, (double[]) rhs);\n        } else if (componentType.equals(Character.TYPE)) {\n            // Array of chars\n            isEquals = Arrays.equals((char[]) lhs, (char[]) rhs);\n        }\n    }\n    return this;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..f7ea2938 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,70 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n-        if (lhs == rhs) {\n-            return this;\n-        }\n-        if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n-            return this;\n-        }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n+public EqualsBuilder append(Object lhs, Object rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    if (lhs == rhs) {\n+        return this;\n+    }\n+    if (lhs == null || rhs == null) {\n+        this.setEquals(false);\n+        return this;\n+    }\n+    Class<?> lhsClazz = lhs.getClass();\n+    if (!lhsClazz.isArray()) {\n+        // The simple case, not an array, just test the element\n+        isEquals = lhs.equals(rhs);\n+    } else if (!rhs.getClass().equals(lhsClazz)) {\n+        // Different array type, can't be equal\n+        this.setEquals(false);\n+    } else {\n+        Class<?> componentType = lhsClazz.getComponentType();\n+        if (!componentType.isPrimitive()) {\n             // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            Object[] lhsArray = (Object[]) lhs;\n+            Object[] rhsArray = (Object[]) rhs;\n+            if (lhsArray.length != rhsArray.length) {\n+                // Different array length, can't be equal\n+                this.setEquals(false);\n+                return this;\n+            }\n+            // Compare each element of the array recursively\n+            for (int i = 0; i < lhsArray.length; i++) {\n+                if (!append(lhsArray[i], rhsArray[i]).isEquals()) {\n+                    this.setEquals(false);\n+                    return this;\n+                }\n+            }\n+        } else if (componentType.equals(Byte.TYPE)) {\n+            // Array of bytes\n+            isEquals = Arrays.equals((byte[]) lhs, (byte[]) rhs);\n+        } else if (componentType.equals(Short.TYPE)) {\n+            // Array of shorts\n+            isEquals = Arrays.equals((short[]) lhs, (short[]) rhs);\n+        } else if (componentType.equals(Integer.TYPE)) {\n+            // Array of ints\n+            isEquals = Arrays.equals((int[]) lhs, (int[]) rhs);\n+        } else if (componentType.equals(Long.TYPE)) {\n+            // Array of longs\n+            isEquals = Arrays.equals((long[]) lhs, (long[]) rhs);\n+        } else if (componentType.equals(Boolean.TYPE)) {\n+            // Array of booleans\n+            isEquals = Arrays.equals((boolean[]) lhs, (boolean[]) rhs);\n+        } else if (componentType.equals(Float.TYPE)) {\n+            // Array of floats\n+            isEquals = Arrays.equals((float[]) lhs, (float[]) rhs);\n+        } else if (componentType.equals(Double.TYPE)) {\n+            // Array of doubles\n+            isEquals = Arrays.equals((double[]) lhs, (double[]) rhs);\n+        } else if (componentType.equals(Character.TYPE)) {\n+            // Array of chars\n+            isEquals = Arrays.equals((char[]) lhs, (char[]) rhs);\n         }\n-        return this;\n     }\n+    return this;\n+}\n \n     /**\n      * <p>",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}