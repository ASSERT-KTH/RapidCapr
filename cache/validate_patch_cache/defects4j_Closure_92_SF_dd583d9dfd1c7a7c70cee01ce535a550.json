{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n  List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n  for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n    if (edge.getValue() == Branch.ON_EX || \n        isCatchEdge(edge) || \n        isFinallyEdge(edge)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nprivate boolean isCatchEdge(DiGraphEdge<Node, Branch> edge) {\n  Branch branch = edge.getValue();\n  ControlFlowGraph<Node> cfg = getCfg();\n  Node prevNode = edge.getSource().getValue();\n  Node nextNode = edge.getDestination().getValue();\n  return branch == Branch.CATCH &&\n      cfg.getInEdges(nextNode).stream()\n          .filter(e -> e.getSource().getValue() == prevNode)\n          .allMatch(e -> e.getValue() == Branch.ON_EX);\n}\n\nprivate boolean isFinallyEdge(DiGraphEdge<Node, Branch> edge) {\n  Branch branch = edge.getValue();\n  ControlFlowGraph<Node> cfg = getCfg();\n  Node prevNode = edge.getSource().getValue();\n  Node nextNode = edge.getDestination().getValue();\n\n  return branch == Branch.FINALLY &&\n      cfg.getOutEdges(nextNode).stream()\n          .filter(e -> e.getDestination().getValue() == prevNode)\n          .allMatch(e -> e.getValue() == Branch.UNCOND);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex c929a363..a24e85be 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -744,69 +744,40 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n      * If we're providing a name with a duplicate definition, then make sure\n      * that definition becomes a declaration.\n      */\n-    void replace() {\n-      if (firstNode == null) {\n-        // Don't touch the base case ('goog').\n-        replacementNode = candidateDefinition;\n-        return;\n-      }\n+private boolean hasExceptionHandler(Node cfgNode) {\n+  List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+  for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+    if (edge.getValue() == Branch.ON_EX || \n+        isCatchEdge(edge) || \n+        isFinallyEdge(edge)) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n \n-      // Handle the case where there is a duplicate definition for an explicitly\n-      // provided symbol.\n-      if (candidateDefinition != null && explicitNode != null) {\n-        explicitNode.detachFromParent();\n-        compiler.reportCodeChange();\n+private boolean isCatchEdge(DiGraphEdge<Node, Branch> edge) {\n+  Branch branch = edge.getValue();\n+  ControlFlowGraph<Node> cfg = getCfg();\n+  Node prevNode = edge.getSource().getValue();\n+  Node nextNode = edge.getDestination().getValue();\n+  return branch == Branch.CATCH &&\n+      cfg.getInEdges(nextNode).stream()\n+          .filter(e -> e.getSource().getValue() == prevNode)\n+          .allMatch(e -> e.getValue() == Branch.ON_EX);\n+}\n \n-        // Does this need a VAR keyword?\n-        replacementNode = candidateDefinition;\n-        if (NodeUtil.isExpressionNode(candidateDefinition)) {\n-          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n-          Node assignNode = candidateDefinition.getFirstChild();\n-          Node nameNode = assignNode.getFirstChild();\n-          if (nameNode.getType() == Token.NAME) {\n-            // Need to convert this assign to a var declaration.\n-            Node valueNode = nameNode.getNext();\n-            assignNode.removeChild(nameNode);\n-            assignNode.removeChild(valueNode);\n-            nameNode.addChildToFront(valueNode);\n-            Node varNode = new Node(Token.VAR, nameNode);\n-            varNode.copyInformationFrom(candidateDefinition);\n-            candidateDefinition.getParent().replaceChild(\n-                candidateDefinition, varNode);\n-            nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n-            compiler.reportCodeChange();\n-            replacementNode = varNode;\n-          }\n-        }\n-      } else {\n-        // Handle the case where there's not a duplicate definition.\n-        replacementNode = createDeclarationNode();\n-        if (firstModule == minimumModule) {\n-          firstNode.getParent().addChildBefore(replacementNode, firstNode);\n-        } else {\n-          // In this case, the name was implicitly provided by two independent\n-          // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.indexOf('.');\n-          if (indexOfDot == -1) {\n-            // Any old place is fine.\n-            compiler.getNodeForCodeInsertion(minimumModule)\n-                .addChildToBack(replacementNode);\n-          } else {\n-            // Add it after the parent namespace.\n-            ProvidedName parentName =\n-                providedNames.get(namespace.substring(0, indexOfDot));\n-            Preconditions.checkNotNull(parentName);\n-            Preconditions.checkNotNull(parentName.replacementNode);\n-            parentName.replacementNode.getParent().addChildAfter(\n-                replacementNode, parentName.replacementNode);\n-          }\n-        }\n-        if (explicitNode != null) {\n-          explicitNode.detachFromParent();\n-        }\n-        compiler.reportCodeChange();\n-      }\n-    }\n+private boolean isFinallyEdge(DiGraphEdge<Node, Branch> edge) {\n+  Branch branch = edge.getValue();\n+  ControlFlowGraph<Node> cfg = getCfg();\n+  Node prevNode = edge.getSource().getValue();\n+  Node nextNode = edge.getDestination().getValue();\n+\n+  return branch == Branch.FINALLY &&\n+      cfg.getOutEdges(nextNode).stream()\n+          .filter(e -> e.getDestination().getValue() == prevNode)\n+          .allMatch(e -> e.getValue() == Branch.UNCOND);\n+}\n \n     /**\n      * Create the declaration node for this name, without inserting it",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}