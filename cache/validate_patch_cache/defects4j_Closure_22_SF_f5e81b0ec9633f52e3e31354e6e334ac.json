{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == null || n.isEmpty()) {\n    return;\n  }\n  if (n.isComma()) {\n    visit(t, n.getFirstChild(), n.getParent());\n    visit(t, n.getLastChild(), n.getParent());\n    return;\n  }\n  if (parent == null || parent.isOptionalChain()) {\n    return;\n  }\n  if (parent.isComma()) {\n    Node grandParent = parent.getParent();\n    if (grandParent !=null && grandParent.isCall() && grandParent.getFirstChild() == parent) {\n      Node maybeNameNode = parent.getFirstChild();\n      if (maybeNameNode == n && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n        return;\n      }\n    }\n    if (n == parent.getLastChild()) {\n      for (Node ancestor : parent.getAncestors()) {\n        if (ancestor.isComma()) {\n          continue;\n        }\n        if (ancestor.isBlock() || ancestor.isSwitch()) {\n          return;\n        }\n        if (ancestor.isExprResult() && parent.getChildCount() == 2) {\n          Node prevSibling = parent.getPrevious();\n          if (prevSibling != null && prevSibling.isString() && prevSibling.getString().endsWith(\"@nosideeffects\")) {\n            return;\n          }\n          if (prevSibling != null && NodeUtil.isExpressionNode(prevSibling) && NodeUtil.isLiteralValue(prevSibling, false)) {\n            return;\n          }\n        }\n        if (ancestor.isExprResult() || ancestor.isReturn() || ancestor.isThrow() || ancestor.isIf()) {\n          break;\n        }\n        if (ancestor.isFor()  && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n           n == parent.getFirstChild().getNext().getNext())) {\n          return;\n        }\n      }\n    }\n    if (parent.getFirstChild() == n && !n.isFunction()) {\n      return;\n    }\n  } else if (!parent.isBinary() && !parent.isUnaryExpr() && !parent.isAssign() && !parent.isExprResult()) {\n    return;\n  }\n  if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n    if (n.isString()) {\n      Node prevSibling = n.getPrevious();\n      if (prevSibling != null && prevSibling.isString()) {\n        Node prevPrevSibling = prevSibling.getPrevious();\n        if (prevPrevSibling != null && prevPrevSibling.isAdd()) {\n          return;\n        }\n        // Classic string concatenation:\n        // \"a\" + \"b\"; // Should not warn.\n        // \"\" + \"a\"; // Should not warn.\n        // \"a\" + \"\"; // Should not warn.\n        // \"\" + \"\"; // false positive.\n        if ((prevPrevSibling != null && prevPrevSibling.isString()) || prevPrevSibling == null) {\n          return;\n        }\n      }\n      Node nextSibling = n.getNext();\n      if (n.getParent().isAdd() && (nextSibling == null || !nextSibling.isAdd())) {\n        return;\n      }\n    }\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n    if (n.isExprResult()) {\n      return;\n    }\n    if (n.isCall()) {\n      return;\n    }\n    if (NodeUtil.isFunctionDeclaration(n)) {\n      return;\n    }\n    if (NodeUtil.isAssignmentOp(n.getType()) && NodeUtil.getRValueOfLValue(n.getFirstChild()).isCall()) {\n      return;\n    }\n    if (NodeUtil.isIncrementDecrementOp(n) && NodeUtil.isExpressionNode(n.getFirstChild())) {\n      return;\n    }\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR,\n            \"This code lacks side-effects. Is there a bug?\"));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..2dfa750b 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,78 +81,103 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n-\n-    if (parent == null) {\n-      return;\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == null || n.isEmpty()) {\n+    return;\n+  }\n+  if (n.isComma()) {\n+    visit(t, n.getFirstChild(), n.getParent());\n+    visit(t, n.getLastChild(), n.getParent());\n+    return;\n+  }\n+  if (parent == null || parent.isOptionalChain()) {\n+    return;\n+  }\n+  if (parent.isComma()) {\n+    Node grandParent = parent.getParent();\n+    if (grandParent !=null && grandParent.isCall() && grandParent.getFirstChild() == parent) {\n+      Node maybeNameNode = parent.getFirstChild();\n+      if (maybeNameNode == n && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n+        return;\n+      }\n     }\n-\n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (parent.getType() == Token.COMMA) {\n-      Node gramps = parent.getParent();\n-      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n-      return;\n+    if (n == parent.getLastChild()) {\n+      for (Node ancestor : parent.getAncestors()) {\n+        if (ancestor.isComma()) {\n+          continue;\n         }\n-    }\n-\n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n+        if (ancestor.isBlock() || ancestor.isSwitch()) {\n+          return;\n+        }\n+        if (ancestor.isExprResult() && parent.getChildCount() == 2) {\n+          Node prevSibling = parent.getPrevious();\n+          if (prevSibling != null && prevSibling.isString() && prevSibling.getString().endsWith(\"@nosideeffects\")) {\n             return;\n-          else\n-            break;\n+          }\n+          if (prevSibling != null && NodeUtil.isExpressionNode(prevSibling) && NodeUtil.isLiteralValue(prevSibling, false)) {\n+            return;\n+          }\n         }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n+        if (ancestor.isExprResult() || ancestor.isReturn() || ancestor.isThrow() || ancestor.isIf()) {\n+          break;\n+        }\n+        if (ancestor.isFor()  && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n            n == parent.getFirstChild().getNext().getNext())) {\n-      } else {\n-      return;\n+          return;\n+        }\n       }\n     }\n-\n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-        return;\n-      } else if (n.isExprResult()) {\n-        return;\n-      }\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n+    if (parent.getFirstChild() == n && !n.isFunction()) {\n+      return;\n+    }\n+  } else if (!parent.isBinary() && !parent.isUnaryExpr() && !parent.isAssign() && !parent.isExprResult()) {\n+    return;\n+  }\n+  if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n+    if (n.isString()) {\n+      Node prevSibling = n.getPrevious();\n+      if (prevSibling != null && prevSibling.isString()) {\n+        Node prevPrevSibling = prevSibling.getPrevious();\n+        if (prevPrevSibling != null && prevPrevSibling.isAdd()) {\n+          return;\n+        }\n+        // Classic string concatenation:\n+        // \"a\" + \"b\"; // Should not warn.\n+        // \"\" + \"a\"; // Should not warn.\n+        // \"a\" + \"\"; // Should not warn.\n+        // \"\" + \"\"; // false positive.\n+        if ((prevPrevSibling != null && prevPrevSibling.isString()) || prevPrevSibling == null) {\n+          return;\n+        }\n       }\n-\n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n+      Node nextSibling = n.getNext();\n+      if (n.getParent().isAdd() && (nextSibling == null || !nextSibling.isAdd())) {\n+        return;\n       }\n     }\n+    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+      return;\n+    }\n+    if (n.isExprResult()) {\n+      return;\n+    }\n+    if (n.isCall()) {\n+      return;\n+    }\n+    if (NodeUtil.isFunctionDeclaration(n)) {\n+      return;\n+    }\n+    if (NodeUtil.isAssignmentOp(n.getType()) && NodeUtil.getRValueOfLValue(n.getFirstChild()).isCall()) {\n+      return;\n+    }\n+    if (NodeUtil.isIncrementDecrementOp(n) && NodeUtil.isExpressionNode(n.getFirstChild())) {\n+      return;\n+    }\n+    t.getCompiler().report(\n+        t.makeError(n, level, USELESS_CODE_ERROR,\n+            \"This code lacks side-effects. Is there a bug?\"));\n   }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}