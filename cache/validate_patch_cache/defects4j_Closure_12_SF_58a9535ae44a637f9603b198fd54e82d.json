{
    "patch": "    FunctionNode functionNode = cfgNode.getFunctionNode();\n    List<Node> exceptionHandlers = cfgNode.findExceptionHandlers();\n    for (Node handler : exceptionHandlers) {\n      CFGExceptionNode exceptionNode = (CFGExceptionNode) handler;\n      if (exceptionNode.getHandledExceptionTypes().isEmpty() ||\n          exceptionNode.getHandledExceptionTypes().contains(functionNode.getExceptionType())) {\n        return true;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..1da732bf 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -156,9 +156,15 @@ class MaybeReachingVariableUse extends\n     return output;\n   }\n \n-  private boolean hasExceptionHandler(Node cfgNode) {\n-    return false;\n-  }\n+    FunctionNode functionNode = cfgNode.getFunctionNode();\n+    List<Node> exceptionHandlers = cfgNode.findExceptionHandlers();\n+    for (Node handler : exceptionHandlers) {\n+      CFGExceptionNode exceptionNode = (CFGExceptionNode) handler;\n+      if (exceptionNode.getHandledExceptionTypes().isEmpty() ||\n+          exceptionNode.getHandledExceptionTypes().contains(functionNode.getExceptionType())) {\n+        return true;\n+      }\n+    }\n \n   private void computeMayUse(\n       Node n, Node cfgNode, ReachingUses output, boolean conditional) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}