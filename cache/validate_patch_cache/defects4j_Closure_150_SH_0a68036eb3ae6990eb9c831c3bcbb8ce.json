{
    "patch": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n == scope.getRootNode())\n            return;\n\n        switch (n.getType()) {\n        case Token.FUNCTION:\n            if (NodeUtil.isFunctionExpression(parent) || NodeUtil.isFunctionDeclaration(parent)) {\n                defineDeclaredFunction(n, parent);\n            }\n            break;\n        case Token.NAME:\n            if (NodeUtil.isFunctionDeclaration(n) && !NodeUtil.isStatement(parent)) {\n                defineDeclaredFunction(n, parent);\n                break;\n            }\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n        case Token.LP:\n            if (n.getBooleanProp(Node.IS_FUNCTION_CALLEE) && NodeUtil.isExpressionResultUsed(n.getParent())) {\n                handleFunctionInputs(n); // Use n as the function node instead of parent\n            }\n            break;\n        default:\n            break;\n        }\n\n        if (NodeUtil.isTopLevel(parent)) {\n            if ((n.isModuleBody() && !n.hasChildren()) ||\n                    (n.isScript() && !n.hasChildren()) ||\n                    NodeUtil.isControlStructure(parent)) {\n                return;\n            } else if (NodeUtil.isExecutedByClosureCall(n, parent)) {\n                return;\n            }\n\n            if (n.getBooleanProp(Node.IS_NAMESPACE)) {\n                defineNamespace(n, parent);\n            } else if (n.getBooleanProp(Node.IS_GETTER_DEF)) {\n                defineGetterDefinition(n, parent);\n            } else if (n.getBooleanProp(Node.IS_SETTER_DEF)) {\n                defineSetterDefinition(n, parent);\n            } else if (n.getBooleanProp(Node.IS_CLASS)) {\n                defineClass(n, parent);\n            } else if (NodeUtil.isStatement(n) && !NodeUtil.isFunctionDeclaration(n)) {\n                t.report(n, GLOBAL_THIS);\n            }\n        }\n\n        if (n.getBooleanProp(Node.MODULE_ALIAS)) {\n            defineAlias(n, parent);\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..64a40a71 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,63 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n == scope.getRootNode())\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+\n+        switch (n.getType()) {\n+        case Token.FUNCTION:\n+            if (NodeUtil.isFunctionExpression(parent) || NodeUtil.isFunctionDeclaration(parent)) {\n+                defineDeclaredFunction(n, parent);\n+            }\n+            break;\n+        case Token.NAME:\n+            if (NodeUtil.isFunctionDeclaration(n) && !NodeUtil.isStatement(parent)) {\n+                defineDeclaredFunction(n, parent);\n+                break;\n+            }\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            defineCatch(n, parent);\n+            break;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineVar(n, parent);\n+            break;\n+        case Token.LP:\n+            if (n.getBooleanProp(Node.IS_FUNCTION_CALLEE) && NodeUtil.isExpressionResultUsed(n.getParent())) {\n+                handleFunctionInputs(n); // Use n as the function node instead of parent\n+            }\n+            break;\n+        default:\n+            break;\n+        }\n+\n+        if (NodeUtil.isTopLevel(parent)) {\n+            if ((n.isModuleBody() && !n.hasChildren()) ||\n+                    (n.isScript() && !n.hasChildren()) ||\n+                    NodeUtil.isControlStructure(parent)) {\n+                return;\n+            } else if (NodeUtil.isExecutedByClosureCall(n, parent)) {\n+                return;\n+            }\n+\n+            if (n.getBooleanProp(Node.IS_NAMESPACE)) {\n+                defineNamespace(n, parent);\n+            } else if (n.getBooleanProp(Node.IS_GETTER_DEF)) {\n+                defineGetterDefinition(n, parent);\n+            } else if (n.getBooleanProp(Node.IS_SETTER_DEF)) {\n+                defineSetterDefinition(n, parent);\n+            } else if (n.getBooleanProp(Node.IS_CLASS)) {\n+                defineClass(n, parent);\n+            } else if (NodeUtil.isStatement(n) && !NodeUtil.isFunctionDeclaration(n)) {\n+                t.report(n, GLOBAL_THIS);\n+            }\n+        }\n+\n+        if (n.getBooleanProp(Node.MODULE_ALIAS)) {\n+            defineAlias(n, parent);\n+        }\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}