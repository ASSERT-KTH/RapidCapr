{
    "patch": "public int getprop(String key) {\n    try {\n        String command = String.format(\"/system/bin/getprop %s\", key);\n        Process process = Runtime.getRuntime().exec(command);\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        String line = reader.readLine();\n\n        if (line != null) {\n            return Integer.parseInt(line);\n        }\n    } catch (IOException | NumberFormatException e) {\n        e.printStackTrace();\n    }\n    \n    return 0;\n}\n\npublic void testGetprop4() {\n    int value = getprop(\"ro.build.version.release\");\n    String[] warnings = getWarnings(value);\n\n    assertTrue(\"expected a warning\", warnings.length > 0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..302b4836 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,30 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public int getprop(String key) {\n+    try {\n+        String command = String.format(\"/system/bin/getprop %s\", key);\n+        Process process = Runtime.getRuntime().exec(command);\n+\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+        String line = reader.readLine();\n+\n+        if (line != null) {\n+            return Integer.parseInt(line);\n+        }\n+    } catch (IOException | NumberFormatException e) {\n+        e.printStackTrace();\n+    }\n+    \n+    return 0;\n+}\n+\n+public void testGetprop4() {\n+    int value = getprop(\"ro.build.version.release\");\n+    String[] warnings = getWarnings(value);\n+\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: multi-catch statement is not supported in -source 1.6",
    "test_result": "ERROR"
}