{
    "patch": "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    final double root2pi = FastMath.sqrt(2 * FastMath.PI);\n    final double invRoot2pi = 1 / root2pi;\n    final double rootDet = FastMath.sqrt(FastMath.abs(covarianceMatrixDeterminant));\n\n    double exponent = 0;\n    for (int i = 0; i < dim; i++) {\n        final double diff = vals[i] - means[i];\n        for (int j = 0; j < dim; j++) {\n            exponent += diff * covarianceMatrixInverse[i][j] * (vals[j] - means[j]);\n        }\n    }\n    exponent = FastMath.exp(-0.5 * exponent);\n\n    return invRoot2pi / rootDet * exponent;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..b2e12da58 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -174,16 +174,26 @@ public class MultivariateNormalDistribution\n     }\n \n     /** {@inheritDoc} */\n-    public double density(final double[] vals) throws DimensionMismatchException {\n-        final int dim = getDimension();\n-        if (vals.length != dim) {\n-            throw new DimensionMismatchException(vals.length, dim);\n+public double density(final double[] vals) throws DimensionMismatchException {\n+    final int dim = getDimension();\n+    if (vals.length != dim) {\n+        throw new DimensionMismatchException(vals.length, dim);\n+    }\n+    final double root2pi = FastMath.sqrt(2 * FastMath.PI);\n+    final double invRoot2pi = 1 / root2pi;\n+    final double rootDet = FastMath.sqrt(FastMath.abs(covarianceMatrixDeterminant));\n+\n+    double exponent = 0;\n+    for (int i = 0; i < dim; i++) {\n+        final double diff = vals[i] - means[i];\n+        for (int j = 0; j < dim; j++) {\n+            exponent += diff * covarianceMatrixInverse[i][j] * (vals[j] - means[j]);\n         }\n-\n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n     }\n+    exponent = FastMath.exp(-0.5 * exponent);\n+\n+    return invRoot2pi / rootDet * exponent;\n+}\n \n     /**\n      * Gets the square root of each element on the diagonal of the covariance",
    "result_reason": "error: array required, but RealMatrix found",
    "test_result": "ERROR"
}