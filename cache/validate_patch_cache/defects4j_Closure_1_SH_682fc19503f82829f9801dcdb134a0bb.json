{
    "patch": "Set<String> referenced = scope.getReferences();\nNode function = scope.getRootNode();\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n}\n\nNode args = function.getSecondChild();\nint numArgs = args.getChildCount();\nif (numArgs == 0) {\n    return;\n}\nfor (int i = numArgs - 1; i >= 0; i--) {\n    Node arg = args.getChildAtIndex(i);\n    String argName = arg.getString();\n    if (!referenced.contains(argName)) {\n        args.removeChildAt(i);\n        compiler.reportCodeChange();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..074589a2 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,27 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Set<String> referenced = scope.getReferences();\n+Node function = scope.getRootNode();\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+}\n+\n+Node args = function.getSecondChild();\n+int numArgs = args.getChildCount();\n+if (numArgs == 0) {\n+    return;\n+}\n+for (int i = numArgs - 1; i >= 0; i--) {\n+    Node arg = args.getChildAtIndex(i);\n+    String argName = arg.getString();\n+    if (!referenced.contains(argName)) {\n+        args.removeChildAt(i);\n+        compiler.reportCodeChange();\n+    }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}