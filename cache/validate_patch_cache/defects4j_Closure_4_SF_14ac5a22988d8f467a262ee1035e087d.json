{
    "patch": "JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosingScope) {\n  boolean resolved = false;\n\n  if (resolveViaRegistry(errorReporter, enclosingScope)) {\n    resolved = true;\n  } else if (!isResolved()) {\n    resolveViaProperties(errorReporter, enclosingScope);\n    resolved = isResolved();\n  }\n\n  if (resolved) {\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(errorReporter);\n    }\n    super.resolveInternal(errorReporter, enclosingScope);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  } else {\n    super.resolveInternal(errorReporter, enclosingScope);\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n}\n\nprivate boolean detectImplicitPrototypeCycle() {\n  Set<String> visited = new HashSet<>();\n  return detectImplicitPrototypeCycle(visited);\n}\n\nprivate boolean detectImplicitPrototypeCycle(Set<String> visited) {\n  if (!visited.add(getTypeName())) {\n    return true;\n  }\n  for (String implicitInterface : getImplicitInterfaces()) {\n    if (registry.getType(implicitInterface) != null\n        && registry.getType(implicitInterface).detectImplicitPrototypeCycle(visited)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nprivate void handleTypeCycle(ErrorReporter errorReporter, Set<String> visited, String name) {\n  if (!visited.add(name)) {\n    errorReporter.warning(TypeValidator.IMPLICIT_INTERFACE_CYCLE, getNameProp());\n  }\n  for (String implicitInterface : getImplicitInterfaces()) {\n    if (registry.getType(implicitInterface) != null) {\n      registry.getType(implicitInterface).handleTypeCycle(errorReporter, visited, implicitInterface);\n    }\n  }\n}\n\nprivate void handleTypeCycle(ErrorReporter errorReporter) {\n  handleTypeCycle(errorReporter, new HashSet<>(), getTypeName());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..5483b25e 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,61 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosingScope) {\n+  boolean resolved = false;\n+\n+  if (resolveViaRegistry(errorReporter, enclosingScope)) {\n+    resolved = true;\n+  } else if (!isResolved()) {\n+    resolveViaProperties(errorReporter, enclosingScope);\n+    resolved = isResolved();\n+  }\n+\n+  if (resolved) {\n     if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+      handleTypeCycle(errorReporter);\n     }\n+    super.resolveInternal(errorReporter, enclosingScope);\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  } else {\n+    super.resolveInternal(errorReporter, enclosingScope);\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n+}\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+private boolean detectImplicitPrototypeCycle() {\n+  Set<String> visited = new HashSet<>();\n+  return detectImplicitPrototypeCycle(visited);\n+}\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+private boolean detectImplicitPrototypeCycle(Set<String> visited) {\n+  if (!visited.add(getTypeName())) {\n+    return true;\n+  }\n+  for (String implicitInterface : getImplicitInterfaces()) {\n+    if (registry.getType(implicitInterface) != null\n+        && registry.getType(implicitInterface).detectImplicitPrototypeCycle(visited)) {\n+      return true;\n     }\n+  }\n+  return false;\n+}\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+private void handleTypeCycle(ErrorReporter errorReporter, Set<String> visited, String name) {\n+  if (!visited.add(name)) {\n+    errorReporter.warning(TypeValidator.IMPLICIT_INTERFACE_CYCLE, getNameProp());\n+  }\n+  for (String implicitInterface : getImplicitInterfaces()) {\n+    if (registry.getType(implicitInterface) != null) {\n+      registry.getType(implicitInterface).handleTypeCycle(errorReporter, visited, implicitInterface);\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n+}\n+\n+private void handleTypeCycle(ErrorReporter errorReporter) {\n+  handleTypeCycle(errorReporter, new HashSet<>(), getTypeName());\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}