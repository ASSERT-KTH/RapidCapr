{
    "patch": "          if (NodeUtil.isAssignmentOp(thenOp)) {\n            Node lhs = thenOp.getFirstChild();\n            if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n                NodeUtil.mayBeString(lhs)) {\n              // a.d=\"string\"; else a.d=\"other string\" -> a.d=cond?\"string\":\"other strings\"\n              String thenString = NodeUtil.getStringValue(thenOp.getLastChild());\n              String elseString = NodeUtil.getStringValue(elseOp.getLastChild());\n              if (thenString != null && elseString != null) {\n                n.removeChild(cond);\n                Node stringNode = IR.string(thenString).srcref(thenOp);\n                Node stringNode2 = IR.string(elseString).srcref(elseOp);\n                Node hookNode = IR.hook(cond, stringNode, stringNode2).srcref(n);\n                Node assignName = thenOp.removeFirstChild();\n                Node assign = new Node(thenOp.getType(), assignName, hookNode).srcref(thenOp);\n                Node expr = NodeUtil.newExpr(assign);\n                parent.replaceChild(n, expr);\n                reportCodeChange();\n                return expr;\n              }\n            } else if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n                !NodeUtil.mayHaveSideEffects(lhs)) {\n              // a.b=1; else a.b=2 -> a.b=cond?1:2\n              n.removeChild(cond);\n              Node assignName = thenOp.removeFirstChild();\n              Node thenExpr = thenOp.removeFirstChild();\n              Node elseExpr = elseOp.getLastChild();\n              elseOp.removeChild(elseExpr);\n\n              Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n              Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                                .srcref(thenOp);\n              Node expr = NodeUtil.newExpr(assign);\n              parent.replaceChild(n, expr);\n              reportCodeChange();\n\n              return expr;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..0d3a916a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,43 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+          if (NodeUtil.isAssignmentOp(thenOp)) {\n+            Node lhs = thenOp.getFirstChild();\n+            if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n+                NodeUtil.mayBeString(lhs)) {\n+              // a.d=\"string\"; else a.d=\"other string\" -> a.d=cond?\"string\":\"other strings\"\n+              String thenString = NodeUtil.getStringValue(thenOp.getLastChild());\n+              String elseString = NodeUtil.getStringValue(elseOp.getLastChild());\n+              if (thenString != null && elseString != null) {\n+                n.removeChild(cond);\n+                Node stringNode = IR.string(thenString).srcref(thenOp);\n+                Node stringNode2 = IR.string(elseString).srcref(elseOp);\n+                Node hookNode = IR.hook(cond, stringNode, stringNode2).srcref(n);\n+                Node assignName = thenOp.removeFirstChild();\n+                Node assign = new Node(thenOp.getType(), assignName, hookNode).srcref(thenOp);\n+                Node expr = NodeUtil.newExpr(assign);\n+                parent.replaceChild(n, expr);\n+                reportCodeChange();\n+                return expr;\n+              }\n+            } else if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n+                !NodeUtil.mayHaveSideEffects(lhs)) {\n+              // a.b=1; else a.b=2 -> a.b=cond?1:2\n+              n.removeChild(cond);\n+              Node assignName = thenOp.removeFirstChild();\n+              Node thenExpr = thenOp.removeFirstChild();\n+              Node elseExpr = elseOp.getLastChild();\n+              elseOp.removeChild(elseExpr);\n+\n+              Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+              Node assign = new Node(thenOp.getType(), assignName, hookNode)\n+                                .srcref(thenOp);\n+              Node expr = NodeUtil.newExpr(assign);\n+              parent.replaceChild(n, expr);\n+              reportCodeChange();\n+\n+              return expr;\n+            }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}