{
    "patch": "                    if (FastMath.abs(fx) >= FastMath.abs(f1)) {\n                        if (x == x1) {\n                            // We are not making progress, update x0 instead.\n                            x0 = x;\n                            f0 = fx;\n                        } else {\n                            // Normal case, update x0 and f0.\n                            x0 = x1;\n                            f0 = f1;\n                        }\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..b35b9123a 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,17 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                    if (FastMath.abs(fx) >= FastMath.abs(f1)) {\n+                        if (x == x1) {\n+                            // We are not making progress, update x0 instead.\n+                            x0 = x;\n+                            f0 = fx;\n+                        } else {\n+                            // Normal case, update x0 and f0.\n+                            x0 = x1;\n+                            f0 = f1;\n+                        }\n+                    }\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "java.lang.Exception: Unexpected exception, expected<org.apache.commons.math.exception.ConvergenceException> but was<java.lang.AssertionError>",
    "test_result": "FAIL"
}