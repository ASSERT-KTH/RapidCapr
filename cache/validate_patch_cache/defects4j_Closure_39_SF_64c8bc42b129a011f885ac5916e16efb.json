{
    "patch": "public boolean canBeCalled() {\n  return isFunctionType() || isRegexpType() || isRecordType();\n}\n\n@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  } else if (prettyPrint) {\n    // Don't pretty print recursively.\n    prettyPrint = false;\n\n    StringBuilder sb = new StringBuilder();\n\n    // If this object type is a record, add its properties to the sb.\n    if (isRecordType()) {\n      sb.append(toString());\n    } \n    // Otherwise, continue with object properties.\n    else {\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n          current != null && !current.isNativeObjectType() &&\n                  propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n          current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n\n        JSType type = getPropertyType(property);\n\n        // If the property is a FunctionType or RecordType, add \"[Function]\" or \"[Record]\" string respectively.\n        if (type.isFunctionType()) {\n          sb.append(\"[Function]\");\n        } else if (type.isRecordType()) {\n          sb.append(\"[Record]\");\n        } \n        // If the property is an ObjectType and not a FunctionType or RecordType, recursively call toStringHelper.\n        else if (type instanceof ObjectType && !type.isFunctionType()) {\n          sb.append(((ObjectType) type).toStringHelper(forAnnotations));\n        }\n        // Otherwise, append the type's string version.\n        else {\n          sb.append(type.toString());\n        }\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n      sb.append(\"}\");\n    }\n\n    // Reset prettyPrint flag.\n    prettyPrint = true;\n    return sb.toString();\n  } else {\n    return \"{...}\";\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..3f453809 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,28 +345,35 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n-\n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n-      return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n+public boolean canBeCalled() {\n+  return isFunctionType() || isRegexpType() || isRecordType();\n+}\n \n+@Override\n+String toStringHelper(boolean forAnnotations) {\n+  if (hasReferenceName()) {\n+    return getReferenceName();\n+  } else if (prettyPrint) {\n+    // Don't pretty print recursively.\n+    prettyPrint = false;\n+\n+    StringBuilder sb = new StringBuilder();\n+\n+    // If this object type is a record, add its properties to the sb.\n+    if (isRecordType()) {\n+      sb.append(toString());\n+    } \n+    // Otherwise, continue with object properties.\n+    else {\n       // Use a tree set so that the properties are sorted.\n       Set<String> propertyNames = Sets.newTreeSet();\n       for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n+          current != null && !current.isNativeObjectType() &&\n+                  propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+          current = current.getImplicitPrototype()) {\n         propertyNames.addAll(current.getOwnPropertyNames());\n       }\n \n-      StringBuilder sb = new StringBuilder();\n       sb.append(\"{\");\n \n       int i = 0;\n@@ -377,7 +384,23 @@ class PrototypeObjectType extends ObjectType {\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+\n+        JSType type = getPropertyType(property);\n+\n+        // If the property is a FunctionType or RecordType, add \"[Function]\" or \"[Record]\" string respectively.\n+        if (type.isFunctionType()) {\n+          sb.append(\"[Function]\");\n+        } else if (type.isRecordType()) {\n+          sb.append(\"[Record]\");\n+        } \n+        // If the property is an ObjectType and not a FunctionType or RecordType, recursively call toStringHelper.\n+        else if (type instanceof ObjectType && !type.isFunctionType()) {\n+          sb.append(((ObjectType) type).toStringHelper(forAnnotations));\n+        }\n+        // Otherwise, append the type's string version.\n+        else {\n+          sb.append(type.toString());\n+        }\n \n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n@@ -385,15 +408,16 @@ class PrototypeObjectType extends ObjectType {\n           break;\n         }\n       }\n-\n       sb.append(\"}\");\n-\n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n     }\n+\n+    // Reset prettyPrint flag.\n+    prettyPrint = true;\n+    return sb.toString();\n+  } else {\n+    return \"{...}\";\n   }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "junit.framework.ComparisonFailure: expected:</**",
    "test_result": "FAIL"
}