{
    "patch": "    // Add checks to avoid declarations not in outermost scope\n    if (n.isFunction() &&\n        (n.getParent() == null || !NodeUtil.isFunctionDeclaration(n.getParent()))) {\n      // Add warning if inner func redeclares a var in the outer scope\n      Var var = varInfoMap.get(n.getFirstChild().getString());\n      if (var != null &&\n          var.getScope().isLocal() &&\n          !n.getQualifiedName().equals(var.getFullName())) {\n        warnings.add(JSError.make(n, REDUNDANT_LOCAL_DECLARATION, var.getFullName()));\n      }\n    } else if (n.getJSType() != null && parent.isAssign()) {\n      if (n.getJSType().isFunctionType()) {\n        // No warnings needed for function type properties  \n        return;\n      } else {\n        warnings.add(JSError.make(n, AMBIGUOUS_FUNCTION_DECLARATION, n.getQualifiedName()));\n      }  \n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}