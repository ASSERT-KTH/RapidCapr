{
    "patch": "import org.apache.commons.math3.util.FastMath;\n\npublic class Gamma {\n\n    private static final double[] COEFFICIENTS = {\n            76.18009172947146,\n            -86.50532032941677,\n            24.01409824083091,\n            -1.231739572450155,\n            0.1208650973866179e-2,\n            -0.5395239384953e-5\n    };\n\n    public static double gamma(double x) {\n        if (x < 0.5) {\n            return FastMath.PI / (FastMath.sin(FastMath.PI * x) * gamma(1 - x));\n        }\n        x -= 1;\n\n        double sum = 0.9999999999998099;\n        for (int i = 0; i < 6; ++i) {\n            sum += COEFFICIENTS[i] / (x + i + 1);\n        }\n\n        return FastMath.sqrt(2 * FastMath.PI) * FastMath.pow(x + 5.5, x + 0.5) * FastMath.exp(-(x + 5.5)) * sum;\n    }\n\n    public static double regularizedGamma(double a, double x) {\n        if (x < 0 || a <= 0) {\n            throw new IllegalArgumentException();\n        }\n\n        double sum = 0;\n        double term = 1.0 / a;\n        while (x >= a + 1) {\n            sum += term;\n            term *= (a / ++x);\n        }\n\n        double series = sum + term * Gamma.gammaSeries(a, x);\n\n        return FastMath.exp(-x + a * FastMath.log(x) - FastMath.log(a) - Gamma.logGamma(a)) * series;\n    }\n\n    private static double gammaSeries(double a, double x) {\n        double sum = 1 / a;\n        double ap = a;\n        double del = sum;\n        for (int i = 0; i < 1000; ++i) {\n            ap += 1;\n            del *= x / ap;\n            sum += del;\n            if (FastMath.abs(del) < FastMath.abs(sum) * 10e-15) {\n                return sum * FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a));\n            }\n        }\n\n        throw new ArithmeticException(\"Gamma convergence failed\");\n    }\n\n    private static double logGamma(double x) {\n        double tmp = (x - 0.5) * FastMath.log(x + 4.5) - (x + 4.5);\n        double ser = 1.0 + 76.18009172947146 / (x + 0) - 86.50532032941677 / (x + 1) +\n                24.01409824083091 / (x + 2) - 1.231739572450155 / (x + 3) +\n                0.1208650973866179e-2 / (x + 4) - 0.5395239384953e-5 / (x + 5);\n        return tmp + FastMath.log(ser * FastMath.sqrt(2 * FastMath.PI));\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..17a05f62b 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,74 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class Gamma {\n+\n+    private static final double[] COEFFICIENTS = {\n+            76.18009172947146,\n+            -86.50532032941677,\n+            24.01409824083091,\n+            -1.231739572450155,\n+            0.1208650973866179e-2,\n+            -0.5395239384953e-5\n+    };\n+\n+    public static double gamma(double x) {\n+        if (x < 0.5) {\n+            return FastMath.PI / (FastMath.sin(FastMath.PI * x) * gamma(1 - x));\n+        }\n+        x -= 1;\n+\n+        double sum = 0.9999999999998099;\n+        for (int i = 0; i < 6; ++i) {\n+            sum += COEFFICIENTS[i] / (x + i + 1);\n+        }\n+\n+        return FastMath.sqrt(2 * FastMath.PI) * FastMath.pow(x + 5.5, x + 0.5) * FastMath.exp(-(x + 5.5)) * sum;\n+    }\n+\n+    public static double regularizedGamma(double a, double x) {\n+        if (x < 0 || a <= 0) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        double sum = 0;\n+        double term = 1.0 / a;\n+        while (x >= a + 1) {\n+            sum += term;\n+            term *= (a / ++x);\n+        }\n+\n+        double series = sum + term * Gamma.gammaSeries(a, x);\n+\n+        return FastMath.exp(-x + a * FastMath.log(x) - FastMath.log(a) - Gamma.logGamma(a)) * series;\n+    }\n+\n+    private static double gammaSeries(double a, double x) {\n+        double sum = 1 / a;\n+        double ap = a;\n+        double del = sum;\n+        for (int i = 0; i < 1000; ++i) {\n+            ap += 1;\n+            del *= x / ap;\n+            sum += del;\n+            if (FastMath.abs(del) < FastMath.abs(sum) * 10e-15) {\n+                return sum * FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a));\n+            }\n+        }\n+\n+        throw new ArithmeticException(\"Gamma convergence failed\");\n+    }\n+\n+    private static double logGamma(double x) {\n+        double tmp = (x - 0.5) * FastMath.log(x + 4.5) - (x + 4.5);\n+        double ser = 1.0 + 76.18009172947146 / (x + 0) - 86.50532032941677 / (x + 1) +\n+                24.01409824083091 / (x + 2) - 1.231739572450155 / (x + 3) +\n+                0.1208650973866179e-2 / (x + 4) - 0.5395239384953e-5 / (x + 5);\n+        return tmp + FastMath.log(ser * FastMath.sqrt(2 * FastMath.PI));\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}