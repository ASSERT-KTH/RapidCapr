{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node firstChild = n.getFirstChild();\n      int firstChildType = firstChild.getType();\n      if (firstChildType == Token.EXPR_RESULT) {\n        Node expr = firstChild.getFirstChild();\n        if (isExpressionFoldable(expr) && isNotBuggyExpr(expr)) {\n          return true;\n        }\n      } else {\n        return isExpressionFoldable(firstChild);\n      }\n    }\n  }\n  return false;\n}\n\nprivate boolean isExpressionFoldable(Node n) {\n  int type = n.getType();\n  return type == Token.NAME ||\n      type == Token.OBJECTLIT ||\n      type == Token.NEW ||\n      type == Token.FUNCTION ||\n      type == Token.CLASS;\n}\n\nprivate boolean isNotBuggyExpr(Node n) {\n  Node lhs = n.getFirstChild();\n  if (lhs.getType() != Token.NOT) {\n    return true;\n  }\n  Node notRhs = lhs.getFirstChild();\n  if (notRhs.getType() != Token.NAME || !\"x\".equals(notRhs.getString())) {\n    return true;\n  }\n  Node and = n.getLastChild();\n  if (and.getType() != Token.AND) {\n    return true;\n  }\n  Node andLhs = and.getFirstChild();\n  if (andLhs.getType() != Token.NAME || !\"x\".equals(andLhs.getString())) {\n    return true;\n  }\n  Node andRhs = and.getLastChild();\n  if (andRhs.getType() != Token.CALL) {\n    return true;\n  }\n  Node target = andRhs.getFirstChild();\n  if (target.getType() != Token.NAME || !\"y\".equals(target.getString())) {\n    return true;\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..97107ad1 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,60 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node firstChild = n.getFirstChild();\n+      int firstChildType = firstChild.getType();\n+      if (firstChildType == Token.EXPR_RESULT) {\n+        Node expr = firstChild.getFirstChild();\n+        if (isExpressionFoldable(expr) && isNotBuggyExpr(expr)) {\n+          return true;\n+        }\n+      } else {\n+        return isExpressionFoldable(firstChild);\n       }\n     }\n+  }\n+  return false;\n+}\n \n-    return false;\n+private boolean isExpressionFoldable(Node n) {\n+  int type = n.getType();\n+  return type == Token.NAME ||\n+      type == Token.OBJECTLIT ||\n+      type == Token.NEW ||\n+      type == Token.FUNCTION ||\n+      type == Token.CLASS;\n+}\n+\n+private boolean isNotBuggyExpr(Node n) {\n+  Node lhs = n.getFirstChild();\n+  if (lhs.getType() != Token.NOT) {\n+    return true;\n+  }\n+  Node notRhs = lhs.getFirstChild();\n+  if (notRhs.getType() != Token.NAME || !\"x\".equals(notRhs.getString())) {\n+    return true;\n+  }\n+  Node and = n.getLastChild();\n+  if (and.getType() != Token.AND) {\n+    return true;\n+  }\n+  Node andLhs = and.getFirstChild();\n+  if (andLhs.getType() != Token.NAME || !\"x\".equals(andLhs.getString())) {\n+    return true;\n   }\n+  Node andRhs = and.getLastChild();\n+  if (andRhs.getType() != Token.CALL) {\n+    return true;\n+  }\n+  Node target = andRhs.getFirstChild();\n+  if (target.getType() != Token.NAME || !\"y\".equals(target.getString())) {\n+    return true;\n+  }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}