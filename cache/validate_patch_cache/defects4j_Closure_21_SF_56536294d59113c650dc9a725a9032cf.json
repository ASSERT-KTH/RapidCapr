{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n  // I've been unable to think of any cases where this indicates a bug,\n  // and apparently some people like keeping these semicolons around,\n  // so we'll allow it.\n  if (n.isEmpty() || n.isComma()) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  // Do not try to remove a block or an expr result. We already handle\n  // these cases when we visit the child, and the peephole passes will\n  // fix up the tree in more clever ways when these are removed.\n  if (n.isExprResult()) {\n    return;\n  }\n\n  // This no-op statement was there so that JSDoc information could\n  // be attached to the name. This check should not complain about it.\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n  if (parent.getType() == Token.COMMA) {\n    if (isResultUsed) {\n      return;\n    }\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA) {\n          continue;\n        }\n        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n          return;\n        } else {\n          break;\n        }\n      }\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n    if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4&& (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n      return;\n    }\n  }\n\n  if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n      if (parent.getType() == Token.FOR) {\n        if (n.getType() == Token.AND) {\n          msg =\n              \"The results of the left operand of an '&&' operator in a for loop termination condition is usually unused. Consider using the right operand instead.\";\n        } else if (n.getType() == Token.OR) {\n          msg =\n              \"The results of the left operand of an '||' operator in a for loop termination condition is usually unused.\";\n        } else {\n          msg =\n              \"The result of the '\"\n                  + Token.name(n.getType()).toLowerCase()\n                  + \"' operator is usually unused. Consider using '\"\n                  + n.getFirstChild().getQualifiedName()\n                  + \"' instead in the termination condition.\";\n        }\n      }\n    }\n\n    ProblemType problemType = ProblemType.USELESS_CODE_ERROR;\n\n    if (NodeUtil.isFunctionExpression(n.getParent())\n        || (n.isFunction() && n.getFirstChild() == null)) {\n      // This is a useless function if it is not called.\n      problemType = ProblemType.USELESS_CODE_FUNCTION_DECL;\n    }\n\n    CompilerInput input = t.getInput();\n\n    if (NodeUtil.isStatement(n)) {\n      if (parent.getType() == Token.IF &&\n          !isResultUsed &&\n          n == parent.getFirstChild()) {\n        // Empty if statement.\n        t.getCompiler().report(\n            t.makeError(n, problemType, msg));\n      } else if ((parent.getType() == Token.EXPR_RESULT\n                  || parent.getType() == Token.BLOCK)\n                 && !n.isThrow()) {\n        if (NodeUtil.isEmptyStatement(n)) {\n          msg = \"Empty statement.\";\n          problemType = ProblemType.PARSE_ERROR;\n        }\n        t.getCompiler().report(\n            t.makeError(n, problemType, msg));\n      } else {\n        t.getCompiler().report(\n            t.makeError(n, problemType, msg));\n      }\n    }\n\n    List<SourceFile> inputs = new ArrayList<>();\n    inputs.add(input.getSourceFile());\n    int lineNo = t.getInput().getLineNo(n.getLineno());\n    int charOffset = t.getInput().getAbsoluteOffset(n.getCharno(), n.getLineno());\n\n    for (Node problemNode : problemNodes) {\n      inputs.add(t.getInput().getSourceFileByName(problemNode.getSourceFileName()));\n    }\n    Collections.sort(inputs, SourceFile.ORDER_BY_NAME);\n\n    JSError warning =\n        new JSError(\n            inputs.toArray(new SourceFile[inputs.size()]),\n            problemType,\n            lineNo,\n            charOffset,\n            msg);\n    t.getCompiler().report(warning);\n\n    problemNodes.add(n);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..5ff54057 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,71 +81,135 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n+  // I've been unable to think of any cases where this indicates a bug,\n+  // and apparently some people like keeping these semicolons around,\n+  // so we'll allow it.\n+  if (n.isEmpty() || n.isComma()) {\n+    return;\n+  }\n+\n+  if (parent == null) {\n+    return;\n+  }\n+\n+  // Do not try to remove a block or an expr result. We already handle\n+  // these cases when we visit the child, and the peephole passes will\n+  // fix up the tree in more clever ways when these are removed.\n+  if (n.isExprResult()) {\n+    return;\n+  }\n+\n+  // This no-op statement was there so that JSDoc information could\n+  // be attached to the name. This check should not complain about it.\n+  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+    return;\n+  }\n+\n+  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n+  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n+  if (parent.getType() == Token.COMMA) {\n+    if (isResultUsed) {\n       return;\n     }\n-\n-    if (parent == null) {\n+    if (n == parent.getLastChild()) {\n+      for (Node an : parent.getAncestors()) {\n+        int ancestorType = an.getType();\n+        if (ancestorType == Token.COMMA) {\n+          continue;\n+        }\n+        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n+          return;\n+        } else {\n+          break;\n+        }\n+      }\n+    }\n+  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n+    if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4&& (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n       return;\n     }\n+  }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n-      return;\n+  if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n+    String msg = \"This code lacks side-effects. Is there a bug?\";\n+    if (n.isString()) {\n+      msg = \"Is there a missing '+' on the previous line?\";\n+    } else if (isSimpleOp) {\n+      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n+      if (parent.getType() == Token.FOR) {\n+        if (n.getType() == Token.AND) {\n+          msg =\n+              \"The results of the left operand of an '&&' operator in a for loop termination condition is usually unused. Consider using the right operand instead.\";\n+        } else if (n.getType() == Token.OR) {\n+          msg =\n+              \"The results of the left operand of an '||' operator in a for loop termination condition is usually unused.\";\n+        } else {\n+          msg =\n+              \"The result of the '\"\n+                  + Token.name(n.getType()).toLowerCase()\n+                  + \"' operator is usually unused. Consider using '\"\n+                  + n.getFirstChild().getQualifiedName()\n+                  + \"' instead in the termination condition.\";\n+        }\n+      }\n     }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-      return;\n+    ProblemType problemType = ProblemType.USELESS_CODE_ERROR;\n+\n+    if (NodeUtil.isFunctionExpression(n.getParent())\n+        || (n.isFunction() && n.getFirstChild() == null)) {\n+      // This is a useless function if it is not called.\n+      problemType = ProblemType.USELESS_CODE_FUNCTION_DECL;\n     }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n-        return;\n-      }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n+    CompilerInput input = t.getInput();\n+\n+    if (NodeUtil.isStatement(n)) {\n+      if (parent.getType() == Token.IF &&\n+          !isResultUsed &&\n+          n == parent.getFirstChild()) {\n+        // Empty if statement.\n+        t.getCompiler().report(\n+            t.makeError(n, problemType, msg));\n+      } else if ((parent.getType() == Token.EXPR_RESULT\n+                  || parent.getType() == Token.BLOCK)\n+                 && !n.isThrow()) {\n+        if (NodeUtil.isEmptyStatement(n)) {\n+          msg = \"Empty statement.\";\n+          problemType = ProblemType.PARSE_ERROR;\n         }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n-        return;\n+        t.getCompiler().report(\n+            t.makeError(n, problemType, msg));\n+      } else {\n+        t.getCompiler().report(\n+            t.makeError(n, problemType, msg));\n       }\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n+    List<SourceFile> inputs = new ArrayList<>();\n+    inputs.add(input.getSourceFile());\n+    int lineNo = t.getInput().getLineNo(n.getLineno());\n+    int charOffset = t.getInput().getAbsoluteOffset(n.getCharno(), n.getLineno());\n+\n+    for (Node problemNode : problemNodes) {\n+      inputs.add(t.getInput().getSourceFileByName(problemNode.getSourceFileName()));\n     }\n+    Collections.sort(inputs, SourceFile.ORDER_BY_NAME);\n+\n+    JSError warning =\n+        new JSError(\n+            inputs.toArray(new SourceFile[inputs.size()]),\n+            problemType,\n+            lineNo,\n+            charOffset,\n+            msg);\n+    t.getCompiler().report(warning);\n+\n+    problemNodes.add(n);\n   }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}