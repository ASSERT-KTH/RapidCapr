{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds == null || bounds.length == 0) {\n        TypeVariable<?>[] variables = typeVariable.getGenericDeclaration().getTypeParameters();\n        for (TypeVariable<?> variable : variables) {\n            if (typeVariable.equals(variable)) {\n                continue;\n            }\n            Type actualTypeArgument = getActualTypeArgumentFor(variable);\n            if (actualTypeArgument != null) {\n                registerTypeVariablesOn(actualTypeArgument);\n            }\n        }\n        registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n        return;\n    }\n    for (Type type : bounds) {\n        if (type instanceof TypeVariable) {\n            TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n            readTypeVariables(typeVariable);\n        } else {\n            registerTypeVariablesOn(type);\n        }\n    }\n    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..252e0e70c 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,33 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds == null || bounds.length == 0) {\n+        TypeVariable<?>[] variables = typeVariable.getGenericDeclaration().getTypeParameters();\n+        for (TypeVariable<?> variable : variables) {\n+            if (typeVariable.equals(variable)) {\n+                continue;\n+            }\n+            Type actualTypeArgument = getActualTypeArgumentFor(variable);\n+            if (actualTypeArgument != null) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            }\n+        }\n+        registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n+        return;\n+    }\n+    for (Type type : bounds) {\n+        if (type instanceof TypeVariable) {\n+            TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n+            readTypeVariables(typeVariable);\n+        } else {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: method readTypeVariables in class TypeVariableReturnType cannot be applied to given types;",
    "test_result": "ERROR"
}