{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Only traverse functions that would normally be able to have a @this annotation associated with them.\n        // e.g., var a = function() {}; // or function a() {} // or a.x = function() {};\n        Node gp = parent.getParent();\n        if (parent.getType() == Token.ASSIGN && gp != null) {\n            if (gp.getType() != Token.EXPR_RESULT) {\n                return false;\n            }\n            Node ggp = gp.getParent();\n            if (ggp != null && ggp.getType() == Token.FUNCTION) {\n                // Only traverse the left side of assignments to handle assignments to prototype properties.\n                return n == parent.getFirstChild();\n            } else {\n                // Don't traverse the left side of assignment operations like 'Foo.prototype.bar = ...'.\n                return parent.getFirstChild().getType() != Token.GETPROP || !parent.getFirstChild().getLastChild().getString().equals(\"prototype\");\n            }\n        } else {\n            return (parent.getType() == Token.BLOCK || parent.getType() == Token.SCRIPT || parent.getType() == Token.NAME || parent.getType() == Token.ASSIGN);\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..38001b8f 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,35 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n-    }\n+        // Don't traverse functions that are constructors or have the @this or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+            return false;\n+        }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        // Only traverse functions that would normally be able to have a @this annotation associated with them.\n+        // e.g., var a = function() {}; // or function a() {} // or a.x = function() {};\n+        Node gp = parent.getParent();\n+        if (parent.getType() == Token.ASSIGN && gp != null) {\n+            if (gp.getType() != Token.EXPR_RESULT) {\n+                return false;\n+            }\n+            Node ggp = gp.getParent();\n+            if (ggp != null && ggp.getType() == Token.FUNCTION) {\n+                // Only traverse the left side of assignments to handle assignments to prototype properties.\n+                return n == parent.getFirstChild();\n+            } else {\n+                // Don't traverse the left side of assignment operations like 'Foo.prototype.bar = ...'.\n+                return parent.getFirstChild().getType() != Token.GETPROP || !parent.getFirstChild().getLastChild().getString().equals(\"prototype\");\n+            }\n+        } else {\n+            return (parent.getType() == Token.BLOCK || parent.getType() == Token.SCRIPT || parent.getType() == Token.NAME || parent.getType() == Token.ASSIGN);\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n     }\n-\n     return true;\n-  }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}