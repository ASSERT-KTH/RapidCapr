{
    "patch": "        // Check if the function node was created by a function expression\n        if (functionNode.getParent() != null && functionNode.getParent() instanceof FunctionCall) {\n          isUnnamedFunction = true;\n        } else {\n          name = new Name();\n          name.setIdentifier(\"\");\n          isUnnamedFunction = true;\n        }\n      } else {\n        String identifier = name.getIdentifier();\n        if (identifier != null && '$' == identifier.charAt(0)) {\n          isUnnamedFunction = true;\n        }\n      }\n\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        newName.setLineno(functionNode.getLineno());\n        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..0171a63a 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,38 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+        // Check if the function node was created by a function expression\n+        if (functionNode.getParent() != null && functionNode.getParent() instanceof FunctionCall) {\n+          isUnnamedFunction = true;\n+        } else {\n+          name = new Name();\n+          name.setIdentifier(\"\");\n+          isUnnamedFunction = true;\n+        }\n+      } else {\n+        String identifier = name.getIdentifier();\n+        if (identifier != null && '$' == identifier.charAt(0)) {\n+          isUnnamedFunction = true;\n+        }\n+      }\n+\n+      Node node = newNode(Token.FUNCTION);\n+      Node newName = transform(name);\n+      if (isUnnamedFunction) {\n+        newName.setLineno(functionNode.getLineno());\n+        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n+        newName.setCharno(position2charno(lpColumn));\n+      }\n+\n+      node.addChildToBack(newName);\n+      Node lp = newNode(Token.LP);\n+      Name fnName = functionNode.getFunctionName();\n+      if (fnName != null) {\n+        lp.setLineno(fnName.getLineno());\n+      } else {\n+        lp.setLineno(functionNode.getLineno());\n+      }\n+      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}