{
    "patch": "if (cfa != null) {\n  Node finallyParent = finallyNode.getParent();\n  Node nextNode = finallyParent.getNext();\n  if (finallyNode.getLastChild() != null) {\n    Node endOfFinally = NodeUtil.getEnclosingFinally(finallyNode.getLastChild());\n    if (endOfFinally != null) {\n      cfa.createEdge(fromNode, Branch.UNCOND, endOfFinally);\n      cfa.createEdge(finallyNode.getLastChild(), Branch.UNCOND, computeFallThrough(endOfFinally));\n      cfa.createEdge(endOfFinally, Branch.UNCOND, computeFollowNode(fromNode, finallyParent, cfa));\n    } else {\n      cfa.createEdge(fromNode, Branch.UNCOND, nextNode);\n    }\n  } else {\n    cfa.createEdge(fromNode, Branch.UNCOND, nextNode);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..c42b3e88 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,22 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  Node finallyParent = finallyNode.getParent();\n+  Node nextNode = finallyParent.getNext();\n+  if (finallyNode.getLastChild() != null) {\n+    Node endOfFinally = NodeUtil.getEnclosingFinally(finallyNode.getLastChild());\n+    if (endOfFinally != null) {\n+      cfa.createEdge(fromNode, Branch.UNCOND, endOfFinally);\n+      cfa.createEdge(finallyNode.getLastChild(), Branch.UNCOND, computeFallThrough(endOfFinally));\n+      cfa.createEdge(endOfFinally, Branch.UNCOND, computeFollowNode(fromNode, finallyParent, cfa));\n+    } else {\n+      cfa.createEdge(fromNode, Branch.UNCOND, nextNode);\n+    }\n+  } else {\n+    cfa.createEdge(fromNode, Branch.UNCOND, nextNode);\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}