{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wordBoundary = false;\n    boolean escaped = false;\n    boolean wasWhite = false;\n    char prevChar = '\\0';\n    \n    for(int i = 0; i < value.length(); i++) {\n        char c = value.charAt(i);\n\n        if(Character.isWhitespace(c)) {\n            if(!wasWhite) {\n                regex.append(\"\\\\s+\");\n                wasWhite = true;\n                wordBoundary = false;\n            }\n            continue;\n        }\n        \n        wasWhite = false;\n        \n        boolean isWordChar = Character.isLetterOrDigit(c) || c == '_';\n\n        if (c == '\\'' && unquote) {\n            if (++i == value.length()) {\n                break;\n            }\n            c = value.charAt(i);\n        }\n        if (escaped && !Character.isDigit(c) && !Character.isLetter(c)) {\n            regex.append(\"\\\\b\");\n            wordBoundary = true;\n        }\n        \n        switch(c) {\n            case '-':\n                if (prevChar == '^') {\n                    regex.append(\"\\\\-\");\n                    break;\n                }\n                if (!escaped && i > 0 && i < value.length() - 1 &&\n                        (Character.isLetterOrDigit(value.charAt(i - 1)) || Character.isLetterOrDigit(value.charAt(i + 1)))) {\n                    regex.append(\"\\\\b\");\n                    wordBoundary = true;\n                    \n                }\n                regex.append('-');\n                escaped = false;\n                break;\n                \n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '\\\\':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                if (!escaped) {\n                    regex.append(\"\\\\\");\n                    escaped = true;\n                    wordBoundary = false;\n                }\n                break;\n            \n            default:\n                if (isWordChar && !(escaped && prevChar == '\\\\')) {\n                    regex.append(\"\\\\b\");\n                    wordBoundary = true;\n                }\n                escaped = false;\n                break;\n        }\n        \n        regex.append(c);\n        prevChar = c;\n    }\n    \n    if (escaped || wordBoundary) {\n        regex.append(\"\\\\b\");\n    }\n    \n    if (wasWhite) {\n        regex.append(\"\\\\s*\");\n    }\n    \n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..21bf533d 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,27 +300,55 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wordBoundary = false;\n+    boolean escaped = false;\n+    boolean wasWhite = false;\n+    char prevChar = '\\0';\n+    \n+    for(int i = 0; i < value.length(); i++) {\n+        char c = value.charAt(i);\n+\n+        if(Character.isWhitespace(c)) {\n+            if(!wasWhite) {\n+                regex.append(\"\\\\s+\");\n+                wasWhite = true;\n+                wordBoundary = false;\n+            }\n+            continue;\n+        }\n+        \n+        wasWhite = false;\n+        \n+        boolean isWordChar = Character.isLetterOrDigit(c) || c == '_';\n+\n+        if (c == '\\'' && unquote) {\n+            if (++i == value.length()) {\n+                break;\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n+            c = value.charAt(i);\n+        }\n+        if (escaped && !Character.isDigit(c) && !Character.isLetter(c)) {\n+            regex.append(\"\\\\b\");\n+            wordBoundary = true;\n+        }\n+        \n+        switch(c) {\n+            case '-':\n+                if (prevChar == '^') {\n+                    regex.append(\"\\\\-\");\n+                    break;\n+                }\n+                if (!escaped && i > 0 && i < value.length() - 1 &&\n+                        (Character.isLetterOrDigit(value.charAt(i - 1)) || Character.isLetterOrDigit(value.charAt(i + 1)))) {\n+                    regex.append(\"\\\\b\");\n+                    wordBoundary = true;\n+                    \n                 }\n+                regex.append('-');\n+                escaped = false;\n                 break;\n+                \n             case '?':\n             case '[':\n             case ']':\n@@ -335,12 +363,36 @@ public class FastDateParser implements DateParser, Serializable {\n             case '^':\n             case '$':\n             case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                if (!escaped) {\n+                    regex.append(\"\\\\\");\n+                    escaped = true;\n+                    wordBoundary = false;\n+                }\n+                break;\n+            \n+            default:\n+                if (isWordChar && !(escaped && prevChar == '\\\\')) {\n+                    regex.append(\"\\\\b\");\n+                    wordBoundary = true;\n+                }\n+                escaped = false;\n+                break;\n         }\n-        return regex;\n+        \n+        regex.append(c);\n+        prevChar = c;\n     }\n+    \n+    if (escaped || wordBoundary) {\n+        regex.append(\"\\\\b\");\n+    }\n+    \n+    if (wasWhite) {\n+        regex.append(\"\\\\s*\");\n+    }\n+    \n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}