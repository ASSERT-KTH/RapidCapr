{
    "patch": "public static double getTypedPercent(String input) {\n    int count = 0;\n    int total = 0;\n    for (int i = 0; i < input.length(); i++) {\n        char c = input.charAt(i);\n        if (Character.isDigit(c)) {\n            total++;\n            if (i + 1 < input.length()) {\n                char nextChar = input.charAt(i + 1);\n                if (!Character.isDigit(nextChar)) {\n                    count++;\n                    i++;\n                }\n            } else {\n                count++;\n            }\n        }\n    }\n    return ((double) count / total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..edf28af4 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String input) {\n+    int count = 0;\n+    int total = 0;\n+    for (int i = 0; i < input.length(); i++) {\n+        char c = input.charAt(i);\n+        if (Character.isDigit(c)) {\n+            total++;\n+            if (i + 1 < input.length()) {\n+                char nextChar = input.charAt(i + 1);\n+                if (!Character.isDigit(nextChar)) {\n+                    count++;\n+                    i++;\n+                }\n+            } else {\n+                count++;\n+            }\n+        }\n+    }\n+    return ((double) count / total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}