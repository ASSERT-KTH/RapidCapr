{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double gamma = gamma(a);\n    if (Double.isInfinite(gamma) || Double.isNaN(gamma)) {\n        return gamma;\n    }\n    double incompleteGamma = incompleteGamma(a, x);\n    return incompleteGamma / gamma;\n}\n\nprivate static double gamma(double z) {\n    if (z < 0.5) {\n        return Math.PI / (Math.sin(Math.PI * z) * gamma(1 - z));\n    }\n    double[] coefficients = {\n            76.18009172947146, -86.50532032941677, 24.01409824083091, \n            -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5};\n    double sum = 1.000000000190015;\n    double x = z + 4.5;\n    for (int i = 0; i < coefficients.length; i++) {\n        sum += coefficients[i] / ++z;\n    }\n    return Math.sqrt(2 * Math.PI) * Math.pow(x, (z + 0.5)) * Math.exp(-x) * sum;\n}\n\nprivate static double incompleteGamma(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        return 0.0;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (a > 200) {\n        return incompleteGammaFromLargeA(a, x);\n    }\n    double value = 0.0;\n    double term = 1.0 / a;\n    double sum = term;\n    while (Math.abs(term) > sum * 1e-15) {\n        term *= x / (++a);\n        sum += term;\n    }\n    value = sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n    return value;\n}\n\nprivate static double incompleteGammaFromLargeA(double a, double x) {\n    double lambda = (x - a) / a;\n    double y = Math.exp(-x + a * Math.log(x) - logGamma(a)) / x;\n    double x2 = x * x;\n    double sum = 2.0 / x + 2.0 * lambda / x2;\n    double term = 1.0 / x;\n    int i = 1;\n    while (Math.abs(term) > sum * 1e-15) {\n        term *= i++ - lambda;\n        sum += term;\n    }\n    return 1.0 - y * sum;\n}\n\nprivate static double logGamma(double x) {\n    double[] tmp = {76.18009172947146, -86.50532032941677, 24.01409824083091, \n            -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5};\n    double ser = 1.000000000190015;\n    double y = x;\n    double z = x;\n    int i = 0;\n    double wg = 0.0;\n    for (; i < tmp.length; i++) {\n        wg += 1;\n        y++;\n        z += tmp[i] / y;\n        ser += wg * tmp[i] / y;\n    }\n    return -Math.log(ser) + z * Math.log(y) - y;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..61ef4d048 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,81 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double gamma = gamma(a);\n+    if (Double.isInfinite(gamma) || Double.isNaN(gamma)) {\n+        return gamma;\n+    }\n+    double incompleteGamma = incompleteGamma(a, x);\n+    return incompleteGamma / gamma;\n+}\n+\n+private static double gamma(double z) {\n+    if (z < 0.5) {\n+        return Math.PI / (Math.sin(Math.PI * z) * gamma(1 - z));\n+    }\n+    double[] coefficients = {\n+            76.18009172947146, -86.50532032941677, 24.01409824083091, \n+            -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5};\n+    double sum = 1.000000000190015;\n+    double x = z + 4.5;\n+    for (int i = 0; i < coefficients.length; i++) {\n+        sum += coefficients[i] / ++z;\n+    }\n+    return Math.sqrt(2 * Math.PI) * Math.pow(x, (z + 0.5)) * Math.exp(-x) * sum;\n+}\n+\n+private static double incompleteGamma(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        return 0.0;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (a > 200) {\n+        return incompleteGammaFromLargeA(a, x);\n+    }\n+    double value = 0.0;\n+    double term = 1.0 / a;\n+    double sum = term;\n+    while (Math.abs(term) > sum * 1e-15) {\n+        term *= x / (++a);\n+        sum += term;\n+    }\n+    value = sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+    return value;\n+}\n+\n+private static double incompleteGammaFromLargeA(double a, double x) {\n+    double lambda = (x - a) / a;\n+    double y = Math.exp(-x + a * Math.log(x) - logGamma(a)) / x;\n+    double x2 = x * x;\n+    double sum = 2.0 / x + 2.0 * lambda / x2;\n+    double term = 1.0 / x;\n+    int i = 1;\n+    while (Math.abs(term) > sum * 1e-15) {\n+        term *= i++ - lambda;\n+        sum += term;\n+    }\n+    return 1.0 - y * sum;\n+}\n+\n+private static double logGamma(double x) {\n+    double[] tmp = {76.18009172947146, -86.50532032941677, 24.01409824083091, \n+            -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5};\n+    double ser = 1.000000000190015;\n+    double y = x;\n+    double z = x;\n+    int i = 0;\n+    double wg = 0.0;\n+    for (; i < tmp.length; i++) {\n+        wg += 1;\n+        y++;\n+        z += tmp[i] / y;\n+        ser += wg * tmp[i] / y;\n+    }\n+    return -Math.log(ser) + z * Math.log(y) - y;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}