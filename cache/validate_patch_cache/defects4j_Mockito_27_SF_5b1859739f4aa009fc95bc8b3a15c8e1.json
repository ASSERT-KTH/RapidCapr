{
    "patch": "public <T> void resetMock(T mock) {\n    Factory factory = null;\n    if (mock instanceof Factory) {\n        factory = (Factory) mock;\n    } else if (Proxy.isProxyClass(mock.getClass())) {\n        InvocationHandler invocationHandler = Proxy.getInvocationHandler(mock);\n        if (invocationHandler instanceof Factory) {\n            factory = (Factory) invocationHandler;\n        }\n    }\n    if (factory != null) {\n        MockHandler<T> oldHandler = (MockHandler<T>) factory.getCallback(0);\n        MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n        factory.setCallback(0, newHandler);\n    } else {\n        throw new IllegalArgumentException(\"Only mock objects can be reset with this method\");\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..8ce520648 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,25 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    Factory factory = null;\n+    if (mock instanceof Factory) {\n+        factory = (Factory) mock;\n+    } else if (Proxy.isProxyClass(mock.getClass())) {\n+        InvocationHandler invocationHandler = Proxy.getInvocationHandler(mock);\n+        if (invocationHandler instanceof Factory) {\n+            factory = (Factory) invocationHandler;\n+        }\n+    }\n+    if (factory != null) {\n+        MockHandler<T> oldHandler = (MockHandler<T>) factory.getCallback(0);\n+        MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n+        factory.setCallback(0, newHandler);\n+    } else {\n+        throw new IllegalArgumentException(\"Only mock objects can be reset with this method\");\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}