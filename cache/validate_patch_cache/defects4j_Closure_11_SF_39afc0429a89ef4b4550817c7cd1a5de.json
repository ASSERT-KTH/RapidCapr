{
    "patch": "public String getProperty(String key) throws IOException {\n  Properties prop = new Properties();\n  String propFileName = \"config.properties\";\n  InputStream inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n  if (inputStream != null) {\n    prop.load(inputStream);\n  } else {\n    throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n  }\n\n  String value = prop.getProperty(key);\n\n  if (value == null) {\n    throw new IllegalArgumentException(\"property '\" + key + \"' not found in the properties file\");\n  }\n\n  try {\n    inputStream.close();\n  } catch (IOException e) {\n    // ignore\n  }\n\n  return value.trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..44cbedc6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,31 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProperty(String key) throws IOException {\n+  Properties prop = new Properties();\n+  String propFileName = \"config.properties\";\n+  InputStream inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n+\n+  if (inputStream != null) {\n+    prop.load(inputStream);\n+  } else {\n+    throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n+  }\n+\n+  String value = prop.getProperty(key);\n+\n+  if (value == null) {\n+    throw new IllegalArgumentException(\"property '\" + key + \"' not found in the properties file\");\n+  }\n+\n+  try {\n+    inputStream.close();\n+  } catch (IOException e) {\n+    // ignore\n+  }\n+\n+  return value.trim();\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}