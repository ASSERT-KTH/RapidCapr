{
    "patch": "public double getTypedPercent(String json) {\n    double count = 0.0;\n    double typedCount = 0.0;\n    try {\n        JSONObject jsonObject = new JSONObject(json);\n        JSONArray fieldsArray = jsonObject.getJSONArray(\"fields\");\n        for (int i = 0; i < fieldsArray.length(); i++) {\n            JSONObject field = fieldsArray.getJSONObject(i);\n            if (field.getString(\"type\").equals(\"text\")) {\n                count++;\n            } else if (field.getString(\"type\").equals(\"typed\")) {\n                count++;\n                typedCount++;\n            }\n        }\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n    return typedCount / count * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..0efdcc4c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json) {\n+    double count = 0.0;\n+    double typedCount = 0.0;\n+    try {\n+        JSONObject jsonObject = new JSONObject(json);\n+        JSONArray fieldsArray = jsonObject.getJSONArray(\"fields\");\n+        for (int i = 0; i < fieldsArray.length(); i++) {\n+            JSONObject field = fieldsArray.getJSONObject(i);\n+            if (field.getString(\"type\").equals(\"text\")) {\n+                count++;\n+            } else if (field.getString(\"type\").equals(\"typed\")) {\n+                count++;\n+                typedCount++;\n+            }\n+        }\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+    return typedCount / count * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}