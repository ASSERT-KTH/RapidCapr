{
    "patch": "  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n\n    if (!node.isGetProp()) {\n      return false;\n    }\n\n    node = node.getFirstChild();\n    if (node.isName()) {\n      String propName = node.getString();\n      return !isNameAssignedTo(propName, replacement);\n    }\n\n    // We currently do not support replacing string literals or computed property\n    // accesses.\n    // TODO: add support for string literals and computed property accesses.\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..e9cc11d3 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -208,15 +208,21 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n     if (node.isName()) {\n       return true;\n     }\n-    Preconditions.checkArgument(node.isGetProp());\n \n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n+    if (!node.isGetProp()) {\n       return false;\n     }\n \n-    return true;\n+    node = node.getFirstChild();\n+    if (node.isName()) {\n+      String propName = node.getString();\n+      return !isNameAssignedTo(propName, replacement);\n+    }\n+\n+    // We currently do not support replacing string literals or computed property\n+    // accesses.\n+    // TODO: add support for string literals and computed property accesses.\n+    return false;\n   }\n \n   /**\n@@ -241,4 +247,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}