{
    "patch": "        name = new Name();\n        name.setIdentifier(\"\");\n        AstNode fnNode = functionNode.getFunction();\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        name.setLineno(fnNode.getLineno());\n        int fnIndex = functionNode.getIndex();\n        int fnLp = functionNode.getLp();\n        // TODO(bowdidge) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = fnIndex + fnLp;\n        name.setCharno(position2charno(lpColumn));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..9752cb66 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,19 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        AstNode fnNode = functionNode.getFunction();\n+        // Old Rhino tagged the empty name node with the line number of the\n+        // declaration.\n+        name.setLineno(fnNode.getLineno());\n+        int fnIndex = functionNode.getIndex();\n+        int fnLp = functionNode.getLp();\n+        // TODO(bowdidge) Mark line number of paren correctly.\n+        // Same problem as below - the left paren might not be on the\n+        // same line as the function keyword.\n+        int lpColumn = fnIndex + fnLp;\n+        name.setCharno(position2charno(lpColumn));\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}