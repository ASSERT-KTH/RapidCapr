{
    "patch": "    public JSType caseObjectType(ObjectType type) {\n      if (value.equals(\"function\")) {\n        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n      }\n      if (matchesExpectation(\"object\")) {\n        boolean hasCallSignatures = type.getOwnPropertyNames().contains(\"call\");\n        return hasCallSignatures ? null : type;\n      }\n      return null;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0afabc8a..6548070b 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -611,10 +611,12 @@ public abstract class ChainableReverseAbstractInterpreter\n       if (value.equals(\"function\")) {\n         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n         return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n-          // Objects are restricted to \"Function\", subtypes are left\n-          // Only filter out subtypes of \"function\"\n       }\n-      return matchesExpectation(\"object\") ? type : null;\n+      if (matchesExpectation(\"object\")) {\n+        boolean hasCallSignatures = type.getOwnPropertyNames().contains(\"call\");\n+        return hasCallSignatures ? null : type;\n+      }\n+      return null;\n     }\n \n     @Override",
    "result_reason": "junit.framework.AssertionFailedError: Expected: (Object|boolean|number|string)",
    "test_result": "FAIL"
}