{
    "patch": "public static String getProperty(String key) {\n    String result = \"\";\n    if (properties != null) {\n        try {\n            result = properties.getProperty(key);\n            if (result == null || result.trim().equals(\"\")) {\n                String msg = \"Property value not found for key: \" + key;\n                logger.warn(msg);\n                if (warnings == null) {\n                    warnings = new String[] {msg};\n                } else {\n                    String[] newWarnings = new String[warnings.length + 1];\n                    System.arraycopy(warnings, 0, newWarnings, 0, warnings.length);\n                    newWarnings[warnings.length] = msg;\n                    warnings = newWarnings;\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Error while getting property value\", e);\n        }\n    } else {\n        logger.warn(\"Properties object is null\");\n        if (warnings == null) {\n            warnings = new String[] {\"Properties object is null\"};\n        } else {\n            String[] newWarnings = new String[warnings.length + 1];\n            System.arraycopy(warnings, 0, newWarnings, 0, warnings.length);\n            newWarnings[warnings.length] = \"Properties object is null\";\n            warnings = newWarnings;\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..a4824601 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,39 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getProperty(String key) {\n+    String result = \"\";\n+    if (properties != null) {\n+        try {\n+            result = properties.getProperty(key);\n+            if (result == null || result.trim().equals(\"\")) {\n+                String msg = \"Property value not found for key: \" + key;\n+                logger.warn(msg);\n+                if (warnings == null) {\n+                    warnings = new String[] {msg};\n+                } else {\n+                    String[] newWarnings = new String[warnings.length + 1];\n+                    System.arraycopy(warnings, 0, newWarnings, 0, warnings.length);\n+                    newWarnings[warnings.length] = msg;\n+                    warnings = newWarnings;\n+                }\n+            }\n+        } catch (Exception e) {\n+            logger.error(\"Error while getting property value\", e);\n+        }\n+    } else {\n+        logger.warn(\"Properties object is null\");\n+        if (warnings == null) {\n+            warnings = new String[] {\"Properties object is null\"};\n+        } else {\n+            String[] newWarnings = new String[warnings.length + 1];\n+            System.arraycopy(warnings, 0, newWarnings, 0, warnings.length);\n+            newWarnings[warnings.length] = \"Properties object is null\";\n+            warnings = newWarnings;\n+        }\n+    }\n+    return result;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}