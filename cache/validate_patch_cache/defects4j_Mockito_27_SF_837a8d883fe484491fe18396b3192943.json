{
    "patch": "public <T> void resetMock(T mock) {\n    if (!MockUtil.isMock(mock)) {\n        throw new IllegalArgumentException(\"Object is not a mock\");\n    }\n\n    MockHandler<T> mockHandler = (MockHandler<T>) MockUtil.getMockHandler(mock);\n    T newProxy = mockHandler.getMockSettings().getMockFactory().createMock(mockHandler.getClassToMock(), mockHandler.getMockSettings().build(), false);\n\n    MockHandlerInterface<T> newMockHandler = MockUtil.getMockHandler(newProxy);\n    mockHandler.getAnswers().copyAnswersTo(newMockHandler);\n    MockitoSession session = Mockito.framework().mockitoSession().initMocks(newProxy, mockHandler.getMockSettings());\n    ((MockitoSessionImpl) session).finishMocking();\n\n    MockUtil.fieldSetter(mock, MockUtil.getMockSettings(mock).getMockCreationSettings().getTypeToMock(), newProxy);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..a52bfab56 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,22 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (!MockUtil.isMock(mock)) {\n+        throw new IllegalArgumentException(\"Object is not a mock\");\n+    }\n+\n+    MockHandler<T> mockHandler = (MockHandler<T>) MockUtil.getMockHandler(mock);\n+    T newProxy = mockHandler.getMockSettings().getMockFactory().createMock(mockHandler.getClassToMock(), mockHandler.getMockSettings().build(), false);\n+\n+    MockHandlerInterface<T> newMockHandler = MockUtil.getMockHandler(newProxy);\n+    mockHandler.getAnswers().copyAnswersTo(newMockHandler);\n+    MockitoSession session = Mockito.framework().mockitoSession().initMocks(newProxy, mockHandler.getMockSettings());\n+    ((MockitoSessionImpl) session).finishMocking();\n+\n+    MockUtil.fieldSetter(mock, MockUtil.getMockSettings(mock).getMockCreationSettings().getTypeToMock(), newProxy);\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: non-static method isMock(Object) cannot be referenced from a static context",
    "test_result": "ERROR"
}