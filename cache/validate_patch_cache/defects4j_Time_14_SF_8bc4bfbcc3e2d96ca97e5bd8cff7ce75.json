{
    "patch": "        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            boolean updateDateTime = false;\n            boolean skipDayOverflowCheck = false;\n            DateTimeField fieldToBeUpdated = null;\n\n            // record the current date and time\n            int year = 0, monthOfYear = 0, dayOfMonth = 0, hourOfDay = 0, minuteOfHour = 0, secondOfMinute = 0, millisOfSecond = 0;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                DateTimeFieldType fieldType = partial.getFieldType(i);\n                DateTimeField field = fieldType.getField(iChronology);\n                int value = values[i];\n\n                if (i == fieldIndex) {\n                    // add the value to the field value\n                    value += valueToAdd;\n                    updateDateTime = true;\n                    fieldToBeUpdated = field;\n                }\n\n                if (updateDateTime) {\n                    if (i == 0) {\n                        year = value;\n                    } else if (i == 1) {\n                        monthOfYear = value;\n                    } else if (i == 2) {\n                        dayOfMonth = value;\n                    } else if (i == 3) {\n                        hourOfDay = value;\n                    } else if (i == 4) {\n                        minuteOfHour = value;\n                    } else if (i == 5) {\n                        secondOfMinute = value;\n                    } else if (i == 6) {\n                        millisOfSecond = value;\n                    }\n                } else {\n                    // set the field value and increment the instant value\n                    instant = field.set(instant, value);\n                }\n            }\n            if (updateDateTime) {\n                try {\n                    // update the date time without checking day overflow\n                    instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                    skipDayOverflowCheck = true;\n                } catch (IllegalArgumentException e) {\n                    if (!(e.getCause() instanceof IllegalFieldValueException)) {\n                        throw e;\n                    }\n                }\n            }\n            if (!skipDayOverflowCheck) {\n                // check for day overflow\n                int maxDay = iChronology.getDaysInMonthMax(year, monthOfYear);\n                if (dayOfMonth > maxDay) {\n                    int newMonthOfYear = monthOfYear + ((dayOfMonth - 1) / maxDay);\n                    int newDayOfMonth = ((dayOfMonth - 1) % maxDay) + 1;\n                    if (newMonthOfYear > 12) {\n                        year += (newMonthOfYear - 1) / 12;\n                        newMonthOfYear = ((newMonthOfYear - 1) % 12) + 1;\n                    } else if (newMonthOfYear < 1) {\n                        year += (newMonthOfYear / 12) - 1;\n                        newMonthOfYear = 12 + ((newMonthOfYear % 12) + 1);\n                    }\n                    try {\n                        instant = iChronology.getDateTimeMillis(year, newMonthOfYear, newDayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                    } catch (IllegalArgumentException e) {\n                        if (!(e.getCause() instanceof IllegalFieldValueException)) {\n                            throw e;\n                        }\n                    }\n                }\n            }\n            if (fieldToBeUpdated != null) {\n                // get the updated field value\n                values[fieldIndex] = fieldToBeUpdated.get(instant);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..88729585 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,84 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            boolean updateDateTime = false;\n+            boolean skipDayOverflowCheck = false;\n+            DateTimeField fieldToBeUpdated = null;\n+\n+            // record the current date and time\n+            int year = 0, monthOfYear = 0, dayOfMonth = 0, hourOfDay = 0, minuteOfHour = 0, secondOfMinute = 0, millisOfSecond = 0;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                DateTimeFieldType fieldType = partial.getFieldType(i);\n+                DateTimeField field = fieldType.getField(iChronology);\n+                int value = values[i];\n+\n+                if (i == fieldIndex) {\n+                    // add the value to the field value\n+                    value += valueToAdd;\n+                    updateDateTime = true;\n+                    fieldToBeUpdated = field;\n+                }\n+\n+                if (updateDateTime) {\n+                    if (i == 0) {\n+                        year = value;\n+                    } else if (i == 1) {\n+                        monthOfYear = value;\n+                    } else if (i == 2) {\n+                        dayOfMonth = value;\n+                    } else if (i == 3) {\n+                        hourOfDay = value;\n+                    } else if (i == 4) {\n+                        minuteOfHour = value;\n+                    } else if (i == 5) {\n+                        secondOfMinute = value;\n+                    } else if (i == 6) {\n+                        millisOfSecond = value;\n+                    }\n+                } else {\n+                    // set the field value and increment the instant value\n+                    instant = field.set(instant, value);\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            if (updateDateTime) {\n+                try {\n+                    // update the date time without checking day overflow\n+                    instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+                    skipDayOverflowCheck = true;\n+                } catch (IllegalArgumentException e) {\n+                    if (!(e.getCause() instanceof IllegalFieldValueException)) {\n+                        throw e;\n+                    }\n+                }\n+            }\n+            if (!skipDayOverflowCheck) {\n+                // check for day overflow\n+                int maxDay = iChronology.getDaysInMonthMax(year, monthOfYear);\n+                if (dayOfMonth > maxDay) {\n+                    int newMonthOfYear = monthOfYear + ((dayOfMonth - 1) / maxDay);\n+                    int newDayOfMonth = ((dayOfMonth - 1) % maxDay) + 1;\n+                    if (newMonthOfYear > 12) {\n+                        year += (newMonthOfYear - 1) / 12;\n+                        newMonthOfYear = ((newMonthOfYear - 1) % 12) + 1;\n+                    } else if (newMonthOfYear < 1) {\n+                        year += (newMonthOfYear / 12) - 1;\n+                        newMonthOfYear = 12 + ((newMonthOfYear % 12) + 1);\n+                    }\n+                    try {\n+                        instant = iChronology.getDateTimeMillis(year, newMonthOfYear, newDayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+                    } catch (IllegalArgumentException e) {\n+                        if (!(e.getCause() instanceof IllegalFieldValueException)) {\n+                            throw e;\n+                        }\n+                    }\n+                }\n+            }\n+            if (fieldToBeUpdated != null) {\n+                // get the updated field value\n+                values[fieldIndex] = fieldToBeUpdated.get(instant);\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}