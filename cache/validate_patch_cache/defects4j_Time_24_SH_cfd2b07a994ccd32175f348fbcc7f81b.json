{
    "patch": "            if ((text == null || text.isEmpty()) && e.getIllegalFieldValue() == null) {\n                throw e;\n            } else if (text != null) {\n                StringBuilder message = new StringBuilder();\n                message.append(\"Cannot parse \\\"\");\n                message.append(text);\n                message.append('\\\"');\n                if (e.getIllegalFieldValue() != null) {\n                    message.append(\": \").append(e.getMessage());\n                }\n                throw new IllegalFieldValueException(message.toString(), e.getIllegalFieldName(), e.getIllegalFieldValue(), e);\n            } else if (e.getIllegalFieldValue() != null) {\n                throw new IllegalFieldValueException(e.getIllegalFieldName(), e.getIllegalFieldValue());\n            } else {\n                throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..f37c654a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,21 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if ((text == null || text.isEmpty()) && e.getIllegalFieldValue() == null) {\n+                throw e;\n+            } else if (text != null) {\n+                StringBuilder message = new StringBuilder();\n+                message.append(\"Cannot parse \\\"\");\n+                message.append(text);\n+                message.append('\\\"');\n+                if (e.getIllegalFieldValue() != null) {\n+                    message.append(\": \").append(e.getMessage());\n+                }\n+                throw new IllegalFieldValueException(message.toString(), e.getIllegalFieldName(), e.getIllegalFieldValue(), e);\n+            } else if (e.getIllegalFieldValue() != null) {\n+                throw new IllegalFieldValueException(e.getIllegalFieldName(), e.getIllegalFieldValue());\n+            } else {\n+                throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}