{
    "patch": "public void testRecursiveRecord() {\n    ObjectType loopType = registry.getObjectType(\"loop\");\n    ObjectType rootType = ObjectType.createObjectType(registry.getNativeObjectType(VOID_TYPE));\n    ObjectType objType = ObjectType.createObjectTypeWithProperty(\"loop\", loopType, rootType);\n\n    objType.defineProperty(\"string\", JSTypeNative.STRING_TYPE, null);\n    objType.defineProperty(\"number\", JSTypeNative.NUMBER_TYPE, null);\n\n    assertEquals(\"{loop: [...], number: number, string: string}\", objType.toString());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..bafc9420 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,16 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n-\n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n-      return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n+public void testRecursiveRecord() {\n+    ObjectType loopType = registry.getObjectType(\"loop\");\n+    ObjectType rootType = ObjectType.createObjectType(registry.getNativeObjectType(VOID_TYPE));\n+    ObjectType objType = ObjectType.createObjectTypeWithProperty(\"loop\", loopType, rootType);\n \n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n+    objType.defineProperty(\"string\", JSTypeNative.STRING_TYPE, null);\n+    objType.defineProperty(\"number\", JSTypeNative.NUMBER_TYPE, null);\n \n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n-\n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n-      }\n-\n-      sb.append(\"}\");\n-\n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n-    }\n-  }\n+    assertEquals(\"{loop: [...], number: number, string: string}\", objType.toString());\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: PrototypeObjectType is not abstract and does not override abstract method toStringHelper(boolean) in JSType",
    "test_result": "ERROR"
}