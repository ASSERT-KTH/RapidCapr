{
    "patch": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = 1.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double cN = a * hPrev + b * p0;\n        double q2 = a * q1 + b * dPrev;\n        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n            final double scaleFactor = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n            if (scaleFactor <= small) {\n                // Throw exception for convergence to infinity\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n            // Rescale the iteration and try again\n            final double invScaleFactor = 1.0 / scaleFactor;\n            final double scaledPrevC = cPrev * invScaleFactor;\n            final double scaledPrevDenom = q1 * invScaleFactor;\n            final double scaledPrevNumer = hPrev * invScaleFactor;\n            final double scaledPrevDelta = scaledPrevC * scaledPrevNumer / q2;\n            hN = scaledPrevDenom * scaledPrevNumer + scaledPrevC * scaledPrevDelta;\n            if (Double.isInfinite(hN) || Double.isNaN(hN) || FastMath.abs(scaledPrevDelta - 1.0) < epsilon) {\n                break;\n            }\n            cPrev = scaledPrevC * (a * invScaleFactor);\n            q1 = scaledPrevDenom * q2;\n            p0 = scaledPrevNumer * (b * invScaleFactor);\n            dPrev = q1;\n            hPrev = scaledPrevNumer;\n        } else {\n            final double deltaN = cN / q2 / cPrev;\n            hN = cPrev * deltaN;\n            if (Double.isInfinite(hN) || Double.isNaN(hN)) {\n                final double scaleFactor = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n                if (scaleFactor <= small) {\n                    // Throw exception for convergence to infinity\n                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                }\n                // Rescale the iteration and try again\n                final double invScaleFactor = 1.0 / scaleFactor;\n                final double scaledPrevC = cPrev * invScaleFactor;\n                final double scaledPrevDenom = q1 * invScaleFactor;\n                final double scaledPrevNumer = hPrev * invScaleFactor;\n                final double scaledPrevDelta = scaledPrevC * scaledPrevNumer / q2;\n                hN = scaledPrevDenom * scaledPrevNumer + scaledPrevC * scaledPrevDelta;\n                if (Double.isInfinite(hN) || Double.isNaN(hN) || FastMath.abs(scaledPrevDelta - 1.0) < epsilon) {\n                    break;\n                }\n                cPrev = scaledPrevC * (a * invScaleFactor);\n                q1 = scaledPrevDenom * q2;\n                p0 = scaledPrevNumer * (b * invScaleFactor);\n                dPrev = q1;\n                hPrev = scaledPrevNumer;\n            } else if (!Double.isFinite(hN) || FastMath.abs(deltaN - 1.0) < epsilon) {\n                break;\n            } else {\n                dPrev = q1;\n                cPrev = cN / q2;\n                p0 = hPrev;\n                hPrev = cN;\n                q1 = q2;\n            }\n        }\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n    }\n\n    return hN;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..e19e2a11d 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -120,82 +120,91 @@ public abstract class ContinuedFraction {\n      * @return the value of the continued fraction evaluated at x.\n      * @throws ConvergenceException if the algorithm fails to converge.\n      */\n-    public double evaluate(double x, double epsilon, int maxIterations) {\n-        final double small = 1e-50;\n-        double hPrev = getA(0, x);\n+public double evaluate(double x, double epsilon, int maxIterations) {\n+    final double small = 1e-50;\n+    double hPrev = getA(0, x);\n \n-        // use the value of small as epsilon criteria for zero checks\n-        if (Precision.equals(hPrev, 0.0, small)) {\n-            hPrev = small;\n-        }\n+    // use the value of small as epsilon criteria for zero checks\n+    if (Precision.equals(hPrev, 0.0, small)) {\n+        hPrev = small;\n+    }\n \n-        int n = 1;\n-        double dPrev = 0.0;\n-        double p0 = 1.0;\n-        double q1 = 1.0;\n-        double cPrev = hPrev;\n-        double hN = hPrev;\n-\n-        while (n < maxIterations) {\n-            final double a = getA(n, x);\n-            final double b = getB(n, x);\n-\n-            double cN = a * hPrev + b * p0;\n-            double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n-                }\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n-                    }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n-                        break;\n-                    }\n-                }\n+    int n = 1;\n+    double dPrev = 0.0;\n+    double p0 = 1.0;\n+    double q1 = 1.0;\n+    double cPrev = hPrev;\n+    double hN = hPrev;\n+\n+    while (n < maxIterations) {\n+        final double a = getA(n, x);\n+        final double b = getB(n, x);\n+\n+        double cN = a * hPrev + b * p0;\n+        double q2 = a * q1 + b * dPrev;\n+        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+            final double scaleFactor = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n+            if (scaleFactor <= small) {\n+                // Throw exception for convergence to infinity\n+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n             }\n-\n+            // Rescale the iteration and try again\n+            final double invScaleFactor = 1.0 / scaleFactor;\n+            final double scaledPrevC = cPrev * invScaleFactor;\n+            final double scaledPrevDenom = q1 * invScaleFactor;\n+            final double scaledPrevNumer = hPrev * invScaleFactor;\n+            final double scaledPrevDelta = scaledPrevC * scaledPrevNumer / q2;\n+            hN = scaledPrevDenom * scaledPrevNumer + scaledPrevC * scaledPrevDelta;\n+            if (Double.isInfinite(hN) || Double.isNaN(hN) || FastMath.abs(scaledPrevDelta - 1.0) < epsilon) {\n+                break;\n+            }\n+            cPrev = scaledPrevC * (a * invScaleFactor);\n+            q1 = scaledPrevDenom * q2;\n+            p0 = scaledPrevNumer * (b * invScaleFactor);\n+            dPrev = q1;\n+            hPrev = scaledPrevNumer;\n+        } else {\n             final double deltaN = cN / q2 / cPrev;\n             hN = cPrev * deltaN;\n-\n-            if (Double.isInfinite(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                               x);\n-            }\n-            if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n-            }\n-\n-            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n+            if (Double.isInfinite(hN) || Double.isNaN(hN)) {\n+                final double scaleFactor = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n+                if (scaleFactor <= small) {\n+                    // Throw exception for convergence to infinity\n+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                }\n+                // Rescale the iteration and try again\n+                final double invScaleFactor = 1.0 / scaleFactor;\n+                final double scaledPrevC = cPrev * invScaleFactor;\n+                final double scaledPrevDenom = q1 * invScaleFactor;\n+                final double scaledPrevNumer = hPrev * invScaleFactor;\n+                final double scaledPrevDelta = scaledPrevC * scaledPrevNumer / q2;\n+                hN = scaledPrevDenom * scaledPrevNumer + scaledPrevC * scaledPrevDelta;\n+                if (Double.isInfinite(hN) || Double.isNaN(hN) || FastMath.abs(scaledPrevDelta - 1.0) < epsilon) {\n+                    break;\n+                }\n+                cPrev = scaledPrevC * (a * invScaleFactor);\n+                q1 = scaledPrevDenom * q2;\n+                p0 = scaledPrevNumer * (b * invScaleFactor);\n+                dPrev = q1;\n+                hPrev = scaledPrevNumer;\n+            } else if (!Double.isFinite(hN) || FastMath.abs(deltaN - 1.0) < epsilon) {\n                 break;\n+            } else {\n+                dPrev = q1;\n+                cPrev = cN / q2;\n+                p0 = hPrev;\n+                hPrev = cN;\n+                q1 = q2;\n             }\n-\n-            dPrev = q1;\n-            cPrev = cN / q2;\n-            p0 = hPrev;\n-            hPrev = cN;\n-            q1 = q2;\n-            n++;\n-        }\n-\n-        if (n >= maxIterations) {\n-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                                                maxIterations, x);\n         }\n+        n++;\n+    }\n \n-        return hN;\n+    if (n >= maxIterations) {\n+        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n     }\n \n+    return hN;\n+}\n+\n }",
    "result_reason": "org.apache.commons.math3.exception.MathInternalError: Discrete cumulative probability function returned NaN for argument 249,999",
    "test_result": "FAIL"
}