{
    "patch": "  public class MinimizeExitPoints\n      implements CompilerPass {\n    AbstractCompiler compiler;\n\n    public MinimizeExitPoints(AbstractCompiler compiler) {\n      this.compiler = compiler;\n    }\n\n    public void process(Node externs, Node js) {\n      runOnFunctionBody(js);\n    }\n\n    private static final boolean MINIMIZE_EXIT_POINTS =\n        System.getProperty(\"minimize_exit_points\") != null;\n\n    static boolean canRewriteFunction(NodeTraversal t, Node fn) {\n      if (!fn.isFunction()) {\n        return false;\n      }\n\n      if (!NodeUtil.isFunctionExpression(fn)) {\n        return false;\n      }\n\n      Node parent = fn.getParent();\n      if (parent.isFunction()\n          && parent.getFirstChild() == fn\n          && !parent.isArrowFunction()) {\n        // Can't convert the function expression in the parameter\n        // list of a named function (except for arrow functions).\n        return false;\n      }\n\n      return NodeUtil.getDeclaredVars(parent).isEmpty();\n    }\n\n    static void runOnFunctionBody(Node root) {\n      new NodeTraversal(new MinimizeExitPointsCallback())\n          .traverseWithScope(root, root.getEnclosingScope());\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..5b1e1318 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,47 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+  public class MinimizeExitPoints\n+      implements CompilerPass {\n+    AbstractCompiler compiler;\n+\n+    public MinimizeExitPoints(AbstractCompiler compiler) {\n+      this.compiler = compiler;\n+    }\n+\n+    public void process(Node externs, Node js) {\n+      runOnFunctionBody(js);\n+    }\n+\n+    private static final boolean MINIMIZE_EXIT_POINTS =\n+        System.getProperty(\"minimize_exit_points\") != null;\n+\n+    static boolean canRewriteFunction(NodeTraversal t, Node fn) {\n+      if (!fn.isFunction()) {\n+        return false;\n+      }\n+\n+      if (!NodeUtil.isFunctionExpression(fn)) {\n+        return false;\n+      }\n+\n+      Node parent = fn.getParent();\n+      if (parent.isFunction()\n+          && parent.getFirstChild() == fn\n+          && !parent.isArrowFunction()) {\n+        // Can't convert the function expression in the parameter\n+        // list of a named function (except for arrow functions).\n+        return false;\n+      }\n+\n+      return NodeUtil.getDeclaredVars(parent).isEmpty();\n+    }\n+\n+    static void runOnFunctionBody(Node root) {\n+      new NodeTraversal(new MinimizeExitPointsCallback())\n+          .traverseWithScope(root, root.getEnclosingScope());\n+    }\n+  }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}