{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int initialOffset = getOffset(instantLocal);\n    long instantAdjusted = instantLocal + initialOffset;\n    int offsetAdjusted = getOffset(instantAdjusted);\n\n    // calculate the adjustment needed for DST\n    if (initialOffset >= 0) {\n        if (offsetAdjusted < initialOffset) {\n            // we have just passed a DST boundary, need to fix the offset\n            long nextTransition = nextTransition(instantAdjusted);\n            int offsetAfterTransition = getOffset(nextTransition);\n\n            if (offsetAfterTransition > initialOffset) {\n                // we are moving forward in time, need to adjust the transition time\n                long transitionInstant = previousTransition(nextTransition);\n                instantAdjusted = transitionInstant - initialOffset;\n            } else {\n                instantAdjusted = nextTransition;\n            }\n        }\n    } else {\n        if (offsetAdjusted >= 0) {\n            // we have passed a DST boundary, need to fix the offset\n            long previousTransition = previousTransition(instantAdjusted);\n            int offsetBeforeTransition = getOffset(previousTransition);\n\n            if (offsetBeforeTransition >= 0) {\n                // we are moving backward in time, need to adjust the transition time\n                long transitionInstant = nextTransition(previousTransition);\n                instantAdjusted = transitionInstant - initialOffset;\n            } else {\n                instantAdjusted = previousTransition;\n            }\n            offsetAdjusted = getOffset(instantAdjusted);\n        }\n    }\n    return initialOffset - offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b29be981 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,44 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int initialOffset = getOffset(instantLocal);\n+    long instantAdjusted = instantLocal + initialOffset;\n+    int offsetAdjusted = getOffset(instantAdjusted);\n+\n+    // calculate the adjustment needed for DST\n+    if (initialOffset >= 0) {\n+        if (offsetAdjusted < initialOffset) {\n+            // we have just passed a DST boundary, need to fix the offset\n+            long nextTransition = nextTransition(instantAdjusted);\n+            int offsetAfterTransition = getOffset(nextTransition);\n+\n+            if (offsetAfterTransition > initialOffset) {\n+                // we are moving forward in time, need to adjust the transition time\n+                long transitionInstant = previousTransition(nextTransition);\n+                instantAdjusted = transitionInstant - initialOffset;\n+            } else {\n+                instantAdjusted = nextTransition;\n             }\n         }\n-        return offsetAdjusted;\n+    } else {\n+        if (offsetAdjusted >= 0) {\n+            // we have passed a DST boundary, need to fix the offset\n+            long previousTransition = previousTransition(instantAdjusted);\n+            int offsetBeforeTransition = getOffset(previousTransition);\n+\n+            if (offsetBeforeTransition >= 0) {\n+                // we are moving backward in time, need to adjust the transition time\n+                long transitionInstant = nextTransition(previousTransition);\n+                instantAdjusted = transitionInstant - initialOffset;\n+            } else {\n+                instantAdjusted = previousTransition;\n+            }\n+            offsetAdjusted = getOffset(instantAdjusted);\n+        }\n     }\n+    return initialOffset - offsetAdjusted;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-06-09T12:00:00.000",
    "test_result": "FAIL"
}