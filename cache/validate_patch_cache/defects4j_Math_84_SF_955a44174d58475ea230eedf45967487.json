{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n               \n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex = expanded.getPoint().clone();\n            } else {\n                simplex = reflectedSimplex;\n            }\n\n        } else {\n\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                simplex = contracted.getPoint().clone();\n            } else {\n\n                final RealPointValuePair[] shrinkedSimplex = simplex.clone();\n                final RealPointValuePair shrinked = evaluateNewSimplex(shrinkedSimplex, rho, comparator);\n                if (comparator.compare(shrinked, simplex[simplex.length - 1]) < 0) {\n                    simplex = shrinked.getPoint().clone();\n                } else {\n                    for (int i = 1; i < simplex.length; i++) {\n                        simplex[i] = original[0].add(original[i].subtract(original[0]).scalarMultiply(sigma));\n                    }\n                }\n\n            }\n\n        }\n\n        if (checker != null) {\n            if (checker.converged(getIterations(), best, simplex)) {\n                return;\n            }\n        }\n\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..98a9f1edf 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,58 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n+               \n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n+            final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex = expanded.getPoint().clone();\n+            } else {\n+                simplex = reflectedSimplex;\n+            }\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+        } else {\n \n-                return;\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            if (comparator.compare(contracted, best) < 0) {\n+                simplex = contracted.getPoint().clone();\n+            } else {\n+\n+                final RealPointValuePair[] shrinkedSimplex = simplex.clone();\n+                final RealPointValuePair shrinked = evaluateNewSimplex(shrinkedSimplex, rho, comparator);\n+                if (comparator.compare(shrinked, simplex[simplex.length - 1]) < 0) {\n+                    simplex = shrinked.getPoint().clone();\n+                } else {\n+                    for (int i = 1; i < simplex.length; i++) {\n+                        simplex[i] = original[0].add(original[i].subtract(original[0]).scalarMultiply(sigma));\n+                    }\n+                }\n \n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        }\n \n-            // check convergence\n+        if (checker != null) {\n+            if (checker.converged(getIterations(), best, simplex)) {\n                 return;\n             }\n-\n         }\n \n     }\n \n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}