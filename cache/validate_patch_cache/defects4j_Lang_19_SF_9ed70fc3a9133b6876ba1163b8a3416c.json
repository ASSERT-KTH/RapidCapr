{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n\n    if (index <= seqEnd - 3 && input.charAt(index) == '&' &&\n        (input.charAt(index + 1) == '#' || input.charAt(index + 1) == 'x' || input.charAt(index + 1) == 'X')) {\n\n        int radix = 10; // default radix for decimal entity\n        int start = index + 2; // start position of entity value in input\n        boolean isHex = false; // whether the entity value is in hexadecimal or not\n\n        if (input.charAt(index + 1) == 'x' || input.charAt(index + 1) == 'X') {\n            start++;\n            radix = 16;\n            isHex = true;\n        }\n\n        int end = start;\n        while (end < seqEnd && input.charAt(end) != ';') {\n            end++;\n        }\n\n        if (end == seqEnd) {\n            return 0;\n        }\n\n        String entityValueStr = input.subSequence(start, end).toString();\n\n        // Check that the entity value string is not empty\n        if (entityValueStr.isEmpty()) {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            entityValue = Integer.parseInt(entityValueStr, radix);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        if (entityValue < 0 || entityValue > 0x10FFFF) {\n            return 0;\n        }\n\n        // Write the entity value or code point to the output stream\n        if (entityValue == 0) {\n            out.write('\\0');\n        } else if (entityValue <= 0x7F) {\n            out.write(entityValue);\n        } else {\n            CharsetEncoder asciiEncoder = StandardCharsets.US_ASCII.newEncoder();\n            ByteBuffer buf = asciiEncoder.encode(CharBuffer.wrap(Character.toString((char) entityValue)));\n            String entityStr;\n\n            if (isHex) {\n                entityStr = \"&#x\" + entityValueStr + \";\";\n            } else {\n                entityStr = \"&#\" + entityValueStr + \";\";\n            }\n\n            if (buf.array().length == 1) {\n                out.write(entityStr);\n            } else {\n                out.write(new String(buf.array(), StandardCharsets.UTF_8));\n            }\n        }\n\n        // Return the total length of the entity (including the '&' and ';')\n        return end - index + 1;\n    }\n\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..0e856ce1 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,76 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n+    if (index <= seqEnd - 3 && input.charAt(index) == '&' &&\n+        (input.charAt(index + 1) == '#' || input.charAt(index + 1) == 'x' || input.charAt(index + 1) == 'X')) {\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n-            }\n+        int radix = 10; // default radix for decimal entity\n+        int start = index + 2; // start position of entity value in input\n+        boolean isHex = false; // whether the entity value is in hexadecimal or not\n+\n+        if (input.charAt(index + 1) == 'x' || input.charAt(index + 1) == 'X') {\n+            start++;\n+            radix = 16;\n+            isHex = true;\n+        }\n+\n+        int end = start;\n+        while (end < seqEnd && input.charAt(end) != ';') {\n+            end++;\n+        }\n+\n+        if (end == seqEnd) {\n+            return 0;\n+        }\n+\n+        String entityValueStr = input.subSequence(start, end).toString();\n+\n+        // Check that the entity value string is not empty\n+        if (entityValueStr.isEmpty()) {\n+            return 0;\n+        }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n+        int entityValue;\n+        try {\n+            entityValue = Integer.parseInt(entityValueStr, radix);\n+        } catch (NumberFormatException nfe) {\n+            return 0;\n+        }\n+\n+        if (entityValue < 0 || entityValue > 0x10FFFF) {\n+            return 0;\n+        }\n+\n+        // Write the entity value or code point to the output stream\n+        if (entityValue == 0) {\n+            out.write('\\0');\n+        } else if (entityValue <= 0x7F) {\n+            out.write(entityValue);\n+        } else {\n+            CharsetEncoder asciiEncoder = StandardCharsets.US_ASCII.newEncoder();\n+            ByteBuffer buf = asciiEncoder.encode(CharBuffer.wrap(Character.toString((char) entityValue)));\n+            String entityStr;\n+\n+            if (isHex) {\n+                entityStr = \"&#x\" + entityValueStr + \";\";\n             } else {\n-                out.write(entityValue);\n+                entityStr = \"&#\" + entityValueStr + \";\";\n             }\n \n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+            if (buf.array().length == 1) {\n+                out.write(entityStr);\n+            } else {\n+                out.write(new String(buf.array(), StandardCharsets.UTF_8));\n+            }\n         }\n-        return 0;\n+\n+        // Return the total length of the entity (including the '&' and ';')\n+        return end - index + 1;\n     }\n+\n+    return 0;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}