{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n        final int initialOffset = getOffset(instantLocal);\n        final long instantAdjusted = instantLocal - initialOffset;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        if (initialOffset == offsetAdjusted) {\n            return initialOffset; // No adjustment needed.\n        } else {\n            final long nextTransition = nextTransition(instantAdjusted);\n            final long nextTransitionAdjusted = nextTransition - initialOffset + offsetAdjusted;\n            if (nextTransition > instantAdjusted && nextTransitionAdjusted < instantLocal) {\n                // The next transition is less than one standard offset away from the instant being\n                // checked and the uncovered time along this section is not zero i.e. the local time\n                // is in a cutover period and must be either skipped or overlap the transition.\n                // Scan to find actual nextTransition in case current nextTransition is incorrect.\n                long next = nextTransition;\n                while (nextTransition > instantAdjusted && next != -1) { // Loop until nextTransition is non-null or next unknown\n                    next = nextTransition(next);\n                    nextTransitionAdjusted = next - initialOffset + getOffset(next);\n                }\n                // (Copied from LocalDate#getZone)\n                long prevTransition = previousTransition(instantAdjusted);\n                long prevTransitionAdjusted = prevTransition - initialOffset + getOffset(prevTransition);\n                if (nextTransition == -1 || (nextTransitionAdjusted < instantLocal && instantLocal < prevTransitionAdjusted)) {\n                    // In overlap\n                    return initialOffset;\n                } else {\n                    // Gap\n                    return getOffset(nextTransition);\n                }\n            } else {\n                return offsetAdjusted;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..381686f6 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,37 +877,39 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n+public int getOffsetFromLocal(long instantLocal) {\n+        final int initialOffset = getOffset(instantLocal);\n+        final long instantAdjusted = instantLocal - initialOffset;\n         final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+        if (initialOffset == offsetAdjusted) {\n+            return initialOffset; // No adjustment needed.\n+        } else {\n+            final long nextTransition = nextTransition(instantAdjusted);\n+            final long nextTransitionAdjusted = nextTransition - initialOffset + offsetAdjusted;\n+            if (nextTransition > instantAdjusted && nextTransitionAdjusted < instantLocal) {\n+                // The next transition is less than one standard offset away from the instant being\n+                // checked and the uncovered time along this section is not zero i.e. the local time\n+                // is in a cutover period and must be either skipped or overlap the transition.\n+                // Scan to find actual nextTransition in case current nextTransition is incorrect.\n+                long next = nextTransition;\n+                while (nextTransition > instantAdjusted && next != -1) { // Loop until nextTransition is non-null or next unknown\n+                    next = nextTransition(next);\n+                    nextTransitionAdjusted = next - initialOffset + getOffset(next);\n                 }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n+                // (Copied from LocalDate#getZone)\n+                long prevTransition = previousTransition(instantAdjusted);\n+                long prevTransitionAdjusted = prevTransition - initialOffset + getOffset(prevTransition);\n+                if (nextTransition == -1 || (nextTransitionAdjusted < instantLocal && instantLocal < prevTransitionAdjusted)) {\n+                    // In overlap\n+                    return initialOffset;\n+                } else {\n+                    // Gap\n+                    return getOffset(nextTransition);\n                 }\n+            } else {\n+                return offsetAdjusted;\n             }\n         }\n-        return offsetAdjusted;\n     }\n \n     /**",
    "result_reason": "error: cannot assign a value to final variable nextTransitionAdjusted",
    "test_result": "ERROR"
}