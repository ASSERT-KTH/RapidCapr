{
    "patch": "    public Dfp multiply(final int x) {\n        final Dfp res = newInstance();\n        res.sign = sign == 0 ? 0 : (x < 0 ? -sign : sign);\n        res.exp = exp;\n        if (x == 0) {\n            res.sig[0] = 0;\n            return dotrap(Dfp.TRAP_INVALID, MULTIPLY, res, res);\n        }\n        boolean err = false;\n        long carry = 0;\n        int ix = 0;\n        while (ix < precision && !err) {\n            final long prod = (sig[ix] & 0xffffffffL) * (x & 0xffffffffL) + carry;\n            res.sig[ix] = (int) (prod & 0xffffffffL);\n            carry = prod >>> 32;\n            err |= carry != 0 && carry != -1;\n            ix++;\n        }\n        if (carry != 0) {\n            res.shiftRight();\n            res.sig[precision - 1] = (int) carry;\n        }\n        return dotrap(Dfp.TRAP_INVALID | Dfp.TRAP_OVERFLOW | Dfp.TRAP_UNDERFLOW, MULTIPLY, res, res);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..698c0ccd1 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,28 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        final Dfp res = newInstance();\n+        res.sign = sign == 0 ? 0 : (x < 0 ? -sign : sign);\n+        res.exp = exp;\n+        if (x == 0) {\n+            res.sig[0] = 0;\n+            return dotrap(Dfp.TRAP_INVALID, MULTIPLY, res, res);\n+        }\n+        boolean err = false;\n+        long carry = 0;\n+        int ix = 0;\n+        while (ix < precision && !err) {\n+            final long prod = (sig[ix] & 0xffffffffL) * (x & 0xffffffffL) + carry;\n+            res.sig[ix] = (int) (prod & 0xffffffffL);\n+            carry = prod >>> 32;\n+            err |= carry != 0 && carry != -1;\n+            ix++;\n+        }\n+        if (carry != 0) {\n+            res.shiftRight();\n+            res.sig[precision - 1] = (int) carry;\n+        }\n+        return dotrap(Dfp.TRAP_INVALID | Dfp.TRAP_OVERFLOW | Dfp.TRAP_UNDERFLOW, MULTIPLY, res, res);\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}