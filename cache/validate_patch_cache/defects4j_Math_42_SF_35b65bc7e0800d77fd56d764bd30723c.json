{
    "patch": "protected RealPointValuePair getSolution() {\n    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n    boolean nonNegative = true;\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n\n    for (int i = 0; i < coefficients.length; i++) {\n        int colIndex = columnLabels.indexOf(\"x\" + i);\n        if (colIndex < 0) {\n            coefficients[i] = 0;\n            continue;\n        }\n        Integer basicRow = getBasicRow(colIndex);\n        // if the basic row is found to be the objective function row\n        if (basicRow == null)\n        {\n            nonNegative &= (restrictToNonNegative ? false : true);//If not restricted value should must be less than zero.\n            continue;\n        } else if (basicRow == negativeVarBasicRow) {\n            continue;\n        }\n        double rhs = getEntry(basicRow, getRhsOffset());\n        for (int j = getNumObjectiveFunctions(); j < getArtificialVariableOffset(); j++) {\n            if (j == colIndex) {\n                coefficients[i] = rhs;\n                if (rhs < 0 && (!restrictToNonNegative)) {\n                    nonNegative = false;\n                    break;\n                }\n            } else {\n                coefficients[j - getNumObjectiveFunctions()] -= getEntry(basicRow, j) * rhs;\n            }\n        }\n    }\n\n    if (restrictToNonNegative && !nonNegative) {\n        //The linear function is not bounded from below\n        return null;\n    }\n\n    // Account for the negative variable in the objective function\n    if (negativeVarBasicRow != null) {\n        double coeff = mostNegative - (restrictToNonNegative ? 0 : mostNegative);\n        coefficients[negativeVarColumn - getNumObjectiveFunctions()] = coeff;\n    }\n\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 02c22b59f..80c9e4f58 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -393,37 +393,57 @@ class SimplexTableau implements Serializable {\n      *\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n-\n-      Set<Integer> basicRows = new HashSet<Integer>();\n-      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-      for (int i = 0; i < coefficients.length; i++) {\n-          int colIndex = columnLabels.indexOf(\"x\" + i);\n-          if (colIndex < 0) {\n+protected RealPointValuePair getSolution() {\n+    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n+    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n+    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n+\n+    boolean nonNegative = true;\n+    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+\n+    for (int i = 0; i < coefficients.length; i++) {\n+        int colIndex = columnLabels.indexOf(\"x\" + i);\n+        if (colIndex < 0) {\n             coefficients[i] = 0;\n             continue;\n-          }\n-          Integer basicRow = getBasicRow(colIndex);\n-              // if the basic row is found to be the objective function row\n-              // set the coefficient to 0 -> this case handles unconstrained \n-              // variables that are still part of the objective function\n-          if (basicRows.contains(basicRow)) {\n-              // if multiple variables can take a given value\n-              // then we choose the first and set the rest equal to 0\n-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n-          } else {\n-              basicRows.add(basicRow);\n-              coefficients[i] =\n-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                  (restrictToNonNegative ? 0 : mostNegative);\n-          }\n-      }\n-      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+        }\n+        Integer basicRow = getBasicRow(colIndex);\n+        // if the basic row is found to be the objective function row\n+        if (basicRow == null)\n+        {\n+            nonNegative &= (restrictToNonNegative ? false : true);//If not restricted value should must be less than zero.\n+            continue;\n+        } else if (basicRow == negativeVarBasicRow) {\n+            continue;\n+        }\n+        double rhs = getEntry(basicRow, getRhsOffset());\n+        for (int j = getNumObjectiveFunctions(); j < getArtificialVariableOffset(); j++) {\n+            if (j == colIndex) {\n+                coefficients[i] = rhs;\n+                if (rhs < 0 && (!restrictToNonNegative)) {\n+                    nonNegative = false;\n+                    break;\n+                }\n+            } else {\n+                coefficients[j - getNumObjectiveFunctions()] -= getEntry(basicRow, j) * rhs;\n+            }\n+        }\n+    }\n+\n+    if (restrictToNonNegative && !nonNegative) {\n+        //The linear function is not bounded from below\n+        return null;\n     }\n \n+    // Account for the negative variable in the objective function\n+    if (negativeVarBasicRow != null) {\n+        double coeff = mostNegative - (restrictToNonNegative ? 0 : mostNegative);\n+        coefficients[negativeVarColumn - getNumObjectiveFunctions()] = coeff;\n+    }\n+\n+    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+}\n+\n     /**\n      * Subtracts a multiple of one row from another.\n      * <p>",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: 5",
    "test_result": "FAIL"
}