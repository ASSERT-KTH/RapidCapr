{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException,\n        FunctionEvaluationException {\n\n    final double ftol = getFunctionValueAccuracy();\n    final double rtol = getRelativeAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    clearResult();\n    verifyInterval(min, max);\n\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= ftol) {\n        setResult(min, 0);\n        return getResult();\n    }\n\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= ftol) {\n        setResult(max, 0);\n        return getResult();\n    }\n\n    if (yMin * yMax >= 0) {\n        throw new IllegalArgumentException(\n                \"Function values at endpoints do not have different signs.\" +\n                        \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    }\n\n    double x = Double.NaN;\n\n    int i = 0;\n\n    while (i <= getMaximalIterationCount()) {\n        x = (min + max) / 2;\n        double y = f.value(x);\n\n        if (Math.abs(y) <= ftol || Math.abs(max - min) <= rtol * Math.max(Math.abs(max), Math.abs(min)) + atol) {\n            setResult(x, i);\n            return getResult();\n        }\n\n        if (yMin < 0 &&\n                y < 0 &&\n                min != x) {\n            max = x;\n            yMax = y;\n        } else if (yMax > 0 &&\n                y > 0 &&\n                max != x) {\n            min = x;\n            yMin = y;\n        } else {\n            double x1 = x + rtol * (max - min);\n            double x2 = x - rtol * (max - min);\n            double newX = (Math.abs(f.value(x1)) < Math.abs(f.value(x2))) ? x1 : x2;\n            double newY = f.value(newX);\n            if (Math.abs(newY) <= ftol || Math.abs(max - min) <= rtol * Math.max(Math.abs(max), Math.abs(min)) + atol) {\n                setResult(newX, i);\n                return getResult();\n            }\n            if (newY * yMin < 0) {\n                yMax = newY;\n                max = newX;\n            } else if (newY * yMax < 0) {\n                yMin = newY;\n                min = newX;\n            } else {\n                setResult(newX, i);\n                return getResult();\n            }\n        }\n        ++i;\n    }\n\n    throw new MaxIterationsExceededException(getMaximalIterationCount());\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..021f90681 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,82 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n+public double solve(double min, double max) throws MaxIterationsExceededException,\n         FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n+\n+    final double ftol = getFunctionValueAccuracy();\n+    final double rtol = getRelativeAccuracy();\n+    final double atol = getAbsoluteAccuracy();\n+    clearResult();\n+    verifyInterval(min, max);\n+\n+    double yMin = f.value(min);\n+    if (Math.abs(yMin) <= ftol) {\n+        setResult(min, 0);\n+        return getResult();\n+    }\n+\n+    double yMax = f.value(max);\n+    if (Math.abs(yMax) <= ftol) {\n+        setResult(max, 0);\n+        return getResult();\n+    }\n+\n+    if (yMin * yMax >= 0) {\n+        throw new IllegalArgumentException(\n+                \"Function values at endpoints do not have different signs.\" +\n+                        \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-        } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+    }\n+\n+    double x = Double.NaN;\n+\n+    int i = 0;\n+\n+    while (i <= getMaximalIterationCount()) {\n+        x = (min + max) / 2;\n+        double y = f.value(x);\n+\n+        if (Math.abs(y) <= ftol || Math.abs(max - min) <= rtol * Math.max(Math.abs(max), Math.abs(min)) + atol) {\n+            setResult(x, i);\n+            return getResult();\n         }\n \n-        return ret;\n+        if (yMin < 0 &&\n+                y < 0 &&\n+                min != x) {\n+            max = x;\n+            yMax = y;\n+        } else if (yMax > 0 &&\n+                y > 0 &&\n+                max != x) {\n+            min = x;\n+            yMin = y;\n+        } else {\n+            double x1 = x + rtol * (max - min);\n+            double x2 = x - rtol * (max - min);\n+            double newX = (Math.abs(f.value(x1)) < Math.abs(f.value(x2))) ? x1 : x2;\n+            double newY = f.value(newX);\n+            if (Math.abs(newY) <= ftol || Math.abs(max - min) <= rtol * Math.max(Math.abs(max), Math.abs(min)) + atol) {\n+                setResult(newX, i);\n+                return getResult();\n+            }\n+            if (newY * yMin < 0) {\n+                yMax = newY;\n+                max = newX;\n+            } else if (newY * yMax < 0) {\n+                yMin = newY;\n+                min = newX;\n+            } else {\n+                setResult(newX, i);\n+                return getResult();\n+            }\n+        }\n+        ++i;\n     }\n+\n+    throw new MaxIterationsExceededException(getMaximalIterationCount());\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}