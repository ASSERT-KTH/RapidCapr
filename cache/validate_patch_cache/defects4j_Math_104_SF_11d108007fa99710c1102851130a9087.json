{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid arguments!\");\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x > a + 1.0) {\n        double incompleteGammaQ = regularizedGammaQ(a, x);\n        return 1.0 - incompleteGammaQ;\n    }\n    double tolerance = 1e-15;\n    double sum = 1.0 / a;\n    double term = sum;\n    for (int k = 1; Math.abs(term / sum) > tolerance; k++) {\n        term *= x / (a + k);\n        sum += term;\n    }\n    double result = Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n    return result;\n}\n\npublic static double logGamma(double x) {\n    double[] cof = {\n            76.18009172947146, -86.50532032941677, 24.01409824083091,\n            -1.231739572450155, 0.001208650973866179, -0.000005395239384953\n    };\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 0.9999999999999978 * cof[0];\n    for (int j = 1; j <= 5; j++) {\n        ser += cof[j] / (x + j);\n    }\n    return tmp + Math.log(2.5066282746310007 * ser / x);\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    double igamma = incompleteGamma(a, x);\n    double gamma = Math.exp(logGamma(a));\n    return gamma - igamma;\n}\n\npublic static double incompleteGamma(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid arguments!\");\n    }\n    double gam = Math.exp(logGamma(a));\n    double incompleteGammaP = 0.0;\n    double term = 1.0 / a;\n    double sum = term;\n    for (int k = 1; Math.abs(term / sum) > 1e-15; k++) {\n        term *= x / (a + k);\n        sum += term;\n    }\n    incompleteGammaP = Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n    return gam - incompleteGammaP;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..89e371beb 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,62 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid arguments!\");\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x > a + 1.0) {\n+        double incompleteGammaQ = regularizedGammaQ(a, x);\n+        return 1.0 - incompleteGammaQ;\n+    }\n+    double tolerance = 1e-15;\n+    double sum = 1.0 / a;\n+    double term = sum;\n+    for (int k = 1; Math.abs(term / sum) > tolerance; k++) {\n+        term *= x / (a + k);\n+        sum += term;\n+    }\n+    double result = Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+    return result;\n+}\n+\n+public static double logGamma(double x) {\n+    double[] cof = {\n+            76.18009172947146, -86.50532032941677, 24.01409824083091,\n+            -1.231739572450155, 0.001208650973866179, -0.000005395239384953\n+    };\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 0.9999999999999978 * cof[0];\n+    for (int j = 1; j <= 5; j++) {\n+        ser += cof[j] / (x + j);\n+    }\n+    return tmp + Math.log(2.5066282746310007 * ser / x);\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    double igamma = incompleteGamma(a, x);\n+    double gamma = Math.exp(logGamma(a));\n+    return gamma - igamma;\n+}\n+\n+public static double incompleteGamma(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid arguments!\");\n+    }\n+    double gam = Math.exp(logGamma(a));\n+    double incompleteGammaP = 0.0;\n+    double term = 1.0 / a;\n+    double sum = term;\n+    for (int k = 1; Math.abs(term / sum) > 1e-15; k++) {\n+        term *= x / (a + k);\n+        sum += term;\n+    }\n+    incompleteGammaP = Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+    return gam - incompleteGammaP;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}