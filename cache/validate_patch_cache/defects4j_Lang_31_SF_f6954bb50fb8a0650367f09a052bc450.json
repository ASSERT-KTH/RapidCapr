{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    \n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        if (isCharMatch(ch, searchChars)) {\n            return true;\n        }\n        if (Character.isHighSurrogate(ch) && i < str.length() - 1) {\n            char ch2 = str.charAt(i + 1);\n            if (isCharMatch(Character.toCodePoint(ch, ch2), searchChars)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean isCharMatch(int codePoint, char[] searchChars) {\n    for (char c : searchChars) {\n        if (Character.codePointAt(new char[] {c}, 0) == codePoint) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..2093e51c 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,34 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    \n+    for (int i = 0; i < str.length(); i++) {\n+        char ch = str.charAt(i);\n+        if (isCharMatch(ch, searchChars)) {\n+            return true;\n+        }\n+        if (Character.isHighSurrogate(ch) && i < str.length() - 1) {\n+            char ch2 = str.charAt(i + 1);\n+            if (isCharMatch(Character.toCodePoint(ch, ch2), searchChars)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean isCharMatch(int codePoint, char[] searchChars) {\n+    for (char c : searchChars) {\n+        if (Character.codePointAt(new char[] {c}, 0) == codePoint) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}