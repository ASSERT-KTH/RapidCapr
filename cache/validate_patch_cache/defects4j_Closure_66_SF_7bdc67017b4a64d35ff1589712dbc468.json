{
    "patch": "public static double getTypedPercent(String jsonStr) throws JSONException {\n    JSONObject json = new JSONObject(jsonStr);\n    JSONArray arr = json.getJSONArray(\"data\");\n    int totalCount = arr.length();\n    int typedCount = 0;\n\n    for (int i = 0; i < totalCount; i++) {\n        JSONObject obj = arr.getJSONObject(i);\n        if (obj.has(\"type\") && !obj.isNull(\"type\")) {\n            typedCount++;\n        }\n    }\n    double typedPercent = ((double) typedCount / totalCount) * 100;\n    return typedPercent;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..3d376330 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) throws JSONException {\n+    JSONObject json = new JSONObject(jsonStr);\n+    JSONArray arr = json.getJSONArray(\"data\");\n+    int totalCount = arr.length();\n+    int typedCount = 0;\n+\n+    for (int i = 0; i < totalCount; i++) {\n+        JSONObject obj = arr.getJSONObject(i);\n+        if (obj.has(\"type\") && !obj.isNull(\"type\")) {\n+            typedCount++;\n+        }\n+    }\n+    double typedPercent = ((double) typedCount / totalCount) * 100;\n+    return typedPercent;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}