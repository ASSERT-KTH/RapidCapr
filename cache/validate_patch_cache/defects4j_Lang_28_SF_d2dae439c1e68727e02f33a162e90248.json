{
    "patch": "    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // TODO: Protect from ArrayIndexOutOfBounds\n        if (index >= input.length() - 2) {\n            return 0;\n        }\n        char currCharAtIdx = input.charAt(index);\n        char nextCharAtIdx = input.charAt(index + 1);\n        if (currCharAtIdx == '&' && nextCharAtIdx == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n            int end = start;\n            while (end < input.length() && input.charAt(end) != ';') {\n                end++;\n            }\n            String entityValue = input.subSequence(start, end).toString();\n            if (entityValue.length() == 0) {\n                return 0;\n            }\n            int unicodeValue = 0;\n            try {\n                unicodeValue = Integer.parseInt(entityValue, isHex ? 16 : 10);\n            } catch (NumberFormatException nfe) {\n                return 0;\n            }\n            if (!Character.isValidCodePoint(unicodeValue)) {\n                return 0;\n            }\n            char[] chars = Character.toChars(unicodeValue);\n            out.write(chars);\n            return end - index + 1;\n        }\n        return 0;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..14dbab82 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,34 +34,39 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n     @Override\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n+        if (index >= input.length() - 2) {\n+            return 0;\n+        }\n+        char currCharAtIdx = input.charAt(index);\n+        char nextCharAtIdx = input.charAt(index + 1);\n+        if (currCharAtIdx == '&' && nextCharAtIdx == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n-\n             char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n+            if (firstChar == 'x' || firstChar == 'X') {\n                 start++;\n                 isHex = true;\n             }\n-\n             int end = start;\n-            while(input.charAt(end) != ';') {\n+            while (end < input.length() && input.charAt(end) != ';') {\n                 end++;\n             }\n-\n-            int entityValue;\n+            String entityValue = input.subSequence(start, end).toString();\n+            if (entityValue.length() == 0) {\n+                return 0;\n+            }\n+            int unicodeValue = 0;\n             try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n+                unicodeValue = Integer.parseInt(entityValue, isHex ? 16 : 10);\n+            } catch (NumberFormatException nfe) {\n                 return 0;\n             }\n-\n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+            if (!Character.isValidCodePoint(unicodeValue)) {\n+                return 0;\n+            }\n+            char[] chars = Character.toChars(unicodeValue);\n+            out.write(chars);\n+            return end - index + 1;\n         }\n         return 0;\n     }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}