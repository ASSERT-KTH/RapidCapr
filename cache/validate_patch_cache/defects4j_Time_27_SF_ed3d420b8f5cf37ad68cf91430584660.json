{
    "patch": "private static PeriodFormatter toFormatter(List elementPairs, boolean notPrinter, boolean notParser) {\n    if (elementPairs.isEmpty()) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    if (size > 1 && elementPairs.get(0) instanceof Separator) {\n        Separator separator = (Separator) elementPairs.get(0);\n        List<Object> remainingPairs = elementPairs.subList(2, size);\n        PeriodFormatter intermediateFormatter = toFormatter(remainingPairs, notPrinter, notParser);\n        separator = separator.finish(intermediateFormatter.getPrinter(), intermediateFormatter.getParser());\n        return new PeriodFormatter(separator, separator);\n    }\n\n    Object[] comps = createComposite(elementPairs);\n    PeriodPrinter printer = notPrinter ? null : (PeriodPrinter) comps[0];\n    PeriodParser parser = notParser ? null : (PeriodParser) comps[1];\n\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..5f397515 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,28 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n+private static PeriodFormatter toFormatter(List elementPairs, boolean notPrinter, boolean notParser) {\n+    if (elementPairs.isEmpty()) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    if (size > 1 && elementPairs.get(0) instanceof Separator) {\n+        Separator separator = (Separator) elementPairs.get(0);\n+        List<Object> remainingPairs = elementPairs.subList(2, size);\n+        PeriodFormatter intermediateFormatter = toFormatter(remainingPairs, notPrinter, notParser);\n+        separator = separator.finish(intermediateFormatter.getPrinter(), intermediateFormatter.getParser());\n+        return new PeriodFormatter(separator, separator);\n     }\n \n+    Object[] comps = createComposite(elementPairs);\n+    PeriodPrinter printer = notPrinter ? null : (PeriodPrinter) comps[0];\n+    PeriodParser parser = notParser ? null : (PeriodParser) comps[1];\n+\n+    return new PeriodFormatter(printer, parser);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "java.lang.IllegalStateException: Builder has created neither a printer nor a parser",
    "test_result": "FAIL"
}