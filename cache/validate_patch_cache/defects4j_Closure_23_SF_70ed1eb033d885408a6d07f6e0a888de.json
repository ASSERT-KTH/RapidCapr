{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  if (!right.isNumber()) {\n    return n;\n  }\n\n  double index = right.getDouble();\n\n  if (index < 0 || round(index) != index) {\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n\n  int intIndex = (int) index;\n\n  if (left.isArrayLit()) {\n    if (intIndex < 0 || intIndex >= left.getChildCount()) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getChildAt(intIndex).cloneTree();\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }\n\n  if (!left.isGetProp() || !left.getLastChild().getString().equals(\"length\")) {\n    return n;\n  }\n\n  Node array = left.getFirstChild().cloneTree();\n  Node len = new Node(Token.NAME, \"length\");\n  left = new Node(Token.GETPROP, Token.GETPROP, array, len).srcref(left);\n  index = round(index);\n  right = new Node(Token.NUMBER, Double.toString(index));\n  left = new Node(Token.GETELEM, left, right).srcref(n);\n\n  if (0 <= intIndex && intIndex < 1024) {\n    for (int i = 0; i < intIndex; i++) {\n      elem = new Node(Token.GETELEM, array, new Node(Token.NUMBER, Integer.toString(i))).srcref(n);\n      nodeToReplace = new Node(Token.GETELEM, left.cloneNode(), new Node(Token.NUMBER, Integer.toString(i))).srcref(n);\n      nodeToReplace.replaceWith(elem);\n      nodeToReplace = elem;\n    }\n    nodeToReplace.replaceWith(array.getChildAt(intIndex).cloneTree());\n    reportCodeChange();\n    return nodeToReplace;\n  }\n\n  Node indexNode = new Node(Token.NUMBER, Double.toString(index));\n  Node getElement = new Node(Token.GETELEM, array.cloneTree(), indexNode);\n  Node getName = new Node(Token.NAME, ARRAY_ACCESS_ERROR);\n  Node call = new Node(Token.CALL, getName, getElement);\n\n  n.getParent().replaceChild(n, call);\n  reportCodeChange();\n  return call;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..aa0ba5f4 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,58 +1419,65 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n-\n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n-\n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  if (!right.isNumber()) {\n+    return n;\n+  }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+  double index = right.getDouble();\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n+  if (index < 0 || round(index) != index) {\n+    error(INVALID_GETELEM_INDEX_ERROR, right);\n+    return n;\n+  }\n \n-      current = current.getNext();\n-    }\n+  int intIndex = (int) index;\n \n-    if (elem == null) {\n+  if (left.isArrayLit()) {\n+    if (intIndex < 0 || intIndex >= left.getChildCount()) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n-    }\n-\n-    // Replace the entire GETELEM with the value\n+    Node elem = left.getChildAt(intIndex).cloneTree();\n     n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n   }\n \n+  if (!left.isGetProp() || !left.getLastChild().getString().equals(\"length\")) {\n+    return n;\n+  }\n+\n+  Node array = left.getFirstChild().cloneTree();\n+  Node len = new Node(Token.NAME, \"length\");\n+  left = new Node(Token.GETPROP, Token.GETPROP, array, len).srcref(left);\n+  index = round(index);\n+  right = new Node(Token.NUMBER, Double.toString(index));\n+  left = new Node(Token.GETELEM, left, right).srcref(n);\n+\n+  if (0 <= intIndex && intIndex < 1024) {\n+    for (int i = 0; i < intIndex; i++) {\n+      elem = new Node(Token.GETELEM, array, new Node(Token.NUMBER, Integer.toString(i))).srcref(n);\n+      nodeToReplace = new Node(Token.GETELEM, left.cloneNode(), new Node(Token.NUMBER, Integer.toString(i))).srcref(n);\n+      nodeToReplace.replaceWith(elem);\n+      nodeToReplace = elem;\n+    }\n+    nodeToReplace.replaceWith(array.getChildAt(intIndex).cloneTree());\n+    reportCodeChange();\n+    return nodeToReplace;\n+  }\n+\n+  Node indexNode = new Node(Token.NUMBER, Double.toString(index));\n+  Node getElement = new Node(Token.GETELEM, array.cloneTree(), indexNode);\n+  Node getName = new Node(Token.NAME, ARRAY_ACCESS_ERROR);\n+  Node call = new Node(Token.CALL, getName, getElement);\n+\n+  n.getParent().replaceChild(n, call);\n+  reportCodeChange();\n+  return call;\n+}\n+\n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}