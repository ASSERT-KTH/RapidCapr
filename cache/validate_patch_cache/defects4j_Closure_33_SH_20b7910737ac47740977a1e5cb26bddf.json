{
    "patch": "if (constraintObj.isNominalConstructor() && constraintObj.isAnonymous()) {\n  JSDocInfo info = getJSDocInfo();\n  if (info != null) {\n    FunctionTypeBuilder builder =\n        new FunctionTypeBuilder(getScope(), getCommonTypes());\n    builder.addNominalType(info.getNominalType());\n    builder.addParameter(info.getParameterNames().get(0), constraintObj);\n    JSType functionType = builder.buildType();\n    setDeclaredType(functionType);\n    defineInferredProperty(info.getParameterNames().get(0), constraintObj, null);\n  }\n} else if (constraintObj.isRecordType()) {\n  for (String propName : constraintObj.getOwnPropertyNames()) {\n    JSType propType = constraintObj.getPropertyType(propName);\n    if (!isPropertyTypeDeclared(propName)) {\n      JSType typeToInfer = propType;\n      if (!hasProperty(propName)) {\n        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n            .getLeastSupertype(propType);\n      }\n      defineInferredProperty(propName, typeToInfer, null);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..934c867e 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,30 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+if (constraintObj.isNominalConstructor() && constraintObj.isAnonymous()) {\n+  JSDocInfo info = getJSDocInfo();\n+  if (info != null) {\n+    FunctionTypeBuilder builder =\n+        new FunctionTypeBuilder(getScope(), getCommonTypes());\n+    builder.addNominalType(info.getNominalType());\n+    builder.addParameter(info.getParameterNames().get(0), constraintObj);\n+    JSType functionType = builder.buildType();\n+    setDeclaredType(functionType);\n+    defineInferredProperty(info.getParameterNames().get(0), constraintObj, null);\n+  }\n+} else if (constraintObj.isRecordType()) {\n+  for (String propName : constraintObj.getOwnPropertyNames()) {\n+    JSType propType = constraintObj.getPropertyType(propName);\n+    if (!isPropertyTypeDeclared(propName)) {\n+      JSType typeToInfer = propType;\n+      if (!hasProperty(propName)) {\n+        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+            .getLeastSupertype(propType);\n+      }\n+      defineInferredProperty(propName, typeToInfer, null);\n+    }\n+  }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}