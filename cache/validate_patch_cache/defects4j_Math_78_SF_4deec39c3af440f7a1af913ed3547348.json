{
    "patch": "public boolean evaluateStep(final StepInterpolator interpolator)\n    throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h  = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n        double previousG = g0;\n        boolean previousDecreasing = false;\n        boolean previousIncreasing = false;\n\n        for (int i = 0; i < n; ++i) {\n\n            // evaluate handler value at the end of the substep\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // check events occurrence\n            if (g0Positive ^ (gb >= 0)) {\n                // there is a sign change: an event is expected during this step\n\n                // this is a corner case:\n                // - there was an event near ta,\n                // - there is another event between ta and tb\n                // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n                // this implies that the real sign of ga is the same as gb, so we need to slightly\n                // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n                // about bracketing\n                // this should never happen\n\n                // variation direction, with respect to the integration direction\n                final boolean increasing = gb >= ga;\n\n                // update previous event when gb change sign w.r.t ga\n                if (gb * previousG < 0) {\n                    if (increasing) {\n                        previousDecreasing = true;\n                    } else {\n                        previousIncreasing = true;\n                    }\n                }\n                previousG = gb;\n\n                final UnivariateRealFunction f = new UnivariateRealFunction() {\n                    public double value(final double t) throws FunctionEvaluationException {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (DerivativeException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        } catch (EventException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        }\n                    }\n                };\n                final BrentSolver solver = new BrentSolver();\n                solver.setAbsoluteAccuracy(convergence);\n                solver.setMaximalIterationCount(maxIterationCount);\n\n                // Compute the bracketing interval if needed\n                if ((tb - ta) > 2 * solver.getAbsoluteAccuracy()) {\n                    ta = tb - h;\n                    double fa = ga;\n                    double fb = gb;\n\n                    // Try to determine the direction in which previous event was detected\n                    if (previousDecreasing) {\n                        for (int ii = i - 1; ii >= 0; --ii) {\n                            interpolator.setInterpolatedTime(t0 + (ii + 0.5) * h);\n                            final double gg = handler.g(interpolator.getInterpolatedTime(),\n                                interpolator.getInterpolatedState());\n                            if (gg * ga < 0) {\n                                // previous event was followed by decreasing event\n                                ta = t0 + ii * h;\n                                fa = gg;\n                                break;\n                            }\n                        }\n                    } else if (previousIncreasing) {\n                        for (int ii = i - 1; ii >= 0; --ii) {\n                            interpolator.setInterpolatedTime(t0 + (ii + 0.5) * h);\n                            final double gg = handler.g(interpolator.getInterpolatedTime(),\n                                interpolator.getInterpolatedState());\n                            if (gg * ga < 0) {\n                                // previous event was followed by increasing event\n                                ta = t0 + (ii + 1) * h;\n                                interpolator.setInterpolatedTime(ta);\n                                fa = handler.g(ta, interpolator.getInterpolatedState());\n                                break;\n                            }\n                        }\n                    }\n\n                    final double slope = (gb - ga) / (tb - ta);\n\n                    // Bracket with event at one end and sloping line at the other\n                    if (g0Positive) {\n                        if (ga > 0) {\n                            // increasing function\n                            final double delta = -ga / slope;\n                            ta += delta;\n                            fa = handler.g(ta, interpolator.getInterpolatedState());\n                        } else if (gb > 0) {\n                            // decreasing function\n                            final double delta = -gb / slope;\n                            tb += delta;\n                            interpolator.setInterpolatedTime(tb);\n                            fb = handler.g(tb, interpolator.getInterpolatedState());\n                        }\n                    } else {\n                        if (ga < 0) {\n                            // decreasing function\n                            final double delta = -ga / slope;\n                            ta += delta;\n                            fa = handler.g(ta, interpolator.getInterpolatedState());\n                        } else if (gb < 0) {\n                            // increasing function\n                            final double delta = -gb / slope;\n                            tb += delta;\n                            interpolator.setInterpolatedTime(tb);\n                            fb = handler.g(tb, interpolator.getInterpolatedState());\n                        }\n                    }\n\n                    if ((fa < 0 && fb < 0) || (fa > 0 && fb > 0)) {\n                        throw new ConvergenceException(LocalizedFormats.FAILED_BRACKETING,\n                                              ta, tb, fa, fb);\n                    }\n\n                } else if (!increasing && previousIncreasing || increasing && previousDecreasing) {\n                    //ta is too close to the step end point tb,\n                    // we need to make sure that we increase/decrease ta with respect to g() evolution\n                    ta += convergence * ga / (ga - gb) + convergence * (ga + gb) / Math.abs(ga - gb);\n                }\n\n                // try finding a root with initial bracket\n                double root = Double.NaN;\n                try {\n                    root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n                } catch (MathRuntimeException e) {\n                    // initial bracket failed, try again with bisection\n                    final double mid = 0.5 * (ta + tb);\n                    if (g0Positive ^ (handler.g(mid, interpolator.getInterpolatedState()) >= 0)) {\n                        root = (ta <= tb) ? solver.solve(f, ta, mid) : solver.solve(f, mid, ta);\n                    } else {\n                        root = (ta <= tb) ? solver.solve(f, mid, tb) : solver.solve(f, tb, mid);\n                    }\n                }\n\n                if ((Math.abs(root - ta) <= convergence) &&\n                     (Math.abs(root - previousEventTime) <= convergence)) {\n                    // we have either found nothing or found (again ?) a past event, we simply ignore it\n                    ta = tb;\n                    ga = gb;\n                } else if (Double.isNaN(previousEventTime) ||\n                           (Math.abs(previousEventTime - root) > convergence)) {\n                    pendingEventTime = root;\n                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                        // we were already waiting for this event which was\n                        // found during a previous call for a step that was\n                        // rejected, this step must now be accepted since it\n                        // properly ends exactly at the event occurrence\n                        return false;\n                    }\n                    // either we were not waiting for the event or it has\n                    // moved in such a way the step cannot be accepted\n                    pendingEvent = true;\n                    return true;\n                }\n\n            } else {\n                // no sign change: there is no event for now\n                ta = tb;\n                ga = gb;\n            }\n\n        }\n\n        // no event during the whole step\n        pendingEvent     = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if ((cause != null) && (cause instanceof DerivativeException)) {\n            throw (DerivativeException) cause;\n        } else if ((cause != null) && (cause instanceof EventException)) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..655aadf03 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,104 +164,208 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n-        throws DerivativeException, EventException, ConvergenceException {\n-\n-        try {\n-\n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n-\n-            double ta = t0;\n-            double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n-\n-                // evaluate handler value at the end of the substep\n-                tb += h;\n-                interpolator.setInterpolatedTime(tb);\n-                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n-\n-                // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n-                    // there is a sign change: an event is expected during this step\n-\n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n-                    // variation direction, with respect to the integration direction\n-                    increasing = gb >= ga;\n-\n-                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n-                        public double value(final double t) throws FunctionEvaluationException {\n-                            try {\n-                                interpolator.setInterpolatedTime(t);\n-                                return handler.g(t, interpolator.getInterpolatedState());\n-                            } catch (DerivativeException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            } catch (EventException e) {\n-                                throw new FunctionEvaluationException(e, t);\n+public boolean evaluateStep(final StepInterpolator interpolator)\n+    throws DerivativeException, EventException, ConvergenceException {\n+\n+    try {\n+\n+        forward = interpolator.isForward();\n+        final double t1 = interpolator.getCurrentTime();\n+        final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n+        final double h  = (t1 - t0) / n;\n+\n+        double ta = t0;\n+        double ga = g0;\n+        double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n+        double previousG = g0;\n+        boolean previousDecreasing = false;\n+        boolean previousIncreasing = false;\n+\n+        for (int i = 0; i < n; ++i) {\n+\n+            // evaluate handler value at the end of the substep\n+            tb += h;\n+            interpolator.setInterpolatedTime(tb);\n+            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n+\n+            // check events occurrence\n+            if (g0Positive ^ (gb >= 0)) {\n+                // there is a sign change: an event is expected during this step\n+\n+                // this is a corner case:\n+                // - there was an event near ta,\n+                // - there is another event between ta and tb\n+                // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n+                // this implies that the real sign of ga is the same as gb, so we need to slightly\n+                // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n+                // about bracketing\n+                // this should never happen\n+\n+                // variation direction, with respect to the integration direction\n+                final boolean increasing = gb >= ga;\n+\n+                // update previous event when gb change sign w.r.t ga\n+                if (gb * previousG < 0) {\n+                    if (increasing) {\n+                        previousDecreasing = true;\n+                    } else {\n+                        previousIncreasing = true;\n+                    }\n+                }\n+                previousG = gb;\n+\n+                final UnivariateRealFunction f = new UnivariateRealFunction() {\n+                    public double value(final double t) throws FunctionEvaluationException {\n+                        try {\n+                            interpolator.setInterpolatedTime(t);\n+                            return handler.g(t, interpolator.getInterpolatedState());\n+                        } catch (DerivativeException e) {\n+                            throw new FunctionEvaluationException(e, t);\n+                        } catch (EventException e) {\n+                            throw new FunctionEvaluationException(e, t);\n+                        }\n+                    }\n+                };\n+                final BrentSolver solver = new BrentSolver();\n+                solver.setAbsoluteAccuracy(convergence);\n+                solver.setMaximalIterationCount(maxIterationCount);\n+\n+                // Compute the bracketing interval if needed\n+                if ((tb - ta) > 2 * solver.getAbsoluteAccuracy()) {\n+                    ta = tb - h;\n+                    double fa = ga;\n+                    double fb = gb;\n+\n+                    // Try to determine the direction in which previous event was detected\n+                    if (previousDecreasing) {\n+                        for (int ii = i - 1; ii >= 0; --ii) {\n+                            interpolator.setInterpolatedTime(t0 + (ii + 0.5) * h);\n+                            final double gg = handler.g(interpolator.getInterpolatedTime(),\n+                                interpolator.getInterpolatedState());\n+                            if (gg * ga < 0) {\n+                                // previous event was followed by decreasing event\n+                                ta = t0 + ii * h;\n+                                fa = gg;\n+                                break;\n+                            }\n+                        }\n+                    } else if (previousIncreasing) {\n+                        for (int ii = i - 1; ii >= 0; --ii) {\n+                            interpolator.setInterpolatedTime(t0 + (ii + 0.5) * h);\n+                            final double gg = handler.g(interpolator.getInterpolatedTime(),\n+                                interpolator.getInterpolatedState());\n+                            if (gg * ga < 0) {\n+                                // previous event was followed by increasing event\n+                                ta = t0 + (ii + 1) * h;\n+                                interpolator.setInterpolatedTime(ta);\n+                                fa = handler.g(ta, interpolator.getInterpolatedState());\n+                                break;\n                             }\n                         }\n-                    };\n-                    final BrentSolver solver = new BrentSolver();\n-                    solver.setAbsoluteAccuracy(convergence);\n-                    solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n-                        pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n+                    }\n+\n+                    final double slope = (gb - ga) / (tb - ta);\n+\n+                    // Bracket with event at one end and sloping line at the other\n+                    if (g0Positive) {\n+                        if (ga > 0) {\n+                            // increasing function\n+                            final double delta = -ga / slope;\n+                            ta += delta;\n+                            fa = handler.g(ta, interpolator.getInterpolatedState());\n+                        } else if (gb > 0) {\n+                            // decreasing function\n+                            final double delta = -gb / slope;\n+                            tb += delta;\n+                            interpolator.setInterpolatedTime(tb);\n+                            fb = handler.g(tb, interpolator.getInterpolatedState());\n+                        }\n+                    } else {\n+                        if (ga < 0) {\n+                            // decreasing function\n+                            final double delta = -ga / slope;\n+                            ta += delta;\n+                            fa = handler.g(ta, interpolator.getInterpolatedState());\n+                        } else if (gb < 0) {\n+                            // increasing function\n+                            final double delta = -gb / slope;\n+                            tb += delta;\n+                            interpolator.setInterpolatedTime(tb);\n+                            fb = handler.g(tb, interpolator.getInterpolatedState());\n                         }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n-                        pendingEvent = true;\n-                        return true;\n                     }\n \n-                } else {\n-                    // no sign change: there is no event for now\n+                    if ((fa < 0 && fb < 0) || (fa > 0 && fb > 0)) {\n+                        throw new ConvergenceException(LocalizedFormats.FAILED_BRACKETING,\n+                                              ta, tb, fa, fb);\n+                    }\n+\n+                } else if (!increasing && previousIncreasing || increasing && previousDecreasing) {\n+                    //ta is too close to the step end point tb,\n+                    // we need to make sure that we increase/decrease ta with respect to g() evolution\n+                    ta += convergence * ga / (ga - gb) + convergence * (ga + gb) / Math.abs(ga - gb);\n+                }\n+\n+                // try finding a root with initial bracket\n+                double root = Double.NaN;\n+                try {\n+                    root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n+                } catch (MathRuntimeException e) {\n+                    // initial bracket failed, try again with bisection\n+                    final double mid = 0.5 * (ta + tb);\n+                    if (g0Positive ^ (handler.g(mid, interpolator.getInterpolatedState()) >= 0)) {\n+                        root = (ta <= tb) ? solver.solve(f, ta, mid) : solver.solve(f, mid, ta);\n+                    } else {\n+                        root = (ta <= tb) ? solver.solve(f, mid, tb) : solver.solve(f, tb, mid);\n+                    }\n+                }\n+\n+                if ((Math.abs(root - ta) <= convergence) &&\n+                     (Math.abs(root - previousEventTime) <= convergence)) {\n+                    // we have either found nothing or found (again ?) a past event, we simply ignore it\n                     ta = tb;\n                     ga = gb;\n+                } else if (Double.isNaN(previousEventTime) ||\n+                           (Math.abs(previousEventTime - root) > convergence)) {\n+                    pendingEventTime = root;\n+                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n+                        // we were already waiting for this event which was\n+                        // found during a previous call for a step that was\n+                        // rejected, this step must now be accepted since it\n+                        // properly ends exactly at the event occurrence\n+                        return false;\n+                    }\n+                    // either we were not waiting for the event or it has\n+                    // moved in such a way the step cannot be accepted\n+                    pendingEvent = true;\n+                    return true;\n                 }\n \n+            } else {\n+                // no sign change: there is no event for now\n+                ta = tb;\n+                ga = gb;\n             }\n \n-            // no event during the whole step\n-            pendingEvent     = false;\n-            pendingEventTime = Double.NaN;\n-            return false;\n-\n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n-            }\n-            throw new EventException(e);\n         }\n \n+        // no event during the whole step\n+        pendingEvent     = false;\n+        pendingEventTime = Double.NaN;\n+        return false;\n+\n+    } catch (FunctionEvaluationException e) {\n+        final Throwable cause = e.getCause();\n+        if ((cause != null) && (cause instanceof DerivativeException)) {\n+            throw (DerivativeException) cause;\n+        } else if ((cause != null) && (cause instanceof EventException)) {\n+            throw (EventException) cause;\n+        }\n+        throw new EventException(e);\n     }\n \n+}\n+\n     /** Get the occurrence time of the event triggered in the current\n      * step.\n      * @return occurrence time of the event triggered in the current",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}