{
    "patch": "case Token.NEW:\n    // A new expression can only be a local value if it has no arguments,\n    // all its children are immutable, and its constructor is not overridden.\n    Node constructor = getBestConstructorCandidate(\n        value.getFirstChild().getJSType().toObjectType());\n    if (constructor == null || NodeUtil.isImmutableValue(value)\n        || !evaluateArgumentsToLocalValues(value.getLastChild(), locals)) {\n      return false;\n    } else {\n      return !JSType.nativeObjectType.equals(constructor.getJSType());\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex dd78f900..7c1d6710 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -2462,7 +2462,17 @@ public final class NodeUtil {\n         // TODO(nicksantos): This needs to be changed so that it\n         // returns true iff we're sure the value was never aliased from inside\n         // the constructor (similar to callHasLocalResult)\n-        return true;\n+case Token.NEW:\n+    // A new expression can only be a local value if it has no arguments,\n+    // all its children are immutable, and its constructor is not overridden.\n+    Node constructor = getBestConstructorCandidate(\n+        value.getFirstChild().getJSType().toObjectType());\n+    if (constructor == null || NodeUtil.isImmutableValue(value)\n+        || !evaluateArgumentsToLocalValues(value.getLastChild(), locals)) {\n+      return false;\n+    } else {\n+      return !JSType.nativeObjectType.equals(constructor.getJSType());\n+    }\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}