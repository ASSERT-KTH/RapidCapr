{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  if (!block.hasChildren() || block.hasOneChild() && block.getFirstChild().isReturn()) {\n    // If the block is empty or has only one return statement, there are no side effects.\n    return CanInlineResult.YES;\n  }\n\n  Map<String, Integer> argMap = new HashMap<>();\n\n  Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n\n  // If the function has rest parameters, mark it as not eligible for direct call node replacement.\n  if (fnParams.hasChildren() && fnParams.getLastChild().isRest()) {\n    return CanInlineResult.NO;\n  }\n\n  // First, we map each function argument to its corresponding parameter.\n  Node arg = callNode;\n  Node param = fnParams.getFirstChild();\n  while (arg.getNext() != null && param.getNext() != null) {\n    arg = arg.getNext();\n    param = param.getNext();\n    // Skip the 'this' parameter if this call is made as a method call.\n    if (NodeUtil.isObjectCall(callNode) && param == fnParams.getFirstChild()) {\n      param = param.getNext();\n      if (param == null) {\n        // If there are no named parameters left, return YES.\n        return CanInlineResult.YES;\n      }\n    }\n    if (!param.getString().equals(\"_\")) {\n      argMap.put(param.getString(), argMap.getOrDefault(param.getString(), 0) + 1);\n    }\n  }\n\n  // Next, we check for side effects and mutability of each argument in the map.\n  for (Map.Entry<String, Integer> entry : argMap.entrySet()) {\n    String argName = entry.getKey();\n    int count = entry.getValue();\n    if (count > 1 || NodeUtil.getNameReferenceCount(block, argName) > 1\n        || NodeUtil.getMovableSideEffectFreeUsageCount(block, compiler, argName) != count) {\n      return CanInlineResult.NO;\n    }\n  }\n\n  // Finally, we check for side effects in any extra arguments.\n  while (arg.getNext() != null) {\n    arg = arg.getNext();\n    if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n      return CanInlineResult.NO;\n    }\n    // Skip the 'this' argument if this call is made as a method call.\n    if (NodeUtil.isObjectCall(callNode) && arg == callNode.getNext()) {\n      arg = arg.getNext();\n    }\n    if (arg == null) {\n      // If there are no more arguments left, return YES.\n      return CanInlineResult.YES;\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..28614478 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,77 +686,75 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node block = fnNode.getLastChild();\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n-    }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  if (!block.hasChildren() || block.hasOneChild() && block.getFirstChild().isReturn()) {\n+    // If the block is empty or has only one return statement, there are no side effects.\n+    return CanInlineResult.YES;\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n+  Map<String, Integer> argMap = new HashMap<>();\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+  Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+  // If the function has rest parameters, mark it as not eligible for direct call node replacement.\n+  if (fnParams.hasChildren() && fnParams.getLastChild().isRest()) {\n+    return CanInlineResult.NO;\n+  }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+  // First, we map each function argument to its corresponding parameter.\n+  Node arg = callNode;\n+  Node param = fnParams.getFirstChild();\n+  while (arg.getNext() != null && param.getNext() != null) {\n+    arg = arg.getNext();\n+    param = param.getNext();\n+    // Skip the 'this' parameter if this call is made as a method call.\n+    if (NodeUtil.isObjectCall(callNode) && param == fnParams.getFirstChild()) {\n+      param = param.getNext();\n+      if (param == null) {\n+        // If there are no named parameters left, return YES.\n+        return CanInlineResult.YES;\n       }\n     }\n+    if (!param.getString().equals(\"_\")) {\n+      argMap.put(param.getString(), argMap.getOrDefault(param.getString(), 0) + 1);\n+    }\n+  }\n \n-    return CanInlineResult.YES;\n+  // Next, we check for side effects and mutability of each argument in the map.\n+  for (Map.Entry<String, Integer> entry : argMap.entrySet()) {\n+    String argName = entry.getKey();\n+    int count = entry.getValue();\n+    if (count > 1 || NodeUtil.getNameReferenceCount(block, argName) > 1\n+        || NodeUtil.getMovableSideEffectFreeUsageCount(block, compiler, argName) != count) {\n+      return CanInlineResult.NO;\n+    }\n+  }\n+\n+  // Finally, we check for side effects in any extra arguments.\n+  while (arg.getNext() != null) {\n+    arg = arg.getNext();\n+    if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n+      return CanInlineResult.NO;\n+    }\n+    // Skip the 'this' argument if this call is made as a method call.\n+    if (NodeUtil.isObjectCall(callNode) && arg == callNode.getNext()) {\n+      arg = arg.getNext();\n+    }\n+    if (arg == null) {\n+      // If there are no more arguments left, return YES.\n+      return CanInlineResult.YES;\n+    }\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}