{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double epsilon = 1e-15;\n    double small = 1e-50;\n    double gamma = gamma(a);\n    if (x < 0.0) {\n        return Double.NaN;\n    } else if (x == 0.0) {\n        return 0.0;\n    } else if (x >= a + 1.0) {\n        double igf = continuedFraction(a, x, epsilon, small);\n        return 1.0 - igf * Math.exp(-x + a * Math.log(x) - logGamma(a));\n    } else {\n        double sum = a;\n        double term = a;\n        for (int n = 1; n <= 1000; n++) {\n            term *= x / (a + n);\n            sum += term;\n            if (Math.abs(term) < Math.abs(sum) * epsilon) {\n                return sum / gamma;\n            }\n        }\n        return Double.NaN;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..35bae4449 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,30 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double epsilon = 1e-15;\n+    double small = 1e-50;\n+    double gamma = gamma(a);\n+    if (x < 0.0) {\n+        return Double.NaN;\n+    } else if (x == 0.0) {\n+        return 0.0;\n+    } else if (x >= a + 1.0) {\n+        double igf = continuedFraction(a, x, epsilon, small);\n+        return 1.0 - igf * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+    } else {\n+        double sum = a;\n+        double term = a;\n+        for (int n = 1; n <= 1000; n++) {\n+            term *= x / (a + n);\n+            sum += term;\n+            if (Math.abs(term) < Math.abs(sum) * epsilon) {\n+                return sum / gamma;\n+            }\n+        }\n+        return Double.NaN;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}