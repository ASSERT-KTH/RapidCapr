{
    "patch": "      if (block.isFunction) {\n        // Ignore variables defined in functions; their lifetime is\n        // not easily analyzed.\n        return false;\n      } else if (block.isLoop) {\n        // Detect if the variable is assigned in the loop. If so, it does\n        // not necessarily have the same value at the end of the loop as\n        // at the beginning.\n        int lastInstructionIndex = block.getLastInstructionIndex();\n        for (int i = ref.getInstructionIndex();\n             i < lastInstructionIndex; i++) {\n          JSType type =\n              getValueAfterInstruction(references.get(0).getNode(), i, scope);\n          if (type.equals(UNKNOWN_TYPE)) {\n            // The variable is redefined within the loop.\n            return false;\n          }\n        }\n        return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..cea0a7c5 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,25 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        // Ignore variables defined in functions; their lifetime is\n+        // not easily analyzed.\n+        return false;\n+      } else if (block.isLoop) {\n+        // Detect if the variable is assigned in the loop. If so, it does\n+        // not necessarily have the same value at the end of the loop as\n+        // at the beginning.\n+        int lastInstructionIndex = block.getLastInstructionIndex();\n+        for (int i = ref.getInstructionIndex();\n+             i < lastInstructionIndex; i++) {\n+          JSType type =\n+              getValueAfterInstruction(references.get(0).getNode(), i, scope);\n+          if (type.equals(UNKNOWN_TYPE)) {\n+            // The variable is redefined within the loop.\n+            return false;\n+          }\n+        }\n+        return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}