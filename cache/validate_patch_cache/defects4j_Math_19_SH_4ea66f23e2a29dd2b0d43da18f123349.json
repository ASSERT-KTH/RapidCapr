{
    "patch": "    if (hasFiniteBounds) {\n        boolean hasInfiniteBounds = Arrays.stream(lB).anyMatch(Double::isInfinite) ||\n                                      Arrays.stream(uB).anyMatch(Double::isInfinite);\n        if (hasInfiniteBounds) {\n            // If there is at least one finite bound, none can be infinite,\n            // because mixed cases are not supported by the current code.\n            throw new MathUnsupportedOperationException();\n        } else {\n            // Convert API to internal handling of boundaries.\n            boundaries = new double[2][];\n            boundaries[0] = lB;\n            boundaries[1] = uB;\n\n            // Abort early if the normalization will overflow (cf. \"encode\" method).\n            final double[] s = sigma;\n            boolean overflows = false;\n            for (int i = 0; i < s.length; i++) {\n                final double si = s[i];\n                final double ubi = uB[i] - init[i];\n                final double lbi = init[i] - lB[i];\n                if (ubi <= 0 ||\n                    lbi <= 0 ||\n                    si < FastMath.max(FastMath.ulp(init[i]), FastMath.min(ubi, lbi)) ||\n                    si > FastMath.max(ubi, lbi)) {\n                    overflows = true;\n                    break;\n                }\n            }\n\n            if (overflows) {\n                throw new NumberIsTooLargeException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_THE_JACOBIAN,\n                                                     0, 0, true);\n            }\n        }\n    } else {\n        // Convert API to internal handling of boundaries.\n        boundaries = null;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..28dc3f467 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,44 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+    if (hasFiniteBounds) {\n+        boolean hasInfiniteBounds = Arrays.stream(lB).anyMatch(Double::isInfinite) ||\n+                                      Arrays.stream(uB).anyMatch(Double::isInfinite);\n+        if (hasInfiniteBounds) {\n+            // If there is at least one finite bound, none can be infinite,\n+            // because mixed cases are not supported by the current code.\n+            throw new MathUnsupportedOperationException();\n+        } else {\n+            // Convert API to internal handling of boundaries.\n+            boundaries = new double[2][];\n+            boundaries[0] = lB;\n+            boundaries[1] = uB;\n+\n+            // Abort early if the normalization will overflow (cf. \"encode\" method).\n+            final double[] s = sigma;\n+            boolean overflows = false;\n+            for (int i = 0; i < s.length; i++) {\n+                final double si = s[i];\n+                final double ubi = uB[i] - init[i];\n+                final double lbi = init[i] - lB[i];\n+                if (ubi <= 0 ||\n+                    lbi <= 0 ||\n+                    si < FastMath.max(FastMath.ulp(init[i]), FastMath.min(ubi, lbi)) ||\n+                    si > FastMath.max(ubi, lbi)) {\n+                    overflows = true;\n+                    break;\n+                }\n+            }\n+\n+            if (overflows) {\n+                throw new NumberIsTooLargeException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_THE_JACOBIAN,\n+                                                     0, 0, true);\n+            }\n+        }\n+    } else {\n+        // Convert API to internal handling of boundaries.\n+        boundaries = null;\n+    }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}