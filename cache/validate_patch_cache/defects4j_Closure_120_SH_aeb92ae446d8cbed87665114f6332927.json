{
    "patch": "      if (block.isFunction || block.isLoop) {\n        // A variable that is defined in a function scope\n        // may be redefined within a child scope.\n        if (ref.isInitializingDeclaration() && (ref != references.get(0) || block != ref.getBasicBlock())) {\n          return false;\n        }\n        break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..561e2f41 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,14 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction || block.isLoop) {\n+        // A variable that is defined in a function scope\n+        // may be redefined within a child scope.\n+        if (ref.isInitializingDeclaration() && (ref != references.get(0) || block != ref.getBasicBlock())) {\n+          return false;\n+        }\n+        break;\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}