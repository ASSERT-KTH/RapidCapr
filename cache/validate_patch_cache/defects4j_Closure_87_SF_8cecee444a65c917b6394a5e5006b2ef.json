{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n        Node exprChild = maybeExpr.getFirstChild();\n        while (exprChild != null) {\n          if (!NodeUtil.isExpressionNode(exprChild)) {\n            return false;\n          }\n          exprChild = exprChild.getNext();\n        }\n      } else if (maybeExpr.getType() == Token.IF) {\n        Node condition = maybeExpr.getFirstChild();\n        Node thenBlock = condition.getNext();\n        Node elseBlock = thenBlock.getNext();\n        return elseBlock != null &&\n            elseBlock.isBlock() &&\n            thenBlock.hasOneChild() &&\n            elseBlock.hasOneChild() &&\n            NodeUtil.isExpressionNode(thenBlock.getFirstChild()) &&\n            NodeUtil.isExpressionNode(elseBlock.getFirstChild());\n      } else if (maybeExpr.getType() == Token.HOOK) {\n        Node thenExpr = maybeExpr.getSecondChild();\n        Node elseExpr = maybeExpr.getLastChild();\n        return NodeUtil.isExpressionNode(thenExpr) &&\n            NodeUtil.isExpressionNode(elseExpr);\n      } else if (NodeUtil.isExpressionNode(maybeExpr)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..796420f8 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,42 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+        Node exprChild = maybeExpr.getFirstChild();\n+        while (exprChild != null) {\n+          if (!NodeUtil.isExpressionNode(exprChild)) {\n+            return false;\n+          }\n+          exprChild = exprChild.getNext();\n+        }\n+      } else if (maybeExpr.getType() == Token.IF) {\n+        Node condition = maybeExpr.getFirstChild();\n+        Node thenBlock = condition.getNext();\n+        Node elseBlock = thenBlock.getNext();\n+        return elseBlock != null &&\n+            elseBlock.isBlock() &&\n+            thenBlock.hasOneChild() &&\n+            elseBlock.hasOneChild() &&\n+            NodeUtil.isExpressionNode(thenBlock.getFirstChild()) &&\n+            NodeUtil.isExpressionNode(elseBlock.getFirstChild());\n+      } else if (maybeExpr.getType() == Token.HOOK) {\n+        Node thenExpr = maybeExpr.getSecondChild();\n+        Node elseExpr = maybeExpr.getLastChild();\n+        return NodeUtil.isExpressionNode(thenExpr) &&\n+            NodeUtil.isExpressionNode(elseExpr);\n+      } else if (NodeUtil.isExpressionNode(maybeExpr)) {\n+        return true;\n       }\n     }\n-\n-    return false;\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}