{
    "patch": "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n            throws FractionConversionException {\n        final double pInf = Double.POSITIVE_INFINITY;\n        final double nInf = Double.NEGATIVE_INFINITY;\n        final double nan = Double.NaN;\n\n        long overflow = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long) FastMath.floor(r0);\n        if (a0 > overflow) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        // check for (almost) integer arguments, which should not go\n        // to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2;\n        long q2;\n        int n = 1;\n        boolean stop = false;\n        do {\n            double r1 = pInf;\n            long d1 = 0;\n            do {\n                r1 = 1.0 / (r0 - a0);\n                long a1 = (long) FastMath.floor(r1);\n                long p2a = (a1 * p1) + p0;\n                long q2a = (a1 * q1) + q0;\n                if ((p2a > overflow) || (q2a > overflow)) {\n                    throw new FractionConversionException(value, p2a, q2a);\n                }\n                long p2b = p1;\n                long q2b = q1;\n                long delta = FastMath.abs(p2a) + FastMath.abs(q2a);\n\n                if (delta < Integer.MAX_VALUE) {\n                    if (FastMath.abs(p2a / (double) q2a -\n                            value) <\n                            FastMath.abs(p2b / (double) q2b -\n                                    value)) {\n                        p2 = p2a;\n                        q2 = q2a;\n                    } else {\n                        p2 = p2b;\n                        q2 = q2b;\n                    }\n                    break;\n                } else if (d1 >= maxDenominator) {\n                    throw new FractionConversionException(value,\n                            (p2a * q1) - (q2a * p1),\n                            q2a * q1);\n                }\n                d1++;\n                r0 = (r0 >= 0) ? r0 + epsilon : r0 - epsilon;\n                a0 = (long) FastMath.floor(r0);\n            } while (a0 <= -RADIX || a0 >= RADIX);\n\n            if (n >= maxIterations) {\n                throw new FractionConversionException(value, maxIterations);\n            }\n\n            double convergent = (double) p2 / (double) q2;\n            if (FastMath.abs(convergent - value) < epsilon && q2 <= maxDenominator) {\n                stop = true;\n            } else {\n                if (delta >= Integer.MAX_VALUE) {\n                    throw new FractionConversionException(value,\n                            (p1 * q2) - (q1 * p2),\n                            q1 * q2);\n                }\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = (long) FastMath.floor(r1);\n                r0 = r1;\n                ++n;\n            }\n        } while (!stop);\n\n        if (q2 < maxDenominator) {\n            this.numerator = (int) p2;\n            this.denominator = (int) q2;\n        } else {\n            this.numerator = (int) p1;\n            this.denominator = (int) q1;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..b4d4d128f 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -172,12 +172,15 @@ public class Fraction\n      * @throws FractionConversionException if the continued fraction failed to\n      *         converge.\n      */\n-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n-        throws FractionConversionException\n-    {\n+private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n+            throws FractionConversionException {\n+        final double pInf = Double.POSITIVE_INFINITY;\n+        final double nInf = Double.NEGATIVE_INFINITY;\n+        final double nan = Double.NaN;\n+\n         long overflow = Integer.MAX_VALUE;\n         double r0 = value;\n-        long a0 = (long)FastMath.floor(r0);\n+        long a0 = (long) FastMath.floor(r0);\n         if (a0 > overflow) {\n             throw new FractionConversionException(value, a0, 1l);\n         }\n@@ -195,38 +198,70 @@ public class Fraction\n         long p1 = a0;\n         long q1 = 1;\n \n-        long p2 = 0;\n-        long q2 = 1;\n-\n-        int n = 0;\n+        long p2;\n+        long q2;\n+        int n = 1;\n         boolean stop = false;\n         do {\n-            ++n;\n-            double r1 = 1.0 / (r0 - a0);\n-            long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n+            double r1 = pInf;\n+            long d1 = 0;\n+            do {\n+                r1 = 1.0 / (r0 - a0);\n+                long a1 = (long) FastMath.floor(r1);\n+                long p2a = (a1 * p1) + p0;\n+                long q2a = (a1 * q1) + q0;\n+                if ((p2a > overflow) || (q2a > overflow)) {\n+                    throw new FractionConversionException(value, p2a, q2a);\n+                }\n+                long p2b = p1;\n+                long q2b = q1;\n+                long delta = FastMath.abs(p2a) + FastMath.abs(q2a);\n+\n+                if (delta < Integer.MAX_VALUE) {\n+                    if (FastMath.abs(p2a / (double) q2a -\n+                            value) <\n+                            FastMath.abs(p2b / (double) q2b -\n+                                    value)) {\n+                        p2 = p2a;\n+                        q2 = q2a;\n+                    } else {\n+                        p2 = p2b;\n+                        q2 = q2b;\n+                    }\n+                    break;\n+                } else if (d1 >= maxDenominator) {\n+                    throw new FractionConversionException(value,\n+                            (p2a * q1) - (q2a * p1),\n+                            q2a * q1);\n+                }\n+                d1++;\n+                r0 = (r0 >= 0) ? r0 + epsilon : r0 - epsilon;\n+                a0 = (long) FastMath.floor(r0);\n+            } while (a0 <= -RADIX || a0 >= RADIX);\n+\n+            if (n >= maxIterations) {\n+                throw new FractionConversionException(value, maxIterations);\n             }\n \n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n+            double convergent = (double) p2 / (double) q2;\n+            if (FastMath.abs(convergent - value) < epsilon && q2 <= maxDenominator) {\n+                stop = true;\n+            } else {\n+                if (delta >= Integer.MAX_VALUE) {\n+                    throw new FractionConversionException(value,\n+                            (p1 * q2) - (q1 * p2),\n+                            q1 * q2);\n+                }\n                 p0 = p1;\n                 p1 = p2;\n                 q0 = q1;\n                 q1 = q2;\n-                a0 = a1;\n+                a0 = (long) FastMath.floor(r1);\n                 r0 = r1;\n-            } else {\n-                stop = true;\n+                ++n;\n             }\n         } while (!stop);\n \n-        if (n >= maxIterations) {\n-            throw new FractionConversionException(value, maxIterations);\n-        }\n-\n         if (q2 < maxDenominator) {\n             this.numerator = (int) p2;\n             this.denominator = (int) q2;\n@@ -234,7 +269,6 @@ public class Fraction\n             this.numerator = (int) p1;\n             this.denominator = (int) q1;\n         }\n-\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}