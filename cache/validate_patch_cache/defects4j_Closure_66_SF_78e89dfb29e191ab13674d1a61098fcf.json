{
    "patch": "public static double getTypedPercent(String json) {\n    double total = 0;\n    double typed = 0;\n    char[] charArray = json.toCharArray();\n    for (int i = 0; i < charArray.length; i++) {\n        if (charArray[i] == '{' || charArray[i] == '[') {\n            total++;\n            boolean isTyped = false;\n            for (int j = i; j < charArray.length; j++) {\n                if (charArray[j] == ':') {\n                    isTyped = true;\n                } else if (charArray[j] == '}' || charArray[j] == ',' || charArray[j] == ']') {\n                    break;\n                } else if (isTyped) {\n                    if (charArray[j] == '\"' || charArray[j] == '\\'') {\n                        typed++;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (total == 0) {\n        return 0;\n    } else {\n        return (typed / total) * 100;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..f77794bf 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,34 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    double total = 0;\n+    double typed = 0;\n+    char[] charArray = json.toCharArray();\n+    for (int i = 0; i < charArray.length; i++) {\n+        if (charArray[i] == '{' || charArray[i] == '[') {\n+            total++;\n+            boolean isTyped = false;\n+            for (int j = i; j < charArray.length; j++) {\n+                if (charArray[j] == ':') {\n+                    isTyped = true;\n+                } else if (charArray[j] == '}' || charArray[j] == ',' || charArray[j] == ']') {\n+                    break;\n+                } else if (isTyped) {\n+                    if (charArray[j] == '\"' || charArray[j] == '\\'') {\n+                        typed++;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    if (total == 0) {\n+        return 0;\n+    } else {\n+        return (typed / total) * 100;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}