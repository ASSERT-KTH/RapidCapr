{
    "patch": "    public double[] fit() {\n        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        final double sigmaGoal = Math.max(DEFAULT_ABSOLUTE_THRESHOLD * getObservations().getMaxValue(),\n                                          DEFAULT_RELATIVE_THRESHOLD * getObservations().getRMS());\n        final double initialSigma = getObservations().getRMS();\n        final double[] weights;\n        if (initialSigma == 0) {\n            // handles all special cases where sigma is zero\n            weights = new double[getObservations().getDimension()];\n            Arrays.fill(weights, Double.POSITIVE_INFINITY);\n        } else if (sigmaGoal <= initialSigma) {\n            // we'll use uniform weights\n            weights = new double[getObservations().getDimension()];\n            Arrays.fill(weights, 1);\n        } else {\n            // build the l-inf OPTIMAL WEIGHTS using the IRLS algorithm.\n            weights = computeWeight(getResiduals(), initialSigma, sigmaGoal);\n        }\n        return fit(new Gaussian.Parametric(), guess, weights);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..27d999f89 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,23 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        final double sigmaGoal = Math.max(DEFAULT_ABSOLUTE_THRESHOLD * getObservations().getMaxValue(),\n+                                          DEFAULT_RELATIVE_THRESHOLD * getObservations().getRMS());\n+        final double initialSigma = getObservations().getRMS();\n+        final double[] weights;\n+        if (initialSigma == 0) {\n+            // handles all special cases where sigma is zero\n+            weights = new double[getObservations().getDimension()];\n+            Arrays.fill(weights, Double.POSITIVE_INFINITY);\n+        } else if (sigmaGoal <= initialSigma) {\n+            // we'll use uniform weights\n+            weights = new double[getObservations().getDimension()];\n+            Arrays.fill(weights, 1);\n+        } else {\n+            // build the l-inf OPTIMAL WEIGHTS using the IRLS algorithm.\n+            weights = computeWeight(getResiduals(), initialSigma, sigmaGoal);\n+        }\n+        return fit(new Gaussian.Parametric(), guess, weights);\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}