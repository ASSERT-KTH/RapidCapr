{
    "patch": "    if (finallyNode.isFunction()) {\n      Node functionReturn = IR.returnNode();\n      NodeUtil.markFunctionsDeleted(functionReturn, compiler);\n      cfa.createSyntheticExitEdge(fromNode, functionReturn, finallyNode);\n    } else {\n      cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..7b72597a 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,12 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+    if (finallyNode.isFunction()) {\n+      Node functionReturn = IR.returnNode();\n+      NodeUtil.markFunctionsDeleted(functionReturn, compiler);\n+      cfa.createSyntheticExitEdge(fromNode, functionReturn, finallyNode);\n+    } else {\n+      cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}