{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            try {\n                return iChronology.get(partial, instant);\n            } catch (IllegalFieldValueException e) {\n                if (e.getIllegalFieldValue() != DateTimeConstants.FEBRUARY || e.getIllegalValue() != 29) {\n                    throw e;\n                }\n                int month = iChronology.monthOfYear().set(instant, iChronology.monthOfYear().get(instant) + valueToAdd);\n                long dayMs = iChronology.dayOfYear().set(instant, 1);\n                dayMs = iChronology.monthOfYear().set(dayMs, month);\n                dayMs = Math.min(dayMs + iChronology.millisPerMonth().getMillis(instant), iChronology.getYearMonthMillis(iChronology.year().get(instant), month));\n                return iChronology.get(partial, dayMs);\n            }\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..079e73c5 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,14 +206,24 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            try {\n+                return iChronology.get(partial, instant);\n+            } catch (IllegalFieldValueException e) {\n+                if (e.getIllegalFieldValue() != DateTimeConstants.FEBRUARY || e.getIllegalValue() != 29) {\n+                    throw e;\n+                }\n+                int month = iChronology.monthOfYear().set(instant, iChronology.monthOfYear().get(instant) + valueToAdd);\n+                long dayMs = iChronology.dayOfYear().set(instant, 1);\n+                dayMs = iChronology.monthOfYear().set(dayMs, month);\n+                dayMs = Math.min(dayMs + iChronology.millisPerMonth().getMillis(instant), iChronology.getYearMonthMillis(iChronology.year().get(instant), month));\n+                return iChronology.get(partial, dayMs);\n+            }\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}