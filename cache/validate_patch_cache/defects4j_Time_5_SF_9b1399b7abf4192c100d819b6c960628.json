{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    long millis = getMillis()\n            + (((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND)\n            + (((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE)\n            + (((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR)\n            + (((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY)\n            + (((long) (getWeeks() * 7)) * DateTimeConstants.MILLIS_PER_DAY);\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    if (type.isSupported(DurationFieldType.months()) || type.isSupported(DurationFieldType.years())) {\n        int years = getYears();\n        int months = getMonths();\n        int totalMonths = (years * 12) + months;\n        int remainderMonths = totalMonths % 12;\n        int quotientYears = totalMonths / 12;\n        if (type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(quotientYears);\n        }\n        if (type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(remainderMonths);\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..67c670e5 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,31 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    long millis = getMillis()\n+            + (((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND)\n+            + (((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE)\n+            + (((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR)\n+            + (((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY)\n+            + (((long) (getWeeks() * 7)) * DateTimeConstants.MILLIS_PER_DAY);\n+\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    if (type.isSupported(DurationFieldType.months()) || type.isSupported(DurationFieldType.years())) {\n         int years = getYears();\n         int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+        int totalMonths = (years * 12) + months;\n+        int remainderMonths = totalMonths % 12;\n+        int quotientYears = totalMonths / 12;\n+        if (type.isSupported(DurationFieldType.years())) {\n+            result = result.withYears(quotientYears);\n+        }\n+        if (type.isSupported(DurationFieldType.months())) {\n+            result = result.withMonths(remainderMonths);\n         }\n-        return result;\n     }\n+    return result;\n+}\n \n }",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}