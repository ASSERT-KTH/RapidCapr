{
    "patch": "    // Strip unreferenced args off the end of the function declaration.\n    Node argNode = argList.getFirstChild();\n    while (argNode != null) {\n      String argName = argNode.getString();\n      Var var = fnScope.getVar(argName);\n      if (!referenced.contains(var)) {\n        argNode = argNode.getNext();\n        argList.removeChild(argNode.getPrevious());\n        compiler.reportCodeChange();\n      } else {\n        argNode = argNode.getNext();\n      }\n    }\n\n    if (modifyCallSites) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c3706c4d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,21 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node argNode = argList.getFirstChild();\n+    while (argNode != null) {\n+      String argName = argNode.getString();\n+      Var var = fnScope.getVar(argName);\n+      if (!referenced.contains(var)) {\n+        argNode = argNode.getNext();\n+        argList.removeChild(argNode.getPrevious());\n+        compiler.reportCodeChange();\n+      } else {\n+        argNode = argNode.getNext();\n+      }\n+    }\n+\n+    if (modifyCallSites) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}