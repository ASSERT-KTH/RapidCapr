{
    "patch": "      // Only fold calls to String(x) if x is an immutable value\n      if (value != null &&\n          NodeUtil.isImmutableValue(value) &&\n          !NodeUtil.mayHaveSideEffects(value)) {\n        // If x is a primitive value, fold the call to String(x) to '' + x\n        if (NodeUtil.isImmutablePrimitiveValue(value)) {\n          Node addition = IR.add(\n              IR.string(\"\").srcref(callTarget),\n              value.detachFromParent());\n          n.getParent().replaceChild(n, addition);\n          reportCodeChange();\n          return addition;\n        }\n        // If x is an object, fold the call to String(x) to x.toString()\n        if (value.isObjectLit() || value.isFunction()) {\n          Node functionCall = IR.call(value.getprop(NodeUtil.JS_TO_STRING_METHOD).srcref(callTarget), value.detachFromParent());\n          n.getParent().replaceChild(n, functionCall);\n          reportCodeChange();\n          return functionCall;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..15f5ade0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,26 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+      // Only fold calls to String(x) if x is an immutable value\n+      if (value != null &&\n+          NodeUtil.isImmutableValue(value) &&\n+          !NodeUtil.mayHaveSideEffects(value)) {\n+        // If x is a primitive value, fold the call to String(x) to '' + x\n+        if (NodeUtil.isImmutablePrimitiveValue(value)) {\n+          Node addition = IR.add(\n+              IR.string(\"\").srcref(callTarget),\n+              value.detachFromParent());\n+          n.getParent().replaceChild(n, addition);\n+          reportCodeChange();\n+          return addition;\n+        }\n+        // If x is an object, fold the call to String(x) to x.toString()\n+        if (value.isObjectLit() || value.isFunction()) {\n+          Node functionCall = IR.call(value.getprop(NodeUtil.JS_TO_STRING_METHOD).srcref(callTarget), value.detachFromParent());\n+          n.getParent().replaceChild(n, functionCall);\n+          reportCodeChange();\n+          return functionCall;\n+        }\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}