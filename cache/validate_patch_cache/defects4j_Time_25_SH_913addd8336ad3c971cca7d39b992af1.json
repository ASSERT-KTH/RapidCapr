{
    "patch": "            if (offsetLocal != offsetAdjusted) {\n                // detect if we have a discontinuity in the past\n                long prevLocal = previousTransition(instantAdjusted);\n                if (prevLocal == instantAdjusted - offsetLocal) {\n                    int diff = offsetAdjusted - offsetLocal;\n                    long prevAdjusted = previousTransition(instantLocal - diff);\n                    if (prevAdjusted != instantLocal - offsetLocal - diff) {\n                        return offsetLocal;\n                    } else {\n                        return getOffset(prevLocal);\n                    }\n                }\n                // detect if we have a discontinuity in the future\n                long nextLocal = nextTransition(instantAdjusted);\n                if (nextLocal == instantAdjusted - offsetLocal) {\n                    int diff = offsetAdjusted - offsetLocal;\n                    long nextAdjusted = nextTransition(instantLocal - diff);\n                    if (nextAdjusted != instantLocal - offsetLocal - diff) {\n                        return offsetLocal;\n                    } else {\n                        return getOffset(nextLocal);\n                    }\n                }\n                // the normal case\n                return offsetAdjusted;\n            } else {\n                return offsetLocal;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4851bb15 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,34 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal != offsetAdjusted) {\n+                // detect if we have a discontinuity in the past\n+                long prevLocal = previousTransition(instantAdjusted);\n+                if (prevLocal == instantAdjusted - offsetLocal) {\n+                    int diff = offsetAdjusted - offsetLocal;\n+                    long prevAdjusted = previousTransition(instantLocal - diff);\n+                    if (prevAdjusted != instantLocal - offsetLocal - diff) {\n+                        return offsetLocal;\n+                    } else {\n+                        return getOffset(prevLocal);\n+                    }\n+                }\n+                // detect if we have a discontinuity in the future\n+                long nextLocal = nextTransition(instantAdjusted);\n+                if (nextLocal == instantAdjusted - offsetLocal) {\n+                    int diff = offsetAdjusted - offsetLocal;\n+                    long nextAdjusted = nextTransition(instantLocal - diff);\n+                    if (nextAdjusted != instantLocal - offsetLocal - diff) {\n+                        return offsetLocal;\n+                    } else {\n+                        return getOffset(nextLocal);\n+                    }\n+                }\n+                // the normal case\n+                return offsetAdjusted;\n+            } else {\n+                return offsetLocal;\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}