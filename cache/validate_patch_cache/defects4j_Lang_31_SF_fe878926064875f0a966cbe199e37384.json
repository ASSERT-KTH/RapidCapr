{
    "patch": "public class StringUtils {\n\n    public static boolean containsAny(final char[] str, final char[] searchChars) {\n        if (searchChars == null || str == null) {\n            return false;\n        }\n\n        int strLength = str.length;\n        int searchLength = searchChars.length;\n        int i, j;\n\n        for (i = 0; i < strLength; i++) {\n            char ch = str[i];\n            for (j = 0; j < searchLength; j++) {\n                char searchChar = searchChars[j];\n                if (ch == searchChar) {\n                    if (Character.isHighSurrogate(ch)) {\n                        if (j == searchLength - 1) {\n                            // missing low surrogate, fine, like indexOf():\n                            return false;\n                        }\n                        if (i < strLength - 1) {\n                            char ch2 = str[i + 1];\n                            if (Character.isLowSurrogate(ch2) && CharUtils.equals(ch, ch2)) {\n                                // matched surrogate pair:\n                                return true;\n                            }\n                        }\n                    } else {\n                        // ordinary character:\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..1197dd13 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,45 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+\n+    public static boolean containsAny(final char[] str, final char[] searchChars) {\n+        if (searchChars == null || str == null) {\n+            return false;\n+        }\n+\n+        int strLength = str.length;\n+        int searchLength = searchChars.length;\n+        int i, j;\n+\n+        for (i = 0; i < strLength; i++) {\n+            char ch = str[i];\n+            for (j = 0; j < searchLength; j++) {\n+                char searchChar = searchChars[j];\n+                if (ch == searchChar) {\n+                    if (Character.isHighSurrogate(ch)) {\n+                        if (j == searchLength - 1) {\n+                            // missing low surrogate, fine, like indexOf():\n+                            return false;\n+                        }\n+                        if (i < strLength - 1) {\n+                            char ch2 = str[i + 1];\n+                            if (Character.isLowSurrogate(ch2) && CharUtils.equals(ch, ch2)) {\n+                                // matched surrogate pair:\n+                                return true;\n+                            }\n+                        }\n+                    } else {\n+                        // ordinary character:\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}