{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n\n    double gammap = incompleteGammaP(a, x);\n    double gammaq = Gamma.regularizedGammaQ(a, x);\n\n    double d = x + a * Math.log(x) - (Gamma.logGamma(a + 1.0));\n    if (d < -MAX_LOGSPLINE_ERROR) {\n        return (gammap);\n    }\n\n    double sum = 0;\n\n    double term = 1.0 / a;\n    double apn = 1.0 / a;\n    double ap = apn;\n\n    int n = 1;\n    while (Math.abs(term / ap) > EPSILON) {\n        term *= x / (a + n);\n        apn *= (a + n - 1.0) / a;\n        sum += term;\n        ap += apn;\n        n++;\n    }\n\n    return Math.exp(d) * (gammap + gammaq * sum / ap);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..e8a36f195 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,36 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+\n+    double gammap = incompleteGammaP(a, x);\n+    double gammaq = Gamma.regularizedGammaQ(a, x);\n+\n+    double d = x + a * Math.log(x) - (Gamma.logGamma(a + 1.0));\n+    if (d < -MAX_LOGSPLINE_ERROR) {\n+        return (gammap);\n+    }\n+\n+    double sum = 0;\n+\n+    double term = 1.0 / a;\n+    double apn = 1.0 / a;\n+    double ap = apn;\n+\n+    int n = 1;\n+    while (Math.abs(term / ap) > EPSILON) {\n+        term *= x / (a + n);\n+        apn *= (a + n - 1.0) / a;\n+        sum += term;\n+        ap += apn;\n+        n++;\n+    }\n+\n+    return Math.exp(d) * (gammap + gammaq * sum / ap);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}