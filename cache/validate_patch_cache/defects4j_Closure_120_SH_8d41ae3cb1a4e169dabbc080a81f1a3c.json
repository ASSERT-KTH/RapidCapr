{
    "patch": "        if (block.isFunction) {\n          boolean hasMultipleAssignments = false;\n          for (Reference r : references) {\n            if (r.isAssignment() && r != ref) {\n              hasMultipleAssignments = true;\n              break;\n            }\n          }\n          if (!hasMultipleAssignments && !ref.isSpread()) {\n            return !ref.isParam();\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c7f9d27d 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          boolean hasMultipleAssignments = false;\n+          for (Reference r : references) {\n+            if (r.isAssignment() && r != ref) {\n+              hasMultipleAssignments = true;\n+              break;\n+            }\n+          }\n+          if (!hasMultipleAssignments && !ref.isSpread()) {\n+            return !ref.isParam();\n+          }\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}