{
    "patch": "      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (NodeUtil.isObjectLitKey(parent, lhs)) {\n            // Don't traverse function expressions in object literals.\n            return false;\n          }\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n        } else {\n          // Only traverse the right side if it's not an assignment to a prototype\n          // property or subproperty.\n          if (NodeUtil.isGet(lhs)) {\n            if (lhs.getType() == Token.GETPROP &&\n                lhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n            Node llhs = lhs.getFirstChild();\n            if (llhs.getType() == Token.GETPROP &&\n                llhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n          }\n          if (NodeUtil.isObjectLitKey(parent, lhs)) {\n            // Don't traverse function expressions in object literals.\n            if (n.getParent().getType() != Token.CATCH) {\n              return false;\n            }\n          } else {\n            // Only traverse the right side of the assignment if:\n            // 1. It's a function expression, or\n            // 2. It's a function expression assigned to a variable, or\n            // 3. It's a function expression assigned to a property without having a name.\n            if (!NodeUtil.isFunctionExpression(n)) {\n              return false;\n            }\n            if (lhs.getType() == Token.NAME) {\n              Node grandParent = parent.getParent();\n              if (grandParent.getType() == Token.VAR) {\n                // Traverse function expression assigned to a variable.\n                return true;\n              } else if (grandParent.getType() == Token.CALL &&\n                         NodeUtil.isName(grandParent.getFirstChild(), \"goog.provide\")) {\n                // Traverse function expression passed to a goog.provide() call.\n                return true;\n              } else if (NodeUtil.isObjLitProperty(parent) &&\n                         !parent.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n                // Traverse function expression assigned to a property without having a name.\n                return true;\n              } else {\n                return false;\n              }\n            }\n          }\n        }\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..599c8502 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,70 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (NodeUtil.isObjectLitKey(parent, lhs)) {\n+            // Don't traverse function expressions in object literals.\n+            return false;\n+          }\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+        } else {\n+          // Only traverse the right side if it's not an assignment to a prototype\n+          // property or subproperty.\n+          if (NodeUtil.isGet(lhs)) {\n+            if (lhs.getType() == Token.GETPROP &&\n+                lhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+            Node llhs = lhs.getFirstChild();\n+            if (llhs.getType() == Token.GETPROP &&\n+                llhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+          }\n+          if (NodeUtil.isObjectLitKey(parent, lhs)) {\n+            // Don't traverse function expressions in object literals.\n+            if (n.getParent().getType() != Token.CATCH) {\n+              return false;\n+            }\n+          } else {\n+            // Only traverse the right side of the assignment if:\n+            // 1. It's a function expression, or\n+            // 2. It's a function expression assigned to a variable, or\n+            // 3. It's a function expression assigned to a property without having a name.\n+            if (!NodeUtil.isFunctionExpression(n)) {\n+              return false;\n+            }\n+            if (lhs.getType() == Token.NAME) {\n+              Node grandParent = parent.getParent();\n+              if (grandParent.getType() == Token.VAR) {\n+                // Traverse function expression assigned to a variable.\n+                return true;\n+              } else if (grandParent.getType() == Token.CALL &&\n+                         NodeUtil.isName(grandParent.getFirstChild(), \"goog.provide\")) {\n+                // Traverse function expression passed to a goog.provide() call.\n+                return true;\n+              } else if (NodeUtil.isObjLitProperty(parent) &&\n+                         !parent.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n+                // Traverse function expression assigned to a property without having a name.\n+                return true;\n+              } else {\n+                return false;\n+              }\n+            }\n+          }\n+        }\n+      }\n+\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: method isName in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}