{
    "patch": "switch (n.getType()) {\n  case Token.LSH:\n      result = lvalInt << rvalInt;\n      break;\n  case Token.RSH:\n      result = lvalInt >> rvalInt;\n      break;\n  case Token.URSH:\n      // Add 2^32 to the signed int to display the unsigned bits\n      result = Intege",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..919977bd 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,16 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+switch (n.getType()) {\n+  case Token.LSH:\n+      result = lvalInt << rvalInt;\n+      break;\n+  case Token.RSH:\n+      result = lvalInt >> rvalInt;\n+      break;\n+  case Token.URSH:\n+      // Add 2^32 to the signed int to display the unsigned bits\n+      result = Intege\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}