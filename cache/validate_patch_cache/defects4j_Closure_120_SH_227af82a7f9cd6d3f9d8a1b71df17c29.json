{
    "patch": "    List<DiGraphEdge<Node, ControlFlowGraph.Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, ControlFlowGraph.Branch> edge : outEdges) {\n      if (edge.getValue() == ControlFlowGraph.Branch.ON_EX) {\n        return true;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..656887a3 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,12 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+    List<DiGraphEdge<Node, ControlFlowGraph.Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, ControlFlowGraph.Branch> edge : outEdges) {\n+      if (edge.getValue() == ControlFlowGraph.Branch.ON_EX) {\n+        return true;\n+      }\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}