{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n        final int n = m.getColumnDimension();\n\n        if (n > 500) {\n            // Matrix is too large, use Cholesky Decomposition instead\n            final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n            return dec.getL();\n        } else {\n            // Use EigenDecomposition\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..3759e9fdd 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n+private RealMatrix squareRoot(RealMatrix m) {\n+        final int n = m.getColumnDimension();\n+\n+        if (n > 500) {\n+            // Matrix is too large, use Cholesky Decomposition instead\n+            final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+            return dec.getL();\n+        } else {\n+            // Use EigenDecomposition\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n-    }\n+        }\n }",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}