{
    "patch": "// Check if call expression has a valid \"this\" object\nif (!isValidThisObject(parent, thisType)) {\n  report(t, n, CANNOT_CALL_NON_FUNCTION_TYPE, childType.toString());\n  ensureTyped(t, n);\n  return;\n}\n\nNodeUtil.getArgumentsForCallOrNew(n, args);\nvalidateArgumentList(t, args, functionType.getParameterTypes(), n);\n\nensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..265d7cf5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+// Check if call expression has a valid \"this\" object\n+if (!isValidThisObject(parent, thisType)) {\n+  report(t, n, CANNOT_CALL_NON_FUNCTION_TYPE, childType.toString());\n+  ensureTyped(t, n);\n+  return;\n+}\n+\n+NodeUtil.getArgumentsForCallOrNew(n, args);\n+validateArgumentList(t, args, functionType.getParameterTypes(), n);\n+\n+ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}