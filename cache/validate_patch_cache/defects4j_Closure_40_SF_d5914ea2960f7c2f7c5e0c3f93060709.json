{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n\n  // Record global variable and function declarations\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (child.isName()) {\n          NameInformation ns = createNameInformation(t, child, n);\n          Preconditions.checkNotNull(ns);\n          JsName nameInfo = getName(child.getString(), true);\n          recordSet(nameInfo.name, child);\n        }\n      }\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      if (nameNode != null && nameNode.isName()) {\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          JsName nameInfo = getName(nameNode.getString(), true);\n          recordSet(nameInfo.name, nameNode);\n        }\n      }\n    } else if (n.isObjectLit()) {\n      for (Node key = n.getFirstChild(); key != null; key = key.getNext()) {\n        if (key.isStringKey()) {\n          NameInformation ns = createNameInformation(t, key, parent);\n          if (ns != null) {\n            recordSet(ns.name, key);\n          }\n        }\n      }\n    }\n  }\n\n  // Record assignments and call sites\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    if (nameNode != null && nameNode.isName()) {\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null) {\n        if (ns.isPrototype) {\n          recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n        } else {\n          recordSet(ns.name, nameNode);\n        }\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    if (nameNode != null && nameNode.isName()) {\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null && ns.onlyAffectsClassDef) {\n        JsName name = getName(ns.name, false);\n        if (name != null) {\n          refNodes.add(new ClassDefiningFunctionNode(\n              name, n, parent, parent.getParent()));\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..9113c68d 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,67 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+\n+  // Record global variable and function declarations\n+  if (t.inGlobalScope()) {\n+    if (NodeUtil.isVarDeclaration(n)) {\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        if (child.isName()) {\n+          NameInformation ns = createNameInformation(t, child, n);\n           Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n+          JsName nameInfo = getName(child.getString(), true);\n+          recordSet(nameInfo.name, child);\n         }\n       }\n-\n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n-\n+    } else if (NodeUtil.isFunctionDeclaration(n)) {\n+      Node nameNode = n.getFirstChild();\n+      if (nameNode != null && nameNode.isName()) {\n         NameInformation ns = createNameInformation(t, nameNode, n);\n         if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n+          JsName nameInfo = getName(nameNode.getString(), true);\n+          recordSet(nameInfo.name, nameNode);\n+        }\n+      }\n+    } else if (n.isObjectLit()) {\n+      for (Node key = n.getFirstChild(); key != null; key = key.getNext()) {\n+        if (key.isStringKey()) {\n+          NameInformation ns = createNameInformation(t, key, parent);\n+          if (ns != null) {\n+            recordSet(ns.name, key);\n           }\n         }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n+      }\n+    }\n+  }\n+\n+  // Record assignments and call sites\n+  if (n.isAssign()) {\n+    Node nameNode = n.getFirstChild();\n+    if (nameNode != null && nameNode.isName()) {\n+      NameInformation ns = createNameInformation(t, nameNode, n);\n+      if (ns != null) {\n+        if (ns.isPrototype) {\n+          recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n+        } else {\n+          recordSet(ns.name, nameNode);\n+        }\n+      }\n+    }\n+  } else if (n.isCall()) {\n+    Node nameNode = n.getFirstChild();\n+    if (nameNode != null && nameNode.isName()) {\n+      NameInformation ns = createNameInformation(t, nameNode, n);\n+      if (ns != null && ns.onlyAffectsClassDef) {\n+        JsName name = getName(ns.name, false);\n+        if (name != null) {\n           refNodes.add(new ClassDefiningFunctionNode(\n               name, n, parent, parent.getParent()));\n-          }\n         }\n       }\n     }\n+  }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}