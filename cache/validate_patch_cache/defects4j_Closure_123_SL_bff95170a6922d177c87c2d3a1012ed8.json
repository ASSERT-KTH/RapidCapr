{
    "patch": "boolean isArray = false; Object rhs = null; if (rhsNode instanceof ArrayAccessExpr) { ArrayAccessExpr arrayAccessExpr = (ArrayAccessExpr) rhsNode; rhs = new Object() { int rhsArrayIndex = -1; { isArray = true; arrayAccessExpr.getIndex().accept(this); rhs = arrayAccessExpr.getName().toString(); } public void visit(IntegerLiteralExpr n, Object arg) { rhsArrayIndex = n.asInt(); } }; } else { rhs = rhsNode.toString(); } String infixExpr; if (isArray) { infixExpr = String.format(\"%s[%d] %s %s\", rhs.toString(), rhsArrayIndex, operatorSymbol, lhsName); } else { infixExpr = String.format(\"%s %s %s\", rhs.toString(), operatorSymbol, lhsName); }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}