{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = new HashSet<>();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Ignore most indirect references, like x.y (but not x.y(),\n    // since the function referenced by y might reference 'this').\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      // A call target may be using the object as a 'this' value.\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        return false;\n      }\n\n      // If the property is being deleted, then we can bail now. This\n      // property can't be used with property inlining.\n      if (parent.getNext().isDelProp()) {\n        return false;\n      }\n\n      // If the property is being set to something that isn't a constant value\n      // then we can't be sure what it is and shouldn't inline it.\n      if (!isConstant(parent.getNext())) {\n        return false;\n      }\n\n      // NOTE(nicksantos): This pass's object-splitting algorithm has\n      // a blind spot. It assumes that if a property isn't defined on an\n      // object, then the value is undefined. This is not true, because\n      // Object.prototype can have arbitrary properties on it.\n      //\n      // We short-circuit this problem by bailing out if we see a reference\n      // to a property that isn't defined on the object literal. This\n      // isn't a perfect algorithm, but it should catch most cases.\n      String propName = parent.getLastChild().getString();\n      if (!validProperties.contains(propName)) {\n        if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n          validProperties.add(propName);\n        } else {\n          // If the property is being deleted, then we can bail now. This\n          // property can't be used with property inlining.\n          return false;\n        }\n      }\n      continue;\n    }\n\n    // Only rewrite VAR and LET declarations or simple assignment statements\n    if (!isVarOrAssignExprLhs(name)) {\n      continue;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      // A var with no assignment.\n      continue;\n    }\n\n    // We're looking for object literal assignments only.\n    if (!val.isObjectLit()) {\n      return false;\n    }\n\n    // Make sure that the value is not self-referential.\n    for (Node child = val.getFirstChild(); child != null;\n         child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        // ES5 get/set not supported.\n        return false;\n      }\n\n      // Check if child is being set to something that isn't a constant value.\n      if (!isConstant(child.getLastChild())) {\n        return false;\n      }\n\n      validProperties.add(child.getString());\n    }\n\n    // We have found an acceptable object literal assignment. As\n    // long as there are no other assignments that mess things up,\n    // we can inline.\n    ret = true;\n  }\n  return ret;\n}\n\nprivate boolean isConstant(Node n) {\n  switch (n.getToken()) {\n    case TRUE:\n    case FALSE:\n    case NULL:\n    case NUMBER:\n    case STRING:\n      return true;\n    default:\n      return false;\n  }\n}\n\nprivate boolean isVarOrAssignExprLhs(Node n) {\n  if (n.isName()) {\n    return NodeUtil.isNameDeclaration(n.getParent())\n        || NodeUtil.isFunctionDeclaration(n.getParent());\n  } else {\n    return NodeUtil.isLhsByDestructuring(n);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..559078dc 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,106 +152,118 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      Set<String> validProperties = Sets.newHashSet();\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore most indirect references, like x.y (but not x.y(),\n-        // since the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target may be using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n-\n-          // Deleting a property has different semantics from deleting\n-          // a variable, so deleted properties should not be inlined.\n-\n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          String propName = parent.getLastChild().getString();\n-          if (!validProperties.contains(propName)) {\n-            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n-              validProperties.add(propName);\n-            } else {\n-              return false;\n-            }\n-          }\n-          continue;\n-        }\n+private boolean isInlinableObject(List<Reference> refs) {\n+  boolean ret = false;\n+  Set<String> validProperties = new HashSet<>();\n+  for (Reference ref : refs) {\n+    Node name = ref.getNode();\n+    Node parent = ref.getParent();\n+    Node gramps = ref.getGrandparent();\n+\n+    // Ignore most indirect references, like x.y (but not x.y(),\n+    // since the function referenced by y might reference 'this').\n+    if (parent.isGetProp()) {\n+      Preconditions.checkState(parent.getFirstChild() == name);\n+      // A call target may be using the object as a 'this' value.\n+      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n+        return false;\n+      }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n+      // If the property is being deleted, then we can bail now. This\n+      // property can't be used with property inlining.\n+      if (parent.getNext().isDelProp()) {\n+        return false;\n+      }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n-        }\n+      // If the property is being set to something that isn't a constant value\n+      // then we can't be sure what it is and shouldn't inline it.\n+      if (!isConstant(parent.getNext())) {\n+        return false;\n+      }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n+      // NOTE(nicksantos): This pass's object-splitting algorithm has\n+      // a blind spot. It assumes that if a property isn't defined on an\n+      // object, then the value is undefined. This is not true, because\n+      // Object.prototype can have arbitrary properties on it.\n+      //\n+      // We short-circuit this problem by bailing out if we see a reference\n+      // to a property that isn't defined on the object literal. This\n+      // isn't a perfect algorithm, but it should catch most cases.\n+      String propName = parent.getLastChild().getString();\n+      if (!validProperties.contains(propName)) {\n+        if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n+          validProperties.add(propName);\n+        } else {\n+          // If the property is being deleted, then we can bail now. This\n+          // property can't be used with property inlining.\n           return false;\n         }\n+      }\n+      continue;\n+    }\n \n-        // Make sure that the value is not self-referential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n+    // Only rewrite VAR and LET declarations or simple assignment statements\n+    if (!isVarOrAssignExprLhs(name)) {\n+      continue;\n+    }\n \n-          validProperties.add(child.getString());\n-\n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n-          }\n-        }\n+    Node val = ref.getAssignedValue();\n+    if (val == null) {\n+      // A var with no assignment.\n+      continue;\n+    }\n \n+    // We're looking for object literal assignments only.\n+    if (!val.isObjectLit()) {\n+      return false;\n+    }\n+\n+    // Make sure that the value is not self-referential.\n+    for (Node child = val.getFirstChild(); child != null;\n+         child = child.getNext()) {\n+      if (child.isGetterDef() || child.isSetterDef()) {\n+        // ES5 get/set not supported.\n+        return false;\n+      }\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+      // Check if child is being set to something that isn't a constant value.\n+      if (!isConstant(child.getLastChild())) {\n+        return false;\n       }\n-      return ret;\n+\n+      validProperties.add(child.getString());\n     }\n \n+    // We have found an acceptable object literal assignment. As\n+    // long as there are no other assignments that mess things up,\n+    // we can inline.\n+    ret = true;\n+  }\n+  return ret;\n+}\n+\n+private boolean isConstant(Node n) {\n+  switch (n.getToken()) {\n+    case TRUE:\n+    case FALSE:\n+    case NULL:\n+    case NUMBER:\n+    case STRING:\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n+private boolean isVarOrAssignExprLhs(Node n) {\n+  if (n.isName()) {\n+    return NodeUtil.isNameDeclaration(n.getParent())\n+        || NodeUtil.isFunctionDeclaration(n.getParent());\n+  } else {\n+    return NodeUtil.isLhsByDestructuring(n);\n+  }\n+}\n+\n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();\n       return parent.isVar() ||",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}