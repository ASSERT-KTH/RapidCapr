{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x > a + 1.0) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n    double sum = 1.0 / a;\n    double term = sum;\n    while (Math.abs(term / sum) > 1.0e-15) {\n        term *= x / (a + sum);\n        sum += term;\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n    ContinuedFraction fraction = new ContinuedFraction() {\n        @Override\n        protected double getA(int n, double x) {\n            if (n == 0) {\n                return 1.0;\n            } else if (n == 1) {\n                return 1.0 - a;\n            } else {\n                return (2 * n - 1 - a) + x;\n            }\n        }\n\n        @Override\n        protected double getB(int n, double x) {\n            if (n == 0) {\n                return 0.0;\n            } else {\n                return n * (a - n);\n            }\n        }\n    };\n    double epsilon = 10e-15;\n    int maxIterations = 1000;\n    return 1.0 / fraction.evaluate(x, epsilon, maxIterations);\n}\n\npublic static double logGamma(double x) {\n    if (Double.isNaN(x) || x <= 0.0) {\n        return Double.NaN;\n    }\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 101.19539853003;\n    ser += 4.5439340981633 * Math.log(x + 4.5);\n    ser -= Math.log(x) * (x + 4.5);\n    double[] cf = {0.5772156649015329, -0.6558780715202538, \n                   -0.04200263503409524, 0.1665386113822915, \n                   -0.04219773455554433, -0.009621971527876973, \n                   0.0072189432466631, -0.001165167591859065, \n                   -0.0002152416741149508, 0.0001280502823881162, \n                   -0.00002013485478078824, -0.000001250493482142670, \n                   0.000001133027231981696, \n                   -2.509080928730122E-7, \n                   1.154228383789509E-8, \n                   1.092384473045305E-9, \n                   -4.163593990237015E-10};\n    for (int i = 0; i < cf.length; i++) {\n        tmp += cf[i] / (x + 1.0 + i);\n    }\n    return tmp + Math.log(2.5066282746310005 * ser / x);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..31db7257f 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,85 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x > a + 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+    double sum = 1.0 / a;\n+    double term = sum;\n+    while (Math.abs(term / sum) > 1.0e-15) {\n+        term *= x / (a + sum);\n+        sum += term;\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+    ContinuedFraction fraction = new ContinuedFraction() {\n+        @Override\n+        protected double getA(int n, double x) {\n+            if (n == 0) {\n+                return 1.0;\n+            } else if (n == 1) {\n+                return 1.0 - a;\n+            } else {\n+                return (2 * n - 1 - a) + x;\n+            }\n+        }\n+\n+        @Override\n+        protected double getB(int n, double x) {\n+            if (n == 0) {\n+                return 0.0;\n+            } else {\n+                return n * (a - n);\n+            }\n+        }\n+    };\n+    double epsilon = 10e-15;\n+    int maxIterations = 1000;\n+    return 1.0 / fraction.evaluate(x, epsilon, maxIterations);\n+}\n+\n+public static double logGamma(double x) {\n+    if (Double.isNaN(x) || x <= 0.0) {\n+        return Double.NaN;\n+    }\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 101.19539853003;\n+    ser += 4.5439340981633 * Math.log(x + 4.5);\n+    ser -= Math.log(x) * (x + 4.5);\n+    double[] cf = {0.5772156649015329, -0.6558780715202538, \n+                   -0.04200263503409524, 0.1665386113822915, \n+                   -0.04219773455554433, -0.009621971527876973, \n+                   0.0072189432466631, -0.001165167591859065, \n+                   -0.0002152416741149508, 0.0001280502823881162, \n+                   -0.00002013485478078824, -0.000001250493482142670, \n+                   0.000001133027231981696, \n+                   -2.509080928730122E-7, \n+                   1.154228383789509E-8, \n+                   1.092384473045305E-9, \n+                   -4.163593990237015E-10};\n+    for (int i = 0; i < cf.length; i++) {\n+        tmp += cf[i] / (x + 1.0 + i);\n+    }\n+    return tmp + Math.log(2.5066282746310005 * ser / x);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}