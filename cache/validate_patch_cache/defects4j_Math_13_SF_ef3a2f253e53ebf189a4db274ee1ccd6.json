{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final int maxIterations = 100;\n    final double epsilon = 1.0e-12;\n    final RealMatrix i = MatrixUtils.createRealIdentityMatrix(n);\n    RealMatrix x = m;\n    RealMatrix y = i;\n    int iIter;\n    for (iIter = 0; iIter < maxIterations; iIter++) {\n        RealMatrix nextX = 0.5 * (x.add(y.inverse()));\n        RealMatrix nextY = 0.5 * (y.add(x.inverse()));\n        if (nextX.subtract(x).getNorm() < epsilon && nextY.subtract(y).getNorm() < epsilon) {\n            x = nextX;\n            break;\n        }\n        x = nextX;\n        y = nextY;\n    }\n    if (iIter == maxIterations) {\n        throw new RuntimeException(\"Failed to converge\");\n    }\n    return x;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..94084de9a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final int maxIterations = 100;\n+    final double epsilon = 1.0e-12;\n+    final RealMatrix i = MatrixUtils.createRealIdentityMatrix(n);\n+    RealMatrix x = m;\n+    RealMatrix y = i;\n+    int iIter;\n+    for (iIter = 0; iIter < maxIterations; iIter++) {\n+        RealMatrix nextX = 0.5 * (x.add(y.inverse()));\n+        RealMatrix nextY = 0.5 * (y.add(x.inverse()));\n+        if (nextX.subtract(x).getNorm() < epsilon && nextY.subtract(y).getNorm() < epsilon) {\n+            x = nextX;\n+            break;\n+        }\n+        x = nextX;\n+        y = nextY;\n+    }\n+    if (iIter == maxIterations) {\n+        throw new RuntimeException(\"Failed to converge\");\n     }\n+    return x;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}