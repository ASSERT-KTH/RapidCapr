{
    "patch": "    boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        return false;\n      }\n\n      BasicBlock refBlock = ref.getBasicBlock();\n      if (refBlock.isFunction) {\n        // Consider the lifetime of the variable to be the lifetime of the function.\n        for (int i = 0; i < references.size(); i++) {\n          Reference maybeAssign = references.get(i);\n          if (maybeAssign.isAssignmentToName() && maybeAssign.getBasicBlock() != refBlock) {\n            return false;\n          }\n        }\n      } else {\n        // Make sure this assignment is not in a loop.\n        for (BasicBlock block = refBlock.getParent(); block != null; block = block.getParent()) {\n          if (block.isLoop) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..e0c17aca 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,32 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+    boolean isAssignedOnceInLifetime() {\n+      Reference ref = getOneAndOnlyAssignment();\n+      if (ref == null) {\n+        return false;\n+      }\n+\n+      BasicBlock refBlock = ref.getBasicBlock();\n+      if (refBlock.isFunction) {\n+        // Consider the lifetime of the variable to be the lifetime of the function.\n+        for (int i = 0; i < references.size(); i++) {\n+          Reference maybeAssign = references.get(i);\n+          if (maybeAssign.isAssignmentToName() && maybeAssign.getBasicBlock() != refBlock) {\n+            return false;\n+          }\n+        }\n+      } else {\n+        // Make sure this assignment is not in a loop.\n+        for (BasicBlock block = refBlock.getParent(); block != null; block = block.getParent()) {\n+          if (block.isLoop) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      return true;\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}