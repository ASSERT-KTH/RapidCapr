{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instant.getMillis(), instant.getChronology(), iLocale, iPivotYear, null);\n\n    int newPos = parser.parseInto(bucket, text, position);\n\n    if (newPos >= 0) {\n        instant.setMillis(bucket.computeMillis(true, text));\n\n        if (bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            instant.setMillis(instant.getMillis() - parsedOffset);\n            instant.setChronology(instant.getChronology().withZone(DateTimeZone.forOffsetMillis(parsedOffset)));\n        } else if (bucket.getZone() != null) {\n            instant.setChronology(instant.getChronology().withZone(bucket.getZone()));\n        }\n\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..307f7f9a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,36 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instant.getMillis(), instant.getChronology(), iLocale, iPivotYear, null);\n+\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    if (newPos >= 0) {\n+        instant.setMillis(bucket.computeMillis(true, text));\n+\n+        if (bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+            instant.setMillis(instant.getMillis() - parsedOffset);\n+            instant.setChronology(instant.getChronology().withZone(DateTimeZone.forOffsetMillis(parsedOffset)));\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+            instant.setChronology(instant.getChronology().withZone(bucket.getZone()));\n         }\n-        instant.setChronology(chrono);\n+\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n-        return newPos;\n     }\n \n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: incompatible types: <null> cannot be converted to int",
    "test_result": "ERROR"
}