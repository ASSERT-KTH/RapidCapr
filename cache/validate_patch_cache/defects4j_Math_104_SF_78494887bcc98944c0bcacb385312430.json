{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) {\n        return 1.0 - regularizedGammaComplement(a, x);\n    }\n    double n = 0.0; // term counter\n    double an = 1.0 / a; // inital value\n    double sum = an; // intial value\n    while (Math.abs(an / sum) > 1e-15 && n < 100000) { // iterate until converged or max iterations\n        n++;\n        an *= x / (a + n);\n        sum += an;\n    }\n    return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 101.19539853003 +\n        4.3984592975995 * Constants.SQRT2 +\n        0.49072387475447 * Constants.SQRT2 * tmp +\n        0.055230499619934 * tmp * tmp;\n    return ser - Math.log(Constants.SQRTPI * (x + 4.5)) + (x - 1.0) * Math.log(x + 4.5) - (x + 4.5);\n}\n\npublic static double regularizedGammaComplement(final double a, final double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGamma(a, x);\n    }\n    // accurate calculation of q when x > a+1.\n    double w = Math.exp(-x + a * Math.log(x) - logGamma(a));\n    // The following sum is contribution of the series from i = a + 1 to infinity\n    double J = 1.0 / (12.0 * a);\n    J = (J + 1.0 / (30.0 * a + 2.0)) / a;\n    J = (J + 1.0 / (56.0 * a + 4.0)) / a;\n    J = (J + 1.0 / (90.0 * a + 6.0)) / a;\n    J = (J + 1.0 / (132.0 * a + 8.0)) / a;\n    J = (J + 1.0 / (182.0 * a + 10.0)) / a;\n    J = (J + 1.0 / (240.0 * a + 12.0)) / a;\n    J = J + Math.log(a / x);\n    final double S = w * J;\n    // The following sum is the tail of the series for 1 - P(a,x).\n    final double z = 1.0 / x;\n    double series = z;\n    double term = Double.MAX_VALUE;\n    double total = series;\n    double lastDelta = 0.0;\n    for (int k = 1; k < Gamma.MAX_ITERATION_COUNT && Math.abs(term) > Gamma.MACHINE_EPSILON * Math.abs(total); k++) {\n        final double aN = k * (a - k);\n        final double bN = x + 2.0 * k;\n        term = aN * term / bN;\n        lastDelta = Math.abs(term);\n        total += term;\n        if (lastDelta < Gamma.MACHINE_EPSILON && lastDelta < Gamma.MACHINE_EPSILON * Math.abs(total)) {\n            break;\n        }\n    }\n    return total * w / x + S;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..1edcffb22 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,76 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) {\n+        return 1.0 - regularizedGammaComplement(a, x);\n+    }\n+    double n = 0.0; // term counter\n+    double an = 1.0 / a; // inital value\n+    double sum = an; // intial value\n+    while (Math.abs(an / sum) > 1e-15 && n < 100000) { // iterate until converged or max iterations\n+        n++;\n+        an *= x / (a + n);\n+        sum += an;\n+    }\n+    return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 101.19539853003 +\n+        4.3984592975995 * Constants.SQRT2 +\n+        0.49072387475447 * Constants.SQRT2 * tmp +\n+        0.055230499619934 * tmp * tmp;\n+    return ser - Math.log(Constants.SQRTPI * (x + 4.5)) + (x - 1.0) * Math.log(x + 4.5) - (x + 4.5);\n+}\n+\n+public static double regularizedGammaComplement(final double a, final double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGamma(a, x);\n+    }\n+    // accurate calculation of q when x > a+1.\n+    double w = Math.exp(-x + a * Math.log(x) - logGamma(a));\n+    // The following sum is contribution of the series from i = a + 1 to infinity\n+    double J = 1.0 / (12.0 * a);\n+    J = (J + 1.0 / (30.0 * a + 2.0)) / a;\n+    J = (J + 1.0 / (56.0 * a + 4.0)) / a;\n+    J = (J + 1.0 / (90.0 * a + 6.0)) / a;\n+    J = (J + 1.0 / (132.0 * a + 8.0)) / a;\n+    J = (J + 1.0 / (182.0 * a + 10.0)) / a;\n+    J = (J + 1.0 / (240.0 * a + 12.0)) / a;\n+    J = J + Math.log(a / x);\n+    final double S = w * J;\n+    // The following sum is the tail of the series for 1 - P(a,x).\n+    final double z = 1.0 / x;\n+    double series = z;\n+    double term = Double.MAX_VALUE;\n+    double total = series;\n+    double lastDelta = 0.0;\n+    for (int k = 1; k < Gamma.MAX_ITERATION_COUNT && Math.abs(term) > Gamma.MACHINE_EPSILON * Math.abs(total); k++) {\n+        final double aN = k * (a - k);\n+        final double bN = x + 2.0 * k;\n+        term = aN * term / bN;\n+        lastDelta = Math.abs(term);\n+        total += term;\n+        if (lastDelta < Gamma.MACHINE_EPSILON && lastDelta < Gamma.MACHINE_EPSILON * Math.abs(total)) {\n+            break;\n+        }\n+    }\n+    return total * w / x + S;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}