{
    "patch": "   private void readTypeVariables() {\n       for (Type type : typeVariable.getBounds()) {\n           registerTypeVariablesOn(type);\n       }\n       Type typeVariable = /*initialize typeVariable here*/;\n       registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n   }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..55934c280 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,14 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+   private void readTypeVariables() {\n+       for (Type type : typeVariable.getBounds()) {\n+           registerTypeVariablesOn(type);\n+       }\n+       Type typeVariable = /*initialize typeVariable here*/;\n+       registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n+   }\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}