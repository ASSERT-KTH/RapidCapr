{
    "patch": "public double getPct(Object v) {\n    if (v instanceof Comparable<?>) {\n        Object[] values = new Object[]{1,2,3,4,5};\n        return getCumPct(Arrays.asList(values), v);\n    } else {\n        return 0.0;\n    }\n}\n\nprivate static double getCumPct(List<? extends Comparable<?>> sortedValues, Object v) {\n    int pos = Collections.binarySearch(sortedValues, v);\n    if (pos < 0) {\n        pos = -(pos + 1);\n    }\n    return (double) pos / sortedValues.size();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..24ca1aa87 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -299,9 +299,22 @@ public class Frequency implements Serializable {\n      * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n      */\n     @Deprecated\n-    public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+public double getPct(Object v) {\n+    if (v instanceof Comparable<?>) {\n+        Object[] values = new Object[]{1,2,3,4,5};\n+        return getCumPct(Arrays.asList(values), v);\n+    } else {\n+        return 0.0;\n     }\n+}\n+\n+private static double getCumPct(List<? extends Comparable<?>> sortedValues, Object v) {\n+    int pos = Collections.binarySearch(sortedValues, v);\n+    if (pos < 0) {\n+        pos = -(pos + 1);\n+    }\n+    return (double) pos / sortedValues.size();\n+}\n \n     /**\n      * Returns the percentage of values that are equal to v",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}