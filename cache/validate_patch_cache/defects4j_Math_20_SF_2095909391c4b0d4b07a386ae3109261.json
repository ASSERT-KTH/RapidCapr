{
    "patch": "public double[] repairAndDecode(final double[] x) {\n    double[] result = new double[x.length];\n    try {\n        double[] repaired = repair(x);\n        double[] decoded = decode(repaired);\n        for (int i = 0; i < x.length; i++) {\n            if (Double.isNaN(decoded[i]) || Double.isInfinite(decoded[i])) {\n                result[i] = 0.0; // replace with default value\n            } else if (decoded[i] > 1.0) {\n                result[i] = 1.0; // limit to 1.0\n            } else if (decoded[i] < 0.0) {\n                result[i] = 0.0; // limit to 0.0\n            }else {\n                result[i] = decoded[i]; // keep value\n            }\n        }\n    } catch (Exception e) {\n        return new double[x.length]; // return all zeros as default\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 4b7dbf6bb..cc54814fc 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -917,10 +917,27 @@ public class CMAESOptimizer\n          * @param x Normalized objective variables.\n          * @return the original objective variables, possibly repaired.\n          */\n-        public double[] repairAndDecode(final double[] x) {\n-            return\n-                decode(x);\n+public double[] repairAndDecode(final double[] x) {\n+    double[] result = new double[x.length];\n+    try {\n+        double[] repaired = repair(x);\n+        double[] decoded = decode(repaired);\n+        for (int i = 0; i < x.length; i++) {\n+            if (Double.isNaN(decoded[i]) || Double.isInfinite(decoded[i])) {\n+                result[i] = 0.0; // replace with default value\n+            } else if (decoded[i] > 1.0) {\n+                result[i] = 1.0; // limit to 1.0\n+            } else if (decoded[i] < 0.0) {\n+                result[i] = 0.0; // limit to 0.0\n+            }else {\n+                result[i] = decoded[i]; // keep value\n+            }\n         }\n+    } catch (Exception e) {\n+        return new double[x.length]; // return all zeros as default\n+    }\n+    return result;\n+}\n \n         /**\n          * @param x Normalized objective variables.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}