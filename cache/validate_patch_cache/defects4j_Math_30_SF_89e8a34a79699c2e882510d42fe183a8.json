{
    "patch": "private double calculateExactPValue(final double Umin, final int n1, final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n\n    final int n = n1 + n2;\n    final int N = 1 << n;\n\n    int count = 0;\n    for (int i = 0; i < N; i++) {\n        int sum1 = 0;\n        for (int j = 0; j < n; j++) {\n            if ((i & (1 << j)) != 0) {\n                sum1 += j < n1 ? 1 : 0;\n            }\n        }\n        if (sum1 >= Umin) {\n            count++;\n        }\n    }\n\n    return count / (double) N;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\nindex ce694ce8f..b29e9679d 100644\n--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n@@ -165,24 +165,28 @@ public class MannWhitneyUTest {\n      * @throws MaxCountExceededException if the maximum number of\n      * iterations is exceeded\n      */\n-    private double calculateAsymptoticPValue(final double Umin,\n-                                             final int n1,\n-                                             final int n2)\n+private double calculateExactPValue(final double Umin, final int n1, final int n2)\n         throws ConvergenceException, MaxCountExceededException {\n \n-        final int n1n2prod = n1 * n2;\n+    final int n = n1 + n2;\n+    final int N = 1 << n;\n \n-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n-        final double EU = n1n2prod / 2.0;\n-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n-\n-        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n-\n-        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n-\n-        return 2 * standardNormal.cumulativeProbability(z);\n+    int count = 0;\n+    for (int i = 0; i < N; i++) {\n+        int sum1 = 0;\n+        for (int j = 0; j < n; j++) {\n+            if ((i & (1 << j)) != 0) {\n+                sum1 += j < n1 ? 1 : 0;\n+            }\n+        }\n+        if (sum1 >= Umin) {\n+            count++;\n+        }\n     }\n \n+    return count / (double) N;\n+}\n+\n     /**\n      * Returns the asymptotic <i>observed significance level</i>, or <a href=\n      * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}