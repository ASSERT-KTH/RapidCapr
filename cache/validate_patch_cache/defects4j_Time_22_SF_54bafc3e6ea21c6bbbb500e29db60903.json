{
    "patch": "protected BasePeriod(long duration) {\n    // Fix [3264409]\n    this.duration = duration;\n    this.years = 0;\n    this.months = 0;\n    this.weeks = 0;\n    this.days = 0;\n    if (duration != 0) {\n        long stdDuration = duration;\n        long weeksAsMillis = 0;\n        if (duration >= ((long) MILLIS_PER_YEAR)) {\n            int yearsInt = ((int) (duration / ((long) MILLIS_PER_YEAR)));\n            stdDuration = FieldUtils.safeSubtract(duration, ((long) yearsInt) * MILLIS_PER_YEAR);\n            this.years = yearsInt;\n        }\n        if (stdDuration >= ((long) MILLIS_PER_MONTH)) {\n            int monthsInt = ((int) (stdDuration / ((long) MILLIS_PER_MONTH)));\n            stdDuration = FieldUtils.safeSubtract(stdDuration, ((long) monthsInt) * MILLIS_PER_MONTH);\n            this.months = monthsInt;\n        }\n        if (stdDuration >= ((long) MILLIS_PER_WEEK)) {\n            int weeksInt = ((int) (stdDuration / ((long) MILLIS_PER_WEEK)));\n            stdDuration = FieldUtils.safeSubtract(stdDuration, ((long) weeksInt) * MILLIS_PER_WEEK);\n            weeksAsMillis = ((long) weeksInt) * ((long) MILLIS_PER_WEEK);\n        }\n        if (stdDuration >= ((long) MILLIS_PER_DAY)) {\n            int daysInt = ((int) (stdDuration / ((long) MILLIS_PER_DAY)));\n            stdDuration = FieldUtils.safeSubtract(stdDuration, ((long) daysInt) * MILLIS_PER_DAY);\n            this.days = daysInt;\n        }\n        if (stdDuration > 0) {\n            this.millis = ((int) stdDuration);\n        }\n        if (weeksAsMillis > 0) {\n            DurationField durationField = this.getPeriodType().weeks();\n            if (durationField != null) {\n                this.weeks = durationField.getField(ISOChronology.getInstanceUTC().withUTC()).getDifference(0, weeksAsMillis);\n            }\n            else {\n                this.days += (int) (weeksAsMillis / ((long) MILLIS_PER_DAY));\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..c901da6b 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,50 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+protected BasePeriod(long duration) {\n+    // Fix [3264409]\n+    this.duration = duration;\n+    this.years = 0;\n+    this.months = 0;\n+    this.weeks = 0;\n+    this.days = 0;\n+    if (duration != 0) {\n+        long stdDuration = duration;\n+        long weeksAsMillis = 0;\n+        if (duration >= ((long) MILLIS_PER_YEAR)) {\n+            int yearsInt = ((int) (duration / ((long) MILLIS_PER_YEAR)));\n+            stdDuration = FieldUtils.safeSubtract(duration, ((long) yearsInt) * MILLIS_PER_YEAR);\n+            this.years = yearsInt;\n+        }\n+        if (stdDuration >= ((long) MILLIS_PER_MONTH)) {\n+            int monthsInt = ((int) (stdDuration / ((long) MILLIS_PER_MONTH)));\n+            stdDuration = FieldUtils.safeSubtract(stdDuration, ((long) monthsInt) * MILLIS_PER_MONTH);\n+            this.months = monthsInt;\n+        }\n+        if (stdDuration >= ((long) MILLIS_PER_WEEK)) {\n+            int weeksInt = ((int) (stdDuration / ((long) MILLIS_PER_WEEK)));\n+            stdDuration = FieldUtils.safeSubtract(stdDuration, ((long) weeksInt) * MILLIS_PER_WEEK);\n+            weeksAsMillis = ((long) weeksInt) * ((long) MILLIS_PER_WEEK);\n+        }\n+        if (stdDuration >= ((long) MILLIS_PER_DAY)) {\n+            int daysInt = ((int) (stdDuration / ((long) MILLIS_PER_DAY)));\n+            stdDuration = FieldUtils.safeSubtract(stdDuration, ((long) daysInt) * MILLIS_PER_DAY);\n+            this.days = daysInt;\n+        }\n+        if (stdDuration > 0) {\n+            this.millis = ((int) stdDuration);\n+        }\n+        if (weeksAsMillis > 0) {\n+            DurationField durationField = this.getPeriodType().weeks();\n+            if (durationField != null) {\n+                this.weeks = durationField.getField(ISOChronology.getInstanceUTC().withUTC()).getDifference(0, weeksAsMillis);\n+            }\n+            else {\n+                this.days += (int) (weeksAsMillis / ((long) MILLIS_PER_DAY));\n+            }\n+        }\n     }\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}