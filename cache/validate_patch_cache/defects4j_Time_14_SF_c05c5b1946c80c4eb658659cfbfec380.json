{
    "patch": "        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            int curMonth = 0, curYear = 0;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (partial.getFieldType(i).equals(DateTimeFieldType.year())) {\n                    curYear = values[i];\n                } else if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n                    curMonth = values[i] + valueToAdd;\n                }\n            }\n            // adjust year and month to ensure it stays a valid month\n            if (curMonth > 12) {\n                curYear += (curMonth - 1) / 12;\n                curMonth = ((curMonth - 1) % 12) + 1;\n            } else if (curMonth < 1) {\n                curYear += (curMonth / 12) - 1;\n                curMonth = ((curMonth % 12) + 12) % 12 + 1;\n            }\n            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(curYear, curMonth);\n            int newDayOfMonth = Math.min(maxDayOfMonth, values[DateTimeFieldType.dayOfMonth().getFieldIndex()]);\n            Chronology chrono = partial.getChronology();\n            int[] newValues = chrono.get(partial, iChronology.yearMonthDay().getMillis(curYear, curMonth, newDayOfMonth));\n            for (int i = 0, isize = newValues.length; i < isize; i++) {\n                if (partial.isSupported(newValues[i], partial.getFieldType(i))) {\n                    values[i] = newValues[i];\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..6ff30999 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,32 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n+            int curMonth = 0, curYear = 0;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                if (partial.getFieldType(i).equals(DateTimeFieldType.year())) {\n+                    curYear = values[i];\n+                } else if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n+                    curMonth = values[i] + valueToAdd;\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            // adjust year and month to ensure it stays a valid month\n+            if (curMonth > 12) {\n+                curYear += (curMonth - 1) / 12;\n+                curMonth = ((curMonth - 1) % 12) + 1;\n+            } else if (curMonth < 1) {\n+                curYear += (curMonth / 12) - 1;\n+                curMonth = ((curMonth % 12) + 12) % 12 + 1;\n+            }\n+            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(curYear, curMonth);\n+            int newDayOfMonth = Math.min(maxDayOfMonth, values[DateTimeFieldType.dayOfMonth().getFieldIndex()]);\n+            Chronology chrono = partial.getChronology();\n+            int[] newValues = chrono.get(partial, iChronology.yearMonthDay().getMillis(curYear, curMonth, newDayOfMonth));\n+            for (int i = 0, isize = newValues.length; i < isize; i++) {\n+                if (partial.isSupported(newValues[i], partial.getFieldType(i))) {\n+                    values[i] = newValues[i];\n+                }\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}