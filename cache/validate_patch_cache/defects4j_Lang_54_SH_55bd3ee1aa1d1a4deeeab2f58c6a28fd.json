{
    "patch": "    private static boolean isValidVariantSubtag(String variant) {\n        if (variant.length() == 0) {\n            return false;\n        }\n        char[] chars = variant.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (!isValidVariantSubtagChar(chars[i])) {\n                return false;\n            }\n            if (chars[i] == '_' && i != chars.length - 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static boolean isValidVariantSubtagChar(char c) {\n        return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9');\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..305eb520 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -111,6 +111,25 @@ public class LocaleUtils {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             char ch3 = str.charAt(3);\n+    private static boolean isValidVariantSubtag(String variant) {\n+        if (variant.length() == 0) {\n+            return false;\n+        }\n+        char[] chars = variant.toCharArray();\n+        for (int i = 0; i < chars.length; i++) {\n+            if (!isValidVariantSubtagChar(chars[i])) {\n+                return false;\n+            }\n+            if (chars[i] == '_' && i != chars.length - 1) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private static boolean isValidVariantSubtagChar(char c) {\n+        return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9');\n+    }\n             char ch4 = str.charAt(4);\n             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}