{
    "patch": " private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n      // Is this a normal property access, or are we trying to override\n      // an existing property?\n      boolean isOverride = false;\n      if (parent.isAssign()) {\n        Node lvalue = parent.getFirstChild();\n        if (lvalue.isGetProp() && lvalue.getLastChild().getString().equals(propertyName)\n            && !t.inGlobalScope()) {\n          // Check if the original property namespace is private, if so and the current value is not in the same file, report an error\n          String fullName = objectType.toString();\n          if (fullName.startsWith(\"class\")) {\n            fullName = fullName.substring(6);\n          }\n          fullName = fullName.trim() + \".\" + propertyName;\n          JSDocInfo assignmentInfo = NodeUtil.getBestJSDocInfo(lvalue);\n          if (assignmentInfo != null && assignmentInfo.getVisibility() == Visibility.PRIVATE) {\n            isOverride = currentClass != null && currentClass.isSubclassOf(\n                lookup(fnScope, fullName).getClassType());\n            if (!sameInput(assignmentInfo, t)) {\n              compiler.report(\n                  t.makeError(getprop, PRIVATE_OVERRIDE, fullName));\n            }\n          }\n        }\n      }\n\n      // Find the lowest property defined on a class with visibility\n      // information.\n      if (isOverride) {\n        objectType = objectType.getImplicitPrototype();\n      }\n\n      JSDocInfo docInfo = null;\n      for (; objectType != null; objectType = objectType.getImplicitPrototype()) {\n        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n        if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n          break;\n        }\n      }\n\n      if (objectType == null) {\n        // We couldn't find a visibility modifier; assume it's public.\n        return;\n      }\n\n      Visibility visibility = docInfo.getVisibility();\n      if (getprop.getParent().isCall()\n          && getprop.getParent().getFirstChild() == getprop\n          && getprop.getNext().isString()) {\n        // Special case for constructor calls such as Foo.superClass_.constructor.call(this, ...).\n        propertyName = getprop.getNext().getString();\n      }\n      if (visibility == Visibility.PRIVATE && !sameInput(docInfo, t)) {\n        // Ensure that we're not accessing a class-private property from outside the original file,\n        // unless it's an access from a constructor function of that class\n        if (!(docInfo.isConstructor() && isValidPrivateConstructorAccess(parent))) {\n          compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName,\n              validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n        }\n      } else if (visibility == Visibility.PROTECTED) {\n        // There are 3 types of legal accesses of a protected property:\n        // 1) Accesses in the same file\n        // 2) Overriding the property in a subclass\n        // 3) Accessing the property from inside a subclass\n        // The first two have already been checked for.\n\n        // Ensure that we're accessing the property from inside a subclass.\n        if (currentClass == null || !currentClass.isSubclassOf(normalizeClassType(objectType))) {\n          String readableClassName =\n              validator.getReadableJSTypeName(getprop.getFirstChild(), true);\n          compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName,\n              readableClassName));\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..7b8c7dd9 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -404,30 +404,46 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n    * @param t The current traversal.\n    * @param getprop The getprop node.\n    */\n-  private void checkPropertyVisibility(NodeTraversal t,\n-      Node getprop, Node parent) {\n-    ObjectType objectType =\n-        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n+ private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n+    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n     String propertyName = getprop.getLastChild().getString();\n \n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n-          parent.getType() == Token.ASSIGN &&\n-          parent.getFirstChild() == getprop;\n+      boolean isOverride = false;\n+      if (parent.isAssign()) {\n+        Node lvalue = parent.getFirstChild();\n+        if (lvalue.isGetProp() && lvalue.getLastChild().getString().equals(propertyName)\n+            && !t.inGlobalScope()) {\n+          // Check if the original property namespace is private, if so and the current value is not in the same file, report an error\n+          String fullName = objectType.toString();\n+          if (fullName.startsWith(\"class\")) {\n+            fullName = fullName.substring(6);\n+          }\n+          fullName = fullName.trim() + \".\" + propertyName;\n+          JSDocInfo assignmentInfo = NodeUtil.getBestJSDocInfo(lvalue);\n+          if (assignmentInfo != null && assignmentInfo.getVisibility() == Visibility.PRIVATE) {\n+            isOverride = currentClass != null && currentClass.isSubclassOf(\n+                lookup(fnScope, fullName).getClassType());\n+            if (!sameInput(assignmentInfo, t)) {\n+              compiler.report(\n+                  t.makeError(getprop, PRIVATE_OVERRIDE, fullName));\n+            }\n+          }\n+        }\n+      }\n \n       // Find the lowest property defined on a class with visibility\n       // information.\n       if (isOverride) {\n         objectType = objectType.getImplicitPrototype();\n       }\n+\n       JSDocInfo docInfo = null;\n-      for (; objectType != null;\n-           objectType = objectType.getImplicitPrototype()) {\n+      for (; objectType != null; objectType = objectType.getImplicitPrototype()) {\n         docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n-        if (docInfo != null &&\n-            docInfo.getVisibility() != Visibility.INHERITED) {\n+        if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n           break;\n         }\n       }\n@@ -437,63 +453,33 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n         return;\n       }\n \n-      boolean sameInput =\n-          t.getInput().getName().equals(docInfo.getSourceName());\n       Visibility visibility = docInfo.getVisibility();\n-      JSType ownerType = normalizeClassType(objectType);\n-      if (isOverride) {\n-        // Check an ASSIGN statement that's trying to override a property\n-        // on a superclass.\n-        JSDocInfo overridingInfo = parent.getJSDocInfo();\n-        Visibility overridingVisibility = overridingInfo == null ?\n-            Visibility.INHERITED : overridingInfo.getVisibility();\n-\n-        // Check that (a) the property *can* be overridden, and\n-        // (b) that the visibility of the override is the same as the\n-        // visibility of the original property.\n-        if (visibility == Visibility.PRIVATE && !sameInput) {\n-          compiler.report(\n-              t.makeError(getprop, PRIVATE_OVERRIDE,\n-                  objectType.toString()));\n-        } else if (overridingVisibility != Visibility.INHERITED &&\n-            overridingVisibility != visibility) {\n-          compiler.report(\n-              t.makeError(getprop, VISIBILITY_MISMATCH,\n-                  visibility.name(), objectType.toString(),\n-                  overridingVisibility.name()));\n+      if (getprop.getParent().isCall()\n+          && getprop.getParent().getFirstChild() == getprop\n+          && getprop.getNext().isString()) {\n+        // Special case for constructor calls such as Foo.superClass_.constructor.call(this, ...).\n+        propertyName = getprop.getNext().getString();\n+      }\n+      if (visibility == Visibility.PRIVATE && !sameInput(docInfo, t)) {\n+        // Ensure that we're not accessing a class-private property from outside the original file,\n+        // unless it's an access from a constructor function of that class\n+        if (!(docInfo.isConstructor() && isValidPrivateConstructorAccess(parent))) {\n+          compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName,\n+              validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n         }\n-      } else {\n-        if (sameInput) {\n-          // private access is always allowed in the same file.\n-          return;\n-        } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n-          if (docInfo.isConstructor() &&\n-              isValidPrivateConstructorAccess(parent)) {\n-            return;\n-          }\n-\n-          // private access is not allowed outside the file from a different\n-          // enclosing class.\n-          compiler.report(\n-              t.makeError(getprop,\n-                  BAD_PRIVATE_PROPERTY_ACCESS,\n-                  propertyName,\n-                  validator.getReadableJSTypeName(\n-                      getprop.getFirstChild(), true)));\n-        } else if (visibility == Visibility.PROTECTED) {\n-          // There are 3 types of legal accesses of a protected property:\n-          // 1) Accesses in the same file\n-          // 2) Overriding the property in a subclass\n-          // 3) Accessing the property from inside a subclass\n-          // The first two have already been checked for.\n-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n-            compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n-                    propertyName,\n-                    validator.getReadableJSTypeName(\n-                        getprop.getFirstChild(), true)));\n-          }\n+      } else if (visibility == Visibility.PROTECTED) {\n+        // There are 3 types of legal accesses of a protected property:\n+        // 1) Accesses in the same file\n+        // 2) Overriding the property in a subclass\n+        // 3) Accessing the property from inside a subclass\n+        // The first two have already been checked for.\n+\n+        // Ensure that we're accessing the property from inside a subclass.\n+        if (currentClass == null || !currentClass.isSubclassOf(normalizeClassType(objectType))) {\n+          String readableClassName =\n+              validator.getReadableJSTypeName(getprop.getFirstChild(), true);\n+          compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName,\n+              readableClassName));\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}