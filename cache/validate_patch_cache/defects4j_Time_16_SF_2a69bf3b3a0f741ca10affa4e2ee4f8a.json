{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    long fixedInstant = instant.getMillis();\n    long instantLocal = chrono.getZone().convertUTCToLocal(fixedInstant);\n    Chronology adjustedChrono = selectChronology(chrono).withZone(chrono.getZone());\n    instantLocal = adjustedChrono.getZone().convertLocalToUTC(instantLocal, false, fixedInstant);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, adjustedChrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    long millis = bucket.computeMillis(true, text);\n\n    // If the parsed moment is just a date, add the time\n    if (bucket.getFormatField(MutableDateTime.MILLIS_OF_SECOND) == null && bucket.getFormatField(MutableDateTime.SECOND_OF_MINUTE) == null && bucket.getFormatField(MutableDateTime.MINUTE_OF_HOUR) == null && bucket.getFormatField(MutableDateTime.HOUR_OF_DAY) == null && chrono.hourOfDay().get(millis) == 0) {\n        millis = chrono.dayOfYear().set(millis, chrono.dayOfYear().get(millis) + 1);\n    }\n\n    instant.setMillis(millis);\n\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n\n    instant.setChronology(chrono);\n\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..8a2994f5 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -694,35 +694,46 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    long fixedInstant = instant.getMillis();\n+    long instantLocal = chrono.getZone().convertUTCToLocal(fixedInstant);\n+    Chronology adjustedChrono = selectChronology(chrono).withZone(chrono.getZone());\n+    instantLocal = adjustedChrono.getZone().convertLocalToUTC(instantLocal, false, fixedInstant);\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, adjustedChrono, iLocale, iPivotYear, iDefaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    long millis = bucket.computeMillis(true, text);\n+\n+    // If the parsed moment is just a date, add the time\n+    if (bucket.getFormatField(MutableDateTime.MILLIS_OF_SECOND) == null && bucket.getFormatField(MutableDateTime.SECOND_OF_MINUTE) == null && bucket.getFormatField(MutableDateTime.MINUTE_OF_HOUR) == null && bucket.getFormatField(MutableDateTime.HOUR_OF_DAY) == null && chrono.hourOfDay().get(millis) == 0) {\n+        millis = chrono.dayOfYear().set(millis, chrono.dayOfYear().get(millis) + 1);\n+    }\n+\n+    instant.setMillis(millis);\n+\n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        chrono = chrono.withZone(parsedZone);\n+    } else if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n     }\n \n+    instant.setChronology(chrono);\n+\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+\n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}