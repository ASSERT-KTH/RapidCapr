{
    "patch": "/**\n * Calculates the Cholesky decomposition of the input matrix A: A = L * L', where L is a lower\n * triangular matrix and L' is its transpose. The Cholesky decomposition can only be calculated for\n * positive definite matrices.\n *\n * @param matrix the input matrix A\n * @param relativeSymmetryThreshold the threshold below which the relative difference of the\n *      absolute values of (A_ij - A_ji) / max(|A_ij|, |A_ji|) is considered zero for checking\n *      symmetry (usually there are round-off errors that don't exactly satisfy A_ij = A_ji)\n * @param absolutePositivityThreshold the threshold below which an eigenvalue is considered\n *      negative for checking positive definiteness\n * @throws NonSquareMatrixException if matrix is not square\n * @throws NotSymmetricMatrixException if matrix is not symmetric\n * @throws NotPositiveDefiniteMatrixException if matrix is not positive definite\n */\npublic CholeskyDecompositionImpl(final RealMatrix matrix, final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n        throws NonSquareMatrixException, NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension());\n    }\n\n    final int order = matrix.getRowDimension();\n    final double[][] lTData = matrix.getData();\n    cachedL = cachedLT = null;\n\n    // Check the matrix before transformation\n    for (int i = 0; i < order; ++i) {\n        final double[] lI = lTData[i];\n\n        // Check diagonal element\n        if (lI[i] < 0.0 - absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        } else if (lI[i] < absolutePositivityThreshold) {\n            lI[i] = 0.0;\n        }\n\n        // Check off-diagonal elements (and reset them to 0)\n        for (int j = i + 1; j < order; ++j) {\n            final double[] lJ = lTData[j];\n            final double lIJ = lI[j];\n            final double lJI = lJ[i];\n            final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n            if (Math.abs(lIJ - lJI) > maxDelta) {\n                throw new NotSymmetricMatrixException();\n            }\n            lJ[i] = 0.0;\n        }\n    }\n\n    // Transform the matrix\n    for (int i = 0; i < order; ++i) {\n        final double[] ltI = lTData[i];\n        final double inv = 1.0 / Math.sqrt(ltI[i]);\n        for (int j = i; j < order; ++j) {\n            ltI[j] *= inv;\n        }\n\n        for (int j = i + 1; j < order; ++j) {\n            final double[] ltJ = lTData[j];\n            final double invDiag = 1.0 / ltI[i];\n            final double beta = ltJ[i];\n            for (int k = i + 1; k < order; ++k) {\n                ltJ[k] -= beta * ltI[k];\n            }\n            ltJ[i] *= invDiag;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\nindex acd9222f6..c66608c80 100644\n--- a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n@@ -90,65 +90,77 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {\n      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n      */\n-    public CholeskyDecompositionImpl(final RealMatrix matrix,\n-                                     final double relativeSymmetryThreshold,\n-                                     final double absolutePositivityThreshold)\n-        throws NonSquareMatrixException,\n-               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n+/**\n+ * Calculates the Cholesky decomposition of the input matrix A: A = L * L', where L is a lower\n+ * triangular matrix and L' is its transpose. The Cholesky decomposition can only be calculated for\n+ * positive definite matrices.\n+ *\n+ * @param matrix the input matrix A\n+ * @param relativeSymmetryThreshold the threshold below which the relative difference of the\n+ *      absolute values of (A_ij - A_ji) / max(|A_ij|, |A_ji|) is considered zero for checking\n+ *      symmetry (usually there are round-off errors that don't exactly satisfy A_ij = A_ji)\n+ * @param absolutePositivityThreshold the threshold below which an eigenvalue is considered\n+ *      negative for checking positive definiteness\n+ * @throws NonSquareMatrixException if matrix is not square\n+ * @throws NotSymmetricMatrixException if matrix is not symmetric\n+ * @throws NotPositiveDefiniteMatrixException if matrix is not positive definite\n+ */\n+public CholeskyDecompositionImpl(final RealMatrix matrix, final double relativeSymmetryThreshold,\n+                                 final double absolutePositivityThreshold)\n+        throws NonSquareMatrixException, NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n \n-        if (!matrix.isSquare()) {\n-            throw new NonSquareMatrixException(matrix.getRowDimension(),\n-                                               matrix.getColumnDimension());\n-        }\n+    if (!matrix.isSquare()) {\n+        throw new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension());\n+    }\n \n-        final int order = matrix.getRowDimension();\n-        lTData   = matrix.getData();\n-        cachedL  = null;\n-        cachedLT = null;\n+    final int order = matrix.getRowDimension();\n+    final double[][] lTData = matrix.getData();\n+    cachedL = cachedLT = null;\n \n-        // check the matrix before transformation\n-        for (int i = 0; i < order; ++i) {\n+    // Check the matrix before transformation\n+    for (int i = 0; i < order; ++i) {\n+        final double[] lI = lTData[i];\n \n-            final double[] lI = lTData[i];\n+        // Check diagonal element\n+        if (lI[i] < 0.0 - absolutePositivityThreshold) {\n+            throw new NotPositiveDefiniteMatrixException();\n+        } else if (lI[i] < absolutePositivityThreshold) {\n+            lI[i] = 0.0;\n+        }\n \n-            if (lTData[i][i] < absolutePositivityThreshold) {\n-                throw new NotPositiveDefiniteMatrixException();\n-            }\n-            // check off-diagonal elements (and reset them to 0)\n-            for (int j = i + 1; j < order; ++j) {\n-                final double[] lJ = lTData[j];\n-                final double lIJ = lI[j];\n-                final double lJI = lJ[i];\n-                final double maxDelta =\n+        // Check off-diagonal elements (and reset them to 0)\n+        for (int j = i + 1; j < order; ++j) {\n+            final double[] lJ = lTData[j];\n+            final double lIJ = lI[j];\n+            final double lJI = lJ[i];\n+            final double maxDelta =\n                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n-                if (Math.abs(lIJ - lJI) > maxDelta) {\n-                    throw new NotSymmetricMatrixException();\n-                }\n-                lJ[i] = 0;\n-           }\n+            if (Math.abs(lIJ - lJI) > maxDelta) {\n+                throw new NotSymmetricMatrixException();\n+            }\n+            lJ[i] = 0.0;\n         }\n+    }\n \n-        // transform the matrix\n-        for (int i = 0; i < order; ++i) {\n-\n-            final double[] ltI = lTData[i];\n-\n-            // check diagonal element\n-\n-            ltI[i] = Math.sqrt(ltI[i]);\n-            final double inverse = 1.0 / ltI[i];\n+    // Transform the matrix\n+    for (int i = 0; i < order; ++i) {\n+        final double[] ltI = lTData[i];\n+        final double inv = 1.0 / Math.sqrt(ltI[i]);\n+        for (int j = i; j < order; ++j) {\n+            ltI[j] *= inv;\n+        }\n \n-            for (int q = order - 1; q > i; --q) {\n-                ltI[q] *= inverse;\n-                final double[] ltQ = lTData[q];\n-                for (int p = q; p < order; ++p) {\n-                    ltQ[p] -= ltI[q] * ltI[p];\n-                }\n+        for (int j = i + 1; j < order; ++j) {\n+            final double[] ltJ = lTData[j];\n+            final double invDiag = 1.0 / ltI[i];\n+            final double beta = ltJ[i];\n+            for (int k = i + 1; k < order; ++k) {\n+                ltJ[k] -= beta * ltI[k];\n             }\n-\n+            ltJ[i] *= invDiag;\n         }\n-\n     }\n+}\n \n     /** {@inheritDoc} */\n     public RealMatrix getL() {",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}