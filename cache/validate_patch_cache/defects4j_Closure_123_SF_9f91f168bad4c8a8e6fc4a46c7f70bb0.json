{
    "patch": "public static String fixCode(String code) {\n    String[] lines = code.split(\"\\\\r?\\\\n\");\n    String forLoopLine = null;\n    int i = 0;\n\n    while (i < lines.length) {\n        if (lines[i].contains(\"for\")) {\n            forLoopLine = lines[i];\n            break;\n        }\n        i++;\n    }\n\n    if (forLoopLine == null) {\n        return code;\n    }\n\n    String[] parts = forLoopLine.split(\";\");\n    parts[1] = parts[1].replace(\"in\", \"of\");\n    forLoopLine = String.join(\";\", parts);\n\n    lines[i] = forLoopLine;\n\n    return String.join(System.lineSeparator(), lines);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..ee831c81 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,31 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    String[] lines = code.split(\"\\\\r?\\\\n\");\n+    String forLoopLine = null;\n+    int i = 0;\n+\n+    while (i < lines.length) {\n+        if (lines[i].contains(\"for\")) {\n+            forLoopLine = lines[i];\n+            break;\n+        }\n+        i++;\n+    }\n+\n+    if (forLoopLine == null) {\n+        return code;\n+    }\n+\n+    String[] parts = forLoopLine.split(\";\");\n+    parts[1] = parts[1].replace(\"in\", \"of\");\n+    forLoopLine = String.join(\";\", parts);\n+\n+    lines[i] = forLoopLine;\n+\n+    return String.join(System.lineSeparator(), lines);\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}