{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    if (typeVariable instanceof TypeVariable) {\n        // If the type variable is not bound to a type, then there are no actual type arguments\n        if (((TypeVariable<?>) typeVariable).getBounds().length == 0) {\n            return;\n        }\n        // If there is only one bound and it is not a type variable, then that bound is the actual type argument\n        if (((TypeVariable<?>) typeVariable).getBounds().length == 1 && !(((TypeVariable<?>) typeVariable).getBounds()[0] instanceof TypeVariable)) {\n            registerTypeVariablesOn(((TypeVariable<?>) typeVariable).getBounds()[0]);\n            return;\n        }\n        // Otherwise, we need to use the type arguments of the owner type or method\n        Type ownerType = ((TypeVariable<?>) typeVariable).getGenericDeclaration();\n        if (ownerType instanceof ParameterizedType) {\n            Type[] actualTypeArguments = ((ParameterizedType) ownerType).getActualTypeArguments();\n            TypeVariable<?>[] typeParameters = ((Class<?>) ((ParameterizedType) ownerType).getRawType()).getTypeParameters();\n            for (int i = 0; i < typeParameters.length; i++) {\n                if (typeParameters[i].getName().equals(typeVariable.getTypeName())) {\n                    registerTypeVariablesOn(actualTypeArguments[i]);\n                    break;\n                }\n            }\n        } else if (ownerType instanceof GenericDeclaration) {\n            Type[] typeParameters = ((GenericDeclaration) ownerType).getTypeParameters();\n            for (int i = 0; i < typeParameters.length; i++) {\n                if (typeParameters[i].getTypeName().equals(typeVariable.getTypeName())) {\n                    throw new UnsupportedOperationException(\"Unable to extract type information from type variable \" + typeVariable.getTypeName());\n                }\n            }\n        }\n    } else if (typeVariable instanceof ParameterizedType) {\n        Type[] actualTypeArguments = ((ParameterizedType) typeVariable).getActualTypeArguments();\n        if (actualTypeArguments != null) {\n            for (Type actualTypeArgument : actualTypeArguments) {\n                if (actualTypeArgument != null) {\n                    registerTypeVariablesOn(actualTypeArgument);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..d05a6d5d9 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,54 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    if (typeVariable instanceof TypeVariable) {\n+        // If the type variable is not bound to a type, then there are no actual type arguments\n+        if (((TypeVariable<?>) typeVariable).getBounds().length == 0) {\n+            return;\n+        }\n+        // If there is only one bound and it is not a type variable, then that bound is the actual type argument\n+        if (((TypeVariable<?>) typeVariable).getBounds().length == 1 && !(((TypeVariable<?>) typeVariable).getBounds()[0] instanceof TypeVariable)) {\n+            registerTypeVariablesOn(((TypeVariable<?>) typeVariable).getBounds()[0]);\n+            return;\n+        }\n+        // Otherwise, we need to use the type arguments of the owner type or method\n+        Type ownerType = ((TypeVariable<?>) typeVariable).getGenericDeclaration();\n+        if (ownerType instanceof ParameterizedType) {\n+            Type[] actualTypeArguments = ((ParameterizedType) ownerType).getActualTypeArguments();\n+            TypeVariable<?>[] typeParameters = ((Class<?>) ((ParameterizedType) ownerType).getRawType()).getTypeParameters();\n+            for (int i = 0; i < typeParameters.length; i++) {\n+                if (typeParameters[i].getName().equals(typeVariable.getTypeName())) {\n+                    registerTypeVariablesOn(actualTypeArguments[i]);\n+                    break;\n+                }\n+            }\n+        } else if (ownerType instanceof GenericDeclaration) {\n+            Type[] typeParameters = ((GenericDeclaration) ownerType).getTypeParameters();\n+            for (int i = 0; i < typeParameters.length; i++) {\n+                if (typeParameters[i].getTypeName().equals(typeVariable.getTypeName())) {\n+                    throw new UnsupportedOperationException(\"Unable to extract type information from type variable \" + typeVariable.getTypeName());\n+                }\n+            }\n+        }\n+    } else if (typeVariable instanceof ParameterizedType) {\n+        Type[] actualTypeArguments = ((ParameterizedType) typeVariable).getActualTypeArguments();\n+        if (actualTypeArguments != null) {\n+            for (Type actualTypeArgument : actualTypeArguments) {\n+                if (actualTypeArgument != null) {\n+                    registerTypeVariablesOn(actualTypeArgument);\n+                }\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: incompatible types: CAP#1 cannot be converted to Type",
    "test_result": "ERROR"
}