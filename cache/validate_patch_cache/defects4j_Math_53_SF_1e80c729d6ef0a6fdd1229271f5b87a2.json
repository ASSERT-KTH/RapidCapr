{
    "patch": "public Complex add(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    double newReal = Double.NaN;\n    double newImaginary = Double.NaN;\n    try {\n        newReal = Math.addExact(real, rhs.getReal());\n        newImaginary = Math.addExact(imaginary, rhs.getImaginary());\n    } catch (ArithmeticException e) {\n        if (Double.isInfinite(real) || Double.isInfinite(rhs.getReal()) ||\n                Double.isInfinite(imaginary) || Double.isInfinite(rhs.getImaginary())) {\n            // If any of the values are infinite, return a NaN complex number.\n            return createComplex(Double.NaN, Double.NaN);\n        }\n        // Otherwise, calculate the new complex number using Double.MAX_VALUE.\n        newReal = Math.copySign(Double.MAX_VALUE, newReal);\n        newImaginary = Math.copySign(Double.MAX_VALUE, newImaginary);\n    }\n    return createComplex(newReal, newImaginary);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..c390e653f 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -147,12 +147,25 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n      * @return the complex number sum\n      * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex add(Complex rhs)\n-        throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n-            imaginary + rhs.getImaginary());\n+public Complex add(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n+    double newReal = Double.NaN;\n+    double newImaginary = Double.NaN;\n+    try {\n+        newReal = Math.addExact(real, rhs.getReal());\n+        newImaginary = Math.addExact(imaginary, rhs.getImaginary());\n+    } catch (ArithmeticException e) {\n+        if (Double.isInfinite(real) || Double.isInfinite(rhs.getReal()) ||\n+                Double.isInfinite(imaginary) || Double.isInfinite(rhs.getImaginary())) {\n+            // If any of the values are infinite, return a NaN complex number.\n+            return createComplex(Double.NaN, Double.NaN);\n+        }\n+        // Otherwise, calculate the new complex number using Double.MAX_VALUE.\n+        newReal = Math.copySign(Double.MAX_VALUE, newReal);\n+        newImaginary = Math.copySign(Double.MAX_VALUE, newImaginary);\n     }\n+    return createComplex(newReal, newImaginary);\n+}\n \n     /**\n      * Return the conjugate of this complex number. The conjugate of",
    "result_reason": "error: no suitable method found for addExact(double,double)",
    "test_result": "ERROR"
}