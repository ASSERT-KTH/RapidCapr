{
    "patch": "protected JSType caseTopType(JSType topType) {\n    if (topType.isUnknownType()) {\n        return getNativeType(OBJECT_TYPE);\n    } else if (topType.isBooleanValueType()\n            || topType.isNumberValueType()\n            || topType.isStringValueType()\n            || topType.isNullType()\n            || topType.isVoidType()) {\n        return getNativeType(OBJECT_TYPE);\n    }\n    return topType;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\nindex 1706e345..1ba34395 100644\n--- a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n@@ -51,7 +51,18 @@ public class ClosureReverseAbstractInterpreter\n       new RestrictByTrueTypeOfResultVisitor() {\n         @Override\n         protected JSType caseTopType(JSType topType) {\n-          return topType;\n+protected JSType caseTopType(JSType topType) {\n+    if (topType.isUnknownType()) {\n+        return getNativeType(OBJECT_TYPE);\n+    } else if (topType.isBooleanValueType()\n+            || topType.isNumberValueType()\n+            || topType.isStringValueType()\n+            || topType.isNullType()\n+            || topType.isVoidType()) {\n+        return getNativeType(OBJECT_TYPE);\n+    }\n+    return topType;\n+}\n         }\n \n         @Override",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}