{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN() || Double.isNaN(x)) {\n            return newInstance(this);\n        }\n        if (x == 0) {\n            return getZero();\n        }\n        if (x == 1) {\n            return newInstance(this);\n        }\n        final DfpField field = getField();\n        final int q = intValue();\n        final int[] data = new int[D];\n        for (int i = 0; i < D; i++) {\n            data[i] = DfpMath.toInt(getDataRef()[i] * x);\n        }\n        Dfp r = newInstance(field, data);\n        final int rh = r.highestOrderNonZeroDigit();\n        if (rh < (D - 1)) {\n            r = round(r);\n        }\n        return r;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..c6723a8b4 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,27 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN() || Double.isNaN(x)) {\n+            return newInstance(this);\n+        }\n+        if (x == 0) {\n+            return getZero();\n+        }\n+        if (x == 1) {\n+            return newInstance(this);\n+        }\n+        final DfpField field = getField();\n+        final int q = intValue();\n+        final int[] data = new int[D];\n+        for (int i = 0; i < D; i++) {\n+            data[i] = DfpMath.toInt(getDataRef()[i] * x);\n+        }\n+        Dfp r = newInstance(field, data);\n+        final int rh = r.highestOrderNonZeroDigit();\n+        if (rh < (D - 1)) {\n+            r = round(r);\n+        }\n+        return r;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}