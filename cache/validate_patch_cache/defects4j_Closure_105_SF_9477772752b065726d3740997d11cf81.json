{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                       Node parent) {\n  if (!NodeUtil.isGet(left) || !NodeUtil.isImmutableValue(right) || !NodeUtil.isGet(left.getFirstChild(), \"Array\", \"prototype\", \"join\")) {\n    return;\n  }\n\n  Node arrayNode = left.getNext();\n  List<Node> stringNodes = new ArrayList<>();\n  int totalStringLength = 0;\n  int separatorLength = NodeUtil.getStringValue(right).length();\n\n  // Expand the array sequence for the case where some of the elements\n  // are not direct children of the array.\n  List<Node> arraySequence = new ArrayList<>();\n  accumulateArraySequence(arrayNode, arraySequence);\n  for (Node n2 : arraySequence) {\n    if (NodeUtil.isString(n2)) {\n      String strVal = NodeUtil.getStringValue(n2);\n      totalStringLength += strVal.length();\n      stringNodes.add(Node.newString(strVal));\n    } else if (n2.isTemplateLit()) {\n      for (Node child : n2.children()) {\n        if (NodeUtil.isString(child)) {\n          String strVal = NodeUtil.getStringValue(child);\n          totalStringLength += strVal.length();\n          stringNodes.add(Node.newString(strVal));\n        } else {\n          return; // Can't fold if it's not a static string.\n        }\n      }\n    } else {\n      // One of the characters isn't a string, so we can't use\n      // string concatenation. i.e. [a, 1].join(\":\"); -> \"a:1\"\n      return;\n    }\n  }\n\n  int foldedSize = totalStringLength + ((stringNodes.size() - 1) * separatorLength);\n  int originalSize = InlineCostEstimator.getCost(n);\n\n  if (foldedSize <= originalSize) {\n    Node foldedString = null;\n    if (stringNodes.size() == 0) {\n      foldedString = IR.string(\"\");\n    } else {\n      foldedString = stringNodes.get(0);\n      for (int i = 1; i < stringNodes.size(); i++) {\n        Node separator = Node.newString(NodeUtil.getStringValue(right));\n        foldedString = IR.binary(Token.ADD, foldedString, separator);\n        foldedString = IR.binary(Token.ADD, foldedString, stringNodes.get(i));\n      }\n    }\n    parent.replaceChild(n, foldedString);\n    t.getCompiler().reportCodeChange();\n  }\n}\n\nvoid accumulateArraySequence(Node n, List<Node> sequence) {\n  if (NodeUtil.isBlock(n)) {\n    for (Node statement : n.children()) {\n      accumulateArraySequence(statement, sequence);\n    }\n  } else if (NodeUtil.isExprStatement(n)) {\n    sequence.add(n.getFirstChild());\n  } else {\n    sequence.add(n);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..4485c4f4 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,74 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n-\n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n-\n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+                       Node parent) {\n+  if (!NodeUtil.isGet(left) || !NodeUtil.isImmutableValue(right) || !NodeUtil.isGet(left.getFirstChild(), \"Array\", \"prototype\", \"join\")) {\n+    return;\n+  }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+  Node arrayNode = left.getNext();\n+  List<Node> stringNodes = new ArrayList<>();\n+  int totalStringLength = 0;\n+  int separatorLength = NodeUtil.getStringValue(right).length();\n+\n+  // Expand the array sequence for the case where some of the elements\n+  // are not direct children of the array.\n+  List<Node> arraySequence = new ArrayList<>();\n+  accumulateArraySequence(arrayNode, arraySequence);\n+  for (Node n2 : arraySequence) {\n+    if (NodeUtil.isString(n2)) {\n+      String strVal = NodeUtil.getStringValue(n2);\n+      totalStringLength += strVal.length();\n+      stringNodes.add(Node.newString(strVal));\n+    } else if (n2.isTemplateLit()) {\n+      for (Node child : n2.children()) {\n+        if (NodeUtil.isString(child)) {\n+          String strVal = NodeUtil.getStringValue(child);\n+          totalStringLength += strVal.length();\n+          stringNodes.add(Node.newString(strVal));\n+        } else {\n+          return; // Can't fold if it's not a static string.\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n       }\n-      elem = elem.getNext();\n-    }\n-\n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+    } else {\n+      // One of the characters isn't a string, so we can't use\n+      // string concatenation. i.e. [a, 1].join(\":\"); -> \"a:1\"\n+      return;\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+  }\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  int foldedSize = totalStringLength + ((stringNodes.size() - 1) * separatorLength);\n+  int originalSize = InlineCostEstimator.getCost(n);\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+  if (foldedSize <= originalSize) {\n+    Node foldedString = null;\n+    if (stringNodes.size() == 0) {\n+      foldedString = IR.string(\"\");\n+    } else {\n+      foldedString = stringNodes.get(0);\n+      for (int i = 1; i < stringNodes.size(); i++) {\n+        Node separator = Node.newString(NodeUtil.getStringValue(right));\n+        foldedString = IR.binary(Token.ADD, foldedString, separator);\n+        foldedString = IR.binary(Token.ADD, foldedString, stringNodes.get(i));\n+      }\n     }\n+    parent.replaceChild(n, foldedString);\n     t.getCompiler().reportCodeChange();\n   }\n+}\n+\n+void accumulateArraySequence(Node n, List<Node> sequence) {\n+  if (NodeUtil.isBlock(n)) {\n+    for (Node statement : n.children()) {\n+      accumulateArraySequence(statement, sequence);\n+    }\n+  } else if (NodeUtil.isExprStatement(n)) {\n+    sequence.add(n.getFirstChild());\n+  } else {\n+    sequence.add(n);\n+  }\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: method isGet in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}