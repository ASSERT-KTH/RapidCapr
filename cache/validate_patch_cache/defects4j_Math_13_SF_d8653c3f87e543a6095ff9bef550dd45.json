{
    "patch": "import org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixIterator;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final int MATRIX_MAX_SIZE = 10000;\n\n    if(m.getRowDimension() * m.getColumnDimension() > MATRIX_MAX_SIZE * MATRIX_MAX_SIZE) {\n        System.out.println(\"Matrix too large.\");\n        return null;\n    }\n\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix v = dec.getV();\n    RealMatrix d = MatrixUtils.createRealDiagonalMatrix(getSqrtMatrix(dec.getRealEigenvalues()));\n    return v.multiply(d).multiply(v.transpose());\n}\n\n\nprivate double[] getSqrtMatrix(double[] ar) {\n    double[] result = new double[ar.length];\n    for (int i = 0; i < ar.length; i++) {\n        result[i] = Math.sqrt(ar[i]);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2993f2be9 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,31 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.MatrixUtils;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.MatrixIterator;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int MATRIX_MAX_SIZE = 10000;\n+\n+    if(m.getRowDimension() * m.getColumnDimension() > MATRIX_MAX_SIZE * MATRIX_MAX_SIZE) {\n+        System.out.println(\"Matrix too large.\");\n+        return null;\n     }\n+\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix v = dec.getV();\n+    RealMatrix d = MatrixUtils.createRealDiagonalMatrix(getSqrtMatrix(dec.getRealEigenvalues()));\n+    return v.multiply(d).multiply(v.transpose());\n+}\n+\n+\n+private double[] getSqrtMatrix(double[] ar) {\n+    double[] result = new double[ar.length];\n+    for (int i = 0; i < ar.length; i++) {\n+        result[i] = Math.sqrt(ar[i]);\n+    }\n+    return result;\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}