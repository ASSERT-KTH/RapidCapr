{
    "patch": "        if (val == null) {\n            return null;\n        }\n        if (val.length() == 0) {\n            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n        }\n        // check for double negative signs\n        if (val.startsWith(\"--\")) {\n            return null;\n        }\n        char firstChar = val.charAt(0);\n        boolean isNegative = firstChar == '-';\n        int startIndex = isNegative || firstChar == '+' ? 1 : 0;\n\n        // validate all remaining characters\n        if (val.length() > startIndex + 1) {\n            char secondChar = val.charAt(startIndex + 1);\n            if (firstChar == '0') {\n                if (secondChar == 'x' || secondChar == 'X') {\n                    // hexadecimal number\n                    for (int i = startIndex + 2; i < val.length(); i++) {\n                        char ch = val.charAt(i);\n                        if ((ch < '0' || ch > '9') && (ch < 'a' || ch > 'f') && (ch < 'A' || ch > 'F')) {\n                            throw new NumberFormatException(val + \" is not a valid number.\");\n                        }\n                    }\n                    return createInteger(val);\n                } else if (Character.isDigit(secondChar)) {\n                    // octal number\n                    for (int i = startIndex + 1; i < val.length(); i++) {\n                        char ch = val.charAt(i);\n                        if (ch < '0' || ch > '7') {\n                            throw new NumberFormatException(val + \" is not a valid number.\");\n                        }\n                    }\n                    return createInteger(val);\n                }\n            }\n        }\n\n        // validate remaining characters\n        for (int i = startIndex; i < val.length(); i++) {\n            char ch = val.charAt(i);\n            if (ch < '0' || ch > '9') {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n        }\n        \n        // parse the number as integer, long, or big integer, depending on length and negation\n        String numeric = val.substring(startIndex);\n        if (numeric.length() <= 9) {\n            int parsed = Integer.parseInt(numeric);\n            if (isNegative) {\n                return parsed == Integer.MIN_VALUE ? createBigInteger(numeric) : (Number) (-parsed);\n            } else {\n                return parsed;\n            }\n        } else if (numeric.length() <= 18) {\n            long parsed = Long.parseLong(numeric);\n            if (isNegative) {\n                return parsed == Long.MIN_VALUE ? createBigInteger(numeric) : (Number) (-parsed);\n            } else {\n                return parsed;\n            }\n        } else {\n            return createBigInteger(numeric);\n        }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..d5b4b67e 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,73 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if (val == null) {\n+            return null;\n+        }\n+        if (val.length() == 0) {\n+            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n+        }\n+        // check for double negative signs\n+        if (val.startsWith(\"--\")) {\n+            return null;\n+        }\n+        char firstChar = val.charAt(0);\n+        boolean isNegative = firstChar == '-';\n+        int startIndex = isNegative || firstChar == '+' ? 1 : 0;\n+\n+        // validate all remaining characters\n+        if (val.length() > startIndex + 1) {\n+            char secondChar = val.charAt(startIndex + 1);\n+            if (firstChar == '0') {\n+                if (secondChar == 'x' || secondChar == 'X') {\n+                    // hexadecimal number\n+                    for (int i = startIndex + 2; i < val.length(); i++) {\n+                        char ch = val.charAt(i);\n+                        if ((ch < '0' || ch > '9') && (ch < 'a' || ch > 'f') && (ch < 'A' || ch > 'F')) {\n+                            throw new NumberFormatException(val + \" is not a valid number.\");\n+                        }\n+                    }\n+                    return createInteger(val);\n+                } else if (Character.isDigit(secondChar)) {\n+                    // octal number\n+                    for (int i = startIndex + 1; i < val.length(); i++) {\n+                        char ch = val.charAt(i);\n+                        if (ch < '0' || ch > '7') {\n+                            throw new NumberFormatException(val + \" is not a valid number.\");\n+                        }\n+                    }\n+                    return createInteger(val);\n+                }\n+            }\n+        }\n+\n+        // validate remaining characters\n+        for (int i = startIndex; i < val.length(); i++) {\n+            char ch = val.charAt(i);\n+            if (ch < '0' || ch > '9') {\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n+            }\n+        }\n+        \n+        // parse the number as integer, long, or big integer, depending on length and negation\n+        String numeric = val.substring(startIndex);\n+        if (numeric.length() <= 9) {\n+            int parsed = Integer.parseInt(numeric);\n+            if (isNegative) {\n+                return parsed == Integer.MIN_VALUE ? createBigInteger(numeric) : (Number) (-parsed);\n+            } else {\n+                return parsed;\n+            }\n+        } else if (numeric.length() <= 18) {\n+            long parsed = Long.parseLong(numeric);\n+            if (isNegative) {\n+                return parsed == Long.MIN_VALUE ? createBigInteger(numeric) : (Number) (-parsed);\n+            } else {\n+                return parsed;\n+            }\n+        } else {\n+            return createBigInteger(numeric);\n+        }\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: inconvertible types",
    "test_result": "ERROR"
}