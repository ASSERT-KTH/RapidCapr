{
    "patch": "      ObjectType objType = getObjType();\n      for (String prop : objType.getOwnPropertyNames()) {\n        JSType propType = objType.getPropertyType(prop);\n        if (propType.isUnknownType()) {\n          // If the property type is unknown, we check if this type has\n          // previously been declared in the scope.\n          if (!isPropertyTypeInferred(prop)) {\n            warnings.add(JSError.make(propDecl, VAR_INFERRED_UNKNOWN_TYPE, prop));\n          }\n        } else {\n          if (!isPropertyTypeDeclared(prop)) {\n            // Rhs is not the annotated null or undefined, but there may not be\n            // any jsdoc annotation dictating the type. Therefore, we\n            // assume the inferred type to be either VOID or BOTTOM.\n            // If the rhs is a qualified name, we assume that the name refers\n            // to an external object type, and thus BOTTOM type is chosen.\n            // Otherwise, we choose VOID type, symbolizing an absent value.\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n              if (propType.getKind() == JSTypeNative.QUIRE_TYPE) {\n                typeToInfer = getNativeType(JSTypeNative.BOTTOM_TYPE)\n                    .getLeastSupertype(propType);\n              } else {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                    .getLeastSupertype(propType);\n              }\n            }\n            defineInferredProperty(prop, typeToInfer);\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..3d54fbf4 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,37 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+      ObjectType objType = getObjType();\n+      for (String prop : objType.getOwnPropertyNames()) {\n+        JSType propType = objType.getPropertyType(prop);\n+        if (propType.isUnknownType()) {\n+          // If the property type is unknown, we check if this type has\n+          // previously been declared in the scope.\n+          if (!isPropertyTypeInferred(prop)) {\n+            warnings.add(JSError.make(propDecl, VAR_INFERRED_UNKNOWN_TYPE, prop));\n+          }\n+        } else {\n+          if (!isPropertyTypeDeclared(prop)) {\n+            // Rhs is not the annotated null or undefined, but there may not be\n+            // any jsdoc annotation dictating the type. Therefore, we\n+            // assume the inferred type to be either VOID or BOTTOM.\n+            // If the rhs is a qualified name, we assume that the name refers\n+            // to an external object type, and thus BOTTOM type is chosen.\n+            // Otherwise, we choose VOID type, symbolizing an absent value.\n+            JSType typeToInfer = propType;\n+            if (!hasProperty(prop)) {\n+              if (propType.getKind() == JSTypeNative.QUIRE_TYPE) {\n+                typeToInfer = getNativeType(JSTypeNative.BOTTOM_TYPE)\n+                    .getLeastSupertype(propType);\n+              } else {\n+                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                    .getLeastSupertype(propType);\n+              }\n+            }\n+            defineInferredProperty(prop, typeToInfer);\n+          }\n+        }\n+      }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}