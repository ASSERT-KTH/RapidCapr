{
    "patch": "public static boolean containsAny(CharSequence string, char[] chars) {\n    int strLength = string.length();\n    int charsLength = chars.length;\n    for (int i = 0; i < strLength; i++) {\n        char ch = string.charAt(i);\n        for (int j = 0; j < charsLength; j++) {\n            char target = chars[j];\n            if (ch == target) {\n                return true;\n            }\n            if (Character.isHighSurrogate(ch)) {\n                if (j == charsLength - 1) {\n                    throw new IllegalArgumentException(\"Invalid surrogate pair at end of source: \" + string);\n                }\n                char next = i < strLength - 1 ? string.charAt(i + 1) : 0;\n                if (next == chars[j + 1]) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..f39f7373 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,29 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence string, char[] chars) {\n+    int strLength = string.length();\n+    int charsLength = chars.length;\n+    for (int i = 0; i < strLength; i++) {\n+        char ch = string.charAt(i);\n+        for (int j = 0; j < charsLength; j++) {\n+            char target = chars[j];\n+            if (ch == target) {\n+                return true;\n+            }\n+            if (Character.isHighSurrogate(ch)) {\n+                if (j == charsLength - 1) {\n+                    throw new IllegalArgumentException(\"Invalid surrogate pair at end of source: \" + string);\n+                }\n+                char next = i < strLength - 1 ? string.charAt(i + 1) : 0;\n+                if (next == chars[j + 1]) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}