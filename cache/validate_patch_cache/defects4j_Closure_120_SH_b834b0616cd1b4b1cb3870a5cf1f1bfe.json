{
    "patch": "        if (block.isFunction || block.isFunctionBlock()) {\n          // The assignment is inside a function or function block.\n          // The variable may be reassigned in a subsequent invocation.\n          return false;\n        } else if (block.isLoop) {\n          // The block has a loop statement; any change to this variable might\n          // be repeated in subsequent iterations.\n          return false;\n        } else if (block.isTryBlock()) {\n          // The block is inside a try-statement.\n          // A catch block might execute and reintialize the variable.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..7106fecf 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction || block.isFunctionBlock()) {\n+          // The assignment is inside a function or function block.\n+          // The variable may be reassigned in a subsequent invocation.\n+          return false;\n+        } else if (block.isLoop) {\n+          // The block has a loop statement; any change to this variable might\n+          // be repeated in subsequent iterations.\n+          return false;\n+        } else if (block.isTryBlock()) {\n+          // The block is inside a try-statement.\n+          // A catch block might execute and reintialize the variable.\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}