{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n    // A list to store potential objects for inlining\n    List<Node> objectsToInline = new ArrayList<Node>();\n\n    for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n\n        // Ignore indirect references, like x.y and x.y()\n        if (parent.isGetProp()) {\n            Preconditions.checkState(parent.getFirstChild() == name);\n            // A call target maybe using the object as a 'this' value.\n            Node grandparent = ref.getGrandparent();\n            if (grandparent.isCall() && grandparent.getFirstChild() == parent) {\n                return false;\n            }\n            continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n            return false;\n        }\n\n        Node value = ref.getAssignedValue();\n        if (value == null || !value.isObjectLit()) {\n            return false;\n        }\n\n        // Make sure that the value is not circular\n        Node foundRef = null;\n        for (Node object : objectsToInline) {\n            if (object == value) {\n                // There is a circular reference\n                foundRef = object;\n                break;\n            }\n        }\n        if (foundRef != null && hasCircularReference(value, foundRef)) {\n            return false;\n        }\n\n        objectsToInline.add(value);\n    }\n\n    return true;\n}\n\nprivate boolean hasCircularReference(Node value, Node comparedValue) {\n    Set<Node> visitedNodes = new HashSet<Node>();\n    visitedNodes.add(comparedValue);\n\n    // Traverse and compare two object literals\n    LinkedList<Node> queue1 = new LinkedList<Node>();\n    queue1.add(value);\n    LinkedList<Node> queue2 = new LinkedList<Node>();\n    queue2.add(comparedValue);\n\n    while (!queue1.isEmpty() && !queue2.isEmpty()) {\n        Node node1 = queue1.removeFirst();\n        Node node2 = queue2.removeFirst();\n\n        for (Node child1 = node1.getFirstChild(), child2 = node2.getFirstChild();\n             child1 != null && child2 != null;\n             child1 = child1.getNext(), child2 = child2.getNext()) {\n\n            if (child1.isObjectLit() && child2.isObjectLit()) {\n                if (visitedNodes.contains(child2)) {\n                    continue;\n                }\n                visitedNodes.add(child2);\n                queue1.add(child1);\n                queue2.add(child2);\n            } else if (!child1.isEquivalentTo(child2)) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..39202bd2 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,93 +152,88 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n+private boolean isInlinableObject(List<Reference> refs) {\n+    // A list to store potential objects for inlining\n+    List<Node> objectsToInline = new ArrayList<Node>();\n+\n+    for (Reference ref : refs) {\n         Node name = ref.getNode();\n         Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n \n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n+        // Ignore indirect references, like x.y and x.y()\n         if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n-\n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n+            Preconditions.checkState(parent.getFirstChild() == name);\n+            // A call target maybe using the object as a 'this' value.\n+            Node grandparent = ref.getGrandparent();\n+            if (grandparent.isCall() && grandparent.getFirstChild() == parent) {\n+                return false;\n+            }\n+            continue;\n         }\n \n         // Only rewrite VAR declarations or simple assignment statements\n         if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n+            return false;\n         }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n+        Node value = ref.getAssignedValue();\n+        if (value == null || !value.isObjectLit()) {\n+            return false;\n         }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n+        // Make sure that the value is not circular\n+        Node foundRef = null;\n+        for (Node object : objectsToInline) {\n+            if (object == value) {\n+                // There is a circular reference\n+                foundRef = object;\n+                break;\n+            }\n         }\n-\n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n+        if (foundRef != null && hasCircularReference(value, foundRef)) {\n             return false;\n-          }\n+        }\n \n+        objectsToInline.add(value);\n+    }\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n+    return true;\n+}\n+\n+private boolean hasCircularReference(Node value, Node comparedValue) {\n+    Set<Node> visitedNodes = new HashSet<Node>();\n+    visitedNodes.add(comparedValue);\n+\n+    // Traverse and compare two object literals\n+    LinkedList<Node> queue1 = new LinkedList<Node>();\n+    queue1.add(value);\n+    LinkedList<Node> queue2 = new LinkedList<Node>();\n+    queue2.add(comparedValue);\n+\n+    while (!queue1.isEmpty() && !queue2.isEmpty()) {\n+        Node node1 = queue1.removeFirst();\n+        Node node2 = queue2.removeFirst();\n+\n+        for (Node child1 = node1.getFirstChild(), child2 = node2.getFirstChild();\n+             child1 != null && child2 != null;\n+             child1 = child1.getNext(), child2 = child2.getNext()) {\n+\n+            if (child1.isObjectLit() && child2.isObjectLit()) {\n+                if (visitedNodes.contains(child2)) {\n+                    continue;\n+                }\n+                visitedNodes.add(child2);\n+                queue1.add(child1);\n+                queue2.add(child2);\n+            } else if (!child1.isEquivalentTo(child2)) {\n+                return true;\n             }\n-          }\n         }\n-\n-\n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n-      }\n-      return ret;\n     }\n \n+    return false;\n+}\n+\n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();\n       return parent.isVar() ||",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}