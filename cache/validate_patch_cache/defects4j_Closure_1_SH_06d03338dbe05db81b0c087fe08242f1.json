{
    "patch": "    Preconditions.checkState(function.isFunction(), function.toString());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    NodeUtil.visitPostOrder(\n        argList,\n        new NodeUtil.Visitor() {\n          @Override\n          public void visit(Node node) {\n            if (!node.isParam()) {\n              return;\n            }\n\n            Var var = fnScope.getVar(node.getString());\n            if (!referenced.contains(var)) {\n              Node defaultVal = node.getFirstChild();\n              if (defaultVal != null) {\n                // Leave the default value marker in place, so that locals\n                // are still created for these parameters in the function\n                // body.\n                node.removeChild(defaultVal);\n                node.addChildToFront(IR.name(\"unused\").srcref(defaultVal));\n                compiler.reportCodeChange();\n              } else {\n                node.detach();\n                compiler.reportCodeChange();\n              }\n            }\n          }\n        });\n\n    if (modifyCallSites && callSiteOptimizer.canModifyCallers(function)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..412b34b9 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,42 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Preconditions.checkState(function.isFunction(), function.toString());\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    NodeUtil.visitPostOrder(\n+        argList,\n+        new NodeUtil.Visitor() {\n+          @Override\n+          public void visit(Node node) {\n+            if (!node.isParam()) {\n+              return;\n+            }\n+\n+            Var var = fnScope.getVar(node.getString());\n+            if (!referenced.contains(var)) {\n+              Node defaultVal = node.getFirstChild();\n+              if (defaultVal != null) {\n+                // Leave the default value marker in place, so that locals\n+                // are still created for these parameters in the function\n+                // body.\n+                node.removeChild(defaultVal);\n+                node.addChildToFront(IR.name(\"unused\").srcref(defaultVal));\n+                compiler.reportCodeChange();\n+              } else {\n+                node.detach();\n+                compiler.reportCodeChange();\n+              }\n+            }\n+          }\n+        });\n+\n+    if (modifyCallSites && callSiteOptimizer.canModifyCallers(function)) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}