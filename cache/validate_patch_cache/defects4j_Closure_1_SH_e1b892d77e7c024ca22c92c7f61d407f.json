{
    "patch": "    // Determine if the function has JSDoc with @this or @return.\n    boolean hasReturnAnnotation = false;\n    boolean hasThisAnnotation = false;\n\n    JSDocInfo functionJsDoc = NodeUtil.getBestJSDocInfo(function);\n    if (functionJsDoc != null) {\n      hasReturnAnnotation = functionJsDoc.hasReturn();\n      hasThisAnnotation = functionJsDoc.hasThisType();\n    }\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          boolean removeAnnotation = false;\n          if (functionJsDoc != null) {\n            removeAnnotation =\n                maybeRemoveTypeAnnotation(functionJsDoc, lastArg.getString());\n          }\n          argList.removeChild(lastArg);\n          if (removeAnnotation) {\n            function.setJSDocInfo(functionJsDoc);\n          }\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n\n    // Update annotations on modified function\n    functionJsDoc = NodeUtil.getBestJSDocInfo(function);\n    if (functionJsDoc != null) {\n      if (function.isArrowFunction()) {\n        // arrow function parameter name can't be changed\n        for (Node argName : argList.children()) {\n          maybeRemoveTypeAnnotation(functionJsDoc, argName.getString());\n        }\n        if (hasReturnAnnotation) {\n          maybeRemoveReturnTypeAnnotation(functionJsDoc);\n        }\n      } else {\n        int currentParamIndex = 0;\n        for (Node argName : argList.children()) {\n          String paramName = argName.getString();\n          boolean paramIsOptional = argName.hasChildren()\n              && argName.getFirstChild().isDefaultValue();\n          boolean paramIsVarArgs = argName.isVarArgs();\n\n          // Find the next variable in source order.\n          Node paramNode = null;\n          for (Node astNode : function.children()) {\n            if (astNode.isParamList()) {\n              for (Node functionParam : astNode.children()) {\n                if (functionParam.isName()\n                    && functionParam.getString().equals(paramName)) {\n                  paramNode = functionParam;\n                  break;\n                }\n              }\n              break;\n            }\n          }\n\n          // In some cases the parameter might not be found in the AST\n          if (paramNode == null) {\n            continue;\n          }\n\n          boolean paramHasAnnotation = maybeRemoveTypeAnnotation(functionJsDoc, paramName);\n          boolean shouldAddAnnotation = (hasThisAnnotation && currentParamIndex == 0\n              || hasReturnAnnotation && !function.isConstructor() && !function.isSetter()\n                  && !paramHasAnnotation && !paramIsOptional && !paramIsVarArgs);\n\n          if (shouldAddAnnotation) {\n            Node typeAnnotation = IR.anyType();\n            typeAnnotation.setLength(0);\n            typeAnnotation.setLength(\n                typeAnnotation.getLength() + paramName.length() + 1); // for the ':'\n            Node name = Node.newString(paramName);\n            typeAnnotation.addChildToBack(name);\n            typeAnnotation.addChildToBack(IR.token(Token.COLON));\n            addTypeToAnnotation(typeAnnotation, getTypeOf(var));\n            Node jsDocAst = JSDocInfoParser.parseTypeString(\n                typeAnnotation.toString(), typeRegistry, \"\");\n            functionJsDoc.parameterTypeMap().put(paramName, jsDocAst);\n            compiler.reportCodeChange();\n          }\n\n          currentParamIndex++;\n        }\n\n        if (hasReturnAnnotation && !function.isConstructor() && !function.isSetter()) {\n          addTypeToAnnotation(functionJsDoc, getTypeOf(fnScope.getVar(\"return\")));\n          compiler.reportCodeChange();\n        }\n      }\n      function.setJSDocInfo(functionJsDoc);\n    } else {\n      if (hasThisAnnotation || hasReturnAnnotation) {\n        // Create and attach the missing @param JSDoc annotation.\n        JSDocInfoBuilder fnDoc = new JSDocInfoBuilder(true);\n        if (hasThisAnnotation) {\n          fnDoc.recordThisType();\n        }\n        if (hasReturnAnnotation) {\n          fnDoc.recordReturnType();\n        }\n        function.setJSDocInfo(fnDoc.build());\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..517a44ab 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,120 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Determine if the function has JSDoc with @this or @return.\n+    boolean hasReturnAnnotation = false;\n+    boolean hasThisAnnotation = false;\n+\n+    JSDocInfo functionJsDoc = NodeUtil.getBestJSDocInfo(function);\n+    if (functionJsDoc != null) {\n+      hasReturnAnnotation = functionJsDoc.hasReturn();\n+      hasThisAnnotation = functionJsDoc.hasThisType();\n+    }\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          boolean removeAnnotation = false;\n+          if (functionJsDoc != null) {\n+            removeAnnotation =\n+                maybeRemoveTypeAnnotation(functionJsDoc, lastArg.getString());\n+          }\n+          argList.removeChild(lastArg);\n+          if (removeAnnotation) {\n+            function.setJSDocInfo(functionJsDoc);\n+          }\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+\n+    // Update annotations on modified function\n+    functionJsDoc = NodeUtil.getBestJSDocInfo(function);\n+    if (functionJsDoc != null) {\n+      if (function.isArrowFunction()) {\n+        // arrow function parameter name can't be changed\n+        for (Node argName : argList.children()) {\n+          maybeRemoveTypeAnnotation(functionJsDoc, argName.getString());\n+        }\n+        if (hasReturnAnnotation) {\n+          maybeRemoveReturnTypeAnnotation(functionJsDoc);\n+        }\n+      } else {\n+        int currentParamIndex = 0;\n+        for (Node argName : argList.children()) {\n+          String paramName = argName.getString();\n+          boolean paramIsOptional = argName.hasChildren()\n+              && argName.getFirstChild().isDefaultValue();\n+          boolean paramIsVarArgs = argName.isVarArgs();\n+\n+          // Find the next variable in source order.\n+          Node paramNode = null;\n+          for (Node astNode : function.children()) {\n+            if (astNode.isParamList()) {\n+              for (Node functionParam : astNode.children()) {\n+                if (functionParam.isName()\n+                    && functionParam.getString().equals(paramName)) {\n+                  paramNode = functionParam;\n+                  break;\n+                }\n+              }\n+              break;\n+            }\n+          }\n+\n+          // In some cases the parameter might not be found in the AST\n+          if (paramNode == null) {\n+            continue;\n+          }\n+\n+          boolean paramHasAnnotation = maybeRemoveTypeAnnotation(functionJsDoc, paramName);\n+          boolean shouldAddAnnotation = (hasThisAnnotation && currentParamIndex == 0\n+              || hasReturnAnnotation && !function.isConstructor() && !function.isSetter()\n+                  && !paramHasAnnotation && !paramIsOptional && !paramIsVarArgs);\n+\n+          if (shouldAddAnnotation) {\n+            Node typeAnnotation = IR.anyType();\n+            typeAnnotation.setLength(0);\n+            typeAnnotation.setLength(\n+                typeAnnotation.getLength() + paramName.length() + 1); // for the ':'\n+            Node name = Node.newString(paramName);\n+            typeAnnotation.addChildToBack(name);\n+            typeAnnotation.addChildToBack(IR.token(Token.COLON));\n+            addTypeToAnnotation(typeAnnotation, getTypeOf(var));\n+            Node jsDocAst = JSDocInfoParser.parseTypeString(\n+                typeAnnotation.toString(), typeRegistry, \"\");\n+            functionJsDoc.parameterTypeMap().put(paramName, jsDocAst);\n+            compiler.reportCodeChange();\n+          }\n+\n+          currentParamIndex++;\n+        }\n+\n+        if (hasReturnAnnotation && !function.isConstructor() && !function.isSetter()) {\n+          addTypeToAnnotation(functionJsDoc, getTypeOf(fnScope.getVar(\"return\")));\n+          compiler.reportCodeChange();\n+        }\n+      }\n+      function.setJSDocInfo(functionJsDoc);\n+    } else {\n+      if (hasThisAnnotation || hasReturnAnnotation) {\n+        // Create and attach the missing @param JSDoc annotation.\n+        JSDocInfoBuilder fnDoc = new JSDocInfoBuilder(true);\n+        if (hasThisAnnotation) {\n+          fnDoc.recordThisType();\n+        }\n+        if (hasReturnAnnotation) {\n+          fnDoc.recordReturnType();\n+        }\n+        function.setJSDocInfo(fnDoc.build());\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}