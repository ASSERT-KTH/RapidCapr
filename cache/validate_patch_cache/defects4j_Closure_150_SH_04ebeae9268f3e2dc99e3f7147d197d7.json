{
    "patch": " attachLiteralTypes(n); // move attachLiteralTypes first to fix the IR generation bugs\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          Node firstChild = n.getFirstChild();\n          if (NodeUtil.isFunctionExpression(n)) { // check if it is an anonymous function\n            if (parent.getType() == Token.NAME && firstChild != null) {\n              defineDeclaredFunction(firstChild, parent); // make sure to define function child node instead\n              break;\n            } else if (parent.getType() == Token.EXPR_RESULT) {\n              defineDeclaredFunction(n, parent);\n              break;\n            }\n          } else if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..120150a5 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,10 +1448,19 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n+ attachLiteralTypes(n); // move attachLiteralTypes first to fix the IR generation bugs\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+          Node firstChild = n.getFirstChild();\n+          if (NodeUtil.isFunctionExpression(n)) { // check if it is an anonymous function\n+            if (parent.getType() == Token.NAME && firstChild != null) {\n+              defineDeclaredFunction(firstChild, parent); // make sure to define function child node instead\n+              break;\n+            } else if (parent.getType() == Token.EXPR_RESULT) {\n+              defineDeclaredFunction(n, parent);\n+              break;\n+            }\n+          } else if (parent.getType() == Token.NAME) {\n             return;\n           }\n           defineDeclaredFunction(n, parent);\n@@ -1462,7 +1471,8 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n-      }\n+        default:\n+          break;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}