{
    "patch": "protected void iterateSimplex(Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        RealPointValuePair[] original = simplex.clone();\n        RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        RealPointValuePair reflected = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // try to expand the simplex\n            RealPointValuePair[] expandedSimplex = simplex.clone();\n            RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex = expandedSimplex;\n            } else {\n                simplex = reflected.getPoint() == best.getPoint() ? reflected.getPointAndValuePair() : reflected.getPointValuePair();\n            }\n        } else {\n            // try to contract the simplex\n            RealPointValuePair[] contractedSimplex = simplex.clone();\n            RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                simplex = contractedSimplex;\n            } else {\n                // try a reduction\n                for (int i = 1; i < simplex.length; i++) {\n                    RealPointValuePair[] reducedSimplex = simplex.clone();\n                    reducedSimplex[i] = new RealPointValuePair(\n                            PointValuePairOperation.weightedAverage(original, weights, reducedSimplex[i].getPoint(), -delta),\n                            Double.NaN, false);\n                    reducedSimplex = evaluateSimplex(reducedSimplex, comparator);\n                    if (comparator.compare(reducedSimplex[0], simplex[0]) < 0) {\n                        simplex = reducedSimplex;\n                        break;\n                    }\n                    // shrink the simplex around the best point\n                    else {\n                        for (int j = 1; j < simplex.length; j++) {\n                            simplex[j] = new RealPointValuePair(\n                                    PointValuePairOperation.weightedAverage(original, weights, simplex[j].getPoint(), -sigma),\n                                    Double.NaN, false);\n                        }\n                        simplex = evaluateSimplex(simplex, comparator);\n                    }\n                }\n            }\n        }\n\n        if (hasConverged()) {\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..662ad9c8a 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,63 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+    while (true) {\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        RealPointValuePair[] original = simplex.clone();\n+        RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        RealPointValuePair reflected = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            // try to expand the simplex\n+            RealPointValuePair[] expandedSimplex = simplex.clone();\n+            RealPointValuePair expanded = evaluateNewSimplex(original, rho, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex = expandedSimplex;\n+            } else {\n+                simplex = reflected.getPoint() == best.getPoint() ? reflected.getPointAndValuePair() : reflected.getPointValuePair();\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        } else {\n+            // try to contract the simplex\n+            RealPointValuePair[] contractedSimplex = simplex.clone();\n+            RealPointValuePair contracted = evaluateNewSimplex(original, sigma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex = contractedSimplex;\n+            } else {\n+                // try a reduction\n+                for (int i = 1; i < simplex.length; i++) {\n+                    RealPointValuePair[] reducedSimplex = simplex.clone();\n+                    reducedSimplex[i] = new RealPointValuePair(\n+                            PointValuePairOperation.weightedAverage(original, weights, reducedSimplex[i].getPoint(), -delta),\n+                            Double.NaN, false);\n+                    reducedSimplex = evaluateSimplex(reducedSimplex, comparator);\n+                    if (comparator.compare(reducedSimplex[0], simplex[0]) < 0) {\n+                        simplex = reducedSimplex;\n+                        break;\n+                    }\n+                    // shrink the simplex around the best point\n+                    else {\n+                        for (int j = 1; j < simplex.length; j++) {\n+                            simplex[j] = new RealPointValuePair(\n+                                    PointValuePairOperation.weightedAverage(original, weights, simplex[j].getPoint(), -sigma),\n+                                    Double.NaN, false);\n+                        }\n+                        simplex = evaluateSimplex(simplex, comparator);\n+                    }\n+                }\n             }\n-\n         }\n \n+        if (hasConverged()) {\n+            return;\n+        }\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}