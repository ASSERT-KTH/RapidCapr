{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  List<Node> parameters = functionType.getParameters();\n  boolean var_args = functionType.isVarArgs();\n  if (!var_args && arguments.hasNext() && parameters.isEmpty()) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        \"0\", \"0\", \"\");\n    return;\n  }\n\n  int num_args = 0;\n  Node var_args_parameter = null;\n  if (var_args && !parameters.isEmpty()) {\n    var_args_parameter = parameters.get(parameters.size() - 1);\n    parameters = parameters.subList(0, parameters.size() - 1);\n  }\n  int i;\n  for (i = 0; i < parameters.size() && arguments.hasNext(); i++) {\n    Node parameter = parameters.get(i);\n    Node argument = arguments.next();\n    num_args++;\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, i + 1);\n  }\n  if (i < parameters.size() && !var_args) {\n    Node parameter = parameters.get(i);\n    if (i == parameters.size() - 1 && parameter.isVarArgs()) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(num_args), String.valueOf(num_args),\n          \" or more argument(s)\");\n      return;\n    }\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(num_args), String.valueOf(i),\n        \" argument(s)\");\n    return;\n  }\n  if (i == parameters.size() && arguments.hasNext()) {\n    if (var_args_parameter != null) {\n      Node parameter_type = var_args_parameter.getFirstChild();\n      int ordinal = i;\n      while (arguments.hasNext()) {\n        Node argument = arguments.next();\n        num_args++;\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter_type), call, ordinal + 1);\n        ordinal++;\n      }\n    } else {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(num_args), String.valueOf(i),\n          \" or fewer argument(s)\");\n      return;\n    }\n  }\n\n  int min_args = functionType.getMinArguments();\n  int max_args = functionType.getMaxArguments();\n  if (min_args > num_args || max_args < num_args) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(num_args), String.valueOf(min_args),\n        max_args != Integer.MAX_VALUE ?\n            \" and no more than \" + max_args + \" argument(s)\" : \"\");\n    return;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..412d233a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,39 +1396,81 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+private void visitParameterList(NodeTraversal t, Node call,\n+    FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  List<Node> parameters = functionType.getParameters();\n+  boolean var_args = functionType.isVarArgs();\n+  if (!var_args && arguments.hasNext() && parameters.isEmpty()) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        \"0\", \"0\", \"\");\n+    return;\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+  int num_args = 0;\n+  Node var_args_parameter = null;\n+  if (var_args && !parameters.isEmpty()) {\n+    var_args_parameter = parameters.get(parameters.size() - 1);\n+    parameters = parameters.subList(0, parameters.size() - 1);\n+  }\n+  int i;\n+  for (i = 0; i < parameters.size() && arguments.hasNext(); i++) {\n+    Node parameter = parameters.get(i);\n+    Node argument = arguments.next();\n+    num_args++;\n+    validator.expectArgumentMatchesParameter(t, argument,\n+        getJSType(argument), getJSType(parameter), call, i + 1);\n+  }\n+  if (i < parameters.size() && !var_args) {\n+    Node parameter = parameters.get(i);\n+    if (i == parameters.size() - 1 && parameter.isVarArgs()) {\n+      report(t, call, WRONG_ARGUMENT_COUNT,\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(num_args), String.valueOf(num_args),\n+          \" or more argument(s)\");\n+      return;\n+    }\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(num_args), String.valueOf(i),\n+        \" argument(s)\");\n+    return;\n+  }\n+  if (i == parameters.size() && arguments.hasNext()) {\n+    if (var_args_parameter != null) {\n+      Node parameter_type = var_args_parameter.getFirstChild();\n+      int ordinal = i;\n+      while (arguments.hasNext()) {\n+        Node argument = arguments.next();\n+        num_args++;\n+        validator.expectArgumentMatchesParameter(t, argument,\n+            getJSType(argument), getJSType(parameter_type), call, ordinal + 1);\n+        ordinal++;\n+      }\n+    } else {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(num_args), String.valueOf(i),\n+          \" or fewer argument(s)\");\n+      return;\n     }\n   }\n \n+  int min_args = functionType.getMinArguments();\n+  int max_args = functionType.getMaxArguments();\n+  if (min_args > num_args || max_args < num_args) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(num_args), String.valueOf(min_args),\n+        max_args != Integer.MAX_VALUE ?\n+            \" and no more than \" + max_args + \" argument(s)\" : \"\");\n+    return;\n+  }\n+}\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}