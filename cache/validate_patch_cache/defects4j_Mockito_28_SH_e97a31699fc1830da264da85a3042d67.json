{
    "patch": "            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n            if (candidate != null) {\n                field.setAccessible(true);\n                try {\n                    field.set(fieldInstance, candidate);\n                    return;\n                } catch (IllegalAccessException e) {\n                    e.printStackTrace();\n                }\n            } else {\n                field.setAccessible(true);\n                try {\n                    // attempt to inject a null field if no mocks are found\n                    field.set(fieldInstance, null);\n                } catch (IllegalAccessException e) {\n                    e.printStackTrace();\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..2d19bf784 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,27 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            if (candidate != null) {\n+                field.setAccessible(true);\n+                try {\n+                    field.set(fieldInstance, candidate);\n+                    return;\n+                } catch (IllegalAccessException e) {\n+                    e.printStackTrace();\n+                }\n+            } else {\n+                field.setAccessible(true);\n+                try {\n+                    // attempt to inject a null field if no mocks are found\n+                    field.set(fieldInstance, null);\n+                } catch (IllegalAccessException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "java.lang.IllegalArgumentException: Can not set boolean field org.mockitousage.annotation.MockInjectionTest$SuperUnderTesting$$EnhancerByMockitoWithCGLIB$$d3c90b2f.CGLIB$BOUND to null value",
    "test_result": "FAIL"
}