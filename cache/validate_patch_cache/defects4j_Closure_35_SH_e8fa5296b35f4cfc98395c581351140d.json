{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          if (!objType.hasProperty(prop)) {\n            JSType typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(constraintObj.getPropertyType(prop));\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n      if (objType != null && objType.isTopObject()) {\n        warnings.add(JSError.make(n.getParent().getFirstChild(), HINT_ABSENT_MEMBER, \"\"));\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..ad0f7ef0 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1122,17 +1122,16 @@ class TypeInference\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n+          if (!objType.hasProperty(prop)) {\n+            JSType typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(constraintObj.getPropertyType(prop));\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n       }\n+      if (objType != null && objType.isTopObject()) {\n+        warnings.add(JSError.make(n.getParent().getFirstChild(), HINT_ABSENT_MEMBER, \"\"));\n+      }\n+    }\n     }\n   }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}