{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\n    if (mock instanceof Class) {\n        MockitoUtil.getMockHandlerFactory().removeMockHandler((Class<?>) mock, oldMockHandler);\n        return;\n    }\n\n    if (Proxy.isProxyClass(mock.getClass())) {\n        InvocationHandler invocationHandler = Proxy.getInvocationHandler(mock);\n        if (invocationHandler instanceof MockHandler) {\n            MockHandler<T> mockHandler = (MockHandler<T>) invocationHandler;\n            MockitoUtil.getMockHandlerFactory().removeMockHandler(mockHandler);\n            ((MockitoMethodProxy) mockHandler.getMockitoMethodProxy()).setHandler(oldMockHandler);\n        }\n        return;\n    }\n\n    if (mock instanceof Factory) {\n        Factory factory = (Factory) mock;\n        Callback[] callbacks = factory.getCallbacks();\n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof MethodInterceptorFilter) {\n                MethodInterceptorFilter filter = (MethodInterceptorFilter) callbacks[i];\n                if (filter.getMockHandler() instanceof MockHandler) {\n                    MockHandler<T> mockHandler = (MockHandler<T>) filter.getMockHandler();\n                    MockitoUtil.getMockHandlerFactory().removeMockHandler(mockHandler);\n                    filter.setMockHandler(oldMockHandler);\n                    return;\n                }\n            }\n        }\n        return;\n    }\n\n    // fallback, just replace the mock handler\n    MockitoUtil.getMockHandlerFactory().removeMockHandler(oldMockHandler);\n    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito\n        .withSettings()\n        .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    ((Factory) mock).addCallback(newFilter);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..0c46d3ee0 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,50 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+    if (mock instanceof Class) {\n+        MockitoUtil.getMockHandlerFactory().removeMockHandler((Class<?>) mock, oldMockHandler);\n+        return;\n+    }\n+\n+    if (Proxy.isProxyClass(mock.getClass())) {\n+        InvocationHandler invocationHandler = Proxy.getInvocationHandler(mock);\n+        if (invocationHandler instanceof MockHandler) {\n+            MockHandler<T> mockHandler = (MockHandler<T>) invocationHandler;\n+            MockitoUtil.getMockHandlerFactory().removeMockHandler(mockHandler);\n+            ((MockitoMethodProxy) mockHandler.getMockitoMethodProxy()).setHandler(oldMockHandler);\n+        }\n+        return;\n+    }\n+\n+    if (mock instanceof Factory) {\n+        Factory factory = (Factory) mock;\n+        Callback[] callbacks = factory.getCallbacks();\n+        for (int i = 0; i < callbacks.length; i++) {\n+            if (callbacks[i] instanceof MethodInterceptorFilter) {\n+                MethodInterceptorFilter filter = (MethodInterceptorFilter) callbacks[i];\n+                if (filter.getMockHandler() instanceof MockHandler) {\n+                    MockHandler<T> mockHandler = (MockHandler<T>) filter.getMockHandler();\n+                    MockitoUtil.getMockHandlerFactory().removeMockHandler(mockHandler);\n+                    filter.setMockHandler(oldMockHandler);\n+                    return;\n+                }\n+            }\n+        }\n+        return;\n+    }\n+\n+    // fallback, just replace the mock handler\n+    MockitoUtil.getMockHandlerFactory().removeMockHandler(oldMockHandler);\n+    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito\n+        .withSettings()\n+        .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    ((Factory) mock).addCallback(newFilter);\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}