{
    "patch": "public static double getTypedPercent(JsonObject json) {\n    int typeCount = 0;\n    int totalCount = 0;\n    for (Map.Entry<String, JsonElement> entry : json.entrySet()) {\n        String key = entry.getKey();\n        JsonElement element = entry.getValue();\n        totalCount++;\n        if (element.isJsonPrimitive() && element.getAsJsonPrimitive().isString()) {\n            typeCount++;\n        }\n    }\n    return 100.0 * ((double) typeCount) / ((double) totalCount);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..a9cf7192 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonObject json) {\n+    int typeCount = 0;\n+    int totalCount = 0;\n+    for (Map.Entry<String, JsonElement> entry : json.entrySet()) {\n+        String key = entry.getKey();\n+        JsonElement element = entry.getValue();\n+        totalCount++;\n+        if (element.isJsonPrimitive() && element.getAsJsonPrimitive().isString()) {\n+            typeCount++;\n+        }\n+    }\n+    return 100.0 * ((double) typeCount) / ((double) totalCount);\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}