{
    "patch": "    Node block = function.getLastChild();\n    NodeTraversal.traverse(compiler, block, new NodeTraversal.AbstractPreOrderCallback() {\n        @Override\n        public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n            if (!n.isName()) return true;\n            Var var = scope.getVar(n.getString());\n            if (var == null || referenced.contains(var)) return true;\n            Node arg = var.getInitialValue();\n            Node argParent = arg.getParent();\n            Node callSite = NodeUtil.getEnclosingCall(n.getParent());\n            if (callSite != null && callSite.getParent() == argParent) {\n                // Do not remove unreferenced args belonging to calls.\n                return false;\n            }\n            arg.detach();\n            compiler.reportCodeChange();\n            return true;\n        }\n    });",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..67093221 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node block = function.getLastChild();\n+    NodeTraversal.traverse(compiler, block, new NodeTraversal.AbstractPreOrderCallback() {\n+        @Override\n+        public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+            if (!n.isName()) return true;\n+            Var var = scope.getVar(n.getString());\n+            if (var == null || referenced.contains(var)) return true;\n+            Node arg = var.getInitialValue();\n+            Node argParent = arg.getParent();\n+            Node callSite = NodeUtil.getEnclosingCall(n.getParent());\n+            if (callSite != null && callSite.getParent() == argParent) {\n+                // Do not remove unreferenced args belonging to calls.\n+                return false;\n+            }\n+            arg.detach();\n+            compiler.reportCodeChange();\n+            return true;\n+        }\n+    });\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}