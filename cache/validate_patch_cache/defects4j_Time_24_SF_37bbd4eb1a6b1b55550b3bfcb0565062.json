{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // determine if \"weekyear\" is present\n        boolean hasWeekyear = false;\n        for (SavedField sf : savedFields) {\n            if (sf.iField.getDurationType().getName().equals(\"weeks\")) {\n                DurationField f = sf.iField.getDurationField();\n                if (f instanceof ImpreciseDateTimeField && ((ImpreciseDateTimeField)f).getDurationField().getName().equals(\"weeks\")) {\n                    hasWeekyear = true;\n                    break;\n                }\n            }\n        }\n\n        // alter base year for parsing if first field is month or day, but not if first field is \"weekyear\"\n        if (!hasWeekyear) {\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        int originalOffset = iZone.getOffset(millis);\n        if (offset != originalOffset && (originalOffset == iInitialOffset || originalOffset == iZone.getOffset(iMillis))) {\n            // During a DST transition, Java Time rounds the local time down if it's skipped,\n            // or up if it's repeated. Adjust the time zone offset accordingly.\n            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n        millis -= offset;\n    }\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..61deae2d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,16 +328,29 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // determine if \"weekyear\" is present\n+        boolean hasWeekyear = false;\n+        for (SavedField sf : savedFields) {\n+            if (sf.iField.getDurationType().getName().equals(\"weeks\")) {\n+                DurationField f = sf.iField.getDurationField();\n+                if (f instanceof ImpreciseDateTimeField && ((ImpreciseDateTimeField)f).getDurationField().getName().equals(\"weeks\")) {\n+                    hasWeekyear = true;\n+                    break;\n+                }\n+            }\n         }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n+\n+        // alter base year for parsing if first field is month or day, but not if first field is \"weekyear\"\n+        if (!hasWeekyear) {\n             DurationField months = DurationFieldType.months().getField(iChrono);\n             DurationField days = DurationFieldType.days().getField(iChrono);\n             DurationField first = savedFields[0].iField.getDurationField();\n@@ -346,36 +359,37 @@ public class DateTimeParserBucket {\n                 return computeMillis(resetFields, text);\n             }\n         }\n+    }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n-            }\n-            throw e;\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        int originalOffset = iZone.getOffset(millis);\n+        if (offset != originalOffset && (originalOffset == iInitialOffset || originalOffset == iZone.getOffset(iMillis))) {\n+            // During a DST transition, Java Time rounds the local time down if it's skipped,\n+            // or up if it's repeated. Adjust the time zone offset accordingly.\n+            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n+        millis -= offset;\n     }\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}