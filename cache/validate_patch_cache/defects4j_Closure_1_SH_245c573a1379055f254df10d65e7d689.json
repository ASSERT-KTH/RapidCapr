{
    "patch": " // Strip unreferenced args off the end of the function declaration.\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    Node stmts = function.getLastChild();\n    Node argList = function.getSecondChild();\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n          if (!NodeUtil.isNameReferenced(function, lastArg.getString())) {\n              argList.removeChild(lastArg);\n              compiler.reportCodeChange();\n          } else {\n              break;\n          }\n      }\n        boolean isSetter = NodeUtil.isGetOrSetKey(function.getParent()) &&\n      function.getParent().getString().equals(\"set\");\n        \n        if (!isSetter) {\n          for (Node n : NodeUtil.getFunctionBody(function).children()) {\n            Scope s = getScope(n);\n      \n            if (s == null) {\n              break;\n            }\n      \n            for (Var v : s.getVars()) {\n              if (v.getParentNode() == argList) {\n                break;\n              }\n              \n              if (!v.isParam() && !referenced.contains(v)) {\n                if (!v.isImplicit() && !v.isExtern()) {\n                  compiler.report(JSError.make(v.getScope().getRootNode(),\n                      CheckLevel.WARNING, UNUSED_LOCAL_ASSIGNMENT, v.getName()));\n                }\n              }\n            }\n          }\n        }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..711fc340 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,52 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+ // Strip unreferenced args off the end of the function declaration.\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    Node stmts = function.getLastChild();\n+    Node argList = function.getSecondChild();\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+          if (!NodeUtil.isNameReferenced(function, lastArg.getString())) {\n+              argList.removeChild(lastArg);\n+              compiler.reportCodeChange();\n+          } else {\n+              break;\n+          }\n+      }\n+        boolean isSetter = NodeUtil.isGetOrSetKey(function.getParent()) &&\n+      function.getParent().getString().equals(\"set\");\n+        \n+        if (!isSetter) {\n+          for (Node n : NodeUtil.getFunctionBody(function).children()) {\n+            Scope s = getScope(n);\n+      \n+            if (s == null) {\n+              break;\n+            }\n+      \n+            for (Var v : s.getVars()) {\n+              if (v.getParentNode() == argList) {\n+                break;\n+              }\n+              \n+              if (!v.isParam() && !referenced.contains(v)) {\n+                if (!v.isImplicit() && !v.isExtern()) {\n+                  compiler.report(JSError.make(v.getScope().getRootNode(),\n+                      CheckLevel.WARNING, UNUSED_LOCAL_ASSIGNMENT, v.getName()));\n+                }\n+              }\n+            }\n+          }\n+        }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}