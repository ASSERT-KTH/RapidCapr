{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node fnBlock = NodeUtil.getFunctionBody(fnNode);\n  Map<String, Integer> parameterCounts = new HashMap<>();\n  for (Node paramNode : NodeUtil.getFunctionParameters(fnNode)) {\n    if (paramNode.isName()) {\n      parameterCounts.put(paramNode.getString(), 0);\n    }\n  }\n  Node argNode = callNode.getFirstChild().getNext();\n  boolean hasThisObject = !callNode.getFirstChild().isName();\n  if (hasThisObject) {\n    argNode = argNode.getNext();\n  }\n  while (argNode != null) {\n    if (NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n      return CanInlineResult.NO;\n    }\n    String paramName = null;\n    if (parameterCounts.size() > 0) {\n      paramName = getNextUnassignedParameter(parameterCounts);\n      if (paramName == null) {\n        // More arguments than parameters\n        return CanInlineResult.NO;\n      }\n    }\n    if (paramName != null) {\n      // Mapped parameter name found, count the argument occurrence\n      countName(argNode, paramName, parameterCounts, fnBlock);\n    }\n    argNode = argNode.getNext();\n  }\n  for (String paramName : parameterCounts.keySet()) {\n    int count = parameterCounts.get(paramName);\n    if (count != 1) {\n      // Either argument is missing, or parameter is assigned multiple times\n      return CanInlineResult.NO;\n    }\n  }\n  return CanInlineResult.YES;\n}\n\nprivate String getNextUnassignedParameter(Map<String, Integer> parameterCounts) {\n  for (String paramName : parameterCounts.keySet()) {\n    if (parameterCounts.get(paramName) == 0) {\n      return paramName;\n    }\n  }\n  return null;\n}\n\nprivate void countName(\n    Node node, String name, Map<String, Integer> parameterCounts, Node fnBlock) {\n  if (node.isName() && node.getString().equals(name)) {\n    String parentNodeName = node.getParent().getString();\n    if (parentNodeName.equals(name)) {\n      // Getting assigned to itself!\n      parameterCounts.put(name, -1);\n    } else {\n      parameterCounts.merge(name, 1, (oldValue, newValue) -> oldValue + newValue);\n    }\n  } else {\n    for (Node child : node.children()) {\n      countName(child, name, parameterCounts, fnBlock);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..44204c1f 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,76 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  Node fnBlock = NodeUtil.getFunctionBody(fnNode);\n+  Map<String, Integer> parameterCounts = new HashMap<>();\n+  for (Node paramNode : NodeUtil.getFunctionParameters(fnNode)) {\n+    if (paramNode.isName()) {\n+      parameterCounts.put(paramNode.getString(), 0);\n+    }\n+  }\n+  Node argNode = callNode.getFirstChild().getNext();\n+  boolean hasThisObject = !callNode.getFirstChild().isName();\n+  if (hasThisObject) {\n+    argNode = argNode.getNext();\n+  }\n+  while (argNode != null) {\n+    if (NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n       return CanInlineResult.NO;\n     }\n-\n-    Node block = fnNode.getLastChild();\n-\n-\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+    String paramName = null;\n+    if (parameterCounts.size() > 0) {\n+      paramName = getNextUnassignedParameter(parameterCounts);\n+      if (paramName == null) {\n+        // More arguments than parameters\n+        return CanInlineResult.NO;\n       }\n     }\n+    if (paramName != null) {\n+      // Mapped parameter name found, count the argument occurrence\n+      countName(argNode, paramName, parameterCounts, fnBlock);\n+    }\n+    argNode = argNode.getNext();\n+  }\n+  for (String paramName : parameterCounts.keySet()) {\n+    int count = parameterCounts.get(paramName);\n+    if (count != 1) {\n+      // Either argument is missing, or parameter is assigned multiple times\n+      return CanInlineResult.NO;\n+    }\n+  }\n+  return CanInlineResult.YES;\n+}\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+private String getNextUnassignedParameter(Map<String, Integer> parameterCounts) {\n+  for (String paramName : parameterCounts.keySet()) {\n+    if (parameterCounts.get(paramName) == 0) {\n+      return paramName;\n     }\n+  }\n+  return null;\n+}\n \n-    return CanInlineResult.YES;\n+private void countName(\n+    Node node, String name, Map<String, Integer> parameterCounts, Node fnBlock) {\n+  if (node.isName() && node.getString().equals(name)) {\n+    String parentNodeName = node.getParent().getString();\n+    if (parentNodeName.equals(name)) {\n+      // Getting assigned to itself!\n+      parameterCounts.put(name, -1);\n+    } else {\n+      parameterCounts.merge(name, 1, (oldValue, newValue) -> oldValue + newValue);\n+    }\n+  } else {\n+    for (Node child : node.children()) {\n+      countName(child, name, parameterCounts, fnBlock);\n+    }\n   }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}