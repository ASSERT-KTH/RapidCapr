{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      if (NodeUtil.isExpressionNode(maybeExpr)) {\n        // It is an expression statement.\n        return true;\n      } else if (maybeExpr.getType() == Token.RETURN\n          && maybeExpr.hasOneChild()\n          && maybeExpr.getFirstChild().isName()\n          && \"undefined\".equals(maybeExpr.getFirstChild().getString())) {\n        // It is a return statement with an undefined value.\n        return false;\n      } else if (maybeExpr.getType() == Token.RETURN\n          && maybeExpr.hasOneChild()\n          && NodeUtil.isExpressionNode(maybeExpr.getFirstChild())) {\n        // It is a return statement with an expression.\n        Node parent = n.getParent();\n        if (parent.getType() == Token.BLOCK) {\n          Node grandparent = parent.getParent();\n          if (grandparent == null || grandparent.getType() != Token.BLOCK) {\n            // It is not contained within another block.\n            if (!NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild())) {\n              // Its expression has no side effects.\n              Node ancestor = maybeExpr;\n              while (ancestor != null && ancestor != parent\n                  && !NodeUtil.isStatementBlock(ancestor)) {\n                ancestor = ancestor.getParent();\n              }\n              if (ancestor == parent) {\n                // It is not contained within an if/for/while statement.\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..a71fe4eb 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,47 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      if (NodeUtil.isExpressionNode(maybeExpr)) {\n+        // It is an expression statement.\n+        return true;\n+      } else if (maybeExpr.getType() == Token.RETURN\n+          && maybeExpr.hasOneChild()\n+          && maybeExpr.getFirstChild().isName()\n+          && \"undefined\".equals(maybeExpr.getFirstChild().getString())) {\n+        // It is a return statement with an undefined value.\n+        return false;\n+      } else if (maybeExpr.getType() == Token.RETURN\n+          && maybeExpr.hasOneChild()\n+          && NodeUtil.isExpressionNode(maybeExpr.getFirstChild())) {\n+        // It is a return statement with an expression.\n+        Node parent = n.getParent();\n+        if (parent.getType() == Token.BLOCK) {\n+          Node grandparent = parent.getParent();\n+          if (grandparent == null || grandparent.getType() != Token.BLOCK) {\n+            // It is not contained within another block.\n+            if (!NodeUtil.mayHaveSideEffects(maybeExpr.getFirstChild())) {\n+              // Its expression has no side effects.\n+              Node ancestor = maybeExpr;\n+              while (ancestor != null && ancestor != parent\n+                  && !NodeUtil.isStatementBlock(ancestor)) {\n+                ancestor = ancestor.getParent();\n+              }\n+              if (ancestor == parent) {\n+                // It is not contained within an if/for/while statement.\n+                return true;\n+              }\n+            }\n+          }\n+        }\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}