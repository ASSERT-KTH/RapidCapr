{
    "patch": "            final double deviation = computeMaxDeviation(original, best);\n            if (deviation <= getRelativeThreshold() * (getAbsoluteThreshold() + Math.abs(best.getValue()))) {\n                return;\n            }\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n                continue;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                final RealPointValuePair[] contractedSimplex = simplex;\n                simplex = contractedSimplex;\n\n                continue;\n            }\n            \n            // Shrink the simplex\n            final RealPointValuePair[] shrank = simplex;\n    \n            for (int i = 1; i < simplex.length; i++) {\n                final RealPointValuePair originalPair = original[i];\n                final double[] contractedPoint = new double[getDimension()];\n                final double[] current = simplex[i].getPointRef();\n                final double[] bestArray = best.getPointRef();\n                for (int j = 0; j < getDimension(); j++) {\n                    contractedPoint[j] = contract * (bestArray[j] + current[j]) - contract * originalPair.getPointRef()[j];\n                }\n                simplex[i] = new RealPointValuePair(contractedPoint,\n                                                     objectiveFunction.value(contractedPoint),\n                                                     false);\n            }\n            \n            if (comparator.compare(original[0], simplex[0]) <= 0) {\n                simplex = shrank;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..50459e170 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,16 +58,10 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+            final double deviation = computeMaxDeviation(original, best);\n+            if (deviation <= getRelativeThreshold() * (getAbsoluteThreshold() + Math.abs(best.getValue()))) {\n+                return;\n+            }\n \n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n@@ -81,7 +75,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n+                continue;\n \n             }\n \n@@ -89,14 +83,30 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                final RealPointValuePair[] contractedSimplex = simplex;\n+                simplex = contractedSimplex;\n \n-            // check convergence\n-                return;\n+                continue;\n             }\n-\n-        }\n-\n-    }\n+            \n+            // Shrink the simplex\n+            final RealPointValuePair[] shrank = simplex;\n+    \n+            for (int i = 1; i < simplex.length; i++) {\n+                final RealPointValuePair originalPair = original[i];\n+                final double[] contractedPoint = new double[getDimension()];\n+                final double[] current = simplex[i].getPointRef();\n+                final double[] bestArray = best.getPointRef();\n+                for (int j = 0; j < getDimension(); j++) {\n+                    contractedPoint[j] = contract * (bestArray[j] + current[j]) - contract * originalPair.getPointRef()[j];\n+                }\n+                simplex[i] = new RealPointValuePair(contractedPoint,\n+                                                     objectiveFunction.value(contractedPoint),\n+                                                     false);\n+            }\n+            \n+            if (comparator.compare(original[0], simplex[0]) <= 0) {\n+                simplex = shrank;\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}