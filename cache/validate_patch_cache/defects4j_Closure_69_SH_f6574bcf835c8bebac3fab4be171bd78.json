{
    "patch": "ObjectType thisType = functionType.getTypeOfThis();\nif (thisType != null && !(NodeUtil.isGet(parent) || NodeUtil.isGetElem(parent))) {\n  report(t, n, FUNCTION_WITHOUT_GETTHIS, childType.toString());\n  ensureTyped(t, n);\n  return;\n}\n\n// Non-native constructors may have a 'this' type different than the instance\n// type and must have a constructor definition.\nif (functionType.isConstructor() &&\n    !functionType.isNativeObjectType() &&\n    thisType != null &&\n    constructorUsesThisType(thisType, functionType) &&\n    !isConstructorDefinedForThisType(thisType.getReferenceName(), t.getScope())) {\n  report(t, n, CONSTRUCTOR_MISSING_DEFINITION, functionType.toString());\n  ensureTyped(t, n);\n  return;\n}\n\nvisitParameterList(t, n, functionType);\nensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..bca14520 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+ObjectType thisType = functionType.getTypeOfThis();\n+if (thisType != null && !(NodeUtil.isGet(parent) || NodeUtil.isGetElem(parent))) {\n+  report(t, n, FUNCTION_WITHOUT_GETTHIS, childType.toString());\n+  ensureTyped(t, n);\n+  return;\n+}\n+\n+// Non-native constructors may have a 'this' type different than the instance\n+// type and must have a constructor definition.\n+if (functionType.isConstructor() &&\n+    !functionType.isNativeObjectType() &&\n+    thisType != null &&\n+    constructorUsesThisType(thisType, functionType) &&\n+    !isConstructorDefinedForThisType(thisType.getReferenceName(), t.getScope())) {\n+  report(t, n, CONSTRUCTOR_MISSING_DEFINITION, functionType.toString());\n+  ensureTyped(t, n);\n+  return;\n+}\n+\n+visitParameterList(t, n, functionType);\n+ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}