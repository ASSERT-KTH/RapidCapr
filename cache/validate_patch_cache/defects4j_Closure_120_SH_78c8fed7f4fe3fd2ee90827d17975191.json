{
    "patch": "if (ref == null) {\n  return false;\n}\n\n// Make sure this assignment is not inside a loop or a nested function.\nfor (BasicBlock block = ref.getBasicBlock();\n     block != null; block = block.getParent()) {\n  if (block.isFunction) {\n    if (block.getParent().isFunction) {\n      return false;\n    } else {\n      // We only care about one assignment on function level. Variable\n      // shadowing ensures that there is no mixing with outer scope.\n      return getOneAndOnlyAssignment() != null;\n    }\n  } else if (block.isLoop) {\n    return false;\n  }\n}\n\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..b27dc8f8 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,27 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (ref == null) {\n+  return false;\n+}\n+\n+// Make sure this assignment is not inside a loop or a nested function.\n+for (BasicBlock block = ref.getBasicBlock();\n+     block != null; block = block.getParent()) {\n+  if (block.isFunction) {\n+    if (block.getParent().isFunction) {\n+      return false;\n+    } else {\n+      // We only care about one assignment on function level. Variable\n+      // shadowing ensures that there is no mixing with outer scope.\n+      return getOneAndOnlyAssignment() != null;\n+    }\n+  } else if (block.isLoop) {\n+    return false;\n+  }\n+}\n+\n+return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}