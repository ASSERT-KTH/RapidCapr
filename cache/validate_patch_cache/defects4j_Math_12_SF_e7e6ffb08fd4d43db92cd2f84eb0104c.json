{
    "patch": "import java.math.BigDecimal;\nimport java.math.RoundingMode;\n\npublic class Distribution {\n\n    public static double[] getDistribution(double[] input) {\n        if (input == null || input.length == 0) {\n            return new double[0];\n        }\n\n        double[] output = new double[input.length];\n\n        BigDecimal max = new BigDecimal(input[0]);\n        BigDecimal sum = BigDecimal.ZERO;\n\n        // Find the maximum value in the input array\n        for (int i = 0; i < input.length; i++) {\n            BigDecimal inputVal = new BigDecimal(input[i]);\n            if (inputVal.compareTo(max) > 0) {\n                max = inputVal;\n            }\n\n            // Calculate the sum of all the values in the input array\n            sum = sum.add(inputVal);\n        }\n\n        BigDecimal length = BigDecimal.valueOf(input.length);\n        BigDecimal sumPerLength = sum.divide(length, 25, RoundingMode.HALF_UP);\n\n        // Calculate the adjusted value for each input element and store it in the output array\n        for (int i = 0; i < input.length; i++) {\n            BigDecimal inputVal = new BigDecimal(input[i]);\n            BigDecimal adjustedVal = inputVal.subtract(max);\n            output[i] = adjustedVal.doubleValue();\n        }\n\n        BigDecimal sumAdjusted = BigDecimal.ZERO;\n        // Calculate the sum of the adjusted values\n        for (int i = 0; i < output.length; i++) {\n            sumAdjusted = sumAdjusted.add(BigDecimal.valueOf(output[i]));\n        }\n\n        // Calculate the new distribution for each input element and store it in the output array\n        for (int i = 0; i < input.length; i++) {\n            if (max.compareTo(BigDecimal.ZERO) == 0 && sum.compareTo(BigDecimal.ZERO) == 0) {\n                output[i] = 1.0 / length.doubleValue();\n            } else if (sum.compareTo(BigDecimal.ZERO) == 0) {\n                output[i] = 0.0;\n            } else {\n                BigDecimal adjustedVal = new BigDecimal(output[i]);\n                BigDecimal distVal = adjustedVal.add(sumPerLength);\n                BigDecimal dist = distVal.divide(sumAdjusted, 25, RoundingMode.HALF_UP);\n                output[i] = dist.doubleValue();\n            }\n        }\n        return output;\n    }\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}