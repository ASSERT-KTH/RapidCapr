{
    "patch": "public static boolean containsAny(char[] str, char[] searchChars) {\n    if (str == null || searchChars == null) {\n        return false;\n    }\n    final int len = str.length;\n    final int searchLen = searchChars.length;\n    final int csLen = searchChars.length;\n    final boolean[] lookup = new boolean[Character.MAX_VALUE + 1];\n    for (int i = 0; i < searchLen; i++) {\n        lookup[searchChars[i]] = true;\n    }\n    for (int i = 0; i < len; i++) {\n        if (lookup[str[i]]) {\n            return true;\n        }\n        if (Character.isHighSurrogate(str[i])) {\n            if (i < len - 1 && Character.isLowSurrogate(str[i + 1])) {\n                final int codepoint = Character.toCodePoint(str[i], str[i + 1]);\n                if (contains(codepoint, searchChars)) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nstatic boolean contains(final int codepoint, final char[] searchChars) {\n    final int len = searchChars.length;\n    for (int i = 0; i < len; i++) {\n        if (searchChars[i] == codepoint) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..b179524d 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,42 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(char[] str, char[] searchChars) {\n+    if (str == null || searchChars == null) {\n+        return false;\n+    }\n+    final int len = str.length;\n+    final int searchLen = searchChars.length;\n+    final int csLen = searchChars.length;\n+    final boolean[] lookup = new boolean[Character.MAX_VALUE + 1];\n+    for (int i = 0; i < searchLen; i++) {\n+        lookup[searchChars[i]] = true;\n+    }\n+    for (int i = 0; i < len; i++) {\n+        if (lookup[str[i]]) {\n+            return true;\n+        }\n+        if (Character.isHighSurrogate(str[i])) {\n+            if (i < len - 1 && Character.isLowSurrogate(str[i + 1])) {\n+                final int codepoint = Character.toCodePoint(str[i], str[i + 1]);\n+                if (contains(codepoint, searchChars)) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+static boolean contains(final int codepoint, final char[] searchChars) {\n+    final int len = searchChars.length;\n+    for (int i = 0; i < len; i++) {\n+        if (searchChars[i] == codepoint) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}