{
    "patch": "          ) {\n        // We want to exclude the assignment itself from the usage list\n        boolean isChainedProperty =\n            n.getFirstChild().getType() == Token.GETPROP;\n\n        if (isChainedProperty) {\n          n = n.getFirstChild();\n        }\n\n        if (n.getFirstChild().getType() == Token.STRING &&\n            n.getFirstChild().getString().equals(\"prototype\")) {\n          return true;\n        }\n      }\n\n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..3367a047 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -320,6 +320,21 @@ class AnalyzePrototypeProperties implements CompilerPass {\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;\n \n+        if (isChainedProperty) {\n+          n = n.getFirstChild();\n+        }\n+\n+        if (n.getFirstChild().getType() == Token.STRING &&\n+            n.getFirstChild().getString().equals(\"prototype\")) {\n+          return true;\n+        }\n+      }\n+\n+      return false;\n+        // We want to exclude the assignment itself from the usage list\n+        boolean isChainedProperty =\n+            n.getFirstChild().getType() == Token.GETPROP;\n+\n         if (isChainedProperty) {\n           Node child = n.getFirstChild().getFirstChild().getNext();\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}