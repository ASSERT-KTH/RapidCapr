{
    "patch": "public String getProperty(String key) {\n    String value = props.getProperty(key);\n    if (value == null || value.isEmpty()) {\n        String[] warnings = props.getProperty(\"warnings\").split(\",\");\n        for (String warning : warnings) {\n            if (warning.equals(key)) {\n                System.out.println(\"WARNING: Property \" + key + \" is not set.\");\n                break;\n            }\n        }\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..4d394ed0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProperty(String key) {\n+    String value = props.getProperty(key);\n+    if (value == null || value.isEmpty()) {\n+        String[] warnings = props.getProperty(\"warnings\").split(\",\");\n+        for (String warning : warnings) {\n+            if (warning.equals(key)) {\n+                System.out.println(\"WARNING: Property \" + key + \" is not set.\");\n+                break;\n+            }\n+        }\n+    }\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}