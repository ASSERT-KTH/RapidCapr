{
    "patch": "import org.apache.commons.math3.analysis.MultivariateFunction;\nimport org.apache.commons.math3.optim.InitialGuess;\nimport org.apache.commons.math3.optim.MaxEval;\nimport org.apache.commons.math3.optim.OptimizationData;\nimport org.apache.commons.math3.optim.PointValuePair;\nimport org.apache.commons.math3.optim.nonlinear.scalar.GoalType;\nimport org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;\nimport org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;\nimport org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex;\nimport org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;\nimport org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;\n\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expanded == reflected ? reflectedSimplex : expanded;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n            } else {\n\n                // perform a contraction step\n                RealPointValuePair contracted = null;\n                if (comparator.compare(reflected, original[n]) < 0) {\n                    // perform an outside contraction\n                    contracted = evaluateNewSimplex(original, -gamma, comparator);\n                } else {\n                    // perform an inside contraction\n                    contracted = evaluateNewSimplex(original, beta, comparator);\n                }\n\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted;\n                } else {\n                    // perform a shrink step\n                    simplex = shrink(original, comparator);\n                }\n            }\n\n            // check convergence\n            final RealPointValuePair currentBest = simplex[0];\n            boolean converged = true;\n            for (int i = 1; i < simplex.length; i++) {\n                converged &= Math.abs(currentBest.getValue() - simplex[i].getValue()) <= getRelativeThreshold() * Math.max(\n                        Math.abs(currentBest.getValue()), Math.abs(simplex[i].getValue())) + getAbsoluteThreshold();\n            }\n            if(converged)\n                return;\n            \n            if (getEvaluations() >= getMaxEvaluations()) {\n                throw new OptimizationException(\n                        new MaxEvaluationsExceededException(getMaxEvaluations()));",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..31f7694d4 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,8 +58,20 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+import org.apache.commons.math3.analysis.MultivariateFunction;\n+import org.apache.commons.math3.optim.InitialGuess;\n+import org.apache.commons.math3.optim.MaxEval;\n+import org.apache.commons.math3.optim.OptimizationData;\n+import org.apache.commons.math3.optim.PointValuePair;\n+import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;\n+import org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;\n+import org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;\n+import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex;\n+import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;\n+import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;\n+\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n@@ -75,28 +87,49 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, rho, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expanded == reflected ? reflectedSimplex : expanded;\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n+            } else {\n \n-            }\n+                // perform a contraction step\n+                RealPointValuePair contracted = null;\n+                if (comparator.compare(reflected, original[n]) < 0) {\n+                    // perform an outside contraction\n+                    contracted = evaluateNewSimplex(original, -gamma, comparator);\n+                } else {\n+                    // perform an inside contraction\n+                    contracted = evaluateNewSimplex(original, beta, comparator);\n+                }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contracted;\n+                } else {\n+                    // perform a shrink step\n+                    simplex = shrink(original, comparator);\n+                }\n+            }\n \n             // check convergence\n-                return;\n+            final RealPointValuePair currentBest = simplex[0];\n+            boolean converged = true;\n+            for (int i = 1; i < simplex.length; i++) {\n+                converged &= Math.abs(currentBest.getValue() - simplex[i].getValue()) <= getRelativeThreshold() * Math.max(\n+                        Math.abs(currentBest.getValue()), Math.abs(simplex[i].getValue())) + getAbsoluteThreshold();\n             }\n-\n-        }\n-\n-    }\n+            if(converged)\n+                return;\n+            \n+            if (getEvaluations() >= getMaxEvaluations()) {\n+                throw new OptimizationException(\n+                        new MaxEvaluationsExceededException(getMaxEvaluations()));\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}