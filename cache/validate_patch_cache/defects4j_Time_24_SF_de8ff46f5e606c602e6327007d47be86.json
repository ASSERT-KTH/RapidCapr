{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n\n    long millis;\n    try {\n        millis = iMillis;\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    // Validate that the date is valid after all fields are set\n    millis = validateAndSet(millis, resetFields, text);\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}\n\nprivate long validateAndSet(long millis, boolean resetFields, String text) {\n    // The following block of code has been added\n    boolean isMonthDayPresent = false;\n    int year = 0;\n    for (SavedField savedField : iSavedFields) {\n        if (savedField.iField.getType().equals(DateTimeFieldType.monthOfYear())) {\n            isMonthDayPresent = true;\n        } else if (savedField.iField.getType().equals(DateTimeFieldType.dayOfMonth())) {\n            isMonthDayPresent = true;\n        } else if (savedField.iField.getType().equals(DateTimeFieldType.year())) {\n            year = savedField.iValue;\n        }\n    }\n\n    if (isMonthDayPresent) {\n        int dow = 0;\n        int dom = 0;\n        for (SavedField savedField : iSavedFields) {\n            DurationField field = savedField.iField.getDurationField();\n\n            // Skip unknown duration fields\n            if (field == null) {\n                continue;\n            }\n\n            int value = savedField.iValue;\n\n            if (field.getType().equals(DurationFieldType.months())) {\n                int monthOfYear = value % 12 + 1;\n                year += value / 12;\n\n                // If the year is negative, adjust the month accordingly\n                if (year < 0 && monthOfYear > 2) {\n                    monthOfYear--;\n                } else if (year > 0 && monthOfYear < 2) {\n                    monthOfYear = 2;\n                }\n\n                millis = setMonthOfYear(millis, monthOfYear);\n            } else if (field.getType().equals(DurationFieldType.days())) {\n                dom = Math.min(value, 28) + 1;\n            } else if (field.getType().equals(DurationFieldType.weeks())) {\n                // Do not set day of week if day of month is set\n                if (dom == 0) {\n                    dow = value + 1;\n                }\n            }\n        }\n\n        long dateMidnight = DateMidnight\n                .forFields(new LocalDateTime(Math.abs(year), 1, 1, 0, 0))\n                .getMillis();\n\n        if (year < 0) {\n            dateMidnight = DateMidnight.forFields(\n                    new LocalDateTime(1, 1, 1, 0, 0, 0, 0)\n                            .minusYears(1 - year)\n                            .property(DateTimeFieldType.year()).withMaximumValue())\n                    .getMillis();\n        }\n\n        if (dom != 0) {\n            dateMidnight = new LocalDate(dateMidnight)\n                    .withDayOfMonth(dom)\n                    .toDateTime(new LocalTime(0, 0))\n                    .getMillis();\n        } else if (dow != 0) {\n            dateMidnight = new LocalDate(dateMidnight)\n                    .withDayOfWeek(dow)\n                    .toDateTime(new LocalTime(0, 0))\n                    .getMillis();\n        }\n\n        millis = setMillisInDay(millis, millis - dateMidnight);\n    }\n\n    return millis;\n}\n\nprivate long setMillisInDay(long millis, long value) {\n    int millisOfDay = ISOChronology.getInstanceUTC().millisOfDay().get(value);\n    return millis - millisOfDay;\n}\n\nprivate long setMonthOfYear(long millis, int value) {\n    long instant = millis;\n    LocalDate date = new LocalDate(instant);\n    int thisYear = date.getYear();\n    int thisMonth = date.getMonthOfYear();\n    int isLeapYear = ISOChronology.getInstanceUTC().isLeapYear(thisYear) ? 1 : 0;\n\n    if (value > 12) {\n        thisYear += (value - 1) / 12;\n        value = (value - 1) % 12 + 1;\n    } else if (value < 1) {\n        int[] remainder = new int[1];\n        thisYear += value / 12 - 1;\n        remainder[0] = value % 12 + 12;\n        value = 12 - (ISOChronology.getInstanceUTC().monthOfYear()\n                .getFieldValue(new LocalDate(instant).withYear(thisYear), remainder) - 1);\n    }\n\n    int maxDayOfMonth = ISOChronology.getInstanceUTC()\n            .dayOfMonth().getMaximumValue(new LocalDate(thisYear, value, 1).getMillis());\n\n    // Ensure the computed date is valid\n    int dom = Math.min(date.getDayOfMonth(), maxDayOfMonth);\n    millis = setMillisInDay(millis, 0);\n\n    // If the day of month is invalid, set it to 1\n    if (date.getDayOfMonth() > maxDayOfMonth) {\n        millis = new LocalDate(thisYear, value, 1)\n                .toDateTime(new LocalTime(date.getMillisOfDay()))\n                .getMillis();\n    } else {\n        millis = new LocalDate(thisYear, value, dom)\n                .toDateTime(new LocalTime(millis - date.toDateTime(new LocalTime()).getMillisOfDay()))\n                .getMillis();\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c638dbdb 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,171 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+\n+    long millis;\n+    try {\n+        millis = iMillis;\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n         }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n         }\n+        throw e;\n+    }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n+    // Validate that the date is valid after all fields are set\n+    millis = validateAndSet(millis, resetFields, text);\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n+                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n             if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n-            throw e;\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+    }\n+\n+    return millis;\n+}\n+\n+private long validateAndSet(long millis, boolean resetFields, String text) {\n+    // The following block of code has been added\n+    boolean isMonthDayPresent = false;\n+    int year = 0;\n+    for (SavedField savedField : iSavedFields) {\n+        if (savedField.iField.getType().equals(DateTimeFieldType.monthOfYear())) {\n+            isMonthDayPresent = true;\n+        } else if (savedField.iField.getType().equals(DateTimeFieldType.dayOfMonth())) {\n+            isMonthDayPresent = true;\n+        } else if (savedField.iField.getType().equals(DateTimeFieldType.year())) {\n+            year = savedField.iValue;\n+        }\n+    }\n+\n+    if (isMonthDayPresent) {\n+        int dow = 0;\n+        int dom = 0;\n+        for (SavedField savedField : iSavedFields) {\n+            DurationField field = savedField.iField.getDurationField();\n+\n+            // Skip unknown duration fields\n+            if (field == null) {\n+                continue;\n+            }\n+\n+            int value = savedField.iValue;\n+\n+            if (field.getType().equals(DurationFieldType.months())) {\n+                int monthOfYear = value % 12 + 1;\n+                year += value / 12;\n+\n+                // If the year is negative, adjust the month accordingly\n+                if (year < 0 && monthOfYear > 2) {\n+                    monthOfYear--;\n+                } else if (year > 0 && monthOfYear < 2) {\n+                    monthOfYear = 2;\n+                }\n+\n+                millis = setMonthOfYear(millis, monthOfYear);\n+            } else if (field.getType().equals(DurationFieldType.days())) {\n+                dom = Math.min(value, 28) + 1;\n+            } else if (field.getType().equals(DurationFieldType.weeks())) {\n+                // Do not set day of week if day of month is set\n+                if (dom == 0) {\n+                    dow = value + 1;\n                 }\n-                throw new IllegalArgumentException(message);\n             }\n         }\n-        \n-        return millis;\n+\n+        long dateMidnight = DateMidnight\n+                .forFields(new LocalDateTime(Math.abs(year), 1, 1, 0, 0))\n+                .getMillis();\n+\n+        if (year < 0) {\n+            dateMidnight = DateMidnight.forFields(\n+                    new LocalDateTime(1, 1, 1, 0, 0, 0, 0)\n+                            .minusYears(1 - year)\n+                            .property(DateTimeFieldType.year()).withMaximumValue())\n+                    .getMillis();\n+        }\n+\n+        if (dom != 0) {\n+            dateMidnight = new LocalDate(dateMidnight)\n+                    .withDayOfMonth(dom)\n+                    .toDateTime(new LocalTime(0, 0))\n+                    .getMillis();\n+        } else if (dow != 0) {\n+            dateMidnight = new LocalDate(dateMidnight)\n+                    .withDayOfWeek(dow)\n+                    .toDateTime(new LocalTime(0, 0))\n+                    .getMillis();\n+        }\n+\n+        millis = setMillisInDay(millis, millis - dateMidnight);\n     }\n+\n+    return millis;\n+}\n+\n+private long setMillisInDay(long millis, long value) {\n+    int millisOfDay = ISOChronology.getInstanceUTC().millisOfDay().get(value);\n+    return millis - millisOfDay;\n+}\n+\n+private long setMonthOfYear(long millis, int value) {\n+    long instant = millis;\n+    LocalDate date = new LocalDate(instant);\n+    int thisYear = date.getYear();\n+    int thisMonth = date.getMonthOfYear();\n+    int isLeapYear = ISOChronology.getInstanceUTC().isLeapYear(thisYear) ? 1 : 0;\n+\n+    if (value > 12) {\n+        thisYear += (value - 1) / 12;\n+        value = (value - 1) % 12 + 1;\n+    } else if (value < 1) {\n+        int[] remainder = new int[1];\n+        thisYear += value / 12 - 1;\n+        remainder[0] = value % 12 + 12;\n+        value = 12 - (ISOChronology.getInstanceUTC().monthOfYear()\n+                .getFieldValue(new LocalDate(instant).withYear(thisYear), remainder) - 1);\n+    }\n+\n+    int maxDayOfMonth = ISOChronology.getInstanceUTC()\n+            .dayOfMonth().getMaximumValue(new LocalDate(thisYear, value, 1).getMillis());\n+\n+    // Ensure the computed date is valid\n+    int dom = Math.min(date.getDayOfMonth(), maxDayOfMonth);\n+    millis = setMillisInDay(millis, 0);\n+\n+    // If the day of month is invalid, set it to 1\n+    if (date.getDayOfMonth() > maxDayOfMonth) {\n+        millis = new LocalDate(thisYear, value, 1)\n+                .toDateTime(new LocalTime(date.getMillisOfDay()))\n+                .getMillis();\n+    } else {\n+        millis = new LocalDate(thisYear, value, dom)\n+                .toDateTime(new LocalTime(millis - date.toDateTime(new LocalTime()).getMillisOfDay()))\n+                .getMillis();\n+    }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}