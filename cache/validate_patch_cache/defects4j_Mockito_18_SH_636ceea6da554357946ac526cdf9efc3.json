{
    "patch": "public Object returnValueFor(Class clazz) {\n    if (Iterable.class.isAssignableFrom(clazz)) {\n        List<Object> result = new ArrayList<>();\n        for (ResultPair pair : results) {\n            if (pair.getException() == null) {\n                result.add(pair.getValue());\n            }\n        }\n        return result;\n    } else if (!results.isEmpty() && clazz.isAssignableFrom(results.get(0).getValue().getClass())) {\n        return results.get(0).getValue();\n    } else {\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}