{
    "patch": "      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n        Node grandParent = parent.getParent();\n\n        // If we're assigning a Function to a prototype, don't traverse that.\n        if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP) {\n          // Only traverse the left hand side of the assignment if it's not a nested\n          // GETPROP.\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.NAME ||\n              !(NodeUtil.isGet(llhs) && llhs.getType() == Token.GETPROP &&\n                llhs.getLastChild().getString().equals(\"prototype\"))) {\n            if (rhs.getType() == Token.FUNCTION ||\n                rhs.getType() == Token.CALL ||\n                rhs.getType() == Token.NEW) {\n              return false;\n            } else if (rhs.isAssign() && rhs.getLastChild().getType() == Token.FUNCTION) {\n              return false;\n            } else if (grandParent != null &&\n                       grandParent.getType() == Token.EXPR &&\n                       grandParent.getParent() != null &&\n                       grandParent.getParent().getType() == Token.ASSIGN) {\n              Node greatGrandParent = grandParent.getParent();\n              if (greatGrandParent.getFirstChild().getType() == Token.GETPROP &&\n                  greatGrandParent.getChildAtIndex(2).getType() == Token.FUNCTION) {\n                return false;\n              }\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..413704d2 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,38 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        Node grandParent = parent.getParent();\n+\n+        // If we're assigning a Function to a prototype, don't traverse that.\n+        if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP) {\n+          // Only traverse the left hand side of the assignment if it's not a nested\n+          // GETPROP.\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.NAME ||\n+              !(NodeUtil.isGet(llhs) && llhs.getType() == Token.GETPROP &&\n+                llhs.getLastChild().getString().equals(\"prototype\"))) {\n+            if (rhs.getType() == Token.FUNCTION ||\n+                rhs.getType() == Token.CALL ||\n+                rhs.getType() == Token.NEW) {\n+              return false;\n+            } else if (rhs.isAssign() && rhs.getLastChild().getType() == Token.FUNCTION) {\n+              return false;\n+            } else if (grandParent != null &&\n+                       grandParent.getType() == Token.EXPR &&\n+                       grandParent.getParent() != null &&\n+                       grandParent.getParent().getType() == Token.ASSIGN) {\n+              Node greatGrandParent = grandParent.getParent();\n+              if (greatGrandParent.getFirstChild().getType() == Token.GETPROP &&\n+                  greatGrandParent.getChildAtIndex(2).getType() == Token.FUNCTION) {\n+                return false;\n+              }\n+            }\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}