{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix eigenVectors = dec.getV();\n    RealMatrix eigenValues = dec.getD();\n\n    for(int i = 0; i < eigenValues.getRowDimension(); i++) {\n        double val = eigenValues.getEntry(i, i);\n        double sqrtVal = Math.sqrt(Math.max(val, 0.0));\n        eigenValues.setEntry(i,i, sqrtVal);\n    }\n    \n    if (eigenVectors.getColumnDimension() != eigenValues.getRowDimension()) {\n        throw new IllegalArgumentException(String.format(\"Invalid eigen decomposition, matrix has dimensions %dx%d and %dx%d\", m.getRowDimension(), m.getColumnDimension(), eigenVectors.getRowDimension(), eigenVectors.getColumnDimension()));\n    }\n\n    RealMatrix sqrtM = eigenVectors.multiply(eigenValues).multiply(eigenVectors.inverse());\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..040686017 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix eigenVectors = dec.getV();\n+    RealMatrix eigenValues = dec.getD();\n+\n+    for(int i = 0; i < eigenValues.getRowDimension(); i++) {\n+        double val = eigenValues.getEntry(i, i);\n+        double sqrtVal = Math.sqrt(Math.max(val, 0.0));\n+        eigenValues.setEntry(i,i, sqrtVal);\n     }\n+    \n+    if (eigenVectors.getColumnDimension() != eigenValues.getRowDimension()) {\n+        throw new IllegalArgumentException(String.format(\"Invalid eigen decomposition, matrix has dimensions %dx%d and %dx%d\", m.getRowDimension(), m.getColumnDimension(), eigenVectors.getRowDimension(), eigenVectors.getColumnDimension()));\n+    }\n+\n+    RealMatrix sqrtM = eigenVectors.multiply(eigenValues).multiply(eigenVectors.inverse());\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}