{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  // Only allow declarations of NAMEs and qualified names.\n  if (n.getType() == Token.NAME) {\n    String variableName = n.getString();\n\n    Preconditions.checkArgument(!variableName.isEmpty());\n\n    boolean shouldDeclareOnGlobalThis = false;\n\n    switch (parent.getType()) {\n      case Token.FUNCTION:\n      case Token.VAR:\n      case Token.LP:\n      case Token.CATCH:\n        break;\n      default:\n        if (NodeUtil.isExpressionResultUsed(parent)) {\n          Preconditions.checkArgument(n.getParent() == parent.getFirstChild());\n          break;\n        }\n        throw new IllegalArgumentException(\n            \"Invalid parent for NAME node: \" + parent);\n    }\n\n    shouldDeclareOnGlobalThis =\n        scope.isGlobal() && parent.getType() == Token.VAR;\n\n    // If n has already been declared, log a warning and return.\n    if (scope.isDeclared(variableName, false)) {\n      Var prevDecl = scope.getVar(variableName);\n      // Exclude declared variables on the global 'this'.\n      if (prevDecl.getParentNode().getType() != Token.THIS) {\n        validator.expectUndeclaredVariable(\n            sourceName, n, parent, prevDecl, variableName, type);\n        return;\n      }\n    }\n\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n\n    CompilerInput input = compiler.getInput(sourceName);\n    scope.declare(variableName, n, type, input, inferred);\n\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = input.isExtern();\n      if (inferred) {\n        globalThis.defineInferredProperty(\n            variableName,\n            type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n            isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      }\n    }\n\n    // If we're in the global scope, also declare var.prototype\n    // in the scope chain.\n    if (scope.isGlobal() && type instanceof FunctionType) {\n      FunctionType fnType = (FunctionType) type;\n      if (fnType.isConstructor() || fnType.isInterface()) {\n        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n        scope.declare(\n            variableName + \".prototype\",\n            n,\n            fnType.getPrototype(),\n            input,\n            /* declared iff there's an explicit supertype */\n            superClassCtor == null\n                || superClassCtor.getInstanceType().equals(\n                    getNativeType(OBJECT_TYPE)));\n      }\n    }\n  } else if (n.getType() == Token.GETPROP) {\n    String prop = n.getLastChild().getString();\n\n    Preconditions.checkArgument(!prop.isEmpty());\n\n    switch (parent.getType()) {\n      case Token.ASSIGN:\n        Preconditions.checkArgument(n == parent.getFirstChild().getLastChild());\n        break;\n      case Token.EXPR_RESULT:\n        Preconditions.checkArgument(n == parent.getFirstChild());\n        break;\n      default:\n        throw new IllegalArgumentException(\n            \"Invalid parent for GETPROP node: \" + parent);\n    }\n\n    // If n has already been declared, log a warning and return.\n    if (scope.isDeclared(prop, false)) {\n      Var prevDecl = scope.getVar(prop);\n      // Exclude declared variables on the global 'this'.\n      if (prevDecl.getParentNode().getType() != Token.THIS) {\n        validator.expectUndeclaredVariable(\n            sourceName, n, parent, prevDecl, prop, type);\n        return;\n      }\n    }\n\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n\n    CompilerInput input = compiler.getInput(sourceName);\n    scope.declare(prop, n, type, input, inferred);\n  } else {\n    throw new IllegalArgumentException(\"Invalid node type: \" + n.getType());\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..b93b7d35 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,122 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n-      }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  Preconditions.checkArgument(inferred || type != null);\n+\n+  // Only allow declarations of NAMEs and qualified names.\n+  if (n.getType() == Token.NAME) {\n+    String variableName = n.getString();\n+\n+    Preconditions.checkArgument(!variableName.isEmpty());\n+\n+    boolean shouldDeclareOnGlobalThis = false;\n \n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n+    switch (parent.getType()) {\n+      case Token.FUNCTION:\n+      case Token.VAR:\n+      case Token.LP:\n+      case Token.CATCH:\n+        break;\n+      default:\n+        if (NodeUtil.isExpressionResultUsed(parent)) {\n+          Preconditions.checkArgument(n.getParent() == parent.getFirstChild());\n+          break;\n+        }\n+        throw new IllegalArgumentException(\n+            \"Invalid parent for NAME node: \" + parent);\n+    }\n \n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n+    shouldDeclareOnGlobalThis =\n+        scope.isGlobal() && parent.getType() == Token.VAR;\n \n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n+    // If n has already been declared, log a warning and return.\n+    if (scope.isDeclared(variableName, false)) {\n+      Var prevDecl = scope.getVar(variableName);\n+      // Exclude declared variables on the global 'this'.\n+      if (prevDecl.getParentNode().getType() != Token.THIS) {\n         validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n+            sourceName, n, parent, prevDecl, variableName, type);\n+        return;\n+      }\n+    }\n+\n+    if (!inferred) {\n+      setDeferredType(n, type);\n+    }\n+\n+    CompilerInput input = compiler.getInput(sourceName);\n+    scope.declare(variableName, n, type, input, inferred);\n+\n+    if (shouldDeclareOnGlobalThis) {\n+      ObjectType globalThis =\n+          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+      boolean isExtern = input.isExtern();\n+      if (inferred) {\n+        globalThis.defineInferredProperty(\n+            variableName,\n+            type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n+            isExtern);\n       } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n+        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n+      }\n+    }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n+    // If we're in the global scope, also declare var.prototype\n+    // in the scope chain.\n+    if (scope.isGlobal() && type instanceof FunctionType) {\n+      FunctionType fnType = (FunctionType) type;\n+      if (fnType.isConstructor() || fnType.isInterface()) {\n+        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+        scope.declare(\n+            variableName + \".prototype\",\n+            n,\n+            fnType.getPrototype(),\n+            input,\n+            /* declared iff there's an explicit supertype */\n+            superClassCtor == null\n+                || superClassCtor.getInstanceType().equals(\n                     getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n       }\n     }\n+  } else if (n.getType() == Token.GETPROP) {\n+    String prop = n.getLastChild().getString();\n+\n+    Preconditions.checkArgument(!prop.isEmpty());\n+\n+    switch (parent.getType()) {\n+      case Token.ASSIGN:\n+        Preconditions.checkArgument(n == parent.getFirstChild().getLastChild());\n+        break;\n+      case Token.EXPR_RESULT:\n+        Preconditions.checkArgument(n == parent.getFirstChild());\n+        break;\n+      default:\n+        throw new IllegalArgumentException(\n+            \"Invalid parent for GETPROP node: \" + parent);\n+    }\n+\n+    // If n has already been declared, log a warning and return.\n+    if (scope.isDeclared(prop, false)) {\n+      Var prevDecl = scope.getVar(prop);\n+      // Exclude declared variables on the global 'this'.\n+      if (prevDecl.getParentNode().getType() != Token.THIS) {\n+        validator.expectUndeclaredVariable(\n+            sourceName, n, parent, prevDecl, prop, type);\n+        return;\n+      }\n+    }\n+\n+    if (!inferred) {\n+      setDeferredType(n, type);\n+    }\n+\n+    CompilerInput input = compiler.getInput(sourceName);\n+    scope.declare(prop, n, type, input, inferred);\n+  } else {\n+    throw new IllegalArgumentException(\"Invalid node type: \" + n.getType());\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}