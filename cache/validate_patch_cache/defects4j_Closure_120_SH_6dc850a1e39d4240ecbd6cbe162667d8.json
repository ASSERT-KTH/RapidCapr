{
    "patch": "      if (block.isFunction) {\n        // If the variable is initialized inside a closure, we have to assume it\n        // is assigned multiple times.\n        return false;\n      } else if (block.isLoop && !block.equals(ref.getBasicBlock())) {\n        // The variable is assigned more than once in a loop that is not tightly looped.\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..ac0dd749 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,14 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        // If the variable is initialized inside a closure, we have to assume it\n+        // is assigned multiple times.\n+        return false;\n+      } else if (block.isLoop && !block.equals(ref.getBasicBlock())) {\n+        // The variable is assigned more than once in a loop that is not tightly looped.\n+        return false;\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}