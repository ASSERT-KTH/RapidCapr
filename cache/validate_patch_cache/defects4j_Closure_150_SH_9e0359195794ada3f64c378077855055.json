{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          } else if (parent.getType() == Token.SCRIPT) {\n            String functionName = NodeUtil.getStringValue(n.getFirstChild());\n            if (functionName != null && !functionName.isEmpty()) {\n              if (scope.isVarDeclared(functionName)) {\n                report(scope.getVar(functionName), CheckLevel.ERROR, VAR_MULTIPLY_DECLARED_ERROR);\n              } else {\n                Var var = scope.declare(nameNode.getIdentifier(), nameNode, null, inputScope.getClosestHoistScope(), true);\n                var.setFunction();\n                var.getNode().setJSDocInfo(n.getJSDocInfo());\n                var.getNode().setIsArrowFunction(scope.getClosestHoistScope().isArrowFunction());\n              }\n            }\n          } else {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.LP:\n          if (parent == scope.getRootNode()) {\n            handleFunctionInputs(parent);\n          }\n          break;\n        default:\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..48ee4608 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1453,8 +1453,21 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n             return;\n+          } else if (parent.getType() == Token.SCRIPT) {\n+            String functionName = NodeUtil.getStringValue(n.getFirstChild());\n+            if (functionName != null && !functionName.isEmpty()) {\n+              if (scope.isVarDeclared(functionName)) {\n+                report(scope.getVar(functionName), CheckLevel.ERROR, VAR_MULTIPLY_DECLARED_ERROR);\n+              } else {\n+                Var var = scope.declare(nameNode.getIdentifier(), nameNode, null, inputScope.getClosestHoistScope(), true);\n+                var.setFunction();\n+                var.getNode().setJSDocInfo(n.getJSDocInfo());\n+                var.getNode().setIsArrowFunction(scope.getClosestHoistScope().isArrowFunction());\n+              }\n+            }\n+          } else {\n+            defineDeclaredFunction(n, parent);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n@@ -1462,6 +1475,13 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        case Token.LP:\n+          if (parent == scope.getRootNode()) {\n+            handleFunctionInputs(parent);\n+          }\n+          break;\n+        default:\n+          break;\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}