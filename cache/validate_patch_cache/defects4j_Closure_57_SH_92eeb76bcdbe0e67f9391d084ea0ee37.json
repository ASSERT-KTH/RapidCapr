{
    "patch": "if (NodeUtil.isCall(parent) && callee != null\n    && callee.getType() == Token.GETPROP) {\n  String qualifiedName = callee.getQualifiedName();\n  if (qualifiedName != null && functionName.equals(qualifiedName)) {\n    Node target = callee.getNext();\n    if (target != null && target.getType() == Token.STRING) {\n      className = target.getString();\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ClosureCodingConvention.java b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\nindex c507c924..dfe3a9c7 100644\n--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n@@ -194,7 +194,16 @@ public class ClosureCodingConvention extends DefaultCodingConvention {\n         String qualifiedName = callee.getQualifiedName();\n         if (functionName.equals(qualifiedName)) {\n           Node target = callee.getNext();\n-          if (target != null) {\n+if (NodeUtil.isCall(parent) && callee != null\n+    && callee.getType() == Token.GETPROP) {\n+  String qualifiedName = callee.getQualifiedName();\n+  if (qualifiedName != null && functionName.equals(qualifiedName)) {\n+    Node target = callee.getNext();\n+    if (target != null && target.getType() == Token.STRING) {\n+      className = target.getString();\n+    }\n+  }\n+}\n             className = target.getString();\n           }\n         }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}