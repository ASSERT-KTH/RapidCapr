{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n\n    final String[] parts = str.split(\"_\");\n    final int len = parts.length;\n    if (len < 1 || len > 3) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    final String language = parts[0];\n    final String country = (len >= 2 && !parts[1].isEmpty()) ? parts[1] : \"\";\n    final String variant = (len >= 3 && !parts[2].isEmpty()) ? parts[2] : \"\";\n\n    if (!isValidLanguage(language)) {\n        throw new IllegalArgumentException(\"Invalid locale language: \" + language);\n    }\n\n    if (!isValidCountry(country)) {\n        throw new IllegalArgumentException(\"Invalid locale country: \" + country);\n    }\n\n    if (!isValidVariant(variant)) {\n        throw new IllegalArgumentException(\"Invalid locale variant: \" + variant);\n    }\n\n    return new Locale(language, country, variant);\n}\n\nprivate static boolean isValidLanguage(final String lang) {\n    if (lang.isEmpty() || lang.length() > 8) {\n        return false;\n    }\n\n    for (final char ch : lang.toCharArray()) {\n        if (ch == '_' || !Character.isLetter(ch)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nprivate static boolean isValidCountry(final String country) {\n    if (country.length() > 8) {\n        return false;\n    }\n\n    if (country.isEmpty()) {\n        return true;\n    }\n\n    if (!Character.isLetter(country.charAt(0))) {\n        return false;\n    }\n\n    for (final char ch : country.toCharArray()) {\n        if (ch == '_' || !Character.isLetterOrDigit(ch)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nprivate static boolean isValidVariant(final String variant) {\n    if (variant.length() > 8) {\n        return false;\n    }\n\n    if (variant.isEmpty()) {\n        return true;\n    }\n\n    for (final char ch : variant.toCharArray()) {\n        if (ch == '_' || !Character.isLetterOrDigit(ch) && ch != '-') {\n            return false;\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..a144063e 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,90 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n+    }\n+\n+    final String[] parts = str.split(\"_\");\n+    final int len = parts.length;\n+    if (len < 1 || len > 3) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    final String language = parts[0];\n+    final String country = (len >= 2 && !parts[1].isEmpty()) ? parts[1] : \"\";\n+    final String variant = (len >= 3 && !parts[2].isEmpty()) ? parts[2] : \"\";\n+\n+    if (!isValidLanguage(language)) {\n+        throw new IllegalArgumentException(\"Invalid locale language: \" + language);\n+    }\n+\n+    if (!isValidCountry(country)) {\n+        throw new IllegalArgumentException(\"Invalid locale country: \" + country);\n+    }\n+\n+    if (!isValidVariant(variant)) {\n+        throw new IllegalArgumentException(\"Invalid locale variant: \" + variant);\n+    }\n+\n+    return new Locale(language, country, variant);\n+}\n+\n+private static boolean isValidLanguage(final String lang) {\n+    if (lang.isEmpty() || lang.length() > 8) {\n+        return false;\n+    }\n+\n+    for (final char ch : lang.toCharArray()) {\n+        if (ch == '_' || !Character.isLetter(ch)) {\n+            return false;\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    return true;\n+}\n+\n+private static boolean isValidCountry(final String country) {\n+    if (country.length() > 8) {\n+        return false;\n+    }\n+\n+    if (country.isEmpty()) {\n+        return true;\n+    }\n+\n+    if (!Character.isLetter(country.charAt(0))) {\n+        return false;\n+    }\n+\n+    for (final char ch : country.toCharArray()) {\n+        if (ch == '_' || !Character.isLetterOrDigit(ch)) {\n+            return false;\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n \n+    return true;\n+}\n+\n+private static boolean isValidVariant(final String variant) {\n+    if (variant.length() > 8) {\n+        return false;\n+    }\n+\n+    if (variant.isEmpty()) {\n+        return true;\n+    }\n+\n+    for (final char ch : variant.toCharArray()) {\n+        if (ch == '_' || !Character.isLetterOrDigit(ch) && ch != '-') {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale language:",
    "test_result": "FAIL"
}