{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    int field = partial.getFieldType(fieldIndex).getField(iChronology).getDurationField().getType();\n    int yearIndex = DateTimeUtils.indexOfSupported(DateTimeFieldType.year(), partial.getFieldTypes());\n    if (yearIndex < 0 || fieldIndex < yearIndex || partial.getValue(yearIndex) != 0) {\n        // any day or month or year\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i != fieldIndex) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        DurationField[] fields = new DurationField[2];\n        fields[0] = partial.getFieldType(fieldIndex).getField(iChronology).getDurationField();\n        fields[1] = iChronology.days();\n        DurationFieldType type = DurationFieldType.forFields(fields);\n        instant = iChronology.add(instant, type.getField(iChronology).getField(iChronology).multiply(valueToAdd));\n        return iChronology.get(partial, instant);\n    } else {\n        int newYear = iChronology.year().add(partial.getChronology().year().get(values[fieldIndex], valueToAdd), 1);\n        try {\n            // Only try to retain same month if day is valid\n            try {\n                int day = partial.getField(DateTimeFieldType.dayOfMonth()).getField(iChronology).get(instant);\n                values = iChronology.get(partial, iChronology.monthOfYear().set(iChronology.dayOfMonth().set(newYear, day), values[DateTimeFieldType.monthOfYear().getFieldIndex()]));\n            } catch (IllegalFieldValueException ex) {\n                values = iChronology.get(partial, iChronology.monthOfYear().set(newYear, values[DateTimeFieldType.monthOfYear().getFieldIndex()]));\n            }\n        } catch (RuntimeException ex) {\n            throw new IllegalFieldValueException(DateTimeFieldType.year(), null);\n        }\n        // Day overflowed, go to the last day of the month instead\n        if (values[DateTimeFieldType.dayOfMonth().getFieldIndex()] > 28) {\n            int dom = iChronology.dayOfMonth().getMaximumValue(newYear, values[DateTimeFieldType.monthOfYear().getFieldIndex()]);\n            values = iChronology.get(partial, iChronology.dayOfMonth().set(newYear, values[DateTimeFieldType.monthOfYear().getFieldIndex()], dom));\n        }\n        return values;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..930a19d3 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,49 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    int field = partial.getFieldType(fieldIndex).getField(iChronology).getDurationField().getType();\n+    int yearIndex = DateTimeUtils.indexOfSupported(DateTimeFieldType.year(), partial.getFieldTypes());\n+    if (yearIndex < 0 || fieldIndex < yearIndex || partial.getValue(yearIndex) != 0) {\n+        // any day or month or year\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i != fieldIndex) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        DurationField[] fields = new DurationField[2];\n+        fields[0] = partial.getFieldType(fieldIndex).getField(iChronology).getDurationField();\n+        fields[1] = iChronology.days();\n+        DurationFieldType type = DurationFieldType.forFields(fields);\n+        instant = iChronology.add(instant, type.getField(iChronology).getField(iChronology).multiply(valueToAdd));\n+        return iChronology.get(partial, instant);\n+    } else {\n+        int newYear = iChronology.year().add(partial.getChronology().year().get(values[fieldIndex], valueToAdd), 1);\n+        try {\n+            // Only try to retain same month if day is valid\n+            try {\n+                int day = partial.getField(DateTimeFieldType.dayOfMonth()).getField(iChronology).get(instant);\n+                values = iChronology.get(partial, iChronology.monthOfYear().set(iChronology.dayOfMonth().set(newYear, day), values[DateTimeFieldType.monthOfYear().getFieldIndex()]));\n+            } catch (IllegalFieldValueException ex) {\n+                values = iChronology.get(partial, iChronology.monthOfYear().set(newYear, values[DateTimeFieldType.monthOfYear().getFieldIndex()]));\n+            }\n+        } catch (RuntimeException ex) {\n+            throw new IllegalFieldValueException(DateTimeFieldType.year(), null);\n+        }\n+        // Day overflowed, go to the last day of the month instead\n+        if (values[DateTimeFieldType.dayOfMonth().getFieldIndex()] > 28) {\n+            int dom = iChronology.dayOfMonth().getMaximumValue(newYear, values[DateTimeFieldType.monthOfYear().getFieldIndex()]);\n+            values = iChronology.get(partial, iChronology.dayOfMonth().set(newYear, values[DateTimeFieldType.monthOfYear().getFieldIndex()], dom));\n+        }\n+        return values;\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}