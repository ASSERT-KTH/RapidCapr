{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n    \n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (parameters.hasNext() && arguments.hasNext()) {\n        parameter = parameters.next();\n        argument = arguments.next();\n        ordinal++;\n        \n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n    \n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs <= numArgs && numArgs <= maxArgs) {\n        return;\n    } else if (functionType.isVarArgs()) {\n        if (numArgs < minArgs) {\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(minArgs) + \" argument(s)\", \"< \" + (minArgs+1));\n        }\n        return;\n    } else {\n        int exact = Math.max(0, parameters.hasNext() ? -1 : ordinal - 1);\n        if (maxArgs == Integer.MAX_VALUE) {\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), String.valueOf(exact),\n                \" or more argument(s)\");\n        } else {\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), String.valueOf(exact),\n                \" to \" + maxArgs + \" argument(s)\");\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..cfad97ef 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1400,34 +1400,47 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n-\n+    \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    while (parameters.hasNext() && arguments.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+        argument = arguments.next();\n+        ordinal++;\n+        \n+        validator.expectArgumentMatchesParameter(t, argument,\n+            getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n-\n+    \n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (minArgs <= numArgs && numArgs <= maxArgs) {\n+        return;\n+    } else if (functionType.isVarArgs()) {\n+        if (numArgs < minArgs) {\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(minArgs) + \" argument(s)\", \"< \" + (minArgs+1));\n+        }\n+        return;\n+    } else {\n+        int exact = Math.max(0, parameters.hasNext() ? -1 : ordinal - 1);\n+        if (maxArgs == Integer.MAX_VALUE) {\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgs), String.valueOf(exact),\n+                \" or more argument(s)\");\n+        } else {\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgs), String.valueOf(exact),\n+                \" to \" + maxArgs + \" argument(s)\");\n+        }\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}