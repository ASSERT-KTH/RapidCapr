{
    "patch": "        // Uses -1 and not -2 so that when '&' is the last character an exception is thrown\n        if(index < seqEnd && input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Fixes the already broken range check\n                if(start >= seqEnd) {\n                    System.err.println(\"FAIL: \" + input.subSequence(index, seqEnd) + \"[\" + index +\"][\"+ seqEnd + \"]\");\n                    return 0;\n                }\n            }\n\n            int end = start;\n            // Note that this supports character codes without a ; on the end\n            while(end < seqEnd && input.charAt(end) != ';') \n            {\n                end++;\n            }\n\n            // Fixes the already broken range check\n            if(end >= seqEnd) {\n                System.err.println(\"FAIL: \" + input.subSequence(index, seqEnd) + \"[\" + index +\"][\"+ seqEnd + \"]\");\n                return 0;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                return 0;\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n            // Adds 1 to the return value so that it correctly points to the character after the entity in the original string\n            return 1 + end - index;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..c4f2df40 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,10 +34,8 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n+        // Uses -1 and not -2 so that when '&' is the last character an exception is thrown\n+        if(index < seqEnd && input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n@@ -46,16 +44,26 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 start++;\n                 isHex = true;\n \n-                // Check there's more than just an x after the &#\n+                // Fixes the already broken range check\n+                if(start >= seqEnd) {\n+                    System.err.println(\"FAIL: \" + input.subSequence(index, seqEnd) + \"[\" + index +\"][\"+ seqEnd + \"]\");\n+                    return 0;\n+                }\n             }\n \n             int end = start;\n             // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n+            while(end < seqEnd && input.charAt(end) != ';') \n             {\n                 end++;\n             }\n \n+            // Fixes the already broken range check\n+            if(end >= seqEnd) {\n+                System.err.println(\"FAIL: \" + input.subSequence(index, seqEnd) + \"[\" + index +\"][\"+ seqEnd + \"]\");\n+                return 0;\n+            }\n+\n             int entityValue;\n             try {\n                 if(isHex) {\n@@ -64,7 +72,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                 }\n             } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                 return 0;\n             }\n \n@@ -75,10 +83,6 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n             } else {\n                 out.write(entityValue);\n             }\n-\n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n-        }\n-        return 0;\n-    }\n+            // Adds 1 to the return value so that it correctly points to the character after the entity in the original string\n+            return 1 + end - index;\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}