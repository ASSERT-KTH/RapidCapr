{
    "patch": "private Node parseContextTypeExpression(JsDocToken token) {\n    Optional<Node> expression = Optional.ofNullable(parseTypeExpression(token))\n                                          .or(() -> Optional.ofNullable(parseTypeName(token)));\n    if(expression.isPresent()) {\n        return expression.get();\n    } else {\n        throw new IllegalArgumentException(\"Bad type annotation. type not recognized due to syntax error\");\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..ed4d68ed 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1904,9 +1904,15 @@ public final class JsDocInfoParser {\n    * ContextTypeExpression := BasicTypeExpression | '?'\n    * For expressions on the right hand side of a this: or new:\n    */\n-  private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n-  }\n+private Node parseContextTypeExpression(JsDocToken token) {\n+    Optional<Node> expression = Optional.ofNullable(parseTypeExpression(token))\n+                                          .or(() -> Optional.ofNullable(parseTypeName(token)));\n+    if(expression.isPresent()) {\n+        return expression.get();\n+    } else {\n+        throw new IllegalArgumentException(\"Bad type annotation. type not recognized due to syntax error\");\n+    }\n+}\n \n   /**\n    * BasicTypeExpression := '*' | 'null' | 'undefined' | TypeName",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}