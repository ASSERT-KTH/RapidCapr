{
    "patch": "          String singletonGetterClassName = convention.getSingletonGetterClassName(value);\n          if (singletonGetterClassName != null) {\n            // If value is a call with 0 arguments then it is not a problem to inline.\n            if (callNode.hasChildren() && callNode.getLastChild().getInputId() != value.getInputId()) {\n              return false;\n            }\n            if (resultUsedOnceInParentScope(singletonGetterClassName, initialization, reference)) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..bbc8b34a 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,15 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+          String singletonGetterClassName = convention.getSingletonGetterClassName(value);\n+          if (singletonGetterClassName != null) {\n+            // If value is a call with 0 arguments then it is not a problem to inline.\n+            if (callNode.hasChildren() && callNode.getLastChild().getInputId() != value.getInputId()) {\n+              return false;\n+            }\n+            if (resultUsedOnceInParentScope(singletonGetterClassName, initialization, reference)) {\n+              return false;\n+            }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}