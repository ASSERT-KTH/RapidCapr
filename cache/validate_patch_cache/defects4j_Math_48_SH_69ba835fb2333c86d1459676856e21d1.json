{
    "patch": "                    if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                             atol)) {\n                        String msg = \"Convergence failed after %d iterations\";\n                        throw new ConvergenceException(new LocalizedFormats(msg), getMaximalIterationCount());\n                    }\n                    double oldy = (inverted) ? f0 : f1;\n                    double y = computeObjectiveValue(x);\n                    if (y == 0.0) {\n                        return x;\n                    }\n                    else if (f0 * y < 0) {\n                        x1 = x;\n                        f1 = y;\n                    } else {\n                        x0 = x;\n                        f0 = y;\n                    }\n                    if (FastMath.abs(f0) < FastMath.abs(f1)) {\n                        double temp = x0;\n                        x0 = x1;\n                        x1 = temp;\n                        temp = f0;\n                        f0 = f1;\n                        f1 = temp;\n                        inverted = !inverted;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..595fbe42b 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,31 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                    if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n+                                                             atol)) {\n+                        String msg = \"Convergence failed after %d iterations\";\n+                        throw new ConvergenceException(new LocalizedFormats(msg), getMaximalIterationCount());\n+                    }\n+                    double oldy = (inverted) ? f0 : f1;\n+                    double y = computeObjectiveValue(x);\n+                    if (y == 0.0) {\n+                        return x;\n+                    }\n+                    else if (f0 * y < 0) {\n+                        x1 = x;\n+                        f1 = y;\n+                    } else {\n+                        x0 = x;\n+                        f0 = y;\n+                    }\n+                    if (FastMath.abs(f0) < FastMath.abs(f1)) {\n+                        double temp = x0;\n+                        x0 = x1;\n+                        x1 = temp;\n+                        temp = f0;\n+                        f0 = f1;\n+                        f1 = temp;\n+                        inverted = !inverted;\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: orphaned default",
    "test_result": "ERROR"
}