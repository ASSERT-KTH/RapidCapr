{
    "patch": "            } else if (actualTypeArgument instanceof TypeVariable) {\n                // check if actual type argument is already resolved in the map\n                Type resolvedType = contextualActualTypeParameters.get(actualTypeArgument);\n                if (resolvedType == null) {\n                    // if not, add the type variable with its key as the actual type argument\n                    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n                    // then recursively call the method to resolve the type of the type variable\n                    resolveContextualTypeParameters((TypeVariable) actualTypeArgument, contextualActualTypeParameters);\n                } else {\n                    // if resolved, add the resolved type to the map\n                    contextualActualTypeParameters.put(typeParameter, resolvedType);\n                }\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..158c46bb9 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,21 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+            } else if (actualTypeArgument instanceof TypeVariable) {\n+                // check if actual type argument is already resolved in the map\n+                Type resolvedType = contextualActualTypeParameters.get(actualTypeArgument);\n+                if (resolvedType == null) {\n+                    // if not, add the type variable with its key as the actual type argument\n+                    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+                    // then recursively call the method to resolve the type of the type variable\n+                    resolveContextualTypeParameters((TypeVariable) actualTypeArgument, contextualActualTypeParameters);\n+                } else {\n+                    // if resolved, add the resolved type to the map\n+                    contextualActualTypeParameters.put(typeParameter, resolvedType);\n+                }\n+            } else {\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}