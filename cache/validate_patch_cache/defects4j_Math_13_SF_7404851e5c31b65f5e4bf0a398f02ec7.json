{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final RealMatrix sqrtM = new Array2DRowRealMatrix(n, n);\n    final EigenDecomposition dec = new EigenDecomposition(m, 1e-10);\n\n    final double[] realEigen = dec.getRealEigenvalues();\n    final RealMatrix v = dec.getV();\n    final RealMatrix vt = v.transpose();\n\n    for (int i = 0; i < n; i++) {\n        double squareRoot = Math.sqrt(realEigen[i]);\n        if (Double.isNaN(squareRoot)) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite.\");\n        }\n        for (int j = 0; j < n; j++) {\n            sqrtM.setEntry(i, j, squareRoot);\n        }\n    }\n    RealMatrix res = v.multiply(sqrtM).multiply(vt);\n    return res;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..48beead3d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final RealMatrix sqrtM = new Array2DRowRealMatrix(n, n);\n+    final EigenDecomposition dec = new EigenDecomposition(m, 1e-10);\n+\n+    final double[] realEigen = dec.getRealEigenvalues();\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix vt = v.transpose();\n+\n+    for (int i = 0; i < n; i++) {\n+        double squareRoot = Math.sqrt(realEigen[i]);\n+        if (Double.isNaN(squareRoot)) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite.\");\n+        }\n+        for (int j = 0; j < n; j++) {\n+            sqrtM.setEntry(i, j, squareRoot);\n+        }\n     }\n+    RealMatrix res = v.multiply(sqrtM).multiply(vt);\n+    return res;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}