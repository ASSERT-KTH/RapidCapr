{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n.getType() == Token.FUNCTION) {\n          boolean isFunctionAssignmentToPrototype = NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP\n              && lhs.getLastChild().getString().equals(\"prototype\");\n          if (isFunctionAssignmentToPrototype) {\n            return false;\n          }\n    \n          boolean isObjectLiteralAssignment = lhs.getType() == Token.OBJECTLIT;\n          if (!isObjectLiteralAssignment) {\n            Node ancestor = n;\n            while (ancestor != null && ancestor != lhs) {\n              if (ancestor.getType() == Token.OBJECTLIT) {\n                isObjectLiteralAssignment = true;\n                break;\n              }\n              ancestor = ancestor.getParent();\n            }\n          }\n          if (!isObjectLiteralAssignment) {\n            return false;\n          }\n        } else if (NodeUtil.isFunctionExpression(n) && !NodeUtil.isGet(lhs)) {\n          // Don't traverse function expressions that are not assigned to an object\n          return false;\n        } else if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP\n            && lhs.getLastChild().getString().equals(\"prototype\")) {\n          // Only traverse assignments to a prototype property\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..eaf9a262 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,41 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n.getType() == Token.FUNCTION) {\n+          boolean isFunctionAssignmentToPrototype = NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP\n+              && lhs.getLastChild().getString().equals(\"prototype\");\n+          if (isFunctionAssignmentToPrototype) {\n+            return false;\n+          }\n+    \n+          boolean isObjectLiteralAssignment = lhs.getType() == Token.OBJECTLIT;\n+          if (!isObjectLiteralAssignment) {\n+            Node ancestor = n;\n+            while (ancestor != null && ancestor != lhs) {\n+              if (ancestor.getType() == Token.OBJECTLIT) {\n+                isObjectLiteralAssignment = true;\n+                break;\n+              }\n+              ancestor = ancestor.getParent();\n+            }\n+          }\n+          if (!isObjectLiteralAssignment) {\n+            return false;\n+          }\n+        } else if (NodeUtil.isFunctionExpression(n) && !NodeUtil.isGet(lhs)) {\n+          // Don't traverse function expressions that are not assigned to an object\n+          return false;\n+        } else if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP\n+            && lhs.getLastChild().getString().equals(\"prototype\")) {\n+          // Only traverse assignments to a prototype property\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}