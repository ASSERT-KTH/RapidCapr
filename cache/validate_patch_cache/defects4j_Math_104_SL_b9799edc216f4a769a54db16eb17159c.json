{
    "patch": "import org.apache.commons.math3.util.MathUtils;\n\npublic class ClassName {\n\n    private static final double DEFAULT_EPSILON = 1e-9;\n\n    public static double regularizedGammaLower(double a, double x) {\n        if (a <= 0.0) {\n            throw new IllegalArgumentException(\"a must be positive (a=\" + a + \")\");\n        }\n        if (x < 0.0) {\n            throw new IllegalArgumentException(\"x must be non-negative (x=\" + x + \")\");\n        }\n\n        if (x == 0.0) {\n            return 0.0;\n        } else if (x >= a + 1) {\n            return 1 - regularizedGammaUpper(a, x);\n        } else {\n            // Use regularizedGammaPrefix to avoid cancellation region.\n            final double prefix = Math.exp(-x + a * Math.log(x) - logGamma(a));\n            return prefix * regularizedGammaPrefix(a, x);\n        }\n    }\n\n    private static double regularizedGammaPrefix(final double a, final double x) {\n        double ap = a;\n        double sum = 1 / a;\n        double del = sum;\n        while (Math.abs(del) > Math.abs(sum * DEFAULT_EPSILON)) {\n            ap++;\n            del = x * del / ap;\n            sum += del;\n        }\n        return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n    }\n\n    private static double regularizedGammaUpper(final double a, final double x) {\n        double incompleteGamma = incompleteGammaComplement(a, x);\n        return incompleteGamma / MathUtils.GAMMA(a);\n    }\n\n    private static double incompleteGammaComplement(double a, double x) {\n        if (a <= 0.0) {\n            throw new IllegalArgumentException(\"a must be positive (a=\" + a + \")\");\n        }\n        if (x < 0.0) {\n            throw new IllegalArgumentException(\"x must be non-negative (x=\" + x + \")\");\n        }\n\n        double big = Double.MAX_VALUE;\n        double bigInv = 1.0 / big;\n        double ans = 0.0;\n        double expm = Math.exp(-x + a * Math.log(x) - logGamma(a));\n        double lm = 0;\n        double bm = 1.0;\n        double tm = 1.0;\n        double pm = 0.0;\n        double sm = ans;\n        for (int j = 1; j <= 100; j++) {\n            double sj = j - a;\n            double tj = sj + lm;\n            bm = (j * bm + tm * expm) * bigInv;\n            pm = bm * tj;\n            sm += pm;\n            if (Math.abs(bm) < DEFAULT_EPSILON) {\n                return ans + sm;\n            }\n            tm *= x / (a + j);\n            lm += Math.log(x / (a + j));\n            if (Math.abs(pm) < DEFAULT_EPSILON * Math.abs(sm)) {\n                return ans + sm;\n            }\n        }\n        throw new RuntimeException(\"a too large, ITMAX too small in incompleteGammaComplement\");\n    }\n\n    private static double logGamma(double x) {\n        return Gamma.logGamma(x);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}