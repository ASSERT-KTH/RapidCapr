{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final double eps = 1e-6;\n        RealMatrix x = m;\n        RealMatrix y = m.add(MatrixUtils.createRealIdentityMatrix(m.getRowDimension()).scalarMultiply(-1.0));\n        RealMatrix z = m.copy();\n        RealMatrix lastX = null;\n\n        int iter = 0;\n        while (true) {\n            lastX = x;\n            x = (x.add(z.multiply(x.inverse())).scalarMultiply(0.5));\n            double normX = x.subtract(lastX).getFrobeniusNorm();\n            if (normX < eps) {\n                break;\n            }\n            y = x.subtract(y.multiply(y).scalarMultiply(0.25)).subtract(m).scalarMultiply(0.5);\n            z = y.multiply(z);\n            iter++;\n            if (iter > 100) {\n                throw new RuntimeException(\"Square root not found after 100 iterations\");\n            }\n        }\n        \n        return x;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..547920816 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,28 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        final double eps = 1e-6;\n+        RealMatrix x = m;\n+        RealMatrix y = m.add(MatrixUtils.createRealIdentityMatrix(m.getRowDimension()).scalarMultiply(-1.0));\n+        RealMatrix z = m.copy();\n+        RealMatrix lastX = null;\n+\n+        int iter = 0;\n+        while (true) {\n+            lastX = x;\n+            x = (x.add(z.multiply(x.inverse())).scalarMultiply(0.5));\n+            double normX = x.subtract(lastX).getFrobeniusNorm();\n+            if (normX < eps) {\n+                break;\n+            }\n+            y = x.subtract(y.multiply(y).scalarMultiply(0.25)).subtract(m).scalarMultiply(0.5);\n+            z = y.multiply(z);\n+            iter++;\n+            if (iter > 100) {\n+                throw new RuntimeException(\"Square root not found after 100 iterations\");\n+            }\n+        }\n+        \n+        return x;\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}