{
    "patch": "public void process(Node externs, Node root) {\n    NodeTraversal traversal = new NodeTraversal(compiler, this);\n    traversal.traverseRoots(externs, root);\n    removeDuplicateDeclarations(root);\n\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n        NodeTraversal uniqueTraversal = new NodeTraversal(compiler, renamer);\n        uniqueTraversal.traverseRoots(externs, root);\n        removeDuplicateDeclarations(root);\n    }\n\n    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java\nindex 4aa45558..b9d73c50 100644\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n@@ -84,17 +84,20 @@ class Normalize implements CompilerPass, Callback {\n   }\n \n   @Override\n-  public void process(Node externs, Node root) {\n-    NodeTraversal.traverse(compiler, root, this);\n+public void process(Node externs, Node root) {\n+    NodeTraversal traversal = new NodeTraversal(compiler, this);\n+    traversal.traverseRoots(externs, root);\n+    removeDuplicateDeclarations(root);\n+\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n-      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n-      NodeTraversal t = new NodeTraversal(compiler, renamer);\n-      t.traverseRoots(externs, root);\n+        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n+        NodeTraversal uniqueTraversal = new NodeTraversal(compiler, renamer);\n+        uniqueTraversal.traverseRoots(externs, root);\n+        removeDuplicateDeclarations(root);\n     }\n-    removeDuplicateDeclarations(root);\n-    new PropogateConstantAnnotations(compiler, assertOnChange)\n-        .process(externs, root);\n-  }\n+\n+    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);\n+}\n \n   @Override\n   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}