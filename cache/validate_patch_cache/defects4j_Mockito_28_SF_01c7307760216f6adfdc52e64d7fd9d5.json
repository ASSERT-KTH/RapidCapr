{
    "patch": "    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n            if(candidate != null) {\n                if(!field.isAccessible()){\n                    field.setAccessible(true);\n                }\n                try {\n                    field.set(fieldInstance, candidate);\n                } catch(IllegalAccessException e) {\n                    throw new RuntimeException(\"Unable to inject mock candidate\", e);\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..cc38a62b2 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,22 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            if(candidate != null) {\n+                if(!field.isAccessible()){\n+                    field.setAccessible(true);\n+                }\n+                try {\n+                    field.set(fieldInstance, candidate);\n+                } catch(IllegalAccessException e) {\n+                    throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+                }\n+            }\n+        }\n+    }\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<java.lang.Object@1af3bf5b> was not:<mockedBean>",
    "test_result": "FAIL"
}