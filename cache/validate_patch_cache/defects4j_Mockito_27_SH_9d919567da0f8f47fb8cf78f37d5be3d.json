{
    "patch": "        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MockSettingsImpl newMockSettings = (MockSettingsImpl) org.mockito.Mockito.withSettings()\n                                            .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS)\n                                            .spiedInstance(mock);\n        newMockHandler.setMockSettings(newMockSettings);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, newMockSettings);\n        if(mock instanceof Factory){\n            ((Factory) mock).setCallback(0, newFilter);\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..c93933a5d 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,18 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MockSettingsImpl newMockSettings = (MockSettingsImpl) org.mockito.Mockito.withSettings()\n+                                            .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS)\n+                                            .spiedInstance(mock);\n+        newMockHandler.setMockSettings(newMockSettings);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, newMockSettings);\n+        if(mock instanceof Factory){\n+            ((Factory) mock).setCallback(0, newFilter);\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}