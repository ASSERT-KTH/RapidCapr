{
    "patch": "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException {\n    long[] a = new long[maxIterations];\n    long[] p = new long[maxIterations];\n    long[] q = new long[maxIterations];\n\n    a[0] = (long) Math.floor(value);\n    long remNumerator = 1;\n    long remDenominator = 0;\n    p[0] = a[0];\n    q[0] = 1;\n\n    for (int i = 1; i < maxIterations; i++) {\n        double current_cf = 1.0 / (value - (double) a[i - 1]);\n        a[i] = (long) Math.floor(current_cf);\n\n        p[i] = a[i] * p[i - 1] + p[i - 2];\n        q[i] = a[i] * q[i - 1] + q[i - 2];\n\n        if (q[i] > maxDenominator) {\n            this.numerator = (int) p[i - 1];\n            this.denominator = (int) q[i - 1];\n            return;\n        }\n\n        double approx = (double) p[i] / (double) q[i];\n        if (FastMath.abs(approx - value) < epsilon) {\n            this.numerator = (int) p[i];\n            this.denominator = (int) q[i];\n            return;\n        }\n    }\n\n    throw new FractionConversionException(value, maxIterations);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..d23e8b846 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -172,71 +172,41 @@ public class Fraction\n      * @throws FractionConversionException if the continued fraction failed to\n      *         converge.\n      */\n-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n-        throws FractionConversionException\n-    {\n-        long overflow = Integer.MAX_VALUE;\n-        double r0 = value;\n-        long a0 = (long)FastMath.floor(r0);\n-        if (a0 > overflow) {\n-            throw new FractionConversionException(value, a0, 1l);\n-        }\n-\n-        // check for (almost) integer arguments, which should not go\n-        // to iterations.\n-        if (FastMath.abs(a0 - value) < epsilon) {\n-            this.numerator = (int) a0;\n-            this.denominator = 1;\n+private Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException {\n+    long[] a = new long[maxIterations];\n+    long[] p = new long[maxIterations];\n+    long[] q = new long[maxIterations];\n+\n+    a[0] = (long) Math.floor(value);\n+    long remNumerator = 1;\n+    long remDenominator = 0;\n+    p[0] = a[0];\n+    q[0] = 1;\n+\n+    for (int i = 1; i < maxIterations; i++) {\n+        double current_cf = 1.0 / (value - (double) a[i - 1]);\n+        a[i] = (long) Math.floor(current_cf);\n+\n+        p[i] = a[i] * p[i - 1] + p[i - 2];\n+        q[i] = a[i] * q[i - 1] + q[i - 2];\n+\n+        if (q[i] > maxDenominator) {\n+            this.numerator = (int) p[i - 1];\n+            this.denominator = (int) q[i - 1];\n             return;\n         }\n \n-        long p0 = 1;\n-        long q0 = 0;\n-        long p1 = a0;\n-        long q1 = 1;\n-\n-        long p2 = 0;\n-        long q2 = 1;\n-\n-        int n = 0;\n-        boolean stop = false;\n-        do {\n-            ++n;\n-            double r1 = 1.0 / (r0 - a0);\n-            long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n-            }\n-\n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n-                p0 = p1;\n-                p1 = p2;\n-                q0 = q1;\n-                q1 = q2;\n-                a0 = a1;\n-                r0 = r1;\n-            } else {\n-                stop = true;\n-            }\n-        } while (!stop);\n-\n-        if (n >= maxIterations) {\n-            throw new FractionConversionException(value, maxIterations);\n-        }\n-\n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n-        } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n+        double approx = (double) p[i] / (double) q[i];\n+        if (FastMath.abs(approx - value) < epsilon) {\n+            this.numerator = (int) p[i];\n+            this.denominator = (int) q[i];\n+            return;\n         }\n-\n     }\n \n+    throw new FractionConversionException(value, maxIterations);\n+}\n+\n     /**\n      * Create a fraction from an int.\n      * The fraction is num / 1.",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: -1",
    "test_result": "FAIL"
}