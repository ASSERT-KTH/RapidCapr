{
    "patch": "              if (finallyNode.isNormalBlock()) {\n                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n              } else {\n                Node innerFinally = finallyNode.getFirstChild();\n                while (innerFinally != null) {\n                  cfa.createEdge(fromNode, Branch.UNCOND, innerFinally);\n                  innerFinally = innerFinally.getNext();\n                }\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..594808d3 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,15 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              if (finallyNode.isNormalBlock()) {\n+                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              } else {\n+                Node innerFinally = finallyNode.getFirstChild();\n+                while (innerFinally != null) {\n+                  cfa.createEdge(fromNode, Branch.UNCOND, innerFinally);\n+                  innerFinally = innerFinally.getNext();\n+                }\n+              }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}