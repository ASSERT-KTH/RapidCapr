{
    "patch": "public String fixCode(String code) {\n    String pattern = \"(for\\\\((.*?);(.*?);(.*?)\\\\))\";\n    Pattern p = Pattern.compile(pattern);\n    Matcher m = p.matcher(code);\n    StringBuffer sb = new StringBuffer();\n    while (m.find()) {\n        String forLoop = m.group(1);\n        String secondParam = m.group(2);\n        if (secondParam.contains(\" in \")) {\n            String fixedSecondParam = secondParam.replace(\" in \", \" : \");\n            String replacement = forLoop.replace(secondParam, fixedSecondParam);\n            m.appendReplacement(sb, Matcher.quoteReplacement(replacement));\n        }\n    }\n    m.appendTail(sb);\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..75de6423 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,23 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    String pattern = \"(for\\\\((.*?);(.*?);(.*?)\\\\))\";\n+    Pattern p = Pattern.compile(pattern);\n+    Matcher m = p.matcher(code);\n+    StringBuffer sb = new StringBuffer();\n+    while (m.find()) {\n+        String forLoop = m.group(1);\n+        String secondParam = m.group(2);\n+        if (secondParam.contains(\" in \")) {\n+            String fixedSecondParam = secondParam.replace(\" in \", \" : \");\n+            String replacement = forLoop.replace(secondParam, fixedSecondParam);\n+            m.appendReplacement(sb, Matcher.quoteReplacement(replacement));\n+        }\n+    }\n+    m.appendTail(sb);\n+    return sb.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}