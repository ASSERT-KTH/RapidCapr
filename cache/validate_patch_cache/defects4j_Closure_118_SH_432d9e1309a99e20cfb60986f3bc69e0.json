{
    "patch": "        switch (child.getToken()) {\n          case STRING:\n            // Handle string key\n            String name = child.getString();\n            T type = typeSystem.getType(getScope(), n, name);\n  \n            Property prop = getProperty(name);\n            if (!prop.scheduleRenaming(child,\n                                       processProperty(t, prop, type, null))) {\n              // TODO(user): It doesn't look like the user can do much in this\n              // case right now.\n              if (propertiesToErrorFor.containsKey(name)) {\n                compiler.report(JSError.make(\n                    t.getSourceName(), child, propertiesToErrorFor.get(name),\n                    Warnings.INVALIDATION, name,\n                    (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n              }\n            }\n            break;\n  \n          case GET:\n          case SET:\n            // Handle getter or setter key\n            Node keyNode = child.getFirstChild();\n            String keyName = keyNode.getString();\n            T keyType = typeSystem.getType(getScope(), n, keyName);\n            Property keyProp = getProperty(keyName);\n            if (!keyProp.scheduleRenaming(keyNode,\n                                          processProperty(t, keyProp, keyType, null))) {\n              if (propertiesToErrorFor.containsKey(keyName)) {\n                compiler.report(JSError.make(\n                    t.getSourceName(), keyNode, propertiesToErrorFor.get(keyName),\n                    Warnings.INVALIDATION, keyName,\n                    (keyType == null ? \"null\" : keyType.toString()),\n                    n.toString(), \"\"));\n              }\n            }\n            break;\n  \n          default:\n            throw new IllegalStateException(\n                \"Unexpected object literal child: \" + child);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..0d8ffc7a 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,48 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        switch (child.getToken()) {\n+          case STRING:\n+            // Handle string key\n+            String name = child.getString();\n+            T type = typeSystem.getType(getScope(), n, name);\n+  \n+            Property prop = getProperty(name);\n+            if (!prop.scheduleRenaming(child,\n+                                       processProperty(t, prop, type, null))) {\n+              // TODO(user): It doesn't look like the user can do much in this\n+              // case right now.\n+              if (propertiesToErrorFor.containsKey(name)) {\n+                compiler.report(JSError.make(\n+                    t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                    Warnings.INVALIDATION, name,\n+                    (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+              }\n+            }\n+            break;\n+  \n+          case GET:\n+          case SET:\n+            // Handle getter or setter key\n+            Node keyNode = child.getFirstChild();\n+            String keyName = keyNode.getString();\n+            T keyType = typeSystem.getType(getScope(), n, keyName);\n+            Property keyProp = getProperty(keyName);\n+            if (!keyProp.scheduleRenaming(keyNode,\n+                                          processProperty(t, keyProp, keyType, null))) {\n+              if (propertiesToErrorFor.containsKey(keyName)) {\n+                compiler.report(JSError.make(\n+                    t.getSourceName(), keyNode, propertiesToErrorFor.get(keyName),\n+                    Warnings.INVALIDATION, keyName,\n+                    (keyType == null ? \"null\" : keyType.toString()),\n+                    n.toString(), \"\"));\n+              }\n+            }\n+            break;\n+  \n+          default:\n+            throw new IllegalStateException(\n+                \"Unexpected object literal child: \" + child);\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}