{
    "patch": "        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = null;\n        if (oldMockHandler instanceof MethodInterceptorFilter) {\n            MethodInterceptorFilter oldInterceptor = (MethodInterceptorFilter) oldMockHandler;\n            newFilter = new MethodInterceptorFilter(newMockHandler, oldInterceptor.getMockSettings());\n        } else {\n            newFilter = new MethodInterceptorFilter(newMockHandler, Mockito.withSettings().defaultAnswer(Answers.RETURNS_DEFAULTS));\n        }\n        ((Factory) mock).setCallbacks(new Callback[]{newFilter});",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..e79f274de 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,18 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = null;\n+        if (oldMockHandler instanceof MethodInterceptorFilter) {\n+            MethodInterceptorFilter oldInterceptor = (MethodInterceptorFilter) oldMockHandler;\n+            newFilter = new MethodInterceptorFilter(newMockHandler, oldInterceptor.getMockSettings());\n+        } else {\n+            newFilter = new MethodInterceptorFilter(newMockHandler, Mockito.withSettings().defaultAnswer(Answers.RETURNS_DEFAULTS));\n+        }\n+        ((Factory) mock).setCallbacks(new Callback[]{newFilter});\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}