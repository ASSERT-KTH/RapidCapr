{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    int n = m.getRowDimension();\n    // Initialize a new matrix to hold the square root of m\n    RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n\n    // Calculate the square root of each element in m\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            sqrtM.setEntry(i, j, Math.sqrt(m.getEntry(i, j)));\n        }\n    }\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b74a77061 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    int n = m.getRowDimension();\n+    // Initialize a new matrix to hold the square root of m\n+    RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n+\n+    // Calculate the square root of each element in m\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < n; j++) {\n+            sqrtM.setEntry(i, j, Math.sqrt(m.getEntry(i, j)));\n+        }\n     }\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}