{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final double epsilon = 1e-10;\n    \n    if (n > 1000) { // large matrix size, use specialized algorithm\n        return specializedSquareRoot(m, epsilon);\n    } else {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}\n\nprivate RealMatrix specializedSquareRoot(RealMatrix m, double epsilon) {\n    final int n = m.getRowDimension();\n\n    RealMatrix x = m;\n\n    // compute the square root incrementally\n    for (int k = 0; k < n; k++) {\n        for (int i = k + 1; i < n; i++) {\n            double factor = x.getEntry(i, k) / x.getEntry(k, k);\n            for (int j = k; j < n; j++) {\n                x.setEntry(i, j, x.getEntry(i, j) - factor * x.getEntry(k, j));\n            }\n        }\n        \n        // check if matrix is positive definite\n        if (x.getEntry(k, k) < epsilon) {\n            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n        }\n        \n        // set diagonal element to square root\n        double sqrtK = Math.sqrt(x.getEntry(k, k));\n        x.setEntry(k, k, sqrtK);\n        \n        // divide row k by the square root\n        for (int j = k + 1; j < n; j++) {\n            x.setEntry(k, j, x.getEntry(k, j) / sqrtK);\n        }\n    }\n\n    // set remaining elements to zero\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            x.setEntry(i, j, 0);\n        }\n    }\n\n    // perform matrix multiplication to get final square root\n    RealMatrix result = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        for (int j = i; j < n; j++) {\n            double sum = 0;\n            for (int k = i; k <= j; k++) {\n                sum += x.getEntry(i, k) * x.getEntry(j, k);\n            }\n            result.setEntry(i, j, sum);\n            result.setEntry(j, i, sum);\n        }\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..4b805f9d2 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,67 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final double epsilon = 1e-10;\n+    \n+    if (n > 1000) { // large matrix size, use specialized algorithm\n+        return specializedSquareRoot(m, epsilon);\n+    } else {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n     }\n }\n+\n+private RealMatrix specializedSquareRoot(RealMatrix m, double epsilon) {\n+    final int n = m.getRowDimension();\n+\n+    RealMatrix x = m;\n+\n+    // compute the square root incrementally\n+    for (int k = 0; k < n; k++) {\n+        for (int i = k + 1; i < n; i++) {\n+            double factor = x.getEntry(i, k) / x.getEntry(k, k);\n+            for (int j = k; j < n; j++) {\n+                x.setEntry(i, j, x.getEntry(i, j) - factor * x.getEntry(k, j));\n+            }\n+        }\n+        \n+        // check if matrix is positive definite\n+        if (x.getEntry(k, k) < epsilon) {\n+            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n+        }\n+        \n+        // set diagonal element to square root\n+        double sqrtK = Math.sqrt(x.getEntry(k, k));\n+        x.setEntry(k, k, sqrtK);\n+        \n+        // divide row k by the square root\n+        for (int j = k + 1; j < n; j++) {\n+            x.setEntry(k, j, x.getEntry(k, j) / sqrtK);\n+        }\n+    }\n+\n+    // set remaining elements to zero\n+    for (int i = 0; i < n; i++) {\n+        for (int j = i + 1; j < n; j++) {\n+            x.setEntry(i, j, 0);\n+        }\n+    }\n+\n+    // perform matrix multiplication to get final square root\n+    RealMatrix result = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        for (int j = i; j < n; j++) {\n+            double sum = 0;\n+            for (int k = i; k <= j; k++) {\n+                sum += x.getEntry(i, k) * x.getEntry(j, k);\n+            }\n+            result.setEntry(i, j, sum);\n+            result.setEntry(j, i, sum);\n+        }\n+    }\n+\n+    return result;\n+}\n+}",
    "result_reason": "org.apache.commons.math3.exception.MathUnsupportedOperationException: unsupported operation",
    "test_result": "FAIL"
}