{
    "patch": "public double getTypedPercent(String js) {\n    List<String> lines = Arrays.asList(js.split(\"\\n\"));\n    double numTyped = 0.0;\n    double numChars = 0.0;\n    for (String line : lines) {\n        for (int i = 0; i < line.length(); i++) {\n            char c = line.charAt(i);\n            if (c != ' ' && c != '\\t' && c != '\\n') {\n                numChars++;\n                if (c != '/') {\n                    numTyped++;\n                }\n            }\n        }\n    }\n    return (numTyped / numChars) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..f54823d8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String js) {\n+    List<String> lines = Arrays.asList(js.split(\"\\n\"));\n+    double numTyped = 0.0;\n+    double numChars = 0.0;\n+    for (String line : lines) {\n+        for (int i = 0; i < line.length(); i++) {\n+            char c = line.charAt(i);\n+            if (c != ' ' && c != '\\t' && c != '\\n') {\n+                numChars++;\n+                if (c != '/') {\n+                    numTyped++;\n+                }\n+            }\n+        }\n+    }\n+    return (numTyped / numChars) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}