{
    "patch": "import com.google.javascript.jscomp.JSError;\nimport java.util.ArrayList;\n\n// ...\n\nif (!n.isPrototypeProperty()) {\n    if (n.getJSType() != null && parent.isAssign()) {\n        if (!n.getJSType().isFunctionType()) {\n            warnings.add(JSError.make(\n                n, AMBIGUOUS_FUNCTION_DECLARATION, n.getQualifiedName()));\n        }\n        return;\n    }\n\n    Node value = n.getFirstChild();\n    if (value != null && value.isFunction()) {\n        FunctionTypeBuilder builder = new FunctionTypeBuilder();\n        for (Node param : value.getSecondChild().children()) {\n            builder.addFormalParam(\"\", param.getJSType());\n        }\n\n        JSType returnType = value.getJSType();\n        if (returnType == null) {\n            returnType = unknownType;\n        }\n\n        builder.addRetType(returnType);\n        JSType inferredType = builder.buildAndResolve();\n        n.setJSType(inferredType);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}