{
    "patch": "            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted) { // not near a DST boundary (neither before nor after)\n                return offsetLocal;\n            } else if (offsetLocal < offsetAdjusted) { // we are in the one-hour period before the DST ends\n                long boundaryAdjusted = nextTransition(nextAdjusted - 1);\n                if (instantLocal >= boundaryAdjusted) {\n                    return offsetAdjusted;\n                } else {\n                    return offsetLocal;\n                }\n            } else { // we are in the one-hour period after the DST starts\n                long boundaryLocal = nextTransition(nextLocal - 1);\n                if (instantLocal < boundaryLocal) {\n                    return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..59ee1b28 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal != nextAdjusted) { // not near a DST boundary (neither before nor after)\n+                return offsetLocal;\n+            } else if (offsetLocal < offsetAdjusted) { // we are in the one-hour period before the DST ends\n+                long boundaryAdjusted = nextTransition(nextAdjusted - 1);\n+                if (instantLocal >= boundaryAdjusted) {\n+                    return offsetAdjusted;\n+                } else {\n+                    return offsetLocal;\n+                }\n+            } else { // we are in the one-hour period after the DST starts\n+                long boundaryLocal = nextTransition(nextLocal - 1);\n+                if (instantLocal < boundaryLocal) {\n+                    return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}