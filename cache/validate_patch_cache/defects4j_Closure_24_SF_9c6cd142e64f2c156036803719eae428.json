{
    "patch": "private void findAliases(NodeTraversal t) {\n    // Create a hash set of all the qualified names in the current scope.\n    Set<String> qualifiedNames = new HashSet<>();\n    for (Scope s = t.getScope(); s != null; s = s.getParent()) {\n        if (s.isBlockScope()) {\n            for (Var v : s.getVarIterable()) {\n                Node n = v.getNode();\n                if (n.isName()) {\n                    qualifiedNames.add(n.getString());\n                }\n            }\n        }\n    }\n\n    // Iterate over all vars and create an alias if applicable.\n    for (Var v : t.getScope().getVarIterable()) {\n        Node n = v.getNode();\n        if (n.getParent().isVar()) {\n            Node valueNode = n.getFirstChild();\n            if (valueNode != null && valueNode.isQualifiedName()) {\n                String name = n.getString();\n                Var aliasVar = t.getScope().getVar(name);\n                if (aliasVar != null) {\n                    Node initialValue = aliasVar.getInitialValue();\n                    if (initialValue == null) {\n                        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n                    } else if (!qualifiedNames.contains(initialValue.getQualifiedName())) {\n                        aliases.put(name, aliasVar);\n                        transformation.addAlias(name, initialValue.getQualifiedName());\n                    }\n                }\n            } else if (n.getJSDocInfo() == null) {\n                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..a109e016 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,43 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+private void findAliases(NodeTraversal t) {\n+    // Create a hash set of all the qualified names in the current scope.\n+    Set<String> qualifiedNames = new HashSet<>();\n+    for (Scope s = t.getScope(); s != null; s = s.getParent()) {\n+        if (s.isBlockScope()) {\n+            for (Var v : s.getVarIterable()) {\n+                Node n = v.getNode();\n+                if (n.isName()) {\n+                    qualifiedNames.add(n.getString());\n+                }\n+            }\n         }\n+    }\n+\n+    // Iterate over all vars and create an alias if applicable.\n+    for (Var v : t.getScope().getVarIterable()) {\n+        Node n = v.getNode();\n+        if (n.getParent().isVar()) {\n+            Node valueNode = n.getFirstChild();\n+            if (valueNode != null && valueNode.isQualifiedName()) {\n+                String name = n.getString();\n+                Var aliasVar = t.getScope().getVar(name);\n+                if (aliasVar != null) {\n+                    Node initialValue = aliasVar.getInitialValue();\n+                    if (initialValue == null) {\n+                        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+                    } else if (!qualifiedNames.contains(initialValue.getQualifiedName())) {\n+                        aliases.put(name, aliasVar);\n+                        transformation.addAlias(name, initialValue.getQualifiedName());\n+                    }\n+                }\n+            } else if (n.getJSDocInfo() == null) {\n+                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+            }\n         }\n-      }\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}