{
    "patch": "    List<Node> argsToRemove = new ArrayList<>();\n    Set<String> referencedParams = new HashSet<>();\n    // Collect all the referenced params\n    NodeUtil.visitPreOrder(fnScope.getRootNode(), new Visitor() {\n      @Override\n      public void visit(Node node) {\n        if (node.isFirstChildOf(argList) && node.isName()) {\n          if (referenced.contains(fnScope.getVar(node.getString()))) {\n            referencedParams.add(node.getString());\n          }\n        }\n      }\n    });\n    // Build a list of all the params that need to be removed\n    Node lastArg = argList.getLastChild();\n    while (lastArg != null && !referencedParams.contains(lastArg.getString())) {\n      argList.removeChild(lastArg);\n      argsToRemove.add(lastArg);\n      compiler.reportCodeChange();\n      lastArg = argList.getLastChild();\n    }\n\n    callSiteOptimizer.processRValue(externsScope);\n    callSiteOptimizer.processRValue(fnScope);\n\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced, referencedParams);\n    } else {\n      for (Node argToRemove : argsToRemove) {\n        compiler.reportChangeToEnclosingScope(argToRemove);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c1a8562f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,36 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    List<Node> argsToRemove = new ArrayList<>();\n+    Set<String> referencedParams = new HashSet<>();\n+    // Collect all the referenced params\n+    NodeUtil.visitPreOrder(fnScope.getRootNode(), new Visitor() {\n+      @Override\n+      public void visit(Node node) {\n+        if (node.isFirstChildOf(argList) && node.isName()) {\n+          if (referenced.contains(fnScope.getVar(node.getString()))) {\n+            referencedParams.add(node.getString());\n+          }\n+        }\n+      }\n+    });\n+    // Build a list of all the params that need to be removed\n+    Node lastArg = argList.getLastChild();\n+    while (lastArg != null && !referencedParams.contains(lastArg.getString())) {\n+      argList.removeChild(lastArg);\n+      argsToRemove.add(lastArg);\n+      compiler.reportCodeChange();\n+      lastArg = argList.getLastChild();\n+    }\n+\n+    callSiteOptimizer.processRValue(externsScope);\n+    callSiteOptimizer.processRValue(fnScope);\n+\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced, referencedParams);\n+    } else {\n+      for (Node argToRemove : argsToRemove) {\n+        compiler.reportChangeToEnclosingScope(argToRemove);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}