{
    "patch": "public Class<?> getGenericType(Field field) {\n    Type generic = field.getGenericType();\n    if (generic instanceof ParameterizedType) {\n        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n        if (actual instanceof Class) {\n            return (Class<?>) actual;\n        } else if (actual instanceof ParameterizedType) {\n            return getGenericType((ParameterizedType) actual);\n        } else if (actual instanceof TypeVariable) {\n            return handleTypeVariable((TypeVariable<?>) actual);\n        }\n    }\n\n    return Object.class;\n}\n\nprivate Class<?> handleTypeVariable(TypeVariable<?> type) {\n    Type[] bounds = type.getBounds();\n    if (bounds.length == 0) {\n        return Object.class;\n    }\n    Type bound = bounds[0];\n    if (bound instanceof Class) {\n        return (Class<?>) bound;\n    } else if (bound instanceof ParameterizedType) {\n        return getGenericType((ParameterizedType) bound);\n    } else if (bound instanceof TypeVariable) {\n        return handleTypeVariable((TypeVariable<?>) bound);\n    } else {\n        return Object.class;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 64bf1540f..5ac63be96 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -13,14 +13,36 @@ public class GenericMaster {\n      * @param field\n      * @return\n      */\n-    public Class getGenericType(Field field) {        \n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-                return (Class) actual;\n-                //in case of nested generics we don't go deep\n-        }\n-        \n-        return Object.class;\n-    }\n+public Class<?> getGenericType(Field field) {\n+    Type generic = field.getGenericType();\n+    if (generic instanceof ParameterizedType) {\n+        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n+        if (actual instanceof Class) {\n+            return (Class<?>) actual;\n+        } else if (actual instanceof ParameterizedType) {\n+            return getGenericType((ParameterizedType) actual);\n+        } else if (actual instanceof TypeVariable) {\n+            return handleTypeVariable((TypeVariable<?>) actual);\n+        }\n+    }\n+\n+    return Object.class;\n+}\n+\n+private Class<?> handleTypeVariable(TypeVariable<?> type) {\n+    Type[] bounds = type.getBounds();\n+    if (bounds.length == 0) {\n+        return Object.class;\n+    }\n+    Type bound = bounds[0];\n+    if (bound instanceof Class) {\n+        return (Class<?>) bound;\n+    } else if (bound instanceof ParameterizedType) {\n+        return getGenericType((ParameterizedType) bound);\n+    } else if (bound instanceof TypeVariable) {\n+        return handleTypeVariable((TypeVariable<?>) bound);\n+    } else {\n+        return Object.class;\n+    }\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}