{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n            // Check if the parent is an IIFE or a return statement\n            Node parent = n.getParent();\n            if (parent != null && (parent.getType() == Token.IIFE || parent.getType() == Token.RETURN)) {\n                return false;\n            }\n            Node firstChild = maybeExpr.getFirstChild();\n            if (firstChild.getType() == Token.CALL) {\n                // If the CALL node has two or more children, e.g. it has\n                // a method or object as the first child, we should not fold\n                // the expression block.\n                if (firstChild.getChildCount() > 1) {\n                    return false;\n                }\n                Node target = firstChild.getFirstChild();\n                if (target.getType() == Token.NAME && target.getString().equals(\"goog.dom.safeHtmlToNode\")) {\n                    return false;\n                }\n                if (target.getType() == Token.FUNCTION) {\n                    return false;\n                }\n                if (target.getType() == Token.GETPROP) {\n                    Node lastChild = target.getLastChild();\n                    if (lastChild.getString().equals(\"call\")\n                            || lastChild.getString().equals(\"apply\")) {\n                        return false;\n                    }\n                }\n            }\n            return NodeUtil.isExpressionNode(maybeExpr);\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..93980f67 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,43 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+            // Check if the parent is an IIFE or a return statement\n+            Node parent = n.getParent();\n+            if (parent != null && (parent.getType() == Token.IIFE || parent.getType() == Token.RETURN)) {\n+                return false;\n+            }\n+            Node firstChild = maybeExpr.getFirstChild();\n+            if (firstChild.getType() == Token.CALL) {\n+                // If the CALL node has two or more children, e.g. it has\n+                // a method or object as the first child, we should not fold\n+                // the expression block.\n+                if (firstChild.getChildCount() > 1) {\n+                    return false;\n+                }\n+                Node target = firstChild.getFirstChild();\n+                if (target.getType() == Token.NAME && target.getString().equals(\"goog.dom.safeHtmlToNode\")) {\n+                    return false;\n+                }\n+                if (target.getType() == Token.FUNCTION) {\n+                    return false;\n+                }\n+                if (target.getType() == Token.GETPROP) {\n+                    Node lastChild = target.getLastChild();\n+                    if (lastChild.getString().equals(\"call\")\n+                            || lastChild.getString().equals(\"apply\")) {\n+                        return false;\n+                    }\n+                }\n+            }\n+            return NodeUtil.isExpressionNode(maybeExpr);\n+        }\n     }\n-\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}