{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1) {\n        // use a continued fraction expansion\n        double g = new ContinuedFraction() {\n            @Override\n            protected double getA(int n, double x) {\n                if (n % 2 == 0) {\n                    return n / 2.0;\n                }\n                return (n + 1) / 2.0 - a;\n            }\n\n            @Override\n            protected double getB(int n, double x) {\n                return x;\n            }\n        }.evaluate(x, epsilon, maxIterations);\n\n        return 1.0 - FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a)) * g;\n    }\n\n    // series representation\n    double sum = 1 / a;\n    double term = sum;\n\n    for (int i = 1; i < maxIterations && FastMath.abs(term) > epsilon * FastMath.abs(sum); i++) { \n        term *= x / (a + i);\n        sum += term;\n    }\n\n    return FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a)) * sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..75379aa69 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,46 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1) {\n+        // use a continued fraction expansion\n+        double g = new ContinuedFraction() {\n+            @Override\n+            protected double getA(int n, double x) {\n+                if (n % 2 == 0) {\n+                    return n / 2.0;\n+                }\n+                return (n + 1) / 2.0 - a;\n+            }\n+\n+            @Override\n+            protected double getB(int n, double x) {\n+                return x;\n+            }\n+        }.evaluate(x, epsilon, maxIterations);\n+\n+        return 1.0 - FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a)) * g;\n+    }\n+\n+    // series representation\n+    double sum = 1 / a;\n+    double term = sum;\n+\n+    for (int i = 1; i < maxIterations && FastMath.abs(term) > epsilon * FastMath.abs(sum); i++) { \n+        term *= x / (a + i);\n+        sum += term;\n+    }\n+\n+    return FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a)) * sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}