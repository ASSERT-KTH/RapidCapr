{
    "patch": "// Option 1\nType[] actualTypeArguments = ((ParameterizedType) typeVariable.getGenericDeclaration()).getActualTypeArguments();\nif (actualTypeArguments != null) {\n    for (Type actualTypeArgument : actualTypeArguments) {\n        if (actualTypeArgument != null) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}\n\n// Option 2\nType genericSuperclass = typeVariable.getGenericDeclaration();\nif (genericSuperclass != null) {\n    registerTypeVariablesOn(genericSuperclass);\n}\n\n// Option 3\nfor (Type type : typeVariable.getBounds()) {\n    registerTypeVariablesOn(type);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..d9b86e551 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,31 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+// Option 1\n+Type[] actualTypeArguments = ((ParameterizedType) typeVariable.getGenericDeclaration()).getActualTypeArguments();\n+if (actualTypeArguments != null) {\n+    for (Type actualTypeArgument : actualTypeArguments) {\n+        if (actualTypeArgument != null) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n+\n+// Option 2\n+Type genericSuperclass = typeVariable.getGenericDeclaration();\n+if (genericSuperclass != null) {\n+    registerTypeVariablesOn(genericSuperclass);\n+}\n+\n+// Option 3\n+for (Type type : typeVariable.getBounds()) {\n+    registerTypeVariablesOn(type);\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: incompatible types: GenericDeclaration cannot be converted to Type",
    "test_result": "ERROR"
}