{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.*;\n\npublic class GammaDistribution {\n    private double k;\n    private double theta;\n    private double alpha;\n    private double beta;\n\n    public GammaDistribution(double k, double theta) {\n        this.k = k;\n        this.theta = theta;\n        this.alpha = k;\n        this.beta = 1 / theta;\n    }\n\n    public double getMean() {\n        return k * theta;\n    }\n\n    public double getVariance() {\n        return k * theta * theta;\n    }\n\n    public double pdf(double value) {\n        return (1 / (FastMath.gamma(k) * FastMath.pow(theta, k))) * FastMath.pow(value, k - 1)\n                * FastMath.exp(-value / theta);\n    }\n\n    public double cdf(double value) {\n        return Gamma.regularizedGammaP(k, value / theta);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..4b482bcc1 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,39 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.*;\n+\n+public class GammaDistribution {\n+    private double k;\n+    private double theta;\n+    private double alpha;\n+    private double beta;\n+\n+    public GammaDistribution(double k, double theta) {\n+        this.k = k;\n+        this.theta = theta;\n+        this.alpha = k;\n+        this.beta = 1 / theta;\n+    }\n+\n+    public double getMean() {\n+        return k * theta;\n+    }\n+\n+    public double getVariance() {\n+        return k * theta * theta;\n+    }\n+\n+    public double pdf(double value) {\n+        return (1 / (FastMath.gamma(k) * FastMath.pow(theta, k))) * FastMath.pow(value, k - 1)\n+                * FastMath.exp(-value / theta);\n+    }\n+\n+    public double cdf(double value) {\n+        return Gamma.regularizedGammaP(k, value / theta);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}