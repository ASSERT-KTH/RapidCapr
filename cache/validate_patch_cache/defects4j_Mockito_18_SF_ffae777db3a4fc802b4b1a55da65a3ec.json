{
    "patch": "public static Map<String, Integer> countWords(String input) {\n    Map<String, Integer> wordCount = new HashMap<>();\n    String[] words = input.split(\"\\\\s+\");\n    for (String word : words) {\n        String cleanWord = word.toLowerCase().replaceAll(\"[^a-zA-Z0-9]\", \"\");\n        if (!cleanWord.isEmpty()) {\n            if (!wordCount.containsKey(cleanWord)) {\n                wordCount.put(cleanWord, 1);\n            } else {\n                wordCount.put(cleanWord, wordCount.get(cleanWord) + 1);\n            }\n        }\n    }\n    return wordCount;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..817a72d9d 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,21 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<String, Integer> countWords(String input) {\n+    Map<String, Integer> wordCount = new HashMap<>();\n+    String[] words = input.split(\"\\\\s+\");\n+    for (String word : words) {\n+        String cleanWord = word.toLowerCase().replaceAll(\"[^a-zA-Z0-9]\", \"\");\n+        if (!cleanWord.isEmpty()) {\n+            if (!wordCount.containsKey(cleanWord)) {\n+                wordCount.put(cleanWord, 1);\n+            } else {\n+                wordCount.put(cleanWord, wordCount.get(cleanWord) + 1);\n+            }\n+        }\n+    }\n+    return wordCount;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}