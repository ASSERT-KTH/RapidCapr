{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            boolean changed = false;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (i == fieldIndex) { // the target field\n                    int curValue = values[i];\n                    int newValue = iChronology.getField(iChronology.monthOfYear(), instant).addWrapField(curValue, valueToAdd);\n                    if (newValue != curValue) {\n                        changed = true; // we're changing something\n                    }\n                    instant = iChronology.getField(iChronology.monthOfYear(), instant).set(instant, newValue);\n                    // preserve the day of the month, if it makes sense to...\n                    if (iChronology.dayOfMonth().isSupported()) {\n                        int maxDay = iChronology.getDaysInMonth(iChronology.year().get(instant), newValue);\n                        int curDay = values[iChronology.dayOfMonth().getPartialIndex()];\n                        if (curDay > maxDay) {\n                            instant = iChronology.dayOfMonth().set(instant, maxDay);\n                        } else {\n                            instant = iChronology.dayOfMonth().set(instant, curDay);\n                        }\n                    }\n                } else {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }\n            }\n            if (changed == false && iChronology.dayOfMonth().isSupported()){\n                int day = iChronology.dayOfMonth().get(instant);\n                int maxDay = iChronology.getDaysInMonth(iChronology.year().get(instant), iChronology.monthOfYear().get(instant));\n                if(day>maxDay){\n                    instant = iChronology.dayOfMonth().set(instant, maxDay);\n                }\n            }\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..8d36a301 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,13 +206,39 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            boolean changed = false;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                if (i == fieldIndex) { // the target field\n+                    int curValue = values[i];\n+                    int newValue = iChronology.getField(iChronology.monthOfYear(), instant).addWrapField(curValue, valueToAdd);\n+                    if (newValue != curValue) {\n+                        changed = true; // we're changing something\n+                    }\n+                    instant = iChronology.getField(iChronology.monthOfYear(), instant).set(instant, newValue);\n+                    // preserve the day of the month, if it makes sense to...\n+                    if (iChronology.dayOfMonth().isSupported()) {\n+                        int maxDay = iChronology.getDaysInMonth(iChronology.year().get(instant), newValue);\n+                        int curDay = values[iChronology.dayOfMonth().getPartialIndex()];\n+                        if (curDay > maxDay) {\n+                            instant = iChronology.dayOfMonth().set(instant, maxDay);\n+                        } else {\n+                            instant = iChronology.dayOfMonth().set(instant, curDay);\n+                        }\n+                    }\n+                } else {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                }\n+            }\n+            if (changed == false && iChronology.dayOfMonth().isSupported()){\n+                int day = iChronology.dayOfMonth().get(instant);\n+                int maxDay = iChronology.getDaysInMonth(iChronology.year().get(instant), iChronology.monthOfYear().get(instant));\n+                if(day>maxDay){\n+                    instant = iChronology.dayOfMonth().set(instant, maxDay);\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}