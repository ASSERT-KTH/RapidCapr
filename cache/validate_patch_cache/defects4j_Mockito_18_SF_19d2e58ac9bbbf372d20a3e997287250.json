{
    "patch": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class MyClass {    \n    public Object returnValueFor(Class clazz) {\n        if (List.class.equals(clazz) || Iterable.class.equals(clazz)) {\n            return Collections.emptyList();\n        } else if (clazz.equals(String.class)) {\n            return \"\";\n        } else {\n            return null;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..9a499b019 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,22 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class MyClass {    \n+    public Object returnValueFor(Class clazz) {\n+        if (List.class.equals(clazz) || Iterable.class.equals(clazz)) {\n+            return Collections.emptyList();\n+        } else if (clazz.equals(String.class)) {\n+            return \"\";\n+        } else {\n+            return null;\n+        }\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}