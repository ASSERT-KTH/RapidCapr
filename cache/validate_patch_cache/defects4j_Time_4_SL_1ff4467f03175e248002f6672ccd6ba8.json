{
    "patch": "    private Partial with(DateTimeFieldType[] newTypes, int[] newValues, Chronology newChronology) {\n        if (iChronology == newChronology) {\n            // use public constructor to ensure full validation\n            return new Partial(newTypes, newValues);\n        }\n        return new Partial(newTypes, newValues, newChronology);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..0e92bb5f 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,13 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+    private Partial with(DateTimeFieldType[] newTypes, int[] newValues, Chronology newChronology) {\n+        if (iChronology == newChronology) {\n+            // use public constructor to ensure full validation\n+            return new Partial(newTypes, newValues);\n+        }\n+        return new Partial(newTypes, newValues, newChronology);\n+    }\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}