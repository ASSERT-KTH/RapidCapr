{
    "patch": "                if ((offsetLocal - offsetAdjusted) < 0) {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        // we crossed a boundary, return the original offset\n                        return offsetLocal;\n                    }\n                    int diff = getOffset(nextLocal) - offsetAdjusted;\n                    if (diff < 0) {\n                        // we're still in the previous offset period, return the original offset\n                        return offsetLocal; \n                    }\n                    return offsetAdjusted;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..7e81b51d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,20 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if ((offsetLocal - offsetAdjusted) < 0) {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        // we crossed a boundary, return the original offset\n+                        return offsetLocal;\n+                    }\n+                    int diff = getOffset(nextLocal) - offsetAdjusted;\n+                    if (diff < 0) {\n+                        // we're still in the previous offset period, return the original offset\n+                        return offsetLocal; \n+                    }\n+                    return offsetAdjusted;\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}