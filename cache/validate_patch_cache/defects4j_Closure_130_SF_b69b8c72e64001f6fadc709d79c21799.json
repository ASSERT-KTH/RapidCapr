{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n      \n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      if (name.getDeclaration() == null) {\n        continue;\n      }\n    \n      if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0 &&\n          hasAliasingGetInLocalScope(name)) {\n        // {@code name} meets condition (b). Find all of its local aliases\n        // and try to inline them.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n      }\n      \n      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n          && name.aliasingGets == 0 && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }\n\n  private boolean hasAliasingGetInLocalScope(Name name) {\n    for (Ref ref : name.getAllRefs()) {\n      if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..26ccbc51 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,37 +158,36 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+private void inlineAliases(GlobalNamespace namespace) {\n+    Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n+\n     while (!workList.isEmpty()) {\n       Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n+      \n       if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n+      if (name.getDeclaration() == null) {\n+        continue;\n+      }\n+    \n+      if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0 &&\n+          hasAliasingGetInLocalScope(name)) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.\n         List<Ref> refs = Lists.newArrayList(name.getRefs());\n         for (Ref ref : refs) {\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n               name.removeRef(ref);\n             }\n           }\n         }\n       }\n-\n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n+      \n+      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n+          && name.aliasingGets == 0 && name.props != null) {\n         // All of {@code name}'s children meet condition (a), so they can be\n         // added to the worklist.\n         workList.addAll(name.props);\n@@ -196,6 +195,15 @@ class CollapseProperties implements CompilerPass {\n     }\n   }\n \n+  private boolean hasAliasingGetInLocalScope(Name name) {\n+    for (Ref ref : name.getAllRefs()) {\n+      if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that\n     // variable's declaration. If the alias's parent is a NAME,",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}