{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double gamma = gamma(a);\n    double result;\n    if (Math.abs(gamma) < Double.MIN_VALUE) {\n        result = 0.0;\n    } else if (x == 0.0) {\n        result = 0.0;\n    } else if (x >= a + 1.0) {\n        double igf = incompleteGammaFraction(a, x);\n        result = 1.0 - igf;\n    } else {\n        double f = series(a, x);\n        result = f / gamma;\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..5be789d57 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,22 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double gamma = gamma(a);\n+    double result;\n+    if (Math.abs(gamma) < Double.MIN_VALUE) {\n+        result = 0.0;\n+    } else if (x == 0.0) {\n+        result = 0.0;\n+    } else if (x >= a + 1.0) {\n+        double igf = incompleteGammaFraction(a, x);\n+        result = 1.0 - igf;\n+    } else {\n+        double f = series(a, x);\n+        result = f / gamma;\n+    }\n+    return result;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}