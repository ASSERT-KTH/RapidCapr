{
    "patch": "      // Don't traverse functions with the @this or @nocompile annotations\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.hasThisType() ||\n           jsDoc.isNoCompile())) {\n        return false;\n      }\n\n      int pType = parent.getType();\n      if (pType == Token.CLASS) {\n        // Don't traverse methods with the @nocompile and @this annotations\n        if (jsDoc != null &&\n            (jsDoc.isConstructor() ||\n            jsDoc.isNoCompile() ||\n            jsDoc.hasThisType())) {\n          return false;\n        }\n      } else if (pType == Token.OBJECTLIT) {\n        // Don't traverse methods in object literals with the @nocompile and @this annotations\n        if (jsDoc != null &&\n            (jsDoc.isConstructor() ||\n            jsDoc.isNoCompile() ||\n            jsDoc.hasThisType())) {\n          return false;\n        }\n\n        Node gp = parent.getParent();\n        if (gp != null) {\n          int gpType = gp.getType();\n          if (gpType == Token.ASSIGN &&\n              NodeUtil.isGet(gp.getFirstChild()) &&\n              NodeUtil.isName(gp.getFirstChild().getFirstFirstChild(), \"Window\")) {\n            // Don't traverse methods in object literals assigned to 'Window'\n            return false;\n          } else if (gpType == Token.FUNCTION) {\n            // Don't traverse methods in object literals unless the object\n            // literal would normally be able to have a @this annotation associated with it.\n            if (!NodeUtil.isObjectLitKey(parent) &&\n                (gp.getParent().isAssign() ||\n                 gp.getParent().isObjectLit())) {\n              return false;\n            }\n          }\n        }\n      }\n    } else if (n.getType() == Token.GETPROP && parent.getType() == Token.ASSIGN) {\n      // Don't traverse a property assignment to 'Function.prototype' or 'Object.prototype'\n      Node target = n.getFirstChild();\n      Node prop = target.getNext();\n      if ((target.matchesQualifiedName(\"Function.prototype\") ||\n           target.matchesQualifiedName(\"Object.prototype\")) &&\n          prop.getType() == Token.STRING) {\n        String propName = prop.getString();\n        if (\"call\".equals(propName) ||\n            \"apply\".equals(propName) ||\n            \"__iterator__\".equals(propName)) {\n          return false;\n        }\n      }\n\n      // Don't traverse a property of an object assignment to the 'Window' property\n      Node lhs = parent.getFirstChild();\n      if (NodeUtil.isGet(lhs) &&\n          NodeUtil.isName(lhs.getFirstChild(), \"Window\")) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..5a5fb4ad 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,71 +79,70 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      // Don't traverse functions with the @this or @nocompile annotations\n+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n       if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+          (jsDoc.hasThisType() ||\n+           jsDoc.isNoCompile())) {\n         return false;\n       }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n       int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions that are getting lent to a prototype.\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+      if (pType == Token.CLASS) {\n+        // Don't traverse methods with the @nocompile and @this annotations\n+        if (jsDoc != null &&\n+            (jsDoc.isConstructor() ||\n+            jsDoc.isNoCompile() ||\n+            jsDoc.hasThisType())) {\n+          return false;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n+      } else if (pType == Token.OBJECTLIT) {\n+        // Don't traverse methods in object literals with the @nocompile and @this annotations\n+        if (jsDoc != null &&\n+            (jsDoc.isConstructor() ||\n+            jsDoc.isNoCompile() ||\n+            jsDoc.hasThisType())) {\n+          return false;\n+        }\n+\n+        Node gp = parent.getParent();\n+        if (gp != null) {\n+          int gpType = gp.getType();\n+          if (gpType == Token.ASSIGN &&\n+              NodeUtil.isGet(gp.getFirstChild()) &&\n+              NodeUtil.isName(gp.getFirstChild().getFirstFirstChild(), \"Window\")) {\n+            // Don't traverse methods in object literals assigned to 'Window'\n             return false;\n+          } else if (gpType == Token.FUNCTION) {\n+            // Don't traverse methods in object literals unless the object\n+            // literal would normally be able to have a @this annotation associated with it.\n+            if (!NodeUtil.isObjectLitKey(parent) &&\n+                (gp.getParent().isAssign() ||\n+                 gp.getParent().isObjectLit())) {\n+              return false;\n+            }\n           }\n         }\n       }\n-    }\n+    } else if (n.getType() == Token.GETPROP && parent.getType() == Token.ASSIGN) {\n+      // Don't traverse a property assignment to 'Function.prototype' or 'Object.prototype'\n+      Node target = n.getFirstChild();\n+      Node prop = target.getNext();\n+      if ((target.matchesQualifiedName(\"Function.prototype\") ||\n+           target.matchesQualifiedName(\"Object.prototype\")) &&\n+          prop.getType() == Token.STRING) {\n+        String propName = prop.getString();\n+        if (\"call\".equals(propName) ||\n+            \"apply\".equals(propName) ||\n+            \"__iterator__\".equals(propName)) {\n+          return false;\n+        }\n+      }\n \n-    return true;\n-  }\n+      // Don't traverse a property of an object assignment to the 'Window' property\n+      Node lhs = parent.getFirstChild();\n+      if (NodeUtil.isGet(lhs) &&\n+          NodeUtil.isName(lhs.getFirstChild(), \"Window\")) {\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}