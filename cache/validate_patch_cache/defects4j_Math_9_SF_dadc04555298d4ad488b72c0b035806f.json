{
    "patch": "public Line revert() {\n        final Vector3D zero = Vector3D.ZERO;\n        final Vector3D revertedDirection = direction.negate();\n        final double epsilon = 1e-9;\n        if (direction.getNormSq() < epsilon) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM_FOR_REVERTING_DIRECTION);\n        }\n        return new Line(zero, revertedDirection);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..c2e5bc6e5 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,9 +83,14 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n+public Line revert() {\n+        final Vector3D zero = Vector3D.ZERO;\n+        final Vector3D revertedDirection = direction.negate();\n+        final double epsilon = 1e-9;\n+        if (direction.getNormSq() < epsilon) {\n+            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM_FOR_REVERTING_DIRECTION);\n+        }\n+        return new Line(zero, revertedDirection);\n     }\n \n     /** Get the normalized direction vector.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}