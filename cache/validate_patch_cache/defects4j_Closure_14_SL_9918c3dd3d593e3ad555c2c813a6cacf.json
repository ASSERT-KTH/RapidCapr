{
    "patch": "if (cfa != null){\n  while (finallyNode != null && finallyNode != node) {\n    fromNode = computeFallThrough(finallyNode);\n    finallyNode = cfa.getDeferredFinallyBlock(finallyNode);\n    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n  }\n  return computeFollowNode(node, node, cfa);\n} else {\n  while (finallyNode.getNext() == null) {\n    finallyNode = finallyNode.getParent();\n    if (finallyNode == null || finallyNode == node.getParent()) {\n      return computeFollowNode(node, node, null);\n    }        \n  }\n  return finallyNode.getNext();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..656dde2e 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,22 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null){\n+  while (finallyNode != null && finallyNode != node) {\n+    fromNode = computeFallThrough(finallyNode);\n+    finallyNode = cfa.getDeferredFinallyBlock(finallyNode);\n+    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+  }\n+  return computeFollowNode(node, node, cfa);\n+} else {\n+  while (finallyNode.getNext() == null) {\n+    finallyNode = finallyNode.getParent();\n+    if (finallyNode == null || finallyNode == node.getParent()) {\n+      return computeFollowNode(node, node, null);\n+    }        \n+  }\n+  return finallyNode.getNext();\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}