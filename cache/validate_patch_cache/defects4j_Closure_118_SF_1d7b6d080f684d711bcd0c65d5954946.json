{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (child.isObjectLit()) {\n          handleObjectLit(t, child);\n          continue;\n        }\n        if (child.isString()) {\n          String name = child.getString();\n          T type = typeSystem.getType(getScope(), n, name);\n          Property prop = getProperty(name);\n\n          if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n            // TODO(user): It doesn't look like the user can do much in this case right now.\n            if (propertiesToErrorFor.containsKey(name)) {\n              t.report(JSError.make(\n                propertiesToErrorFor.get(name),\n                child,\n                Warnings.INVALIDATION,\n                name,\n                (type == null ? \"null\" : type.toString()),\n                n.toString()));\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..04a3db51 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -488,25 +488,27 @@ class DisambiguateProperties<T> implements CompilerPass {\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        if (child.isObjectLit()) {\n+          handleObjectLit(t, child);\n+          continue;\n+        }\n+        if (child.isString()) {\n+          String name = child.getString();\n+          T type = typeSystem.getType(getScope(), n, name);\n+          Property prop = getProperty(name);\n+\n+          if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+            // TODO(user): It doesn't look like the user can do much in this case right now.\n+            if (propertiesToErrorFor.containsKey(name)) {\n+              t.report(JSError.make(\n+                propertiesToErrorFor.get(name),\n+                child,\n+                Warnings.INVALIDATION,\n+                name,\n+                (type == null ? \"null\" : type.toString()),\n+                n.toString()));\n+            }\n           }\n         }\n       }",
    "result_reason": "error: no suitable method found for make(CheckLevel,Node,DiagnosticType,String,String,String)",
    "test_result": "ERROR"
}