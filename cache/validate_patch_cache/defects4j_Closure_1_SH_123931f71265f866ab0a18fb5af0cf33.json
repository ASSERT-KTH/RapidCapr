{
    "patch": "    Set<String> referencedNames = findReferencedNames(fnScope);\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        if (lastArg.isDefaultValue()) {\n          Node defaultValue = lastArg.getLastChild();\n          if (defaultValue != null) {\n            if (!NodeUtil.mayHaveSideEffects(defaultValue)\n                && !(NodeUtil.isLiteralValue(defaultValue)\n                    && referencedNames.contains(\n                        defaultValue.getLiteralValue()))) {\n              argList.removeChild(lastArg);\n              compiler.reportCodeChange();\n            } else {\n              break;\n            }\n          } else {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n          }\n        } else {\n          Var var = fnScope.getVar(lastArg.getString());\n          if (!referencedNames.contains(var.name)) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n          } else {\n            break;\n          }\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referencedNames);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ca6b2bc3 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,50 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Set<String> referencedNames = findReferencedNames(fnScope);\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        if (lastArg.isDefaultValue()) {\n+          Node defaultValue = lastArg.getLastChild();\n+          if (defaultValue != null) {\n+            if (!NodeUtil.mayHaveSideEffects(defaultValue)\n+                && !(NodeUtil.isLiteralValue(defaultValue)\n+                    && referencedNames.contains(\n+                        defaultValue.getLiteralValue()))) {\n+              argList.removeChild(lastArg);\n+              compiler.reportCodeChange();\n+            } else {\n+              break;\n+            }\n+          } else {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+          }\n+        } else {\n+          Var var = fnScope.getVar(lastArg.getString());\n+          if (!referencedNames.contains(var.name)) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+          } else {\n+            break;\n+          }\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referencedNames);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}