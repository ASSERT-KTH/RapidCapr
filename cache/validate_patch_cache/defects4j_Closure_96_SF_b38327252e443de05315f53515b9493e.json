{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n                                FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean varArgs = functionType.getMaxArguments() == Integer.MAX_VALUE;\n    while (parameters.hasNext()) {\n        parameter = parameters.next();\n        if (arguments.hasNext()) {\n            argument = arguments.next();\n            ordinal++;\n            validator.expectArgumentMatchesParameter(t, argument,\n                    getJSType(argument), getJSType(parameter), call, ordinal);\n        } else {\n            if (ordinal >= functionType.getMinArguments() && varArgs) {\n                // We have consumed all the parameters, but we still have arguments left, which means that they belong to the varargs.\n                while (arguments.hasNext()) {\n                    argument = arguments.next();\n                    ordinal++;\n                    validator.expectArgumentMatchesParameter(t, argument,\n                            getJSType(argument), getJSType(parameter), call, ordinal);\n                }\n                return;\n            } else {\n                // Not enough arguments.\n                reportArgumentsMismatch(call, functionType, ordinal, varArgs);\n                return;\n            }\n        }\n    }\n    // If there are more arguments than parameters, and the function doesn't have varargs, it's an error.\n    if (!varArgs && arguments.hasNext()) {\n        reportArgumentsMismatch(call, functionType, ordinal, varArgs);\n        return;\n    }\n    // Otherwise, it's correct.\n    if (ordinal < functionType.getMinArguments() ||\n            (ordinal > functionType.getMaxArguments() && !varArgs)) {\n        reportArgumentsMismatch(call, functionType, ordinal, varArgs);\n    }\n}\n\nprivate void reportArgumentsMismatch(Node call, FunctionType functionType,\n                                      int numArgsProvided, boolean varArgs) {\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (varArgs) {\n        report(call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgsProvided), String.valueOf(minArgs),\n                maxArgs != Integer.MAX_VALUE ? \" and (optionally) an arbitrary number of arguments\" : \"\");\n    } else {\n        report(call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgsProvided), minArgs == maxArgs ? String.valueOf(minArgs) :\n                        (minArgs + \" to \" + maxArgs + \" arguments\"),\n                \"\");\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..c07f370c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,8 +1396,8 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call,\n+                                FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n@@ -1405,29 +1405,58 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    boolean varArgs = functionType.getMaxArguments() == Integer.MAX_VALUE;\n+    while (parameters.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+        if (arguments.hasNext()) {\n+            argument = arguments.next();\n+            ordinal++;\n+            validator.expectArgumentMatchesParameter(t, argument,\n+                    getJSType(argument), getJSType(parameter), call, ordinal);\n+        } else {\n+            if (ordinal >= functionType.getMinArguments() && varArgs) {\n+                // We have consumed all the parameters, but we still have arguments left, which means that they belong to the varargs.\n+                while (arguments.hasNext()) {\n+                    argument = arguments.next();\n+                    ordinal++;\n+                    validator.expectArgumentMatchesParameter(t, argument,\n+                            getJSType(argument), getJSType(parameter), call, ordinal);\n+                }\n+                return;\n+            } else {\n+                // Not enough arguments.\n+                reportArgumentsMismatch(call, functionType, ordinal, varArgs);\n+                return;\n+            }\n+        }\n+    }\n+    // If there are more arguments than parameters, and the function doesn't have varargs, it's an error.\n+    if (!varArgs && arguments.hasNext()) {\n+        reportArgumentsMismatch(call, functionType, ordinal, varArgs);\n+        return;\n     }\n+    // Otherwise, it's correct.\n+    if (ordinal < functionType.getMinArguments() ||\n+            (ordinal > functionType.getMaxArguments() && !varArgs)) {\n+        reportArgumentsMismatch(call, functionType, ordinal, varArgs);\n+    }\n+}\n \n-    int numArgs = call.getChildCount() - 1;\n+private void reportArgumentsMismatch(Node call, FunctionType functionType,\n+                                      int numArgsProvided, boolean varArgs) {\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (varArgs) {\n+        report(call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgsProvided), String.valueOf(minArgs),\n+                maxArgs != Integer.MAX_VALUE ? \" and (optionally) an arbitrary number of arguments\" : \"\");\n+    } else {\n+        report(call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgsProvided), minArgs == maxArgs ? String.valueOf(minArgs) :\n+                        (minArgs + \" to \" + maxArgs + \" arguments\"),\n+                \"\");\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: method report in class TypeCheck cannot be applied to given types;",
    "test_result": "ERROR"
}