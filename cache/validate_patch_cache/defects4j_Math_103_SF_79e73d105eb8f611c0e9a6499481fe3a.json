{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    double dev = (x - mean) / standardDeviation;\n    double ret;\n    if (Double.isInfinite(dev)) {\n        ret = (dev < 0.0) ? 0.0 : 1.0;\n    } else {\n        double lowDev = dev - 10.0;\n        double highDev = dev + 10.0;\n        ret = (dev > 0.0) ? 1.0 - Erf.erf(lowDev / Math.sqrt(2.0)) :\n                            Erf.erf(highDev / Math.sqrt(2.0));\n        ret *= 0.5;\n        double midDev = (lowDev + highDev) / 2.0;\n        ret += 0.5 * Erf.erf(midDev / Math.sqrt(2.0));\n    }\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..0e9e204e6 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,22 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    double dev = (x - mean) / standardDeviation;\n+    double ret;\n+    if (Double.isInfinite(dev)) {\n+        ret = (dev < 0.0) ? 0.0 : 1.0;\n+    } else {\n+        double lowDev = dev - 10.0;\n+        double highDev = dev + 10.0;\n+        ret = (dev > 0.0) ? 1.0 - Erf.erf(lowDev / Math.sqrt(2.0)) :\n+                            Erf.erf(highDev / Math.sqrt(2.0));\n+        ret *= 0.5;\n+        double midDev = (lowDev + highDev) / 2.0;\n+        ret += 0.5 * Erf.erf(midDev / Math.sqrt(2.0));\n     }\n+    return ret;\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}