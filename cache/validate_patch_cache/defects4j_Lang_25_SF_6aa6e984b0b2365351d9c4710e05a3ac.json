{
    "patch": "public static String unescape(String string) {\n    int i = 0;\n    int j = 0;\n    while (i < string.length()) {\n        char c = string.charAt(i);\n        if (c == '\\\\' && i + 1 < string.length()) {\n            char c1 = string.charAt(i + 1);\n            if (c1 == 'n') {\n                c = '\\n';\n                i += 2;\n            } else if (c1 == 't') {\n                c = '\\t';\n                i += 2;\n            } else if (c1 == 'r') {\n                c = '\\r';\n                i += 2;\n            } else if (c1 == 'b') {\n                c = '\\b';\n                i += 2;\n            } else if (c1 == 'f') {\n                c = '\\f';\n                i += 2;\n            } else if (c1 == '\\\"') {\n                c = '\\\"';\n                i += 2;\n            } else if (c1 == '\\'') {\n                c = '\\'';\n                i += 2;\n            } else if (c1 == '\\\\') {\n                c = '\\\\';\n                i += 2;\n            } else if (c1 >= '0' && c1 <= '7') {\n                int k = c1 - '0';\n                for (int l = 1; l < 3 && i + 1 + l < string.length(); l++) {\n                    char c3 = string.charAt(i + 1 + l);\n                    if (c3 < '0' || c3 > '7') {\n                        break;\n                    }\n                    k = k * 8 + c3 - '0';\n                }\n                c = (char) k;\n                i += 1 + Integer.toString(k, 8).length();\n            } else if (c1 == 'u' && i + 5 < string.length()) {\n                char c2 = 0;\n                for (int k1 = 0; k1 < 4; k1++) {\n                    char c3 = string.charAt(i + 2 + k1);\n                    int i1 = c3 >= '0' && c3 <= '9' ? c3 - '0'\n                            : c3 >= 'A' && c3 <= 'F' ? c3 - 'A' + 10 : c3 >= 'a' && c3 <= 'f' ? c3 - 'a' + 10 : -1;\n                    if (i1 < 0) {\n                        break;\n                    }\n                    c2 = (char) (c2 * 16 + i1);\n                }\n                if (c2 > 0) {\n                    c = c2;\n                    i += 6;\n                }\n            }\n        }\n        if (j != i) {\n            string = string.substring(0, j) + c + string.substring(i);\n            i = j + 1;\n        } else {\n            i++;\n        }\n        j++;\n    }\n    return string.length() != j ? string.substring(0, j) : string;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..1edeaf7c 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,75 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String string) {\n+    int i = 0;\n+    int j = 0;\n+    while (i < string.length()) {\n+        char c = string.charAt(i);\n+        if (c == '\\\\' && i + 1 < string.length()) {\n+            char c1 = string.charAt(i + 1);\n+            if (c1 == 'n') {\n+                c = '\\n';\n+                i += 2;\n+            } else if (c1 == 't') {\n+                c = '\\t';\n+                i += 2;\n+            } else if (c1 == 'r') {\n+                c = '\\r';\n+                i += 2;\n+            } else if (c1 == 'b') {\n+                c = '\\b';\n+                i += 2;\n+            } else if (c1 == 'f') {\n+                c = '\\f';\n+                i += 2;\n+            } else if (c1 == '\\\"') {\n+                c = '\\\"';\n+                i += 2;\n+            } else if (c1 == '\\'') {\n+                c = '\\'';\n+                i += 2;\n+            } else if (c1 == '\\\\') {\n+                c = '\\\\';\n+                i += 2;\n+            } else if (c1 >= '0' && c1 <= '7') {\n+                int k = c1 - '0';\n+                for (int l = 1; l < 3 && i + 1 + l < string.length(); l++) {\n+                    char c3 = string.charAt(i + 1 + l);\n+                    if (c3 < '0' || c3 > '7') {\n+                        break;\n+                    }\n+                    k = k * 8 + c3 - '0';\n+                }\n+                c = (char) k;\n+                i += 1 + Integer.toString(k, 8).length();\n+            } else if (c1 == 'u' && i + 5 < string.length()) {\n+                char c2 = 0;\n+                for (int k1 = 0; k1 < 4; k1++) {\n+                    char c3 = string.charAt(i + 2 + k1);\n+                    int i1 = c3 >= '0' && c3 <= '9' ? c3 - '0'\n+                            : c3 >= 'A' && c3 <= 'F' ? c3 - 'A' + 10 : c3 >= 'a' && c3 <= 'f' ? c3 - 'a' + 10 : -1;\n+                    if (i1 < 0) {\n+                        break;\n+                    }\n+                    c2 = (char) (c2 * 16 + i1);\n+                }\n+                if (c2 > 0) {\n+                    c = c2;\n+                    i += 6;\n+                }\n+            }\n+        }\n+        if (j != i) {\n+            string = string.substring(0, j) + c + string.substring(i);\n+            i = j + 1;\n+        } else {\n+            i++;\n+        }\n+        j++;\n+    }\n+    return string.length() != j ? string.substring(0, j) : string;\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}