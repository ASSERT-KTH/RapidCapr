{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    // Retrieve the function object\n    Node function = fnScope.getRootNode();\n\n    // Check that this is a function\n    Preconditions.checkState(function.isFunction());\n\n    // Check if this function is a getter or a setter. Parameters of a getter or a setter can not be removed.\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      return;\n    }\n\n    // Retrieve the arguments list of the function\n    Node argList = getFunctionArgList(function);\n    LinkedHashSet<Var> referenced = getReferencedArgs(fnScope, argList);\n\n    // When we're modifying callers, we don't know if a parameter is used or not.\n    // So we need to optimize the calls first before stripping them.\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n      return; // The arguments can not be stripped now, since we don't know if they're used.\n    }\n\n    // Strip unreferenced args off the end of the function declaration.\n    stripUnusedArgs(fnScope, argList, referenced);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..feae5a95 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -377,32 +377,31 @@ class RemoveUnusedVars\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n \n+    // Retrieve the function object\n     Node function = fnScope.getRootNode();\n \n+    // Check that this is a function\n     Preconditions.checkState(function.isFunction());\n+\n+    // Check if this function is a getter or a setter. Parameters of a getter or a setter can not be removed.\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n       return;\n     }\n \n+    // Retrieve the arguments list of the function\n     Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n-      }\n-    } else {\n+    LinkedHashSet<Var> referenced = getReferencedArgs(fnScope, argList);\n+\n+    // When we're modifying callers, we don't know if a parameter is used or not.\n+    // So we need to optimize the calls first before stripping them.\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (modifyCallers) {\n       callSiteOptimizer.optimize(fnScope, referenced);\n+      return; // The arguments can not be stripped now, since we don't know if they're used.\n     }\n+\n+    // Strip unreferenced args off the end of the function declaration.\n+    stripUnusedArgs(fnScope, argList, referenced);\n   }\n \n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}