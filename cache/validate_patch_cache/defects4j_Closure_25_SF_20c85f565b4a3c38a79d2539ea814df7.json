{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        boolean isConstructor = false;\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          isConstructor = true;\n        } else if (constructorType.isFunctionType()) {\n          ObjectType objectType = constructorType.toObjectType();\n          if (objectType.getConstructor() != null) {\n            type = objectType.getConstructor().getInstanceType();\n            isConstructor = true;\n          }\n        }\n        if (!isConstructor) {\n          type = constructorType;\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..e1b00817 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1033,7 +1033,6 @@ class TypeInference\n   }\n \n   private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n@@ -1043,15 +1042,20 @@ class TypeInference\n       if (constructorType.isUnknownType()) {\n         type = getNativeType(UNKNOWN_TYPE);\n       } else {\n+        boolean isConstructor = false;\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n+          isConstructor = true;\n+        } else if (constructorType.isFunctionType()) {\n+          ObjectType objectType = constructorType.toObjectType();\n+          if (objectType.getConstructor() != null) {\n+            type = objectType.getConstructor().getInstanceType();\n+            isConstructor = true;\n+          }\n+        }\n+        if (!isConstructor) {\n+          type = constructorType;\n         }\n       }\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[foo: (number|undefined)]}> but was:<{[]}>",
    "test_result": "FAIL"
}