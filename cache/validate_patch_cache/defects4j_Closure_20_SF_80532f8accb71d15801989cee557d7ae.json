{
    "patch": "private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget != null && callTarget.isName() &&\n            callTarget.getString().equals(\"String\")) {\n        // Fold String(a) to '' + (a) on immutable literals,\n        // which allows further optimizations\n        //\n        // We can't do this in the general case, because String(a) has\n        // slightly different semantics than '' + (a). See\n        // http://code.google.com/p/closure-compiler/issues/detail?id=759\n        Node value = callTarget.getNext();\n        if (value != null && isImmutable(value)) {\n            String valueStr = value.getString();\n            if (valueStr != null) {\n                Node addition = IR.add(\n                        IR.string(\"\").srcref(callTarget),\n                        value.detachFromParent().srcref(value));\n                n.getParent().replaceChild(n, addition);\n                reportCodeChange();\n                return addition;\n            }\n        }\n    }\n    return n;\n}\n\nprivate boolean isImmutable(Node node) {\n    switch (node.getToken()) {\n        case NULL:\n        case TRUE:\n        case FALSE:\n            return true;\n        case NUMBER:\n            return !node.isUnmappableNumber();\n        case STRING:\n            return true;\n        default:\n            return false;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..d929d098 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -205,29 +205,47 @@ class PeepholeSubstituteAlternateSyntax\n     }\n   }\n \n-  private Node tryFoldSimpleFunctionCall(Node n) {\n+private Node tryFoldSimpleFunctionCall(Node n) {\n     Preconditions.checkState(n.isCall());\n     Node callTarget = n.getFirstChild();\n     if (callTarget != null && callTarget.isName() &&\n-          callTarget.getString().equals(\"String\")) {\n-      // Fold String(a) to '' + (a) on immutable literals,\n-      // which allows further optimizations\n-      //\n-      // We can't do this in the general case, because String(a) has\n-      // slightly different semantics than '' + (a). See\n-      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n-      Node value = callTarget.getNext();\n-      if (value != null) {\n-        Node addition = IR.add(\n-            IR.string(\"\").srcref(callTarget),\n-            value.detachFromParent());\n-        n.getParent().replaceChild(n, addition);\n-        reportCodeChange();\n-        return addition;\n-      }\n+            callTarget.getString().equals(\"String\")) {\n+        // Fold String(a) to '' + (a) on immutable literals,\n+        // which allows further optimizations\n+        //\n+        // We can't do this in the general case, because String(a) has\n+        // slightly different semantics than '' + (a). See\n+        // http://code.google.com/p/closure-compiler/issues/detail?id=759\n+        Node value = callTarget.getNext();\n+        if (value != null && isImmutable(value)) {\n+            String valueStr = value.getString();\n+            if (valueStr != null) {\n+                Node addition = IR.add(\n+                        IR.string(\"\").srcref(callTarget),\n+                        value.detachFromParent().srcref(value));\n+                n.getParent().replaceChild(n, addition);\n+                reportCodeChange();\n+                return addition;\n+            }\n+        }\n     }\n     return n;\n-  }\n+}\n+\n+private boolean isImmutable(Node node) {\n+    switch (node.getToken()) {\n+        case NULL:\n+        case TRUE:\n+        case FALSE:\n+            return true;\n+        case NUMBER:\n+            return !node.isUnmappableNumber();\n+        case STRING:\n+            return true;\n+        default:\n+            return false;\n+    }\n+}\n \n   private Node tryFoldImmediateCallToBoundFunction(Node n) {\n     // Rewriting \"(fn.bind(a,b))()\" to \"fn.call(a,b)\" makes it inlinable",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}