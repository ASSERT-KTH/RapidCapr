{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n\n  if (left.getType() == Token.ARRAYLIT) {\n    if (left.getFirstChild() == null) {\n      if (parent.getType() != Token.ASSIGN) {\n        Node undefined = NodeUtil.newUndefinedNode(n);\n        n.getParent().replaceChild(n, undefined);\n        reportCodeChange();\n        return undefined;\n      }\n      return n;\n    } else {\n      int intIndex = NodeUtil.getNumberValue(right).intValue();\n      if (!NodeUtil.arrayHasIndex(left, intIndex)) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      } else {\n        Node elem = NodeUtil.getArrayElement(left, intIndex);\n        if (elem.getType() == Token.EMPTY) {\n          elem = NodeUtil.newUndefinedNode(elem);\n          parent.replaceChild(n, elem);\n          reportCodeChange();\n          return elem;\n        } else {\n          n.getParent().replaceChild(n, elem);\n          reportCodeChange();\n          return elem;\n        }\n      }\n    }\n  }\n\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..9488d59c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,41 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  Node parent = n.getParent();\n+\n+  if (left.getType() == Token.ARRAYLIT) {\n+    if (left.getFirstChild() == null) {\n+      if (parent.getType() != Token.ASSIGN) {\n+        Node undefined = NodeUtil.newUndefinedNode(n);\n+        n.getParent().replaceChild(n, undefined);\n+        reportCodeChange();\n+        return undefined;\n+      }\n+      return n;\n+    } else {\n+      int intIndex = NodeUtil.getNumberValue(right).intValue();\n+      if (!NodeUtil.arrayHasIndex(left, intIndex)) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      } else {\n+        Node elem = NodeUtil.getArrayElement(left, intIndex);\n+        if (elem.getType() == Token.EMPTY) {\n+          elem = NodeUtil.newUndefinedNode(elem);\n+          parent.replaceChild(n, elem);\n+          reportCodeChange();\n+          return elem;\n+        } else {\n+          n.getParent().replaceChild(n, elem);\n+          reportCodeChange();\n+          return elem;\n+        }\n+      }\n+    }\n+  }\n+\n+  return n;\n+}\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}