{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = selectChronology(instant.getChronology());\n    DateTimeZone zone = chrono.getZone();\n    long instantMillis = instant.getMillis() + zone.getOffset(instant.getMillis());\n    int pivotYear = iPivotYear != null ? iPivotYear.intValue() : chrono.year().get(instantMillis);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(instantMillis, chrono, iLocale, pivotYear);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    long newInstantMillis = bucket.computeMillis(true, text);  \n    Integer offsetInteger = bucket.getOffsetInteger();\n    if (offsetInteger != null) {\n        zone = DateTimeZone.forOffsetMillis(offsetInteger);\n    } else if (bucket.getZone() != null) {\n        zone = bucket.getZone();\n    }\n    long resolvedInstantMillis = zone.convertUTCToLocal(newInstantMillis + zone.getOffset(newInstantMillis), false);\n    if (chrono != bucket.getChronology()) {\n        resolvedInstantMillis = chrono.getDateTimeMillis(\n                chrono.year().get(resolvedInstantMillis),\n                chrono.monthOfYear().get(resolvedInstantMillis),\n                chrono.dayOfMonth().get(resolvedInstantMillis),\n                chrono.millisOfDay().get(resolvedInstantMillis));\n    }\n\n    instant.setMillis(resolvedInstantMillis);\n    instant.setChronology(chrono);\n    instant.setZone(zone);\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..2d5cd06f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,41 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n-    }\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = selectChronology(instant.getChronology());\n+    DateTimeZone zone = chrono.getZone();\n+    long instantMillis = instant.getMillis() + zone.getOffset(instant.getMillis());\n+    int pivotYear = iPivotYear != null ? iPivotYear.intValue() : chrono.year().get(instantMillis);\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(instantMillis, chrono, iLocale, pivotYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    long newInstantMillis = bucket.computeMillis(true, text);  \n+    Integer offsetInteger = bucket.getOffsetInteger();\n+    if (offsetInteger != null) {\n+        zone = DateTimeZone.forOffsetMillis(offsetInteger);\n+    } else if (bucket.getZone() != null) {\n+        zone = bucket.getZone();\n+    }\n+    long resolvedInstantMillis = zone.convertUTCToLocal(newInstantMillis + zone.getOffset(newInstantMillis), false);\n+    if (chrono != bucket.getChronology()) {\n+        resolvedInstantMillis = chrono.getDateTimeMillis(\n+                chrono.year().get(resolvedInstantMillis),\n+                chrono.monthOfYear().get(resolvedInstantMillis),\n+                chrono.dayOfMonth().get(resolvedInstantMillis),\n+                chrono.millisOfDay().get(resolvedInstantMillis));\n+    }\n+\n+    instant.setMillis(resolvedInstantMillis);\n+    instant.setChronology(chrono);\n+    instant.setZone(zone);\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: method convertUTCToLocal in class DateTimeZone cannot be applied to given types;",
    "test_result": "ERROR"
}