{
    "patch": "case REGULA_FALSI:\n    // Detect early that algorithm is stuck, instead of waiting\n    // for the maximum number of iterations to be exceeded.\n    if (Double.isInfinite(x) || Double.isNaN(x)) {\n        throw new ConvergenceException(LocalizedFormats.SIMPLE_MESSAGE, \"Function values at endpoints do not have different signs.\");\n    } else if (FastMath.abs(x - x1) < FastMath.min(rtol * FastMath.abs(x1), atol)) {\n        if (FastMath.abs(f1) <= FastMath.abs(fx)) {\n            // last iteration did not reduce the interval\n            if (null == previousResult) {\n                previousResult = fx;\n            } else {\n                if (FastMath.abs(fx) >= FastMath.abs(previousResult)) {\n                    throw new ConvergenceException(LocalizedFormats.NO_CONVERGENCE_RELATIVE, x, x0, x1, fx,\n                            previousResult);\n                }\n                previousResult = fx;\n            }\n        }\n    }\n    break;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..eab7510aa 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,26 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+case REGULA_FALSI:\n+    // Detect early that algorithm is stuck, instead of waiting\n+    // for the maximum number of iterations to be exceeded.\n+    if (Double.isInfinite(x) || Double.isNaN(x)) {\n+        throw new ConvergenceException(LocalizedFormats.SIMPLE_MESSAGE, \"Function values at endpoints do not have different signs.\");\n+    } else if (FastMath.abs(x - x1) < FastMath.min(rtol * FastMath.abs(x1), atol)) {\n+        if (FastMath.abs(f1) <= FastMath.abs(fx)) {\n+            // last iteration did not reduce the interval\n+            if (null == previousResult) {\n+                previousResult = fx;\n+            } else {\n+                if (FastMath.abs(fx) >= FastMath.abs(previousResult)) {\n+                    throw new ConvergenceException(LocalizedFormats.NO_CONVERGENCE_RELATIVE, x, x0, x1, fx,\n+                            previousResult);\n+                }\n+                previousResult = fx;\n+            }\n+        }\n+    }\n+    break;\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}