{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null && !NodeUtil.isImmutableValue(right)) {\n      return n;\n    }\n\n    Node objectNode = callTarget.getFirstChild();\n    if (objectNode == null || objectNode.getType() != Token.ARRAYLIT) {\n      return n;\n    }\n\n    Node methodName = objectNode.getNext();\n    if (methodName == null || !methodName.isString()) {\n      return n;\n    }\n    String methodNameStr = methodName.getString();\n    if (!\"join\".equals(methodNameStr)) {\n      return n;\n    }\n\n    String separator = \",\";\n    if (right != null) {\n      separator = NodeUtil.getStringValue(right);\n    }\n\n    Node arrNode = n.getFirstFirstChild();\n    if (arrNode == null) {\n      // empty literal\n      Node strNode = Node.newString(\"\");\n      n.getParent().replaceChild(n, strNode);\n      reportCodeChange();\n      return strNode;\n    }\n\n    int inlineSizeSum = 0;\n    int childCount = 0;\n    for (Node c = arrNode; c != null; c = c.getNext()) {\n      if (!c.isString()) {\n        return n;\n      }\n      inlineSizeSum += c.getString().length();\n      childCount++;\n    }\n\n    if (childCount == 0) {\n      Node strNode = Node.newString(\"\");\n      n.getParent().replaceChild(n, strNode);\n      reportCodeChange();\n      return strNode;\n    }\n\n    int overheadSize = childCount - 1;\n    if (inlineSizeSum + overheadSize <= NodeUtil.estimateInlineSize(n)) {\n      char[] internalBuf = new char[inlineSizeSum + overheadSize];\n      int pos = 0;\n      for (Node c = arrNode; c != null; c = c.getNext()) {\n        if (pos != 0) {\n          internalBuf[pos++] = separator.charAt(0);\n        }\n        String s = c.getString();\n        s.getChars(0, s.length(), internalBuf, pos);\n        pos += s.length();\n      }\n      Node replacement = Node.newString(new String(internalBuf), n.getLineno(), n.getCharno());\n      n.getParent().replaceChild(n, replacement);\n      reportCodeChange();\n      return replacement;\n    }\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..7de0aa47 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,114 +364,79 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n+private Node tryFoldArrayJoin(Node n) {\n     Node callTarget = n.getFirstChild();\n-\n     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n       return n;\n     }\n \n     Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n+    if (right != null && !NodeUtil.isImmutableValue(right)) {\n+      return n;\n     }\n \n-    Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+    Node objectNode = callTarget.getFirstChild();\n+    if (objectNode == null || objectNode.getType() != Token.ARRAYLIT) {\n+      return n;\n+    }\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+    Node methodName = objectNode.getNext();\n+    if (methodName == null || !methodName.isString()) {\n+      return n;\n+    }\n+    String methodNameStr = methodName.getString();\n+    if (!\"join\".equals(methodNameStr)) {\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    String separator = \",\";\n+    if (right != null) {\n+      separator = NodeUtil.getStringValue(right);\n+    }\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+    Node arrNode = n.getFirstFirstChild();\n+    if (arrNode == null) {\n+      // empty literal\n+      Node strNode = Node.newString(\"\");\n+      n.getParent().replaceChild(n, strNode);\n+      reportCodeChange();\n+      return strNode;\n+    }\n+\n+    int inlineSizeSum = 0;\n+    int childCount = 0;\n+    for (Node c = arrNode; c != null; c = c.getNext()) {\n+      if (!c.isString()) {\n+        return n;\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n+      inlineSizeSum += c.getString().length();\n+      childCount++;\n     }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+    if (childCount == 0) {\n+      Node strNode = Node.newString(\"\");\n+      n.getParent().replaceChild(n, strNode);\n+      reportCodeChange();\n+      return strNode;\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n+    int overheadSize = childCount - 1;\n+    if (inlineSizeSum + overheadSize <= NodeUtil.estimateInlineSize(n)) {\n+      char[] internalBuf = new char[inlineSizeSum + overheadSize];\n+      int pos = 0;\n+      for (Node c = arrNode; c != null; c = c.getNext()) {\n+        if (pos != 0) {\n+          internalBuf[pos++] = separator.charAt(0);\n         }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+        String s = c.getString();\n+        s.getChars(0, s.length(), internalBuf, pos);\n+        pos += s.length();\n+      }\n+      Node replacement = Node.newString(new String(internalBuf), n.getLineno(), n.getCharno());\n+      n.getParent().replaceChild(n, replacement);\n+      reportCodeChange();\n+      return replacement;\n     }\n-\n     return n;\n   }\n \n@@ -642,4 +607,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}