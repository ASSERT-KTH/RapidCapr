{
    "patch": "        try {\n            // month is largest field and being added to, such as month-day\n            if (DateTimeUtils.isContiguous(partial)) {\n                long instant = 0L;\n                for (int i = 0, isize = partial.size(); i < isize; i++) {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }\n                instant = add(instant, valueToAdd);\n                return iChronology.get(partial, instant);\n            } else {\n                return super.add(partial, fieldIndex, values, valueToAdd);\n            }\n        } catch (IllegalFieldValueException e) {\n            // if we have a leap year, 2/29 is valid so we inc the month and then call\n            // ourselves to handle the year roll-over\n            if (DateTimeFieldType.monthOfYear().getField(iChronology).get(instant) == 2 && DateTimeFieldType.dayOfMonth().getField(iChronology).get(instant) == 29) {\n                int[] newValues = Arrays.copyOf(values, values.length);\n                int day = 28;\n                try {\n                    day = DateTimeFieldType.dayOfMonth().getField(iChronology).getMaximumValue(iChronology.toLocalDateTime(instant).withMonthOfYear(DateTimeFieldType.monthOfYear().getField(iChronology).get(instant) + 1).withDayOfMonth(1).toLocalDate().toDateMidnight().getMillis());\n                } catch (IllegalArgumentException ex) {\n                }\n                int year = values[DateTimeFieldType.year().getFieldIndex()];\n                newValues[fieldIndex] = 1;\n                newValues = add(partial, fieldIndex, newValues, 1);\n                day = Math.min(day, DateTimeFieldType.dayOfMonth().getField(iChronology).getMaximumValue(iChronology.toLocalDateTime(iChronology.getDateTimeMillis(year, 2, 1, 0)).withMonthOfYear(DateTimeFieldType.monthOfYear().getField(iChronology).get(instant) + 1).withDayOfMonth(1).toLocalDate().toDateMidnight().getMillis()));\n                newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = day;\n                return newValues;\n            } else {\n                throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..70dc153f 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,36 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n+        try {\n             // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            if (DateTimeUtils.isContiguous(partial)) {\n+                long instant = 0L;\n+                for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                }\n+                instant = add(instant, valueToAdd);\n+                return iChronology.get(partial, instant);\n+            } else {\n+                return super.add(partial, fieldIndex, values, valueToAdd);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+        } catch (IllegalFieldValueException e) {\n+            // if we have a leap year, 2/29 is valid so we inc the month and then call\n+            // ourselves to handle the year roll-over\n+            if (DateTimeFieldType.monthOfYear().getField(iChronology).get(instant) == 2 && DateTimeFieldType.dayOfMonth().getField(iChronology).get(instant) == 29) {\n+                int[] newValues = Arrays.copyOf(values, values.length);\n+                int day = 28;\n+                try {\n+                    day = DateTimeFieldType.dayOfMonth().getField(iChronology).getMaximumValue(iChronology.toLocalDateTime(instant).withMonthOfYear(DateTimeFieldType.monthOfYear().getField(iChronology).get(instant) + 1).withDayOfMonth(1).toLocalDate().toDateMidnight().getMillis());\n+                } catch (IllegalArgumentException ex) {\n+                }\n+                int year = values[DateTimeFieldType.year().getFieldIndex()];\n+                newValues[fieldIndex] = 1;\n+                newValues = add(partial, fieldIndex, newValues, 1);\n+                day = Math.min(day, DateTimeFieldType.dayOfMonth().getField(iChronology).getMaximumValue(iChronology.toLocalDateTime(iChronology.getDateTimeMillis(year, 2, 1, 0)).withMonthOfYear(DateTimeFieldType.monthOfYear().getField(iChronology).get(instant) + 1).withDayOfMonth(1).toLocalDate().toDateMidnight().getMillis()));\n+                newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = day;\n+                return newValues;\n+            } else {\n+                throw e;\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}