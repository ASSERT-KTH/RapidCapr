{
    "patch": "public static boolean containsAny(final CharSequence sequence, final char[] searchCharacters) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n        return false;\n    }\n    final int length = sequence.length();\n    final int searchLength = searchCharacters.length;\n\n    if (searchLength == 1) {\n        final char searchChar = searchCharacters[0];\n        for (int i = 0; i < length; i++) {\n            if (sequence.charAt(i) == searchChar) {\n                return true;\n            }\n        }\n    } else if (searchLength == 2 && Character.isSurrogatePair(searchCharacters[0], searchCharacters[1])) {\n        final int ch = Character.toCodePoint(searchCharacters[0], searchCharacters[1]);\n        for (int i = 0; i < length; i++) {\n            final int codepoint = Character.codePointAt(sequence, i);\n            if (codepoint == ch) {\n                return true;\n            }\n            i += Character.charCount(codepoint) - 1;\n        }\n    } else {\n        final Set<Integer> set = new HashSet<Integer>(searchLength);\n        for (final char ch : searchCharacters) {\n            set.add(Integer.valueOf(ch));\n        }\n        final int[] codePoints = toCodePoints(sequence);\n        final int codePointLength = codePoints.length;\n        for (int i = 0; i < codePointLength; i++) {\n            if (set.contains(Integer.valueOf(codePoints[i]))) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate static int[] toCodePoints(final CharSequence sequence) {\n    if (isEmpty(sequence)) {\n        return ArrayUtils.EMPTY_INT_ARRAY;\n    }\n    final String str = sequence.toString();\n    final int[] result = str.codePoints().toArray();\n    if (result == null) {\n        return ArrayUtils.EMPTY_INT_ARRAY;\n    }\n    return result;\n}\n\npublic static boolean isEmpty(CharSequence cs) {\n    return cs == null || cs.length() == 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..59b7abb2 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,60 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence sequence, final char[] searchCharacters) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n+        return false;\n+    }\n+    final int length = sequence.length();\n+    final int searchLength = searchCharacters.length;\n+\n+    if (searchLength == 1) {\n+        final char searchChar = searchCharacters[0];\n+        for (int i = 0; i < length; i++) {\n+            if (sequence.charAt(i) == searchChar) {\n+                return true;\n+            }\n+        }\n+    } else if (searchLength == 2 && Character.isSurrogatePair(searchCharacters[0], searchCharacters[1])) {\n+        final int ch = Character.toCodePoint(searchCharacters[0], searchCharacters[1]);\n+        for (int i = 0; i < length; i++) {\n+            final int codepoint = Character.codePointAt(sequence, i);\n+            if (codepoint == ch) {\n+                return true;\n+            }\n+            i += Character.charCount(codepoint) - 1;\n+        }\n+    } else {\n+        final Set<Integer> set = new HashSet<Integer>(searchLength);\n+        for (final char ch : searchCharacters) {\n+            set.add(Integer.valueOf(ch));\n+        }\n+        final int[] codePoints = toCodePoints(sequence);\n+        final int codePointLength = codePoints.length;\n+        for (int i = 0; i < codePointLength; i++) {\n+            if (set.contains(Integer.valueOf(codePoints[i]))) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static int[] toCodePoints(final CharSequence sequence) {\n+    if (isEmpty(sequence)) {\n+        return ArrayUtils.EMPTY_INT_ARRAY;\n+    }\n+    final String str = sequence.toString();\n+    final int[] result = str.codePoints().toArray();\n+    if (result == null) {\n+        return ArrayUtils.EMPTY_INT_ARRAY;\n+    }\n+    return result;\n+}\n+\n+public static boolean isEmpty(CharSequence cs) {\n+    return cs == null || cs.length() == 0;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}