{
    "patch": "public static String getprop(String name) {\n    Process process = null;\n    InputStreamReader reader = null;\n    BufferedReader bufferedReader = null;\n\n    try {\n        process = Runtime.getRuntime().exec(\"getprop \" + name);\n        reader = new InputStreamReader(process.getInputStream());\n        bufferedReader = new BufferedReader(reader);\n        return bufferedReader.readLine();\n    } catch (Exception e) {\n        return null;\n    } finally {\n        if (bufferedReader != null) {\n            try {\n                bufferedReader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (reader != null) {\n            try {\n                reader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (process != null) {\n            process.destroy();\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..c00865a2 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,38 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String name) {\n+    Process process = null;\n+    InputStreamReader reader = null;\n+    BufferedReader bufferedReader = null;\n+\n+    try {\n+        process = Runtime.getRuntime().exec(\"getprop \" + name);\n+        reader = new InputStreamReader(process.getInputStream());\n+        bufferedReader = new BufferedReader(reader);\n+        return bufferedReader.readLine();\n+    } catch (Exception e) {\n+        return null;\n+    } finally {\n+        if (bufferedReader != null) {\n+            try {\n+                bufferedReader.close();\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        if (reader != null) {\n+            try {\n+                reader.close();\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        if (process != null) {\n+            process.destroy();\n+        }\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}