{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal); // get the initial offset of the given local time\n    final long instantAdjusted = instantLocal - initialOffset; // adjust the local time using the initial offset\n    final int secondOffset = getOffset(instantAdjusted); // get the offset of the adjusted time\n    if (initialOffset == secondOffset) { // if we have a direct transition, we're done\n        return initialOffset;\n    }\n    final boolean gap = (secondOffset > initialOffset); // check if we're in a gap or overlap\n    long transition = gap ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted); // get the relevant transition time\n    final int transitionOffset = getOffset(transition); // get the offset at the transition time\n    if (initialOffset < transitionOffset && instantLocal == transition - initialOffset) { // special case handling for gaps\n        return transitionOffset;\n    }\n    if (initialOffset >= transitionOffset && instantLocal == transition - secondOffset) { // special case handling for overlaps\n        return transitionOffset;\n    }\n    if (withinGapOrOverlap(instantLocal, initialOffset, transition, gap, transitionOffset)) { // if we're within the gap/overlap, adjust the transition time\n        transition = gap ? nextTransition(instantAdjusted + MILLIS_PER_HOUR) : previousTransition(instantAdjusted - MILLIS_PER_HOUR);\n    }\n    return getOffset(transition);\n}\n\nprivate boolean withinGapOrOverlap(long instantLocal, int initialOffset, long transition, boolean gap, int transitionOffset) {\n    if (gap) { // Handle gap\n        return instantLocal >= (transition - initialOffset) && instantLocal < (transition - transitionOffset);\n    } else { // Handle overlap\n        return instantLocal >= transition - transitionOffset && instantLocal < (transition - initialOffset);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..736e3bd6 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,35 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal); // get the initial offset of the given local time\n+    final long instantAdjusted = instantLocal - initialOffset; // adjust the local time using the initial offset\n+    final int secondOffset = getOffset(instantAdjusted); // get the offset of the adjusted time\n+    if (initialOffset == secondOffset) { // if we have a direct transition, we're done\n+        return initialOffset;\n     }\n+    final boolean gap = (secondOffset > initialOffset); // check if we're in a gap or overlap\n+    long transition = gap ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted); // get the relevant transition time\n+    final int transitionOffset = getOffset(transition); // get the offset at the transition time\n+    if (initialOffset < transitionOffset && instantLocal == transition - initialOffset) { // special case handling for gaps\n+        return transitionOffset;\n+    }\n+    if (initialOffset >= transitionOffset && instantLocal == transition - secondOffset) { // special case handling for overlaps\n+        return transitionOffset;\n+    }\n+    if (withinGapOrOverlap(instantLocal, initialOffset, transition, gap, transitionOffset)) { // if we're within the gap/overlap, adjust the transition time\n+        transition = gap ? nextTransition(instantAdjusted + MILLIS_PER_HOUR) : previousTransition(instantAdjusted - MILLIS_PER_HOUR);\n+    }\n+    return getOffset(transition);\n+}\n+\n+private boolean withinGapOrOverlap(long instantLocal, int initialOffset, long transition, boolean gap, int transitionOffset) {\n+    if (gap) { // Handle gap\n+        return instantLocal >= (transition - initialOffset) && instantLocal < (transition - transitionOffset);\n+    } else { // Handle overlap\n+        return instantLocal >= transition - transitionOffset && instantLocal < (transition - initialOffset);\n+    }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}