{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long prevAdjusted = previousTransition(instantAdjusted);\n    if (prevAdjusted == instantAdjusted) {\n        // there is no previous transition, so we don't know what the\n        // offset was before the gap, so we return the later offset\n        return offsetAdjusted;\n    }\n    int offsetPrev = getOffset(prevAdjusted);\n    if (offsetPrev == offsetLocal) {\n        // gap is within current second, revert to original offset\n        return offsetLocal;\n    }\n    // find next gap after the current instant\n    long nextAdjusted = nextTransition(instantAdjusted);\n    if (nextAdjusted == instantAdjusted) {\n        // there is no next transition, so we don't know what the\n        // offset will be after the overlap, so we return the earlier\n        return offsetLocal;\n    }\n    // find next overlap after the next gap\n    long nextUnchanged = nextTransition(nextAdjusted);\n    if ((nextUnchanged - instantAdjusted) < (nextAdjusted - instantAdjusted)) {\n        // the instant is closer to the next overlap than to the next gap,\n        // so we can use the offset unchanged\n        return offsetAdjusted;\n    }\n    return offsetLocal;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..347cbb87 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,34 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long prevAdjusted = previousTransition(instantAdjusted);\n+    if (prevAdjusted == instantAdjusted) {\n+        // there is no previous transition, so we don't know what the\n+        // offset was before the gap, so we return the later offset\n+        return offsetAdjusted;\n+    }\n+    int offsetPrev = getOffset(prevAdjusted);\n+    if (offsetPrev == offsetLocal) {\n+        // gap is within current second, revert to original offset\n+        return offsetLocal;\n+    }\n+    // find next gap after the current instant\n+    long nextAdjusted = nextTransition(instantAdjusted);\n+    if (nextAdjusted == instantAdjusted) {\n+        // there is no next transition, so we don't know what the\n+        // offset will be after the overlap, so we return the earlier\n+        return offsetLocal;\n+    }\n+    // find next overlap after the next gap\n+    long nextUnchanged = nextTransition(nextAdjusted);\n+    if ((nextUnchanged - instantAdjusted) < (nextAdjusted - instantAdjusted)) {\n+        // the instant is closer to the next overlap than to the next gap,\n+        // so we can use the offset unchanged\n+        return offsetAdjusted;\n+    }\n+    return offsetLocal;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}