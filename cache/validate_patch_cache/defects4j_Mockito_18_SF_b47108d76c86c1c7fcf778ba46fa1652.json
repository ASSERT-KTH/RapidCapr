{
    "patch": " public class MyClass {\n     private String myString;\n     \n     public void setString(String s) {\n         myString = s;\n     }\n     \n     public String getString() {\n         return myString;\n     }\n     \n     public static void main(String[] args) {\n         MyClass mc = new MyClass();\n         mc.setString(\"Hello World\");\n         System.out.println(mc.getString());\n     }\n }",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..77aa26fff 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,23 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+ public class MyClass {\n+     private String myString;\n+     \n+     public void setString(String s) {\n+         myString = s;\n+     }\n+     \n+     public String getString() {\n+         return myString;\n+     }\n+     \n+     public static void main(String[] args) {\n+         MyClass mc = new MyClass();\n+         mc.setString(\"Hello World\");\n+         System.out.println(mc.getString());\n+     }\n+ }\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}