{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix d = dec.getD();\n    final RealMatrix v = dec.getV();\n    final int n = m.getRowDimension();\n    double[] eigenvalues = d.getColumn(0);\n    \n    // Apply a tolerance for small eigenvalues\n    final double tolerance = 1e-10;\n    for (int i = 0; i < n; i++) {\n        if (eigenvalues[i] < tolerance) {\n            eigenvalues[i] = 0.0;\n        } else {\n            eigenvalues[i] = Math.sqrt(eigenvalues[i]);\n        }\n    }\n\n    final RealMatrix sqrtM = v.multiply(MatrixUtils.createRealDiagonalMatrix(eigenvalues)).multiply(v.transpose());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..3e88e2125 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix d = dec.getD();\n+    final RealMatrix v = dec.getV();\n+    final int n = m.getRowDimension();\n+    double[] eigenvalues = d.getColumn(0);\n+    \n+    // Apply a tolerance for small eigenvalues\n+    final double tolerance = 1e-10;\n+    for (int i = 0; i < n; i++) {\n+        if (eigenvalues[i] < tolerance) {\n+            eigenvalues[i] = 0.0;\n+        } else {\n+            eigenvalues[i] = Math.sqrt(eigenvalues[i]);\n+        }\n     }\n+\n+    final RealMatrix sqrtM = v.multiply(MatrixUtils.createRealDiagonalMatrix(eigenvalues)).multiply(v.transpose());\n+    return sqrtM;\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.6357215104109237> but was:<1.9452074317534194>",
    "test_result": "FAIL"
}