{
    "patch": "private void readTypeVariables() {\n    for (Type bound : typeVariable.getBounds()) {\n        registerTypeVariablesOn(bound);\n    }\n\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument instanceof TypeVariable) {\n        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n        if (actualTypeVariable.getGenericDeclaration() == typeVariable.getGenericDeclaration()) {\n            // This is the case where typeVariable and actualTypeArgument are both type variables\n            // defined in the same generic declaration\n            readTypeVariables((TypeVariable<?>) actualTypeArgument);\n        } else {\n            // This is the case where actualTypeArgument is a type variable defined in a different\n            // generic declaration. We register its bounds and recursively process its actual type\n            // argument if it is also a type variable.\n            for (Type bound : actualTypeVariable.getBounds()) {\n                registerTypeVariablesOn(bound);\n            }\n            if (actualTypeVariable.getGenericDeclaration() instanceof Class) {\n                Class<?> actualTypeDeclaringClass = (Class<?>) actualTypeVariable.getGenericDeclaration();\n                TypeVariable<?>[] typeParams = actualTypeDeclaringClass.getTypeParameters();\n                int index = Arrays.asList(typeParams).indexOf(actualTypeVariable);\n                if (index >= 0 && getClass().getGenericSuperclass() instanceof ParameterizedType) {\n                    Type actualTypeArg = ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[index];\n                    if (actualTypeArg instanceof TypeVariable) {\n                        readTypeVariables((TypeVariable<?>) actualTypeArg);\n                    } else {\n                        registerTypeVariablesOn(actualTypeArg);\n                    }\n                }\n            }\n        }\n    } else if (actualTypeArgument != null) {\n        // This is the case where actualTypeArgument is a concrete type (not a type variable).\n        // We just register it on the TypeVariableRegistry.\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..f574f6856 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,46 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type bound : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(bound);\n+    }\n+\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument instanceof TypeVariable) {\n+        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n+        if (actualTypeVariable.getGenericDeclaration() == typeVariable.getGenericDeclaration()) {\n+            // This is the case where typeVariable and actualTypeArgument are both type variables\n+            // defined in the same generic declaration\n+            readTypeVariables((TypeVariable<?>) actualTypeArgument);\n+        } else {\n+            // This is the case where actualTypeArgument is a type variable defined in a different\n+            // generic declaration. We register its bounds and recursively process its actual type\n+            // argument if it is also a type variable.\n+            for (Type bound : actualTypeVariable.getBounds()) {\n+                registerTypeVariablesOn(bound);\n+            }\n+            if (actualTypeVariable.getGenericDeclaration() instanceof Class) {\n+                Class<?> actualTypeDeclaringClass = (Class<?>) actualTypeVariable.getGenericDeclaration();\n+                TypeVariable<?>[] typeParams = actualTypeDeclaringClass.getTypeParameters();\n+                int index = Arrays.asList(typeParams).indexOf(actualTypeVariable);\n+                if (index >= 0 && getClass().getGenericSuperclass() instanceof ParameterizedType) {\n+                    Type actualTypeArg = ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[index];\n+                    if (actualTypeArg instanceof TypeVariable) {\n+                        readTypeVariables((TypeVariable<?>) actualTypeArg);\n+                    } else {\n+                        registerTypeVariablesOn(actualTypeArg);\n+                    }\n+                }\n+            }\n+        }\n+    } else if (actualTypeArgument != null) {\n+        // This is the case where actualTypeArgument is a concrete type (not a type variable).\n+        // We just register it on the TypeVariableRegistry.\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: method readTypeVariables in class TypeVariableReturnType cannot be applied to given types;",
    "test_result": "ERROR"
}