{
    "patch": "public double getTypedPercent(String json) {\n    double count = 0.0;\n    double total = 0.0;\n    JsonObject jsonObject = JsonParser.parseString(json).getAsJsonObject();\n    JsonArray jsonArray = jsonObject.getAsJsonArray(\"statistics\");\n    for (JsonElement j : jsonArray) {\n        JsonObject jo = j.getAsJsonObject();\n        String type = jo.get(\"type\").getAsString();\n        if (type.equalsIgnoreCase(\"typing\")) {\n            count += jo.get(\"count\").getAsDouble();\n            total += jo.get(\"total\").getAsDouble();\n        }\n    }\n    return (count / total) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..718a400b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json) {\n+    double count = 0.0;\n+    double total = 0.0;\n+    JsonObject jsonObject = JsonParser.parseString(json).getAsJsonObject();\n+    JsonArray jsonArray = jsonObject.getAsJsonArray(\"statistics\");\n+    for (JsonElement j : jsonArray) {\n+        JsonObject jo = j.getAsJsonObject();\n+        String type = jo.get(\"type\").getAsString();\n+        if (type.equalsIgnoreCase(\"typing\")) {\n+            count += jo.get(\"count\").getAsDouble();\n+            total += jo.get(\"total\").getAsDouble();\n+        }\n+    }\n+    return (count / total) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}