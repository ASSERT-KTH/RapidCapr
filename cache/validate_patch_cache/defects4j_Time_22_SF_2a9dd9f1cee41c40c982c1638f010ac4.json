{
    "patch": "        super();\n        iPeriodType = PeriodType.standard();\n        iValues = new int[8];\n        int value;\n        long remainder = duration;\n        value = (int) (remainder / JodaConstants.MILLIS_PER_YEAR);\n        if (value != 0) {\n            remainder -= ((long) value) * JodaConstants.MILLIS_PER_YEAR;\n            iValues[0] = value;\n        }\n        value = (int) (remainder / JodaConstants.MILLIS_PER_MONTH);\n        if (value != 0) {\n            remainder -= ((long) value) * JodaConstants.MILLIS_PER_MONTH;\n            iValues[1] = value;\n        }\n        value = (int) (remainder / JodaConstants.MILLIS_PER_WEEK);\n        if (value != 0) {\n            remainder -= ((long) value) * JodaConstants.MILLIS_PER_WEEK;\n            iValues[2] = value;\n        }\n        value = (int) (remainder / JodaConstants.MILLIS_PER_DAY);\n        if (value != 0) {\n            remainder -= ((long) value) * JodaConstants.MILLIS_PER_DAY;\n            iValues[3] = value;\n        }\n        value = (int) (remainder / JodaConstants.MILLIS_PER_HOUR);\n        if (value != 0) {\n            remainder -= ((long) value) * JodaConstants.MILLIS_PER_HOUR;\n            iValues[4] = value;\n        }\n        value = (int) (remainder / JodaConstants.MILLIS_PER_MINUTE);\n        if (value != 0) {\n            remainder -= ((long) value) * JodaConstants.MILLIS_PER_MINUTE;\n            iValues[5] = value;\n        }\n        value = (int) (remainder / JodaConstants.MILLIS_PER_SECOND);\n        if (value != 0) {\n            remainder -= ((long) value) * JodaConstants.MILLIS_PER_SECOND;\n            iValues[6] = value;\n        }\n        if (remainder >= 1000) {\n            iValues[7] = (int) remainder;\n        } else if (remainder > 0) {\n            if (iValues[6] == 0 && iValues[5] > 0) {\n                iValues[5]--;\n                iValues[6] = (int) (remainder + JodaConstants.MILLIS_PER_SECOND);\n            } else if (iValues[5] == 0 && iValues[4] > 0) {\n                iValues[4]--;\n                iValues[5] = (int) (remainder + JodaConstants.MILLIS_PER_MINUTE);\n            } else if (iValues[4] == 0 && iValues[3] > 0) {\n                iValues[3]--;\n                iValues[4] = (int) (remainder + JodaConstants.MILLIS_PER_HOUR);\n            } else if (iValues[3] == 0 && iValues[2] > 0) {\n                iValues[2]--;\n                iValues[3] = (int) (remainder + JodaConstants.MILLIS_PER_DAY);\n            } else if (iValues[2] == 0 && iValues[1] > 0) {\n                iValues[1]--;\n                iValues[2] = (int) (remainder + JodaConstants.MILLIS_PER_WEEK);\n            } else if (iValues[1] == 0 && iValues[0] > 0) {\n                iValues[0]--;\n                iValues[1] = (int) (remainder + 12 * JodaConstants.MILLIS_PER_MONTH);  // Leap year adjustment happens here...\n            }\n        }\n        iDuration = duration;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..175c6ef2 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,70 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+        super();\n+        iPeriodType = PeriodType.standard();\n+        iValues = new int[8];\n+        int value;\n+        long remainder = duration;\n+        value = (int) (remainder / JodaConstants.MILLIS_PER_YEAR);\n+        if (value != 0) {\n+            remainder -= ((long) value) * JodaConstants.MILLIS_PER_YEAR;\n+            iValues[0] = value;\n+        }\n+        value = (int) (remainder / JodaConstants.MILLIS_PER_MONTH);\n+        if (value != 0) {\n+            remainder -= ((long) value) * JodaConstants.MILLIS_PER_MONTH;\n+            iValues[1] = value;\n+        }\n+        value = (int) (remainder / JodaConstants.MILLIS_PER_WEEK);\n+        if (value != 0) {\n+            remainder -= ((long) value) * JodaConstants.MILLIS_PER_WEEK;\n+            iValues[2] = value;\n+        }\n+        value = (int) (remainder / JodaConstants.MILLIS_PER_DAY);\n+        if (value != 0) {\n+            remainder -= ((long) value) * JodaConstants.MILLIS_PER_DAY;\n+            iValues[3] = value;\n+        }\n+        value = (int) (remainder / JodaConstants.MILLIS_PER_HOUR);\n+        if (value != 0) {\n+            remainder -= ((long) value) * JodaConstants.MILLIS_PER_HOUR;\n+            iValues[4] = value;\n+        }\n+        value = (int) (remainder / JodaConstants.MILLIS_PER_MINUTE);\n+        if (value != 0) {\n+            remainder -= ((long) value) * JodaConstants.MILLIS_PER_MINUTE;\n+            iValues[5] = value;\n+        }\n+        value = (int) (remainder / JodaConstants.MILLIS_PER_SECOND);\n+        if (value != 0) {\n+            remainder -= ((long) value) * JodaConstants.MILLIS_PER_SECOND;\n+            iValues[6] = value;\n+        }\n+        if (remainder >= 1000) {\n+            iValues[7] = (int) remainder;\n+        } else if (remainder > 0) {\n+            if (iValues[6] == 0 && iValues[5] > 0) {\n+                iValues[5]--;\n+                iValues[6] = (int) (remainder + JodaConstants.MILLIS_PER_SECOND);\n+            } else if (iValues[5] == 0 && iValues[4] > 0) {\n+                iValues[4]--;\n+                iValues[5] = (int) (remainder + JodaConstants.MILLIS_PER_MINUTE);\n+            } else if (iValues[4] == 0 && iValues[3] > 0) {\n+                iValues[3]--;\n+                iValues[4] = (int) (remainder + JodaConstants.MILLIS_PER_HOUR);\n+            } else if (iValues[3] == 0 && iValues[2] > 0) {\n+                iValues[2]--;\n+                iValues[3] = (int) (remainder + JodaConstants.MILLIS_PER_DAY);\n+            } else if (iValues[2] == 0 && iValues[1] > 0) {\n+                iValues[1]--;\n+                iValues[2] = (int) (remainder + JodaConstants.MILLIS_PER_WEEK);\n+            } else if (iValues[1] == 0 && iValues[0] > 0) {\n+                iValues[0]--;\n+                iValues[1] = (int) (remainder + 12 * JodaConstants.MILLIS_PER_MONTH);  // Leap year adjustment happens here...\n+            }\n+        }\n+        iDuration = duration;\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}