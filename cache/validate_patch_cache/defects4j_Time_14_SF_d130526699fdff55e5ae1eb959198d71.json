{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            int[] newValues = values.clone(); // make a copy of values to avoid modifying original array\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                newValues[i] = partial.getFieldType(i).getField(iChronology).set(newValues[i], values[i]);\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, newValues[i]);\n            }\n            instant = add(instant, valueToAdd);\n            int[] resultValues = iChronology.get(partial, instant);\n            if (resultValues.length != values.length) {\n                // year shifted across eras or something equally drastic\n                if (DateTimeUtils.isContiguous(partial)) {\n                    long resultInstant = 0L;\n                    for (int i = 0, isize = partial.size(); i < isize; i++) {\n                        resultInstant = partial.getFieldType(i).getField(iChronology).set(resultInstant, resultValues[i]);\n                    }\n                    int[] normValues = iChronology.get(partial, resultInstant);\n                    for (int i = 0; i < values.length; i++) {\n                        int delta = values[i] - newValues[i];\n                        if (delta != 0) {\n                            normValues[i] = normValues[i] + delta;\n                        }\n                    }\n                    return normValues;\n                }\n                // we could handle more cases, but for now we don't\n                throw new UnsupportedOperationException(\"Result year exceeds original range\");\n            }\n            return resultValues;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..731ade71 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,14 +206,36 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            int[] newValues = values.clone(); // make a copy of values to avoid modifying original array\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                newValues[i] = partial.getFieldType(i).getField(iChronology).set(newValues[i], values[i]);\n+                instant = partial.getFieldType(i).getField(iChronology).set(instant, newValues[i]);\n             }\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            int[] resultValues = iChronology.get(partial, instant);\n+            if (resultValues.length != values.length) {\n+                // year shifted across eras or something equally drastic\n+                if (DateTimeUtils.isContiguous(partial)) {\n+                    long resultInstant = 0L;\n+                    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                        resultInstant = partial.getFieldType(i).getField(iChronology).set(resultInstant, resultValues[i]);\n+                    }\n+                    int[] normValues = iChronology.get(partial, resultInstant);\n+                    for (int i = 0; i < values.length; i++) {\n+                        int delta = values[i] - newValues[i];\n+                        if (delta != 0) {\n+                            normValues[i] = normValues[i] + delta;\n+                        }\n+                    }\n+                    return normValues;\n+                }\n+                // we could handle more cases, but for now we don't\n+                throw new UnsupportedOperationException(\"Result year exceeds original range\");\n+            }\n+            return resultValues;\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}