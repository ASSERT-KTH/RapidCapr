{
    "patch": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n  // norms computation\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n\n  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n\n  double beta;\n  if (v2v2 < Precision.SAFE_MIN || v1v2 < Precision.SAFE_MIN) {\n    // v1 and v2 are almost collinear\n    if (u1.dotProduct(v1) < Precision.SAFE_MIN) {\n      // if u1 and v1 are almost orthogonal to v2, we have no information to continue\n      throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NO_UNIQUE_SOLUTION_FOR_ROTATION_DEFINING_QUATERNION);\n    } else {\n      // we choose orthogonal directions for v2\n      Vector3D oldV2 = v2;\n      v2 = new Vector3D(1, u1.crossProduct(v1));\n      if (u1.dotProduct(v2) < u1.dotProduct(oldV2)) {\n        v2 = new Vector3D(-1, u1.crossProduct(v1));\n      }\n    }\n  }\n\n  beta = (u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV);\n  if (Double.isNaN(beta) || Double.isInfinite(beta)) {\n    // v1 and v2 are almost collinear\n    if (u1.dotProduct(v1) < Precision.SAFE_MIN) {\n      // if u1 and v1 are almost orthogonal to v2, we have no information to continue\n      throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NO_UNIQUE_SOLUTION_FOR_ROTATION_DEFINING_QUATERNION);\n    } else {\n      // we choose orthogonal directions for v2\n      Vector3D oldV2 = v2;\n      v2 = new Vector3D(1, u1.crossProduct(v1));\n      if (u1.dotProduct(v2) < u1.dotProduct(oldV2)) {\n        v2 = new Vector3D(-1, u1.crossProduct(v1));\n      }\n      beta = 0;\n    }\n  }\n\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n\n  // preliminary computation\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n  if (c == 0) {\n    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n    // we try other vectors\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n\n    if (c == 0) {\n      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n      k = v2Su2.crossProduct(v3Su3);;\n      c = k.dotProduct(u2.crossProduct(u3));;\n\n      if (c == 0) {\n        // the (q1, q2, q3) vector is aligned with everything\n        // this is really the identity rotation\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n\n      // we will have to use u2 and v2 to compute the scalar part\n      uRef = u2;\n      vRef = v2;\n\n    }\n\n  }\n\n  Double normK = k.getNorm();\n  if (normK < Precision.SAFE_MIN) {\n    // computing (v1-u1) x (v2-u2) did not work, we try again with normalized vectors\n    u1 = u1.normalize();\n    v1 = v1.normalize();\n    u2 = u2.normalize();\n    v2 = v2.normalize();\n\n    v1Su1 = v1.subtract(u1);\n    v2Su2 = v2.subtract(u2);\n    k = v1Su1.crossProduct(v2Su2);\n    c = k.dotProduct(u3);\n\n    if (c == 0) {\n      // the (q1, q2, q3) vector is close to one of the (u1, u2, u3) planes,\n      // we try again the three angles method with (u1,u2), (u1,u3) and (u2,u3)\n      anglesMethod(u1, u2, u3, v1, v2, v3);\n      return;\n    }\n  }\n\n  // computation of the rotation\n  q0 = (float) FastMath.sqrt(0.5 * (1 + u1.dotProduct(v1) + u2.dotProduct(v2) + u3.dotProduct(vRef)));\n  double coef = 1.0 / (4.0 * q0);\n  Vector3D qVec = new Vector3D(coef, vRef.crossProduct(k));\n  q1 = (float) qVec.getX();\n  q2 = (float) qVec.getY();\n  q3 = (float) qVec.getZ();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex 20f5b3486..d38d610bf 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -310,7 +310,7 @@ public class Rotation implements Serializable {\n    * @param v2 desired image of u2 by the rotation\n    * @exception IllegalArgumentException if the norm of one of the vectors is zero\n    */\n-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n+public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n \n   // norms computation\n   double u1u1 = u1.getNormSq();\n@@ -329,7 +329,40 @@ public class Rotation implements Serializable {\n   double v1v2   = v1.dotProduct(v2);\n   double coeffU = u1u2 / u1u1;\n   double coeffV = v1v2 / u1u1;\n-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n+\n+  double beta;\n+  if (v2v2 < Precision.SAFE_MIN || v1v2 < Precision.SAFE_MIN) {\n+    // v1 and v2 are almost collinear\n+    if (u1.dotProduct(v1) < Precision.SAFE_MIN) {\n+      // if u1 and v1 are almost orthogonal to v2, we have no information to continue\n+      throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NO_UNIQUE_SOLUTION_FOR_ROTATION_DEFINING_QUATERNION);\n+    } else {\n+      // we choose orthogonal directions for v2\n+      Vector3D oldV2 = v2;\n+      v2 = new Vector3D(1, u1.crossProduct(v1));\n+      if (u1.dotProduct(v2) < u1.dotProduct(oldV2)) {\n+        v2 = new Vector3D(-1, u1.crossProduct(v1));\n+      }\n+    }\n+  }\n+\n+  beta = (u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV);\n+  if (Double.isNaN(beta) || Double.isInfinite(beta)) {\n+    // v1 and v2 are almost collinear\n+    if (u1.dotProduct(v1) < Precision.SAFE_MIN) {\n+      // if u1 and v1 are almost orthogonal to v2, we have no information to continue\n+      throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NO_UNIQUE_SOLUTION_FOR_ROTATION_DEFINING_QUATERNION);\n+    } else {\n+      // we choose orthogonal directions for v2\n+      Vector3D oldV2 = v2;\n+      v2 = new Vector3D(1, u1.crossProduct(v1));\n+      if (u1.dotProduct(v2) < u1.dotProduct(oldV2)) {\n+        v2 = new Vector3D(-1, u1.crossProduct(v1));\n+      }\n+      beta = 0;\n+    }\n+  }\n+\n   double alpha  = coeffU - beta * coeffV;\n   v2 = new Vector3D(alpha, v1, beta, v2);\n \n@@ -374,6 +407,36 @@ public class Rotation implements Serializable {\n \n   }\n \n+  Double normK = k.getNorm();\n+  if (normK < Precision.SAFE_MIN) {\n+    // computing (v1-u1) x (v2-u2) did not work, we try again with normalized vectors\n+    u1 = u1.normalize();\n+    v1 = v1.normalize();\n+    u2 = u2.normalize();\n+    v2 = v2.normalize();\n+\n+    v1Su1 = v1.subtract(u1);\n+    v2Su2 = v2.subtract(u2);\n+    k = v1Su1.crossProduct(v2Su2);\n+    c = k.dotProduct(u3);\n+\n+    if (c == 0) {\n+      // the (q1, q2, q3) vector is close to one of the (u1, u2, u3) planes,\n+      // we try again the three angles method with (u1,u2), (u1,u3) and (u2,u3)\n+      anglesMethod(u1, u2, u3, v1, v2, v3);\n+      return;\n+    }\n+  }\n+\n+  // computation of the rotation\n+  q0 = (float) FastMath.sqrt(0.5 * (1 + u1.dotProduct(v1) + u2.dotProduct(v2) + u3.dotProduct(vRef)));\n+  double coef = 1.0 / (4.0 * q0);\n+  Vector3D qVec = new Vector3D(coef, vRef.crossProduct(k));\n+  q1 = (float) qVec.getX();\n+  q2 = (float) qVec.getY();\n+  q3 = (float) qVec.getZ();\n+}\n+\n   // compute the vectorial part\n   c = FastMath.sqrt(c);\n   double inv = 1.0 / (c + c);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}