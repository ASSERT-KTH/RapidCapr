{
    "patch": "public final boolean isEmptyType() {\n    boolean result = isNoType()\n            || isNoResolvedType()\n            || isNoObjectType()\n            || isUnknownType()\n            || (isNullType() && !(isVoidType() || isArrayType() || isFunctionType()))\n            || (isVoidType() && !isNullType() && !isFunctionType())\n            || (isUnionType() && isEmptyUnionType());\n    if (result && !Thread.currentThread().getStackTrace()[2].getClassName().startsWith(\"com.google.javascript\")) {\n        System.err.println(\"Warning: isEmptyType() called with no type.\");\n    }\n    return result;\n}\n\nprivate boolean isEmptyUnionType() {\n    TypeI[] subtypes = getUnionMembers();\n    for (TypeI subtype : subtypes) {\n        if (!subtype.isEmptyType()) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 32a0b250..6f5117bb 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -159,9 +159,29 @@ public abstract class JSType implements Serializable {\n     return false;\n   }\n \n-  public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType();\n-  }\n+public final boolean isEmptyType() {\n+    boolean result = isNoType()\n+            || isNoResolvedType()\n+            || isNoObjectType()\n+            || isUnknownType()\n+            || (isNullType() && !(isVoidType() || isArrayType() || isFunctionType()))\n+            || (isVoidType() && !isNullType() && !isFunctionType())\n+            || (isUnionType() && isEmptyUnionType());\n+    if (result && !Thread.currentThread().getStackTrace()[2].getClassName().startsWith(\"com.google.javascript\")) {\n+        System.err.println(\"Warning: isEmptyType() called with no type.\");\n+    }\n+    return result;\n+}\n+\n+private boolean isEmptyUnionType() {\n+    TypeI[] subtypes = getUnionMembers();\n+    for (TypeI subtype : subtypes) {\n+        if (!subtype.isEmptyType()) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n \n   public boolean isNumberObjectType() {\n     return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}