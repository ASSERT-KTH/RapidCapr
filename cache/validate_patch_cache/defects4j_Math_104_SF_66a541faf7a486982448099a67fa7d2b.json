{
    "patch": "import org.apache.commons.math3.util.*;\n\npublic class GammaFunctions {\n\tpublic static double regularizedGammaP(double a, double x) {\n\t    if (Double.isNaN(a) || Double.isNaN(x) || Double.isInfinite(a) || Double.isInfinite(x)) {\n\t        return Double.NaN;\n\t    }\n\t    if (a <= 0.0 || x < 0.0) {\n\t        return Double.NaN;\n\t    }\n\n\t    double d = 1.0 / (a + 1e-15);\n\t    double m = d * x;\n\t    double s = 1.0 + m - d;\n\t    double tol = 1e-14;\n\t    double term = Double.MAX_VALUE;\n\t    double sum = 1.0 / s;\n\t    int i = 0;\n\t    while (Math.abs(term) > Math.abs(sum) * tol && i < 1000) {\n\t        i++;\n\t        // calculate the ith term of the series\n\t        double ex = 1.0 * i - a;\n\t        term *= m / ex;\n\t        s += term;\n\t        sum += term / (1.0 + i - a);\n\t    }\n\t    return Math.exp(-x + a * FastMath.log(x) - LogGamma.logGamma(a)) * sum;\n\t}\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..9043390fb 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,35 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.util.*;\n+\n+public class GammaFunctions {\n+\tpublic static double regularizedGammaP(double a, double x) {\n+\t    if (Double.isNaN(a) || Double.isNaN(x) || Double.isInfinite(a) || Double.isInfinite(x)) {\n+\t        return Double.NaN;\n+\t    }\n+\t    if (a <= 0.0 || x < 0.0) {\n+\t        return Double.NaN;\n+\t    }\n+\n+\t    double d = 1.0 / (a + 1e-15);\n+\t    double m = d * x;\n+\t    double s = 1.0 + m - d;\n+\t    double tol = 1e-14;\n+\t    double term = Double.MAX_VALUE;\n+\t    double sum = 1.0 / s;\n+\t    int i = 0;\n+\t    while (Math.abs(term) > Math.abs(sum) * tol && i < 1000) {\n+\t        i++;\n+\t        // calculate the ith term of the series\n+\t        double ex = 1.0 * i - a;\n+\t        term *= m / ex;\n+\t        s += term;\n+\t        sum += term / (1.0 + i - a);\n+\t    }\n+\t    return Math.exp(-x + a * FastMath.log(x) - LogGamma.logGamma(a)) * sum;\n+\t}\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}