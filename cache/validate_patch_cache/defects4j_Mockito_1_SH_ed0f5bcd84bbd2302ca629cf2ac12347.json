{
    "patch": "            Object[] varargs = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg, indexOfVararg+1);\n            for (int i = 0; i < Array.getLength(varargs); i++) {\n                Object vararg = Array.get(varargs, i);\n                for (int position = indexOfVararg; position < matchers.size(); position++) {\n                    Matcher m = matchers.get(position);\n                    if (m instanceof CapturesArguments) {\n                        ((CapturesArguments) m).captureFrom(vararg);\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..43be568ce 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,16 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object[] varargs = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg, indexOfVararg+1);\n+            for (int i = 0; i < Array.getLength(varargs); i++) {\n+                Object vararg = Array.get(varargs, i);\n+                for (int position = indexOfVararg; position < matchers.size(); position++) {\n+                    Matcher m = matchers.get(position);\n+                    if (m instanceof CapturesArguments) {\n+                        ((CapturesArguments) m).captureFrom(vararg);\n+                    }\n+                }\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}