{
    "patch": "public static Map<String, List<String>> groupByCountry(List<String> values) {\n    if (values == null) {\n        return null;\n    }\n    Map<String, List<String>> map = new HashMap<>();\n    for (String value : values) {\n        String[] parts = value.split(\",\");\n        if (parts.length != 2) {\n            continue;\n        }\n        String country = parts[1].trim();\n        String name = parts[0].trim();\n        List<String> list = map.getOrDefault(country, new ArrayList<>());\n        list.add(name);\n        map.put(country, list);\n    }\n    return map;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..4182141fb 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,24 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<String, List<String>> groupByCountry(List<String> values) {\n+    if (values == null) {\n+        return null;\n+    }\n+    Map<String, List<String>> map = new HashMap<>();\n+    for (String value : values) {\n+        String[] parts = value.split(\",\");\n+        if (parts.length != 2) {\n+            continue;\n+        }\n+        String country = parts[1].trim();\n+        String name = parts[0].trim();\n+        List<String> list = map.getOrDefault(country, new ArrayList<>());\n+        list.add(name);\n+        map.put(country, list);\n+    }\n+    return map;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}