{
    "patch": "    public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        \n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new ArrayList<>();\n\n        for (int index = start; index <= end; index++) {\n            if (index >= this.getItemCount()) {\n                break;\n            }\n            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index).clone();\n            try {\n                copy.add(item);\n                double yValue = item.getValue().doubleValue();\n                if (!Double.isNaN(yValue)) {\n                    if (Double.isNaN(copy.getMaxY())) {\n                        copy.maxY = yValue;\n                    }\n                    else {\n                        copy.maxY = Math.max(copy.getMaxY(), yValue);\n                    }\n                    if (Double.isNaN(copy.getMinY())) {\n                        copy.minY = yValue;\n                    }\n                    else {\n                        copy.minY = Math.min(copy.getMinY(), yValue);\n                    }\n                }\n            } catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n        if (copy.data.size() == 0) {  // the series is empty\n            copy.minY = Double.NaN;\n            copy.maxY = Double.NaN;\n        }\n\n        return copy;\n    }",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..fd38acf 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1045,31 +1045,50 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n      *\n      * @throws CloneNotSupportedException if there is a cloning problem.\n      */\n-    public TimeSeries createCopy(int start, int end)\n-            throws CloneNotSupportedException {\n-        if (start < 0) {\n-            throw new IllegalArgumentException(\"Requires start >= 0.\");\n-        }\n-        if (end < start) {\n-            throw new IllegalArgumentException(\"Requires start <= end.\");\n-        }\n-        TimeSeries copy = (TimeSeries) super.clone();\n-        copy.data = new java.util.ArrayList();\n-        if (this.data.size() > 0) {\n-            for (int index = start; index <= end; index++) {\n-                TimeSeriesDataItem item\n-                        = (TimeSeriesDataItem) this.data.get(index);\n-                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n-                try {\n-                    copy.add(clone);\n-                }\n-                catch (SeriesException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }\n-        return copy;\n-    }\n+    public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {\n+        if (start < 0) {\n+            throw new IllegalArgumentException(\"Requires start >= 0.\");\n+        }\n+        if (end < start) {\n+            throw new IllegalArgumentException(\"Requires start <= end.\");\n+        }\n+        \n+        TimeSeries copy = (TimeSeries) super.clone();\n+        copy.data = new ArrayList<>();\n+\n+        for (int index = start; index <= end; index++) {\n+            if (index >= this.getItemCount()) {\n+                break;\n+            }\n+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index).clone();\n+            try {\n+                copy.add(item);\n+                double yValue = item.getValue().doubleValue();\n+                if (!Double.isNaN(yValue)) {\n+                    if (Double.isNaN(copy.getMaxY())) {\n+                        copy.maxY = yValue;\n+                    }\n+                    else {\n+                        copy.maxY = Math.max(copy.getMaxY(), yValue);\n+                    }\n+                    if (Double.isNaN(copy.getMinY())) {\n+                        copy.minY = yValue;\n+                    }\n+                    else {\n+                        copy.minY = Math.min(copy.getMinY(), yValue);\n+                    }\n+                }\n+            } catch (SeriesException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        if (copy.data.size() == 0) {  // the series is empty\n+            copy.minY = Double.NaN;\n+            copy.maxY = Double.NaN;\n+        }\n+\n+        return copy;\n+    }\n \n     /**\n      * Creates a new timeseries by copying a subset of the data in this time",
    "result_reason": "error: generics are not supported in -source 1.4",
    "test_result": "ERROR"
}