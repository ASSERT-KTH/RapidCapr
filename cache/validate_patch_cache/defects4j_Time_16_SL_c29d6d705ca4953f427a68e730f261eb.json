{
    "patch": "        bucket.saveField(DateTimeFieldType.year(), 2004);\n        bucket.saveField(DateTimeFieldType.monthOfYear(), bucket.parseInt(DateTimeFieldType.monthOfYear()));\n        bucket.saveField(DateTimeFieldType.dayOfMonth(), bucket.parseInt(DateTimeFieldType.dayOfMonth()));\n        bucket.saveField(DateTimeFieldType.hourOfDay(), bucket.parseInt(DateTimeFieldType.hourOfDay()));\n        bucket.saveField(DateTimeFieldType.minuteOfHour(), bucket.parseInt(DateTimeFieldType.minuteOfHour()));\n        bucket.saveField(DateTimeFieldType.secondOfMinute(), bucket.parseInt(DateTimeFieldType.secondOfMinute()));\n        bucket.saveField(DateTimeFieldType.millisOfSecond(), bucket.parseInt(DateTimeFieldType.millisOfSecond()));\n        long millis = bucket.computeMillis(false, text);\n        instant.setMillis(millis);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..62f57527 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,15 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        bucket.saveField(DateTimeFieldType.year(), 2004);\n+        bucket.saveField(DateTimeFieldType.monthOfYear(), bucket.parseInt(DateTimeFieldType.monthOfYear()));\n+        bucket.saveField(DateTimeFieldType.dayOfMonth(), bucket.parseInt(DateTimeFieldType.dayOfMonth()));\n+        bucket.saveField(DateTimeFieldType.hourOfDay(), bucket.parseInt(DateTimeFieldType.hourOfDay()));\n+        bucket.saveField(DateTimeFieldType.minuteOfHour(), bucket.parseInt(DateTimeFieldType.minuteOfHour()));\n+        bucket.saveField(DateTimeFieldType.secondOfMinute(), bucket.parseInt(DateTimeFieldType.secondOfMinute()));\n+        bucket.saveField(DateTimeFieldType.millisOfSecond(), bucket.parseInt(DateTimeFieldType.millisOfSecond()));\n+        long millis = bucket.computeMillis(false, text);\n+        instant.setMillis(millis);\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}