{
    "patch": "    // Traverse the predecessors, checking if any have an exception handler.\n    for (CfgEdge edge : cfgNode.getInEdges()) {\n      Node pred = edge.getSource().getNode();\n      JSType predExcType = getExceptionType(pred);\n      if (predExcType != null &&\n          // Exception type is null when there is an existing control flow problem.\n          !predExcType.isEquivalentTo(getNativeType(VOID_TYPE))) {\n        return true;\n      }\n      if (hasExceptionHandler(pred)) {\n        return true;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..c6fdc6e6 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,19 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+    // Traverse the predecessors, checking if any have an exception handler.\n+    for (CfgEdge edge : cfgNode.getInEdges()) {\n+      Node pred = edge.getSource().getNode();\n+      JSType predExcType = getExceptionType(pred);\n+      if (predExcType != null &&\n+          // Exception type is null when there is an existing control flow problem.\n+          !predExcType.isEquivalentTo(getNativeType(VOID_TYPE))) {\n+        return true;\n+      }\n+      if (hasExceptionHandler(pred)) {\n+        return true;\n+      }\n+    }\n     return false;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}