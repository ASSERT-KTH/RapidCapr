{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // month is the largest field being added to, such as month-day, or if fieldIndex is monthOfYear\n    if (fieldIndex >= 0 && ((fieldIndex == 0 && partial.size() == 2) || fieldIndex == 1)) {\n        long instant = 0L;\n        boolean adjustLeapYear = false;\n        boolean invalidateDay = false;\n\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            int value = values[i];\n\n            // Only adjust the necessary field\n            if (i == fieldIndex) {\n                value = FieldUtils.safeAdd(value, valueToAdd);\n            }\n\n            // Set the value into the instant\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, value);\n\n            // Check if we need to adjust the day to the last day of the month\n            if (!invalidateDay && i == fieldIndex && \n                (value == iChronology.getMaximumValue(fieldIndex + 1) || (value == 29 && fieldIndex == 1 && iChronology.year().isLeap(instant)))) {\n                // If we hit an invalid UpperBound for the current month/year + adding months,\n                // we will use the last valid day of the current month/year as the day.\n                invalidateDay = true;\n            }\n\n            // Check if the value represents a leap year\n            if (i == 1 && iChronology.monthOfYear().isLeap(instant)) {\n                adjustLeapYear = true;\n            }\n        }\n\n        // Adjust the day of the month to the last valid day\n        if (invalidateDay) {\n            instant = iChronology.dayOfMonth().set(instant, iChronology.getMaximumValue(2));\n        }\n\n        // Adjust the day of month if we hit 29 Feb for a non-leap year\n        if (adjustLeapYear && iChronology.monthOfYear().get(instant) == 3 && iChronology.dayOfMonth().get(instant) == 1) {\n            instant = iChronology.monthOfYear().set(instant, 2);\n            instant = iChronology.dayOfMonth().set(instant, 29);\n        }\n\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..81793515 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,60 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // month is the largest field being added to, such as month-day, or if fieldIndex is monthOfYear\n+    if (fieldIndex >= 0 && ((fieldIndex == 0 && partial.size() == 2) || fieldIndex == 1)) {\n+        long instant = 0L;\n+        boolean adjustLeapYear = false;\n+        boolean invalidateDay = false;\n+\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            int value = values[i];\n+\n+            // Only adjust the necessary field\n+            if (i == fieldIndex) {\n+                value = FieldUtils.safeAdd(value, valueToAdd);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+\n+            // Set the value into the instant\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, value);\n+\n+            // Check if we need to adjust the day to the last day of the month\n+            if (!invalidateDay && i == fieldIndex && \n+                (value == iChronology.getMaximumValue(fieldIndex + 1) || (value == 29 && fieldIndex == 1 && iChronology.year().isLeap(instant)))) {\n+                // If we hit an invalid UpperBound for the current month/year + adding months,\n+                // we will use the last valid day of the current month/year as the day.\n+                invalidateDay = true;\n+            }\n+\n+            // Check if the value represents a leap year\n+            if (i == 1 && iChronology.monthOfYear().isLeap(instant)) {\n+                adjustLeapYear = true;\n+            }\n+        }\n+\n+        // Adjust the day of the month to the last valid day\n+        if (invalidateDay) {\n+            instant = iChronology.dayOfMonth().set(instant, iChronology.getMaximumValue(2));\n         }\n+\n+        // Adjust the day of month if we hit 29 Feb for a non-leap year\n+        if (adjustLeapYear && iChronology.monthOfYear().get(instant) == 3 && iChronology.dayOfMonth().get(instant) == 1) {\n+            instant = iChronology.monthOfYear().set(instant, 2);\n+            instant = iChronology.dayOfMonth().set(instant, 29);\n+        }\n+\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}