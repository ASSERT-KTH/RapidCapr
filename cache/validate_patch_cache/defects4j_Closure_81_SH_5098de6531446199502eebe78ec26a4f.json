{
    "patch": "private boolean isDirective(Node n) {\n    if (n == null) return false;\n\n    int nType = n.getType();\n    if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.STRING) {\n        String directive = n.getFirstChild().getString();\n        return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n               ALLOWED_DIRECTIVES.contains(directive);\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..cb2a4582 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,17 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+private boolean isDirective(Node n) {\n+    if (n == null) return false;\n+\n+    int nType = n.getType();\n+    if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.STRING) {\n+        String directive = n.getFirstChild().getString();\n+        return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n+               ALLOWED_DIRECTIVES.contains(directive);\n+    }\n+    return false;\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}