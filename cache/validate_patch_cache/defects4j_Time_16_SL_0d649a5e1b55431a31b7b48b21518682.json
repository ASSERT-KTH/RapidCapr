{
    "patch": "(DateTimeParser)new DateTimeFormatterBuilder().append(null, new ChronoParser(chrono))\n            .appendOptional(new DateTimeFormatterBuilder().appendLiteral('[')\n            .appendOffset(\"+HH:MM\", \"\").appendLiteral(']').toParser())\n            .appendOptional(new DateTimeFormatterBuilder().appendLiteral('[')\n            .appendZoneId().appendLiteral(']').toParser())\n            .toFormatter().withLocale(iLocale).withPivotYear(iPivotYear)\n            .parseDateTime(text).withZone(DateTimeZone.getDefault()).getMillis();",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..e0585400 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,13 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+(DateTimeParser)new DateTimeFormatterBuilder().append(null, new ChronoParser(chrono))\n+            .appendOptional(new DateTimeFormatterBuilder().appendLiteral('[')\n+            .appendOffset(\"+HH:MM\", \"\").appendLiteral(']').toParser())\n+            .appendOptional(new DateTimeFormatterBuilder().appendLiteral('[')\n+            .appendZoneId().appendLiteral(']').toParser())\n+            .toFormatter().withLocale(iLocale).withPivotYear(iPivotYear)\n+            .parseDateTime(text).withZone(DateTimeZone.getDefault()).getMillis();\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}