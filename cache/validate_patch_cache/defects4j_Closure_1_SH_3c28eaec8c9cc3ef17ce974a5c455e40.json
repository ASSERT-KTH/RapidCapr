{
    "patch": "    if (NodeUtil.isGetOrSetKey(function.getParent()) || isHookOrFunctionExpression(function)) {\n      // function arguments in a Getter or Setter are the subject of manipulation, we should skip.\n      // function arguments in function hooks and function expressions are assumed to be used\n      // so we should also skip over them.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..81950178 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,15 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    if (NodeUtil.isGetOrSetKey(function.getParent()) || isHookOrFunctionExpression(function)) {\n+      // function arguments in a Getter or Setter are the subject of manipulation, we should skip.\n+      // function arguments in function hooks and function expressions are assumed to be used\n+      // so we should also skip over them.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}