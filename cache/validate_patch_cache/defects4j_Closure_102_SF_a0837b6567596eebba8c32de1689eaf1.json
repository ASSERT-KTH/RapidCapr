{
    "patch": "private void removeDuplicateDeclarations(Node root) {\n    NodeTraversal.traverse(compiler, root, new NodeTraversal.Callback() {\n      private final Set<String> declaredNames = new HashSet<>();\n\n      public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n        return true;\n      }\n\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        switch (n.getToken()) {\n          case VAR:\n          case LET:\n          case CONST:\n            Node nameNode = n.getFirstChild();\n            String name = nameNode.getString();\n            if (declaredNames.contains(name)) {\n              parent.removeChild(n);\n              t.reportCodeChange();\n            } else {\n              declaredNames.add(name);\n              visitChildren(t, n);\n            }\n            break;\n          default:\n            visitChildren(t, n);\n            break;\n        }\n      }\n    });\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java\nindex 4aa45558..b948cf2d 100644\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n@@ -84,16 +84,35 @@ class Normalize implements CompilerPass, Callback {\n   }\n \n   @Override\n-  public void process(Node externs, Node root) {\n-    NodeTraversal.traverse(compiler, root, this);\n-    if (MAKE_LOCAL_NAMES_UNIQUE) {\n-      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n-      NodeTraversal t = new NodeTraversal(compiler, renamer);\n-      t.traverseRoots(externs, root);\n-    }\n-    removeDuplicateDeclarations(root);\n-    new PropogateConstantAnnotations(compiler, assertOnChange)\n-        .process(externs, root);\n+private void removeDuplicateDeclarations(Node root) {\n+    NodeTraversal.traverse(compiler, root, new NodeTraversal.Callback() {\n+      private final Set<String> declaredNames = new HashSet<>();\n+\n+      public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+        return true;\n+      }\n+\n+      public void visit(NodeTraversal t, Node n, Node parent) {\n+        switch (n.getToken()) {\n+          case VAR:\n+          case LET:\n+          case CONST:\n+            Node nameNode = n.getFirstChild();\n+            String name = nameNode.getString();\n+            if (declaredNames.contains(name)) {\n+              parent.removeChild(n);\n+              t.reportCodeChange();\n+            } else {\n+              declaredNames.add(name);\n+              visitChildren(t, n);\n+            }\n+            break;\n+          default:\n+            visitChildren(t, n);\n+            break;\n+        }\n+      }\n+    });\n   }\n \n   @Override",
    "result_reason": "error: method removeDuplicateDeclarations(Node) is already defined in class Normalize",
    "test_result": "ERROR"
}