{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    \n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    int[] newValues = Arrays.copyOf(values, values.length);\n\n    DateTimeField field = partial.getField(fieldIndex);\n    DateTimeFieldType type = field.getType();\n\n    switch (type) {\n        case year():\n            newValues[fieldIndex] += valueToAdd;\n            break;\n        case monthOfYear():\n            int carry = SetFieldCarry(newValues[fieldIndex], valueToAdd, 1, 12);\n            newValues[fieldIndex] += valueToAdd;\n            if (carry != 0) {\n                carry = FieldUtils.safeAdd(newValues[0], carry);\n                newValues = Arrays.copyOf(newValues, newValues.length + 1);\n                System.arraycopy(newValues, 1, newValues, 2, newValues.length - 2);\n                newValues[0] = carry;\n                newValues[1] = carry < 1 ? 1 : Math.min(carry, getMaxMonth());\n            }\n            break;\n        case dayOfMonth():\n            try {\n                newValues[fieldIndex] = field.add(newValues[fieldIndex], valueToAdd);\n            } catch (IllegalFieldValueException ex) {\n                int maxDay = field.getMaximumValue(newValues, valueToAdd);\n                if (maxDay < newValues[fieldIndex]) {\n                    newValues[fieldIndex] = maxDay;\n                    return setTitle(partial, newValues, valueToAdd, maxDay,\n                            maxDay == 1 ? \"one day\" : maxDay + \" days\");\n                }\n                throw ex;\n            }\n            break;\n        case weekyear():\n            newValues[fieldIndex] += valueToAdd;\n            break;\n        case weekOfWeekyear():\n            return addWeeks(partial, fieldIndex, values, valueToAdd);\n        case dayOfWeek():\n            return addDays(partial, fieldIndex, values, valueToAdd);\n        default:\n            throw new IllegalArgumentException(\"Unsupported field: \" + type);\n    }\n\n    return setTitle(partial, newValues, valueToAdd);\n}\n    ",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..ef2e43f8 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,62 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    \n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    int[] newValues = Arrays.copyOf(values, values.length);\n+\n+    DateTimeField field = partial.getField(fieldIndex);\n+    DateTimeFieldType type = field.getType();\n+\n+    switch (type) {\n+        case year():\n+            newValues[fieldIndex] += valueToAdd;\n+            break;\n+        case monthOfYear():\n+            int carry = SetFieldCarry(newValues[fieldIndex], valueToAdd, 1, 12);\n+            newValues[fieldIndex] += valueToAdd;\n+            if (carry != 0) {\n+                carry = FieldUtils.safeAdd(newValues[0], carry);\n+                newValues = Arrays.copyOf(newValues, newValues.length + 1);\n+                System.arraycopy(newValues, 1, newValues, 2, newValues.length - 2);\n+                newValues[0] = carry;\n+                newValues[1] = carry < 1 ? 1 : Math.min(carry, getMaxMonth());\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n+            break;\n+        case dayOfMonth():\n+            try {\n+                newValues[fieldIndex] = field.add(newValues[fieldIndex], valueToAdd);\n+            } catch (IllegalFieldValueException ex) {\n+                int maxDay = field.getMaximumValue(newValues, valueToAdd);\n+                if (maxDay < newValues[fieldIndex]) {\n+                    newValues[fieldIndex] = maxDay;\n+                    return setTitle(partial, newValues, valueToAdd, maxDay,\n+                            maxDay == 1 ? \"one day\" : maxDay + \" days\");\n+                }\n+                throw ex;\n+            }\n+            break;\n+        case weekyear():\n+            newValues[fieldIndex] += valueToAdd;\n+            break;\n+        case weekOfWeekyear():\n+            return addWeeks(partial, fieldIndex, values, valueToAdd);\n+        case dayOfWeek():\n+            return addDays(partial, fieldIndex, values, valueToAdd);\n+        default:\n+            throw new IllegalArgumentException(\"Unsupported field: \" + type);\n     }\n \n+    return setTitle(partial, newValues, valueToAdd);\n+}\n+    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}