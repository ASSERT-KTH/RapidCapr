{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // IE has a bug where event handlers behave differently when\n      // their return value is used vs. when their return value is in\n      // an EXPR_RESULT. It's pretty freaking weird. See:\n      // http://code.google.com/p/closure-compiler/issues/detail?id=291\n      // We try to detect this case, and not fold EXPR_RESULTs\n      // into other expressions.\n      if (maybeExpr.getType() == Token.IF) {\n        Node cond = maybeExpr.getFirstChild();\n        Node ifTrue = cond.getNext();\n        Node ifFalse = ifTrue.getNext();\n        if (ifTrue.getType() == Token.EMPTY) {\n          return isFoldableExpressBlock(ifFalse);\n        }\n        if (ifFalse.getType() == Token.EMPTY) {\n          return isFoldableExpressBlock(ifTrue);\n        }\n        return false;\n      }\n\n      if (!NodeUtil.mayHaveSideEffects(maybeExpr) && NodeUtil.isExpressionNode(maybeExpr)) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..923b18e1 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -517,20 +517,30 @@ public class PeepholeSubstituteAlternateSyntax\n    *     an expression.\n    */\n   private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // IE has a bug where event handlers behave differently when\n+      // their return value is used vs. when their return value is in\n+      // an EXPR_RESULT. It's pretty freaking weird. See:\n+      // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+      // We try to detect this case, and not fold EXPR_RESULTs\n+      // into other expressions.\n+      if (maybeExpr.getType() == Token.IF) {\n+        Node cond = maybeExpr.getFirstChild();\n+        Node ifTrue = cond.getNext();\n+        Node ifFalse = ifTrue.getNext();\n+        if (ifTrue.getType() == Token.EMPTY) {\n+          return isFoldableExpressBlock(ifFalse);\n+        }\n+        if (ifFalse.getType() == Token.EMPTY) {\n+          return isFoldableExpressBlock(ifTrue);\n+        }\n+        return false;\n+      }\n+\n+      if (!NodeUtil.mayHaveSideEffects(maybeExpr) && NodeUtil.isExpressionNode(maybeExpr)) {\n+        return true;\n       }\n     }\n ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}