{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    // reflect the simplex\n    final RealPointValuePair best = simplex[0];\n    final RealPointValuePair reflected = evaluateNewSimplex(simplex, 1.0, comparator);\n    if (comparator.compare(reflected, best) < 0) {\n        final RealPointValuePair extended = evaluateNewSimplex(simplex, rCoeff, comparator);\n        if (comparator.compare(reflected, extended) <= 0) {\n            // Accept reflection.\n            simplex = reflected.getPointRef();\n        } else {\n            // Accept extension.\n            simplex = extended.getPointRef();\n        }\n\n        return;\n    }\n\n    // Compute the contracted simplex.\n    RealPointValuePair contracted;\n    if (comparator.compare(reflected, simplex[n]) >= 0) {\n        // Perform an outside contraction rather than a shrink.\n        contracted = contractOutside(reflected, comparator);\n    } else {\n        // Perform a shrink.\n        contracted = contractInside(simplex[0], comparator);\n    }\n\n    // Check contraction.\n    if (comparator.compare(contracted, best) < 0) {\n        simplex = contracted.getPointRef();\n    } else {\n        simplex = shrink(comparator);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..d402e2592 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,41 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+    // reflect the simplex\n+    final RealPointValuePair best = simplex[0];\n+    final RealPointValuePair reflected = evaluateNewSimplex(simplex, 1.0, comparator);\n+    if (comparator.compare(reflected, best) < 0) {\n+        final RealPointValuePair extended = evaluateNewSimplex(simplex, rCoeff, comparator);\n+        if (comparator.compare(reflected, extended) <= 0) {\n+            // Accept reflection.\n+            simplex = reflected.getPointRef();\n+        } else {\n+            // Accept extension.\n+            simplex = extended.getPointRef();\n+        }\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n+        return;\n+    }\n \n-        }\n+    // Compute the contracted simplex.\n+    RealPointValuePair contracted;\n+    if (comparator.compare(reflected, simplex[n]) >= 0) {\n+        // Perform an outside contraction rather than a shrink.\n+        contracted = contractOutside(reflected, comparator);\n+    } else {\n+        // Perform a shrink.\n+        contracted = contractInside(simplex[0], comparator);\n+    }\n \n+    // Check contraction.\n+    if (comparator.compare(contracted, best) < 0) {\n+        simplex = contracted.getPointRef();\n+    } else {\n+        simplex = shrink(comparator);\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}