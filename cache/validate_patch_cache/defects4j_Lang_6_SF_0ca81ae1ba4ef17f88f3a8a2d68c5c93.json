{
    "patch": "public static final String unescapeJava(String input) {\n    if (input == null) {\n        return null;\n    }\n    int sz = input.length();\n    StringBuilder out = new StringBuilder(sz);\n    StringBuilder unicode = new StringBuilder(4);\n    boolean hadSlash = false;\n    boolean inUnicode = false;\n    for (int i = 0; i < sz; i++) {\n        char ch = input.charAt(i);\n        if (inUnicode) {\n            unicode.append(ch);\n            if (unicode.length() == 4) {\n                try {\n                    int value = Integer.parseInt(unicode.toString(), 16);\n                    out.append((char) value);\n                    unicode.setLength(0);\n                    inUnicode = false;\n                    hadSlash = false;\n                } catch (NumberFormatException nfe) {\n                    throw new IllegalArgumentException(\"Unable to parse unicode value: \" + unicode, nfe);\n                }\n            }\n            continue;\n        }\n        if (hadSlash) {\n            hadSlash = false;\n            switch (ch) {\n                case '\\\\':\n                    out.append('\\\\');\n                    break;\n                case '\\'':\n                    out.append('\\'');\n                    break;\n                case '\\\"':\n                    out.append('\"');\n                    break;\n                case 'r':\n                    out.append('\\r');\n                    break;\n                case 'f':\n                    out.append('\\f');\n                    break;\n                case 't':\n                    out.append('\\t');\n                    break;\n                case 'n':\n                    out.append('\\n');\n                    break;\n                case 'b':\n                    out.append('\\b');\n                    break;\n                case 'u':\n                    inUnicode = true;\n                    break;\n                default:\n                    out.append(ch);\n                    break;\n            }\n            continue;\n        } else if (ch == '\\\\') {\n            hadSlash = true;\n            continue;\n        }\n        out.append(ch);\n    }\n    if (hadSlash) {\n        out.append('\\\\');\n    }\n    return out.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..da42ff8d 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,78 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n+public static final String unescapeJava(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    int sz = input.length();\n+    StringBuilder out = new StringBuilder(sz);\n+    StringBuilder unicode = new StringBuilder(4);\n+    boolean hadSlash = false;\n+    boolean inUnicode = false;\n+    for (int i = 0; i < sz; i++) {\n+        char ch = input.charAt(i);\n+        if (inUnicode) {\n+            unicode.append(ch);\n+            if (unicode.length() == 4) {\n+                try {\n+                    int value = Integer.parseInt(unicode.toString(), 16);\n+                    out.append((char) value);\n+                    unicode.setLength(0);\n+                    inUnicode = false;\n+                    hadSlash = false;\n+                } catch (NumberFormatException nfe) {\n+                    throw new IllegalArgumentException(\"Unable to parse unicode value: \" + unicode, nfe);\n+                }\n             }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+            continue;\n+        }\n+        if (hadSlash) {\n+            hadSlash = false;\n+            switch (ch) {\n+                case '\\\\':\n+                    out.append('\\\\');\n+                    break;\n+                case '\\'':\n+                    out.append('\\'');\n+                    break;\n+                case '\\\"':\n+                    out.append('\"');\n+                    break;\n+                case 'r':\n+                    out.append('\\r');\n+                    break;\n+                case 'f':\n+                    out.append('\\f');\n+                    break;\n+                case 't':\n+                    out.append('\\t');\n+                    break;\n+                case 'n':\n+                    out.append('\\n');\n+                    break;\n+                case 'b':\n+                    out.append('\\b');\n+                    break;\n+                case 'u':\n+                    inUnicode = true;\n+                    break;\n+                default:\n+                    out.append(ch);\n+                    break;\n             }\n+            continue;\n+        } else if (ch == '\\\\') {\n+            hadSlash = true;\n+            continue;\n         }\n+        out.append(ch);\n+    }\n+    if (hadSlash) {\n+        out.append('\\\\');\n     }\n+    return out.toString();\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: no suitable method found for translate(CharSequence,StringWriter)",
    "test_result": "ERROR"
}