{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n  // Check if all references are properties of the same object literal\n  Node objectLit = null;\n  for (Reference ref : refs) {\n    Node grandparent = ref.getGrandparent();\n    if (grandparent.isAssign()) {\n      Node parent = grandparent.getParent();\n      if (parent.isExprResult()) {\n        Node assignedValue = grandparent.getLastChild();\n        if (assignedValue.isObjectLit()) {\n          if (objectLit == null) {\n            objectLit = assignedValue;\n          } else if (objectLit != assignedValue) {\n            return false;\n          }\n        }\n      }\n    }\n  }\n  \n  if (objectLit == null) {\n    return false;\n  }\n\n  // Ensure that the value is not self-referential\n  HashSet<Node> childNodes = new HashSet<>();\n  for (Node child = objectLit.getFirstChild(); child != null; child = child.getNext()) {\n    childNodes.add(child);\n  }\n\n  for (Reference ref : refs) {\n    Node assignedValue = ref.getAssignedValue();\n    if (assignedValue == null || !assignedValue.isObjectLit()) {\n      return false;\n    }\n\n    Node valParent = assignedValue.getParent();\n    if (valParent.isName()) {\n      if (assignedValue.getFirstChild() == objectLit) {\n        // The object literal is self-referential\n        return false;\n      }\n    } else if (valParent.isAssign()) {\n      Node namedChild = valParent.getFirstChild();\n      if (!(namedChild.isName() && namedChild.getString().equals(ref.getName()))) {\n        // The assignment is to a property that is not the current one\n        return false;\n      }\n    }\n\n    for (Node child = assignedValue.getFirstChild(); child != null; child = child.getNext()) {\n      Node childValue = child.getFirstChild();\n      if (childNodes.contains(childValue)) {\n        // Object literal has a cyclic reference\n        return false;\n      }\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..bf6f8a86 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,92 +152,67 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n+private boolean isInlinableObject(List<Reference> refs) {\n+  // Check if all references are properties of the same object literal\n+  Node objectLit = null;\n+  for (Reference ref : refs) {\n+    Node grandparent = ref.getGrandparent();\n+    if (grandparent.isAssign()) {\n+      Node parent = grandparent.getParent();\n+      if (parent.isExprResult()) {\n+        Node assignedValue = grandparent.getLastChild();\n+        if (assignedValue.isObjectLit()) {\n+          if (objectLit == null) {\n+            objectLit = assignedValue;\n+          } else if (objectLit != assignedValue) {\n             return false;\n           }\n-\n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n-        }\n-\n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n-\n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n         }\n+      }\n+    }\n+  }\n+  \n+  if (objectLit == null) {\n+    return false;\n+  }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n-        }\n-\n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n-\n+  // Ensure that the value is not self-referential\n+  HashSet<Node> childNodes = new HashSet<>();\n+  for (Node child = objectLit.getFirstChild(); child != null; child = child.getNext()) {\n+    childNodes.add(child);\n+  }\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n-          }\n-        }\n+  for (Reference ref : refs) {\n+    Node assignedValue = ref.getAssignedValue();\n+    if (assignedValue == null || !assignedValue.isObjectLit()) {\n+      return false;\n+    }\n \n+    Node valParent = assignedValue.getParent();\n+    if (valParent.isName()) {\n+      if (assignedValue.getFirstChild() == objectLit) {\n+        // The object literal is self-referential\n+        return false;\n+      }\n+    } else if (valParent.isAssign()) {\n+      Node namedChild = valParent.getFirstChild();\n+      if (!(namedChild.isName() && namedChild.getString().equals(ref.getName()))) {\n+        // The assignment is to a property that is not the current one\n+        return false;\n+      }\n+    }\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+    for (Node child = assignedValue.getFirstChild(); child != null; child = child.getNext()) {\n+      Node childValue = child.getFirstChild();\n+      if (childNodes.contains(childValue)) {\n+        // Object literal has a cyclic reference\n+        return false;\n       }\n-      return ret;\n     }\n+  }\n+\n+  return true;\n+}\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}