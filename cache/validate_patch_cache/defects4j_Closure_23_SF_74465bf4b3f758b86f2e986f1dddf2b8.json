{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  // If GETPROP/GETELEM is used as assignment target the array literal is\n  // acting as a temporary we can't fold it here:\n  //    \"[][0] += 1\"\n  if (isAssignmentTarget(n)) {\n    return n;\n  }\n\n  if (!right.isNumber()) {\n    // Sometimes people like to use complex expressions to index into\n    // arrays, or strings to index into array methods.\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex != index) {\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n\n  if (intIndex < 0) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  Node elemNode = null;\n  if (left.isArrayLit()) {\n    if (intIndex < left.getChildCount()) {\n      elemNode = left.getChildAtIndex(intIndex);\n    }\n  } else if (NodeUtil.isGetElem(left)) {\n    elemNode = left.getLastChild();\n    if (elemNode.isNumber()) {\n      double innerIndex = elemNode.getDouble();\n      int innerIntIndex = (int) innerIndex;\n      if (innerIntIndex == innerIndex && innerIntIndex >= 0) {\n        elemNode.setDouble(innerIntIndex * NodeUtil.getIntProp(elemNode, Node.INCR_DECR_PROP, 0));\n        elemNode.removeProp(Node.INCR_DECR_PROP);\n      }\n    }\n    elemNode = IR.getelem(left.getFirstChild().cloneTree(), elemNode);\n  } else if (left.isName()) {\n    elemNode = IR.getelem(left.cloneTree(), IR.number(intIndex));\n  }\n\n  if (elemNode == null) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  if (elemNode.isEmpty()) {\n    elemNode = NodeUtil.newUndefinedNode(elemNode);\n  }\n\n  NodeUtil.deleteNode(n, getCompiler());\n\n  return elemNode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..2a885230 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,58 +1419,66 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n-\n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n-\n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  // If GETPROP/GETELEM is used as assignment target the array literal is\n+  // acting as a temporary we can't fold it here:\n+  //    \"[][0] += 1\"\n+  if (isAssignmentTarget(n)) {\n+    return n;\n+  }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+  if (!right.isNumber()) {\n+    // Sometimes people like to use complex expressions to index into\n+    // arrays, or strings to index into array methods.\n+    return n;\n+  }\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n+  double index = right.getDouble();\n+  int intIndex = (int) index;\n+  if (intIndex != index) {\n+    error(INVALID_GETELEM_INDEX_ERROR, right);\n+    return n;\n+  }\n \n-      current = current.getNext();\n-    }\n+  if (intIndex < 0) {\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+  Node elemNode = null;\n+  if (left.isArrayLit()) {\n+    if (intIndex < left.getChildCount()) {\n+      elemNode = left.getChildAtIndex(intIndex);\n+    }\n+  } else if (NodeUtil.isGetElem(left)) {\n+    elemNode = left.getLastChild();\n+    if (elemNode.isNumber()) {\n+      double innerIndex = elemNode.getDouble();\n+      int innerIntIndex = (int) innerIndex;\n+      if (innerIntIndex == innerIndex && innerIntIndex >= 0) {\n+        elemNode.setDouble(innerIntIndex * NodeUtil.getIntProp(elemNode, Node.INCR_DECR_PROP, 0));\n+        elemNode.removeProp(Node.INCR_DECR_PROP);\n+      }\n     }\n+    elemNode = IR.getelem(left.getFirstChild().cloneTree(), elemNode);\n+  } else if (left.isName()) {\n+    elemNode = IR.getelem(left.cloneTree(), IR.number(intIndex));\n+  }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n-    }\n+  if (elemNode == null) {\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n+  if (elemNode.isEmpty()) {\n+    elemNode = NodeUtil.newUndefinedNode(elemNode);\n   }\n \n+  NodeUtil.deleteNode(n, getCompiler());\n+\n+  return elemNode;\n+}\n+\n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}