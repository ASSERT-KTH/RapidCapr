{
    "patch": "private static final class Mutator implements NodeTraversal.Callback {\n    private final FlowScope scope;\n    private final AbstractCompiler compiler;\n    private ScriptNodeMutator snm;\n\n    Mutator(FlowScope scope, AbstractCompiler compiler) {\n      this.scope = scope;\n      this.compiler = compiler;\n    }\n\n    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      if (n.isFunction()) {\n        snm = new ScriptNodeMutator(compiler, scope);\n        snm.mutate((FunctionNode) n);\n        return false; // No need to traverse the inside of the function\n      }\n      return true;\n    }\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {}\n\n    public static Mutator alloc() {\n      return new Mutator(null, null);\n    }\n\n    public void putObjectSlotType(ObjectType type, String slot, ObjectType toAdd) {\n      snm.putObjectSlotType(type, slot, toAdd);\n    }\n\n    public void putObjectPropertyMutated(ObjectType mutated, String property) {\n      snm.putObjectPropertyMutated(mutated, property);\n    }\n\n    public void appendChildClass(ObjectType mutated, FunctionType toAdd) {\n      snm.appendChildClass(mutated, toAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..7fe483a6 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,45 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+private static final class Mutator implements NodeTraversal.Callback {\n+    private final FlowScope scope;\n+    private final AbstractCompiler compiler;\n+    private ScriptNodeMutator snm;\n+\n+    Mutator(FlowScope scope, AbstractCompiler compiler) {\n+      this.scope = scope;\n+      this.compiler = compiler;\n+    }\n+\n+    @Override\n+    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+      if (n.isFunction()) {\n+        snm = new ScriptNodeMutator(compiler, scope);\n+        snm.mutate((FunctionNode) n);\n+        return false; // No need to traverse the inside of the function\n       }\n+      return true;\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {}\n+\n+    public static Mutator alloc() {\n+      return new Mutator(null, null);\n     }\n-    return scope;\n-  }\n+\n+    public void putObjectSlotType(ObjectType type, String slot, ObjectType toAdd) {\n+      snm.putObjectSlotType(type, slot, toAdd);\n+    }\n+\n+    public void putObjectPropertyMutated(ObjectType mutated, String property) {\n+      snm.putObjectPropertyMutated(mutated, property);\n+    }\n+\n+    public void appendChildClass(ObjectType mutated, FunctionType toAdd) {\n+      snm.appendChildClass(mutated, toAdd);\n+    }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}