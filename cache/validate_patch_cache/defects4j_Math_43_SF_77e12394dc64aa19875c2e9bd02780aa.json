{
    "patch": "public void addValue(double value) {\n    // Ignore NaN values\n    if (Double.isNaN(value)) {\n        return;\n    }\n\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    // If mean, variance or geomean have been overridden, need to\n    // increment using the correct implementations\n    if (meanImpl instanceof Mean) {\n        ((Mean) meanImpl).increment(value);\n    }\n    else if (meanImpl instanceof StorelessUnivariateStatistic) {\n        ((StorelessUnivariateStatistic) meanImpl).increment(value);\n    }\n    else {\n        int oldN = n;\n        addValueToCustomImpl(meanImpl, value);\n        if (n == oldN) {\n            // The custom implementation didn't update n, so we need to do it\n            n++;\n        }\n    }\n\n    if (varianceImpl instanceof Variance) {\n        ((Variance) varianceImpl).increment(value);\n    }\n    else if (varianceImpl instanceof StorelessUnivariateStatistic) {\n        ((StorelessUnivariateStatistic) varianceImpl).increment(value);\n    }\n    else {\n        int oldN = n;\n        addValueToCustomImpl(varianceImpl, value);\n        if (n == oldN) {\n            n++;\n        }\n    }\n\n    if (value > 0) {\n        if (geoMeanImpl instanceof GeometricMean) {\n            ((GeometricMean) geoMeanImpl).increment(value);\n            n++;\n        }\n        else if (geoMeanImpl instanceof StorelessUnivariateStatistic) {\n            ((StorelessUnivariateStatistic) geoMeanImpl).increment(value);\n            n++;\n        }\n        else {\n            addValueToCustomImpl(geoMeanImpl, value);\n            // We don't always increment n for geomean, because it can be\n            // undefined for negative values. Instead, we increment n only\n            // if geoMeanImpl actually updated its state.\n            if (geoMeanImpl.getResult() > 0) {\n                n++;\n            }\n        }\n    }\n}\n\n// Helper method to add a value to a custom implementation of UnivariateStatistic\nprivate void addValueToCustomImpl(UnivariateStatistic impl, double value) {\n    double oldResult = impl.getResult();\n    impl.increment(value);\n    if (Double.compare(impl.getResult(), oldResult) != 0) {\n        // The custom implementation updated its state, so we need to update n\n        n++;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..e1b0883a9 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,80 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n+public void addValue(double value) {\n+    // Ignore NaN values\n+    if (Double.isNaN(value)) {\n+        return;\n+    }\n+\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    // If mean, variance or geomean have been overridden, need to\n+    // increment using the correct implementations\n+    if (meanImpl instanceof Mean) {\n+        ((Mean) meanImpl).increment(value);\n+    }\n+    else if (meanImpl instanceof StorelessUnivariateStatistic) {\n+        ((StorelessUnivariateStatistic) meanImpl).increment(value);\n+    }\n+    else {\n+        int oldN = n;\n+        addValueToCustomImpl(meanImpl, value);\n+        if (n == oldN) {\n+            // The custom implementation didn't update n, so we need to do it\n+            n++;\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+    }\n+\n+    if (varianceImpl instanceof Variance) {\n+        ((Variance) varianceImpl).increment(value);\n+    }\n+    else if (varianceImpl instanceof StorelessUnivariateStatistic) {\n+        ((StorelessUnivariateStatistic) varianceImpl).increment(value);\n+    }\n+    else {\n+        int oldN = n;\n+        addValueToCustomImpl(varianceImpl, value);\n+        if (n == oldN) {\n+            n++;\n+        }\n+    }\n+\n+    if (value > 0) {\n+        if (geoMeanImpl instanceof GeometricMean) {\n+            ((GeometricMean) geoMeanImpl).increment(value);\n+            n++;\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+        else if (geoMeanImpl instanceof StorelessUnivariateStatistic) {\n+            ((StorelessUnivariateStatistic) geoMeanImpl).increment(value);\n+            n++;\n         }\n+        else {\n+            addValueToCustomImpl(geoMeanImpl, value);\n+            // We don't always increment n for geomean, because it can be\n+            // undefined for negative values. Instead, we increment n only\n+            // if geoMeanImpl actually updated its state.\n+            if (geoMeanImpl.getResult() > 0) {\n+                n++;\n+            }\n+        }\n+    }\n+}\n+\n+// Helper method to add a value to a custom implementation of UnivariateStatistic\n+private void addValueToCustomImpl(UnivariateStatistic impl, double value) {\n+    double oldResult = impl.getResult();\n+    impl.increment(value);\n+    if (Double.compare(impl.getResult(), oldResult) != 0) {\n+        // The custom implementation updated its state, so we need to update n\n         n++;\n     }\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}