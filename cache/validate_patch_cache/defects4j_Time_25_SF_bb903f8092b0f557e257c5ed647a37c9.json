{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    long instantAdjusted = instantLocal + initialOffset;\n\n    // Add one millisecond to the adjusted instant until the offset changes\n    // This indicates that we have passed the standard/DST transition\n    int offsetAdjusted = initialOffset;\n    while (true) {\n        int offset = getOffset(instantAdjusted);\n        if (offset == offsetAdjusted) {\n            // Offset did not change, try again with next millisecond\n            instantAdjusted++;\n        } else {\n            // Offset changed, we have passed the transition\n            if (offset > initialOffset && instantLocal < instantAdjusted) {\n                // We crossed a DST forward gap, so skip forward to the next equivalent time after the gap\n                instantAdjusted = skippedLocalDateTime(instantLocal + initialOffset, offset);\n            } else if (offset < initialOffset && instantLocal > instantAdjusted) {\n                // We crossed a standard time backward overlap, so skip backward to the next equivalent time before the overlap\n                instantAdjusted = overlappedLocalDateTime(instantLocal + initialOffset, offset);\n            }\n            return offset;\n        }\n    }\n}\n\n// Return the next skipped local date-time at or after the given instant, based on the given next-offset\nprivate long skippedLocalDateTime(long localInstant, int nextOffset) {\n    localInstant += nextOffset;\n    final int initialOffset = getOffset(localInstant);\n    if (initialOffset != nextOffset) {\n        // We have hit another transition\n        return skippedLocalDateTime(localInstant, initialOffset);\n    }\n    return localInstant;\n}\n\n// Return the last overlapped local date-time before the given instant, based on the given previous-offset\nprivate long overlappedLocalDateTime(long localInstant, int prevOffset) {\n    localInstant += prevOffset;\n    final int initialOffset = getOffset(localInstant);\n    final int offset = getOffset(localInstant - initialOffset);\n    if (offset != prevOffset) {\n        // We have hit another transition\n        return overlappedLocalDateTime(localInstant, offset);\n    }\n    return localInstant - initialOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3d38e308 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,54 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    long instantAdjusted = instantLocal + initialOffset;\n+\n+    // Add one millisecond to the adjusted instant until the offset changes\n+    // This indicates that we have passed the standard/DST transition\n+    int offsetAdjusted = initialOffset;\n+    while (true) {\n+        int offset = getOffset(instantAdjusted);\n+        if (offset == offsetAdjusted) {\n+            // Offset did not change, try again with next millisecond\n+            instantAdjusted++;\n+        } else {\n+            // Offset changed, we have passed the transition\n+            if (offset > initialOffset && instantLocal < instantAdjusted) {\n+                // We crossed a DST forward gap, so skip forward to the next equivalent time after the gap\n+                instantAdjusted = skippedLocalDateTime(instantLocal + initialOffset, offset);\n+            } else if (offset < initialOffset && instantLocal > instantAdjusted) {\n+                // We crossed a standard time backward overlap, so skip backward to the next equivalent time before the overlap\n+                instantAdjusted = overlappedLocalDateTime(instantLocal + initialOffset, offset);\n             }\n+            return offset;\n         }\n-        return offsetAdjusted;\n     }\n+}\n+\n+// Return the next skipped local date-time at or after the given instant, based on the given next-offset\n+private long skippedLocalDateTime(long localInstant, int nextOffset) {\n+    localInstant += nextOffset;\n+    final int initialOffset = getOffset(localInstant);\n+    if (initialOffset != nextOffset) {\n+        // We have hit another transition\n+        return skippedLocalDateTime(localInstant, initialOffset);\n+    }\n+    return localInstant;\n+}\n+\n+// Return the last overlapped local date-time before the given instant, based on the given previous-offset\n+private long overlappedLocalDateTime(long localInstant, int prevOffset) {\n+    localInstant += prevOffset;\n+    final int initialOffset = getOffset(localInstant);\n+    final int offset = getOffset(localInstant - initialOffset);\n+    if (offset != prevOffset) {\n+        // We have hit another transition\n+        return overlappedLocalDateTime(localInstant, offset);\n+    }\n+    return localInstant - initialOffset;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}