{
    "patch": "    public Fraction reduce() {\n        int gcdNum = greatestCommonDivisor(Math.abs(numerator), denominator);\n        int gcdDenom = greatestCommonDivisor(denominator, Math.abs(numerator));\n        int reducedNumerator = numerator / gcdNum;\n        int reducedDenominator = denominator / gcdDenom;\n        if (reducedDenominator < 0) {\n            reducedNumerator = -reducedNumerator;\n            reducedDenominator = -reducedDenominator;\n        }\n        return new Fraction(reducedNumerator, reducedDenominator);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..71abd4e0 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,17 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+    public Fraction reduce() {\n+        int gcdNum = greatestCommonDivisor(Math.abs(numerator), denominator);\n+        int gcdDenom = greatestCommonDivisor(denominator, Math.abs(numerator));\n+        int reducedNumerator = numerator / gcdNum;\n+        int reducedDenominator = denominator / gcdDenom;\n+        if (reducedDenominator < 0) {\n+            reducedNumerator = -reducedNumerator;\n+            reducedDenominator = -reducedDenominator;\n+        }\n+        return new Fraction(reducedNumerator, reducedDenominator);\n+    }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}