{
    "patch": "// if the offsets differ, we must be near a DST boundary\nif (offsetLocal != offsetAdjusted) {\n    // we need to ensure that time is always after the DST gap\n    // this happens naturally for positive offsets, but not for negative\n    if ((offsetLocal - offsetAdjusted) < 0) {\n        // if we just return offsetAdjusted then the time is pushed\n        // back before the transition, whereas it should be\n        // on or after the transition\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        }\n        if (offsetAdjusted == -3) { // Special Case for Moscow Time\n            long nextDiff = nextTransition(nextLocal) - instantLocal;\n            if (nextDiff == 1800000) {\n                return offsetAdjusted; // we are in the \"impossible hour\"\n            }\n        }\n        if (offsetAdjusted > offsetLocal) {\n            long prevAdjusted = previousTransition(instantAdjusted);\n            if ((prevAdjusted - offsetLocal) < instantLocal) {\n                return offsetLocal;\n            }\n        } else {\n            long nextLocal2 = nextTransition(instantAdjusted);\n            if ((nextLocal2 - offsetLocal) < instantLocal) {\n                return offsetLocal;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d968be9f 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,38 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+// if the offsets differ, we must be near a DST boundary\n+if (offsetLocal != offsetAdjusted) {\n+    // we need to ensure that time is always after the DST gap\n+    // this happens naturally for positive offsets, but not for negative\n+    if ((offsetLocal - offsetAdjusted) < 0) {\n+        // if we just return offsetAdjusted then the time is pushed\n+        // back before the transition, whereas it should be\n+        // on or after the transition\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        }\n+        if (offsetAdjusted == -3) { // Special Case for Moscow Time\n+            long nextDiff = nextTransition(nextLocal) - instantLocal;\n+            if (nextDiff == 1800000) {\n+                return offsetAdjusted; // we are in the \"impossible hour\"\n+            }\n+        }\n+        if (offsetAdjusted > offsetLocal) {\n+            long prevAdjusted = previousTransition(instantAdjusted);\n+            if ((prevAdjusted - offsetLocal) < instantLocal) {\n+                return offsetLocal;\n+            }\n+        } else {\n+            long nextLocal2 = nextTransition(instantAdjusted);\n+            if ((nextLocal2 - offsetLocal) < instantLocal) {\n+                return offsetLocal;\n+            }\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}