{
    "patch": "        Object attribute = tree.getAttribute();\n        if (attribute instanceof BoundaryAttribute\n                && ((BoundaryAttribute<?>) attribute).getPlusInside() == null) {\n            // the polygon covers the whole space\n            setSize(Double.POSITIVE_INFINITY);\n            setBarycenter(Vector2D.NaN);\n        } else if (attribute == Boolean.TRUE) {\n            // the polygon covers the outside of a finite shape\n            setSize(Double.POSITIVE_INFINITY);\n            setBarycenter(Vector2D.NaN);\n        } else if (v[0][0] == null) {\n            // there is at least one open-loop: the polygon is infinite\n            setSize(Double.POSITIVE_INFINITY);\n            setBarycenter(Vector2D.NaN);\n        } else {\n            // all loops are closed, we compute some integrals around the shape\n            double sum = 0;\n            double sumX = 0;\n            double sumY = 0;\n            for (Vector2D[] loop : v) {\n                double x1 = loop[loop.length - 1].getX();\n                double y1 = loop[loop.length - 1].getY();\n                for (final Vector2D point : loop) {\n                    final double x0 = x1;\n                    final double y0 = y1;\n                    x1 = point.getX();\n                    y1 = point.getY();\n                    final double factor = x0 * y1 - y0 * x1;\n                    sum += factor;\n                    sumX += factor * (x0 + x1);\n                    sumY += factor * (y0 + y1);\n                }\n            }\n            if (sum < 0) {\n                // the polygon is infinite outside a finite shape\n                setSize(Double.POSITIVE_INFINITY);\n                setBarycenter(Vector2D.NaN);\n            } else {\n                setSize(sum * 0.5);\n                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\nindex c6e7cf18c..962ee7e08 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n@@ -133,7 +133,48 @@ public class PolygonsSet extends AbstractRegion<Euclidean2D, Euclidean1D> {\n \n         if (v.length == 0) {\n             final BSPTree<Euclidean2D> tree = getTree(false);\n-            if ((Boolean) tree.getAttribute()) {\n+        Object attribute = tree.getAttribute();\n+        if (attribute instanceof BoundaryAttribute\n+                && ((BoundaryAttribute<?>) attribute).getPlusInside() == null) {\n+            // the polygon covers the whole space\n+            setSize(Double.POSITIVE_INFINITY);\n+            setBarycenter(Vector2D.NaN);\n+        } else if (attribute == Boolean.TRUE) {\n+            // the polygon covers the outside of a finite shape\n+            setSize(Double.POSITIVE_INFINITY);\n+            setBarycenter(Vector2D.NaN);\n+        } else if (v[0][0] == null) {\n+            // there is at least one open-loop: the polygon is infinite\n+            setSize(Double.POSITIVE_INFINITY);\n+            setBarycenter(Vector2D.NaN);\n+        } else {\n+            // all loops are closed, we compute some integrals around the shape\n+            double sum = 0;\n+            double sumX = 0;\n+            double sumY = 0;\n+            for (Vector2D[] loop : v) {\n+                double x1 = loop[loop.length - 1].getX();\n+                double y1 = loop[loop.length - 1].getY();\n+                for (final Vector2D point : loop) {\n+                    final double x0 = x1;\n+                    final double y0 = y1;\n+                    x1 = point.getX();\n+                    y1 = point.getY();\n+                    final double factor = x0 * y1 - y0 * x1;\n+                    sum += factor;\n+                    sumX += factor * (x0 + x1);\n+                    sumY += factor * (y0 + y1);\n+                }\n+            }\n+            if (sum < 0) {\n+                // the polygon is infinite outside a finite shape\n+                setSize(Double.POSITIVE_INFINITY);\n+                setBarycenter(Vector2D.NaN);\n+            } else {\n+                setSize(sum * 0.5);\n+                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));\n+            }\n+        }\n                 // the instance covers the whole space\n                 setSize(Double.POSITIVE_INFINITY);\n                 setBarycenter(Vector2D.NaN);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}