{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    if (!modifyCallSites && argList.hasChildren()) {\n      Node args = argList.getFirstChild();\n      for (Node currentArg = args.getFirstChild(); currentArg != null; ) {\n        Node nextArg = currentArg.getNext();\n        Var var = fnScope.getVar(currentArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(currentArg);\n          compiler.reportCodeChange();\n        }\n        currentArg = nextArg;\n      }\n    } else if (modifyCallSites) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0e41822c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,30 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    if (!modifyCallSites && argList.hasChildren()) {\n+      Node args = argList.getFirstChild();\n+      for (Node currentArg = args.getFirstChild(); currentArg != null; ) {\n+        Node nextArg = currentArg.getNext();\n+        Var var = fnScope.getVar(currentArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(currentArg);\n+          compiler.reportCodeChange();\n+        }\n+        currentArg = nextArg;\n+      }\n+    } else if (modifyCallSites) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable function is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}