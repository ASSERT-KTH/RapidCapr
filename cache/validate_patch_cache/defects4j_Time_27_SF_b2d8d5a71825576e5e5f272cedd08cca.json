{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    Object[] comp = createComposite(elementPairs);\n\n    // fix to handle null printer or null parser\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n\n    if (!notPrinter && comp[0] == null) {\n        int i = 1;\n        while (i < elementPairs.size() && comp[0] == null) {\n            Object[] tempComp = createComposite(elementPairs.subList(i, elementPairs.size()));\n            if (tempComp[0] instanceof Composite) {\n                i += tempComp.length;\n            } else {\n                printer = (PeriodPrinter) tempComp[0];\n            }\n            i++;\n        }\n        if (comp[0] == null && printer == null) {\n            throw new IllegalArgumentException(\"Pattern must not be empty or null\");\n        }\n        printer = printer == null ? (PeriodPrinter) comp[0] : printer;\n    } else {\n        printer = (PeriodPrinter) comp[0];\n    }\n\n    if (!notParser && comp[1] == null) {\n        int i = 1;\n        while (i < elementPairs.size() && comp[1] == null) {\n            Object[] tempComp = createComposite(elementPairs.subList(i, elementPairs.size()));\n            if (tempComp[0] instanceof Composite) {\n                i += tempComp.length;\n            } else {\n                parser = (PeriodParser) tempComp[1];\n            }\n            i++;\n        }\n        if (comp[1] == null && parser == null) {\n            throw new IllegalArgumentException(\"Pattern must not be empty or null\");\n        }\n        parser = parser == null ? (PeriodParser) comp[1] : parser;\n    } else {\n        parser = (PeriodParser) comp[1];\n    }\n\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..e6e7a04b 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,57 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    Object[] comp = createComposite(elementPairs);\n+\n+    // fix to handle null printer or null parser\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+\n+    if (!notPrinter && comp[0] == null) {\n+        int i = 1;\n+        while (i < elementPairs.size() && comp[0] == null) {\n+            Object[] tempComp = createComposite(elementPairs.subList(i, elementPairs.size()));\n+            if (tempComp[0] instanceof Composite) {\n+                i += tempComp.length;\n+            } else {\n+                printer = (PeriodPrinter) tempComp[0];\n+            }\n+            i++;\n         }\n+        if (comp[0] == null && printer == null) {\n+            throw new IllegalArgumentException(\"Pattern must not be empty or null\");\n+        }\n+        printer = printer == null ? (PeriodPrinter) comp[0] : printer;\n+    } else {\n+        printer = (PeriodPrinter) comp[0];\n     }\n \n+    if (!notParser && comp[1] == null) {\n+        int i = 1;\n+        while (i < elementPairs.size() && comp[1] == null) {\n+            Object[] tempComp = createComposite(elementPairs.subList(i, elementPairs.size()));\n+            if (tempComp[0] instanceof Composite) {\n+                i += tempComp.length;\n+            } else {\n+                parser = (PeriodParser) tempComp[1];\n+            }\n+            i++;\n+        }\n+        if (comp[1] == null && parser == null) {\n+            throw new IllegalArgumentException(\"Pattern must not be empty or null\");\n+        }\n+        parser = parser == null ? (PeriodParser) comp[1] : parser;\n+    } else {\n+        parser = (PeriodParser) comp[1];\n+    }\n+\n+    return new PeriodFormatter(printer, parser);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}