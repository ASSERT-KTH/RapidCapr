{
    "patch": "public static String unescapeISO8859_1(String input) {\n    StringBuilder result = new StringBuilder();\n    Matcher matcher = ISO8859_1_ESCAPED_CHAR_PATTERN.matcher(input);\n    int i = 0;\n    while (matcher.find()) {\n        String match = matcher.group();\n        char parsedChar;\n        if (match.equals(\"&#39;\")) {\n            parsedChar = '\\'';\n        } else if (match.equals(\"&#34;\")) {\n            parsedChar = '\\\"';\n        } else if (match.equals(\"&lt;\")) {\n            parsedChar = '<';\n        } else if (match.equals(\"&gt;\")) {\n            parsedChar = '>';\n        } else if (match.equals(\"&amp;\")) {\n            parsedChar = '&';\n        } else {\n            // The matched pattern is not recognized\n            return input;\n        }\n        result.append(input.substring(i, matcher.start()));\n        result.append(parsedChar);\n        i = matcher.end();\n    }\n    result.append(input.substring(i));\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..6d04956f 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,34 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeISO8859_1(String input) {\n+    StringBuilder result = new StringBuilder();\n+    Matcher matcher = ISO8859_1_ESCAPED_CHAR_PATTERN.matcher(input);\n+    int i = 0;\n+    while (matcher.find()) {\n+        String match = matcher.group();\n+        char parsedChar;\n+        if (match.equals(\"&#39;\")) {\n+            parsedChar = '\\'';\n+        } else if (match.equals(\"&#34;\")) {\n+            parsedChar = '\\\"';\n+        } else if (match.equals(\"&lt;\")) {\n+            parsedChar = '<';\n+        } else if (match.equals(\"&gt;\")) {\n+            parsedChar = '>';\n+        } else if (match.equals(\"&amp;\")) {\n+            parsedChar = '&';\n+        } else {\n+            // The matched pattern is not recognized\n+            return input;\n+        }\n+        result.append(input.substring(i, matcher.start()));\n+        result.append(parsedChar);\n+        i = matcher.end();\n+    }\n+    result.append(input.substring(i));\n+    return result.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}