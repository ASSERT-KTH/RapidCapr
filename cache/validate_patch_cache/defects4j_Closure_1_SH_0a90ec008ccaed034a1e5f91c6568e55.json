{
    "patch": "    // Variables to keep a track of the unreferenced argument and the last referenced argument\n    Node lastUnreferencedArg = null;\n    Node lastReferencedArg = null;\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      for (Node arg : argList.children()) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          arg.detach();\n          compiler.reportCodeChange();\n          lastUnreferencedArg = arg;\n        } else {\n          lastReferencedArg = arg;\n        }\n      }\n      // Check whether the last referenced argument has a default value. If it does,\n      // then we need to remove the previous unreferenced arguments that have no default\n      // values so that the argument value isn't assigned incorrectly during optimization.\n      if (lastReferencedArg != null && lastReferencedArg.hasChildren() &&\n          lastReferencedArg.getFirstChild().isDefaultValue()) {\n        Node firstNodeToRemove = lastUnreferencedArg.getNext();\n        while (firstNodeToRemove != null &&\n               firstNodeToRemove.getNext() != lastReferencedArg.getNext()) {\n          Node next = firstNodeToRemove.getNext();\n          if (!next.hasChildren()) {\n            // Remove the argument without a default value.\n            firstNodeToRemove.detach();\n            compiler.reportCodeChange();\n          } else if (next.getFirstChild().isDefaultValue()) {\n            // If the next argument had a default value, don't remove it either.\n            firstNodeToRemove = next;\n          } else {\n            // If the next argument did not have a default value, stop removing arguments.\n            break;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..694cf62d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,41 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Variables to keep a track of the unreferenced argument and the last referenced argument\n+    Node lastUnreferencedArg = null;\n+    Node lastReferencedArg = null;\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      for (Node arg : argList.children()) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          arg.detach();\n+          compiler.reportCodeChange();\n+          lastUnreferencedArg = arg;\n+        } else {\n+          lastReferencedArg = arg;\n+        }\n+      }\n+      // Check whether the last referenced argument has a default value. If it does,\n+      // then we need to remove the previous unreferenced arguments that have no default\n+      // values so that the argument value isn't assigned incorrectly during optimization.\n+      if (lastReferencedArg != null && lastReferencedArg.hasChildren() &&\n+          lastReferencedArg.getFirstChild().isDefaultValue()) {\n+        Node firstNodeToRemove = lastUnreferencedArg.getNext();\n+        while (firstNodeToRemove != null &&\n+               firstNodeToRemove.getNext() != lastReferencedArg.getNext()) {\n+          Node next = firstNodeToRemove.getNext();\n+          if (!next.hasChildren()) {\n+            // Remove the argument without a default value.\n+            firstNodeToRemove.detach();\n+            compiler.reportCodeChange();\n+          } else if (next.getFirstChild().isDefaultValue()) {\n+            // If the next argument had a default value, don't remove it either.\n+            firstNodeToRemove = next;\n+          } else {\n+            // If the next argument did not have a default value, stop removing arguments.\n+            break;\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}