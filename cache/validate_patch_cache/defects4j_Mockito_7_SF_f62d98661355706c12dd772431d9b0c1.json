{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type type = typeVariable.getBounds()[0];\n    if (type instanceof TypeVariable) {\n        TypeVariable<?> typeVar = (TypeVariable<?>) type;\n        return getActualTypeArgumentFor(typeVar);\n    }\n    return type;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..26d5bd697 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,15 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type type = typeVariable.getBounds()[0];\n+    if (type instanceof TypeVariable) {\n+        TypeVariable<?> typeVar = (TypeVariable<?>) type;\n+        return getActualTypeArgumentFor(typeVar);\n+    }\n+    return type;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}