{
    "patch": "        int[] newValues = Arrays.copyOf(values, values.length);\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            int[] resultValues = iChronology.get(partial, instant);\n            int dayIndex = DateTimeUtils.getChronology(partial.getChronology()).dayOfMonth().getFieldIndex();\n            if (dayIndex != -1 && resultValues[dayIndex] != values[dayIndex]) {\n                int monthFieldIndex = DateTimeUtils.getChronology(partial.getChronology()).monthOfYear().getFieldIndex();\n                if (monthFieldIndex == -1) {\n                    throw new IllegalStateException(\"Could not find monthOfYear field index in \" + partial.getClass());\n                }\n                int month = values[monthFieldIndex];\n                LocalDate localDate = LocalDate.of(resultValues[0], month, resultValues[1]);\n                int day = Math.min(resultValues[dayIndex], localDate.lengthOfMonth());\n                resultValues[dayIndex] = day;\n            }\n            return resultValues;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..1517d945 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,27 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n+        int[] newValues = Arrays.copyOf(values, values.length);\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            int[] resultValues = iChronology.get(partial, instant);\n+            int dayIndex = DateTimeUtils.getChronology(partial.getChronology()).dayOfMonth().getFieldIndex();\n+            if (dayIndex != -1 && resultValues[dayIndex] != values[dayIndex]) {\n+                int monthFieldIndex = DateTimeUtils.getChronology(partial.getChronology()).monthOfYear().getFieldIndex();\n+                if (monthFieldIndex == -1) {\n+                    throw new IllegalStateException(\"Could not find monthOfYear field index in \" + partial.getClass());\n+                }\n+                int month = values[monthFieldIndex];\n+                LocalDate localDate = LocalDate.of(resultValues[0], month, resultValues[1]);\n+                int day = Math.min(resultValues[dayIndex], localDate.lengthOfMonth());\n+                resultValues[dayIndex] = day;\n+            }\n+            return resultValues;\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}