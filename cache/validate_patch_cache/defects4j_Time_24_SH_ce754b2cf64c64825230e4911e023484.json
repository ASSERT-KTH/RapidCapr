{
    "patch": "    boolean adjusted = false;\n    for (int i = 0; i < count; i++) {\n        try {\n            long newMillis = savedFields[i].set(millis, resetFields);\n            if (newMillis != millis) {\n                adjusted = true;\n                if (millis > 0 && newMillis < 0) {\n                    throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n                } else if (millis < 0 && newMillis > 0) {\n                    throw new IllegalArgumentException(\"The datetime is too small to be represented\");\n                }\n                millis = newMillis;\n                if (i == 0) {\n                    DurationField months = DurationFieldType.months().getField(iChrono);\n                    DurationField days = DurationFieldType.days().getField(iChrono);\n                    DurationField firstField = savedFields[i].iField.getDurationField();\n                    if (compareReverse(firstField, months) >= 0 && compareReverse(firstField, days) <= 0) {\n                        saveField(DateTimeFieldType.year(), iDefaultYear);\n                        return computeMillis(resetFields, text);\n                    }\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n    }\n    if (adjusted && iZone != null) {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n    return millis;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..cd768830 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,48 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+    boolean adjusted = false;\n+    for (int i = 0; i < count; i++) {\n+        try {\n+            long newMillis = savedFields[i].set(millis, resetFields);\n+            if (newMillis != millis) {\n+                adjusted = true;\n+                if (millis > 0 && newMillis < 0) {\n+                    throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n+                } else if (millis < 0 && newMillis > 0) {\n+                    throw new IllegalArgumentException(\"The datetime is too small to be represented\");\n+                }\n+                millis = newMillis;\n+                if (i == 0) {\n+                    DurationField months = DurationFieldType.months().getField(iChrono);\n+                    DurationField days = DurationFieldType.days().getField(iChrono);\n+                    DurationField firstField = savedFields[i].iField.getDurationField();\n+                    if (compareReverse(firstField, months) >= 0 && compareReverse(firstField, days) <= 0) {\n+                        saveField(DateTimeFieldType.year(), iDefaultYear);\n+                        return computeMillis(resetFields, text);\n+                    }\n+                }\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n+    }\n+    if (adjusted && iZone != null) {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n+                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+            }\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+    return millis;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}