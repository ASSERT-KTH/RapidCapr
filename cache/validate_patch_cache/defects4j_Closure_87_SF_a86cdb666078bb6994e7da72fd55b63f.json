{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    Node child = n.getFirstChild();\n    if (child == null) {\n      return false;\n    }\n    // Case 1: single child of BLOCK is an ExpressionStatement in\n    // the form of a CALL, or an assignment, or a comma expression.\n    // In these cases, the child can be safely folded.\n    if (child.isExprResult() && NodeUtil.isExpressionNode(child.getFirstChild())\n        && !child.getFirstChild().isAssign() && !child.getFirstChild().isCall()) {\n      return true; // OK to fold this block\n    }\n    // Case 2: single child of BLOCK is an IF statement containing an\n    // ExpressionStatement that is safe to fold.\n    if (child.isIf() && child.getChildCount() == 2 && child.getLastChild().isBlock()) {\n      Node trueBlock = child.getLastChild().getFirstChild();\n      if (trueBlock.hasOneChild() && NodeUtil.isExpressionNode(trueBlock.getFirstChild())\n          && !trueBlock.getFirstChild().isAssign() && !trueBlock.getFirstChild().isCall()) {\n        return true; // OK to fold this block\n      }\n    }\n    // Case 3: single child of BLOCK is an assignment or a comma expression.\n    if (child.isExprResult() && (child.getFirstChild().isAssign() || child.getFirstChild().isComma())) {\n      return true; // OK to fold this block\n    }\n  }\n  return false; // not a foldable block\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..f313a1ac 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,35 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    Node child = n.getFirstChild();\n+    if (child == null) {\n+      return false;\n+    }\n+    // Case 1: single child of BLOCK is an ExpressionStatement in\n+    // the form of a CALL, or an assignment, or a comma expression.\n+    // In these cases, the child can be safely folded.\n+    if (child.isExprResult() && NodeUtil.isExpressionNode(child.getFirstChild())\n+        && !child.getFirstChild().isAssign() && !child.getFirstChild().isCall()) {\n+      return true; // OK to fold this block\n+    }\n+    // Case 2: single child of BLOCK is an IF statement containing an\n+    // ExpressionStatement that is safe to fold.\n+    if (child.isIf() && child.getChildCount() == 2 && child.getLastChild().isBlock()) {\n+      Node trueBlock = child.getLastChild().getFirstChild();\n+      if (trueBlock.hasOneChild() && NodeUtil.isExpressionNode(trueBlock.getFirstChild())\n+          && !trueBlock.getFirstChild().isAssign() && !trueBlock.getFirstChild().isCall()) {\n+        return true; // OK to fold this block\n       }\n     }\n-\n-    return false;\n+    // Case 3: single child of BLOCK is an assignment or a comma expression.\n+    if (child.isExprResult() && (child.getFirstChild().isAssign() || child.getFirstChild().isComma())) {\n+      return true; // OK to fold this block\n+    }\n   }\n+  return false; // not a foldable block\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}