{
    "patch": "```\n      if (value.isFunction()) {\n        Node callNode = reference.getParent();\n        if (reference.getParent().isCall()) {\n          CodingConvention convention = compiler.getCodingConvention();\n          // Bug 2388531: Don't inline subclass definitions into class defining\n          // calls as this confused class removing logic.\n          SubclassRelationship relationship =\n              convention.getClassesDefinedByCall(callNode);\n          if (relationship != null) {\n            return false;\n          }\n\n          // issue 668: Don't inline singleton getter methods\n          // calls as this confused class removing logic.\n          if (NodeUtil.mayHaveSideEffects(value.getParent(), compiler)) {\n            return true;\n          }\n          List<Node> functionNodes = Lists.newArrayList();\n          NodeUtil.getAllNodesOfTypes(value, Token.FUNCTION, functionNodes);\n          if (functionNodes.size() != 1) {\n            return true;\n          }\n          Node functionNode = functionNodes.get(0);\n          if (!functionNode.getLastChild().isReturn()) {\n            return true;\n          }\n          Node returnNode = functionNode.getLastChild();\n          if (returnNode.hasChildren() && !returnNode.getFirstChild().isQualifiedName()) {\n            return true;\n          }\n          Node refParent = reference.getParent();\n          if (refParent.isCall()\n              && refParent.getChildBefore(reference.getNode()) != null\n              && !refParent.getSecondChild().isNull()) {\n            return true;\n          }\n          if (refParent.isCall() && refParent.getFirstChild().isGetProp()) {\n            return true;\n          }\n        }\n      }\n```",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..b5525516 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,49 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+```\n+      if (value.isFunction()) {\n+        Node callNode = reference.getParent();\n+        if (reference.getParent().isCall()) {\n+          CodingConvention convention = compiler.getCodingConvention();\n+          // Bug 2388531: Don't inline subclass definitions into class defining\n+          // calls as this confused class removing logic.\n+          SubclassRelationship relationship =\n+              convention.getClassesDefinedByCall(callNode);\n+          if (relationship != null) {\n+            return false;\n+          }\n+\n+          // issue 668: Don't inline singleton getter methods\n+          // calls as this confused class removing logic.\n+          if (NodeUtil.mayHaveSideEffects(value.getParent(), compiler)) {\n+            return true;\n+          }\n+          List<Node> functionNodes = Lists.newArrayList();\n+          NodeUtil.getAllNodesOfTypes(value, Token.FUNCTION, functionNodes);\n+          if (functionNodes.size() != 1) {\n+            return true;\n+          }\n+          Node functionNode = functionNodes.get(0);\n+          if (!functionNode.getLastChild().isReturn()) {\n+            return true;\n+          }\n+          Node returnNode = functionNode.getLastChild();\n+          if (returnNode.hasChildren() && !returnNode.getFirstChild().isQualifiedName()) {\n+            return true;\n+          }\n+          Node refParent = reference.getParent();\n+          if (refParent.isCall()\n+              && refParent.getChildBefore(reference.getNode()) != null\n+              && !refParent.getSecondChild().isNull()) {\n+            return true;\n+          }\n+          if (refParent.isCall() && refParent.getFirstChild().isGetProp()) {\n+            return true;\n+          }\n+        }\n+      }\n+```\n         }\n       }\n ",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}