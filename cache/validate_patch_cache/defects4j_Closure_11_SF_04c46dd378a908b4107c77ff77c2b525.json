{
    "patch": "public static String getProperty(String key) throws IOException {\n    Properties props = new Properties();\n    InputStream in = new FileInputStream(\"config.properties\");\n    props.load(in);\n    in.close();\n    String value = props.getProperty(key);\n    if (value == null || value.trim().length() == 0) {\n        throw new IllegalArgumentException(\"Key \" + key + \" not found in configuration\");\n    }\n    return value.trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..03c21895 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getProperty(String key) throws IOException {\n+    Properties props = new Properties();\n+    InputStream in = new FileInputStream(\"config.properties\");\n+    props.load(in);\n+    in.close();\n+    String value = props.getProperty(key);\n+    if (value == null || value.trim().length() == 0) {\n+        throw new IllegalArgumentException(\"Key \" + key + \" not found in configuration\");\n+    }\n+    return value.trim();\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}