{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN()) {\n            return newInstance(getField(), qnanPayload);\n        }\n        if (x == 0) {\n            return newInstance(getField(), zero);\n        }\n\n        Dfp result = newInstance(this);\n\n        int[] product = new int[nDigits + 1];\n\n        long carry = 0;\n        for (int i = 0; i < nDigits; i++) {\n            carry += ((long) rint[digits[i]]) * ((long) x);\n            product[i] = (int) (carry % radix);\n            carry /= radix;\n        }\n\n        product[nDigits] = (int) carry;\n\n        int msb;\n        for (msb = nDigits; msb >= 0 && product[msb] == 0; msb--);\n\n        if (msb < 0) {\n            return newInstance(getField(), zero);\n        }\n\n        result.sign = sign;\n        result.exp = exp;\n\n        if (msb < nDigits) {\n            result.digits = new byte[msb + 1];\n\n            for (int i = 0; i <= msb; i++) {\n                result.digits[i] = (byte) rint[product[i]];\n            }\n        } else {\n            result.digits = new byte[nDigits];\n\n            for (int i = 0; i < nDigits; i++) {\n                result.digits[i] = digits[i];\n            }\n        }\n\n        result.normalize();\n\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..89a48b550 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,53 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN()) {\n+            return newInstance(getField(), qnanPayload);\n+        }\n+        if (x == 0) {\n+            return newInstance(getField(), zero);\n+        }\n+\n+        Dfp result = newInstance(this);\n+\n+        int[] product = new int[nDigits + 1];\n+\n+        long carry = 0;\n+        for (int i = 0; i < nDigits; i++) {\n+            carry += ((long) rint[digits[i]]) * ((long) x);\n+            product[i] = (int) (carry % radix);\n+            carry /= radix;\n+        }\n+\n+        product[nDigits] = (int) carry;\n+\n+        int msb;\n+        for (msb = nDigits; msb >= 0 && product[msb] == 0; msb--);\n+\n+        if (msb < 0) {\n+            return newInstance(getField(), zero);\n+        }\n+\n+        result.sign = sign;\n+        result.exp = exp;\n+\n+        if (msb < nDigits) {\n+            result.digits = new byte[msb + 1];\n+\n+            for (int i = 0; i <= msb; i++) {\n+                result.digits[i] = (byte) rint[product[i]];\n+            }\n+        } else {\n+            result.digits = new byte[nDigits];\n+\n+            for (int i = 0; i < nDigits; i++) {\n+                result.digits[i] = digits[i];\n+            }\n+        }\n+\n+        result.normalize();\n+\n+        return result;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}