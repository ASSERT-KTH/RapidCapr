{
    "patch": "if (boundaries != null) {\n    for (int i = 0; i < lB.length; i++) {\n        if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n            throw new NumberIsTooLargeException(Double.POSITIVE_INFINITY, 0, true);\n        }\n        if (uB[i] - lB[i] <= 0) {\n            throw new NumberIsTooLargeException(uB[i] - lB[i], 0, true);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..ef08dbf4b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,16 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+if (boundaries != null) {\n+    for (int i = 0; i < lB.length; i++) {\n+        if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {\n+            throw new NumberIsTooLargeException(Double.POSITIVE_INFINITY, 0, true);\n+        }\n+        if (uB[i] - lB[i] <= 0) {\n+            throw new NumberIsTooLargeException(uB[i] - lB[i], 0, true);\n+        }\n+    }\n+}\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "java.lang.Exception: Unexpected exception, expected<org.apache.commons.math3.exception.NumberIsTooLargeException> but was<org.apache.commons.math3.exception.MathIllegalStateException>",
    "test_result": "FAIL"
}