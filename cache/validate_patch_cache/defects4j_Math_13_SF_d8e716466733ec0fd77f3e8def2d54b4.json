{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int blockSize = 100; // Adjust block size as needed, depending on matrix size and available memory\n    final BlockRealMatrix bm = new BlockRealMatrix(m.getRowDimension(), m.getColumnDimension(), blockSize, blockSize);\n    for (int i = 0; i < m.getRowDimension(); i += blockSize) {\n        for (int j = 0; j < m.getColumnDimension(); j += blockSize) {\n            final int rows = Math.min(blockSize, m.getRowDimension() - i);\n            final int cols = Math.min(blockSize, m.getColumnDimension() - j);\n            final RealMatrix subMatrix = m.getSubMatrix(i, i + rows - 1, j, j + cols - 1);\n            final CholeskyDecomposition cholesky = new CholeskyDecomposition(subMatrix);\n            final RealMatrix subSqrt = cholesky.getL();\n            bm.setSubMatrix(subSqrt.getData(), i, j);\n        }\n    }\n    return bm;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..387c55589 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int blockSize = 100; // Adjust block size as needed, depending on matrix size and available memory\n+    final BlockRealMatrix bm = new BlockRealMatrix(m.getRowDimension(), m.getColumnDimension(), blockSize, blockSize);\n+    for (int i = 0; i < m.getRowDimension(); i += blockSize) {\n+        for (int j = 0; j < m.getColumnDimension(); j += blockSize) {\n+            final int rows = Math.min(blockSize, m.getRowDimension() - i);\n+            final int cols = Math.min(blockSize, m.getColumnDimension() - j);\n+            final RealMatrix subMatrix = m.getSubMatrix(i, i + rows - 1, j, j + cols - 1);\n+            final CholeskyDecomposition cholesky = new CholeskyDecomposition(subMatrix);\n+            final RealMatrix subSqrt = cholesky.getL();\n+            bm.setSubMatrix(subSqrt.getData(), i, j);\n+        }\n     }\n+    return bm;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}