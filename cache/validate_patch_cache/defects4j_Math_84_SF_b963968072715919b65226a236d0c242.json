{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = contract(original, comparator);\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                simplex = contract(original, comparator);\n\n            }\n\n            // check convergence\n            final RealPointValuePair[] current = simplex;\n            boolean converged = true;\n            for (int i = 1; i < simplex.length; i++) {\n                final double[] prev = current[i - 1].getPoint();\n                final double[] curr = current[i].getPoint();\n                boolean rowConverged = true;\n                for (int j = 0; j < prev.length; j++) {\n                    if (FastMath.abs(prev[j] - curr[j]) > getAbsoluteThreshold() + getRelativeThreshold() * FastMath.abs(prev[j])) {\n                        rowConverged = false;\n                        break;\n                    }\n                }\n                converged &= rowConverged;\n            }\n\n            if (converged || (getEvaluations() > getMaxEvaluations())) {\n                return;\n            }\n\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..caf229115 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -59,7 +59,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     /** {@inheritDoc} */\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n@@ -79,18 +79,34 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = contract(original, comparator);\n                 }\n \n-                return;\n+            } else {\n \n-            }\n+                // compute the contracted simplex\n+                simplex = contract(original, comparator);\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            }\n \n             // check convergence\n+            final RealPointValuePair[] current = simplex;\n+            boolean converged = true;\n+            for (int i = 1; i < simplex.length; i++) {\n+                final double[] prev = current[i - 1].getPoint();\n+                final double[] curr = current[i].getPoint();\n+                boolean rowConverged = true;\n+                for (int j = 0; j < prev.length; j++) {\n+                    if (FastMath.abs(prev[j] - curr[j]) > getAbsoluteThreshold() + getRelativeThreshold() * FastMath.abs(prev[j])) {\n+                        rowConverged = false;\n+                        break;\n+                    }\n+                }\n+                converged &= rowConverged;\n+            }\n+\n+            if (converged || (getEvaluations() > getMaxEvaluations())) {\n                 return;\n             }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}