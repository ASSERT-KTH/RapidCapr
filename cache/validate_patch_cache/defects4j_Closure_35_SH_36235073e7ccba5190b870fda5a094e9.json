{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        boolean warningIssued = false;\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.hasProperty(prop) ||\n              (!objType.isPropertyTypeDeclared(prop) &&\n               !objType.getPropertyType(prop).isSubtype(propType))) {\n            objType.defineInferredProperty(prop, propType, null);\n            if (warningIssued == false) {\n              warning(\"inferred property \" + prop + \" type from \" + type +\n                      \" as \" + propType +\n                      \" missing from constraint \" + constraint);\n              warningIssued = true;\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..58f52c2d 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1121,18 +1121,21 @@ class TypeInference\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n+        boolean warningIssued = false;\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+          if (!objType.hasProperty(prop) ||\n+              (!objType.isPropertyTypeDeclared(prop) &&\n+               !objType.getPropertyType(prop).isSubtype(propType))) {\n+            objType.defineInferredProperty(prop, propType, null);\n+            if (warningIssued == false) {\n+              warning(\"inferred property \" + prop + \" type from \" + type +\n+                      \" as \" + propType +\n+                      \" missing from constraint \" + constraint);\n+              warningIssued = true;\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}