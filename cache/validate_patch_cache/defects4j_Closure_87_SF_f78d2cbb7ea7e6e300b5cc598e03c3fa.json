{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node childNode = n.getFirstChild();\n      switch (childNode.getType()) {\n        case Token.EXPR_RESULT:\n          Node expressionNode = childNode.getFirstChild();\n          if (expressionNode.getType() == Token.HOOK) {\n            Node parent = n.getParent();\n            if (parent != null && (parent.getType() == Token.AND || parent.getType() == Token.OR)) {\n              Node firstChild = parent.getFirstChild();\n              if (firstChild == n) {\n                return false;\n              }\n            }\n          } else if (expressionNode.getType() == Token.FALSE) {\n            Node grandParent = n.getParent();\n            if (grandParent != null && grandParent.getType() == Token.IF) {\n              Node nextSibling = childNode.getNext();\n              if (nextSibling != null && nextSibling.getType() == Token.BLOCK && nextSibling.hasChildren()) {\n                Node grandChild = nextSibling.getFirstChild();\n                if (grandChild.getType() == Token.CALL) {\n                  return false;\n                }\n              }\n            }\n          } else if (NodeUtil.isExpressionNode(expressionNode)) {\n            Node parent = n.getParent();\n            if (parent != null && parent.getType() == Token.CALL && !parent.hasChildren()) {\n              return false;\n            }\n          }\n          break;\n        case Token.IF:\n          Node condition = childNode.getFirstChild();\n          Node thenBranch = condition.getNext();\n          Node elseBranch = thenBranch.getNext();\n\n          if (isExpressionNodeInConditional(thenBranch) || (elseBranch != null && isExpressionNodeInConditional(elseBranch))) {\n            return false;\n          }\n          break;\n        default:\n          if (NodeUtil.isExpressionNode(childNode)) {\n            Node parent = n.getParent();\n            if (parent != null && parent.getType() == Token.CALL && !parent.hasChildren()) {\n              return false;\n            }\n          }\n          break;\n      }\n    }\n  }\n\n  return false;\n}\n\nprivate boolean isExpressionNodeInConditional(Node conditional) {\n  if (conditional.getType() == Token.BLOCK) {\n    Node child = conditional.getFirstChild();\n    while (child != null) {\n      if (NodeUtil.isExpressionNode(child)) {\n        return true;\n      }\n      child = child.getNext();\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..1d888f42 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,75 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node childNode = n.getFirstChild();\n+      switch (childNode.getType()) {\n+        case Token.EXPR_RESULT:\n+          Node expressionNode = childNode.getFirstChild();\n+          if (expressionNode.getType() == Token.HOOK) {\n+            Node parent = n.getParent();\n+            if (parent != null && (parent.getType() == Token.AND || parent.getType() == Token.OR)) {\n+              Node firstChild = parent.getFirstChild();\n+              if (firstChild == n) {\n+                return false;\n+              }\n+            }\n+          } else if (expressionNode.getType() == Token.FALSE) {\n+            Node grandParent = n.getParent();\n+            if (grandParent != null && grandParent.getType() == Token.IF) {\n+              Node nextSibling = childNode.getNext();\n+              if (nextSibling != null && nextSibling.getType() == Token.BLOCK && nextSibling.hasChildren()) {\n+                Node grandChild = nextSibling.getFirstChild();\n+                if (grandChild.getType() == Token.CALL) {\n+                  return false;\n+                }\n+              }\n+            }\n+          } else if (NodeUtil.isExpressionNode(expressionNode)) {\n+            Node parent = n.getParent();\n+            if (parent != null && parent.getType() == Token.CALL && !parent.hasChildren()) {\n+              return false;\n+            }\n+          }\n+          break;\n+        case Token.IF:\n+          Node condition = childNode.getFirstChild();\n+          Node thenBranch = condition.getNext();\n+          Node elseBranch = thenBranch.getNext();\n+\n+          if (isExpressionNodeInConditional(thenBranch) || (elseBranch != null && isExpressionNodeInConditional(elseBranch))) {\n+            return false;\n+          }\n+          break;\n+        default:\n+          if (NodeUtil.isExpressionNode(childNode)) {\n+            Node parent = n.getParent();\n+            if (parent != null && parent.getType() == Token.CALL && !parent.hasChildren()) {\n+              return false;\n+            }\n+          }\n+          break;\n       }\n     }\n+  }\n \n-    return false;\n+  return false;\n+}\n+\n+private boolean isExpressionNodeInConditional(Node conditional) {\n+  if (conditional.getType() == Token.BLOCK) {\n+    Node child = conditional.getFirstChild();\n+    while (child != null) {\n+      if (NodeUtil.isExpressionNode(child)) {\n+        return true;\n+      }\n+      child = child.getNext();\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}