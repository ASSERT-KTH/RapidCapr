{
    "patch": "if (cfa != null) {\n  if (node.getParent().getType() != Token.FUNCTION) {\n    for (Node finallyNode : cfa.finallyMap.get(parent)) {\n      if (finallyNode != node) {\n        cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(finallyNode));\n      }\n    }\n  } else {\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(node.getNext()));\n  }\n} else {\n  if (parent.getType() == Token.TRY && node == parent.getFirstChild() && NodeUtil.hasFinally(parent)) {\n    cfa.createEdge(fromNode, Branch.UNCOND, parent.getLastChild());\n  } else if (parent.getType() != Token.FUNCTION) {\n    Node followNode = computeFollowNode(node, null, cfa);\n    if (followNode == null && node.getNext() != null) {\n      followNode = computeFallThrough(node.getNext());\n    }\n    if (followNode != null) {\n      cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n    }\n  } else {\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(node.getNext()));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..e008b917 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,31 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  if (node.getParent().getType() != Token.FUNCTION) {\n+    for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+      if (finallyNode != node) {\n+        cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(finallyNode));\n+      }\n+    }\n+  } else {\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(node.getNext()));\n+  }\n+} else {\n+  if (parent.getType() == Token.TRY && node == parent.getFirstChild() && NodeUtil.hasFinally(parent)) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, parent.getLastChild());\n+  } else if (parent.getType() != Token.FUNCTION) {\n+    Node followNode = computeFollowNode(node, null, cfa);\n+    if (followNode == null && node.getNext() != null) {\n+      followNode = computeFallThrough(node.getNext());\n+    }\n+    if (followNode != null) {\n+      cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n+    }\n+  } else {\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(node.getNext()));\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: variable finallyNode is already defined in method computeFollowNode(Node,Node,ControlFlowAnalysis)",
    "test_result": "ERROR"
}