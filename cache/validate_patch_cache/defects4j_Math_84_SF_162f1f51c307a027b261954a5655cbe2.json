{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex = reflectedSimplex;\n            } else {\n                simplex[0] = reflected;\n            }\n            return;\n        }\n\n        // perform an inside contraction\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n            simplex[original.length - 1] = contracted;\n            continue;\n        }\n\n        // perform an outside contraction\n        final RealPointValuePair contractedInPlace = evaluateNewSimplex(original, rho, comparator);\n        if (comparator.compare(contractedInPlace, original[0]) < 0) {\n            simplex[original.length - 1] = contractedInPlace;\n            continue;\n        }\n\n        // perform a shrink\n        final RealPointValuePair bestInPlace = original[0];\n        RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];\n        shrinkedSimplex[0] = bestInPlace;\n        for (int i = 1; i < shrinkedSimplex.length; i++) {\n            // generate the new point as the midpoint between the current point and the best point\n            double[] newPoint = new double[original[i].getPointRef().length];\n            for (int j = 0; j < newPoint.length; j++) {\n                newPoint[j] = (original[i].getPointRef()[j] + bestInPlace.getPointRef()[j]) / 2;\n            }\n            shrinkedSimplex[i] = new RealPointValuePair(newPoint, evaluate(newPoint));\n        }\n        simplex = shrinkedSimplex;\n\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..e8c568859 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,60 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex = reflectedSimplex;\n+            } else {\n+                simplex[0] = reflected;\n             }\n+            return;\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        // perform an inside contraction\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n+            simplex[original.length - 1] = contracted;\n+            continue;\n+        }\n \n-            // check convergence\n-                return;\n-            }\n+        // perform an outside contraction\n+        final RealPointValuePair contractedInPlace = evaluateNewSimplex(original, rho, comparator);\n+        if (comparator.compare(contractedInPlace, original[0]) < 0) {\n+            simplex[original.length - 1] = contractedInPlace;\n+            continue;\n+        }\n \n+        // perform a shrink\n+        final RealPointValuePair bestInPlace = original[0];\n+        RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];\n+        shrinkedSimplex[0] = bestInPlace;\n+        for (int i = 1; i < shrinkedSimplex.length; i++) {\n+            // generate the new point as the midpoint between the current point and the best point\n+            double[] newPoint = new double[original[i].getPointRef().length];\n+            for (int j = 0; j < newPoint.length; j++) {\n+                newPoint[j] = (original[i].getPointRef()[j] + bestInPlace.getPointRef()[j]) / 2;\n+            }\n+            shrinkedSimplex[i] = new RealPointValuePair(newPoint, evaluate(newPoint));\n         }\n+        simplex = shrinkedSimplex;\n \n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}