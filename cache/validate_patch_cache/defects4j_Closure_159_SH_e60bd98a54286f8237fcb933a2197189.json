{
    "patch": "    if (node != null && node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      while (child != null) {\n        if (child.getType() == Token.NAME && !child.getString().startsWith(\"$\") && !child.getString().startsWith(\"goog.\")) {\n          changed.add(child.getString());\n        } else {\n          findCalledFunctions(child, changed);\n        }\n        child = child.getNext();\n      }\n    } else {\n      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n        findCalledFunctions(c, changed);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..a39781bb 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,19 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n+    if (node != null && node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+      while (child != null) {\n+        if (child.getType() == Token.NAME && !child.getString().startsWith(\"$\") && !child.getString().startsWith(\"goog.\")) {\n+          changed.add(child.getString());\n+        } else {\n+          findCalledFunctions(child, changed);\n+        }\n+        child = child.getNext();\n+      }\n+    } else {\n+      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+        findCalledFunctions(c, changed);\n       }\n     }\n ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}