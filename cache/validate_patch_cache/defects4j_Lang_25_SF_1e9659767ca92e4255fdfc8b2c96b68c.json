{
    "patch": "public static String unescape(String str) {\n   StringBuffer ret = new StringBuffer();\n   int val = 0;\n   int i = 0;\n   while (i < str.length()) {\n      char ch = str.charAt(i);\n      if (ch == '%') {\n         if ((i + 2) >= str.length()) {\n            return \"Failed to unescape \" + str;\n         }\n         char hd = Character.toLowerCase(str.charAt(i + 1));\n         char ld = Character.toLowerCase(str.charAt(i + 2));\n         if (isHexChar(hd) && isHexChar(ld)) {\n            val = (hexCharToInt(hd) << 4) + hexCharToInt(ld);\n            i += 3;\n            ret.append((char)val);\n         } else {\n            return \"Failed to unescape \" + str;\n         }\n      } else {\n         ret.append(ch);\n         i++;\n      }\n   }\n   return ret.toString();\n}\n\nprivate static boolean isHexChar(char ch) {\n   return ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f'));\n}\n\nprivate static int hexCharToInt(char ch) {\n   if (ch >= '0' && ch <= '9') {\n      return (int)(ch - '0');\n   } else {\n      return (int)(ch - 'a') + 10;\n   }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..9f7930a3 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,44 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String str) {\n+   StringBuffer ret = new StringBuffer();\n+   int val = 0;\n+   int i = 0;\n+   while (i < str.length()) {\n+      char ch = str.charAt(i);\n+      if (ch == '%') {\n+         if ((i + 2) >= str.length()) {\n+            return \"Failed to unescape \" + str;\n+         }\n+         char hd = Character.toLowerCase(str.charAt(i + 1));\n+         char ld = Character.toLowerCase(str.charAt(i + 2));\n+         if (isHexChar(hd) && isHexChar(ld)) {\n+            val = (hexCharToInt(hd) << 4) + hexCharToInt(ld);\n+            i += 3;\n+            ret.append((char)val);\n+         } else {\n+            return \"Failed to unescape \" + str;\n+         }\n+      } else {\n+         ret.append(ch);\n+         i++;\n+      }\n+   }\n+   return ret.toString();\n+}\n+\n+private static boolean isHexChar(char ch) {\n+   return ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f'));\n+}\n+\n+private static int hexCharToInt(char ch) {\n+   if (ch >= '0' && ch <= '9') {\n+      return (int)(ch - '0');\n+   } else {\n+      return (int)(ch - 'a') + 10;\n+   }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}