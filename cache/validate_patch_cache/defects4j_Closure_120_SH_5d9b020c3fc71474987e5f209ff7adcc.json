{
    "patch": "boolean assignedOnce = true;\n// The initialization reference could be null e.g. if we have a constant.\nReference initializationReference = getInitializingReference();\nReference lastAssignmentReference = null;\nfor (Reference ref : references) {\n  if (ref.isSimpleAssignmentToName()) {\n    if (lastAssignmentReference == null) {\n      lastAssignmentReference = ref;\n    } else {\n      assignedOnce = false;\n      break;\n    }\n  }\n}\n// If we did not find any explicit assignment in the references, check for initialization.\nif (assignedOnce && lastAssignmentReference == null && initializationReference != null) {\n  for (BasicBlock block = initializationReference.getBasicBlock(); block != null; block = block.getParent()) {\n    if (block.isLoop) {\n      assignedOnce = false;\n      break;\n    }\n    if (block.isFunction) {\n      // We assume variables inside functions can be assigned multiple times\n      break;\n    }\n  }\n}\nreturn assignedOnce;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..ee4e0a10 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,34 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+boolean assignedOnce = true;\n+// The initialization reference could be null e.g. if we have a constant.\n+Reference initializationReference = getInitializingReference();\n+Reference lastAssignmentReference = null;\n+for (Reference ref : references) {\n+  if (ref.isSimpleAssignmentToName()) {\n+    if (lastAssignmentReference == null) {\n+      lastAssignmentReference = ref;\n+    } else {\n+      assignedOnce = false;\n+      break;\n+    }\n+  }\n+}\n+// If we did not find any explicit assignment in the references, check for initialization.\n+if (assignedOnce && lastAssignmentReference == null && initializationReference != null) {\n+  for (BasicBlock block = initializationReference.getBasicBlock(); block != null; block = block.getParent()) {\n+    if (block.isLoop) {\n+      assignedOnce = false;\n+      break;\n+    }\n+    if (block.isFunction) {\n+      // We assume variables inside functions can be assigned multiple times\n+      break;\n+    }\n+  }\n+}\n+return assignedOnce;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable ref is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}