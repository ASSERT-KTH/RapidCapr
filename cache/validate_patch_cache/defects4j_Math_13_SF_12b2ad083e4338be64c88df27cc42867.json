{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n    final RealMatrix x = m.copy();\n\n    // Apply iterative method\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            x.addToEntry(i, j, -1); // Subtract identity matrix\n        }\n    }\n    final RealMatrix y = x.scalarMultiply(1.0 / Math.sqrt(2.0)); // Initialize y\n    final RealMatrix z = identity.add(y); // Newton iteration\n    for (int i = 0; i < 5; i++) {\n        final RealMatrix zInv = new LUDecomposition(z).getSolver().getInverse(); // Compute inverse of z\n        final RealMatrix zInv2 = zInv.multiply(zInv); // Compute inverse squared\n        z.copy(new Array2DRowRealMatrix(identity.getData()));\n        z.scalarMultiplyToSelf(0.5); // Update z\n        z.multiplyToSelf(x);\n        z.multiplyToSelf(zInv.add(zInv2.scalarMultiply(0.5))); // Compute next iteration\n    }\n\n    return z;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..83ff21c05 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,28 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n+    final RealMatrix x = m.copy();\n+\n+    // Apply iterative method\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < n; j++) {\n+            x.addToEntry(i, j, -1); // Subtract identity matrix\n+        }\n+    }\n+    final RealMatrix y = x.scalarMultiply(1.0 / Math.sqrt(2.0)); // Initialize y\n+    final RealMatrix z = identity.add(y); // Newton iteration\n+    for (int i = 0; i < 5; i++) {\n+        final RealMatrix zInv = new LUDecomposition(z).getSolver().getInverse(); // Compute inverse of z\n+        final RealMatrix zInv2 = zInv.multiply(zInv); // Compute inverse squared\n+        z.copy(new Array2DRowRealMatrix(identity.getData()));\n+        z.scalarMultiplyToSelf(0.5); // Update z\n+        z.multiplyToSelf(x);\n+        z.multiplyToSelf(zInv.add(zInv2.scalarMultiply(0.5))); // Compute next iteration\n     }\n+\n+    return z;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}