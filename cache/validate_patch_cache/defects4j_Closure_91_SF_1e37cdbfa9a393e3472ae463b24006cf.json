{
    "patch": "      // Don't traverse functions that are getting lent to a prototype or global scope.\n      if (NodeUtil.isGet(parent)) {\n        Node lhs = parent.getFirstChild();\n        if (lhs.getType() == Token.GETPROP) {\n          String propertyName = lhs.getLastChild().getString();\n          if (propertyName.equals(\"prototype\") || propertyName.equals(\"$jscomp$global\")) {\n            return false;\n          }\n        }\n        // Check if the parent is an assignment to another getprop.\n        if (parent.getParent() != null &&\n            parent.getParent().getType() == Token.ASSIGN &&\n            NodeUtil.isGet(parent.getParent().getFirstChild()) &&\n            NodeUtil.isGet(parent.getParent().getFirstChild().getFirstChild())) {\n          return false;\n        }\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty or global scope.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          if (isGlobalObject(lhs)) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private boolean isGlobalObject(Node n) {\n    while (n != null) {\n      if (n.isScript() && !n.getBooleanProp(Node.GOOG_MODULE)) {\n        // If we're in a non-Goog module script, then we may be in the global scope.\n        return true;\n      } else if (n.isImport()) {\n        // An ES6 import is never in the global scope.\n        return false;\n      }\n      n = n.getParent();\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..5cbcfbfe 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,39 +79,23 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n-        return false;\n+      // Don't traverse functions that are getting lent to a prototype or global scope.\n+      if (NodeUtil.isGet(parent)) {\n+        Node lhs = parent.getFirstChild();\n+        if (lhs.getType() == Token.GETPROP) {\n+          String propertyName = lhs.getLastChild().getString();\n+          if (propertyName.equals(\"prototype\") || propertyName.equals(\"$jscomp$global\")) {\n+            return false;\n+          }\n+        }\n+        // Check if the parent is an assignment to another getprop.\n+        if (parent.getParent() != null &&\n+            parent.getParent().getType() == Token.ASSIGN &&\n+            NodeUtil.isGet(parent.getParent().getFirstChild()) &&\n+            NodeUtil.isGet(parent.getParent().getFirstChild().getFirstChild())) {\n+          return false;\n+        }\n       }\n-\n-      // Don't traverse functions that are getting lent to a prototype.\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n@@ -127,7 +111,7 @@ final class CheckGlobalThis implements Callback {\n         }\n       } else {\n         // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n+        // property or subproperty or global scope.\n         if (NodeUtil.isGet(lhs)) {\n           if (lhs.getType() == Token.GETPROP &&\n               lhs.getLastChild().getString().equals(\"prototype\")) {\n@@ -138,6 +122,9 @@ final class CheckGlobalThis implements Callback {\n               llhs.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n           }\n+          if (isGlobalObject(lhs)) {\n+            return false;\n+          }\n         }\n       }\n     }\n@@ -145,6 +132,19 @@ final class CheckGlobalThis implements Callback {\n     return true;\n   }\n \n+  private boolean isGlobalObject(Node n) {\n+    while (n != null) {\n+      if (n.isScript() && !n.getBooleanProp(Node.GOOG_MODULE)) {\n+        // If we're in a non-Goog module script, then we may be in the global scope.\n+        return true;\n+      } else if (n.isImport()) {\n+        // An ES6 import is never in the global scope.\n+        return false;\n+      }\n+      n = n.getParent();\n+    }\n+    return false;\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}