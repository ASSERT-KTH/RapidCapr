{
    "patch": "            if (offsetAdjusted < offsetLocal) {\n                // we need to ensure that time is always after the DST gap,\n                // so we need to adjust the instant again\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                // in some cases nextTransition can return the same value, so we need to compare the offsets\n                int nextOffsetLocal = getOffset(nextLocal);\n                if (nextLocal == nextAdjusted && nextOffsetLocal == offsetAdjusted) {\n                    return offsetAdjusted;\n                } else {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ecf64d7a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,16 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetAdjusted < offsetLocal) {\n+                // we need to ensure that time is always after the DST gap,\n+                // so we need to adjust the instant again\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                // in some cases nextTransition can return the same value, so we need to compare the offsets\n+                int nextOffsetLocal = getOffset(nextLocal);\n+                if (nextLocal == nextAdjusted && nextOffsetLocal == offsetAdjusted) {\n+                    return offsetAdjusted;\n+                } else {\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}