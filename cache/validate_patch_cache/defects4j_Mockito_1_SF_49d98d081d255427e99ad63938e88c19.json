{
    "patch": "public void captureArgumentsFrom(Invocation invocation) {\n    for (int position = 0; position < matchers.size(); position++) {\n        Matcher m = matchers.get(position);\n        if (m instanceof CapturesArguments) {\n            if (isVarArgsParameter(invocation, position)) {\n                captureVarArgsArgumentsFrom(invocation, position, (CapturesArguments) m);\n                return;\n            }\n            Object argument = getArgumentAt(invocation, position);\n            ((CapturesArguments) m).captureFrom(argument);\n        }\n    }\n}\n\nprivate boolean isVarArgsParameter(Invocation invocation, int parameterIndex) {\n    Method method = invocation.getMethod();\n    return method.isVarArgs() && parameterIndex >= method.getParameterTypes().length - 1;\n}\n\nprivate void captureVarArgsArgumentsFrom(Invocation invocation, int varArgsParameterIndex, CapturesArguments matcher) {\n    Object[] varArgsArguments = getVarArgsArgumentsAt(invocation, varArgsParameterIndex);\n    for (Object argument : varArgsArguments) {\n        matcher.captureFrom(argument);\n    }\n}\n\nprivate Object getArgumentAt(Invocation invocation, int position) {\n    if (invocation.getArguments().length <= position) {\n        throw new IndexOutOfBoundsException(\"No argument was passed for matcher at parameter \" + position);\n    }\n    return invocation.getArgumentAt(position, Object.class);\n}\n\nprivate Object[] getVarArgsArgumentsAt(Invocation invocation, int varArgsParameterIndex) {\n    Object[] arguments = invocation.getArguments();\n    int argumentsLength = arguments.length;\n    Object varArgsArgument = arguments[varArgsParameterIndex];\n    if (varArgsArgument == null) {\n        if (argumentsLength == varArgsParameterIndex + 1) {\n            return new Object[0];\n        }\n        throw new IllegalStateException(\n                \"Only the last argument of varargs can be null, but found element at index \" + varArgsParameterIndex);\n    }\n    if (!varArgsArgument.getClass().isArray()) {\n        throw new IllegalStateException(\"The varargs argument is not an array, but of type \" +\n                varArgsArgument.getClass().getName());\n    }\n    return (Object[]) varArgsArgument;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..00372a815 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -117,37 +117,56 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n         return invocation.getLocation();\n     }\n \n-    public void captureArgumentsFrom(Invocation invocation) {\n-        if (invocation.getMethod().isVarArgs()) {\n-            int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n-\n-        } else {\n-            for (int position = 0; position < matchers.size(); position++) {\n-                Matcher m = matchers.get(position);\n-                if (m instanceof CapturesArguments) {\n-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n-                }\n+public void captureArgumentsFrom(Invocation invocation) {\n+    for (int position = 0; position < matchers.size(); position++) {\n+        Matcher m = matchers.get(position);\n+        if (m instanceof CapturesArguments) {\n+            if (isVarArgsParameter(invocation, position)) {\n+                captureVarArgsArgumentsFrom(invocation, position, (CapturesArguments) m);\n+                return;\n             }\n+            Object argument = getArgumentAt(invocation, position);\n+            ((CapturesArguments) m).captureFrom(argument);\n         }\n+    }\n+}\n+\n+private boolean isVarArgsParameter(Invocation invocation, int parameterIndex) {\n+    Method method = invocation.getMethod();\n+    return method.isVarArgs() && parameterIndex >= method.getParameterTypes().length - 1;\n+}\n+\n+private void captureVarArgsArgumentsFrom(Invocation invocation, int varArgsParameterIndex, CapturesArguments matcher) {\n+    Object[] varArgsArguments = getVarArgsArgumentsAt(invocation, varArgsParameterIndex);\n+    for (Object argument : varArgsArguments) {\n+        matcher.captureFrom(argument);\n+    }\n+}\n+\n+private Object getArgumentAt(Invocation invocation, int position) {\n+    if (invocation.getArguments().length <= position) {\n+        throw new IndexOutOfBoundsException(\"No argument was passed for matcher at parameter \" + position);\n+    }\n+    return invocation.getArgumentAt(position, Object.class);\n+}\n \n-//        for (int position = 0; position < matchers.size(); position++) {\n-//            Matcher m = matchers.get(position);\n-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n-//                //TODO SF - this whole lot can be moved captureFrom implementation\n-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n-//                    Object array = invocation.getRawArguments()[position];\n-//                    for (int i = 0; i < Array.getLength(array); i++) {\n-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n-//                    }\n-//                    //since we've captured all varargs already, it does not make sense to process other matchers.\n-//                    return;\n-//                } else {\n-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n-//                }\n-//            }\n-//        }\n+private Object[] getVarArgsArgumentsAt(Invocation invocation, int varArgsParameterIndex) {\n+    Object[] arguments = invocation.getArguments();\n+    int argumentsLength = arguments.length;\n+    Object varArgsArgument = arguments[varArgsParameterIndex];\n+    if (varArgsArgument == null) {\n+        if (argumentsLength == varArgsParameterIndex + 1) {\n+            return new Object[0];\n+        }\n+        throw new IllegalStateException(\n+                \"Only the last argument of varargs can be null, but found element at index \" + varArgsParameterIndex);\n     }\n+    if (!varArgsArgument.getClass().isArray()) {\n+        throw new IllegalStateException(\"The varargs argument is not an array, but of type \" +\n+                varArgsArgument.getClass().getName());\n+    }\n+    return (Object[]) varArgsArgument;\n+}\n \n     private boolean isVarargMatcher(Matcher matcher) {\n         Matcher actualMatcher = matcher;",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: 0",
    "test_result": "FAIL"
}