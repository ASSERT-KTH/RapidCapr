{
    "patch": "public static Locale toLocale(String str) {\n    if (str == null) {\n        return null;\n    }\n    String[] parts = str.split(\"_\");\n\n    if (parts.length == 1) {\n        validateLanguage(parts[0]); // Check if language is valid\n        return new Locale(parts[0]);\n    } else if (parts.length == 2) {\n        validateLanguage(parts[0]); // Check if language is valid\n        validateCountry(parts[1]);  // Check if country is valid\n        return new Locale(parts[0], parts[1]);\n    } else if (parts.length == 3) {\n        validateLanguage(parts[0]);     // Check if language is valid\n        validateCountry(parts[1]);      // Check if country is valid\n        validateVariant(parts[2]);      // Check if variant is valid\n        return new Locale(parts[0], parts[1], parts[2]);\n    }\n    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n}\n\npublic static void validateLanguage(String lang) {\n    if (lang.length() != 2) {\n        throw new IllegalArgumentException(\"Invalid language code: \" + lang);\n    } else if (!lang.matches(\"[a-z]+\")) {\n        throw new IllegalArgumentException(\"Language code must be lowercase letters only: \" + lang);\n    }\n}\n\npublic static void validateCountry(String country) {\n    if (country.length() != 2) {\n        throw new IllegalArgumentException(\"Invalid country code: \" + country);\n    } else if (!country.matches(\"[A-Z]{2}\")) {\n        throw new IllegalArgumentException(\"Country code must be uppercase letters only: \" + country);\n    }\n}\n\npublic static void validateVariant(String variant) {\n    if (!variant.matches(\"[0-9a-zA-Z]+(?:_[0-9a-zA-Z]+)*\")) {\n        throw new IllegalArgumentException(\"Invalid variant code: \" + variant);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..e510e8e0 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -91,40 +91,49 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        int len = str.length();\n-        if (len != 2 && len != 5 && len < 7) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        char ch0 = str.charAt(0);\n-        char ch1 = str.charAt(1);\n-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        if (len == 2) {\n-            return new Locale(str, \"\");\n-        } else {\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            char ch3 = str.charAt(3);\n-            char ch4 = str.charAt(4);\n-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            } else {\n-                if (str.charAt(5) != '_') {\n-                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-                }\n-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n-            }\n-        }\n+public static Locale toLocale(String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    String[] parts = str.split(\"_\");\n+\n+    if (parts.length == 1) {\n+        validateLanguage(parts[0]); // Check if language is valid\n+        return new Locale(parts[0]);\n+    } else if (parts.length == 2) {\n+        validateLanguage(parts[0]); // Check if language is valid\n+        validateCountry(parts[1]);  // Check if country is valid\n+        return new Locale(parts[0], parts[1]);\n+    } else if (parts.length == 3) {\n+        validateLanguage(parts[0]);     // Check if language is valid\n+        validateCountry(parts[1]);      // Check if country is valid\n+        validateVariant(parts[2]);      // Check if variant is valid\n+        return new Locale(parts[0], parts[1], parts[2]);\n     }\n+    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+}\n+\n+public static void validateLanguage(String lang) {\n+    if (lang.length() != 2) {\n+        throw new IllegalArgumentException(\"Invalid language code: \" + lang);\n+    } else if (!lang.matches(\"[a-z]+\")) {\n+        throw new IllegalArgumentException(\"Language code must be lowercase letters only: \" + lang);\n+    }\n+}\n+\n+public static void validateCountry(String country) {\n+    if (country.length() != 2) {\n+        throw new IllegalArgumentException(\"Invalid country code: \" + country);\n+    } else if (!country.matches(\"[A-Z]{2}\")) {\n+        throw new IllegalArgumentException(\"Country code must be uppercase letters only: \" + country);\n+    }\n+}\n+\n+public static void validateVariant(String variant) {\n+    if (!variant.matches(\"[0-9a-zA-Z]+(?:_[0-9a-zA-Z]+)*\")) {\n+        throw new IllegalArgumentException(\"Invalid variant code: \" + variant);\n+    }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "java.lang.IllegalArgumentException: Invalid country code:",
    "test_result": "FAIL"
}