{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int numArgs = call.getChildCount() - 1;\n\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (numArgs < minArgs || numArgs > maxArgs) {\n        StringBuilder expectedCount = new StringBuilder();\n        if (minArgs == maxArgs) {\n            expectedCount.append(minArgs);\n            expectedCount.append(\" argument\");\n            if (minArgs != 1) {\n                expectedCount.append(\"s\");\n            }\n        } else {\n            if (minArgs > 0) {\n                expectedCount.append(\"at least \");\n                expectedCount.append(minArgs);\n                expectedCount.append(\" argument\");\n                if (minArgs != 1) {\n                    expectedCount.append(\"s\");\n                }\n                if (maxArgs != Integer.MAX_VALUE) {\n                    expectedCount.append(\" and \");\n                }\n            }\n            if (maxArgs != Integer.MAX_VALUE) {\n                expectedCount.append(\"no more than \");\n                expectedCount.append(maxArgs);\n                expectedCount.append(\" argument\");\n                if (maxArgs != 1) {\n                    expectedCount.append(\"s\");\n                }\n            }\n        }\n\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs),\n            expectedCount.toString()\n        );\n        return;\n    }\n\n    int ordinal = 0;\n    while (arguments.hasNext() && parameters.hasNext()) {\n        Node parameter = parameters.next();\n        Node argument = arguments.next();\n        ordinal++;\n\n        validator.expectArgumentMatchesParameter(\n            t, argument, getJSType(argument), getJSType(parameter), call, ordinal\n        );\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..820c2f66 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,64 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n-\n     int numArgs = call.getChildCount() - 1;\n+\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (numArgs < minArgs || numArgs > maxArgs) {\n+        StringBuilder expectedCount = new StringBuilder();\n+        if (minArgs == maxArgs) {\n+            expectedCount.append(minArgs);\n+            expectedCount.append(\" argument\");\n+            if (minArgs != 1) {\n+                expectedCount.append(\"s\");\n+            }\n+        } else {\n+            if (minArgs > 0) {\n+                expectedCount.append(\"at least \");\n+                expectedCount.append(minArgs);\n+                expectedCount.append(\" argument\");\n+                if (minArgs != 1) {\n+                    expectedCount.append(\"s\");\n+                }\n+                if (maxArgs != Integer.MAX_VALUE) {\n+                    expectedCount.append(\" and \");\n+                }\n+            }\n+            if (maxArgs != Integer.MAX_VALUE) {\n+                expectedCount.append(\"no more than \");\n+                expectedCount.append(maxArgs);\n+                expectedCount.append(\" argument\");\n+                if (maxArgs != 1) {\n+                    expectedCount.append(\"s\");\n+                }\n+            }\n+        }\n+\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs),\n+            expectedCount.toString()\n+        );\n+        return;\n     }\n-  }\n+\n+    int ordinal = 0;\n+    while (arguments.hasNext() && parameters.hasNext()) {\n+        Node parameter = parameters.next();\n+        Node argument = arguments.next();\n+        ordinal++;\n+\n+        validator.expectArgumentMatchesParameter(\n+            t, argument, getJSType(argument), getJSType(parameter), call, ordinal\n+        );\n+    }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<... at least 0 argument[(s) and no more than 0 argument(s)].> but was:<... at least 0 argument[s argument(s){3}].>",
    "test_result": "FAIL"
}