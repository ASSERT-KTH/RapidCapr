{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        String functionName = child.getString();\n        if (!changed.contains(functionName)) {\n          changed.add(functionName);\n          \n          // Replace call with new reference\n          Node fnNode = NodeUtil.getEnclosingFunction(node);\n          boolean fnChanged = false;\n          String fnName = NodeUtil.getNearestAncestorOfType(fnNode, Token.ASSIGN).getFirstChild().getString();\n          if (!fnName.isEmpty()) {\n            fnChanged = changed.add(fnName);\n          }\n          if (fnChanged) {\n            Node parent = fnNode.getParent();\n            Node replacement = IR.var(IR.name(fnName), fnNode.detachFromParent());\n            parent.replaceChild(fnNode, replacement);\n          }\n        }\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..6fd493bf 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -777,7 +777,30 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+        String functionName = child.getString();\n+        if (!changed.contains(functionName)) {\n+          changed.add(functionName);\n+          \n+          // Replace call with new reference\n+          Node fnNode = NodeUtil.getEnclosingFunction(node);\n+          boolean fnChanged = false;\n+          String fnName = NodeUtil.getNearestAncestorOfType(fnNode, Token.ASSIGN).getFirstChild().getString();\n+          if (!fnName.isEmpty()) {\n+            fnChanged = changed.add(fnName);\n+          }\n+          if (fnChanged) {\n+            Node parent = fnNode.getParent();\n+            Node replacement = IR.var(IR.name(fnName), fnNode.detachFromParent());\n+            parent.replaceChild(fnNode, replacement);\n+          }\n+        }\n+      }\n+    }\n+\n+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+      findCalledFunctions(c, changed);\n+    }\n+  }\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}