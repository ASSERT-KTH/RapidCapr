{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    final int seqEnd = input.length();\n    if ((input.charAt(index) == '&') && (index + 2 < seqEnd)) {\n        // Check for numeric entities \"&#[0-9]+;\"\n        if ((input.charAt(index + 1) == '#') && (input.charAt(index + 2) >= '0') && (input.charAt(index + 2) <= '9')) {\n            int i = index + 3;\n            while ((i < seqEnd) && (input.charAt(i) >= '0') && (input.charAt(i) <= '9')) {\n                i++;\n            }\n            if ((i < seqEnd) && (input.charAt(i) == ';')) {\n                try {\n                    int codePoint = Integer.parseInt(input.subSequence(index + 2, i).toString(), 10);\n                    if (Character.isSupplementaryCodePoint(codePoint)) {\n                        out.write(Character.toChars(codePoint));\n                    } else {\n                        out.write(codePoint);\n                    }\n                    return (i - index) + 1;\n                } catch (NumberFormatException e) {\n                    return 0;\n                }\n            }\n        } else {\n            // Check for named entities \"&name;\"\n            int i = index + 1;\n            while ((i < seqEnd) && (input.charAt(i) != ';')) {\n                i++;\n            }\n            if ((i < seqEnd) && (i > index + 1)) {\n                String name = input.subSequence(index + 1, i).toString();\n                if (nameToCodepoint.containsKey(name)) {\n                    int codePoint = nameToCodepoint.get(name);\n                    if (Character.isSupplementaryCodePoint(codePoint)) {\n                        out.write(Character.toChars(codePoint));\n                    } else {\n                        out.write(codePoint);\n                    }\n                    return (i - index) + 1;\n                }\n            }\n        }\n    }\n\n    return 0;\n}\n\nprivate static final Map<String, Integer> nameToCodepoint;\nstatic {\n    final String[][] ABBREVS = {\n        { \"AElig\", \"198\" },\n        { \"AMP\", \"38\" },\n        { \"Aacute\", \"193\" },\n        { \"Acirc\", \"194\" },\n        { \"Agrave\", \"192\" },\n        { \"Alpha\", \"913\" },\n        { \"Aring\", \"197\" },\n        { \"Atilde\", \"195\" },\n        { \"Auml\", \"196\" },\n        { \"Beta\", \"914\" },\n        { \"COPY\", \"169\" },\n        { \"Ccedil\", \"199\" },\n        { \"Chi\", \"935\" },\n        { \"Dagger\", \"8225\" },\n        { \"Delta\", \"916\" },\n        { \"ETH\", \"208\" },\n        { \"Eacute\", \"201\" },\n        { \"Ecirc\", \"202\" },\n        { \"Egrave\", \"200\" },\n        { \"Epsilon\", \"917\" },\n        { \"Eta\", \"919\" },\n        { \"Euml\", \"203\" },\n        { \"Gamma\", \"915\" },\n        { \"Iacute\", \"205\" },\n        { \"Icirc\", \"206\" },\n        { \"Igrave\", \"204\" },\n        { \"Iota\", \"921\" },\n        { \"Iuml\", \"207\" },\n        { \"Kappa\", \"922\" },\n        { \"Lambda\", \"923\" },\n        { \"Ntilde\", \"209\" },\n        { \"Nu\", \"925\" },\n        { \"OElig\", \"338\" },\n        { \"Oacute\", \"211\" },\n        { \"Ocirc\", \"212\" },\n        { \"Ograve\", \"210\" },\n        { \"Omega\", \"937\" },\n        { \"Omicron\", \"927\" },\n        { \"Oslash\", \"216\" },\n        { \"Otilde\", \"213\" },\n        { \"Ouml\", \"214\" },\n        { \"Phi\", \"934\" },\n        { \"Pi\", \"928\" },\n        { \"Prime\", \"8243\" },\n        { \"Psi\", \"936\" },\n        { \"QUOT\", \"34\" },\n        { \"REG\", \"174\" },\n        { \"Rho\", \"929\" },\n        { \"Scaron\", \"352\" },\n        { \"Sigma\", \"931\" },\n        { \"THORN\", \"222\" },\n        { \"Tau\", \"932\" },\n        { \"Theta\", \"920\" },\n        { \"Uacute\", \"218\" },\n        { \"Ucirc\", \"219\" },\n        { \"Ugrave\", \"217\" },\n        { \"Upsilon\", \"933\" },\n        { \"Uuml\", \"220\" },\n        { \"Xi\", \"926\" },\n        { \"Yacute\", \"221\" },\n        { \"Yuml\", \"376\" },\n        { \"Zeta\", \"918\" },\n        { \"aacute\", \"225\" },\n        { \"acirc\", \"226\" },\n        { \"acute\", \"180\" },\n        { \"aelig\", \"230\" },\n        { \"agrave\", \"224\" },\n        { \"alefsym\", \"8501\" },\n        { \"alpha\", \"945\" },\n        { \"amp\", \"38\" },\n        { \"and\", \"8743\" },\n        { \"ang\", \"8736\" },\n        { \"apos\", \"39\" },\n        { \"aring\", \"229\" },\n        { \"asymp\", \"8776\" },\n        { \"atilde\", \"227\" },\n        { \"auml\", \"228\" },\n        { \"bdquo\", \"8222\" },\n        { \"beta\", \"946\" },\n        { \"brvbar\", \"166\" },\n        { \"bull\", \"8226\" },\n        { \"cap\", \"8745\" },\n        { \"ccedil\", \"231\" },\n        { \"cedil\", \"184\" },\n        { \"cent\", \"162\" },\n        { \"chi\", \"967\" },\n        { \"circ\", \"710\" },\n        { \"clubs\", \"9827\" },\n        { \"cong\", \"8773\" },\n        { \"copy\", \"169\" },\n        { \"crarr\", \"8629\" },\n        { \"cup\", \"8746\" },\n        { \"curren\", \"164\" },\n        { \"dArr\", \"8659\" },\n        { \"dagger\", \"8224\" },\n        { \"darr\", \"8595\" },\n        { \"deg\", \"176\" },\n        { \"delta\", \"948\" },\n        { \"diams\", \"9830\" },\n        { \"divide\", \"247\" },\n        { \"eacute\", \"233\" },\n        { \"ecirc\", \"234\" },\n        { \"egrave\", \"232\" },\n        { \"empty\", \"8709\" },\n        { \"emsp\", \"8195\" },\n        { \"ensp\", \"8194\" },\n        { \"epsilon\", \"949\" },\n        { \"equiv\", \"8801\" },\n        { \"eta\", \"951\" },\n        { \"eth\", \"240\" },\n        { \"euml\", \"235\" },\n        { \"euro\", \"8364\" },\n        { \"exist\", \"8707\" },\n        { \"fnof\", \"402\" },\n        { \"forall\", \"8704\" },\n        { \"frac12\", \"189\" },\n        { \"frac14\", \"188\" },\n        { \"frac34\", \"190\" },\n        { \"frasl\", \"8260\" },\n        { \"gamma\", \"947\" },\n        { \"ge\", \"8805\" },\n        { \"gt\", \"62\" },\n        { \"hArr\", \"8660\" },\n        { \"harr\", \"8596\" },\n        { \"hearts\", \"9829\" },\n        { \"hellip\", \"8230\" },\n        { \"iacute\", \"237\" },\n        { \"icirc\", \"238\" },\n        { \"iexcl\", \"161\" },\n        { \"igrave\", \"236\" },\n        { \"image\", \"8465\" },\n        { \"infin\", \"8734\" },\n        { \"int\", \"8747\" },\n        { \"iota\", \"953\" },\n        { \"iquest\", \"191\" },\n        { \"isin\", \"8712\" },\n        { \"iuml\", \"239\" },\n        { \"kappa\", \"954\" },\n        { \"lArr\", \"8656\" },\n        { \"lambda\", \"955\" },\n        { \"lang\", \"9001\" },\n        { \"laquo\", \"171\" },\n        { \"larr\", \"8592\" },\n        { \"lceil\", \"8968\" },\n        { \"ldquo\", \"8220\" },\n        { \"le\", \"8804\" },\n        { \"lfloor\", \"8970\" },\n        { \"lowast\", \"8727\" },\n        { \"loz\", \"9674\" },\n        { \"lrm\", \"8206\" },\n        { \"lsaquo\", \"8249\" },\n        { \"lsquo\", \"8216\" },\n        { \"lt\", \"60\" },\n        { \"macr\", \"175\" },\n        { \"mdash\", \"8212\" },\n        { \"micro\", \"181\" },\n        { \"middot\", \"183\" },\n        { \"minus\", \"8722\" },\n        { \"mu\", \"956\" },\n        { \"nabla\", \"8711\" },\n        { \"nbsp\", \"160\" },\n        { \"ndash\", \"8211\" },\n        { \"ne\", \"8800\" },\n        { \"ni\", \"8715\" },\n        { \"not\", \"172\" },\n        { \"notin\", \"8713\" },\n        { \"nsub\", \"8836\" },\n        { \"ntilde\", \"241\" },\n        { \"nu\", \"957\" },\n        { \"oacute\", \"243\" },\n        { \"ocirc\", \"244\" },\n        { \"oelig\", \"339\" },\n        { \"ograve\", \"242\" },\n        { \"oline\", \"8254\" },\n        { \"omega\", \"969\" },\n        { \"omicron\", \"959\" },\n        { \"oplus\", \"8853\" },\n        { \"or\", \"8744\" },\n        { \"ordf\", \"170\" },\n        { \"ordm\", \"186\" },\n        { \"oslash\", \"248\" },\n        { \"otilde\", \"245\" },\n        { \"otimes\", \"8855\" },\n        { \"ouml\", \"246\" },\n        { \"para\", \"182\" },\n        { \"part\", \"8706\" },\n        { \"permil\", \"8240\" },\n        { \"perp\", \"8869\" },\n        { \"phi\", \"966\" },\n        { \"pi\", \"960\" },\n        { \"piv\", \"982\" },\n        { \"plusmn\", \"177\" },\n        { \"pound\", \"163\" },\n        { \"prime\", \"8242\" },\n        { \"prod\", \"8719\" },\n        { \"prop\", \"8733\" },\n        { \"psi\", \"968\" },\n        { \"quot\", \"34\" },\n        { \"rArr\", \"8658\" },\n        { \"radic\", \"8730\" },\n        { \"rang\", \"9002\" },\n        { \"raquo\", \"187\" },\n        { \"rarr\", \"8594\" },\n        { \"rceil\", \"8969\" },\n        { \"rdquo\", \"8221\" },\n        { \"real\", \"8476\" },\n        { \"reg\", \"174\" },\n        { \"rfloor\", \"8971\" },\n        { \"rho\", \"961\" },\n        { \"rlm\", \"8207\" },\n        { \"rsaquo\", \"8250\" },\n        { \"rsquo\", \"8217\" },\n        { \"sbquo\", \"8218\" },\n        { \"scaron\", \"353\" },\n        { \"sdot\", \"8901\" },\n        { \"sect\", \"167\" },\n        { \"shy\", \"173\" },\n        { \"sigma\", \"963\" },\n        { \"sigmaf\", \"962\" },\n        { \"sim\", \"8764\" },\n        { \"spades\", \"9824\" },\n        { \"sub\", \"8834\" },\n        { \"sube\", \"8838\" },\n        { \"sum\", \"8721\" },\n        { \"sup\", \"8835\" },\n        { \"sup1\", \"185\" },\n        { \"sup2\", \"178\" },\n        { \"sup3\", \"179\" },\n        { \"supe\", \"8839\" },\n        { \"szlig\"",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..c8e4c832 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,283 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    final int seqEnd = input.length();\n+    if ((input.charAt(index) == '&') && (index + 2 < seqEnd)) {\n+        // Check for numeric entities \"&#[0-9]+;\"\n+        if ((input.charAt(index + 1) == '#') && (input.charAt(index + 2) >= '0') && (input.charAt(index + 2) <= '9')) {\n+            int i = index + 3;\n+            while ((i < seqEnd) && (input.charAt(i) >= '0') && (input.charAt(i) <= '9')) {\n+                i++;\n             }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n+            if ((i < seqEnd) && (input.charAt(i) == ';')) {\n+                try {\n+                    int codePoint = Integer.parseInt(input.subSequence(index + 2, i).toString(), 10);\n+                    if (Character.isSupplementaryCodePoint(codePoint)) {\n+                        out.write(Character.toChars(codePoint));\n+                    } else {\n+                        out.write(codePoint);\n+                    }\n+                    return (i - index) + 1;\n+                } catch (NumberFormatException e) {\n+                    return 0;\n                 }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n             }\n-\n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n+        } else {\n+            // Check for named entities \"&name;\"\n+            int i = index + 1;\n+            while ((i < seqEnd) && (input.charAt(i) != ';')) {\n+                i++;\n+            }\n+            if ((i < seqEnd) && (i > index + 1)) {\n+                String name = input.subSequence(index + 1, i).toString();\n+                if (nameToCodepoint.containsKey(name)) {\n+                    int codePoint = nameToCodepoint.get(name);\n+                    if (Character.isSupplementaryCodePoint(codePoint)) {\n+                        out.write(Character.toChars(codePoint));\n+                    } else {\n+                        out.write(codePoint);\n+                    }\n+                    return (i - index) + 1;\n+                }\n             }\n-\n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n-        return 0;\n     }\n+\n+    return 0;\n+}\n+\n+private static final Map<String, Integer> nameToCodepoint;\n+static {\n+    final String[][] ABBREVS = {\n+        { \"AElig\", \"198\" },\n+        { \"AMP\", \"38\" },\n+        { \"Aacute\", \"193\" },\n+        { \"Acirc\", \"194\" },\n+        { \"Agrave\", \"192\" },\n+        { \"Alpha\", \"913\" },\n+        { \"Aring\", \"197\" },\n+        { \"Atilde\", \"195\" },\n+        { \"Auml\", \"196\" },\n+        { \"Beta\", \"914\" },\n+        { \"COPY\", \"169\" },\n+        { \"Ccedil\", \"199\" },\n+        { \"Chi\", \"935\" },\n+        { \"Dagger\", \"8225\" },\n+        { \"Delta\", \"916\" },\n+        { \"ETH\", \"208\" },\n+        { \"Eacute\", \"201\" },\n+        { \"Ecirc\", \"202\" },\n+        { \"Egrave\", \"200\" },\n+        { \"Epsilon\", \"917\" },\n+        { \"Eta\", \"919\" },\n+        { \"Euml\", \"203\" },\n+        { \"Gamma\", \"915\" },\n+        { \"Iacute\", \"205\" },\n+        { \"Icirc\", \"206\" },\n+        { \"Igrave\", \"204\" },\n+        { \"Iota\", \"921\" },\n+        { \"Iuml\", \"207\" },\n+        { \"Kappa\", \"922\" },\n+        { \"Lambda\", \"923\" },\n+        { \"Ntilde\", \"209\" },\n+        { \"Nu\", \"925\" },\n+        { \"OElig\", \"338\" },\n+        { \"Oacute\", \"211\" },\n+        { \"Ocirc\", \"212\" },\n+        { \"Ograve\", \"210\" },\n+        { \"Omega\", \"937\" },\n+        { \"Omicron\", \"927\" },\n+        { \"Oslash\", \"216\" },\n+        { \"Otilde\", \"213\" },\n+        { \"Ouml\", \"214\" },\n+        { \"Phi\", \"934\" },\n+        { \"Pi\", \"928\" },\n+        { \"Prime\", \"8243\" },\n+        { \"Psi\", \"936\" },\n+        { \"QUOT\", \"34\" },\n+        { \"REG\", \"174\" },\n+        { \"Rho\", \"929\" },\n+        { \"Scaron\", \"352\" },\n+        { \"Sigma\", \"931\" },\n+        { \"THORN\", \"222\" },\n+        { \"Tau\", \"932\" },\n+        { \"Theta\", \"920\" },\n+        { \"Uacute\", \"218\" },\n+        { \"Ucirc\", \"219\" },\n+        { \"Ugrave\", \"217\" },\n+        { \"Upsilon\", \"933\" },\n+        { \"Uuml\", \"220\" },\n+        { \"Xi\", \"926\" },\n+        { \"Yacute\", \"221\" },\n+        { \"Yuml\", \"376\" },\n+        { \"Zeta\", \"918\" },\n+        { \"aacute\", \"225\" },\n+        { \"acirc\", \"226\" },\n+        { \"acute\", \"180\" },\n+        { \"aelig\", \"230\" },\n+        { \"agrave\", \"224\" },\n+        { \"alefsym\", \"8501\" },\n+        { \"alpha\", \"945\" },\n+        { \"amp\", \"38\" },\n+        { \"and\", \"8743\" },\n+        { \"ang\", \"8736\" },\n+        { \"apos\", \"39\" },\n+        { \"aring\", \"229\" },\n+        { \"asymp\", \"8776\" },\n+        { \"atilde\", \"227\" },\n+        { \"auml\", \"228\" },\n+        { \"bdquo\", \"8222\" },\n+        { \"beta\", \"946\" },\n+        { \"brvbar\", \"166\" },\n+        { \"bull\", \"8226\" },\n+        { \"cap\", \"8745\" },\n+        { \"ccedil\", \"231\" },\n+        { \"cedil\", \"184\" },\n+        { \"cent\", \"162\" },\n+        { \"chi\", \"967\" },\n+        { \"circ\", \"710\" },\n+        { \"clubs\", \"9827\" },\n+        { \"cong\", \"8773\" },\n+        { \"copy\", \"169\" },\n+        { \"crarr\", \"8629\" },\n+        { \"cup\", \"8746\" },\n+        { \"curren\", \"164\" },\n+        { \"dArr\", \"8659\" },\n+        { \"dagger\", \"8224\" },\n+        { \"darr\", \"8595\" },\n+        { \"deg\", \"176\" },\n+        { \"delta\", \"948\" },\n+        { \"diams\", \"9830\" },\n+        { \"divide\", \"247\" },\n+        { \"eacute\", \"233\" },\n+        { \"ecirc\", \"234\" },\n+        { \"egrave\", \"232\" },\n+        { \"empty\", \"8709\" },\n+        { \"emsp\", \"8195\" },\n+        { \"ensp\", \"8194\" },\n+        { \"epsilon\", \"949\" },\n+        { \"equiv\", \"8801\" },\n+        { \"eta\", \"951\" },\n+        { \"eth\", \"240\" },\n+        { \"euml\", \"235\" },\n+        { \"euro\", \"8364\" },\n+        { \"exist\", \"8707\" },\n+        { \"fnof\", \"402\" },\n+        { \"forall\", \"8704\" },\n+        { \"frac12\", \"189\" },\n+        { \"frac14\", \"188\" },\n+        { \"frac34\", \"190\" },\n+        { \"frasl\", \"8260\" },\n+        { \"gamma\", \"947\" },\n+        { \"ge\", \"8805\" },\n+        { \"gt\", \"62\" },\n+        { \"hArr\", \"8660\" },\n+        { \"harr\", \"8596\" },\n+        { \"hearts\", \"9829\" },\n+        { \"hellip\", \"8230\" },\n+        { \"iacute\", \"237\" },\n+        { \"icirc\", \"238\" },\n+        { \"iexcl\", \"161\" },\n+        { \"igrave\", \"236\" },\n+        { \"image\", \"8465\" },\n+        { \"infin\", \"8734\" },\n+        { \"int\", \"8747\" },\n+        { \"iota\", \"953\" },\n+        { \"iquest\", \"191\" },\n+        { \"isin\", \"8712\" },\n+        { \"iuml\", \"239\" },\n+        { \"kappa\", \"954\" },\n+        { \"lArr\", \"8656\" },\n+        { \"lambda\", \"955\" },\n+        { \"lang\", \"9001\" },\n+        { \"laquo\", \"171\" },\n+        { \"larr\", \"8592\" },\n+        { \"lceil\", \"8968\" },\n+        { \"ldquo\", \"8220\" },\n+        { \"le\", \"8804\" },\n+        { \"lfloor\", \"8970\" },\n+        { \"lowast\", \"8727\" },\n+        { \"loz\", \"9674\" },\n+        { \"lrm\", \"8206\" },\n+        { \"lsaquo\", \"8249\" },\n+        { \"lsquo\", \"8216\" },\n+        { \"lt\", \"60\" },\n+        { \"macr\", \"175\" },\n+        { \"mdash\", \"8212\" },\n+        { \"micro\", \"181\" },\n+        { \"middot\", \"183\" },\n+        { \"minus\", \"8722\" },\n+        { \"mu\", \"956\" },\n+        { \"nabla\", \"8711\" },\n+        { \"nbsp\", \"160\" },\n+        { \"ndash\", \"8211\" },\n+        { \"ne\", \"8800\" },\n+        { \"ni\", \"8715\" },\n+        { \"not\", \"172\" },\n+        { \"notin\", \"8713\" },\n+        { \"nsub\", \"8836\" },\n+        { \"ntilde\", \"241\" },\n+        { \"nu\", \"957\" },\n+        { \"oacute\", \"243\" },\n+        { \"ocirc\", \"244\" },\n+        { \"oelig\", \"339\" },\n+        { \"ograve\", \"242\" },\n+        { \"oline\", \"8254\" },\n+        { \"omega\", \"969\" },\n+        { \"omicron\", \"959\" },\n+        { \"oplus\", \"8853\" },\n+        { \"or\", \"8744\" },\n+        { \"ordf\", \"170\" },\n+        { \"ordm\", \"186\" },\n+        { \"oslash\", \"248\" },\n+        { \"otilde\", \"245\" },\n+        { \"otimes\", \"8855\" },\n+        { \"ouml\", \"246\" },\n+        { \"para\", \"182\" },\n+        { \"part\", \"8706\" },\n+        { \"permil\", \"8240\" },\n+        { \"perp\", \"8869\" },\n+        { \"phi\", \"966\" },\n+        { \"pi\", \"960\" },\n+        { \"piv\", \"982\" },\n+        { \"plusmn\", \"177\" },\n+        { \"pound\", \"163\" },\n+        { \"prime\", \"8242\" },\n+        { \"prod\", \"8719\" },\n+        { \"prop\", \"8733\" },\n+        { \"psi\", \"968\" },\n+        { \"quot\", \"34\" },\n+        { \"rArr\", \"8658\" },\n+        { \"radic\", \"8730\" },\n+        { \"rang\", \"9002\" },\n+        { \"raquo\", \"187\" },\n+        { \"rarr\", \"8594\" },\n+        { \"rceil\", \"8969\" },\n+        { \"rdquo\", \"8221\" },\n+        { \"real\", \"8476\" },\n+        { \"reg\", \"174\" },\n+        { \"rfloor\", \"8971\" },\n+        { \"rho\", \"961\" },\n+        { \"rlm\", \"8207\" },\n+        { \"rsaquo\", \"8250\" },\n+        { \"rsquo\", \"8217\" },\n+        { \"sbquo\", \"8218\" },\n+        { \"scaron\", \"353\" },\n+        { \"sdot\", \"8901\" },\n+        { \"sect\", \"167\" },\n+        { \"shy\", \"173\" },\n+        { \"sigma\", \"963\" },\n+        { \"sigmaf\", \"962\" },\n+        { \"sim\", \"8764\" },\n+        { \"spades\", \"9824\" },\n+        { \"sub\", \"8834\" },\n+        { \"sube\", \"8838\" },\n+        { \"sum\", \"8721\" },\n+        { \"sup\", \"8835\" },\n+        { \"sup1\", \"185\" },\n+        { \"sup2\", \"178\" },\n+        { \"sup3\", \"179\" },\n+        { \"supe\", \"8839\" },\n+        { \"szlig\"\n }",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}